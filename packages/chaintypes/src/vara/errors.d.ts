// Generated by dedot cli

import type { GenericChainErrors, GenericPalletError, RpcVersion } from 'dedot/types';

export interface ChainErrors<Rv extends RpcVersion> extends GenericChainErrors<Rv> {
  /**
   * Pallet `System`'s errors
   **/
  system: {
    /**
     * The name of specification does not match between the current runtime
     * and the new runtime.
     **/
    InvalidSpecName: GenericPalletError<Rv>;

    /**
     * The specification version is not allowed to decrease between the current runtime
     * and the new runtime.
     **/
    SpecVersionNeedsToIncrease: GenericPalletError<Rv>;

    /**
     * Failed to extract the runtime version from the new runtime.
     *
     * Either calling `Core_version` or decoding `RuntimeVersion` failed.
     **/
    FailedToExtractRuntimeVersion: GenericPalletError<Rv>;

    /**
     * Suicide called when the account has non-default composite data.
     **/
    NonDefaultComposite: GenericPalletError<Rv>;

    /**
     * There is a non-zero reference count preventing the account from being purged.
     **/
    NonZeroRefCount: GenericPalletError<Rv>;

    /**
     * The origin filter prevent the call to be dispatched.
     **/
    CallFiltered: GenericPalletError<Rv>;

    /**
     * A multi-block migration is ongoing and prevents the current code from being replaced.
     **/
    MultiBlockMigrationsOngoing: GenericPalletError<Rv>;

    /**
     * No upgrade authorized.
     **/
    NothingAuthorized: GenericPalletError<Rv>;

    /**
     * The submitted code is not authorized.
     **/
    Unauthorized: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `Babe`'s errors
   **/
  babe: {
    /**
     * An equivocation proof provided as part of an equivocation report is invalid.
     **/
    InvalidEquivocationProof: GenericPalletError<Rv>;

    /**
     * A key ownership proof provided as part of an equivocation report is invalid.
     **/
    InvalidKeyOwnershipProof: GenericPalletError<Rv>;

    /**
     * A given equivocation report is valid but already previously reported.
     **/
    DuplicateOffenceReport: GenericPalletError<Rv>;

    /**
     * Submitted configuration is invalid.
     **/
    InvalidConfiguration: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `Grandpa`'s errors
   **/
  grandpa: {
    /**
     * Attempt to signal GRANDPA pause when the authority set isn't live
     * (either paused or already pending pause).
     **/
    PauseFailed: GenericPalletError<Rv>;

    /**
     * Attempt to signal GRANDPA resume when the authority set isn't paused
     * (either live or already pending resume).
     **/
    ResumeFailed: GenericPalletError<Rv>;

    /**
     * Attempt to signal GRANDPA change with one already pending.
     **/
    ChangePending: GenericPalletError<Rv>;

    /**
     * Cannot signal forced change so soon after last.
     **/
    TooSoon: GenericPalletError<Rv>;

    /**
     * A key ownership proof provided as part of an equivocation report is invalid.
     **/
    InvalidKeyOwnershipProof: GenericPalletError<Rv>;

    /**
     * An equivocation proof provided as part of an equivocation report is invalid.
     **/
    InvalidEquivocationProof: GenericPalletError<Rv>;

    /**
     * A given equivocation report is valid but already previously reported.
     **/
    DuplicateOffenceReport: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `Balances`'s errors
   **/
  balances: {
    /**
     * Vesting balance too high to send value.
     **/
    VestingBalance: GenericPalletError<Rv>;

    /**
     * Account liquidity restrictions prevent withdrawal.
     **/
    LiquidityRestrictions: GenericPalletError<Rv>;

    /**
     * Balance too low to send value.
     **/
    InsufficientBalance: GenericPalletError<Rv>;

    /**
     * Value too low to create account due to existential deposit.
     **/
    ExistentialDeposit: GenericPalletError<Rv>;

    /**
     * Transfer/payment would kill account.
     **/
    Expendability: GenericPalletError<Rv>;

    /**
     * A vesting schedule already exists for this account.
     **/
    ExistingVestingSchedule: GenericPalletError<Rv>;

    /**
     * Beneficiary account must pre-exist.
     **/
    DeadAccount: GenericPalletError<Rv>;

    /**
     * Number of named reserves exceed `MaxReserves`.
     **/
    TooManyReserves: GenericPalletError<Rv>;

    /**
     * Number of holds exceed `VariantCountOf<T::RuntimeHoldReason>`.
     **/
    TooManyHolds: GenericPalletError<Rv>;

    /**
     * Number of freezes exceed `MaxFreezes`.
     **/
    TooManyFreezes: GenericPalletError<Rv>;

    /**
     * The issuance cannot be modified since it is already deactivated.
     **/
    IssuanceDeactivated: GenericPalletError<Rv>;

    /**
     * The delta cannot be zero.
     **/
    DeltaZero: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `Session`'s errors
   **/
  session: {
    /**
     * Invalid ownership proof.
     **/
    InvalidProof: GenericPalletError<Rv>;

    /**
     * No associated validator ID for account.
     **/
    NoAssociatedValidatorId: GenericPalletError<Rv>;

    /**
     * Registered duplicate key.
     **/
    DuplicatedKey: GenericPalletError<Rv>;

    /**
     * No keys are associated with this account.
     **/
    NoKeys: GenericPalletError<Rv>;

    /**
     * Key setting account is not live, so it's impossible to associate keys.
     **/
    NoAccount: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `Utility`'s errors
   **/
  utility: {
    /**
     * Too many calls batched.
     **/
    TooManyCalls: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `Vesting`'s errors
   **/
  vesting: {
    /**
     * The account given is not vesting.
     **/
    NotVesting: GenericPalletError<Rv>;

    /**
     * The account already has `MaxVestingSchedules` count of schedules and thus
     * cannot add another one. Consider merging existing schedules in order to add another.
     **/
    AtMaxVestingSchedules: GenericPalletError<Rv>;

    /**
     * Amount being transferred is too low to create a vesting schedule.
     **/
    AmountLow: GenericPalletError<Rv>;

    /**
     * An index was out of bounds of the vesting schedules.
     **/
    ScheduleIndexOutOfBounds: GenericPalletError<Rv>;

    /**
     * Failed to create a new schedule because some parameter was invalid.
     **/
    InvalidScheduleParams: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `BagsList`'s errors
   **/
  bagsList: {
    /**
     * A error in the list interface implementation.
     **/
    List: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `ImOnline`'s errors
   **/
  imOnline: {
    /**
     * Non existent public key.
     **/
    InvalidKey: GenericPalletError<Rv>;

    /**
     * Duplicated heartbeat.
     **/
    DuplicatedHeartbeat: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `Staking`'s errors
   **/
  staking: {
    /**
     * Not a controller account.
     **/
    NotController: GenericPalletError<Rv>;

    /**
     * Not a stash account.
     **/
    NotStash: GenericPalletError<Rv>;

    /**
     * Stash is already bonded.
     **/
    AlreadyBonded: GenericPalletError<Rv>;

    /**
     * Controller is already paired.
     **/
    AlreadyPaired: GenericPalletError<Rv>;

    /**
     * Targets cannot be empty.
     **/
    EmptyTargets: GenericPalletError<Rv>;

    /**
     * Duplicate index.
     **/
    DuplicateIndex: GenericPalletError<Rv>;

    /**
     * Slash record index out of bounds.
     **/
    InvalidSlashIndex: GenericPalletError<Rv>;

    /**
     * Cannot have a validator or nominator role, with value less than the minimum defined by
     * governance (see `MinValidatorBond` and `MinNominatorBond`). If unbonding is the
     * intention, `chill` first to remove one's role as validator/nominator.
     **/
    InsufficientBond: GenericPalletError<Rv>;

    /**
     * Can not schedule more unlock chunks.
     **/
    NoMoreChunks: GenericPalletError<Rv>;

    /**
     * Can not rebond without unlocking chunks.
     **/
    NoUnlockChunk: GenericPalletError<Rv>;

    /**
     * Attempting to target a stash that still has funds.
     **/
    FundedTarget: GenericPalletError<Rv>;

    /**
     * Invalid era to reward.
     **/
    InvalidEraToReward: GenericPalletError<Rv>;

    /**
     * Invalid number of nominations.
     **/
    InvalidNumberOfNominations: GenericPalletError<Rv>;

    /**
     * Items are not sorted and unique.
     **/
    NotSortedAndUnique: GenericPalletError<Rv>;

    /**
     * Rewards for this era have already been claimed for this validator.
     **/
    AlreadyClaimed: GenericPalletError<Rv>;

    /**
     * No nominators exist on this page.
     **/
    InvalidPage: GenericPalletError<Rv>;

    /**
     * Incorrect previous history depth input provided.
     **/
    IncorrectHistoryDepth: GenericPalletError<Rv>;

    /**
     * Incorrect number of slashing spans provided.
     **/
    IncorrectSlashingSpans: GenericPalletError<Rv>;

    /**
     * Internal state has become somehow corrupted and the operation cannot continue.
     **/
    BadState: GenericPalletError<Rv>;

    /**
     * Too many nomination targets supplied.
     **/
    TooManyTargets: GenericPalletError<Rv>;

    /**
     * A nomination target was supplied that was blocked or otherwise not a validator.
     **/
    BadTarget: GenericPalletError<Rv>;

    /**
     * The user has enough bond and thus cannot be chilled forcefully by an external person.
     **/
    CannotChillOther: GenericPalletError<Rv>;

    /**
     * There are too many nominators in the system. Governance needs to adjust the staking
     * settings to keep things safe for the runtime.
     **/
    TooManyNominators: GenericPalletError<Rv>;

    /**
     * There are too many validator candidates in the system. Governance needs to adjust the
     * staking settings to keep things safe for the runtime.
     **/
    TooManyValidators: GenericPalletError<Rv>;

    /**
     * Commission is too low. Must be at least `MinCommission`.
     **/
    CommissionTooLow: GenericPalletError<Rv>;

    /**
     * Some bound is not met.
     **/
    BoundNotMet: GenericPalletError<Rv>;

    /**
     * Used when attempting to use deprecated controller account logic.
     **/
    ControllerDeprecated: GenericPalletError<Rv>;

    /**
     * Cannot reset a ledger.
     **/
    CannotRestoreLedger: GenericPalletError<Rv>;

    /**
     * Provided reward destination is not allowed.
     **/
    RewardDestinationRestricted: GenericPalletError<Rv>;

    /**
     * Not enough funds available to withdraw.
     **/
    NotEnoughFunds: GenericPalletError<Rv>;

    /**
     * Operation not allowed for virtual stakers.
     **/
    VirtualStakerNotAllowed: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `Treasury`'s errors
   **/
  treasury: {
    /**
     * No proposal, bounty or spend at that index.
     **/
    InvalidIndex: GenericPalletError<Rv>;

    /**
     * Too many approvals in the queue.
     **/
    TooManyApprovals: GenericPalletError<Rv>;

    /**
     * The spend origin is valid but the amount it is allowed to spend is lower than the
     * amount to be spent.
     **/
    InsufficientPermission: GenericPalletError<Rv>;

    /**
     * Proposal has not been approved.
     **/
    ProposalNotApproved: GenericPalletError<Rv>;

    /**
     * The balance of the asset kind is not convertible to the balance of the native asset.
     **/
    FailedToConvertBalance: GenericPalletError<Rv>;

    /**
     * The spend has expired and cannot be claimed.
     **/
    SpendExpired: GenericPalletError<Rv>;

    /**
     * The spend is not yet eligible for payout.
     **/
    EarlyPayout: GenericPalletError<Rv>;

    /**
     * The payment has already been attempted.
     **/
    AlreadyAttempted: GenericPalletError<Rv>;

    /**
     * There was some issue with the mechanism of payment.
     **/
    PayoutError: GenericPalletError<Rv>;

    /**
     * The payout was not yet attempted/claimed.
     **/
    NotAttempted: GenericPalletError<Rv>;

    /**
     * The payment has neither failed nor succeeded yet.
     **/
    Inconclusive: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `ConvictionVoting`'s errors
   **/
  convictionVoting: {
    /**
     * Poll is not ongoing.
     **/
    NotOngoing: GenericPalletError<Rv>;

    /**
     * The given account did not vote on the poll.
     **/
    NotVoter: GenericPalletError<Rv>;

    /**
     * The actor has no permission to conduct the action.
     **/
    NoPermission: GenericPalletError<Rv>;

    /**
     * The actor has no permission to conduct the action right now but will do in the future.
     **/
    NoPermissionYet: GenericPalletError<Rv>;

    /**
     * The account is already delegating.
     **/
    AlreadyDelegating: GenericPalletError<Rv>;

    /**
     * The account currently has votes attached to it and the operation cannot succeed until
     * these are removed through `remove_vote`.
     **/
    AlreadyVoting: GenericPalletError<Rv>;

    /**
     * Too high a balance was provided that the account cannot afford.
     **/
    InsufficientFunds: GenericPalletError<Rv>;

    /**
     * The account is not currently delegating.
     **/
    NotDelegating: GenericPalletError<Rv>;

    /**
     * Delegation to oneself makes no sense.
     **/
    Nonsense: GenericPalletError<Rv>;

    /**
     * Maximum number of votes reached.
     **/
    MaxVotesReached: GenericPalletError<Rv>;

    /**
     * The class must be supplied since it is not easily determinable from the state.
     **/
    ClassNeeded: GenericPalletError<Rv>;

    /**
     * The class ID supplied is invalid.
     **/
    BadClass: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `Referenda`'s errors
   **/
  referenda: {
    /**
     * Referendum is not ongoing.
     **/
    NotOngoing: GenericPalletError<Rv>;

    /**
     * Referendum's decision deposit is already paid.
     **/
    HasDeposit: GenericPalletError<Rv>;

    /**
     * The track identifier given was invalid.
     **/
    BadTrack: GenericPalletError<Rv>;

    /**
     * There are already a full complement of referenda in progress for this track.
     **/
    Full: GenericPalletError<Rv>;

    /**
     * The queue of the track is empty.
     **/
    QueueEmpty: GenericPalletError<Rv>;

    /**
     * The referendum index provided is invalid in this context.
     **/
    BadReferendum: GenericPalletError<Rv>;

    /**
     * There was nothing to do in the advancement.
     **/
    NothingToDo: GenericPalletError<Rv>;

    /**
     * No track exists for the proposal origin.
     **/
    NoTrack: GenericPalletError<Rv>;

    /**
     * Any deposit cannot be refunded until after the decision is over.
     **/
    Unfinished: GenericPalletError<Rv>;

    /**
     * The deposit refunder is not the depositor.
     **/
    NoPermission: GenericPalletError<Rv>;

    /**
     * The deposit cannot be refunded since none was made.
     **/
    NoDeposit: GenericPalletError<Rv>;

    /**
     * The referendum status is invalid for this operation.
     **/
    BadStatus: GenericPalletError<Rv>;

    /**
     * The preimage does not exist.
     **/
    PreimageNotExist: GenericPalletError<Rv>;

    /**
     * The preimage is stored with a different length than the one provided.
     **/
    PreimageStoredWithDifferentLength: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `FellowshipCollective`'s errors
   **/
  fellowshipCollective: {
    /**
     * Account is already a member.
     **/
    AlreadyMember: GenericPalletError<Rv>;

    /**
     * Account is not a member.
     **/
    NotMember: GenericPalletError<Rv>;

    /**
     * The given poll index is unknown or has closed.
     **/
    NotPolling: GenericPalletError<Rv>;

    /**
     * The given poll is still ongoing.
     **/
    Ongoing: GenericPalletError<Rv>;

    /**
     * There are no further records to be removed.
     **/
    NoneRemaining: GenericPalletError<Rv>;

    /**
     * Unexpected error in state.
     **/
    Corruption: GenericPalletError<Rv>;

    /**
     * The member's rank is too low to vote.
     **/
    RankTooLow: GenericPalletError<Rv>;

    /**
     * The information provided is incorrect.
     **/
    InvalidWitness: GenericPalletError<Rv>;

    /**
     * The origin is not sufficiently privileged to do the operation.
     **/
    NoPermission: GenericPalletError<Rv>;

    /**
     * The new member to exchange is the same as the old member
     **/
    SameMember: GenericPalletError<Rv>;

    /**
     * The max member count for the rank has been reached.
     **/
    TooManyMembers: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `FellowshipReferenda`'s errors
   **/
  fellowshipReferenda: {
    /**
     * Referendum is not ongoing.
     **/
    NotOngoing: GenericPalletError<Rv>;

    /**
     * Referendum's decision deposit is already paid.
     **/
    HasDeposit: GenericPalletError<Rv>;

    /**
     * The track identifier given was invalid.
     **/
    BadTrack: GenericPalletError<Rv>;

    /**
     * There are already a full complement of referenda in progress for this track.
     **/
    Full: GenericPalletError<Rv>;

    /**
     * The queue of the track is empty.
     **/
    QueueEmpty: GenericPalletError<Rv>;

    /**
     * The referendum index provided is invalid in this context.
     **/
    BadReferendum: GenericPalletError<Rv>;

    /**
     * There was nothing to do in the advancement.
     **/
    NothingToDo: GenericPalletError<Rv>;

    /**
     * No track exists for the proposal origin.
     **/
    NoTrack: GenericPalletError<Rv>;

    /**
     * Any deposit cannot be refunded until after the decision is over.
     **/
    Unfinished: GenericPalletError<Rv>;

    /**
     * The deposit refunder is not the depositor.
     **/
    NoPermission: GenericPalletError<Rv>;

    /**
     * The deposit cannot be refunded since none was made.
     **/
    NoDeposit: GenericPalletError<Rv>;

    /**
     * The referendum status is invalid for this operation.
     **/
    BadStatus: GenericPalletError<Rv>;

    /**
     * The preimage does not exist.
     **/
    PreimageNotExist: GenericPalletError<Rv>;

    /**
     * The preimage is stored with a different length than the one provided.
     **/
    PreimageStoredWithDifferentLength: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `Whitelist`'s errors
   **/
  whitelist: {
    /**
     * The preimage of the call hash could not be loaded.
     **/
    UnavailablePreImage: GenericPalletError<Rv>;

    /**
     * The call could not be decoded.
     **/
    UndecodableCall: GenericPalletError<Rv>;

    /**
     * The weight of the decoded call was higher than the witness.
     **/
    InvalidCallWeightWitness: GenericPalletError<Rv>;

    /**
     * The call was not whitelisted.
     **/
    CallIsNotWhitelisted: GenericPalletError<Rv>;

    /**
     * The call was already whitelisted; No-Op.
     **/
    CallAlreadyWhitelisted: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `Scheduler`'s errors
   **/
  scheduler: {
    /**
     * Failed to schedule a call
     **/
    FailedToSchedule: GenericPalletError<Rv>;

    /**
     * Cannot find the scheduled call.
     **/
    NotFound: GenericPalletError<Rv>;

    /**
     * Given target block number is in the past.
     **/
    TargetBlockNumberInPast: GenericPalletError<Rv>;

    /**
     * Reschedule failed because it does not change scheduled time.
     **/
    RescheduleNoChange: GenericPalletError<Rv>;

    /**
     * Attempt to use a non-named function on a named task.
     **/
    Named: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `Preimage`'s errors
   **/
  preimage: {
    /**
     * Preimage is too large to store on-chain.
     **/
    TooBig: GenericPalletError<Rv>;

    /**
     * Preimage has already been noted on-chain.
     **/
    AlreadyNoted: GenericPalletError<Rv>;

    /**
     * The user is not authorized to perform this action.
     **/
    NotAuthorized: GenericPalletError<Rv>;

    /**
     * The preimage cannot be removed since it has not yet been noted.
     **/
    NotNoted: GenericPalletError<Rv>;

    /**
     * A preimage may not be removed when there are outstanding requests.
     **/
    Requested: GenericPalletError<Rv>;

    /**
     * The preimage request cannot be removed since no outstanding requests exist.
     **/
    NotRequested: GenericPalletError<Rv>;

    /**
     * More than `MAX_HASH_UPGRADE_BULK_COUNT` hashes were requested to be upgraded at once.
     **/
    TooMany: GenericPalletError<Rv>;

    /**
     * Too few hashes were requested to be upgraded (i.e. zero).
     **/
    TooFew: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `Identity`'s errors
   **/
  identity: {
    /**
     * Too many subs-accounts.
     **/
    TooManySubAccounts: GenericPalletError<Rv>;

    /**
     * Account isn't found.
     **/
    NotFound: GenericPalletError<Rv>;

    /**
     * Account isn't named.
     **/
    NotNamed: GenericPalletError<Rv>;

    /**
     * Empty index.
     **/
    EmptyIndex: GenericPalletError<Rv>;

    /**
     * Fee is changed.
     **/
    FeeChanged: GenericPalletError<Rv>;

    /**
     * No identity found.
     **/
    NoIdentity: GenericPalletError<Rv>;

    /**
     * Sticky judgement.
     **/
    StickyJudgement: GenericPalletError<Rv>;

    /**
     * Judgement given.
     **/
    JudgementGiven: GenericPalletError<Rv>;

    /**
     * Invalid judgement.
     **/
    InvalidJudgement: GenericPalletError<Rv>;

    /**
     * The index is invalid.
     **/
    InvalidIndex: GenericPalletError<Rv>;

    /**
     * The target is invalid.
     **/
    InvalidTarget: GenericPalletError<Rv>;

    /**
     * Maximum amount of registrars reached. Cannot add any more.
     **/
    TooManyRegistrars: GenericPalletError<Rv>;

    /**
     * Account ID is already named.
     **/
    AlreadyClaimed: GenericPalletError<Rv>;

    /**
     * Sender is not a sub-account.
     **/
    NotSub: GenericPalletError<Rv>;

    /**
     * Sub-account isn't owned by sender.
     **/
    NotOwned: GenericPalletError<Rv>;

    /**
     * The provided judgement was for a different identity.
     **/
    JudgementForDifferentIdentity: GenericPalletError<Rv>;

    /**
     * Error that occurs when there is an issue paying for judgement.
     **/
    JudgementPaymentFailed: GenericPalletError<Rv>;

    /**
     * The provided suffix is too long.
     **/
    InvalidSuffix: GenericPalletError<Rv>;

    /**
     * The sender does not have permission to issue a username.
     **/
    NotUsernameAuthority: GenericPalletError<Rv>;

    /**
     * The authority cannot allocate any more usernames.
     **/
    NoAllocation: GenericPalletError<Rv>;

    /**
     * The signature on a username was not valid.
     **/
    InvalidSignature: GenericPalletError<Rv>;

    /**
     * Setting this username requires a signature, but none was provided.
     **/
    RequiresSignature: GenericPalletError<Rv>;

    /**
     * The username does not meet the requirements.
     **/
    InvalidUsername: GenericPalletError<Rv>;

    /**
     * The username is already taken.
     **/
    UsernameTaken: GenericPalletError<Rv>;

    /**
     * The requested username does not exist.
     **/
    NoUsername: GenericPalletError<Rv>;

    /**
     * The username cannot be forcefully removed because it can still be accepted.
     **/
    NotExpired: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `Proxy`'s errors
   **/
  proxy: {
    /**
     * There are too many proxies registered or too many announcements pending.
     **/
    TooMany: GenericPalletError<Rv>;

    /**
     * Proxy registration not found.
     **/
    NotFound: GenericPalletError<Rv>;

    /**
     * Sender is not a proxy of the account to be proxied.
     **/
    NotProxy: GenericPalletError<Rv>;

    /**
     * A call which is incompatible with the proxy type's filter was attempted.
     **/
    Unproxyable: GenericPalletError<Rv>;

    /**
     * Account is already a proxy.
     **/
    Duplicate: GenericPalletError<Rv>;

    /**
     * Call may not be made by proxy because it may escalate its privileges.
     **/
    NoPermission: GenericPalletError<Rv>;

    /**
     * Announcement, if made at all, was made too recently.
     **/
    Unannounced: GenericPalletError<Rv>;

    /**
     * Cannot add self as proxy.
     **/
    NoSelfProxy: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `Multisig`'s errors
   **/
  multisig: {
    /**
     * Threshold must be 2 or greater.
     **/
    MinimumThreshold: GenericPalletError<Rv>;

    /**
     * Call is already approved by this signatory.
     **/
    AlreadyApproved: GenericPalletError<Rv>;

    /**
     * Call doesn't need any (more) approvals.
     **/
    NoApprovalsNeeded: GenericPalletError<Rv>;

    /**
     * There are too few signatories in the list.
     **/
    TooFewSignatories: GenericPalletError<Rv>;

    /**
     * There are too many signatories in the list.
     **/
    TooManySignatories: GenericPalletError<Rv>;

    /**
     * The signatories were provided out of order; they should be ordered.
     **/
    SignatoriesOutOfOrder: GenericPalletError<Rv>;

    /**
     * The sender was contained in the other signatories; it shouldn't be.
     **/
    SenderInSignatories: GenericPalletError<Rv>;

    /**
     * Multisig operation not found when attempting to cancel.
     **/
    NotFound: GenericPalletError<Rv>;

    /**
     * Only the account that originally created the multisig is able to cancel it.
     **/
    NotOwner: GenericPalletError<Rv>;

    /**
     * No timepoint was given, yet the multisig operation is already underway.
     **/
    NoTimepoint: GenericPalletError<Rv>;

    /**
     * A different timepoint was given to the multisig operation that is underway.
     **/
    WrongTimepoint: GenericPalletError<Rv>;

    /**
     * A timepoint was given, yet no multisig operation is underway.
     **/
    UnexpectedTimepoint: GenericPalletError<Rv>;

    /**
     * The maximum weight information provided was too low.
     **/
    MaxWeightTooLow: GenericPalletError<Rv>;

    /**
     * The data to be stored is already stored.
     **/
    AlreadyStored: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `ElectionProviderMultiPhase`'s errors
   **/
  electionProviderMultiPhase: {
    /**
     * Submission was too early.
     **/
    PreDispatchEarlySubmission: GenericPalletError<Rv>;

    /**
     * Wrong number of winners presented.
     **/
    PreDispatchWrongWinnerCount: GenericPalletError<Rv>;

    /**
     * Submission was too weak, score-wise.
     **/
    PreDispatchWeakSubmission: GenericPalletError<Rv>;

    /**
     * The queue was full, and the solution was not better than any of the existing ones.
     **/
    SignedQueueFull: GenericPalletError<Rv>;

    /**
     * The origin failed to pay the deposit.
     **/
    SignedCannotPayDeposit: GenericPalletError<Rv>;

    /**
     * Witness data to dispatchable is invalid.
     **/
    SignedInvalidWitness: GenericPalletError<Rv>;

    /**
     * The signed submission consumes too much weight
     **/
    SignedTooMuchWeight: GenericPalletError<Rv>;

    /**
     * OCW submitted solution for wrong round
     **/
    OcwCallWrongEra: GenericPalletError<Rv>;

    /**
     * Snapshot metadata should exist but didn't.
     **/
    MissingSnapshotMetadata: GenericPalletError<Rv>;

    /**
     * `Self::insert_submission` returned an invalid index.
     **/
    InvalidSubmissionIndex: GenericPalletError<Rv>;

    /**
     * The call is not allowed at this point.
     **/
    CallNotAllowed: GenericPalletError<Rv>;

    /**
     * The fallback failed
     **/
    FallbackFailed: GenericPalletError<Rv>;

    /**
     * Some bound not met
     **/
    BoundNotMet: GenericPalletError<Rv>;

    /**
     * Submitted solution has too many winners
     **/
    TooManyWinners: GenericPalletError<Rv>;

    /**
     * Submission was prepared for a different round.
     **/
    PreDispatchDifferentRound: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `Bounties`'s errors
   **/
  bounties: {
    /**
     * Proposer's balance is too low.
     **/
    InsufficientProposersBalance: GenericPalletError<Rv>;

    /**
     * No proposal or bounty at that index.
     **/
    InvalidIndex: GenericPalletError<Rv>;

    /**
     * The reason given is just too big.
     **/
    ReasonTooBig: GenericPalletError<Rv>;

    /**
     * The bounty status is unexpected.
     **/
    UnexpectedStatus: GenericPalletError<Rv>;

    /**
     * Require bounty curator.
     **/
    RequireCurator: GenericPalletError<Rv>;

    /**
     * Invalid bounty value.
     **/
    InvalidValue: GenericPalletError<Rv>;

    /**
     * Invalid bounty fee.
     **/
    InvalidFee: GenericPalletError<Rv>;

    /**
     * A bounty payout is pending.
     * To cancel the bounty, you must unassign and slash the curator.
     **/
    PendingPayout: GenericPalletError<Rv>;

    /**
     * The bounties cannot be claimed/closed because it's still in the countdown period.
     **/
    Premature: GenericPalletError<Rv>;

    /**
     * The bounty cannot be closed because it has active child bounties.
     **/
    HasActiveChildBounty: GenericPalletError<Rv>;

    /**
     * Too many approvals are already queued.
     **/
    TooManyQueued: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `ChildBounties`'s errors
   **/
  childBounties: {
    /**
     * The parent bounty is not in active state.
     **/
    ParentBountyNotActive: GenericPalletError<Rv>;

    /**
     * The bounty balance is not enough to add new child-bounty.
     **/
    InsufficientBountyBalance: GenericPalletError<Rv>;

    /**
     * Number of child bounties exceeds limit `MaxActiveChildBountyCount`.
     **/
    TooManyChildBounties: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `NominationPools`'s errors
   **/
  nominationPools: {
    /**
     * A (bonded) pool id does not exist.
     **/
    PoolNotFound: GenericPalletError<Rv>;

    /**
     * An account is not a member.
     **/
    PoolMemberNotFound: GenericPalletError<Rv>;

    /**
     * A reward pool does not exist. In all cases this is a system logic error.
     **/
    RewardPoolNotFound: GenericPalletError<Rv>;

    /**
     * A sub pool does not exist.
     **/
    SubPoolsNotFound: GenericPalletError<Rv>;

    /**
     * An account is already delegating in another pool. An account may only belong to one
     * pool at a time.
     **/
    AccountBelongsToOtherPool: GenericPalletError<Rv>;

    /**
     * The member is fully unbonded (and thus cannot access the bonded and reward pool
     * anymore to, for example, collect rewards).
     **/
    FullyUnbonding: GenericPalletError<Rv>;

    /**
     * The member cannot unbond further chunks due to reaching the limit.
     **/
    MaxUnbondingLimit: GenericPalletError<Rv>;

    /**
     * None of the funds can be withdrawn yet because the bonding duration has not passed.
     **/
    CannotWithdrawAny: GenericPalletError<Rv>;

    /**
     * The amount does not meet the minimum bond to either join or create a pool.
     *
     * The depositor can never unbond to a value less than `Pallet::depositor_min_bond`. The
     * caller does not have nominating permissions for the pool. Members can never unbond to a
     * value below `MinJoinBond`.
     **/
    MinimumBondNotMet: GenericPalletError<Rv>;

    /**
     * The transaction could not be executed due to overflow risk for the pool.
     **/
    OverflowRisk: GenericPalletError<Rv>;

    /**
     * A pool must be in [`PoolState::Destroying`] in order for the depositor to unbond or for
     * other members to be permissionlessly unbonded.
     **/
    NotDestroying: GenericPalletError<Rv>;

    /**
     * The caller does not have nominating permissions for the pool.
     **/
    NotNominator: GenericPalletError<Rv>;

    /**
     * Either a) the caller cannot make a valid kick or b) the pool is not destroying.
     **/
    NotKickerOrDestroying: GenericPalletError<Rv>;

    /**
     * The pool is not open to join
     **/
    NotOpen: GenericPalletError<Rv>;

    /**
     * The system is maxed out on pools.
     **/
    MaxPools: GenericPalletError<Rv>;

    /**
     * Too many members in the pool or system.
     **/
    MaxPoolMembers: GenericPalletError<Rv>;

    /**
     * The pools state cannot be changed.
     **/
    CanNotChangeState: GenericPalletError<Rv>;

    /**
     * The caller does not have adequate permissions.
     **/
    DoesNotHavePermission: GenericPalletError<Rv>;

    /**
     * Metadata exceeds [`Config::MaxMetadataLen`]
     **/
    MetadataExceedsMaxLen: GenericPalletError<Rv>;

    /**
     * Some error occurred that should never happen. This should be reported to the
     * maintainers.
     **/
    Defensive: GenericPalletError<Rv>;

    /**
     * Partial unbonding now allowed permissionlessly.
     **/
    PartialUnbondNotAllowedPermissionlessly: GenericPalletError<Rv>;

    /**
     * The pool's max commission cannot be set higher than the existing value.
     **/
    MaxCommissionRestricted: GenericPalletError<Rv>;

    /**
     * The supplied commission exceeds the max allowed commission.
     **/
    CommissionExceedsMaximum: GenericPalletError<Rv>;

    /**
     * The supplied commission exceeds global maximum commission.
     **/
    CommissionExceedsGlobalMaximum: GenericPalletError<Rv>;

    /**
     * Not enough blocks have surpassed since the last commission update.
     **/
    CommissionChangeThrottled: GenericPalletError<Rv>;

    /**
     * The submitted changes to commission change rate are not allowed.
     **/
    CommissionChangeRateNotAllowed: GenericPalletError<Rv>;

    /**
     * There is no pending commission to claim.
     **/
    NoPendingCommission: GenericPalletError<Rv>;

    /**
     * No commission current has been set.
     **/
    NoCommissionCurrentSet: GenericPalletError<Rv>;

    /**
     * Pool id currently in use.
     **/
    PoolIdInUse: GenericPalletError<Rv>;

    /**
     * Pool id provided is not correct/usable.
     **/
    InvalidPoolId: GenericPalletError<Rv>;

    /**
     * Bonding extra is restricted to the exact pending reward amount.
     **/
    BondExtraRestricted: GenericPalletError<Rv>;

    /**
     * No imbalance in the ED deposit for the pool.
     **/
    NothingToAdjust: GenericPalletError<Rv>;

    /**
     * No slash pending that can be applied to the member.
     **/
    NothingToSlash: GenericPalletError<Rv>;

    /**
     * The pool or member delegation has already migrated to delegate stake.
     **/
    AlreadyMigrated: GenericPalletError<Rv>;

    /**
     * The pool or member delegation has not migrated yet to delegate stake.
     **/
    NotMigrated: GenericPalletError<Rv>;

    /**
     * This call is not allowed in the current state of the pallet.
     **/
    NotSupported: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `GearProgram`'s errors
   **/
  gearProgram: {
    DuplicateItem: GenericPalletError<Rv>;
    ProgramNotFound: GenericPalletError<Rv>;
    NotActiveProgram: GenericPalletError<Rv>;
    CannotFindDataForPage: GenericPalletError<Rv>;
    ProgramCodeNotFound: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `GearMessenger`'s errors
   **/
  gearMessenger: {
    /**
     * Occurs when given key already exists in queue.
     **/
    QueueDuplicateKey: GenericPalletError<Rv>;

    /**
     * Occurs when queue's element wasn't found in storage.
     **/
    QueueElementNotFound: GenericPalletError<Rv>;

    /**
     * Occurs when queue's head should contain value,
     * but it's empty for some reason.
     **/
    QueueHeadShouldBeSet: GenericPalletError<Rv>;

    /**
     * Occurs when queue's head should be empty,
     * but it contains value for some reason.
     **/
    QueueHeadShouldNotBeSet: GenericPalletError<Rv>;

    /**
     * Occurs when queue's tail element contains link
     * to the next element.
     **/
    QueueTailHasNextKey: GenericPalletError<Rv>;

    /**
     * Occurs when while searching queue's pre-tail,
     * element wasn't found.
     **/
    QueueTailParentNotFound: GenericPalletError<Rv>;

    /**
     * Occurs when queue's tail should contain value,
     * but it's empty for some reason.
     **/
    QueueTailShouldBeSet: GenericPalletError<Rv>;

    /**
     * Occurs when queue's tail should be empty,
     * but it contains value for some reason.
     **/
    QueueTailShouldNotBeSet: GenericPalletError<Rv>;

    /**
     * Occurs when given value already exists in mailbox.
     **/
    MailboxDuplicateKey: GenericPalletError<Rv>;

    /**
     * Occurs when mailbox's element wasn't found in storage.
     **/
    MailboxElementNotFound: GenericPalletError<Rv>;

    /**
     * Occurs when given value already exists in waitlist.
     **/
    WaitlistDuplicateKey: GenericPalletError<Rv>;

    /**
     * Occurs when waitlist's element wasn't found in storage.
     **/
    WaitlistElementNotFound: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `GearScheduler`'s errors
   **/
  gearScheduler: {
    /**
     * Occurs when given task already exists in task pool.
     **/
    DuplicateTask: GenericPalletError<Rv>;

    /**
     * Occurs when task wasn't found in storage.
     **/
    TaskNotFound: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `GearGas`'s errors
   **/
  gearGas: {
    Forbidden: GenericPalletError<Rv>;
    NodeAlreadyExists: GenericPalletError<Rv>;
    InsufficientBalance: GenericPalletError<Rv>;
    NodeNotFound: GenericPalletError<Rv>;
    NodeWasConsumed: GenericPalletError<Rv>;

    /**
     * Errors stating that gas tree has been invalidated
     **/
    ParentIsLost: GenericPalletError<Rv>;
    ParentHasNoChildren: GenericPalletError<Rv>;

    /**
     * Output of `Tree::consume` procedure that wasn't expected.
     *
     * Outputs of consumption procedure are determined. The error is returned
     * when unexpected one occurred. That signals, that algorithm works wrong
     * and expected invariants are not correct.
     **/
    UnexpectedConsumeOutput: GenericPalletError<Rv>;

    /**
     * Node type that can't occur if algorithm work well
     **/
    UnexpectedNodeType: GenericPalletError<Rv>;

    /**
     * Value must have been caught, but was missed or blocked (for more info see `ValueNode::catch_value`).
     **/
    ValueIsNotCaught: GenericPalletError<Rv>;

    /**
     * Value must have been caught or moved upstream, but was blocked (for more info see `ValueNode::catch_value`).
     **/
    ValueIsBlocked: GenericPalletError<Rv>;

    /**
     * Value must have been blocked, but was either moved or caught (for more info see `ValueNode::catch_value`).
     **/
    ValueIsNotBlocked: GenericPalletError<Rv>;

    /**
     * `GasTree::consume` called on node, which has some balance locked.
     **/
    ConsumedWithLock: GenericPalletError<Rv>;

    /**
     * `GasTree::consume` called on node, which has some system reservation.
     **/
    ConsumedWithSystemReservation: GenericPalletError<Rv>;

    /**
     * `GasTree::create` called with some value amount leading to
     * the total value overflow.
     **/
    TotalValueIsOverflowed: GenericPalletError<Rv>;

    /**
     * Either `GasTree::consume` or `GasTree::spent` called on a node creating
     * negative imbalance which leads to the total value drop below 0.
     **/
    TotalValueIsUnderflowed: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `Gear`'s errors
   **/
  gear: {
    /**
     * Message wasn't found in the mailbox.
     **/
    MessageNotFound: GenericPalletError<Rv>;

    /**
     * Not enough balance to execute an action.
     *
     * Usually occurs when the gas_limit specified is such that the origin account can't afford the message.
     **/
    InsufficientBalance: GenericPalletError<Rv>;

    /**
     * Gas limit too high.
     *
     * Occurs when an extrinsic's declared `gas_limit` is greater than a block's maximum gas limit.
     **/
    GasLimitTooHigh: GenericPalletError<Rv>;

    /**
     * Program already exists.
     *
     * Occurs if a program with some specific program id already exists in program storage.
     **/
    ProgramAlreadyExists: GenericPalletError<Rv>;

    /**
     * Program is terminated.
     *
     * Program init failed, so such message destination is no longer unavailable.
     **/
    InactiveProgram: GenericPalletError<Rv>;

    /**
     * Message gas tree is not found.
     *
     * When a message claimed from the mailbox has a corrupted or non-extant gas tree associated.
     **/
    NoMessageTree: GenericPalletError<Rv>;

    /**
     * Code already exists.
     *
     * Occurs when trying to save to storage a program code that has been saved there.
     **/
    CodeAlreadyExists: GenericPalletError<Rv>;

    /**
     * Code does not exist.
     *
     * Occurs when trying to get a program code from storage, that doesn't exist.
     **/
    CodeDoesntExist: GenericPalletError<Rv>;

    /**
     * The code supplied to `upload_code` or `upload_program` exceeds the limit specified in the
     * current schedule.
     **/
    CodeTooLarge: GenericPalletError<Rv>;

    /**
     * Failed to create a program.
     **/
    ProgramConstructionFailed: GenericPalletError<Rv>;

    /**
     * Message queue processing is disabled.
     **/
    MessageQueueProcessingDisabled: GenericPalletError<Rv>;

    /**
     * Block count doesn't cover MinimalResumePeriod.
     **/
    ResumePeriodLessThanMinimal: GenericPalletError<Rv>;

    /**
     * Program with the specified id is not found.
     **/
    ProgramNotFound: GenericPalletError<Rv>;

    /**
     * Gear::run() already included in current block.
     **/
    GearRunAlreadyInBlock: GenericPalletError<Rv>;

    /**
     * The program rent logic is disabled.
     **/
    ProgramRentDisabled: GenericPalletError<Rv>;

    /**
     * Program is active.
     **/
    ActiveProgram: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `StakingRewards`'s errors
   **/
  stakingRewards: {
    /**
     * Pool not replenished due to error.
     **/
    FailureToRefillPool: GenericPalletError<Rv>;

    /**
     * Failure to withdraw funds from the rewards pool.
     **/
    FailureToWithdrawFromPool: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `GearVoucher`'s errors
   **/
  gearVoucher: {
    /**
     * The origin is not eligible to execute call.
     **/
    BadOrigin: GenericPalletError<Rv>;

    /**
     * Error trying transfer balance to/from voucher account.
     **/
    BalanceTransfer: GenericPalletError<Rv>;

    /**
     * Destination program is not in whitelisted set for voucher.
     **/
    InappropriateDestination: GenericPalletError<Rv>;

    /**
     * Voucher with given identifier doesn't exist for given spender id.
     **/
    InexistentVoucher: GenericPalletError<Rv>;

    /**
     * Voucher still valid and couldn't be revoked.
     **/
    IrrevocableYet: GenericPalletError<Rv>;

    /**
     * Try to whitelist more programs than allowed.
     **/
    MaxProgramsLimitExceeded: GenericPalletError<Rv>;

    /**
     * Failed to query destination of the prepaid call.
     **/
    UnknownDestination: GenericPalletError<Rv>;

    /**
     * Voucher has expired and couldn't be used.
     **/
    VoucherExpired: GenericPalletError<Rv>;

    /**
     * Voucher issue/prolongation duration out of [min; max] constants.
     **/
    DurationOutOfBounds: GenericPalletError<Rv>;

    /**
     * Voucher update function tries to cut voucher ability of code upload.
     **/
    CodeUploadingEnabled: GenericPalletError<Rv>;

    /**
     * Voucher is disabled for code uploading, but requested.
     **/
    CodeUploadingDisabled: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `GearBank`'s errors
   **/
  gearBank: {
    /**
     * Insufficient user balance.
     **/
    InsufficientBalance: GenericPalletError<Rv>;

    /**
     * Insufficient user's bank account gas balance.
     **/
    InsufficientGasBalance: GenericPalletError<Rv>;

    /**
     * Insufficient user's bank account gas balance.
     **/
    InsufficientValueBalance: GenericPalletError<Rv>;

    /**
     * Insufficient bank account balance.
     * **Must be unreachable in Gear main protocol.**
     **/
    InsufficientBankBalance: GenericPalletError<Rv>;

    /**
     * Deposit of funds that will not keep bank account alive.
     * **Must be unreachable in Gear main protocol.**
     **/
    InsufficientDeposit: GenericPalletError<Rv>;

    /**
     * Overflow during funds transfer.
     * **Must be unreachable in Gear main protocol.**
     **/
    Overflow: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
}
