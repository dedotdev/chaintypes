// Generated by dedot cli

import type { GenericChainConsts, RpcVersion } from 'dedot/types';
import type { RuntimeVersion, Bytes, AccountId32, Permill, Perbill } from 'dedot/codecs';
import type {
  FrameSystemLimitsBlockWeights,
  FrameSystemLimitsBlockLength,
  SpWeightsRuntimeDbWeight,
  PolkadotParachainPrimitivesPrimitivesId,
  SpWeightsWeightV2Weight,
  FrameSupportPalletId,
  StagingXcmV5Junctions,
  PalletNftsBitFlagsPalletFeature,
  StagingXcmV5Location,
  PalletReferendaTrackDetails,
} from './types.js';

export interface ChainConsts<Rv extends RpcVersion> extends GenericChainConsts<Rv> {
  /**
   * Pallet `System`'s constants
   **/
  system: {
    /**
     * Block & extrinsics weights: base values and limits.
     **/
    blockWeights: FrameSystemLimitsBlockWeights;

    /**
     * The maximum length of a block (in bytes).
     **/
    blockLength: FrameSystemLimitsBlockLength;

    /**
     * Maximum number of block number to block hash mappings to keep (oldest pruned first).
     **/
    blockHashCount: number;

    /**
     * The weight of runtime database operations the runtime can invoke.
     **/
    dbWeight: SpWeightsRuntimeDbWeight;

    /**
     * Get the chain's in-code version.
     **/
    version: RuntimeVersion;

    /**
     * The designated SS58 prefix of this chain.
     *
     * This replaces the "ss58Format" property declared in the chain spec. Reason is
     * that the runtime should know about the prefix in order to make use of it as
     * an identifier of the chain.
     **/
    ss58Prefix: number;

    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `ParachainSystem`'s constants
   **/
  parachainSystem: {
    /**
     * Returns the parachain ID we are running with.
     **/
    selfParaId: PolkadotParachainPrimitivesPrimitivesId;

    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `Timestamp`'s constants
   **/
  timestamp: {
    /**
     * The minimum period between blocks.
     *
     * Be aware that this is different to the *expected* period that the block production
     * apparatus provides. Your chosen consensus system will generally work with this to
     * determine a sensible block time. For example, in the Aura pallet it will be double this
     * period on default settings.
     **/
    minimumPeriod: bigint;

    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `ParachainInfo`'s constants
   **/
  parachainInfo: {
    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `Preimage`'s constants
   **/
  preimage: {
    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `Scheduler`'s constants
   **/
  scheduler: {
    /**
     * The maximum weight that may be scheduled per block for any dispatchables.
     **/
    maximumWeight: SpWeightsWeightV2Weight;

    /**
     * The maximum number of scheduled calls in the queue for a single block.
     *
     * NOTE:
     * + Dependent pallets' benchmarks might require a higher limit for the setting. Set a
     * higher limit under `runtime-benchmarks` feature.
     **/
    maxScheduledPerBlock: number;

    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `Parameters`'s constants
   **/
  parameters: {
    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `MultiBlockMigrations`'s constants
   **/
  multiBlockMigrations: {
    /**
     * The maximal length of an encoded cursor.
     *
     * A good default needs to selected such that no migration will ever have a cursor with MEL
     * above this limit. This is statically checked in `integrity_test`.
     **/
    cursorMaxLen: number;

    /**
     * The maximal length of an encoded identifier.
     *
     * A good default needs to selected such that no migration will ever have an identifier
     * with MEL above this limit. This is statically checked in `integrity_test`.
     **/
    identifierMaxLen: number;

    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `Balances`'s constants
   **/
  balances: {
    /**
     * The minimum amount required to keep an account open. MUST BE GREATER THAN ZERO!
     *
     * If you *really* need it to be zero, you can enable the feature `insecure_zero_ed` for
     * this pallet. However, you do so at your own risk: this will open up a major DoS vector.
     * In case you have multiple sources of provider references, you may also get unexpected
     * behaviour if you set this to zero.
     *
     * Bottom line: Do yourself a favour and make it at least one!
     **/
    existentialDeposit: bigint;

    /**
     * The maximum number of locks that should exist on an account.
     * Not strictly enforced, but used for weight estimation.
     *
     * Use of locks is deprecated in favour of freezes. See `https://github.com/paritytech/substrate/pull/12951/`
     **/
    maxLocks: number;

    /**
     * The maximum number of named reserves that can exist on an account.
     *
     * Use of reserves is deprecated in favour of holds. See `https://github.com/paritytech/substrate/pull/12951/`
     **/
    maxReserves: number;

    /**
     * The maximum number of individual freeze locks that can exist on an account at any time.
     **/
    maxFreezes: number;

    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `TransactionPayment`'s constants
   **/
  transactionPayment: {
    /**
     * A fee multiplier for `Operational` extrinsics to compute "virtual tip" to boost their
     * `priority`
     *
     * This value is multiplied by the `final_fee` to obtain a "virtual tip" that is later
     * added to a tip component in regular `priority` calculations.
     * It means that a `Normal` transaction can front-run a similarly-sized `Operational`
     * extrinsic (with no tip), by including a tip value greater than the virtual tip.
     *
     * ```rust,ignore
     * // For `Normal`
     * let priority = priority_calc(tip);
     *
     * // For `Operational`
     * let virtual_tip = (inclusion_fee + tip) * OperationalFeeMultiplier;
     * let priority = priority_calc(tip + virtual_tip);
     * ```
     *
     * Note that since we use `final_fee` the multiplier applies also to the regular `tip`
     * sent with the transaction. So, not only does the transaction get a priority bump based
     * on the `inclusion_fee`, but we also amplify the impact of tips applied to `Operational`
     * transactions.
     **/
    operationalFeeMultiplier: number;

    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `AssetTxPayment`'s constants
   **/
  assetTxPayment: {
    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `Vesting`'s constants
   **/
  vesting: {
    /**
     * The minimum amount transferred to call `vested_transfer`.
     **/
    minVestedTransfer: bigint;
    maxVestingSchedules: number;

    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `Claims`'s constants
   **/
  claims: {
    prefix: Bytes;

    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `Authorship`'s constants
   **/
  authorship: {
    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `CollatorSelection`'s constants
   **/
  collatorSelection: {
    /**
     * Account Identifier from which the internal Pot is generated.
     **/
    potId: FrameSupportPalletId;

    /**
     * Maximum number of candidates that we should have.
     *
     * This does not take into account the invulnerables.
     **/
    maxCandidates: number;

    /**
     * Minimum number eligible collators. Should always be greater than zero. This includes
     * Invulnerable collators. This ensures that there will always be one collator who can
     * produce a block.
     **/
    minEligibleCollators: number;

    /**
     * Maximum number of invulnerables.
     **/
    maxInvulnerables: number;
    kickThreshold: number;

    /**
     * Gets this pallet's derived pot account.
     **/
    potAccount: AccountId32;

    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `Session`'s constants
   **/
  session: {
    /**
     * The amount to be held when setting keys.
     **/
    keyDeposit: bigint;

    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `Aura`'s constants
   **/
  aura: {
    /**
     * The slot duration Aura should run with, expressed in milliseconds.
     * The effective value of this type should not change while the chain is running.
     *
     * For backwards compatibility either use [`MinimumPeriodTimesTwo`] or a const.
     **/
    slotDuration: bigint;

    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `AuraExt`'s constants
   **/
  auraExt: {
    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `XcmpQueue`'s constants
   **/
  xcmpQueue: {
    /**
     * The maximum number of inbound XCMP channels that can be suspended simultaneously.
     *
     * Any further channel suspensions will fail and messages may get dropped without further
     * notice. Choosing a high value (1000) is okay; the trade-off that is described in
     * [`InboundXcmpSuspended`] still applies at that scale.
     **/
    maxInboundSuspended: number;

    /**
     * Maximal number of outbound XCMP channels that can have messages queued at the same time.
     *
     * If this is reached, then no further messages can be sent to channels that do not yet
     * have a message queued. This should be set to the expected maximum of outbound channels
     * which is determined by [`Self::ChannelInfo`]. It is important to set this large enough,
     * since otherwise the congestion control protocol will not work as intended and messages
     * may be dropped. This value increases the PoV and should therefore not be picked too
     * high. Governance needs to pay attention to not open more channels than this value.
     **/
    maxActiveOutboundChannels: number;

    /**
     * The maximal page size for HRMP message pages.
     *
     * A lower limit can be set dynamically, but this is the hard-limit for the PoV worst case
     * benchmarking. The limit for the size of a message is slightly below this, since some
     * overhead is incurred for encoding the format.
     **/
    maxPageSize: number;

    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `PolkadotXcm`'s constants
   **/
  polkadotXcm: {
    /**
     * This chain's Universal Location.
     **/
    universalLocation: StagingXcmV5Junctions;

    /**
     * The latest supported version that we advertise. Generally just set it to
     * `pallet_xcm::CurrentXcmVersion`.
     **/
    advertisedXcmVersion: number;

    /**
     * The maximum number of local XCM locks that a single account may have.
     **/
    maxLockers: number;

    /**
     * The maximum number of consumers a single remote lock may have.
     **/
    maxRemoteLockConsumers: number;

    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `CumulusXcm`'s constants
   **/
  cumulusXcm: {
    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `ToKusamaXcmRouter`'s constants
   **/
  toKusamaXcmRouter: {
    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `MessageQueue`'s constants
   **/
  messageQueue: {
    /**
     * The size of the page; this implies the maximum message size which can be sent.
     *
     * A good value depends on the expected message sizes, their weights, the weight that is
     * available for processing them and the maximal needed message size. The maximal message
     * size is slightly lower than this as defined by [`MaxMessageLenOf`].
     **/
    heapSize: number;

    /**
     * The maximum number of stale pages (i.e. of overweight messages) allowed before culling
     * can happen. Once there are more stale pages than this, then historical pages may be
     * dropped, even if they contain unprocessed overweight messages.
     **/
    maxStale: number;

    /**
     * The amount of weight (if any) which should be provided to the message queue for
     * servicing enqueued items `on_initialize`.
     *
     * This may be legitimately `None` in the case that you will call
     * `ServiceQueues::service_queues` manually or set [`Self::IdleMaxServiceWeight`] to have
     * it run in `on_idle`.
     **/
    serviceWeight: SpWeightsWeightV2Weight | undefined;

    /**
     * The maximum amount of weight (if any) to be used from remaining weight `on_idle` which
     * should be provided to the message queue for servicing enqueued items `on_idle`.
     * Useful for parachains to process messages at the same block they are received.
     *
     * If `None`, it will not call `ServiceQueues::service_queues` in `on_idle`.
     **/
    idleMaxServiceWeight: SpWeightsWeightV2Weight | undefined;

    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `SnowbridgeSystemFrontend`'s constants
   **/
  snowbridgeSystemFrontend: {
    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `Utility`'s constants
   **/
  utility: {
    /**
     * The limit on the number of batched calls.
     **/
    batchedCallsLimit: number;

    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `Multisig`'s constants
   **/
  multisig: {
    /**
     * The base amount of currency needed to reserve for creating a multisig execution or to
     * store a dispatch call for later.
     *
     * This is held for an additional storage item whose value size is
     * `4 + sizeof((BlockNumber, Balance, AccountId))` bytes and whose key size is
     * `32 + sizeof(AccountId)` bytes.
     **/
    depositBase: bigint;

    /**
     * The amount of currency needed per unit threshold when creating a multisig execution.
     *
     * This is held for adding 32 bytes more into a pre-existing storage value.
     **/
    depositFactor: bigint;

    /**
     * The maximum amount of signatories allowed in the multisig.
     **/
    maxSignatories: number;

    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `Proxy`'s constants
   **/
  proxy: {
    /**
     * The base amount of currency needed to reserve for creating a proxy.
     *
     * This is held for an additional storage item whose value size is
     * `sizeof(Balance)` bytes and whose key size is `sizeof(AccountId)` bytes.
     **/
    proxyDepositBase: bigint;

    /**
     * The amount of currency needed per proxy added.
     *
     * This is held for adding 32 bytes plus an instance of `ProxyType` more into a
     * pre-existing storage value. Thus, when configuring `ProxyDepositFactor` one should take
     * into account `32 + proxy_type.encode().len()` bytes of data.
     **/
    proxyDepositFactor: bigint;

    /**
     * The maximum amount of proxies allowed for a single account.
     **/
    maxProxies: number;

    /**
     * The maximum amount of time-delayed announcements that are allowed to be pending.
     **/
    maxPending: number;

    /**
     * The base amount of currency needed to reserve for creating an announcement.
     *
     * This is held when a new storage item holding a `Balance` is created (typically 16
     * bytes).
     **/
    announcementDepositBase: bigint;

    /**
     * The amount of currency needed per announcement made.
     *
     * This is held for adding an `AccountId`, `Hash` and `BlockNumber` (typically 68 bytes)
     * into a pre-existing storage value.
     **/
    announcementDepositFactor: bigint;

    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `Indices`'s constants
   **/
  indices: {
    /**
     * The deposit needed for reserving an index.
     **/
    deposit: bigint;

    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `Assets`'s constants
   **/
  assets: {
    /**
     * Max number of items to destroy per `destroy_accounts` and `destroy_approvals` call.
     *
     * Must be configured to result in a weight that makes each call fit in a block.
     **/
    removeItemsLimit: number;

    /**
     * The basic amount of funds that must be reserved for an asset.
     **/
    assetDeposit: bigint;

    /**
     * The amount of funds that must be reserved for a non-provider asset account to be
     * maintained.
     **/
    assetAccountDeposit: bigint;

    /**
     * The basic amount of funds that must be reserved when adding metadata to your asset.
     **/
    metadataDepositBase: bigint;

    /**
     * The additional funds that must be reserved for the number of bytes you store in your
     * metadata.
     **/
    metadataDepositPerByte: bigint;

    /**
     * The amount of funds that must be reserved when creating a new approval.
     **/
    approvalDeposit: bigint;

    /**
     * The maximum length of a name or symbol stored on-chain.
     **/
    stringLimit: number;

    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `Uniques`'s constants
   **/
  uniques: {
    /**
     * The basic amount of funds that must be reserved for collection.
     **/
    collectionDeposit: bigint;

    /**
     * The basic amount of funds that must be reserved for an item.
     **/
    itemDeposit: bigint;

    /**
     * The basic amount of funds that must be reserved when adding metadata to your item.
     **/
    metadataDepositBase: bigint;

    /**
     * The basic amount of funds that must be reserved when adding an attribute to an item.
     **/
    attributeDepositBase: bigint;

    /**
     * The additional funds that must be reserved for the number of bytes store in metadata,
     * either "normal" metadata or attribute metadata.
     **/
    depositPerByte: bigint;

    /**
     * The maximum length of data stored on-chain.
     **/
    stringLimit: number;

    /**
     * The maximum length of an attribute key.
     **/
    keyLimit: number;

    /**
     * The maximum length of an attribute value.
     **/
    valueLimit: number;

    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `Nfts`'s constants
   **/
  nfts: {
    /**
     * The basic amount of funds that must be reserved for collection.
     **/
    collectionDeposit: bigint;

    /**
     * The basic amount of funds that must be reserved for an item.
     **/
    itemDeposit: bigint;

    /**
     * The basic amount of funds that must be reserved when adding metadata to your item.
     **/
    metadataDepositBase: bigint;

    /**
     * The basic amount of funds that must be reserved when adding an attribute to an item.
     **/
    attributeDepositBase: bigint;

    /**
     * The additional funds that must be reserved for the number of bytes store in metadata,
     * either "normal" metadata or attribute metadata.
     **/
    depositPerByte: bigint;

    /**
     * The maximum length of data stored on-chain.
     **/
    stringLimit: number;

    /**
     * The maximum length of an attribute key.
     **/
    keyLimit: number;

    /**
     * The maximum length of an attribute value.
     **/
    valueLimit: number;

    /**
     * The maximum approvals an item could have.
     **/
    approvalsLimit: number;

    /**
     * The maximum attributes approvals an item could have.
     **/
    itemAttributesApprovalsLimit: number;

    /**
     * The max number of tips a user could send.
     **/
    maxTips: number;

    /**
     * The max duration in blocks for deadlines.
     **/
    maxDeadlineDuration: number;

    /**
     * The max number of attributes a user could set per call.
     **/
    maxAttributesPerCall: number;

    /**
     * Disables some of pallet's features.
     **/
    features: PalletNftsBitFlagsPalletFeature;

    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `ForeignAssets`'s constants
   **/
  foreignAssets: {
    /**
     * Max number of items to destroy per `destroy_accounts` and `destroy_approvals` call.
     *
     * Must be configured to result in a weight that makes each call fit in a block.
     **/
    removeItemsLimit: number;

    /**
     * The basic amount of funds that must be reserved for an asset.
     **/
    assetDeposit: bigint;

    /**
     * The amount of funds that must be reserved for a non-provider asset account to be
     * maintained.
     **/
    assetAccountDeposit: bigint;

    /**
     * The basic amount of funds that must be reserved when adding metadata to your asset.
     **/
    metadataDepositBase: bigint;

    /**
     * The additional funds that must be reserved for the number of bytes you store in your
     * metadata.
     **/
    metadataDepositPerByte: bigint;

    /**
     * The amount of funds that must be reserved when creating a new approval.
     **/
    approvalDeposit: bigint;

    /**
     * The maximum length of a name or symbol stored on-chain.
     **/
    stringLimit: number;

    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `PoolAssets`'s constants
   **/
  poolAssets: {
    /**
     * Max number of items to destroy per `destroy_accounts` and `destroy_approvals` call.
     *
     * Must be configured to result in a weight that makes each call fit in a block.
     **/
    removeItemsLimit: number;

    /**
     * The basic amount of funds that must be reserved for an asset.
     **/
    assetDeposit: bigint;

    /**
     * The amount of funds that must be reserved for a non-provider asset account to be
     * maintained.
     **/
    assetAccountDeposit: bigint;

    /**
     * The basic amount of funds that must be reserved when adding metadata to your asset.
     **/
    metadataDepositBase: bigint;

    /**
     * The additional funds that must be reserved for the number of bytes you store in your
     * metadata.
     **/
    metadataDepositPerByte: bigint;

    /**
     * The amount of funds that must be reserved when creating a new approval.
     **/
    approvalDeposit: bigint;

    /**
     * The maximum length of a name or symbol stored on-chain.
     **/
    stringLimit: number;

    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `AssetConversion`'s constants
   **/
  assetConversion: {
    /**
     * A % the liquidity providers will take of every swap. Represents 10ths of a percent.
     **/
    lpFee: number;

    /**
     * A one-time fee to setup the pool.
     **/
    poolSetupFee: bigint;

    /**
     * Asset class from [`Config::Assets`] used to pay the [`Config::PoolSetupFee`].
     **/
    poolSetupFeeAsset: StagingXcmV5Location;

    /**
     * A fee to withdraw the liquidity.
     **/
    liquidityWithdrawalFee: Permill;

    /**
     * The minimum LP token amount that could be minted. Ameliorates rounding errors.
     **/
    mintMinLiquidity: bigint;

    /**
     * The max number of hops in a swap.
     **/
    maxSwapPathLength: number;

    /**
     * The pallet's id, used for deriving its sovereign account ID.
     **/
    palletId: FrameSupportPalletId;

    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `Treasury`'s constants
   **/
  treasury: {
    /**
     * Period between successive spends.
     **/
    spendPeriod: number;

    /**
     * Percentage of spare funds (if any) that are burnt per spend period.
     **/
    burn: Permill;

    /**
     * The treasury's pallet id, used for deriving its sovereign account ID.
     **/
    palletId: FrameSupportPalletId;

    /**
     * DEPRECATED: associated with `spend_local` call and will be removed in May 2025.
     * Refer to <https://github.com/paritytech/polkadot-sdk/pull/5961> for migration to `spend`.
     *
     * The maximum number of approvals that can wait in the spending queue.
     *
     * NOTE: This parameter is also used within the Bounties Pallet extension if enabled.
     **/
    maxApprovals: number;

    /**
     * The period during which an approved treasury spend has to be claimed.
     **/
    payoutPeriod: number;

    /**
     * Gets this pallet's derived pot account.
     **/
    potAccount: AccountId32;

    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `ConvictionVoting`'s constants
   **/
  convictionVoting: {
    /**
     * The maximum number of concurrent votes an account may have.
     *
     * Also used to compute weight, an overly large value can lead to extrinsics with large
     * weight estimation: see `delegate` for instance.
     **/
    maxVotes: number;

    /**
     * The minimum period of vote locking.
     *
     * It should be no shorter than enactment period to ensure that in the case of an approval,
     * those successful voters are locked into the consequences that their votes entail.
     **/
    voteLockingPeriod: number;

    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `Referenda`'s constants
   **/
  referenda: {
    /**
     * The minimum amount to be used as a deposit for a public referendum proposal.
     **/
    submissionDeposit: bigint;

    /**
     * Maximum size of the referendum queue for a single track.
     **/
    maxQueued: number;

    /**
     * The number of blocks after submission that a referendum must begin being decided by.
     * Once this passes, then anyone may cancel the referendum.
     **/
    undecidingTimeout: number;

    /**
     * Quantization level for the referendum wakeup scheduler. A higher number will result in
     * fewer storage reads/writes needed for smaller voters, but also result in delays to the
     * automatic referendum status changes. Explicit servicing instructions are unaffected.
     **/
    alarmInterval: number;

    /**
     * A list of tracks.
     *
     * Note: if the tracks are dynamic, the value in the static metadata might be inaccurate.
     **/
    tracks: Array<[number, PalletReferendaTrackDetails]>;

    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `Origins`'s constants
   **/
  origins: {
    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `Whitelist`'s constants
   **/
  whitelist: {
    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `Bounties`'s constants
   **/
  bounties: {
    /**
     * The amount held on deposit for placing a bounty proposal.
     **/
    bountyDepositBase: bigint;

    /**
     * The delay period for which a bounty beneficiary need to wait before claim the payout.
     **/
    bountyDepositPayoutDelay: number;

    /**
     * The time limit for a curator to act before a bounty expires.
     *
     * The period that starts when a curator is approved, during which they must execute or
     * update the bounty via `extend_bounty_expiry`. If missed, the bounty expires, and the
     * curator may be slashed. If `BlockNumberFor::MAX`, bounties stay active indefinitely,
     * removing the need for `extend_bounty_expiry`.
     **/
    bountyUpdatePeriod: number;

    /**
     * The curator deposit is calculated as a percentage of the curator fee.
     *
     * This deposit has optional upper and lower bounds with `CuratorDepositMax` and
     * `CuratorDepositMin`.
     **/
    curatorDepositMultiplier: Permill;

    /**
     * Maximum amount of funds that should be placed in a deposit for making a proposal.
     **/
    curatorDepositMax: bigint | undefined;

    /**
     * Minimum amount of funds that should be placed in a deposit for making a proposal.
     **/
    curatorDepositMin: bigint | undefined;

    /**
     * Minimum value for a bounty.
     **/
    bountyValueMinimum: bigint;

    /**
     * The amount held on deposit per byte within the tip report reason or bounty description.
     **/
    dataDepositPerByte: bigint;

    /**
     * Maximum acceptable reason length.
     *
     * Benchmarks depend on this value, be sure to update weights file when changing this value
     **/
    maximumReasonLength: number;

    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `ChildBounties`'s constants
   **/
  childBounties: {
    /**
     * Maximum number of child bounties that can be added to a parent bounty.
     **/
    maxActiveChildBountyCount: number;

    /**
     * Minimum value for a child-bounty.
     **/
    childBountyValueMinimum: bigint;

    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `AssetRate`'s constants
   **/
  assetRate: {
    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `StateTrieMigration`'s constants
   **/
  stateTrieMigration: {
    /**
     * Maximal number of bytes that a key can have.
     *
     * FRAME itself does not limit the key length.
     * The concrete value must therefore depend on your storage usage.
     * A [`frame_support::storage::StorageNMap`] for example can have an arbitrary number of
     * keys which are then hashed and concatenated, resulting in arbitrarily long keys.
     *
     * Use the *state migration RPC* to retrieve the length of the longest key in your
     * storage: <https://github.com/paritytech/substrate/issues/11642>
     *
     * The migration will halt with a `Halted` event if this value is too small.
     * Since there is no real penalty from over-estimating, it is advised to use a large
     * value. The default is 512 byte.
     *
     * Some key lengths for reference:
     * - [`frame_support::storage::StorageValue`]: 32 byte
     * - [`frame_support::storage::StorageMap`]: 64 byte
     * - [`frame_support::storage::StorageDoubleMap`]: 96 byte
     *
     * For more info see
     * <https://www.shawntabrizi.com/blog/substrate/querying-substrate-storage-via-rpc/>
     **/
    maxKeyLen: number;

    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `NominationPools`'s constants
   **/
  nominationPools: {
    /**
     * The nomination pool's pallet id.
     **/
    palletId: FrameSupportPalletId;

    /**
     * The maximum pool points-to-balance ratio that an `open` pool can have.
     *
     * This is important in the event slashing takes place and the pool's points-to-balance
     * ratio becomes disproportional.
     *
     * Moreover, this relates to the `RewardCounter` type as well, as the arithmetic operations
     * are a function of number of points, and by setting this value to e.g. 10, you ensure
     * that the total number of points in the system are at most 10 times the total_issuance of
     * the chain, in the absolute worse case.
     *
     * For a value of 10, the threshold would be a pool points-to-balance ratio of 10:1.
     * Such a scenario would also be the equivalent of the pool being 90% slashed.
     **/
    maxPointsToBalance: number;

    /**
     * The maximum number of simultaneous unbonding chunks that can exist per member.
     **/
    maxUnbonding: number;

    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `VoterList`'s constants
   **/
  voterList: {
    /**
     * The list of thresholds separating the various bags.
     *
     * Ids are separated into unsorted bags according to their score. This specifies the
     * thresholds separating the bags. An id's bag is the largest bag for which the id's score
     * is less than or equal to its upper threshold.
     *
     * When ids are iterated, higher bags are iterated completely before lower bags. This means
     * that iteration is _semi-sorted_: ids of higher score tend to come before ids of lower
     * score, but peer ids within a particular bag are sorted in insertion order.
     *
     * # Expressing the constant
     *
     * This constant must be sorted in strictly increasing order. Duplicate items are not
     * permitted.
     *
     * There is an implied upper limit of `Score::MAX`; that value does not need to be
     * specified within the bag. For any two threshold lists, if one ends with
     * `Score::MAX`, the other one does not, and they are otherwise equal, the two
     * lists will behave identically.
     *
     * # Calculation
     *
     * It is recommended to generate the set of thresholds in a geometric series, such that
     * there exists some constant ratio such that `threshold[k + 1] == (threshold[k] *
     * constant_ratio).max(threshold[k] + 1)` for all `k`.
     *
     * The helpers in the `/utils/frame/generate-bags` module can simplify this calculation.
     *
     * # Examples
     *
     * - If `BagThresholds::get().is_empty()`, then all ids are put into the same bag, and
     * iteration is strictly in insertion order.
     * - If `BagThresholds::get().len() == 64`, and the thresholds are determined according to
     * the procedure given above, then the constant ratio is equal to 2.
     * - If `BagThresholds::get().len() == 200`, and the thresholds are determined according to
     * the procedure given above, then the constant ratio is approximately equal to 1.248.
     * - If the threshold list begins `[1, 2, 3, ...]`, then an id with score 0 or 1 will fall
     * into bag 0, an id with score 2 will fall into bag 1, etc.
     *
     * # Migration
     *
     * In the event that this list ever changes, a copy of the old bags list must be retained.
     * With that `List::migrate` can be called, which will perform the appropriate migration.
     **/
    bagThresholds: Array<bigint>;

    /**
     * Maximum number of accounts that may be re-bagged automatically in `on_idle`.
     *
     * A value of `0` (obtained by configuring `type MaxAutoRebagPerBlock = ();`) disables
     * the feature.
     **/
    maxAutoRebagPerBlock: number;

    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `DelegatedStaking`'s constants
   **/
  delegatedStaking: {
    /**
     * Injected identifier for the pallet.
     **/
    palletId: FrameSupportPalletId;

    /**
     * Fraction of the slash that is rewarded to the caller of pending slash to the agent.
     **/
    slashRewardFraction: Perbill;

    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `StakingRcClient`'s constants
   **/
  stakingRcClient: {
    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `MultiBlockElection`'s constants
   **/
  multiBlockElection: {
    /**
     * Duration of the unsigned phase.
     **/
    unsignedPhase: number;

    /**
     * Duration of the signed phase.
     **/
    signedPhase: number;

    /**
     * Duration of the singed validation phase.
     *
     * The duration of this should not be less than `T::Pages`, and there is no point in it
     * being more than `SignedPhase::MaxSubmission::get() * T::Pages`. TODO: integrity test for
     * it.
     **/
    signedValidationPhase: number;

    /**
     * The number of snapshot voters to fetch per block.
     **/
    voterSnapshotPerBlock: number;

    /**
     * The number of snapshot targets to fetch per block.
     **/
    targetSnapshotPerBlock: number;

    /**
     * The number of pages.
     *
     * The snapshot is created with this many keys in the storage map.
     *
     * The solutions may contain at MOST this many pages, but less pages are acceptable as
     * well.
     **/
    pages: number;

    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `MultiBlockElectionVerifier`'s constants
   **/
  multiBlockElectionVerifier: {
    /**
     * The minimum amount of improvement to the solution score that defines a solution as
     * "better".
     **/
    solutionImprovementThreshold: Perbill;

    /**
     * Maximum number of backers, per winner, among all pages of an election.
     *
     * This can only be checked at the very final step of verification.
     *
     * NOTE: at the moment, we don't check this, and it is in place for future compatibility.
     **/
    maxBackersPerWinnerFinal: number;

    /**
     * Maximum number of backers, per winner, per page.
     **/
    maxBackersPerWinner: number;

    /**
     * Maximum number of supports (aka. winners/validators/targets) that can be represented in
     * a page of results.
     **/
    maxWinnersPerPage: number;

    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `MultiBlockElectionUnsigned`'s constants
   **/
  multiBlockElectionUnsigned: {
    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `MultiBlockElectionSigned`'s constants
   **/
  multiBlockElectionSigned: {
    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `Staking`'s constants
   **/
  staking: {
    /**
     * Number of eras to keep in history.
     *
     * Following information is kept for eras in `[current_era -
     * HistoryDepth, current_era]`: `ErasValidatorPrefs`, `ErasValidatorReward`,
     * `ErasRewardPoints`, `ErasTotalStake`, `ClaimedRewards`,
     * `ErasStakersPaged`, `ErasStakersOverview`.
     *
     * Must be more than the number of eras delayed by session.
     * I.e. active era must always be in history. I.e. `active_era >
     * current_era - history_depth` must be guaranteed.
     *
     * If migrating an existing pallet from storage value to config value,
     * this should be set to same value or greater as in storage.
     **/
    historyDepth: number;

    /**
     * Number of sessions per era, as per the preferences of the **relay chain**.
     **/
    sessionsPerEra: number;

    /**
     * Number of sessions before the end of an era when the election for the next era will
     * start.
     *
     * - This determines how many sessions **before** the last session of the era the staking
     * election process should begin.
     * - The value is bounded between **1** (election starts at the beginning of the last
     * session) and `SessionsPerEra` (election starts at the beginning of the first session
     * of the era).
     *
     * ### Example:
     * - If `SessionsPerEra = 6` and `PlanningEraOffset = 1`, the election starts at the
     * beginning of session `6 - 1 = 5`.
     * - If `PlanningEraOffset = 6`, the election starts at the beginning of session `6 - 6 =
     * 0`, meaning it starts at the very beginning of the era.
     **/
    planningEraOffset: number;

    /**
     * Number of eras that staked funds must remain bonded for.
     **/
    bondingDuration: number;

    /**
     * Number of eras that slashes are deferred by, after computation.
     *
     * This should be less than the bonding duration. Set to 0 if slashes
     * should be applied immediately, without opportunity for intervention.
     **/
    slashDeferDuration: number;

    /**
     * The maximum size of each `T::ExposurePage`.
     *
     * An `ExposurePage` is weakly bounded to a maximum of `MaxExposurePageSize`
     * nominators.
     *
     * For older non-paged exposure, a reward payout was restricted to the top
     * `MaxExposurePageSize` nominators. This is to limit the i/o cost for the
     * nominator payout.
     *
     * Note: `MaxExposurePageSize` is used to bound `ClaimedRewards` and is unsafe to
     * reduce without handling it in a migration.
     **/
    maxExposurePageSize: number;

    /**
     * The absolute maximum of winner validators this pallet should return.
     *
     * As this pallet supports multi-block election, the set of winner validators *per
     * election* is bounded by this type.
     **/
    maxValidatorSet: number;

    /**
     * The maximum number of `unlocking` chunks a [`StakingLedger`] can
     * have. Effectively determines how many unique eras a staker may be
     * unbonding in.
     *
     * Note: `MaxUnlockingChunks` is used as the upper bound for the
     * `BoundedVec` item `StakingLedger.unlocking`. Setting this value
     * lower than the existing value can lead to inconsistencies in the
     * `StakingLedger` and will need to be handled properly in a runtime
     * migration. The test `reducing_max_unlocking_chunks_abrupt` shows
     * this effect.
     **/
    maxUnlockingChunks: number;

    /**
     * Maximum number of invulnerable validators.
     **/
    maxInvulnerables: number;

    /**
     * Maximum allowed era duration in milliseconds.
     *
     * This provides a defensive upper bound to cap the effective era duration, preventing
     * excessively long eras from causing runaway inflation (e.g., due to bugs). If the actual
     * era duration exceeds this value, it will be clamped to this maximum.
     *
     * Example: For an ideal era duration of 24 hours (86,400,000 ms),
     * this can be set to 604,800,000 ms (7 days).
     **/
    maxEraDuration: bigint;

    /**
     * Maximum number of storage items that can be pruned in a single call.
     *
     * This controls how many storage items can be deleted in each call to `prune_era_step`.
     * This should be set to a conservative value (e.g., 100-500 items) to ensure pruning
     * doesn't consume too much block space. The actual weight is determined by benchmarks.
     **/
    maxPruningItems: number;

    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `Revive`'s constants
   **/
  revive: {
    /**
     * The amount of balance a caller has to pay for each byte of storage.
     *
     * # Note
     *
     * It is safe to change this value on a live chain as all refunds are pro rata.
     **/
    depositPerByte: bigint;

    /**
     * The amount of balance a caller has to pay for each storage item.
     *
     * # Note
     *
     * It is safe to change this value on a live chain as all refunds are pro rata.
     **/
    depositPerItem: bigint;

    /**
     * The percentage of the storage deposit that should be held for using a code hash.
     * Instantiating a contract, protects the code from being removed. In order to prevent
     * abuse these actions are protected with a percentage of the code deposit.
     **/
    codeHashLockupDepositPercent: Perbill;

    /**
     * Make contract callable functions marked as `#[unstable]` available.
     *
     * Contracts that use `#[unstable]` functions won't be able to be uploaded unless
     * this is set to `true`. This is only meant for testnets and dev nodes in order to
     * experiment with new features.
     *
     * # Warning
     *
     * Do **not** set to `true` on productions chains.
     **/
    unsafeUnstableInterface: boolean;

    /**
     * The [EIP-155](https://eips.ethereum.org/EIPS/eip-155) chain ID.
     *
     * This is a unique identifier assigned to each blockchain network,
     * preventing replay attacks.
     **/
    chainId: bigint;

    /**
     * The ratio between the decimal representation of the native token and the ETH token.
     **/
    nativeToEthRatio: number;

    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `Sudo`'s constants
   **/
  sudo: {
    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `AhOps`'s constants
   **/
  ahOps: {
    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `AhMigrator`'s constants
   **/
  ahMigrator: {
    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
}
