// Generated by @dedot/codegen

import type {
  GenericChainTx,
  GenericTxCall,
  ISubmittableExtrinsic,
  ISubmittableResult,
  IRuntimeTxCall,
} from '@dedot/types';
import type {
  MultiAddressLike,
  Extrinsic,
  BytesLike,
  AccountId32Like,
  Data,
  H256,
  FixedBytes,
  H160,
  U256,
  FixedU64,
} from '@dedot/codecs';
import type {
  AstarRuntimeRuntimeCallLike,
  SpRuntimeMultiSignature,
  FrameSystemEventRecord,
  AstarRuntimeOriginCaller,
  SpWeightsWeightV2Weight,
  PalletIdentityIdentityInfo,
  PalletIdentityBitFlags,
  PalletIdentityJudgement,
  PalletMultisigTimepoint,
  AstarRuntimeProxyType,
  CumulusPrimitivesParachainInherentParachainInherentData,
  PalletVestingVestingInfo,
  PalletInflationInflationParameters,
  AstarPrimitivesDappStakingSmartContract,
  PalletDappStakingV3ForcingType,
  AstarRuntimeSessionKeys,
  StagingXcmVersionedMultiLocation,
  StagingXcmVersionedXcm,
  StagingXcmVersionedMultiAssets,
  StagingXcmV3MultilocationMultiLocation,
  StagingXcmV3WeightLimit,
  StagingXcmVersionedMultiAsset,
  EthereumTransactionTransactionV2,
  PalletContractsWasmDeterminism,
  PalletDappsStakingRewardDestination,
  PalletDappsStakingContractStakeInfo,
} from './types';

export type ChainSubmittableExtrinsic<T extends IRuntimeTxCall = AstarRuntimeRuntimeCallLike> = Extrinsic<
  MultiAddressLike,
  T,
  SpRuntimeMultiSignature,
  any[]
> &
  ISubmittableExtrinsic<ISubmittableResult<FrameSystemEventRecord>>;

export type TxCall = (...args: any[]) => ChainSubmittableExtrinsic;

export interface ChainTx extends GenericChainTx<TxCall> {
  /**
   * Pallet `System`'s transaction calls
   **/
  system: {
    /**
     * See [`Pallet::remark`].
     *
     * @param {BytesLike} remark
     **/
    remark: GenericTxCall<
      (remark: BytesLike) => ChainSubmittableExtrinsic<{
        pallet: 'System';
        palletCall: {
          name: 'Remark';
          params: { remark: BytesLike };
        };
      }>
    >;

    /**
     * See [`Pallet::set_heap_pages`].
     *
     * @param {bigint} pages
     **/
    setHeapPages: GenericTxCall<
      (pages: bigint) => ChainSubmittableExtrinsic<{
        pallet: 'System';
        palletCall: {
          name: 'SetHeapPages';
          params: { pages: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::set_code`].
     *
     * @param {BytesLike} code
     **/
    setCode: GenericTxCall<
      (code: BytesLike) => ChainSubmittableExtrinsic<{
        pallet: 'System';
        palletCall: {
          name: 'SetCode';
          params: { code: BytesLike };
        };
      }>
    >;

    /**
     * See [`Pallet::set_code_without_checks`].
     *
     * @param {BytesLike} code
     **/
    setCodeWithoutChecks: GenericTxCall<
      (code: BytesLike) => ChainSubmittableExtrinsic<{
        pallet: 'System';
        palletCall: {
          name: 'SetCodeWithoutChecks';
          params: { code: BytesLike };
        };
      }>
    >;

    /**
     * See [`Pallet::set_storage`].
     *
     * @param {Array<[BytesLike, BytesLike]>} items
     **/
    setStorage: GenericTxCall<
      (items: Array<[BytesLike, BytesLike]>) => ChainSubmittableExtrinsic<{
        pallet: 'System';
        palletCall: {
          name: 'SetStorage';
          params: { items: Array<[BytesLike, BytesLike]> };
        };
      }>
    >;

    /**
     * See [`Pallet::kill_storage`].
     *
     * @param {Array<BytesLike>} keys
     **/
    killStorage: GenericTxCall<
      (keys: Array<BytesLike>) => ChainSubmittableExtrinsic<{
        pallet: 'System';
        palletCall: {
          name: 'KillStorage';
          params: { keys: Array<BytesLike> };
        };
      }>
    >;

    /**
     * See [`Pallet::kill_prefix`].
     *
     * @param {BytesLike} prefix
     * @param {number} subkeys
     **/
    killPrefix: GenericTxCall<
      (
        prefix: BytesLike,
        subkeys: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'System';
        palletCall: {
          name: 'KillPrefix';
          params: { prefix: BytesLike; subkeys: number };
        };
      }>
    >;

    /**
     * See [`Pallet::remark_with_event`].
     *
     * @param {BytesLike} remark
     **/
    remarkWithEvent: GenericTxCall<
      (remark: BytesLike) => ChainSubmittableExtrinsic<{
        pallet: 'System';
        palletCall: {
          name: 'RemarkWithEvent';
          params: { remark: BytesLike };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<TxCall>;
  };
  /**
   * Pallet `Utility`'s transaction calls
   **/
  utility: {
    /**
     * See [`Pallet::batch`].
     *
     * @param {Array<AstarRuntimeRuntimeCallLike>} calls
     **/
    batch: GenericTxCall<
      (calls: Array<AstarRuntimeRuntimeCallLike>) => ChainSubmittableExtrinsic<{
        pallet: 'Utility';
        palletCall: {
          name: 'Batch';
          params: { calls: Array<AstarRuntimeRuntimeCallLike> };
        };
      }>
    >;

    /**
     * See [`Pallet::as_derivative`].
     *
     * @param {number} index
     * @param {AstarRuntimeRuntimeCallLike} call
     **/
    asDerivative: GenericTxCall<
      (
        index: number,
        call: AstarRuntimeRuntimeCallLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Utility';
        palletCall: {
          name: 'AsDerivative';
          params: { index: number; call: AstarRuntimeRuntimeCallLike };
        };
      }>
    >;

    /**
     * See [`Pallet::batch_all`].
     *
     * @param {Array<AstarRuntimeRuntimeCallLike>} calls
     **/
    batchAll: GenericTxCall<
      (calls: Array<AstarRuntimeRuntimeCallLike>) => ChainSubmittableExtrinsic<{
        pallet: 'Utility';
        palletCall: {
          name: 'BatchAll';
          params: { calls: Array<AstarRuntimeRuntimeCallLike> };
        };
      }>
    >;

    /**
     * See [`Pallet::dispatch_as`].
     *
     * @param {AstarRuntimeOriginCaller} asOrigin
     * @param {AstarRuntimeRuntimeCallLike} call
     **/
    dispatchAs: GenericTxCall<
      (
        asOrigin: AstarRuntimeOriginCaller,
        call: AstarRuntimeRuntimeCallLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Utility';
        palletCall: {
          name: 'DispatchAs';
          params: { asOrigin: AstarRuntimeOriginCaller; call: AstarRuntimeRuntimeCallLike };
        };
      }>
    >;

    /**
     * See [`Pallet::force_batch`].
     *
     * @param {Array<AstarRuntimeRuntimeCallLike>} calls
     **/
    forceBatch: GenericTxCall<
      (calls: Array<AstarRuntimeRuntimeCallLike>) => ChainSubmittableExtrinsic<{
        pallet: 'Utility';
        palletCall: {
          name: 'ForceBatch';
          params: { calls: Array<AstarRuntimeRuntimeCallLike> };
        };
      }>
    >;

    /**
     * See [`Pallet::with_weight`].
     *
     * @param {AstarRuntimeRuntimeCallLike} call
     * @param {SpWeightsWeightV2Weight} weight
     **/
    withWeight: GenericTxCall<
      (
        call: AstarRuntimeRuntimeCallLike,
        weight: SpWeightsWeightV2Weight,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Utility';
        palletCall: {
          name: 'WithWeight';
          params: { call: AstarRuntimeRuntimeCallLike; weight: SpWeightsWeightV2Weight };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<TxCall>;
  };
  /**
   * Pallet `Identity`'s transaction calls
   **/
  identity: {
    /**
     * See [`Pallet::add_registrar`].
     *
     * @param {MultiAddressLike} account
     **/
    addRegistrar: GenericTxCall<
      (account: MultiAddressLike) => ChainSubmittableExtrinsic<{
        pallet: 'Identity';
        palletCall: {
          name: 'AddRegistrar';
          params: { account: MultiAddressLike };
        };
      }>
    >;

    /**
     * See [`Pallet::set_identity`].
     *
     * @param {PalletIdentityIdentityInfo} info
     **/
    setIdentity: GenericTxCall<
      (info: PalletIdentityIdentityInfo) => ChainSubmittableExtrinsic<{
        pallet: 'Identity';
        palletCall: {
          name: 'SetIdentity';
          params: { info: PalletIdentityIdentityInfo };
        };
      }>
    >;

    /**
     * See [`Pallet::set_subs`].
     *
     * @param {Array<[AccountId32Like, Data]>} subs
     **/
    setSubs: GenericTxCall<
      (subs: Array<[AccountId32Like, Data]>) => ChainSubmittableExtrinsic<{
        pallet: 'Identity';
        palletCall: {
          name: 'SetSubs';
          params: { subs: Array<[AccountId32Like, Data]> };
        };
      }>
    >;

    /**
     * See [`Pallet::clear_identity`].
     *
     **/
    clearIdentity: GenericTxCall<
      () => ChainSubmittableExtrinsic<{
        pallet: 'Identity';
        palletCall: {
          name: 'ClearIdentity';
        };
      }>
    >;

    /**
     * See [`Pallet::request_judgement`].
     *
     * @param {number} regIndex
     * @param {bigint} maxFee
     **/
    requestJudgement: GenericTxCall<
      (
        regIndex: number,
        maxFee: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Identity';
        palletCall: {
          name: 'RequestJudgement';
          params: { regIndex: number; maxFee: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::cancel_request`].
     *
     * @param {number} regIndex
     **/
    cancelRequest: GenericTxCall<
      (regIndex: number) => ChainSubmittableExtrinsic<{
        pallet: 'Identity';
        palletCall: {
          name: 'CancelRequest';
          params: { regIndex: number };
        };
      }>
    >;

    /**
     * See [`Pallet::set_fee`].
     *
     * @param {number} index
     * @param {bigint} fee
     **/
    setFee: GenericTxCall<
      (
        index: number,
        fee: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Identity';
        palletCall: {
          name: 'SetFee';
          params: { index: number; fee: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::set_account_id`].
     *
     * @param {number} index
     * @param {MultiAddressLike} new_
     **/
    setAccountId: GenericTxCall<
      (
        index: number,
        new_: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Identity';
        palletCall: {
          name: 'SetAccountId';
          params: { index: number; new: MultiAddressLike };
        };
      }>
    >;

    /**
     * See [`Pallet::set_fields`].
     *
     * @param {number} index
     * @param {PalletIdentityBitFlags} fields
     **/
    setFields: GenericTxCall<
      (
        index: number,
        fields: PalletIdentityBitFlags,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Identity';
        palletCall: {
          name: 'SetFields';
          params: { index: number; fields: PalletIdentityBitFlags };
        };
      }>
    >;

    /**
     * See [`Pallet::provide_judgement`].
     *
     * @param {number} regIndex
     * @param {MultiAddressLike} target
     * @param {PalletIdentityJudgement} judgement
     * @param {H256} identity
     **/
    provideJudgement: GenericTxCall<
      (
        regIndex: number,
        target: MultiAddressLike,
        judgement: PalletIdentityJudgement,
        identity: H256,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Identity';
        palletCall: {
          name: 'ProvideJudgement';
          params: { regIndex: number; target: MultiAddressLike; judgement: PalletIdentityJudgement; identity: H256 };
        };
      }>
    >;

    /**
     * See [`Pallet::kill_identity`].
     *
     * @param {MultiAddressLike} target
     **/
    killIdentity: GenericTxCall<
      (target: MultiAddressLike) => ChainSubmittableExtrinsic<{
        pallet: 'Identity';
        palletCall: {
          name: 'KillIdentity';
          params: { target: MultiAddressLike };
        };
      }>
    >;

    /**
     * See [`Pallet::add_sub`].
     *
     * @param {MultiAddressLike} sub
     * @param {Data} data
     **/
    addSub: GenericTxCall<
      (
        sub: MultiAddressLike,
        data: Data,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Identity';
        palletCall: {
          name: 'AddSub';
          params: { sub: MultiAddressLike; data: Data };
        };
      }>
    >;

    /**
     * See [`Pallet::rename_sub`].
     *
     * @param {MultiAddressLike} sub
     * @param {Data} data
     **/
    renameSub: GenericTxCall<
      (
        sub: MultiAddressLike,
        data: Data,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Identity';
        palletCall: {
          name: 'RenameSub';
          params: { sub: MultiAddressLike; data: Data };
        };
      }>
    >;

    /**
     * See [`Pallet::remove_sub`].
     *
     * @param {MultiAddressLike} sub
     **/
    removeSub: GenericTxCall<
      (sub: MultiAddressLike) => ChainSubmittableExtrinsic<{
        pallet: 'Identity';
        palletCall: {
          name: 'RemoveSub';
          params: { sub: MultiAddressLike };
        };
      }>
    >;

    /**
     * See [`Pallet::quit_sub`].
     *
     **/
    quitSub: GenericTxCall<
      () => ChainSubmittableExtrinsic<{
        pallet: 'Identity';
        palletCall: {
          name: 'QuitSub';
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<TxCall>;
  };
  /**
   * Pallet `Timestamp`'s transaction calls
   **/
  timestamp: {
    /**
     * See [`Pallet::set`].
     *
     * @param {bigint} now
     **/
    set: GenericTxCall<
      (now: bigint) => ChainSubmittableExtrinsic<{
        pallet: 'Timestamp';
        palletCall: {
          name: 'Set';
          params: { now: bigint };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<TxCall>;
  };
  /**
   * Pallet `Multisig`'s transaction calls
   **/
  multisig: {
    /**
     * See [`Pallet::as_multi_threshold_1`].
     *
     * @param {Array<AccountId32Like>} otherSignatories
     * @param {AstarRuntimeRuntimeCallLike} call
     **/
    asMultiThreshold1: GenericTxCall<
      (
        otherSignatories: Array<AccountId32Like>,
        call: AstarRuntimeRuntimeCallLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Multisig';
        palletCall: {
          name: 'AsMultiThreshold1';
          params: { otherSignatories: Array<AccountId32Like>; call: AstarRuntimeRuntimeCallLike };
        };
      }>
    >;

    /**
     * See [`Pallet::as_multi`].
     *
     * @param {number} threshold
     * @param {Array<AccountId32Like>} otherSignatories
     * @param {PalletMultisigTimepoint | undefined} maybeTimepoint
     * @param {AstarRuntimeRuntimeCallLike} call
     * @param {SpWeightsWeightV2Weight} maxWeight
     **/
    asMulti: GenericTxCall<
      (
        threshold: number,
        otherSignatories: Array<AccountId32Like>,
        maybeTimepoint: PalletMultisigTimepoint | undefined,
        call: AstarRuntimeRuntimeCallLike,
        maxWeight: SpWeightsWeightV2Weight,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Multisig';
        palletCall: {
          name: 'AsMulti';
          params: {
            threshold: number;
            otherSignatories: Array<AccountId32Like>;
            maybeTimepoint: PalletMultisigTimepoint | undefined;
            call: AstarRuntimeRuntimeCallLike;
            maxWeight: SpWeightsWeightV2Weight;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::approve_as_multi`].
     *
     * @param {number} threshold
     * @param {Array<AccountId32Like>} otherSignatories
     * @param {PalletMultisigTimepoint | undefined} maybeTimepoint
     * @param {FixedBytes<32>} callHash
     * @param {SpWeightsWeightV2Weight} maxWeight
     **/
    approveAsMulti: GenericTxCall<
      (
        threshold: number,
        otherSignatories: Array<AccountId32Like>,
        maybeTimepoint: PalletMultisigTimepoint | undefined,
        callHash: FixedBytes<32>,
        maxWeight: SpWeightsWeightV2Weight,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Multisig';
        palletCall: {
          name: 'ApproveAsMulti';
          params: {
            threshold: number;
            otherSignatories: Array<AccountId32Like>;
            maybeTimepoint: PalletMultisigTimepoint | undefined;
            callHash: FixedBytes<32>;
            maxWeight: SpWeightsWeightV2Weight;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::cancel_as_multi`].
     *
     * @param {number} threshold
     * @param {Array<AccountId32Like>} otherSignatories
     * @param {PalletMultisigTimepoint} timepoint
     * @param {FixedBytes<32>} callHash
     **/
    cancelAsMulti: GenericTxCall<
      (
        threshold: number,
        otherSignatories: Array<AccountId32Like>,
        timepoint: PalletMultisigTimepoint,
        callHash: FixedBytes<32>,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Multisig';
        palletCall: {
          name: 'CancelAsMulti';
          params: {
            threshold: number;
            otherSignatories: Array<AccountId32Like>;
            timepoint: PalletMultisigTimepoint;
            callHash: FixedBytes<32>;
          };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<TxCall>;
  };
  /**
   * Pallet `Proxy`'s transaction calls
   **/
  proxy: {
    /**
     * See [`Pallet::proxy`].
     *
     * @param {MultiAddressLike} real
     * @param {AstarRuntimeProxyType | undefined} forceProxyType
     * @param {AstarRuntimeRuntimeCallLike} call
     **/
    proxy: GenericTxCall<
      (
        real: MultiAddressLike,
        forceProxyType: AstarRuntimeProxyType | undefined,
        call: AstarRuntimeRuntimeCallLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Proxy';
        palletCall: {
          name: 'Proxy';
          params: {
            real: MultiAddressLike;
            forceProxyType: AstarRuntimeProxyType | undefined;
            call: AstarRuntimeRuntimeCallLike;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::add_proxy`].
     *
     * @param {MultiAddressLike} delegate
     * @param {AstarRuntimeProxyType} proxyType
     * @param {number} delay
     **/
    addProxy: GenericTxCall<
      (
        delegate: MultiAddressLike,
        proxyType: AstarRuntimeProxyType,
        delay: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Proxy';
        palletCall: {
          name: 'AddProxy';
          params: { delegate: MultiAddressLike; proxyType: AstarRuntimeProxyType; delay: number };
        };
      }>
    >;

    /**
     * See [`Pallet::remove_proxy`].
     *
     * @param {MultiAddressLike} delegate
     * @param {AstarRuntimeProxyType} proxyType
     * @param {number} delay
     **/
    removeProxy: GenericTxCall<
      (
        delegate: MultiAddressLike,
        proxyType: AstarRuntimeProxyType,
        delay: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Proxy';
        palletCall: {
          name: 'RemoveProxy';
          params: { delegate: MultiAddressLike; proxyType: AstarRuntimeProxyType; delay: number };
        };
      }>
    >;

    /**
     * See [`Pallet::remove_proxies`].
     *
     **/
    removeProxies: GenericTxCall<
      () => ChainSubmittableExtrinsic<{
        pallet: 'Proxy';
        palletCall: {
          name: 'RemoveProxies';
        };
      }>
    >;

    /**
     * See [`Pallet::create_pure`].
     *
     * @param {AstarRuntimeProxyType} proxyType
     * @param {number} delay
     * @param {number} index
     **/
    createPure: GenericTxCall<
      (
        proxyType: AstarRuntimeProxyType,
        delay: number,
        index: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Proxy';
        palletCall: {
          name: 'CreatePure';
          params: { proxyType: AstarRuntimeProxyType; delay: number; index: number };
        };
      }>
    >;

    /**
     * See [`Pallet::kill_pure`].
     *
     * @param {MultiAddressLike} spawner
     * @param {AstarRuntimeProxyType} proxyType
     * @param {number} index
     * @param {number} height
     * @param {number} extIndex
     **/
    killPure: GenericTxCall<
      (
        spawner: MultiAddressLike,
        proxyType: AstarRuntimeProxyType,
        index: number,
        height: number,
        extIndex: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Proxy';
        palletCall: {
          name: 'KillPure';
          params: {
            spawner: MultiAddressLike;
            proxyType: AstarRuntimeProxyType;
            index: number;
            height: number;
            extIndex: number;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::announce`].
     *
     * @param {MultiAddressLike} real
     * @param {H256} callHash
     **/
    announce: GenericTxCall<
      (
        real: MultiAddressLike,
        callHash: H256,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Proxy';
        palletCall: {
          name: 'Announce';
          params: { real: MultiAddressLike; callHash: H256 };
        };
      }>
    >;

    /**
     * See [`Pallet::remove_announcement`].
     *
     * @param {MultiAddressLike} real
     * @param {H256} callHash
     **/
    removeAnnouncement: GenericTxCall<
      (
        real: MultiAddressLike,
        callHash: H256,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Proxy';
        palletCall: {
          name: 'RemoveAnnouncement';
          params: { real: MultiAddressLike; callHash: H256 };
        };
      }>
    >;

    /**
     * See [`Pallet::reject_announcement`].
     *
     * @param {MultiAddressLike} delegate
     * @param {H256} callHash
     **/
    rejectAnnouncement: GenericTxCall<
      (
        delegate: MultiAddressLike,
        callHash: H256,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Proxy';
        palletCall: {
          name: 'RejectAnnouncement';
          params: { delegate: MultiAddressLike; callHash: H256 };
        };
      }>
    >;

    /**
     * See [`Pallet::proxy_announced`].
     *
     * @param {MultiAddressLike} delegate
     * @param {MultiAddressLike} real
     * @param {AstarRuntimeProxyType | undefined} forceProxyType
     * @param {AstarRuntimeRuntimeCallLike} call
     **/
    proxyAnnounced: GenericTxCall<
      (
        delegate: MultiAddressLike,
        real: MultiAddressLike,
        forceProxyType: AstarRuntimeProxyType | undefined,
        call: AstarRuntimeRuntimeCallLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Proxy';
        palletCall: {
          name: 'ProxyAnnounced';
          params: {
            delegate: MultiAddressLike;
            real: MultiAddressLike;
            forceProxyType: AstarRuntimeProxyType | undefined;
            call: AstarRuntimeRuntimeCallLike;
          };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<TxCall>;
  };
  /**
   * Pallet `ParachainSystem`'s transaction calls
   **/
  parachainSystem: {
    /**
     * See [`Pallet::set_validation_data`].
     *
     * @param {CumulusPrimitivesParachainInherentParachainInherentData} data
     **/
    setValidationData: GenericTxCall<
      (data: CumulusPrimitivesParachainInherentParachainInherentData) => ChainSubmittableExtrinsic<{
        pallet: 'ParachainSystem';
        palletCall: {
          name: 'SetValidationData';
          params: { data: CumulusPrimitivesParachainInherentParachainInherentData };
        };
      }>
    >;

    /**
     * See [`Pallet::sudo_send_upward_message`].
     *
     * @param {BytesLike} message
     **/
    sudoSendUpwardMessage: GenericTxCall<
      (message: BytesLike) => ChainSubmittableExtrinsic<{
        pallet: 'ParachainSystem';
        palletCall: {
          name: 'SudoSendUpwardMessage';
          params: { message: BytesLike };
        };
      }>
    >;

    /**
     * See [`Pallet::authorize_upgrade`].
     *
     * @param {H256} codeHash
     * @param {boolean} checkVersion
     **/
    authorizeUpgrade: GenericTxCall<
      (
        codeHash: H256,
        checkVersion: boolean,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'ParachainSystem';
        palletCall: {
          name: 'AuthorizeUpgrade';
          params: { codeHash: H256; checkVersion: boolean };
        };
      }>
    >;

    /**
     * See [`Pallet::enact_authorized_upgrade`].
     *
     * @param {BytesLike} code
     **/
    enactAuthorizedUpgrade: GenericTxCall<
      (code: BytesLike) => ChainSubmittableExtrinsic<{
        pallet: 'ParachainSystem';
        palletCall: {
          name: 'EnactAuthorizedUpgrade';
          params: { code: BytesLike };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<TxCall>;
  };
  /**
   * Pallet `ParachainInfo`'s transaction calls
   **/
  parachainInfo: {
    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<TxCall>;
  };
  /**
   * Pallet `Balances`'s transaction calls
   **/
  balances: {
    /**
     * See [`Pallet::transfer_allow_death`].
     *
     * @param {MultiAddressLike} dest
     * @param {bigint} value
     **/
    transferAllowDeath: GenericTxCall<
      (
        dest: MultiAddressLike,
        value: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Balances';
        palletCall: {
          name: 'TransferAllowDeath';
          params: { dest: MultiAddressLike; value: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::set_balance_deprecated`].
     *
     * @param {MultiAddressLike} who
     * @param {bigint} newFree
     * @param {bigint} oldReserved
     **/
    setBalanceDeprecated: GenericTxCall<
      (
        who: MultiAddressLike,
        newFree: bigint,
        oldReserved: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Balances';
        palletCall: {
          name: 'SetBalanceDeprecated';
          params: { who: MultiAddressLike; newFree: bigint; oldReserved: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::force_transfer`].
     *
     * @param {MultiAddressLike} source
     * @param {MultiAddressLike} dest
     * @param {bigint} value
     **/
    forceTransfer: GenericTxCall<
      (
        source: MultiAddressLike,
        dest: MultiAddressLike,
        value: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Balances';
        palletCall: {
          name: 'ForceTransfer';
          params: { source: MultiAddressLike; dest: MultiAddressLike; value: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::transfer_keep_alive`].
     *
     * @param {MultiAddressLike} dest
     * @param {bigint} value
     **/
    transferKeepAlive: GenericTxCall<
      (
        dest: MultiAddressLike,
        value: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Balances';
        palletCall: {
          name: 'TransferKeepAlive';
          params: { dest: MultiAddressLike; value: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::transfer_all`].
     *
     * @param {MultiAddressLike} dest
     * @param {boolean} keepAlive
     **/
    transferAll: GenericTxCall<
      (
        dest: MultiAddressLike,
        keepAlive: boolean,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Balances';
        palletCall: {
          name: 'TransferAll';
          params: { dest: MultiAddressLike; keepAlive: boolean };
        };
      }>
    >;

    /**
     * See [`Pallet::force_unreserve`].
     *
     * @param {MultiAddressLike} who
     * @param {bigint} amount
     **/
    forceUnreserve: GenericTxCall<
      (
        who: MultiAddressLike,
        amount: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Balances';
        palletCall: {
          name: 'ForceUnreserve';
          params: { who: MultiAddressLike; amount: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::upgrade_accounts`].
     *
     * @param {Array<AccountId32Like>} who
     **/
    upgradeAccounts: GenericTxCall<
      (who: Array<AccountId32Like>) => ChainSubmittableExtrinsic<{
        pallet: 'Balances';
        palletCall: {
          name: 'UpgradeAccounts';
          params: { who: Array<AccountId32Like> };
        };
      }>
    >;

    /**
     * See [`Pallet::transfer`].
     *
     * @param {MultiAddressLike} dest
     * @param {bigint} value
     **/
    transfer: GenericTxCall<
      (
        dest: MultiAddressLike,
        value: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Balances';
        palletCall: {
          name: 'Transfer';
          params: { dest: MultiAddressLike; value: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::force_set_balance`].
     *
     * @param {MultiAddressLike} who
     * @param {bigint} newFree
     **/
    forceSetBalance: GenericTxCall<
      (
        who: MultiAddressLike,
        newFree: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Balances';
        palletCall: {
          name: 'ForceSetBalance';
          params: { who: MultiAddressLike; newFree: bigint };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<TxCall>;
  };
  /**
   * Pallet `Vesting`'s transaction calls
   **/
  vesting: {
    /**
     * See [`Pallet::vest`].
     *
     **/
    vest: GenericTxCall<
      () => ChainSubmittableExtrinsic<{
        pallet: 'Vesting';
        palletCall: {
          name: 'Vest';
        };
      }>
    >;

    /**
     * See [`Pallet::vest_other`].
     *
     * @param {MultiAddressLike} target
     **/
    vestOther: GenericTxCall<
      (target: MultiAddressLike) => ChainSubmittableExtrinsic<{
        pallet: 'Vesting';
        palletCall: {
          name: 'VestOther';
          params: { target: MultiAddressLike };
        };
      }>
    >;

    /**
     * See [`Pallet::vested_transfer`].
     *
     * @param {MultiAddressLike} target
     * @param {PalletVestingVestingInfo} schedule
     **/
    vestedTransfer: GenericTxCall<
      (
        target: MultiAddressLike,
        schedule: PalletVestingVestingInfo,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Vesting';
        palletCall: {
          name: 'VestedTransfer';
          params: { target: MultiAddressLike; schedule: PalletVestingVestingInfo };
        };
      }>
    >;

    /**
     * See [`Pallet::force_vested_transfer`].
     *
     * @param {MultiAddressLike} source
     * @param {MultiAddressLike} target
     * @param {PalletVestingVestingInfo} schedule
     **/
    forceVestedTransfer: GenericTxCall<
      (
        source: MultiAddressLike,
        target: MultiAddressLike,
        schedule: PalletVestingVestingInfo,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Vesting';
        palletCall: {
          name: 'ForceVestedTransfer';
          params: { source: MultiAddressLike; target: MultiAddressLike; schedule: PalletVestingVestingInfo };
        };
      }>
    >;

    /**
     * See [`Pallet::merge_schedules`].
     *
     * @param {number} schedule1Index
     * @param {number} schedule2Index
     **/
    mergeSchedules: GenericTxCall<
      (
        schedule1Index: number,
        schedule2Index: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Vesting';
        palletCall: {
          name: 'MergeSchedules';
          params: { schedule1Index: number; schedule2Index: number };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<TxCall>;
  };
  /**
   * Pallet `Inflation`'s transaction calls
   **/
  inflation: {
    /**
     * See [`Pallet::force_set_inflation_params`].
     *
     * @param {PalletInflationInflationParameters} params
     **/
    forceSetInflationParams: GenericTxCall<
      (params: PalletInflationInflationParameters) => ChainSubmittableExtrinsic<{
        pallet: 'Inflation';
        palletCall: {
          name: 'ForceSetInflationParams';
          params: { params: PalletInflationInflationParameters };
        };
      }>
    >;

    /**
     * See [`Pallet::force_inflation_recalculation`].
     *
     * @param {number} nextEra
     **/
    forceInflationRecalculation: GenericTxCall<
      (nextEra: number) => ChainSubmittableExtrinsic<{
        pallet: 'Inflation';
        palletCall: {
          name: 'ForceInflationRecalculation';
          params: { nextEra: number };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<TxCall>;
  };
  /**
   * Pallet `DappStaking`'s transaction calls
   **/
  dappStaking: {
    /**
     * See [`Pallet::unbond_and_unstake`].
     *
     * @param {AstarPrimitivesDappStakingSmartContract} contractId
     * @param {bigint} value
     **/
    unbondAndUnstake: GenericTxCall<
      (
        contractId: AstarPrimitivesDappStakingSmartContract,
        value: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'DappStaking';
        palletCall: {
          name: 'UnbondAndUnstake';
          params: { contractId: AstarPrimitivesDappStakingSmartContract; value: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::withdraw_unbonded`].
     *
     **/
    withdrawUnbonded: GenericTxCall<
      () => ChainSubmittableExtrinsic<{
        pallet: 'DappStaking';
        palletCall: {
          name: 'WithdrawUnbonded';
        };
      }>
    >;

    /**
     * See [`Pallet::maintenance_mode`].
     *
     * @param {boolean} enabled
     **/
    maintenanceMode: GenericTxCall<
      (enabled: boolean) => ChainSubmittableExtrinsic<{
        pallet: 'DappStaking';
        palletCall: {
          name: 'MaintenanceMode';
          params: { enabled: boolean };
        };
      }>
    >;

    /**
     * See [`Pallet::register`].
     *
     * @param {AccountId32Like} owner
     * @param {AstarPrimitivesDappStakingSmartContract} smartContract
     **/
    register: GenericTxCall<
      (
        owner: AccountId32Like,
        smartContract: AstarPrimitivesDappStakingSmartContract,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'DappStaking';
        palletCall: {
          name: 'Register';
          params: { owner: AccountId32Like; smartContract: AstarPrimitivesDappStakingSmartContract };
        };
      }>
    >;

    /**
     * See [`Pallet::set_dapp_reward_beneficiary`].
     *
     * @param {AstarPrimitivesDappStakingSmartContract} smartContract
     * @param {AccountId32Like | undefined} beneficiary
     **/
    setDappRewardBeneficiary: GenericTxCall<
      (
        smartContract: AstarPrimitivesDappStakingSmartContract,
        beneficiary: AccountId32Like | undefined,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'DappStaking';
        palletCall: {
          name: 'SetDappRewardBeneficiary';
          params: { smartContract: AstarPrimitivesDappStakingSmartContract; beneficiary: AccountId32Like | undefined };
        };
      }>
    >;

    /**
     * See [`Pallet::set_dapp_owner`].
     *
     * @param {AstarPrimitivesDappStakingSmartContract} smartContract
     * @param {AccountId32Like} newOwner
     **/
    setDappOwner: GenericTxCall<
      (
        smartContract: AstarPrimitivesDappStakingSmartContract,
        newOwner: AccountId32Like,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'DappStaking';
        palletCall: {
          name: 'SetDappOwner';
          params: { smartContract: AstarPrimitivesDappStakingSmartContract; newOwner: AccountId32Like };
        };
      }>
    >;

    /**
     * See [`Pallet::unregister`].
     *
     * @param {AstarPrimitivesDappStakingSmartContract} smartContract
     **/
    unregister: GenericTxCall<
      (smartContract: AstarPrimitivesDappStakingSmartContract) => ChainSubmittableExtrinsic<{
        pallet: 'DappStaking';
        palletCall: {
          name: 'Unregister';
          params: { smartContract: AstarPrimitivesDappStakingSmartContract };
        };
      }>
    >;

    /**
     * See [`Pallet::lock`].
     *
     * @param {bigint} amount
     **/
    lock: GenericTxCall<
      (amount: bigint) => ChainSubmittableExtrinsic<{
        pallet: 'DappStaking';
        palletCall: {
          name: 'Lock';
          params: { amount: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::unlock`].
     *
     * @param {bigint} amount
     **/
    unlock: GenericTxCall<
      (amount: bigint) => ChainSubmittableExtrinsic<{
        pallet: 'DappStaking';
        palletCall: {
          name: 'Unlock';
          params: { amount: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::claim_unlocked`].
     *
     **/
    claimUnlocked: GenericTxCall<
      () => ChainSubmittableExtrinsic<{
        pallet: 'DappStaking';
        palletCall: {
          name: 'ClaimUnlocked';
        };
      }>
    >;

    /**
     * See [`Pallet::relock_unlocking`].
     *
     **/
    relockUnlocking: GenericTxCall<
      () => ChainSubmittableExtrinsic<{
        pallet: 'DappStaking';
        palletCall: {
          name: 'RelockUnlocking';
        };
      }>
    >;

    /**
     * See [`Pallet::stake`].
     *
     * @param {AstarPrimitivesDappStakingSmartContract} smartContract
     * @param {bigint} amount
     **/
    stake: GenericTxCall<
      (
        smartContract: AstarPrimitivesDappStakingSmartContract,
        amount: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'DappStaking';
        palletCall: {
          name: 'Stake';
          params: { smartContract: AstarPrimitivesDappStakingSmartContract; amount: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::unstake`].
     *
     * @param {AstarPrimitivesDappStakingSmartContract} smartContract
     * @param {bigint} amount
     **/
    unstake: GenericTxCall<
      (
        smartContract: AstarPrimitivesDappStakingSmartContract,
        amount: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'DappStaking';
        palletCall: {
          name: 'Unstake';
          params: { smartContract: AstarPrimitivesDappStakingSmartContract; amount: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::claim_staker_rewards`].
     *
     **/
    claimStakerRewards: GenericTxCall<
      () => ChainSubmittableExtrinsic<{
        pallet: 'DappStaking';
        palletCall: {
          name: 'ClaimStakerRewards';
        };
      }>
    >;

    /**
     * See [`Pallet::claim_bonus_reward`].
     *
     * @param {AstarPrimitivesDappStakingSmartContract} smartContract
     **/
    claimBonusReward: GenericTxCall<
      (smartContract: AstarPrimitivesDappStakingSmartContract) => ChainSubmittableExtrinsic<{
        pallet: 'DappStaking';
        palletCall: {
          name: 'ClaimBonusReward';
          params: { smartContract: AstarPrimitivesDappStakingSmartContract };
        };
      }>
    >;

    /**
     * See [`Pallet::claim_dapp_reward`].
     *
     * @param {AstarPrimitivesDappStakingSmartContract} smartContract
     * @param {number} era
     **/
    claimDappReward: GenericTxCall<
      (
        smartContract: AstarPrimitivesDappStakingSmartContract,
        era: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'DappStaking';
        palletCall: {
          name: 'ClaimDappReward';
          params: { smartContract: AstarPrimitivesDappStakingSmartContract; era: number };
        };
      }>
    >;

    /**
     * See [`Pallet::unstake_from_unregistered`].
     *
     * @param {AstarPrimitivesDappStakingSmartContract} smartContract
     **/
    unstakeFromUnregistered: GenericTxCall<
      (smartContract: AstarPrimitivesDappStakingSmartContract) => ChainSubmittableExtrinsic<{
        pallet: 'DappStaking';
        palletCall: {
          name: 'UnstakeFromUnregistered';
          params: { smartContract: AstarPrimitivesDappStakingSmartContract };
        };
      }>
    >;

    /**
     * See [`Pallet::cleanup_expired_entries`].
     *
     **/
    cleanupExpiredEntries: GenericTxCall<
      () => ChainSubmittableExtrinsic<{
        pallet: 'DappStaking';
        palletCall: {
          name: 'CleanupExpiredEntries';
        };
      }>
    >;

    /**
     * See [`Pallet::force`].
     *
     * @param {PalletDappStakingV3ForcingType} forcingType
     **/
    force: GenericTxCall<
      (forcingType: PalletDappStakingV3ForcingType) => ChainSubmittableExtrinsic<{
        pallet: 'DappStaking';
        palletCall: {
          name: 'Force';
          params: { forcingType: PalletDappStakingV3ForcingType };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<TxCall>;
  };
  /**
   * Pallet `Assets`'s transaction calls
   **/
  assets: {
    /**
     * See [`Pallet::create`].
     *
     * @param {bigint} id
     * @param {MultiAddressLike} admin
     * @param {bigint} minBalance
     **/
    create: GenericTxCall<
      (
        id: bigint,
        admin: MultiAddressLike,
        minBalance: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Assets';
        palletCall: {
          name: 'Create';
          params: { id: bigint; admin: MultiAddressLike; minBalance: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::force_create`].
     *
     * @param {bigint} id
     * @param {MultiAddressLike} owner
     * @param {boolean} isSufficient
     * @param {bigint} minBalance
     **/
    forceCreate: GenericTxCall<
      (
        id: bigint,
        owner: MultiAddressLike,
        isSufficient: boolean,
        minBalance: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Assets';
        palletCall: {
          name: 'ForceCreate';
          params: { id: bigint; owner: MultiAddressLike; isSufficient: boolean; minBalance: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::start_destroy`].
     *
     * @param {bigint} id
     **/
    startDestroy: GenericTxCall<
      (id: bigint) => ChainSubmittableExtrinsic<{
        pallet: 'Assets';
        palletCall: {
          name: 'StartDestroy';
          params: { id: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::destroy_accounts`].
     *
     * @param {bigint} id
     **/
    destroyAccounts: GenericTxCall<
      (id: bigint) => ChainSubmittableExtrinsic<{
        pallet: 'Assets';
        palletCall: {
          name: 'DestroyAccounts';
          params: { id: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::destroy_approvals`].
     *
     * @param {bigint} id
     **/
    destroyApprovals: GenericTxCall<
      (id: bigint) => ChainSubmittableExtrinsic<{
        pallet: 'Assets';
        palletCall: {
          name: 'DestroyApprovals';
          params: { id: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::finish_destroy`].
     *
     * @param {bigint} id
     **/
    finishDestroy: GenericTxCall<
      (id: bigint) => ChainSubmittableExtrinsic<{
        pallet: 'Assets';
        palletCall: {
          name: 'FinishDestroy';
          params: { id: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::mint`].
     *
     * @param {bigint} id
     * @param {MultiAddressLike} beneficiary
     * @param {bigint} amount
     **/
    mint: GenericTxCall<
      (
        id: bigint,
        beneficiary: MultiAddressLike,
        amount: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Assets';
        palletCall: {
          name: 'Mint';
          params: { id: bigint; beneficiary: MultiAddressLike; amount: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::burn`].
     *
     * @param {bigint} id
     * @param {MultiAddressLike} who
     * @param {bigint} amount
     **/
    burn: GenericTxCall<
      (
        id: bigint,
        who: MultiAddressLike,
        amount: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Assets';
        palletCall: {
          name: 'Burn';
          params: { id: bigint; who: MultiAddressLike; amount: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::transfer`].
     *
     * @param {bigint} id
     * @param {MultiAddressLike} target
     * @param {bigint} amount
     **/
    transfer: GenericTxCall<
      (
        id: bigint,
        target: MultiAddressLike,
        amount: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Assets';
        palletCall: {
          name: 'Transfer';
          params: { id: bigint; target: MultiAddressLike; amount: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::transfer_keep_alive`].
     *
     * @param {bigint} id
     * @param {MultiAddressLike} target
     * @param {bigint} amount
     **/
    transferKeepAlive: GenericTxCall<
      (
        id: bigint,
        target: MultiAddressLike,
        amount: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Assets';
        palletCall: {
          name: 'TransferKeepAlive';
          params: { id: bigint; target: MultiAddressLike; amount: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::force_transfer`].
     *
     * @param {bigint} id
     * @param {MultiAddressLike} source
     * @param {MultiAddressLike} dest
     * @param {bigint} amount
     **/
    forceTransfer: GenericTxCall<
      (
        id: bigint,
        source: MultiAddressLike,
        dest: MultiAddressLike,
        amount: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Assets';
        palletCall: {
          name: 'ForceTransfer';
          params: { id: bigint; source: MultiAddressLike; dest: MultiAddressLike; amount: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::freeze`].
     *
     * @param {bigint} id
     * @param {MultiAddressLike} who
     **/
    freeze: GenericTxCall<
      (
        id: bigint,
        who: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Assets';
        palletCall: {
          name: 'Freeze';
          params: { id: bigint; who: MultiAddressLike };
        };
      }>
    >;

    /**
     * See [`Pallet::thaw`].
     *
     * @param {bigint} id
     * @param {MultiAddressLike} who
     **/
    thaw: GenericTxCall<
      (
        id: bigint,
        who: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Assets';
        palletCall: {
          name: 'Thaw';
          params: { id: bigint; who: MultiAddressLike };
        };
      }>
    >;

    /**
     * See [`Pallet::freeze_asset`].
     *
     * @param {bigint} id
     **/
    freezeAsset: GenericTxCall<
      (id: bigint) => ChainSubmittableExtrinsic<{
        pallet: 'Assets';
        palletCall: {
          name: 'FreezeAsset';
          params: { id: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::thaw_asset`].
     *
     * @param {bigint} id
     **/
    thawAsset: GenericTxCall<
      (id: bigint) => ChainSubmittableExtrinsic<{
        pallet: 'Assets';
        palletCall: {
          name: 'ThawAsset';
          params: { id: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::transfer_ownership`].
     *
     * @param {bigint} id
     * @param {MultiAddressLike} owner
     **/
    transferOwnership: GenericTxCall<
      (
        id: bigint,
        owner: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Assets';
        palletCall: {
          name: 'TransferOwnership';
          params: { id: bigint; owner: MultiAddressLike };
        };
      }>
    >;

    /**
     * See [`Pallet::set_team`].
     *
     * @param {bigint} id
     * @param {MultiAddressLike} issuer
     * @param {MultiAddressLike} admin
     * @param {MultiAddressLike} freezer
     **/
    setTeam: GenericTxCall<
      (
        id: bigint,
        issuer: MultiAddressLike,
        admin: MultiAddressLike,
        freezer: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Assets';
        palletCall: {
          name: 'SetTeam';
          params: { id: bigint; issuer: MultiAddressLike; admin: MultiAddressLike; freezer: MultiAddressLike };
        };
      }>
    >;

    /**
     * See [`Pallet::set_metadata`].
     *
     * @param {bigint} id
     * @param {BytesLike} name
     * @param {BytesLike} symbol
     * @param {number} decimals
     **/
    setMetadata: GenericTxCall<
      (
        id: bigint,
        name: BytesLike,
        symbol: BytesLike,
        decimals: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Assets';
        palletCall: {
          name: 'SetMetadata';
          params: { id: bigint; name: BytesLike; symbol: BytesLike; decimals: number };
        };
      }>
    >;

    /**
     * See [`Pallet::clear_metadata`].
     *
     * @param {bigint} id
     **/
    clearMetadata: GenericTxCall<
      (id: bigint) => ChainSubmittableExtrinsic<{
        pallet: 'Assets';
        palletCall: {
          name: 'ClearMetadata';
          params: { id: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::force_set_metadata`].
     *
     * @param {bigint} id
     * @param {BytesLike} name
     * @param {BytesLike} symbol
     * @param {number} decimals
     * @param {boolean} isFrozen
     **/
    forceSetMetadata: GenericTxCall<
      (
        id: bigint,
        name: BytesLike,
        symbol: BytesLike,
        decimals: number,
        isFrozen: boolean,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Assets';
        palletCall: {
          name: 'ForceSetMetadata';
          params: { id: bigint; name: BytesLike; symbol: BytesLike; decimals: number; isFrozen: boolean };
        };
      }>
    >;

    /**
     * See [`Pallet::force_clear_metadata`].
     *
     * @param {bigint} id
     **/
    forceClearMetadata: GenericTxCall<
      (id: bigint) => ChainSubmittableExtrinsic<{
        pallet: 'Assets';
        palletCall: {
          name: 'ForceClearMetadata';
          params: { id: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::force_asset_status`].
     *
     * @param {bigint} id
     * @param {MultiAddressLike} owner
     * @param {MultiAddressLike} issuer
     * @param {MultiAddressLike} admin
     * @param {MultiAddressLike} freezer
     * @param {bigint} minBalance
     * @param {boolean} isSufficient
     * @param {boolean} isFrozen
     **/
    forceAssetStatus: GenericTxCall<
      (
        id: bigint,
        owner: MultiAddressLike,
        issuer: MultiAddressLike,
        admin: MultiAddressLike,
        freezer: MultiAddressLike,
        minBalance: bigint,
        isSufficient: boolean,
        isFrozen: boolean,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Assets';
        palletCall: {
          name: 'ForceAssetStatus';
          params: {
            id: bigint;
            owner: MultiAddressLike;
            issuer: MultiAddressLike;
            admin: MultiAddressLike;
            freezer: MultiAddressLike;
            minBalance: bigint;
            isSufficient: boolean;
            isFrozen: boolean;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::approve_transfer`].
     *
     * @param {bigint} id
     * @param {MultiAddressLike} delegate
     * @param {bigint} amount
     **/
    approveTransfer: GenericTxCall<
      (
        id: bigint,
        delegate: MultiAddressLike,
        amount: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Assets';
        palletCall: {
          name: 'ApproveTransfer';
          params: { id: bigint; delegate: MultiAddressLike; amount: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::cancel_approval`].
     *
     * @param {bigint} id
     * @param {MultiAddressLike} delegate
     **/
    cancelApproval: GenericTxCall<
      (
        id: bigint,
        delegate: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Assets';
        palletCall: {
          name: 'CancelApproval';
          params: { id: bigint; delegate: MultiAddressLike };
        };
      }>
    >;

    /**
     * See [`Pallet::force_cancel_approval`].
     *
     * @param {bigint} id
     * @param {MultiAddressLike} owner
     * @param {MultiAddressLike} delegate
     **/
    forceCancelApproval: GenericTxCall<
      (
        id: bigint,
        owner: MultiAddressLike,
        delegate: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Assets';
        palletCall: {
          name: 'ForceCancelApproval';
          params: { id: bigint; owner: MultiAddressLike; delegate: MultiAddressLike };
        };
      }>
    >;

    /**
     * See [`Pallet::transfer_approved`].
     *
     * @param {bigint} id
     * @param {MultiAddressLike} owner
     * @param {MultiAddressLike} destination
     * @param {bigint} amount
     **/
    transferApproved: GenericTxCall<
      (
        id: bigint,
        owner: MultiAddressLike,
        destination: MultiAddressLike,
        amount: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Assets';
        palletCall: {
          name: 'TransferApproved';
          params: { id: bigint; owner: MultiAddressLike; destination: MultiAddressLike; amount: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::touch`].
     *
     * @param {bigint} id
     **/
    touch: GenericTxCall<
      (id: bigint) => ChainSubmittableExtrinsic<{
        pallet: 'Assets';
        palletCall: {
          name: 'Touch';
          params: { id: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::refund`].
     *
     * @param {bigint} id
     * @param {boolean} allowBurn
     **/
    refund: GenericTxCall<
      (
        id: bigint,
        allowBurn: boolean,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Assets';
        palletCall: {
          name: 'Refund';
          params: { id: bigint; allowBurn: boolean };
        };
      }>
    >;

    /**
     * See [`Pallet::set_min_balance`].
     *
     * @param {bigint} id
     * @param {bigint} minBalance
     **/
    setMinBalance: GenericTxCall<
      (
        id: bigint,
        minBalance: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Assets';
        palletCall: {
          name: 'SetMinBalance';
          params: { id: bigint; minBalance: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::touch_other`].
     *
     * @param {bigint} id
     * @param {MultiAddressLike} who
     **/
    touchOther: GenericTxCall<
      (
        id: bigint,
        who: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Assets';
        palletCall: {
          name: 'TouchOther';
          params: { id: bigint; who: MultiAddressLike };
        };
      }>
    >;

    /**
     * See [`Pallet::refund_other`].
     *
     * @param {bigint} id
     * @param {MultiAddressLike} who
     **/
    refundOther: GenericTxCall<
      (
        id: bigint,
        who: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Assets';
        palletCall: {
          name: 'RefundOther';
          params: { id: bigint; who: MultiAddressLike };
        };
      }>
    >;

    /**
     * See [`Pallet::block`].
     *
     * @param {bigint} id
     * @param {MultiAddressLike} who
     **/
    block: GenericTxCall<
      (
        id: bigint,
        who: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Assets';
        palletCall: {
          name: 'Block';
          params: { id: bigint; who: MultiAddressLike };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<TxCall>;
  };
  /**
   * Pallet `CollatorSelection`'s transaction calls
   **/
  collatorSelection: {
    /**
     * See [`Pallet::set_invulnerables`].
     *
     * @param {Array<AccountId32Like>} new_
     **/
    setInvulnerables: GenericTxCall<
      (new_: Array<AccountId32Like>) => ChainSubmittableExtrinsic<{
        pallet: 'CollatorSelection';
        palletCall: {
          name: 'SetInvulnerables';
          params: { new: Array<AccountId32Like> };
        };
      }>
    >;

    /**
     * See [`Pallet::set_desired_candidates`].
     *
     * @param {number} max
     **/
    setDesiredCandidates: GenericTxCall<
      (max: number) => ChainSubmittableExtrinsic<{
        pallet: 'CollatorSelection';
        palletCall: {
          name: 'SetDesiredCandidates';
          params: { max: number };
        };
      }>
    >;

    /**
     * See [`Pallet::set_candidacy_bond`].
     *
     * @param {bigint} bond
     **/
    setCandidacyBond: GenericTxCall<
      (bond: bigint) => ChainSubmittableExtrinsic<{
        pallet: 'CollatorSelection';
        palletCall: {
          name: 'SetCandidacyBond';
          params: { bond: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::register_as_candidate`].
     *
     **/
    registerAsCandidate: GenericTxCall<
      () => ChainSubmittableExtrinsic<{
        pallet: 'CollatorSelection';
        palletCall: {
          name: 'RegisterAsCandidate';
        };
      }>
    >;

    /**
     * See [`Pallet::leave_intent`].
     *
     **/
    leaveIntent: GenericTxCall<
      () => ChainSubmittableExtrinsic<{
        pallet: 'CollatorSelection';
        palletCall: {
          name: 'LeaveIntent';
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<TxCall>;
  };
  /**
   * Pallet `Session`'s transaction calls
   **/
  session: {
    /**
     * See [`Pallet::set_keys`].
     *
     * @param {AstarRuntimeSessionKeys} keys
     * @param {BytesLike} proof
     **/
    setKeys: GenericTxCall<
      (
        keys: AstarRuntimeSessionKeys,
        proof: BytesLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Session';
        palletCall: {
          name: 'SetKeys';
          params: { keys: AstarRuntimeSessionKeys; proof: BytesLike };
        };
      }>
    >;

    /**
     * See [`Pallet::purge_keys`].
     *
     **/
    purgeKeys: GenericTxCall<
      () => ChainSubmittableExtrinsic<{
        pallet: 'Session';
        palletCall: {
          name: 'PurgeKeys';
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<TxCall>;
  };
  /**
   * Pallet `XcmpQueue`'s transaction calls
   **/
  xcmpQueue: {
    /**
     * See [`Pallet::service_overweight`].
     *
     * @param {bigint} index
     * @param {SpWeightsWeightV2Weight} weightLimit
     **/
    serviceOverweight: GenericTxCall<
      (
        index: bigint,
        weightLimit: SpWeightsWeightV2Weight,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'XcmpQueue';
        palletCall: {
          name: 'ServiceOverweight';
          params: { index: bigint; weightLimit: SpWeightsWeightV2Weight };
        };
      }>
    >;

    /**
     * See [`Pallet::suspend_xcm_execution`].
     *
     **/
    suspendXcmExecution: GenericTxCall<
      () => ChainSubmittableExtrinsic<{
        pallet: 'XcmpQueue';
        palletCall: {
          name: 'SuspendXcmExecution';
        };
      }>
    >;

    /**
     * See [`Pallet::resume_xcm_execution`].
     *
     **/
    resumeXcmExecution: GenericTxCall<
      () => ChainSubmittableExtrinsic<{
        pallet: 'XcmpQueue';
        palletCall: {
          name: 'ResumeXcmExecution';
        };
      }>
    >;

    /**
     * See [`Pallet::update_suspend_threshold`].
     *
     * @param {number} new_
     **/
    updateSuspendThreshold: GenericTxCall<
      (new_: number) => ChainSubmittableExtrinsic<{
        pallet: 'XcmpQueue';
        palletCall: {
          name: 'UpdateSuspendThreshold';
          params: { new: number };
        };
      }>
    >;

    /**
     * See [`Pallet::update_drop_threshold`].
     *
     * @param {number} new_
     **/
    updateDropThreshold: GenericTxCall<
      (new_: number) => ChainSubmittableExtrinsic<{
        pallet: 'XcmpQueue';
        palletCall: {
          name: 'UpdateDropThreshold';
          params: { new: number };
        };
      }>
    >;

    /**
     * See [`Pallet::update_resume_threshold`].
     *
     * @param {number} new_
     **/
    updateResumeThreshold: GenericTxCall<
      (new_: number) => ChainSubmittableExtrinsic<{
        pallet: 'XcmpQueue';
        palletCall: {
          name: 'UpdateResumeThreshold';
          params: { new: number };
        };
      }>
    >;

    /**
     * See [`Pallet::update_threshold_weight`].
     *
     * @param {SpWeightsWeightV2Weight} new_
     **/
    updateThresholdWeight: GenericTxCall<
      (new_: SpWeightsWeightV2Weight) => ChainSubmittableExtrinsic<{
        pallet: 'XcmpQueue';
        palletCall: {
          name: 'UpdateThresholdWeight';
          params: { new: SpWeightsWeightV2Weight };
        };
      }>
    >;

    /**
     * See [`Pallet::update_weight_restrict_decay`].
     *
     * @param {SpWeightsWeightV2Weight} new_
     **/
    updateWeightRestrictDecay: GenericTxCall<
      (new_: SpWeightsWeightV2Weight) => ChainSubmittableExtrinsic<{
        pallet: 'XcmpQueue';
        palletCall: {
          name: 'UpdateWeightRestrictDecay';
          params: { new: SpWeightsWeightV2Weight };
        };
      }>
    >;

    /**
     * See [`Pallet::update_xcmp_max_individual_weight`].
     *
     * @param {SpWeightsWeightV2Weight} new_
     **/
    updateXcmpMaxIndividualWeight: GenericTxCall<
      (new_: SpWeightsWeightV2Weight) => ChainSubmittableExtrinsic<{
        pallet: 'XcmpQueue';
        palletCall: {
          name: 'UpdateXcmpMaxIndividualWeight';
          params: { new: SpWeightsWeightV2Weight };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<TxCall>;
  };
  /**
   * Pallet `PolkadotXcm`'s transaction calls
   **/
  polkadotXcm: {
    /**
     * See [`Pallet::send`].
     *
     * @param {StagingXcmVersionedMultiLocation} dest
     * @param {StagingXcmVersionedXcm} message
     **/
    send: GenericTxCall<
      (
        dest: StagingXcmVersionedMultiLocation,
        message: StagingXcmVersionedXcm,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'PolkadotXcm';
        palletCall: {
          name: 'Send';
          params: { dest: StagingXcmVersionedMultiLocation; message: StagingXcmVersionedXcm };
        };
      }>
    >;

    /**
     * See [`Pallet::teleport_assets`].
     *
     * @param {StagingXcmVersionedMultiLocation} dest
     * @param {StagingXcmVersionedMultiLocation} beneficiary
     * @param {StagingXcmVersionedMultiAssets} assets
     * @param {number} feeAssetItem
     **/
    teleportAssets: GenericTxCall<
      (
        dest: StagingXcmVersionedMultiLocation,
        beneficiary: StagingXcmVersionedMultiLocation,
        assets: StagingXcmVersionedMultiAssets,
        feeAssetItem: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'PolkadotXcm';
        palletCall: {
          name: 'TeleportAssets';
          params: {
            dest: StagingXcmVersionedMultiLocation;
            beneficiary: StagingXcmVersionedMultiLocation;
            assets: StagingXcmVersionedMultiAssets;
            feeAssetItem: number;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::reserve_transfer_assets`].
     *
     * @param {StagingXcmVersionedMultiLocation} dest
     * @param {StagingXcmVersionedMultiLocation} beneficiary
     * @param {StagingXcmVersionedMultiAssets} assets
     * @param {number} feeAssetItem
     **/
    reserveTransferAssets: GenericTxCall<
      (
        dest: StagingXcmVersionedMultiLocation,
        beneficiary: StagingXcmVersionedMultiLocation,
        assets: StagingXcmVersionedMultiAssets,
        feeAssetItem: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'PolkadotXcm';
        palletCall: {
          name: 'ReserveTransferAssets';
          params: {
            dest: StagingXcmVersionedMultiLocation;
            beneficiary: StagingXcmVersionedMultiLocation;
            assets: StagingXcmVersionedMultiAssets;
            feeAssetItem: number;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::execute`].
     *
     * @param {StagingXcmVersionedXcm} message
     * @param {SpWeightsWeightV2Weight} maxWeight
     **/
    execute: GenericTxCall<
      (
        message: StagingXcmVersionedXcm,
        maxWeight: SpWeightsWeightV2Weight,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'PolkadotXcm';
        palletCall: {
          name: 'Execute';
          params: { message: StagingXcmVersionedXcm; maxWeight: SpWeightsWeightV2Weight };
        };
      }>
    >;

    /**
     * See [`Pallet::force_xcm_version`].
     *
     * @param {StagingXcmV3MultilocationMultiLocation} location
     * @param {number} version
     **/
    forceXcmVersion: GenericTxCall<
      (
        location: StagingXcmV3MultilocationMultiLocation,
        version: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'PolkadotXcm';
        palletCall: {
          name: 'ForceXcmVersion';
          params: { location: StagingXcmV3MultilocationMultiLocation; version: number };
        };
      }>
    >;

    /**
     * See [`Pallet::force_default_xcm_version`].
     *
     * @param {number | undefined} maybeXcmVersion
     **/
    forceDefaultXcmVersion: GenericTxCall<
      (maybeXcmVersion: number | undefined) => ChainSubmittableExtrinsic<{
        pallet: 'PolkadotXcm';
        palletCall: {
          name: 'ForceDefaultXcmVersion';
          params: { maybeXcmVersion: number | undefined };
        };
      }>
    >;

    /**
     * See [`Pallet::force_subscribe_version_notify`].
     *
     * @param {StagingXcmVersionedMultiLocation} location
     **/
    forceSubscribeVersionNotify: GenericTxCall<
      (location: StagingXcmVersionedMultiLocation) => ChainSubmittableExtrinsic<{
        pallet: 'PolkadotXcm';
        palletCall: {
          name: 'ForceSubscribeVersionNotify';
          params: { location: StagingXcmVersionedMultiLocation };
        };
      }>
    >;

    /**
     * See [`Pallet::force_unsubscribe_version_notify`].
     *
     * @param {StagingXcmVersionedMultiLocation} location
     **/
    forceUnsubscribeVersionNotify: GenericTxCall<
      (location: StagingXcmVersionedMultiLocation) => ChainSubmittableExtrinsic<{
        pallet: 'PolkadotXcm';
        palletCall: {
          name: 'ForceUnsubscribeVersionNotify';
          params: { location: StagingXcmVersionedMultiLocation };
        };
      }>
    >;

    /**
     * See [`Pallet::limited_reserve_transfer_assets`].
     *
     * @param {StagingXcmVersionedMultiLocation} dest
     * @param {StagingXcmVersionedMultiLocation} beneficiary
     * @param {StagingXcmVersionedMultiAssets} assets
     * @param {number} feeAssetItem
     * @param {StagingXcmV3WeightLimit} weightLimit
     **/
    limitedReserveTransferAssets: GenericTxCall<
      (
        dest: StagingXcmVersionedMultiLocation,
        beneficiary: StagingXcmVersionedMultiLocation,
        assets: StagingXcmVersionedMultiAssets,
        feeAssetItem: number,
        weightLimit: StagingXcmV3WeightLimit,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'PolkadotXcm';
        palletCall: {
          name: 'LimitedReserveTransferAssets';
          params: {
            dest: StagingXcmVersionedMultiLocation;
            beneficiary: StagingXcmVersionedMultiLocation;
            assets: StagingXcmVersionedMultiAssets;
            feeAssetItem: number;
            weightLimit: StagingXcmV3WeightLimit;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::limited_teleport_assets`].
     *
     * @param {StagingXcmVersionedMultiLocation} dest
     * @param {StagingXcmVersionedMultiLocation} beneficiary
     * @param {StagingXcmVersionedMultiAssets} assets
     * @param {number} feeAssetItem
     * @param {StagingXcmV3WeightLimit} weightLimit
     **/
    limitedTeleportAssets: GenericTxCall<
      (
        dest: StagingXcmVersionedMultiLocation,
        beneficiary: StagingXcmVersionedMultiLocation,
        assets: StagingXcmVersionedMultiAssets,
        feeAssetItem: number,
        weightLimit: StagingXcmV3WeightLimit,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'PolkadotXcm';
        palletCall: {
          name: 'LimitedTeleportAssets';
          params: {
            dest: StagingXcmVersionedMultiLocation;
            beneficiary: StagingXcmVersionedMultiLocation;
            assets: StagingXcmVersionedMultiAssets;
            feeAssetItem: number;
            weightLimit: StagingXcmV3WeightLimit;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::force_suspension`].
     *
     * @param {boolean} suspended
     **/
    forceSuspension: GenericTxCall<
      (suspended: boolean) => ChainSubmittableExtrinsic<{
        pallet: 'PolkadotXcm';
        palletCall: {
          name: 'ForceSuspension';
          params: { suspended: boolean };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<TxCall>;
  };
  /**
   * Pallet `CumulusXcm`'s transaction calls
   **/
  cumulusXcm: {
    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<TxCall>;
  };
  /**
   * Pallet `DmpQueue`'s transaction calls
   **/
  dmpQueue: {
    /**
     * See [`Pallet::service_overweight`].
     *
     * @param {bigint} index
     * @param {SpWeightsWeightV2Weight} weightLimit
     **/
    serviceOverweight: GenericTxCall<
      (
        index: bigint,
        weightLimit: SpWeightsWeightV2Weight,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'DmpQueue';
        palletCall: {
          name: 'ServiceOverweight';
          params: { index: bigint; weightLimit: SpWeightsWeightV2Weight };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<TxCall>;
  };
  /**
   * Pallet `XcAssetConfig`'s transaction calls
   **/
  xcAssetConfig: {
    /**
     * See [`Pallet::register_asset_location`].
     *
     * @param {StagingXcmVersionedMultiLocation} assetLocation
     * @param {bigint} assetId
     **/
    registerAssetLocation: GenericTxCall<
      (
        assetLocation: StagingXcmVersionedMultiLocation,
        assetId: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'XcAssetConfig';
        palletCall: {
          name: 'RegisterAssetLocation';
          params: { assetLocation: StagingXcmVersionedMultiLocation; assetId: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::set_asset_units_per_second`].
     *
     * @param {StagingXcmVersionedMultiLocation} assetLocation
     * @param {bigint} unitsPerSecond
     **/
    setAssetUnitsPerSecond: GenericTxCall<
      (
        assetLocation: StagingXcmVersionedMultiLocation,
        unitsPerSecond: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'XcAssetConfig';
        palletCall: {
          name: 'SetAssetUnitsPerSecond';
          params: { assetLocation: StagingXcmVersionedMultiLocation; unitsPerSecond: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::change_existing_asset_location`].
     *
     * @param {StagingXcmVersionedMultiLocation} newAssetLocation
     * @param {bigint} assetId
     **/
    changeExistingAssetLocation: GenericTxCall<
      (
        newAssetLocation: StagingXcmVersionedMultiLocation,
        assetId: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'XcAssetConfig';
        palletCall: {
          name: 'ChangeExistingAssetLocation';
          params: { newAssetLocation: StagingXcmVersionedMultiLocation; assetId: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::remove_payment_asset`].
     *
     * @param {StagingXcmVersionedMultiLocation} assetLocation
     **/
    removePaymentAsset: GenericTxCall<
      (assetLocation: StagingXcmVersionedMultiLocation) => ChainSubmittableExtrinsic<{
        pallet: 'XcAssetConfig';
        palletCall: {
          name: 'RemovePaymentAsset';
          params: { assetLocation: StagingXcmVersionedMultiLocation };
        };
      }>
    >;

    /**
     * See [`Pallet::remove_asset`].
     *
     * @param {bigint} assetId
     **/
    removeAsset: GenericTxCall<
      (assetId: bigint) => ChainSubmittableExtrinsic<{
        pallet: 'XcAssetConfig';
        palletCall: {
          name: 'RemoveAsset';
          params: { assetId: bigint };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<TxCall>;
  };
  /**
   * Pallet `XTokens`'s transaction calls
   **/
  xTokens: {
    /**
     * See [`Pallet::transfer`].
     *
     * @param {bigint} currencyId
     * @param {bigint} amount
     * @param {StagingXcmVersionedMultiLocation} dest
     * @param {StagingXcmV3WeightLimit} destWeightLimit
     **/
    transfer: GenericTxCall<
      (
        currencyId: bigint,
        amount: bigint,
        dest: StagingXcmVersionedMultiLocation,
        destWeightLimit: StagingXcmV3WeightLimit,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'XTokens';
        palletCall: {
          name: 'Transfer';
          params: {
            currencyId: bigint;
            amount: bigint;
            dest: StagingXcmVersionedMultiLocation;
            destWeightLimit: StagingXcmV3WeightLimit;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::transfer_multiasset`].
     *
     * @param {StagingXcmVersionedMultiAsset} asset
     * @param {StagingXcmVersionedMultiLocation} dest
     * @param {StagingXcmV3WeightLimit} destWeightLimit
     **/
    transferMultiasset: GenericTxCall<
      (
        asset: StagingXcmVersionedMultiAsset,
        dest: StagingXcmVersionedMultiLocation,
        destWeightLimit: StagingXcmV3WeightLimit,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'XTokens';
        palletCall: {
          name: 'TransferMultiasset';
          params: {
            asset: StagingXcmVersionedMultiAsset;
            dest: StagingXcmVersionedMultiLocation;
            destWeightLimit: StagingXcmV3WeightLimit;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::transfer_with_fee`].
     *
     * @param {bigint} currencyId
     * @param {bigint} amount
     * @param {bigint} fee
     * @param {StagingXcmVersionedMultiLocation} dest
     * @param {StagingXcmV3WeightLimit} destWeightLimit
     **/
    transferWithFee: GenericTxCall<
      (
        currencyId: bigint,
        amount: bigint,
        fee: bigint,
        dest: StagingXcmVersionedMultiLocation,
        destWeightLimit: StagingXcmV3WeightLimit,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'XTokens';
        palletCall: {
          name: 'TransferWithFee';
          params: {
            currencyId: bigint;
            amount: bigint;
            fee: bigint;
            dest: StagingXcmVersionedMultiLocation;
            destWeightLimit: StagingXcmV3WeightLimit;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::transfer_multiasset_with_fee`].
     *
     * @param {StagingXcmVersionedMultiAsset} asset
     * @param {StagingXcmVersionedMultiAsset} fee
     * @param {StagingXcmVersionedMultiLocation} dest
     * @param {StagingXcmV3WeightLimit} destWeightLimit
     **/
    transferMultiassetWithFee: GenericTxCall<
      (
        asset: StagingXcmVersionedMultiAsset,
        fee: StagingXcmVersionedMultiAsset,
        dest: StagingXcmVersionedMultiLocation,
        destWeightLimit: StagingXcmV3WeightLimit,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'XTokens';
        palletCall: {
          name: 'TransferMultiassetWithFee';
          params: {
            asset: StagingXcmVersionedMultiAsset;
            fee: StagingXcmVersionedMultiAsset;
            dest: StagingXcmVersionedMultiLocation;
            destWeightLimit: StagingXcmV3WeightLimit;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::transfer_multicurrencies`].
     *
     * @param {Array<[bigint, bigint]>} currencies
     * @param {number} feeItem
     * @param {StagingXcmVersionedMultiLocation} dest
     * @param {StagingXcmV3WeightLimit} destWeightLimit
     **/
    transferMulticurrencies: GenericTxCall<
      (
        currencies: Array<[bigint, bigint]>,
        feeItem: number,
        dest: StagingXcmVersionedMultiLocation,
        destWeightLimit: StagingXcmV3WeightLimit,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'XTokens';
        palletCall: {
          name: 'TransferMulticurrencies';
          params: {
            currencies: Array<[bigint, bigint]>;
            feeItem: number;
            dest: StagingXcmVersionedMultiLocation;
            destWeightLimit: StagingXcmV3WeightLimit;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::transfer_multiassets`].
     *
     * @param {StagingXcmVersionedMultiAssets} assets
     * @param {number} feeItem
     * @param {StagingXcmVersionedMultiLocation} dest
     * @param {StagingXcmV3WeightLimit} destWeightLimit
     **/
    transferMultiassets: GenericTxCall<
      (
        assets: StagingXcmVersionedMultiAssets,
        feeItem: number,
        dest: StagingXcmVersionedMultiLocation,
        destWeightLimit: StagingXcmV3WeightLimit,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'XTokens';
        palletCall: {
          name: 'TransferMultiassets';
          params: {
            assets: StagingXcmVersionedMultiAssets;
            feeItem: number;
            dest: StagingXcmVersionedMultiLocation;
            destWeightLimit: StagingXcmV3WeightLimit;
          };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<TxCall>;
  };
  /**
   * Pallet `EVM`'s transaction calls
   **/
  evm: {
    /**
     * See [`Pallet::withdraw`].
     *
     * @param {H160} address
     * @param {bigint} value
     **/
    withdraw: GenericTxCall<
      (
        address: H160,
        value: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Evm';
        palletCall: {
          name: 'Withdraw';
          params: { address: H160; value: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::call`].
     *
     * @param {H160} source
     * @param {H160} target
     * @param {BytesLike} input
     * @param {U256} value
     * @param {bigint} gasLimit
     * @param {U256} maxFeePerGas
     * @param {U256 | undefined} maxPriorityFeePerGas
     * @param {U256 | undefined} nonce
     * @param {Array<[H160, Array<H256>]>} accessList
     **/
    call: GenericTxCall<
      (
        source: H160,
        target: H160,
        input: BytesLike,
        value: U256,
        gasLimit: bigint,
        maxFeePerGas: U256,
        maxPriorityFeePerGas: U256 | undefined,
        nonce: U256 | undefined,
        accessList: Array<[H160, Array<H256>]>,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Evm';
        palletCall: {
          name: 'Call';
          params: {
            source: H160;
            target: H160;
            input: BytesLike;
            value: U256;
            gasLimit: bigint;
            maxFeePerGas: U256;
            maxPriorityFeePerGas: U256 | undefined;
            nonce: U256 | undefined;
            accessList: Array<[H160, Array<H256>]>;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::create`].
     *
     * @param {H160} source
     * @param {BytesLike} init
     * @param {U256} value
     * @param {bigint} gasLimit
     * @param {U256} maxFeePerGas
     * @param {U256 | undefined} maxPriorityFeePerGas
     * @param {U256 | undefined} nonce
     * @param {Array<[H160, Array<H256>]>} accessList
     **/
    create: GenericTxCall<
      (
        source: H160,
        init: BytesLike,
        value: U256,
        gasLimit: bigint,
        maxFeePerGas: U256,
        maxPriorityFeePerGas: U256 | undefined,
        nonce: U256 | undefined,
        accessList: Array<[H160, Array<H256>]>,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Evm';
        palletCall: {
          name: 'Create';
          params: {
            source: H160;
            init: BytesLike;
            value: U256;
            gasLimit: bigint;
            maxFeePerGas: U256;
            maxPriorityFeePerGas: U256 | undefined;
            nonce: U256 | undefined;
            accessList: Array<[H160, Array<H256>]>;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::create2`].
     *
     * @param {H160} source
     * @param {BytesLike} init
     * @param {H256} salt
     * @param {U256} value
     * @param {bigint} gasLimit
     * @param {U256} maxFeePerGas
     * @param {U256 | undefined} maxPriorityFeePerGas
     * @param {U256 | undefined} nonce
     * @param {Array<[H160, Array<H256>]>} accessList
     **/
    create2: GenericTxCall<
      (
        source: H160,
        init: BytesLike,
        salt: H256,
        value: U256,
        gasLimit: bigint,
        maxFeePerGas: U256,
        maxPriorityFeePerGas: U256 | undefined,
        nonce: U256 | undefined,
        accessList: Array<[H160, Array<H256>]>,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Evm';
        palletCall: {
          name: 'Create2';
          params: {
            source: H160;
            init: BytesLike;
            salt: H256;
            value: U256;
            gasLimit: bigint;
            maxFeePerGas: U256;
            maxPriorityFeePerGas: U256 | undefined;
            nonce: U256 | undefined;
            accessList: Array<[H160, Array<H256>]>;
          };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<TxCall>;
  };
  /**
   * Pallet `Ethereum`'s transaction calls
   **/
  ethereum: {
    /**
     * See [`Pallet::transact`].
     *
     * @param {EthereumTransactionTransactionV2} transaction
     **/
    transact: GenericTxCall<
      (transaction: EthereumTransactionTransactionV2) => ChainSubmittableExtrinsic<{
        pallet: 'Ethereum';
        palletCall: {
          name: 'Transact';
          params: { transaction: EthereumTransactionTransactionV2 };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<TxCall>;
  };
  /**
   * Pallet `DynamicEvmBaseFee`'s transaction calls
   **/
  dynamicEvmBaseFee: {
    /**
     * See [`Pallet::set_base_fee_per_gas`].
     *
     * @param {U256} fee
     **/
    setBaseFeePerGas: GenericTxCall<
      (fee: U256) => ChainSubmittableExtrinsic<{
        pallet: 'DynamicEvmBaseFee';
        palletCall: {
          name: 'SetBaseFeePerGas';
          params: { fee: U256 };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<TxCall>;
  };
  /**
   * Pallet `Contracts`'s transaction calls
   **/
  contracts: {
    /**
     * See [`Pallet::call_old_weight`].
     *
     * @param {MultiAddressLike} dest
     * @param {bigint} value
     * @param {bigint} gasLimit
     * @param {bigint | undefined} storageDepositLimit
     * @param {BytesLike} data
     **/
    callOldWeight: GenericTxCall<
      (
        dest: MultiAddressLike,
        value: bigint,
        gasLimit: bigint,
        storageDepositLimit: bigint | undefined,
        data: BytesLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Contracts';
        palletCall: {
          name: 'CallOldWeight';
          params: {
            dest: MultiAddressLike;
            value: bigint;
            gasLimit: bigint;
            storageDepositLimit: bigint | undefined;
            data: BytesLike;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::instantiate_with_code_old_weight`].
     *
     * @param {bigint} value
     * @param {bigint} gasLimit
     * @param {bigint | undefined} storageDepositLimit
     * @param {BytesLike} code
     * @param {BytesLike} data
     * @param {BytesLike} salt
     **/
    instantiateWithCodeOldWeight: GenericTxCall<
      (
        value: bigint,
        gasLimit: bigint,
        storageDepositLimit: bigint | undefined,
        code: BytesLike,
        data: BytesLike,
        salt: BytesLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Contracts';
        palletCall: {
          name: 'InstantiateWithCodeOldWeight';
          params: {
            value: bigint;
            gasLimit: bigint;
            storageDepositLimit: bigint | undefined;
            code: BytesLike;
            data: BytesLike;
            salt: BytesLike;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::instantiate_old_weight`].
     *
     * @param {bigint} value
     * @param {bigint} gasLimit
     * @param {bigint | undefined} storageDepositLimit
     * @param {H256} codeHash
     * @param {BytesLike} data
     * @param {BytesLike} salt
     **/
    instantiateOldWeight: GenericTxCall<
      (
        value: bigint,
        gasLimit: bigint,
        storageDepositLimit: bigint | undefined,
        codeHash: H256,
        data: BytesLike,
        salt: BytesLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Contracts';
        palletCall: {
          name: 'InstantiateOldWeight';
          params: {
            value: bigint;
            gasLimit: bigint;
            storageDepositLimit: bigint | undefined;
            codeHash: H256;
            data: BytesLike;
            salt: BytesLike;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::upload_code`].
     *
     * @param {BytesLike} code
     * @param {bigint | undefined} storageDepositLimit
     * @param {PalletContractsWasmDeterminism} determinism
     **/
    uploadCode: GenericTxCall<
      (
        code: BytesLike,
        storageDepositLimit: bigint | undefined,
        determinism: PalletContractsWasmDeterminism,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Contracts';
        palletCall: {
          name: 'UploadCode';
          params: {
            code: BytesLike;
            storageDepositLimit: bigint | undefined;
            determinism: PalletContractsWasmDeterminism;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::remove_code`].
     *
     * @param {H256} codeHash
     **/
    removeCode: GenericTxCall<
      (codeHash: H256) => ChainSubmittableExtrinsic<{
        pallet: 'Contracts';
        palletCall: {
          name: 'RemoveCode';
          params: { codeHash: H256 };
        };
      }>
    >;

    /**
     * See [`Pallet::set_code`].
     *
     * @param {MultiAddressLike} dest
     * @param {H256} codeHash
     **/
    setCode: GenericTxCall<
      (
        dest: MultiAddressLike,
        codeHash: H256,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Contracts';
        palletCall: {
          name: 'SetCode';
          params: { dest: MultiAddressLike; codeHash: H256 };
        };
      }>
    >;

    /**
     * See [`Pallet::call`].
     *
     * @param {MultiAddressLike} dest
     * @param {bigint} value
     * @param {SpWeightsWeightV2Weight} gasLimit
     * @param {bigint | undefined} storageDepositLimit
     * @param {BytesLike} data
     **/
    call: GenericTxCall<
      (
        dest: MultiAddressLike,
        value: bigint,
        gasLimit: SpWeightsWeightV2Weight,
        storageDepositLimit: bigint | undefined,
        data: BytesLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Contracts';
        palletCall: {
          name: 'Call';
          params: {
            dest: MultiAddressLike;
            value: bigint;
            gasLimit: SpWeightsWeightV2Weight;
            storageDepositLimit: bigint | undefined;
            data: BytesLike;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::instantiate_with_code`].
     *
     * @param {bigint} value
     * @param {SpWeightsWeightV2Weight} gasLimit
     * @param {bigint | undefined} storageDepositLimit
     * @param {BytesLike} code
     * @param {BytesLike} data
     * @param {BytesLike} salt
     **/
    instantiateWithCode: GenericTxCall<
      (
        value: bigint,
        gasLimit: SpWeightsWeightV2Weight,
        storageDepositLimit: bigint | undefined,
        code: BytesLike,
        data: BytesLike,
        salt: BytesLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Contracts';
        palletCall: {
          name: 'InstantiateWithCode';
          params: {
            value: bigint;
            gasLimit: SpWeightsWeightV2Weight;
            storageDepositLimit: bigint | undefined;
            code: BytesLike;
            data: BytesLike;
            salt: BytesLike;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::instantiate`].
     *
     * @param {bigint} value
     * @param {SpWeightsWeightV2Weight} gasLimit
     * @param {bigint | undefined} storageDepositLimit
     * @param {H256} codeHash
     * @param {BytesLike} data
     * @param {BytesLike} salt
     **/
    instantiate: GenericTxCall<
      (
        value: bigint,
        gasLimit: SpWeightsWeightV2Weight,
        storageDepositLimit: bigint | undefined,
        codeHash: H256,
        data: BytesLike,
        salt: BytesLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Contracts';
        palletCall: {
          name: 'Instantiate';
          params: {
            value: bigint;
            gasLimit: SpWeightsWeightV2Weight;
            storageDepositLimit: bigint | undefined;
            codeHash: H256;
            data: BytesLike;
            salt: BytesLike;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::migrate`].
     *
     * @param {SpWeightsWeightV2Weight} weightLimit
     **/
    migrate: GenericTxCall<
      (weightLimit: SpWeightsWeightV2Weight) => ChainSubmittableExtrinsic<{
        pallet: 'Contracts';
        palletCall: {
          name: 'Migrate';
          params: { weightLimit: SpWeightsWeightV2Weight };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<TxCall>;
  };
  /**
   * Pallet `Sudo`'s transaction calls
   **/
  sudo: {
    /**
     * See [`Pallet::sudo`].
     *
     * @param {AstarRuntimeRuntimeCallLike} call
     **/
    sudo: GenericTxCall<
      (call: AstarRuntimeRuntimeCallLike) => ChainSubmittableExtrinsic<{
        pallet: 'Sudo';
        palletCall: {
          name: 'Sudo';
          params: { call: AstarRuntimeRuntimeCallLike };
        };
      }>
    >;

    /**
     * See [`Pallet::sudo_unchecked_weight`].
     *
     * @param {AstarRuntimeRuntimeCallLike} call
     * @param {SpWeightsWeightV2Weight} weight
     **/
    sudoUncheckedWeight: GenericTxCall<
      (
        call: AstarRuntimeRuntimeCallLike,
        weight: SpWeightsWeightV2Weight,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Sudo';
        palletCall: {
          name: 'SudoUncheckedWeight';
          params: { call: AstarRuntimeRuntimeCallLike; weight: SpWeightsWeightV2Weight };
        };
      }>
    >;

    /**
     * See [`Pallet::set_key`].
     *
     * @param {MultiAddressLike} new_
     **/
    setKey: GenericTxCall<
      (new_: MultiAddressLike) => ChainSubmittableExtrinsic<{
        pallet: 'Sudo';
        palletCall: {
          name: 'SetKey';
          params: { new: MultiAddressLike };
        };
      }>
    >;

    /**
     * See [`Pallet::sudo_as`].
     *
     * @param {MultiAddressLike} who
     * @param {AstarRuntimeRuntimeCallLike} call
     **/
    sudoAs: GenericTxCall<
      (
        who: MultiAddressLike,
        call: AstarRuntimeRuntimeCallLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Sudo';
        palletCall: {
          name: 'SudoAs';
          params: { who: MultiAddressLike; call: AstarRuntimeRuntimeCallLike };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<TxCall>;
  };
  /**
   * Pallet `StaticPriceProvider`'s transaction calls
   **/
  staticPriceProvider: {
    /**
     * See [`Pallet::force_set_price`].
     *
     * @param {FixedU64} price
     **/
    forceSetPrice: GenericTxCall<
      (price: FixedU64) => ChainSubmittableExtrinsic<{
        pallet: 'StaticPriceProvider';
        palletCall: {
          name: 'ForceSetPrice';
          params: { price: FixedU64 };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<TxCall>;
  };
  /**
   * Pallet `DappStakingMigration`'s transaction calls
   **/
  dappStakingMigration: {
    /**
     * See [`Pallet::migrate`].
     *
     * @param {SpWeightsWeightV2Weight | undefined} weightLimit
     **/
    migrate: GenericTxCall<
      (weightLimit: SpWeightsWeightV2Weight | undefined) => ChainSubmittableExtrinsic<{
        pallet: 'DappStakingMigration';
        palletCall: {
          name: 'Migrate';
          params: { weightLimit: SpWeightsWeightV2Weight | undefined };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<TxCall>;
  };
  /**
   * Pallet `DappsStaking`'s transaction calls
   **/
  dappsStaking: {
    /**
     * See [`Pallet::register`].
     *
     * @param {AccountId32Like} developer
     * @param {AstarPrimitivesDappStakingSmartContract} contractId
     **/
    register: GenericTxCall<
      (
        developer: AccountId32Like,
        contractId: AstarPrimitivesDappStakingSmartContract,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'DappsStaking';
        palletCall: {
          name: 'Register';
          params: { developer: AccountId32Like; contractId: AstarPrimitivesDappStakingSmartContract };
        };
      }>
    >;

    /**
     * See [`Pallet::unregister`].
     *
     * @param {AstarPrimitivesDappStakingSmartContract} contractId
     **/
    unregister: GenericTxCall<
      (contractId: AstarPrimitivesDappStakingSmartContract) => ChainSubmittableExtrinsic<{
        pallet: 'DappsStaking';
        palletCall: {
          name: 'Unregister';
          params: { contractId: AstarPrimitivesDappStakingSmartContract };
        };
      }>
    >;

    /**
     * See [`Pallet::withdraw_from_unregistered`].
     *
     * @param {AstarPrimitivesDappStakingSmartContract} contractId
     **/
    withdrawFromUnregistered: GenericTxCall<
      (contractId: AstarPrimitivesDappStakingSmartContract) => ChainSubmittableExtrinsic<{
        pallet: 'DappsStaking';
        palletCall: {
          name: 'WithdrawFromUnregistered';
          params: { contractId: AstarPrimitivesDappStakingSmartContract };
        };
      }>
    >;

    /**
     * See [`Pallet::bond_and_stake`].
     *
     * @param {AstarPrimitivesDappStakingSmartContract} contractId
     * @param {bigint} value
     **/
    bondAndStake: GenericTxCall<
      (
        contractId: AstarPrimitivesDappStakingSmartContract,
        value: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'DappsStaking';
        palletCall: {
          name: 'BondAndStake';
          params: { contractId: AstarPrimitivesDappStakingSmartContract; value: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::unbond_and_unstake`].
     *
     * @param {AstarPrimitivesDappStakingSmartContract} contractId
     * @param {bigint} value
     **/
    unbondAndUnstake: GenericTxCall<
      (
        contractId: AstarPrimitivesDappStakingSmartContract,
        value: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'DappsStaking';
        palletCall: {
          name: 'UnbondAndUnstake';
          params: { contractId: AstarPrimitivesDappStakingSmartContract; value: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::withdraw_unbonded`].
     *
     **/
    withdrawUnbonded: GenericTxCall<
      () => ChainSubmittableExtrinsic<{
        pallet: 'DappsStaking';
        palletCall: {
          name: 'WithdrawUnbonded';
        };
      }>
    >;

    /**
     * See [`Pallet::nomination_transfer`].
     *
     * @param {AstarPrimitivesDappStakingSmartContract} originContractId
     * @param {bigint} value
     * @param {AstarPrimitivesDappStakingSmartContract} targetContractId
     **/
    nominationTransfer: GenericTxCall<
      (
        originContractId: AstarPrimitivesDappStakingSmartContract,
        value: bigint,
        targetContractId: AstarPrimitivesDappStakingSmartContract,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'DappsStaking';
        palletCall: {
          name: 'NominationTransfer';
          params: {
            originContractId: AstarPrimitivesDappStakingSmartContract;
            value: bigint;
            targetContractId: AstarPrimitivesDappStakingSmartContract;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::claim_staker`].
     *
     * @param {AstarPrimitivesDappStakingSmartContract} contractId
     **/
    claimStaker: GenericTxCall<
      (contractId: AstarPrimitivesDappStakingSmartContract) => ChainSubmittableExtrinsic<{
        pallet: 'DappsStaking';
        palletCall: {
          name: 'ClaimStaker';
          params: { contractId: AstarPrimitivesDappStakingSmartContract };
        };
      }>
    >;

    /**
     * See [`Pallet::claim_dapp`].
     *
     * @param {AstarPrimitivesDappStakingSmartContract} contractId
     * @param {number} era
     **/
    claimDapp: GenericTxCall<
      (
        contractId: AstarPrimitivesDappStakingSmartContract,
        era: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'DappsStaking';
        palletCall: {
          name: 'ClaimDapp';
          params: { contractId: AstarPrimitivesDappStakingSmartContract; era: number };
        };
      }>
    >;

    /**
     * See [`Pallet::force_new_era`].
     *
     **/
    forceNewEra: GenericTxCall<
      () => ChainSubmittableExtrinsic<{
        pallet: 'DappsStaking';
        palletCall: {
          name: 'ForceNewEra';
        };
      }>
    >;

    /**
     * See [`Pallet::maintenance_mode`].
     *
     * @param {boolean} enableMaintenance
     **/
    maintenanceMode: GenericTxCall<
      (enableMaintenance: boolean) => ChainSubmittableExtrinsic<{
        pallet: 'DappsStaking';
        palletCall: {
          name: 'MaintenanceMode';
          params: { enableMaintenance: boolean };
        };
      }>
    >;

    /**
     * See [`Pallet::set_reward_destination`].
     *
     * @param {PalletDappsStakingRewardDestination} rewardDestination
     **/
    setRewardDestination: GenericTxCall<
      (rewardDestination: PalletDappsStakingRewardDestination) => ChainSubmittableExtrinsic<{
        pallet: 'DappsStaking';
        palletCall: {
          name: 'SetRewardDestination';
          params: { rewardDestination: PalletDappsStakingRewardDestination };
        };
      }>
    >;

    /**
     * See [`Pallet::set_contract_stake_info`].
     *
     * @param {AstarPrimitivesDappStakingSmartContract} contract
     * @param {number} era
     * @param {PalletDappsStakingContractStakeInfo} contractStakeInfo
     **/
    setContractStakeInfo: GenericTxCall<
      (
        contract: AstarPrimitivesDappStakingSmartContract,
        era: number,
        contractStakeInfo: PalletDappsStakingContractStakeInfo,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'DappsStaking';
        palletCall: {
          name: 'SetContractStakeInfo';
          params: {
            contract: AstarPrimitivesDappStakingSmartContract;
            era: number;
            contractStakeInfo: PalletDappsStakingContractStakeInfo;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::burn_stale_reward`].
     *
     * @param {AstarPrimitivesDappStakingSmartContract} contractId
     * @param {number} era
     **/
    burnStaleReward: GenericTxCall<
      (
        contractId: AstarPrimitivesDappStakingSmartContract,
        era: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'DappsStaking';
        palletCall: {
          name: 'BurnStaleReward';
          params: { contractId: AstarPrimitivesDappStakingSmartContract; era: number };
        };
      }>
    >;

    /**
     * See [`Pallet::claim_staker_for`].
     *
     * @param {AccountId32Like} staker
     * @param {AstarPrimitivesDappStakingSmartContract} contractId
     **/
    claimStakerFor: GenericTxCall<
      (
        staker: AccountId32Like,
        contractId: AstarPrimitivesDappStakingSmartContract,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'DappsStaking';
        palletCall: {
          name: 'ClaimStakerFor';
          params: { staker: AccountId32Like; contractId: AstarPrimitivesDappStakingSmartContract };
        };
      }>
    >;

    /**
     * See [`Pallet::set_reward_destination_for`].
     *
     * @param {AccountId32Like} staker
     * @param {PalletDappsStakingRewardDestination} rewardDestination
     **/
    setRewardDestinationFor: GenericTxCall<
      (
        staker: AccountId32Like,
        rewardDestination: PalletDappsStakingRewardDestination,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'DappsStaking';
        palletCall: {
          name: 'SetRewardDestinationFor';
          params: { staker: AccountId32Like; rewardDestination: PalletDappsStakingRewardDestination };
        };
      }>
    >;

    /**
     * See [`Pallet::decommission`].
     *
     **/
    decommission: GenericTxCall<
      () => ChainSubmittableExtrinsic<{
        pallet: 'DappsStaking';
        palletCall: {
          name: 'Decommission';
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<TxCall>;
  };
}
