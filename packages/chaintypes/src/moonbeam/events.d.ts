// Generated by dedot cli

import type { GenericChainEvents, GenericPalletEvent, RpcVersion } from 'dedot/types';
import type {
  DispatchInfo,
  DispatchError,
  AccountId20,
  H256,
  FixedBytes,
  Percent,
  Perbill,
  Result,
  Bytes,
  H160,
} from 'dedot/codecs';
import type {
  SpWeightsWeightV2Weight,
  FrameSupportTokensMiscBalanceStatus,
  PalletParachainStakingDelegationRequestsCancelledScheduledRequest,
  PalletParachainStakingDelegatorAdded,
  PalletParachainStakingInflationDistributionConfig,
  PalletAuthorSlotFilterNumNonZeroU32,
  NimbusPrimitivesNimbusCryptoPublic,
  SessionKeysPrimitivesVrfVrfCryptoPublic,
  MoonbeamRuntimeProxyType,
  PalletMultisigTimepoint,
  MoonbeamRuntimeRuntimeParamsRuntimeParametersKey,
  MoonbeamRuntimeRuntimeParamsRuntimeParametersValue,
  EthereumLog,
  EvmCoreErrorExitReason,
  FrameSupportPreimagesBounded,
  PalletConvictionVotingTally,
  FrameSupportDispatchPostDispatchInfo,
  SpRuntimeDispatchErrorWithPostInfo,
  StagingXcmV4TraitsOutcome,
  StagingXcmV4Location,
  StagingXcmV4Xcm,
  StagingXcmV4Response,
  XcmVersionedAssets,
  StagingXcmV4AssetAssets,
  XcmV3TraitsError,
  XcmVersionedLocation,
  MoonbeamRuntimeXcmConfigAssetType,
  MoonbeamRuntimeAssetConfigAssetRegistrarMetadata,
  PalletXcmTransactorRemoteTransactInfoWithMaxWeight,
  PalletXcmTransactorHrmpOperation,
  CumulusPrimitivesCoreAggregateMessageOrigin,
  FrameSupportMessagesProcessMessageError,
} from './types';

export interface ChainEvents<Rv extends RpcVersion> extends GenericChainEvents<Rv> {
  /**
   * Pallet `System`'s events
   **/
  system: {
    /**
     * An extrinsic completed successfully.
     **/
    ExtrinsicSuccess: GenericPalletEvent<Rv, 'System', 'ExtrinsicSuccess', { dispatchInfo: DispatchInfo }>;

    /**
     * An extrinsic failed.
     **/
    ExtrinsicFailed: GenericPalletEvent<
      Rv,
      'System',
      'ExtrinsicFailed',
      { dispatchError: DispatchError; dispatchInfo: DispatchInfo }
    >;

    /**
     * `:code` was updated.
     **/
    CodeUpdated: GenericPalletEvent<Rv, 'System', 'CodeUpdated', null>;

    /**
     * A new account was created.
     **/
    NewAccount: GenericPalletEvent<Rv, 'System', 'NewAccount', { account: AccountId20 }>;

    /**
     * An account was reaped.
     **/
    KilledAccount: GenericPalletEvent<Rv, 'System', 'KilledAccount', { account: AccountId20 }>;

    /**
     * On on-chain remark happened.
     **/
    Remarked: GenericPalletEvent<Rv, 'System', 'Remarked', { sender: AccountId20; hash: H256 }>;

    /**
     * An upgrade was authorized.
     **/
    UpgradeAuthorized: GenericPalletEvent<Rv, 'System', 'UpgradeAuthorized', { codeHash: H256; checkVersion: boolean }>;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `ParachainSystem`'s events
   **/
  parachainSystem: {
    /**
     * The validation function has been scheduled to apply.
     **/
    ValidationFunctionStored: GenericPalletEvent<Rv, 'ParachainSystem', 'ValidationFunctionStored', null>;

    /**
     * The validation function was applied as of the contained relay chain block number.
     **/
    ValidationFunctionApplied: GenericPalletEvent<
      Rv,
      'ParachainSystem',
      'ValidationFunctionApplied',
      { relayChainBlockNum: number }
    >;

    /**
     * The relay-chain aborted the upgrade process.
     **/
    ValidationFunctionDiscarded: GenericPalletEvent<Rv, 'ParachainSystem', 'ValidationFunctionDiscarded', null>;

    /**
     * Some downward messages have been received and will be processed.
     **/
    DownwardMessagesReceived: GenericPalletEvent<Rv, 'ParachainSystem', 'DownwardMessagesReceived', { count: number }>;

    /**
     * Downward messages were processed using the given weight.
     **/
    DownwardMessagesProcessed: GenericPalletEvent<
      Rv,
      'ParachainSystem',
      'DownwardMessagesProcessed',
      { weightUsed: SpWeightsWeightV2Weight; dmqHead: H256 }
    >;

    /**
     * An upward message was sent to the relay chain.
     **/
    UpwardMessageSent: GenericPalletEvent<
      Rv,
      'ParachainSystem',
      'UpwardMessageSent',
      { messageHash?: FixedBytes<32> | undefined }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `RootTesting`'s events
   **/
  rootTesting: {
    /**
     * Event dispatched when the trigger_defensive extrinsic is called.
     **/
    DefensiveTestCall: GenericPalletEvent<Rv, 'RootTesting', 'DefensiveTestCall', undefined>;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Balances`'s events
   **/
  balances: {
    /**
     * An account was created with some free balance.
     **/
    Endowed: GenericPalletEvent<Rv, 'Balances', 'Endowed', { account: AccountId20; freeBalance: bigint }>;

    /**
     * An account was removed whose balance was non-zero but below ExistentialDeposit,
     * resulting in an outright loss.
     **/
    DustLost: GenericPalletEvent<Rv, 'Balances', 'DustLost', { account: AccountId20; amount: bigint }>;

    /**
     * Transfer succeeded.
     **/
    Transfer: GenericPalletEvent<Rv, 'Balances', 'Transfer', { from: AccountId20; to: AccountId20; amount: bigint }>;

    /**
     * A balance was set by root.
     **/
    BalanceSet: GenericPalletEvent<Rv, 'Balances', 'BalanceSet', { who: AccountId20; free: bigint }>;

    /**
     * Some balance was reserved (moved from free to reserved).
     **/
    Reserved: GenericPalletEvent<Rv, 'Balances', 'Reserved', { who: AccountId20; amount: bigint }>;

    /**
     * Some balance was unreserved (moved from reserved to free).
     **/
    Unreserved: GenericPalletEvent<Rv, 'Balances', 'Unreserved', { who: AccountId20; amount: bigint }>;

    /**
     * Some balance was moved from the reserve of the first account to the second account.
     * Final argument indicates the destination balance type.
     **/
    ReserveRepatriated: GenericPalletEvent<
      Rv,
      'Balances',
      'ReserveRepatriated',
      { from: AccountId20; to: AccountId20; amount: bigint; destinationStatus: FrameSupportTokensMiscBalanceStatus }
    >;

    /**
     * Some amount was deposited (e.g. for transaction fees).
     **/
    Deposit: GenericPalletEvent<Rv, 'Balances', 'Deposit', { who: AccountId20; amount: bigint }>;

    /**
     * Some amount was withdrawn from the account (e.g. for transaction fees).
     **/
    Withdraw: GenericPalletEvent<Rv, 'Balances', 'Withdraw', { who: AccountId20; amount: bigint }>;

    /**
     * Some amount was removed from the account (e.g. for misbehavior).
     **/
    Slashed: GenericPalletEvent<Rv, 'Balances', 'Slashed', { who: AccountId20; amount: bigint }>;

    /**
     * Some amount was minted into an account.
     **/
    Minted: GenericPalletEvent<Rv, 'Balances', 'Minted', { who: AccountId20; amount: bigint }>;

    /**
     * Some amount was burned from an account.
     **/
    Burned: GenericPalletEvent<Rv, 'Balances', 'Burned', { who: AccountId20; amount: bigint }>;

    /**
     * Some amount was suspended from an account (it can be restored later).
     **/
    Suspended: GenericPalletEvent<Rv, 'Balances', 'Suspended', { who: AccountId20; amount: bigint }>;

    /**
     * Some amount was restored into an account.
     **/
    Restored: GenericPalletEvent<Rv, 'Balances', 'Restored', { who: AccountId20; amount: bigint }>;

    /**
     * An account was upgraded.
     **/
    Upgraded: GenericPalletEvent<Rv, 'Balances', 'Upgraded', { who: AccountId20 }>;

    /**
     * Total issuance was increased by `amount`, creating a credit to be balanced.
     **/
    Issued: GenericPalletEvent<Rv, 'Balances', 'Issued', { amount: bigint }>;

    /**
     * Total issuance was decreased by `amount`, creating a debt to be balanced.
     **/
    Rescinded: GenericPalletEvent<Rv, 'Balances', 'Rescinded', { amount: bigint }>;

    /**
     * Some balance was locked.
     **/
    Locked: GenericPalletEvent<Rv, 'Balances', 'Locked', { who: AccountId20; amount: bigint }>;

    /**
     * Some balance was unlocked.
     **/
    Unlocked: GenericPalletEvent<Rv, 'Balances', 'Unlocked', { who: AccountId20; amount: bigint }>;

    /**
     * Some balance was frozen.
     **/
    Frozen: GenericPalletEvent<Rv, 'Balances', 'Frozen', { who: AccountId20; amount: bigint }>;

    /**
     * Some balance was thawed.
     **/
    Thawed: GenericPalletEvent<Rv, 'Balances', 'Thawed', { who: AccountId20; amount: bigint }>;

    /**
     * The `TotalIssuance` was forcefully changed.
     **/
    TotalIssuanceForced: GenericPalletEvent<Rv, 'Balances', 'TotalIssuanceForced', { old: bigint; new: bigint }>;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `TransactionPayment`'s events
   **/
  transactionPayment: {
    /**
     * A transaction fee `actual_fee`, of which `tip` was added to the minimum inclusion fee,
     * has been paid by `who`.
     **/
    TransactionFeePaid: GenericPalletEvent<
      Rv,
      'TransactionPayment',
      'TransactionFeePaid',
      { who: AccountId20; actualFee: bigint; tip: bigint }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `ParachainStaking`'s events
   **/
  parachainStaking: {
    /**
     * Started new round.
     **/
    NewRound: GenericPalletEvent<
      Rv,
      'ParachainStaking',
      'NewRound',
      { startingBlock: number; round: number; selectedCollatorsNumber: number; totalBalance: bigint }
    >;

    /**
     * Account joined the set of collator candidates.
     **/
    JoinedCollatorCandidates: GenericPalletEvent<
      Rv,
      'ParachainStaking',
      'JoinedCollatorCandidates',
      { account: AccountId20; amountLocked: bigint; newTotalAmtLocked: bigint }
    >;

    /**
     * Candidate selected for collators. Total Exposed Amount includes all delegations.
     **/
    CollatorChosen: GenericPalletEvent<
      Rv,
      'ParachainStaking',
      'CollatorChosen',
      { round: number; collatorAccount: AccountId20; totalExposedAmount: bigint }
    >;

    /**
     * Candidate requested to decrease a self bond.
     **/
    CandidateBondLessRequested: GenericPalletEvent<
      Rv,
      'ParachainStaking',
      'CandidateBondLessRequested',
      { candidate: AccountId20; amountToDecrease: bigint; executeRound: number }
    >;

    /**
     * Candidate has increased a self bond.
     **/
    CandidateBondedMore: GenericPalletEvent<
      Rv,
      'ParachainStaking',
      'CandidateBondedMore',
      { candidate: AccountId20; amount: bigint; newTotalBond: bigint }
    >;

    /**
     * Candidate has decreased a self bond.
     **/
    CandidateBondedLess: GenericPalletEvent<
      Rv,
      'ParachainStaking',
      'CandidateBondedLess',
      { candidate: AccountId20; amount: bigint; newBond: bigint }
    >;

    /**
     * Candidate temporarily leave the set of collator candidates without unbonding.
     **/
    CandidateWentOffline: GenericPalletEvent<
      Rv,
      'ParachainStaking',
      'CandidateWentOffline',
      { candidate: AccountId20 }
    >;

    /**
     * Candidate rejoins the set of collator candidates.
     **/
    CandidateBackOnline: GenericPalletEvent<Rv, 'ParachainStaking', 'CandidateBackOnline', { candidate: AccountId20 }>;

    /**
     * Candidate has requested to leave the set of candidates.
     **/
    CandidateScheduledExit: GenericPalletEvent<
      Rv,
      'ParachainStaking',
      'CandidateScheduledExit',
      { exitAllowedRound: number; candidate: AccountId20; scheduledExit: number }
    >;

    /**
     * Cancelled request to leave the set of candidates.
     **/
    CancelledCandidateExit: GenericPalletEvent<
      Rv,
      'ParachainStaking',
      'CancelledCandidateExit',
      { candidate: AccountId20 }
    >;

    /**
     * Cancelled request to decrease candidate's bond.
     **/
    CancelledCandidateBondLess: GenericPalletEvent<
      Rv,
      'ParachainStaking',
      'CancelledCandidateBondLess',
      { candidate: AccountId20; amount: bigint; executeRound: number }
    >;

    /**
     * Candidate has left the set of candidates.
     **/
    CandidateLeft: GenericPalletEvent<
      Rv,
      'ParachainStaking',
      'CandidateLeft',
      { exCandidate: AccountId20; unlockedAmount: bigint; newTotalAmtLocked: bigint }
    >;

    /**
     * Delegator requested to decrease a bond for the collator candidate.
     **/
    DelegationDecreaseScheduled: GenericPalletEvent<
      Rv,
      'ParachainStaking',
      'DelegationDecreaseScheduled',
      { delegator: AccountId20; candidate: AccountId20; amountToDecrease: bigint; executeRound: number }
    >;
    DelegationIncreased: GenericPalletEvent<
      Rv,
      'ParachainStaking',
      'DelegationIncreased',
      { delegator: AccountId20; candidate: AccountId20; amount: bigint; inTop: boolean }
    >;
    DelegationDecreased: GenericPalletEvent<
      Rv,
      'ParachainStaking',
      'DelegationDecreased',
      { delegator: AccountId20; candidate: AccountId20; amount: bigint; inTop: boolean }
    >;

    /**
     * Delegator requested to leave the set of delegators.
     **/
    DelegatorExitScheduled: GenericPalletEvent<
      Rv,
      'ParachainStaking',
      'DelegatorExitScheduled',
      { round: number; delegator: AccountId20; scheduledExit: number }
    >;

    /**
     * Delegator requested to revoke delegation.
     **/
    DelegationRevocationScheduled: GenericPalletEvent<
      Rv,
      'ParachainStaking',
      'DelegationRevocationScheduled',
      { round: number; delegator: AccountId20; candidate: AccountId20; scheduledExit: number }
    >;

    /**
     * Delegator has left the set of delegators.
     **/
    DelegatorLeft: GenericPalletEvent<
      Rv,
      'ParachainStaking',
      'DelegatorLeft',
      { delegator: AccountId20; unstakedAmount: bigint }
    >;

    /**
     * Delegation revoked.
     **/
    DelegationRevoked: GenericPalletEvent<
      Rv,
      'ParachainStaking',
      'DelegationRevoked',
      { delegator: AccountId20; candidate: AccountId20; unstakedAmount: bigint }
    >;

    /**
     * Delegation kicked.
     **/
    DelegationKicked: GenericPalletEvent<
      Rv,
      'ParachainStaking',
      'DelegationKicked',
      { delegator: AccountId20; candidate: AccountId20; unstakedAmount: bigint }
    >;

    /**
     * Cancelled a pending request to exit the set of delegators.
     **/
    DelegatorExitCancelled: GenericPalletEvent<
      Rv,
      'ParachainStaking',
      'DelegatorExitCancelled',
      { delegator: AccountId20 }
    >;

    /**
     * Cancelled request to change an existing delegation.
     **/
    CancelledDelegationRequest: GenericPalletEvent<
      Rv,
      'ParachainStaking',
      'CancelledDelegationRequest',
      {
        delegator: AccountId20;
        cancelledRequest: PalletParachainStakingDelegationRequestsCancelledScheduledRequest;
        collator: AccountId20;
      }
    >;

    /**
     * New delegation (increase of the existing one).
     **/
    Delegation: GenericPalletEvent<
      Rv,
      'ParachainStaking',
      'Delegation',
      {
        delegator: AccountId20;
        lockedAmount: bigint;
        candidate: AccountId20;
        delegatorPosition: PalletParachainStakingDelegatorAdded;
        autoCompound: Percent;
      }
    >;

    /**
     * Delegation from candidate state has been remove.
     **/
    DelegatorLeftCandidate: GenericPalletEvent<
      Rv,
      'ParachainStaking',
      'DelegatorLeftCandidate',
      { delegator: AccountId20; candidate: AccountId20; unstakedAmount: bigint; totalCandidateStaked: bigint }
    >;

    /**
     * Paid the account (delegator or collator) the balance as liquid rewards.
     **/
    Rewarded: GenericPalletEvent<Rv, 'ParachainStaking', 'Rewarded', { account: AccountId20; rewards: bigint }>;

    /**
     * Transferred to account which holds funds reserved for parachain bond.
     **/
    InflationDistributed: GenericPalletEvent<
      Rv,
      'ParachainStaking',
      'InflationDistributed',
      { index: number; account: AccountId20; value: bigint }
    >;
    InflationDistributionConfigUpdated: GenericPalletEvent<
      Rv,
      'ParachainStaking',
      'InflationDistributionConfigUpdated',
      { old: PalletParachainStakingInflationDistributionConfig; new: PalletParachainStakingInflationDistributionConfig }
    >;

    /**
     * Annual inflation input (first 3) was used to derive new per-round inflation (last 3)
     **/
    InflationSet: GenericPalletEvent<
      Rv,
      'ParachainStaking',
      'InflationSet',
      {
        annualMin: Perbill;
        annualIdeal: Perbill;
        annualMax: Perbill;
        roundMin: Perbill;
        roundIdeal: Perbill;
        roundMax: Perbill;
      }
    >;

    /**
     * Staking expectations set.
     **/
    StakeExpectationsSet: GenericPalletEvent<
      Rv,
      'ParachainStaking',
      'StakeExpectationsSet',
      { expectMin: bigint; expectIdeal: bigint; expectMax: bigint }
    >;

    /**
     * Set total selected candidates to this value.
     **/
    TotalSelectedSet: GenericPalletEvent<Rv, 'ParachainStaking', 'TotalSelectedSet', { old: number; new: number }>;

    /**
     * Set collator commission to this value.
     **/
    CollatorCommissionSet: GenericPalletEvent<
      Rv,
      'ParachainStaking',
      'CollatorCommissionSet',
      { old: Perbill; new: Perbill }
    >;

    /**
     * Set blocks per round
     **/
    BlocksPerRoundSet: GenericPalletEvent<
      Rv,
      'ParachainStaking',
      'BlocksPerRoundSet',
      {
        currentRound: number;
        firstBlock: number;
        old: number;
        new: number;
        newPerRoundInflationMin: Perbill;
        newPerRoundInflationIdeal: Perbill;
        newPerRoundInflationMax: Perbill;
      }
    >;

    /**
     * Auto-compounding reward percent was set for a delegation.
     **/
    AutoCompoundSet: GenericPalletEvent<
      Rv,
      'ParachainStaking',
      'AutoCompoundSet',
      { candidate: AccountId20; delegator: AccountId20; value: Percent }
    >;

    /**
     * Compounded a portion of rewards towards the delegation.
     **/
    Compounded: GenericPalletEvent<
      Rv,
      'ParachainStaking',
      'Compounded',
      { candidate: AccountId20; delegator: AccountId20; amount: bigint }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `AuthorFilter`'s events
   **/
  authorFilter: {
    /**
     * The amount of eligible authors for the filter to select has been changed.
     **/
    EligibleUpdated: GenericPalletEvent<Rv, 'AuthorFilter', 'EligibleUpdated', PalletAuthorSlotFilterNumNonZeroU32>;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `AuthorMapping`'s events
   **/
  authorMapping: {
    /**
     * A NimbusId has been registered and mapped to an AccountId.
     **/
    KeysRegistered: GenericPalletEvent<
      Rv,
      'AuthorMapping',
      'KeysRegistered',
      {
        nimbusId: NimbusPrimitivesNimbusCryptoPublic;
        accountId: AccountId20;
        keys: SessionKeysPrimitivesVrfVrfCryptoPublic;
      }
    >;

    /**
     * An NimbusId has been de-registered, and its AccountId mapping removed.
     **/
    KeysRemoved: GenericPalletEvent<
      Rv,
      'AuthorMapping',
      'KeysRemoved',
      {
        nimbusId: NimbusPrimitivesNimbusCryptoPublic;
        accountId: AccountId20;
        keys: SessionKeysPrimitivesVrfVrfCryptoPublic;
      }
    >;

    /**
     * An NimbusId has been registered, replacing a previous registration and its mapping.
     **/
    KeysRotated: GenericPalletEvent<
      Rv,
      'AuthorMapping',
      'KeysRotated',
      {
        newNimbusId: NimbusPrimitivesNimbusCryptoPublic;
        accountId: AccountId20;
        newKeys: SessionKeysPrimitivesVrfVrfCryptoPublic;
      }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `MoonbeamOrbiters`'s events
   **/
  moonbeamOrbiters: {
    /**
     * An orbiter join a collator pool
     **/
    OrbiterJoinCollatorPool: GenericPalletEvent<
      Rv,
      'MoonbeamOrbiters',
      'OrbiterJoinCollatorPool',
      { collator: AccountId20; orbiter: AccountId20 }
    >;

    /**
     * An orbiter leave a collator pool
     **/
    OrbiterLeaveCollatorPool: GenericPalletEvent<
      Rv,
      'MoonbeamOrbiters',
      'OrbiterLeaveCollatorPool',
      { collator: AccountId20; orbiter: AccountId20 }
    >;

    /**
     * Paid the orbiter account the balance as liquid rewards.
     **/
    OrbiterRewarded: GenericPalletEvent<
      Rv,
      'MoonbeamOrbiters',
      'OrbiterRewarded',
      { account: AccountId20; rewards: bigint }
    >;
    OrbiterRotation: GenericPalletEvent<
      Rv,
      'MoonbeamOrbiters',
      'OrbiterRotation',
      { collator: AccountId20; oldOrbiter?: AccountId20 | undefined; newOrbiter?: AccountId20 | undefined }
    >;

    /**
     * An orbiter has registered
     **/
    OrbiterRegistered: GenericPalletEvent<
      Rv,
      'MoonbeamOrbiters',
      'OrbiterRegistered',
      { account: AccountId20; deposit: bigint }
    >;

    /**
     * An orbiter has unregistered
     **/
    OrbiterUnregistered: GenericPalletEvent<Rv, 'MoonbeamOrbiters', 'OrbiterUnregistered', { account: AccountId20 }>;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Utility`'s events
   **/
  utility: {
    /**
     * Batch of dispatches did not complete fully. Index of first failing dispatch given, as
     * well as the error.
     **/
    BatchInterrupted: GenericPalletEvent<Rv, 'Utility', 'BatchInterrupted', { index: number; error: DispatchError }>;

    /**
     * Batch of dispatches completed fully with no error.
     **/
    BatchCompleted: GenericPalletEvent<Rv, 'Utility', 'BatchCompleted', null>;

    /**
     * Batch of dispatches completed but has errors.
     **/
    BatchCompletedWithErrors: GenericPalletEvent<Rv, 'Utility', 'BatchCompletedWithErrors', null>;

    /**
     * A single item within a Batch of dispatches has completed with no error.
     **/
    ItemCompleted: GenericPalletEvent<Rv, 'Utility', 'ItemCompleted', null>;

    /**
     * A single item within a Batch of dispatches has completed with error.
     **/
    ItemFailed: GenericPalletEvent<Rv, 'Utility', 'ItemFailed', { error: DispatchError }>;

    /**
     * A call was dispatched.
     **/
    DispatchedAs: GenericPalletEvent<Rv, 'Utility', 'DispatchedAs', { result: Result<[], DispatchError> }>;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Proxy`'s events
   **/
  proxy: {
    /**
     * A proxy was executed correctly, with the given.
     **/
    ProxyExecuted: GenericPalletEvent<Rv, 'Proxy', 'ProxyExecuted', { result: Result<[], DispatchError> }>;

    /**
     * A pure account has been created by new proxy with given
     * disambiguation index and proxy type.
     **/
    PureCreated: GenericPalletEvent<
      Rv,
      'Proxy',
      'PureCreated',
      { pure: AccountId20; who: AccountId20; proxyType: MoonbeamRuntimeProxyType; disambiguationIndex: number }
    >;

    /**
     * An announcement was placed to make a call in the future.
     **/
    Announced: GenericPalletEvent<Rv, 'Proxy', 'Announced', { real: AccountId20; proxy: AccountId20; callHash: H256 }>;

    /**
     * A proxy was added.
     **/
    ProxyAdded: GenericPalletEvent<
      Rv,
      'Proxy',
      'ProxyAdded',
      { delegator: AccountId20; delegatee: AccountId20; proxyType: MoonbeamRuntimeProxyType; delay: number }
    >;

    /**
     * A proxy was removed.
     **/
    ProxyRemoved: GenericPalletEvent<
      Rv,
      'Proxy',
      'ProxyRemoved',
      { delegator: AccountId20; delegatee: AccountId20; proxyType: MoonbeamRuntimeProxyType; delay: number }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `MaintenanceMode`'s events
   **/
  maintenanceMode: {
    /**
     * The chain was put into Maintenance Mode
     **/
    EnteredMaintenanceMode: GenericPalletEvent<Rv, 'MaintenanceMode', 'EnteredMaintenanceMode', null>;

    /**
     * The chain returned to its normal operating state
     **/
    NormalOperationResumed: GenericPalletEvent<Rv, 'MaintenanceMode', 'NormalOperationResumed', null>;

    /**
     * The call to suspend on_idle XCM execution failed with inner error
     **/
    FailedToSuspendIdleXcmExecution: GenericPalletEvent<
      Rv,
      'MaintenanceMode',
      'FailedToSuspendIdleXcmExecution',
      { error: DispatchError }
    >;

    /**
     * The call to resume on_idle XCM execution failed with inner error
     **/
    FailedToResumeIdleXcmExecution: GenericPalletEvent<
      Rv,
      'MaintenanceMode',
      'FailedToResumeIdleXcmExecution',
      { error: DispatchError }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Identity`'s events
   **/
  identity: {
    /**
     * A name was set or reset (which will remove all judgements).
     **/
    IdentitySet: GenericPalletEvent<Rv, 'Identity', 'IdentitySet', { who: AccountId20 }>;

    /**
     * A name was cleared, and the given balance returned.
     **/
    IdentityCleared: GenericPalletEvent<Rv, 'Identity', 'IdentityCleared', { who: AccountId20; deposit: bigint }>;

    /**
     * A name was removed and the given balance slashed.
     **/
    IdentityKilled: GenericPalletEvent<Rv, 'Identity', 'IdentityKilled', { who: AccountId20; deposit: bigint }>;

    /**
     * A judgement was asked from a registrar.
     **/
    JudgementRequested: GenericPalletEvent<
      Rv,
      'Identity',
      'JudgementRequested',
      { who: AccountId20; registrarIndex: number }
    >;

    /**
     * A judgement request was retracted.
     **/
    JudgementUnrequested: GenericPalletEvent<
      Rv,
      'Identity',
      'JudgementUnrequested',
      { who: AccountId20; registrarIndex: number }
    >;

    /**
     * A judgement was given by a registrar.
     **/
    JudgementGiven: GenericPalletEvent<
      Rv,
      'Identity',
      'JudgementGiven',
      { target: AccountId20; registrarIndex: number }
    >;

    /**
     * A registrar was added.
     **/
    RegistrarAdded: GenericPalletEvent<Rv, 'Identity', 'RegistrarAdded', { registrarIndex: number }>;

    /**
     * A sub-identity was added to an identity and the deposit paid.
     **/
    SubIdentityAdded: GenericPalletEvent<
      Rv,
      'Identity',
      'SubIdentityAdded',
      { sub: AccountId20; main: AccountId20; deposit: bigint }
    >;

    /**
     * A sub-identity was removed from an identity and the deposit freed.
     **/
    SubIdentityRemoved: GenericPalletEvent<
      Rv,
      'Identity',
      'SubIdentityRemoved',
      { sub: AccountId20; main: AccountId20; deposit: bigint }
    >;

    /**
     * A sub-identity was cleared, and the given deposit repatriated from the
     * main identity account to the sub-identity account.
     **/
    SubIdentityRevoked: GenericPalletEvent<
      Rv,
      'Identity',
      'SubIdentityRevoked',
      { sub: AccountId20; main: AccountId20; deposit: bigint }
    >;

    /**
     * A username authority was added.
     **/
    AuthorityAdded: GenericPalletEvent<Rv, 'Identity', 'AuthorityAdded', { authority: AccountId20 }>;

    /**
     * A username authority was removed.
     **/
    AuthorityRemoved: GenericPalletEvent<Rv, 'Identity', 'AuthorityRemoved', { authority: AccountId20 }>;

    /**
     * A username was set for `who`.
     **/
    UsernameSet: GenericPalletEvent<Rv, 'Identity', 'UsernameSet', { who: AccountId20; username: Bytes }>;

    /**
     * A username was queued, but `who` must accept it prior to `expiration`.
     **/
    UsernameQueued: GenericPalletEvent<
      Rv,
      'Identity',
      'UsernameQueued',
      { who: AccountId20; username: Bytes; expiration: number }
    >;

    /**
     * A queued username passed its expiration without being claimed and was removed.
     **/
    PreapprovalExpired: GenericPalletEvent<Rv, 'Identity', 'PreapprovalExpired', { whose: AccountId20 }>;

    /**
     * A username was set as a primary and can be looked up from `who`.
     **/
    PrimaryUsernameSet: GenericPalletEvent<Rv, 'Identity', 'PrimaryUsernameSet', { who: AccountId20; username: Bytes }>;

    /**
     * A dangling username (as in, a username corresponding to an account that has removed its
     * identity) has been removed.
     **/
    DanglingUsernameRemoved: GenericPalletEvent<
      Rv,
      'Identity',
      'DanglingUsernameRemoved',
      { who: AccountId20; username: Bytes }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Migrations`'s events
   **/
  migrations: {
    /**
     * Runtime upgrade started
     **/
    RuntimeUpgradeStarted: GenericPalletEvent<Rv, 'Migrations', 'RuntimeUpgradeStarted', null>;

    /**
     * Runtime upgrade completed
     **/
    RuntimeUpgradeCompleted: GenericPalletEvent<
      Rv,
      'Migrations',
      'RuntimeUpgradeCompleted',
      { weight: SpWeightsWeightV2Weight }
    >;

    /**
     * Migration started
     **/
    MigrationStarted: GenericPalletEvent<Rv, 'Migrations', 'MigrationStarted', { migrationName: Bytes }>;

    /**
     * Migration completed
     **/
    MigrationCompleted: GenericPalletEvent<
      Rv,
      'Migrations',
      'MigrationCompleted',
      { migrationName: Bytes; consumedWeight: SpWeightsWeightV2Weight }
    >;

    /**
     * XCM execution suspension failed with inner error
     **/
    FailedToSuspendIdleXcmExecution: GenericPalletEvent<
      Rv,
      'Migrations',
      'FailedToSuspendIdleXcmExecution',
      { error: DispatchError }
    >;

    /**
     * XCM execution resume failed with inner error
     **/
    FailedToResumeIdleXcmExecution: GenericPalletEvent<
      Rv,
      'Migrations',
      'FailedToResumeIdleXcmExecution',
      { error: DispatchError }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Multisig`'s events
   **/
  multisig: {
    /**
     * A new multisig operation has begun.
     **/
    NewMultisig: GenericPalletEvent<
      Rv,
      'Multisig',
      'NewMultisig',
      { approving: AccountId20; multisig: AccountId20; callHash: FixedBytes<32> }
    >;

    /**
     * A multisig operation has been approved by someone.
     **/
    MultisigApproval: GenericPalletEvent<
      Rv,
      'Multisig',
      'MultisigApproval',
      { approving: AccountId20; timepoint: PalletMultisigTimepoint; multisig: AccountId20; callHash: FixedBytes<32> }
    >;

    /**
     * A multisig operation has been executed.
     **/
    MultisigExecuted: GenericPalletEvent<
      Rv,
      'Multisig',
      'MultisigExecuted',
      {
        approving: AccountId20;
        timepoint: PalletMultisigTimepoint;
        multisig: AccountId20;
        callHash: FixedBytes<32>;
        result: Result<[], DispatchError>;
      }
    >;

    /**
     * A multisig operation has been cancelled.
     **/
    MultisigCancelled: GenericPalletEvent<
      Rv,
      'Multisig',
      'MultisigCancelled',
      { cancelling: AccountId20; timepoint: PalletMultisigTimepoint; multisig: AccountId20; callHash: FixedBytes<32> }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Parameters`'s events
   **/
  parameters: {
    /**
     * A Parameter was set.
     *
     * Is also emitted when the value was not changed.
     **/
    Updated: GenericPalletEvent<
      Rv,
      'Parameters',
      'Updated',
      {
        /**
         * The key that was updated.
         **/
        key: MoonbeamRuntimeRuntimeParamsRuntimeParametersKey;

        /**
         * The old value before this call.
         **/
        oldValue?: MoonbeamRuntimeRuntimeParamsRuntimeParametersValue | undefined;

        /**
         * The new value after this call.
         **/
        newValue?: MoonbeamRuntimeRuntimeParamsRuntimeParametersValue | undefined;
      }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `EVM`'s events
   **/
  evm: {
    /**
     * Ethereum events from contracts.
     **/
    Log: GenericPalletEvent<Rv, 'EVM', 'Log', { log: EthereumLog }>;

    /**
     * A contract has been created at given address.
     **/
    Created: GenericPalletEvent<Rv, 'EVM', 'Created', { address: H160 }>;

    /**
     * A contract was attempted to be created, but the execution failed.
     **/
    CreatedFailed: GenericPalletEvent<Rv, 'EVM', 'CreatedFailed', { address: H160 }>;

    /**
     * A contract has been executed successfully with states applied.
     **/
    Executed: GenericPalletEvent<Rv, 'EVM', 'Executed', { address: H160 }>;

    /**
     * A contract has been executed with errors. States are reverted with only gas fees applied.
     **/
    ExecutedFailed: GenericPalletEvent<Rv, 'EVM', 'ExecutedFailed', { address: H160 }>;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Ethereum`'s events
   **/
  ethereum: {
    /**
     * An ethereum transaction was successfully executed.
     **/
    Executed: GenericPalletEvent<
      Rv,
      'Ethereum',
      'Executed',
      { from: H160; to: H160; transactionHash: H256; exitReason: EvmCoreErrorExitReason; extraData: Bytes }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Scheduler`'s events
   **/
  scheduler: {
    /**
     * Scheduled some task.
     **/
    Scheduled: GenericPalletEvent<Rv, 'Scheduler', 'Scheduled', { when: number; index: number }>;

    /**
     * Canceled some task.
     **/
    Canceled: GenericPalletEvent<Rv, 'Scheduler', 'Canceled', { when: number; index: number }>;

    /**
     * Dispatched some task.
     **/
    Dispatched: GenericPalletEvent<
      Rv,
      'Scheduler',
      'Dispatched',
      { task: [number, number]; id?: FixedBytes<32> | undefined; result: Result<[], DispatchError> }
    >;

    /**
     * Set a retry configuration for some task.
     **/
    RetrySet: GenericPalletEvent<
      Rv,
      'Scheduler',
      'RetrySet',
      { task: [number, number]; id?: FixedBytes<32> | undefined; period: number; retries: number }
    >;

    /**
     * Cancel a retry configuration for some task.
     **/
    RetryCancelled: GenericPalletEvent<
      Rv,
      'Scheduler',
      'RetryCancelled',
      { task: [number, number]; id?: FixedBytes<32> | undefined }
    >;

    /**
     * The call for the provided hash was not found so the task has been aborted.
     **/
    CallUnavailable: GenericPalletEvent<
      Rv,
      'Scheduler',
      'CallUnavailable',
      { task: [number, number]; id?: FixedBytes<32> | undefined }
    >;

    /**
     * The given task was unable to be renewed since the agenda is full at that block.
     **/
    PeriodicFailed: GenericPalletEvent<
      Rv,
      'Scheduler',
      'PeriodicFailed',
      { task: [number, number]; id?: FixedBytes<32> | undefined }
    >;

    /**
     * The given task was unable to be retried since the agenda is full at that block or there
     * was not enough weight to reschedule it.
     **/
    RetryFailed: GenericPalletEvent<
      Rv,
      'Scheduler',
      'RetryFailed',
      { task: [number, number]; id?: FixedBytes<32> | undefined }
    >;

    /**
     * The given task can never be executed since it is overweight.
     **/
    PermanentlyOverweight: GenericPalletEvent<
      Rv,
      'Scheduler',
      'PermanentlyOverweight',
      { task: [number, number]; id?: FixedBytes<32> | undefined }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Preimage`'s events
   **/
  preimage: {
    /**
     * A preimage has been noted.
     **/
    Noted: GenericPalletEvent<Rv, 'Preimage', 'Noted', { hash: H256 }>;

    /**
     * A preimage has been requested.
     **/
    Requested: GenericPalletEvent<Rv, 'Preimage', 'Requested', { hash: H256 }>;

    /**
     * A preimage has ben cleared.
     **/
    Cleared: GenericPalletEvent<Rv, 'Preimage', 'Cleared', { hash: H256 }>;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `ConvictionVoting`'s events
   **/
  convictionVoting: {
    /**
     * An account has delegated their vote to another account. \[who, target\]
     **/
    Delegated: GenericPalletEvent<Rv, 'ConvictionVoting', 'Delegated', [AccountId20, AccountId20]>;

    /**
     * An \[account\] has cancelled a previous delegation operation.
     **/
    Undelegated: GenericPalletEvent<Rv, 'ConvictionVoting', 'Undelegated', AccountId20>;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Referenda`'s events
   **/
  referenda: {
    /**
     * A referendum has been submitted.
     **/
    Submitted: GenericPalletEvent<
      Rv,
      'Referenda',
      'Submitted',
      {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * The track (and by extension proposal dispatch origin) of this referendum.
         **/
        track: number;

        /**
         * The proposal for the referendum.
         **/
        proposal: FrameSupportPreimagesBounded;
      }
    >;

    /**
     * The decision deposit has been placed.
     **/
    DecisionDepositPlaced: GenericPalletEvent<
      Rv,
      'Referenda',
      'DecisionDepositPlaced',
      {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * The account who placed the deposit.
         **/
        who: AccountId20;

        /**
         * The amount placed by the account.
         **/
        amount: bigint;
      }
    >;

    /**
     * The decision deposit has been refunded.
     **/
    DecisionDepositRefunded: GenericPalletEvent<
      Rv,
      'Referenda',
      'DecisionDepositRefunded',
      {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * The account who placed the deposit.
         **/
        who: AccountId20;

        /**
         * The amount placed by the account.
         **/
        amount: bigint;
      }
    >;

    /**
     * A deposit has been slashed.
     **/
    DepositSlashed: GenericPalletEvent<
      Rv,
      'Referenda',
      'DepositSlashed',
      {
        /**
         * The account who placed the deposit.
         **/
        who: AccountId20;

        /**
         * The amount placed by the account.
         **/
        amount: bigint;
      }
    >;

    /**
     * A referendum has moved into the deciding phase.
     **/
    DecisionStarted: GenericPalletEvent<
      Rv,
      'Referenda',
      'DecisionStarted',
      {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * The track (and by extension proposal dispatch origin) of this referendum.
         **/
        track: number;

        /**
         * The proposal for the referendum.
         **/
        proposal: FrameSupportPreimagesBounded;

        /**
         * The current tally of votes in this referendum.
         **/
        tally: PalletConvictionVotingTally;
      }
    >;
    ConfirmStarted: GenericPalletEvent<
      Rv,
      'Referenda',
      'ConfirmStarted',
      {
        /**
         * Index of the referendum.
         **/
        index: number;
      }
    >;
    ConfirmAborted: GenericPalletEvent<
      Rv,
      'Referenda',
      'ConfirmAborted',
      {
        /**
         * Index of the referendum.
         **/
        index: number;
      }
    >;

    /**
     * A referendum has ended its confirmation phase and is ready for approval.
     **/
    Confirmed: GenericPalletEvent<
      Rv,
      'Referenda',
      'Confirmed',
      {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * The final tally of votes in this referendum.
         **/
        tally: PalletConvictionVotingTally;
      }
    >;

    /**
     * A referendum has been approved and its proposal has been scheduled.
     **/
    Approved: GenericPalletEvent<
      Rv,
      'Referenda',
      'Approved',
      {
        /**
         * Index of the referendum.
         **/
        index: number;
      }
    >;

    /**
     * A proposal has been rejected by referendum.
     **/
    Rejected: GenericPalletEvent<
      Rv,
      'Referenda',
      'Rejected',
      {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * The final tally of votes in this referendum.
         **/
        tally: PalletConvictionVotingTally;
      }
    >;

    /**
     * A referendum has been timed out without being decided.
     **/
    TimedOut: GenericPalletEvent<
      Rv,
      'Referenda',
      'TimedOut',
      {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * The final tally of votes in this referendum.
         **/
        tally: PalletConvictionVotingTally;
      }
    >;

    /**
     * A referendum has been cancelled.
     **/
    Cancelled: GenericPalletEvent<
      Rv,
      'Referenda',
      'Cancelled',
      {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * The final tally of votes in this referendum.
         **/
        tally: PalletConvictionVotingTally;
      }
    >;

    /**
     * A referendum has been killed.
     **/
    Killed: GenericPalletEvent<
      Rv,
      'Referenda',
      'Killed',
      {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * The final tally of votes in this referendum.
         **/
        tally: PalletConvictionVotingTally;
      }
    >;

    /**
     * The submission deposit has been refunded.
     **/
    SubmissionDepositRefunded: GenericPalletEvent<
      Rv,
      'Referenda',
      'SubmissionDepositRefunded',
      {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * The account who placed the deposit.
         **/
        who: AccountId20;

        /**
         * The amount placed by the account.
         **/
        amount: bigint;
      }
    >;

    /**
     * Metadata for a referendum has been set.
     **/
    MetadataSet: GenericPalletEvent<
      Rv,
      'Referenda',
      'MetadataSet',
      {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * Preimage hash.
         **/
        hash: H256;
      }
    >;

    /**
     * Metadata for a referendum has been cleared.
     **/
    MetadataCleared: GenericPalletEvent<
      Rv,
      'Referenda',
      'MetadataCleared',
      {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * Preimage hash.
         **/
        hash: H256;
      }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Whitelist`'s events
   **/
  whitelist: {
    CallWhitelisted: GenericPalletEvent<Rv, 'Whitelist', 'CallWhitelisted', { callHash: H256 }>;
    WhitelistedCallRemoved: GenericPalletEvent<Rv, 'Whitelist', 'WhitelistedCallRemoved', { callHash: H256 }>;
    WhitelistedCallDispatched: GenericPalletEvent<
      Rv,
      'Whitelist',
      'WhitelistedCallDispatched',
      { callHash: H256; result: Result<FrameSupportDispatchPostDispatchInfo, SpRuntimeDispatchErrorWithPostInfo> }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `TreasuryCouncilCollective`'s events
   **/
  treasuryCouncilCollective: {
    /**
     * A motion (given hash) has been proposed (by given account) with a threshold (given
     * `MemberCount`).
     **/
    Proposed: GenericPalletEvent<
      Rv,
      'TreasuryCouncilCollective',
      'Proposed',
      { account: AccountId20; proposalIndex: number; proposalHash: H256; threshold: number }
    >;

    /**
     * A motion (given hash) has been voted on by given account, leaving
     * a tally (yes votes and no votes given respectively as `MemberCount`).
     **/
    Voted: GenericPalletEvent<
      Rv,
      'TreasuryCouncilCollective',
      'Voted',
      { account: AccountId20; proposalHash: H256; voted: boolean; yes: number; no: number }
    >;

    /**
     * A motion was approved by the required threshold.
     **/
    Approved: GenericPalletEvent<Rv, 'TreasuryCouncilCollective', 'Approved', { proposalHash: H256 }>;

    /**
     * A motion was not approved by the required threshold.
     **/
    Disapproved: GenericPalletEvent<Rv, 'TreasuryCouncilCollective', 'Disapproved', { proposalHash: H256 }>;

    /**
     * A motion was executed; result will be `Ok` if it returned without error.
     **/
    Executed: GenericPalletEvent<
      Rv,
      'TreasuryCouncilCollective',
      'Executed',
      { proposalHash: H256; result: Result<[], DispatchError> }
    >;

    /**
     * A single member did some action; result will be `Ok` if it returned without error.
     **/
    MemberExecuted: GenericPalletEvent<
      Rv,
      'TreasuryCouncilCollective',
      'MemberExecuted',
      { proposalHash: H256; result: Result<[], DispatchError> }
    >;

    /**
     * A proposal was closed because its threshold was reached or after its duration was up.
     **/
    Closed: GenericPalletEvent<
      Rv,
      'TreasuryCouncilCollective',
      'Closed',
      { proposalHash: H256; yes: number; no: number }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `OpenTechCommitteeCollective`'s events
   **/
  openTechCommitteeCollective: {
    /**
     * A motion (given hash) has been proposed (by given account) with a threshold (given
     * `MemberCount`).
     **/
    Proposed: GenericPalletEvent<
      Rv,
      'OpenTechCommitteeCollective',
      'Proposed',
      { account: AccountId20; proposalIndex: number; proposalHash: H256; threshold: number }
    >;

    /**
     * A motion (given hash) has been voted on by given account, leaving
     * a tally (yes votes and no votes given respectively as `MemberCount`).
     **/
    Voted: GenericPalletEvent<
      Rv,
      'OpenTechCommitteeCollective',
      'Voted',
      { account: AccountId20; proposalHash: H256; voted: boolean; yes: number; no: number }
    >;

    /**
     * A motion was approved by the required threshold.
     **/
    Approved: GenericPalletEvent<Rv, 'OpenTechCommitteeCollective', 'Approved', { proposalHash: H256 }>;

    /**
     * A motion was not approved by the required threshold.
     **/
    Disapproved: GenericPalletEvent<Rv, 'OpenTechCommitteeCollective', 'Disapproved', { proposalHash: H256 }>;

    /**
     * A motion was executed; result will be `Ok` if it returned without error.
     **/
    Executed: GenericPalletEvent<
      Rv,
      'OpenTechCommitteeCollective',
      'Executed',
      { proposalHash: H256; result: Result<[], DispatchError> }
    >;

    /**
     * A single member did some action; result will be `Ok` if it returned without error.
     **/
    MemberExecuted: GenericPalletEvent<
      Rv,
      'OpenTechCommitteeCollective',
      'MemberExecuted',
      { proposalHash: H256; result: Result<[], DispatchError> }
    >;

    /**
     * A proposal was closed because its threshold was reached or after its duration was up.
     **/
    Closed: GenericPalletEvent<
      Rv,
      'OpenTechCommitteeCollective',
      'Closed',
      { proposalHash: H256; yes: number; no: number }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Treasury`'s events
   **/
  treasury: {
    /**
     * We have ended a spend period and will now allocate funds.
     **/
    Spending: GenericPalletEvent<Rv, 'Treasury', 'Spending', { budgetRemaining: bigint }>;

    /**
     * Some funds have been allocated.
     **/
    Awarded: GenericPalletEvent<
      Rv,
      'Treasury',
      'Awarded',
      { proposalIndex: number; award: bigint; account: AccountId20 }
    >;

    /**
     * Some of our funds have been burnt.
     **/
    Burnt: GenericPalletEvent<Rv, 'Treasury', 'Burnt', { burntFunds: bigint }>;

    /**
     * Spending has finished; this is the amount that rolls over until next spend.
     **/
    Rollover: GenericPalletEvent<Rv, 'Treasury', 'Rollover', { rolloverBalance: bigint }>;

    /**
     * Some funds have been deposited.
     **/
    Deposit: GenericPalletEvent<Rv, 'Treasury', 'Deposit', { value: bigint }>;

    /**
     * A new spend proposal has been approved.
     **/
    SpendApproved: GenericPalletEvent<
      Rv,
      'Treasury',
      'SpendApproved',
      { proposalIndex: number; amount: bigint; beneficiary: AccountId20 }
    >;

    /**
     * The inactive funds of the pallet have been updated.
     **/
    UpdatedInactive: GenericPalletEvent<
      Rv,
      'Treasury',
      'UpdatedInactive',
      { reactivated: bigint; deactivated: bigint }
    >;

    /**
     * A new asset spend proposal has been approved.
     **/
    AssetSpendApproved: GenericPalletEvent<
      Rv,
      'Treasury',
      'AssetSpendApproved',
      { index: number; assetKind: []; amount: bigint; beneficiary: AccountId20; validFrom: number; expireAt: number }
    >;

    /**
     * An approved spend was voided.
     **/
    AssetSpendVoided: GenericPalletEvent<Rv, 'Treasury', 'AssetSpendVoided', { index: number }>;

    /**
     * A payment happened.
     **/
    Paid: GenericPalletEvent<Rv, 'Treasury', 'Paid', { index: number; paymentId: [] }>;

    /**
     * A payment failed and can be retried.
     **/
    PaymentFailed: GenericPalletEvent<Rv, 'Treasury', 'PaymentFailed', { index: number; paymentId: [] }>;

    /**
     * A spend was processed and removed from the storage. It might have been successfully
     * paid or it may have expired.
     **/
    SpendProcessed: GenericPalletEvent<Rv, 'Treasury', 'SpendProcessed', { index: number }>;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `CrowdloanRewards`'s events
   **/
  crowdloanRewards: {
    /**
     * The initial payment of InitializationPayment % was paid
     **/
    InitialPaymentMade: GenericPalletEvent<Rv, 'CrowdloanRewards', 'InitialPaymentMade', [AccountId20, bigint]>;

    /**
     * Someone has proven they made a contribution and associated a native identity with it.
     * Data is the relay account, native account and the total amount of _rewards_ that will be paid
     **/
    NativeIdentityAssociated: GenericPalletEvent<
      Rv,
      'CrowdloanRewards',
      'NativeIdentityAssociated',
      [FixedBytes<32>, AccountId20, bigint]
    >;

    /**
     * A contributor has claimed some rewards.
     * Data is the account getting paid and the amount of rewards paid.
     **/
    RewardsPaid: GenericPalletEvent<Rv, 'CrowdloanRewards', 'RewardsPaid', [AccountId20, bigint]>;

    /**
     * A contributor has updated the reward address.
     **/
    RewardAddressUpdated: GenericPalletEvent<
      Rv,
      'CrowdloanRewards',
      'RewardAddressUpdated',
      [AccountId20, AccountId20]
    >;

    /**
     * When initializing the reward vec an already initialized account was found
     **/
    InitializedAlreadyInitializedAccount: GenericPalletEvent<
      Rv,
      'CrowdloanRewards',
      'InitializedAlreadyInitializedAccount',
      [FixedBytes<32>, AccountId20 | undefined, bigint]
    >;

    /**
     * When initializing the reward vec an already initialized account was found
     **/
    InitializedAccountWithNotEnoughContribution: GenericPalletEvent<
      Rv,
      'CrowdloanRewards',
      'InitializedAccountWithNotEnoughContribution',
      [FixedBytes<32>, AccountId20 | undefined, bigint]
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `XcmpQueue`'s events
   **/
  xcmpQueue: {
    /**
     * An HRMP message was sent to a sibling parachain.
     **/
    XcmpMessageSent: GenericPalletEvent<Rv, 'XcmpQueue', 'XcmpMessageSent', { messageHash: FixedBytes<32> }>;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `CumulusXcm`'s events
   **/
  cumulusXcm: {
    /**
     * Downward message is invalid XCM.
     * \[ id \]
     **/
    InvalidFormat: GenericPalletEvent<Rv, 'CumulusXcm', 'InvalidFormat', FixedBytes<32>>;

    /**
     * Downward message is unsupported version of XCM.
     * \[ id \]
     **/
    UnsupportedVersion: GenericPalletEvent<Rv, 'CumulusXcm', 'UnsupportedVersion', FixedBytes<32>>;

    /**
     * Downward message executed with the given outcome.
     * \[ id, outcome \]
     **/
    ExecutedDownward: GenericPalletEvent<
      Rv,
      'CumulusXcm',
      'ExecutedDownward',
      [FixedBytes<32>, StagingXcmV4TraitsOutcome]
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `PolkadotXcm`'s events
   **/
  polkadotXcm: {
    /**
     * Execution of an XCM message was attempted.
     **/
    Attempted: GenericPalletEvent<Rv, 'PolkadotXcm', 'Attempted', { outcome: StagingXcmV4TraitsOutcome }>;

    /**
     * A XCM message was sent.
     **/
    Sent: GenericPalletEvent<
      Rv,
      'PolkadotXcm',
      'Sent',
      {
        origin: StagingXcmV4Location;
        destination: StagingXcmV4Location;
        message: StagingXcmV4Xcm;
        messageId: FixedBytes<32>;
      }
    >;

    /**
     * Query response received which does not match a registered query. This may be because a
     * matching query was never registered, it may be because it is a duplicate response, or
     * because the query timed out.
     **/
    UnexpectedResponse: GenericPalletEvent<
      Rv,
      'PolkadotXcm',
      'UnexpectedResponse',
      { origin: StagingXcmV4Location; queryId: bigint }
    >;

    /**
     * Query response has been received and is ready for taking with `take_response`. There is
     * no registered notification call.
     **/
    ResponseReady: GenericPalletEvent<
      Rv,
      'PolkadotXcm',
      'ResponseReady',
      { queryId: bigint; response: StagingXcmV4Response }
    >;

    /**
     * Query response has been received and query is removed. The registered notification has
     * been dispatched and executed successfully.
     **/
    Notified: GenericPalletEvent<
      Rv,
      'PolkadotXcm',
      'Notified',
      { queryId: bigint; palletIndex: number; callIndex: number }
    >;

    /**
     * Query response has been received and query is removed. The registered notification
     * could not be dispatched because the dispatch weight is greater than the maximum weight
     * originally budgeted by this runtime for the query result.
     **/
    NotifyOverweight: GenericPalletEvent<
      Rv,
      'PolkadotXcm',
      'NotifyOverweight',
      {
        queryId: bigint;
        palletIndex: number;
        callIndex: number;
        actualWeight: SpWeightsWeightV2Weight;
        maxBudgetedWeight: SpWeightsWeightV2Weight;
      }
    >;

    /**
     * Query response has been received and query is removed. There was a general error with
     * dispatching the notification call.
     **/
    NotifyDispatchError: GenericPalletEvent<
      Rv,
      'PolkadotXcm',
      'NotifyDispatchError',
      { queryId: bigint; palletIndex: number; callIndex: number }
    >;

    /**
     * Query response has been received and query is removed. The dispatch was unable to be
     * decoded into a `Call`; this might be due to dispatch function having a signature which
     * is not `(origin, QueryId, Response)`.
     **/
    NotifyDecodeFailed: GenericPalletEvent<
      Rv,
      'PolkadotXcm',
      'NotifyDecodeFailed',
      { queryId: bigint; palletIndex: number; callIndex: number }
    >;

    /**
     * Expected query response has been received but the origin location of the response does
     * not match that expected. The query remains registered for a later, valid, response to
     * be received and acted upon.
     **/
    InvalidResponder: GenericPalletEvent<
      Rv,
      'PolkadotXcm',
      'InvalidResponder',
      { origin: StagingXcmV4Location; queryId: bigint; expectedLocation?: StagingXcmV4Location | undefined }
    >;

    /**
     * Expected query response has been received but the expected origin location placed in
     * storage by this runtime previously cannot be decoded. The query remains registered.
     *
     * This is unexpected (since a location placed in storage in a previously executing
     * runtime should be readable prior to query timeout) and dangerous since the possibly
     * valid response will be dropped. Manual governance intervention is probably going to be
     * needed.
     **/
    InvalidResponderVersion: GenericPalletEvent<
      Rv,
      'PolkadotXcm',
      'InvalidResponderVersion',
      { origin: StagingXcmV4Location; queryId: bigint }
    >;

    /**
     * Received query response has been read and removed.
     **/
    ResponseTaken: GenericPalletEvent<Rv, 'PolkadotXcm', 'ResponseTaken', { queryId: bigint }>;

    /**
     * Some assets have been placed in an asset trap.
     **/
    AssetsTrapped: GenericPalletEvent<
      Rv,
      'PolkadotXcm',
      'AssetsTrapped',
      { hash: H256; origin: StagingXcmV4Location; assets: XcmVersionedAssets }
    >;

    /**
     * An XCM version change notification message has been attempted to be sent.
     *
     * The cost of sending it (borne by the chain) is included.
     **/
    VersionChangeNotified: GenericPalletEvent<
      Rv,
      'PolkadotXcm',
      'VersionChangeNotified',
      { destination: StagingXcmV4Location; result: number; cost: StagingXcmV4AssetAssets; messageId: FixedBytes<32> }
    >;

    /**
     * The supported version of a location has been changed. This might be through an
     * automatic notification or a manual intervention.
     **/
    SupportedVersionChanged: GenericPalletEvent<
      Rv,
      'PolkadotXcm',
      'SupportedVersionChanged',
      { location: StagingXcmV4Location; version: number }
    >;

    /**
     * A given location which had a version change subscription was dropped owing to an error
     * sending the notification to it.
     **/
    NotifyTargetSendFail: GenericPalletEvent<
      Rv,
      'PolkadotXcm',
      'NotifyTargetSendFail',
      { location: StagingXcmV4Location; queryId: bigint; error: XcmV3TraitsError }
    >;

    /**
     * A given location which had a version change subscription was dropped owing to an error
     * migrating the location to our new XCM format.
     **/
    NotifyTargetMigrationFail: GenericPalletEvent<
      Rv,
      'PolkadotXcm',
      'NotifyTargetMigrationFail',
      { location: XcmVersionedLocation; queryId: bigint }
    >;

    /**
     * Expected query response has been received but the expected querier location placed in
     * storage by this runtime previously cannot be decoded. The query remains registered.
     *
     * This is unexpected (since a location placed in storage in a previously executing
     * runtime should be readable prior to query timeout) and dangerous since the possibly
     * valid response will be dropped. Manual governance intervention is probably going to be
     * needed.
     **/
    InvalidQuerierVersion: GenericPalletEvent<
      Rv,
      'PolkadotXcm',
      'InvalidQuerierVersion',
      { origin: StagingXcmV4Location; queryId: bigint }
    >;

    /**
     * Expected query response has been received but the querier location of the response does
     * not match the expected. The query remains registered for a later, valid, response to
     * be received and acted upon.
     **/
    InvalidQuerier: GenericPalletEvent<
      Rv,
      'PolkadotXcm',
      'InvalidQuerier',
      {
        origin: StagingXcmV4Location;
        queryId: bigint;
        expectedQuerier: StagingXcmV4Location;
        maybeActualQuerier?: StagingXcmV4Location | undefined;
      }
    >;

    /**
     * A remote has requested XCM version change notification from us and we have honored it.
     * A version information message is sent to them and its cost is included.
     **/
    VersionNotifyStarted: GenericPalletEvent<
      Rv,
      'PolkadotXcm',
      'VersionNotifyStarted',
      { destination: StagingXcmV4Location; cost: StagingXcmV4AssetAssets; messageId: FixedBytes<32> }
    >;

    /**
     * We have requested that a remote chain send us XCM version change notifications.
     **/
    VersionNotifyRequested: GenericPalletEvent<
      Rv,
      'PolkadotXcm',
      'VersionNotifyRequested',
      { destination: StagingXcmV4Location; cost: StagingXcmV4AssetAssets; messageId: FixedBytes<32> }
    >;

    /**
     * We have requested that a remote chain stops sending us XCM version change
     * notifications.
     **/
    VersionNotifyUnrequested: GenericPalletEvent<
      Rv,
      'PolkadotXcm',
      'VersionNotifyUnrequested',
      { destination: StagingXcmV4Location; cost: StagingXcmV4AssetAssets; messageId: FixedBytes<32> }
    >;

    /**
     * Fees were paid from a location for an operation (often for using `SendXcm`).
     **/
    FeesPaid: GenericPalletEvent<
      Rv,
      'PolkadotXcm',
      'FeesPaid',
      { paying: StagingXcmV4Location; fees: StagingXcmV4AssetAssets }
    >;

    /**
     * Some assets have been claimed from an asset trap
     **/
    AssetsClaimed: GenericPalletEvent<
      Rv,
      'PolkadotXcm',
      'AssetsClaimed',
      { hash: H256; origin: StagingXcmV4Location; assets: XcmVersionedAssets }
    >;

    /**
     * A XCM version migration finished.
     **/
    VersionMigrationFinished: GenericPalletEvent<Rv, 'PolkadotXcm', 'VersionMigrationFinished', { version: number }>;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Assets`'s events
   **/
  assets: {
    /**
     * Some asset class was created.
     **/
    Created: GenericPalletEvent<Rv, 'Assets', 'Created', { assetId: bigint; creator: AccountId20; owner: AccountId20 }>;

    /**
     * Some assets were issued.
     **/
    Issued: GenericPalletEvent<Rv, 'Assets', 'Issued', { assetId: bigint; owner: AccountId20; amount: bigint }>;

    /**
     * Some assets were transferred.
     **/
    Transferred: GenericPalletEvent<
      Rv,
      'Assets',
      'Transferred',
      { assetId: bigint; from: AccountId20; to: AccountId20; amount: bigint }
    >;

    /**
     * Some assets were destroyed.
     **/
    Burned: GenericPalletEvent<Rv, 'Assets', 'Burned', { assetId: bigint; owner: AccountId20; balance: bigint }>;

    /**
     * The management team changed.
     **/
    TeamChanged: GenericPalletEvent<
      Rv,
      'Assets',
      'TeamChanged',
      { assetId: bigint; issuer: AccountId20; admin: AccountId20; freezer: AccountId20 }
    >;

    /**
     * The owner changed.
     **/
    OwnerChanged: GenericPalletEvent<Rv, 'Assets', 'OwnerChanged', { assetId: bigint; owner: AccountId20 }>;

    /**
     * Some account `who` was frozen.
     **/
    Frozen: GenericPalletEvent<Rv, 'Assets', 'Frozen', { assetId: bigint; who: AccountId20 }>;

    /**
     * Some account `who` was thawed.
     **/
    Thawed: GenericPalletEvent<Rv, 'Assets', 'Thawed', { assetId: bigint; who: AccountId20 }>;

    /**
     * Some asset `asset_id` was frozen.
     **/
    AssetFrozen: GenericPalletEvent<Rv, 'Assets', 'AssetFrozen', { assetId: bigint }>;

    /**
     * Some asset `asset_id` was thawed.
     **/
    AssetThawed: GenericPalletEvent<Rv, 'Assets', 'AssetThawed', { assetId: bigint }>;

    /**
     * Accounts were destroyed for given asset.
     **/
    AccountsDestroyed: GenericPalletEvent<
      Rv,
      'Assets',
      'AccountsDestroyed',
      { assetId: bigint; accountsDestroyed: number; accountsRemaining: number }
    >;

    /**
     * Approvals were destroyed for given asset.
     **/
    ApprovalsDestroyed: GenericPalletEvent<
      Rv,
      'Assets',
      'ApprovalsDestroyed',
      { assetId: bigint; approvalsDestroyed: number; approvalsRemaining: number }
    >;

    /**
     * An asset class is in the process of being destroyed.
     **/
    DestructionStarted: GenericPalletEvent<Rv, 'Assets', 'DestructionStarted', { assetId: bigint }>;

    /**
     * An asset class was destroyed.
     **/
    Destroyed: GenericPalletEvent<Rv, 'Assets', 'Destroyed', { assetId: bigint }>;

    /**
     * Some asset class was force-created.
     **/
    ForceCreated: GenericPalletEvent<Rv, 'Assets', 'ForceCreated', { assetId: bigint; owner: AccountId20 }>;

    /**
     * New metadata has been set for an asset.
     **/
    MetadataSet: GenericPalletEvent<
      Rv,
      'Assets',
      'MetadataSet',
      { assetId: bigint; name: Bytes; symbol: Bytes; decimals: number; isFrozen: boolean }
    >;

    /**
     * Metadata has been cleared for an asset.
     **/
    MetadataCleared: GenericPalletEvent<Rv, 'Assets', 'MetadataCleared', { assetId: bigint }>;

    /**
     * (Additional) funds have been approved for transfer to a destination account.
     **/
    ApprovedTransfer: GenericPalletEvent<
      Rv,
      'Assets',
      'ApprovedTransfer',
      { assetId: bigint; source: AccountId20; delegate: AccountId20; amount: bigint }
    >;

    /**
     * An approval for account `delegate` was cancelled by `owner`.
     **/
    ApprovalCancelled: GenericPalletEvent<
      Rv,
      'Assets',
      'ApprovalCancelled',
      { assetId: bigint; owner: AccountId20; delegate: AccountId20 }
    >;

    /**
     * An `amount` was transferred in its entirety from `owner` to `destination` by
     * the approved `delegate`.
     **/
    TransferredApproved: GenericPalletEvent<
      Rv,
      'Assets',
      'TransferredApproved',
      { assetId: bigint; owner: AccountId20; delegate: AccountId20; destination: AccountId20; amount: bigint }
    >;

    /**
     * An asset has had its attributes changed by the `Force` origin.
     **/
    AssetStatusChanged: GenericPalletEvent<Rv, 'Assets', 'AssetStatusChanged', { assetId: bigint }>;

    /**
     * The min_balance of an asset has been updated by the asset owner.
     **/
    AssetMinBalanceChanged: GenericPalletEvent<
      Rv,
      'Assets',
      'AssetMinBalanceChanged',
      { assetId: bigint; newMinBalance: bigint }
    >;

    /**
     * Some account `who` was created with a deposit from `depositor`.
     **/
    Touched: GenericPalletEvent<Rv, 'Assets', 'Touched', { assetId: bigint; who: AccountId20; depositor: AccountId20 }>;

    /**
     * Some account `who` was blocked.
     **/
    Blocked: GenericPalletEvent<Rv, 'Assets', 'Blocked', { assetId: bigint; who: AccountId20 }>;

    /**
     * Some assets were deposited (e.g. for transaction fees).
     **/
    Deposited: GenericPalletEvent<Rv, 'Assets', 'Deposited', { assetId: bigint; who: AccountId20; amount: bigint }>;

    /**
     * Some assets were withdrawn from the account (e.g. for transaction fees).
     **/
    Withdrawn: GenericPalletEvent<Rv, 'Assets', 'Withdrawn', { assetId: bigint; who: AccountId20; amount: bigint }>;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `AssetManager`'s events
   **/
  assetManager: {
    /**
     * New asset with the asset manager is registered
     **/
    ForeignAssetRegistered: GenericPalletEvent<
      Rv,
      'AssetManager',
      'ForeignAssetRegistered',
      {
        assetId: bigint;
        asset: MoonbeamRuntimeXcmConfigAssetType;
        metadata: MoonbeamRuntimeAssetConfigAssetRegistrarMetadata;
      }
    >;

    /**
     * Changed the amount of units we are charging per execution second for a given asset
     **/
    UnitsPerSecondChanged: GenericPalletEvent<Rv, 'AssetManager', 'UnitsPerSecondChanged', null>;

    /**
     * Changed the xcm type mapping for a given asset id
     **/
    ForeignAssetXcmLocationChanged: GenericPalletEvent<
      Rv,
      'AssetManager',
      'ForeignAssetXcmLocationChanged',
      { assetId: bigint; newAssetType: MoonbeamRuntimeXcmConfigAssetType }
    >;

    /**
     * Removed all information related to an assetId
     **/
    ForeignAssetRemoved: GenericPalletEvent<
      Rv,
      'AssetManager',
      'ForeignAssetRemoved',
      { assetId: bigint; assetType: MoonbeamRuntimeXcmConfigAssetType }
    >;

    /**
     * Supported asset type for fee payment removed
     **/
    SupportedAssetRemoved: GenericPalletEvent<
      Rv,
      'AssetManager',
      'SupportedAssetRemoved',
      { assetType: MoonbeamRuntimeXcmConfigAssetType }
    >;

    /**
     * Removed all information related to an assetId and destroyed asset
     **/
    ForeignAssetDestroyed: GenericPalletEvent<
      Rv,
      'AssetManager',
      'ForeignAssetDestroyed',
      { assetId: bigint; assetType: MoonbeamRuntimeXcmConfigAssetType }
    >;

    /**
     * Removed all information related to an assetId and destroyed asset
     **/
    LocalAssetDestroyed: GenericPalletEvent<Rv, 'AssetManager', 'LocalAssetDestroyed', { assetId: bigint }>;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `XcmTransactor`'s events
   **/
  xcmTransactor: {
    /**
     * Transacted the inner call through a derivative account in a destination chain.
     **/
    TransactedDerivative: GenericPalletEvent<
      Rv,
      'XcmTransactor',
      'TransactedDerivative',
      { accountId: AccountId20; dest: StagingXcmV4Location; call: Bytes; index: number }
    >;

    /**
     * Transacted the call through the sovereign account in a destination chain.
     **/
    TransactedSovereign: GenericPalletEvent<
      Rv,
      'XcmTransactor',
      'TransactedSovereign',
      { feePayer?: AccountId20 | undefined; dest: StagingXcmV4Location; call: Bytes }
    >;

    /**
     * Transacted the call through a signed account in a destination chain.
     **/
    TransactedSigned: GenericPalletEvent<
      Rv,
      'XcmTransactor',
      'TransactedSigned',
      { feePayer: AccountId20; dest: StagingXcmV4Location; call: Bytes }
    >;

    /**
     * Registered a derivative index for an account id.
     **/
    RegisteredDerivative: GenericPalletEvent<
      Rv,
      'XcmTransactor',
      'RegisteredDerivative',
      { accountId: AccountId20; index: number }
    >;
    DeRegisteredDerivative: GenericPalletEvent<Rv, 'XcmTransactor', 'DeRegisteredDerivative', { index: number }>;

    /**
     * Transact failed
     **/
    TransactFailed: GenericPalletEvent<Rv, 'XcmTransactor', 'TransactFailed', { error: XcmV3TraitsError }>;

    /**
     * Changed the transact info of a location
     **/
    TransactInfoChanged: GenericPalletEvent<
      Rv,
      'XcmTransactor',
      'TransactInfoChanged',
      { location: StagingXcmV4Location; remoteInfo: PalletXcmTransactorRemoteTransactInfoWithMaxWeight }
    >;

    /**
     * Removed the transact info of a location
     **/
    TransactInfoRemoved: GenericPalletEvent<
      Rv,
      'XcmTransactor',
      'TransactInfoRemoved',
      { location: StagingXcmV4Location }
    >;

    /**
     * Set dest fee per second
     **/
    DestFeePerSecondChanged: GenericPalletEvent<
      Rv,
      'XcmTransactor',
      'DestFeePerSecondChanged',
      { location: StagingXcmV4Location; feePerSecond: bigint }
    >;

    /**
     * Remove dest fee per second
     **/
    DestFeePerSecondRemoved: GenericPalletEvent<
      Rv,
      'XcmTransactor',
      'DestFeePerSecondRemoved',
      { location: StagingXcmV4Location }
    >;

    /**
     * HRMP manage action succesfully sent
     **/
    HrmpManagementSent: GenericPalletEvent<
      Rv,
      'XcmTransactor',
      'HrmpManagementSent',
      { action: PalletXcmTransactorHrmpOperation }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `EthereumXcm`'s events
   **/
  ethereumXcm: {
    /**
     * Ethereum transaction executed from XCM
     **/
    ExecutedFromXcm: GenericPalletEvent<Rv, 'EthereumXcm', 'ExecutedFromXcm', { xcmMsgHash: H256; ethTxHash: H256 }>;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `MessageQueue`'s events
   **/
  messageQueue: {
    /**
     * Message discarded due to an error in the `MessageProcessor` (usually a format error).
     **/
    ProcessingFailed: GenericPalletEvent<
      Rv,
      'MessageQueue',
      'ProcessingFailed',
      {
        /**
         * The `blake2_256` hash of the message.
         **/
        id: H256;

        /**
         * The queue of the message.
         **/
        origin: CumulusPrimitivesCoreAggregateMessageOrigin;

        /**
         * The error that occurred.
         *
         * This error is pretty opaque. More fine-grained errors need to be emitted as events
         * by the `MessageProcessor`.
         **/
        error: FrameSupportMessagesProcessMessageError;
      }
    >;

    /**
     * Message is processed.
     **/
    Processed: GenericPalletEvent<
      Rv,
      'MessageQueue',
      'Processed',
      {
        /**
         * The `blake2_256` hash of the message.
         **/
        id: H256;

        /**
         * The queue of the message.
         **/
        origin: CumulusPrimitivesCoreAggregateMessageOrigin;

        /**
         * How much weight was used to process the message.
         **/
        weightUsed: SpWeightsWeightV2Weight;

        /**
         * Whether the message was processed.
         *
         * Note that this does not mean that the underlying `MessageProcessor` was internally
         * successful. It *solely* means that the MQ pallet will treat this as a success
         * condition and discard the message. Any internal error needs to be emitted as events
         * by the `MessageProcessor`.
         **/
        success: boolean;
      }
    >;

    /**
     * Message placed in overweight queue.
     **/
    OverweightEnqueued: GenericPalletEvent<
      Rv,
      'MessageQueue',
      'OverweightEnqueued',
      {
        /**
         * The `blake2_256` hash of the message.
         **/
        id: FixedBytes<32>;

        /**
         * The queue of the message.
         **/
        origin: CumulusPrimitivesCoreAggregateMessageOrigin;

        /**
         * The page of the message.
         **/
        pageIndex: number;

        /**
         * The index of the message within the page.
         **/
        messageIndex: number;
      }
    >;

    /**
     * This page was reaped.
     **/
    PageReaped: GenericPalletEvent<
      Rv,
      'MessageQueue',
      'PageReaped',
      {
        /**
         * The queue of the page.
         **/
        origin: CumulusPrimitivesCoreAggregateMessageOrigin;

        /**
         * The index of the page.
         **/
        index: number;
      }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `EvmForeignAssets`'s events
   **/
  evmForeignAssets: {
    /**
     * New asset with the asset manager is registered
     **/
    ForeignAssetCreated: GenericPalletEvent<
      Rv,
      'EvmForeignAssets',
      'ForeignAssetCreated',
      { contractAddress: H160; assetId: bigint; xcmLocation: StagingXcmV4Location }
    >;

    /**
     * Changed the xcm type mapping for a given asset id
     **/
    ForeignAssetXcmLocationChanged: GenericPalletEvent<
      Rv,
      'EvmForeignAssets',
      'ForeignAssetXcmLocationChanged',
      { assetId: bigint; newXcmLocation: StagingXcmV4Location }
    >;
    ForeignAssetFrozen: GenericPalletEvent<
      Rv,
      'EvmForeignAssets',
      'ForeignAssetFrozen',
      { assetId: bigint; xcmLocation: StagingXcmV4Location }
    >;
    ForeignAssetUnfrozen: GenericPalletEvent<
      Rv,
      'EvmForeignAssets',
      'ForeignAssetUnfrozen',
      { assetId: bigint; xcmLocation: StagingXcmV4Location }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `XcmWeightTrader`'s events
   **/
  xcmWeightTrader: {
    /**
     * New supported asset is registered
     **/
    SupportedAssetAdded: GenericPalletEvent<
      Rv,
      'XcmWeightTrader',
      'SupportedAssetAdded',
      { location: StagingXcmV4Location; relativePrice: bigint }
    >;

    /**
     * Changed the amount of units we are charging per execution second for a given asset
     **/
    SupportedAssetEdited: GenericPalletEvent<
      Rv,
      'XcmWeightTrader',
      'SupportedAssetEdited',
      { location: StagingXcmV4Location; relativePrice: bigint }
    >;

    /**
     * Pause support for a given asset
     **/
    PauseAssetSupport: GenericPalletEvent<
      Rv,
      'XcmWeightTrader',
      'PauseAssetSupport',
      { location: StagingXcmV4Location }
    >;

    /**
     * Resume support for a given asset
     **/
    ResumeAssetSupport: GenericPalletEvent<
      Rv,
      'XcmWeightTrader',
      'ResumeAssetSupport',
      { location: StagingXcmV4Location }
    >;

    /**
     * Supported asset type for fee payment removed
     **/
    SupportedAssetRemoved: GenericPalletEvent<
      Rv,
      'XcmWeightTrader',
      'SupportedAssetRemoved',
      { location: StagingXcmV4Location }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `EmergencyParaXcm`'s events
   **/
  emergencyParaXcm: {
    /**
     * The XCM incoming execution was Paused
     **/
    EnteredPausedXcmMode: GenericPalletEvent<Rv, 'EmergencyParaXcm', 'EnteredPausedXcmMode', undefined>;

    /**
     * The XCM incoming execution returned to normal operation
     **/
    NormalXcmOperationResumed: GenericPalletEvent<Rv, 'EmergencyParaXcm', 'NormalXcmOperationResumed', undefined>;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Randomness`'s events
   **/
  randomness: {
    RandomnessRequestedBabeEpoch: GenericPalletEvent<
      Rv,
      'Randomness',
      'RandomnessRequestedBabeEpoch',
      {
        id: bigint;
        refundAddress: H160;
        contractAddress: H160;
        fee: bigint;
        gasLimit: bigint;
        numWords: number;
        salt: H256;
        earliestEpoch: bigint;
      }
    >;
    RandomnessRequestedLocal: GenericPalletEvent<
      Rv,
      'Randomness',
      'RandomnessRequestedLocal',
      {
        id: bigint;
        refundAddress: H160;
        contractAddress: H160;
        fee: bigint;
        gasLimit: bigint;
        numWords: number;
        salt: H256;
        earliestBlock: number;
      }
    >;
    RequestFulfilled: GenericPalletEvent<Rv, 'Randomness', 'RequestFulfilled', { id: bigint }>;
    RequestFeeIncreased: GenericPalletEvent<Rv, 'Randomness', 'RequestFeeIncreased', { id: bigint; newFee: bigint }>;
    RequestExpirationExecuted: GenericPalletEvent<Rv, 'Randomness', 'RequestExpirationExecuted', { id: bigint }>;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
}
