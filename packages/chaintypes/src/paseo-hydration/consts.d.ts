// Generated by dedot cli

import type { GenericChainConsts, RpcVersion } from 'dedot/types';
import type { RuntimeVersion, Permill, FixedBytes, Percent, AccountId32, Perbill, FixedU128 } from 'dedot/codecs';
import type {
  FrameSystemLimitsBlockWeights,
  FrameSystemLimitsBlockLength,
  SpWeightsRuntimeDbWeight,
  FrameSupportPalletId,
  SpWeightsWeightV2Weight,
  PalletReferendaTrackInfo,
  HydradxTraitsOracleOraclePeriod,
  PalletDynamicFeesFeeParams,
  NonZeroU16,
  PolkadotParachainPrimitivesPrimitivesId,
  StagingXcmV4Location,
} from './types.js';

export interface ChainConsts<Rv extends RpcVersion> extends GenericChainConsts<Rv> {
  /**
   * Pallet `System`'s constants
   **/
  system: {
    /**
     * Block & extrinsics weights: base values and limits.
     **/
    blockWeights: FrameSystemLimitsBlockWeights;

    /**
     * The maximum length of a block (in bytes).
     **/
    blockLength: FrameSystemLimitsBlockLength;

    /**
     * Maximum number of block number to block hash mappings to keep (oldest pruned first).
     **/
    blockHashCount: number;

    /**
     * The weight of runtime database operations the runtime can invoke.
     **/
    dbWeight: SpWeightsRuntimeDbWeight;

    /**
     * Get the chain's in-code version.
     **/
    version: RuntimeVersion;

    /**
     * The designated SS58 prefix of this chain.
     *
     * This replaces the "ss58Format" property declared in the chain spec. Reason is
     * that the runtime should know about the prefix in order to make use of it as
     * an identifier of the chain.
     **/
    ss58Prefix: number;

    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `Timestamp`'s constants
   **/
  timestamp: {
    /**
     * The minimum period between blocks.
     *
     * Be aware that this is different to the *expected* period that the block production
     * apparatus provides. Your chosen consensus system will generally work with this to
     * determine a sensible block time. For example, in the Aura pallet it will be double this
     * period on default settings.
     **/
    minimumPeriod: bigint;

    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `Balances`'s constants
   **/
  balances: {
    /**
     * The minimum amount required to keep an account open. MUST BE GREATER THAN ZERO!
     *
     * If you *really* need it to be zero, you can enable the feature `insecure_zero_ed` for
     * this pallet. However, you do so at your own risk: this will open up a major DoS vector.
     * In case you have multiple sources of provider references, you may also get unexpected
     * behaviour if you set this to zero.
     *
     * Bottom line: Do yourself a favour and make it at least one!
     **/
    existentialDeposit: bigint;

    /**
     * The maximum number of locks that should exist on an account.
     * Not strictly enforced, but used for weight estimation.
     *
     * Use of locks is deprecated in favour of freezes. See `https://github.com/paritytech/substrate/pull/12951/`
     **/
    maxLocks: number;

    /**
     * The maximum number of named reserves that can exist on an account.
     *
     * Use of reserves is deprecated in favour of holds. See `https://github.com/paritytech/substrate/pull/12951/`
     **/
    maxReserves: number;

    /**
     * The maximum number of individual freeze locks that can exist on an account at any time.
     **/
    maxFreezes: number;

    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `TransactionPayment`'s constants
   **/
  transactionPayment: {
    /**
     * A fee multiplier for `Operational` extrinsics to compute "virtual tip" to boost their
     * `priority`
     *
     * This value is multiplied by the `final_fee` to obtain a "virtual tip" that is later
     * added to a tip component in regular `priority` calculations.
     * It means that a `Normal` transaction can front-run a similarly-sized `Operational`
     * extrinsic (with no tip), by including a tip value greater than the virtual tip.
     *
     * ```rust,ignore
     * // For `Normal`
     * let priority = priority_calc(tip);
     *
     * // For `Operational`
     * let virtual_tip = (inclusion_fee + tip) * OperationalFeeMultiplier;
     * let priority = priority_calc(tip + virtual_tip);
     * ```
     *
     * Note that since we use `final_fee` the multiplier applies also to the regular `tip`
     * sent with the transaction. So, not only does the transaction get a priority bump based
     * on the `inclusion_fee`, but we also amplify the impact of tips applied to `Operational`
     * transactions.
     **/
    operationalFeeMultiplier: number;

    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `MultiTransactionPayment`'s constants
   **/
  multiTransactionPayment: {
    /**
     * Native Asset
     **/
    nativeAssetId: number;

    /**
     * Polkadot Native Asset (DOT)
     **/
    polkadotNativeAssetId: number;

    /**
     * EVM Asset
     **/
    evmAssetId: number;

    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `Treasury`'s constants
   **/
  treasury: {
    /**
     * Period between successive spends.
     **/
    spendPeriod: number;

    /**
     * Percentage of spare funds (if any) that are burnt per spend period.
     **/
    burn: Permill;

    /**
     * The treasury's pallet id, used for deriving its sovereign account ID.
     **/
    palletId: FrameSupportPalletId;

    /**
     * The maximum number of approvals that can wait in the spending queue.
     *
     * NOTE: This parameter is also used within the Bounties Pallet extension if enabled.
     **/
    maxApprovals: number;

    /**
     * The period during which an approved treasury spend has to be claimed.
     **/
    payoutPeriod: number;

    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `Utility`'s constants
   **/
  utility: {
    /**
     * The limit on the number of batched calls.
     **/
    batchedCallsLimit: number;

    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `Preimage`'s constants
   **/
  preimage: {
    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `Identity`'s constants
   **/
  identity: {
    /**
     * The amount held on deposit for a registered identity.
     **/
    basicDeposit: bigint;

    /**
     * The amount held on deposit per encoded byte for a registered identity.
     **/
    byteDeposit: bigint;

    /**
     * The amount held on deposit for a registered subaccount. This should account for the fact
     * that one storage item's value will increase by the size of an account ID, and there will
     * be another trie item whose value is the size of an account ID plus 32 bytes.
     **/
    subAccountDeposit: bigint;

    /**
     * The maximum number of sub-accounts allowed per identified account.
     **/
    maxSubAccounts: number;

    /**
     * Maximum number of registrars allowed in the system. Needed to bound the complexity
     * of, e.g., updating judgements.
     **/
    maxRegistrars: number;

    /**
     * The number of blocks within which a username grant must be accepted.
     **/
    pendingUsernameExpiration: number;

    /**
     * The maximum length of a suffix.
     **/
    maxSuffixLength: number;

    /**
     * The maximum length of a username, including its suffix and any system-added delimiters.
     **/
    maxUsernameLength: number;

    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `Democracy`'s constants
   **/
  democracy: {
    /**
     * The period between a proposal being approved and enacted.
     *
     * It should generally be a little more than the unstake period to ensure that
     * voting stakers have an opportunity to remove themselves from the system in the case
     * where they are on the losing side of a vote.
     **/
    enactmentPeriod: number;

    /**
     * How often (in blocks) new public referenda are launched.
     **/
    launchPeriod: number;

    /**
     * How often (in blocks) to check for new votes.
     **/
    votingPeriod: number;

    /**
     * The minimum period of vote locking.
     *
     * It should be no shorter than enactment period to ensure that in the case of an approval,
     * those successful voters are locked into the consequences that their votes entail.
     **/
    voteLockingPeriod: number;

    /**
     * The minimum amount to be used as a deposit for a public referendum proposal.
     **/
    minimumDeposit: bigint;

    /**
     * Indicator for whether an emergency origin is even allowed to happen. Some chains may
     * want to set this permanently to `false`, others may want to condition it on things such
     * as an upgrade having happened recently.
     **/
    instantAllowed: boolean;

    /**
     * Minimum voting period allowed for a fast-track referendum.
     **/
    fastTrackVotingPeriod: number;

    /**
     * Period in blocks where an external proposal may not be re-submitted after being vetoed.
     **/
    cooloffPeriod: number;

    /**
     * The maximum number of votes for an account.
     *
     * Also used to compute weight, an overly big value can
     * lead to extrinsic with very big weight: see `delegate` for instance.
     **/
    maxVotes: number;

    /**
     * The maximum number of public proposals that can exist at any time.
     **/
    maxProposals: number;

    /**
     * The maximum number of deposits a public proposal may have at any time.
     **/
    maxDeposits: number;

    /**
     * The maximum number of items which can be blacklisted.
     **/
    maxBlacklisted: number;

    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `Elections`'s constants
   **/
  elections: {
    /**
     * Identifier for the elections-phragmen pallet's lock
     **/
    palletId: FixedBytes<8>;

    /**
     * How much should be locked up in order to submit one's candidacy.
     **/
    candidacyBond: bigint;

    /**
     * Base deposit associated with voting.
     *
     * This should be sensibly high to economically ensure the pallet cannot be attacked by
     * creating a gigantic number of votes.
     **/
    votingBondBase: bigint;

    /**
     * The amount of bond that need to be locked for each vote (32 bytes).
     **/
    votingBondFactor: bigint;

    /**
     * Number of members to elect.
     **/
    desiredMembers: number;

    /**
     * Number of runners_up to keep.
     **/
    desiredRunnersUp: number;

    /**
     * How long each seat is kept. This defines the next block number at which an election
     * round will happen. If set to zero, no elections are ever triggered and the module will
     * be in passive mode.
     **/
    termDuration: number;

    /**
     * The maximum number of candidates in a phragmen election.
     *
     * Warning: This impacts the size of the election which is run onchain. Chose wisely, and
     * consider how it will impact `T::WeightInfo::election_phragmen`.
     *
     * When this limit is reached no more candidates are accepted in the election.
     **/
    maxCandidates: number;

    /**
     * The maximum number of voters to allow in a phragmen election.
     *
     * Warning: This impacts the size of the election which is run onchain. Chose wisely, and
     * consider how it will impact `T::WeightInfo::election_phragmen`.
     *
     * When the limit is reached the new voters are ignored.
     **/
    maxVoters: number;

    /**
     * Maximum numbers of votes per voter.
     *
     * Warning: This impacts the size of the election which is run onchain. Chose wisely, and
     * consider how it will impact `T::WeightInfo::election_phragmen`.
     **/
    maxVotesPerVoter: number;

    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `Council`'s constants
   **/
  council: {
    /**
     * The maximum weight of a dispatch call that can be proposed and executed.
     **/
    maxProposalWeight: SpWeightsWeightV2Weight;

    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `TechnicalCommittee`'s constants
   **/
  technicalCommittee: {
    /**
     * The maximum weight of a dispatch call that can be proposed and executed.
     **/
    maxProposalWeight: SpWeightsWeightV2Weight;

    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `Tips`'s constants
   **/
  tips: {
    /**
     * Maximum acceptable reason length.
     *
     * Benchmarks depend on this value, be sure to update weights file when changing this value
     **/
    maximumReasonLength: number;

    /**
     * The amount held on deposit per byte within the tip report reason or bounty description.
     **/
    dataDepositPerByte: bigint;

    /**
     * The period for which a tip remains open after is has achieved threshold tippers.
     **/
    tipCountdown: number;

    /**
     * The percent of the final tip which goes to the original reporter of the tip.
     **/
    tipFindersFee: Percent;

    /**
     * The non-zero amount held on deposit for placing a tip report.
     **/
    tipReportDepositBase: bigint;

    /**
     * The maximum amount for a single tip.
     **/
    maxTipAmount: bigint;

    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `Proxy`'s constants
   **/
  proxy: {
    /**
     * The base amount of currency needed to reserve for creating a proxy.
     *
     * This is held for an additional storage item whose value size is
     * `sizeof(Balance)` bytes and whose key size is `sizeof(AccountId)` bytes.
     **/
    proxyDepositBase: bigint;

    /**
     * The amount of currency needed per proxy added.
     *
     * This is held for adding 32 bytes plus an instance of `ProxyType` more into a
     * pre-existing storage value. Thus, when configuring `ProxyDepositFactor` one should take
     * into account `32 + proxy_type.encode().len()` bytes of data.
     **/
    proxyDepositFactor: bigint;

    /**
     * The maximum amount of proxies allowed for a single account.
     **/
    maxProxies: number;

    /**
     * The maximum amount of time-delayed announcements that are allowed to be pending.
     **/
    maxPending: number;

    /**
     * The base amount of currency needed to reserve for creating an announcement.
     *
     * This is held when a new storage item holding a `Balance` is created (typically 16
     * bytes).
     **/
    announcementDepositBase: bigint;

    /**
     * The amount of currency needed per announcement made.
     *
     * This is held for adding an `AccountId`, `Hash` and `BlockNumber` (typically 68 bytes)
     * into a pre-existing storage value.
     **/
    announcementDepositFactor: bigint;

    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `Multisig`'s constants
   **/
  multisig: {
    /**
     * The base amount of currency needed to reserve for creating a multisig execution or to
     * store a dispatch call for later.
     *
     * This is held for an additional storage item whose value size is
     * `4 + sizeof((BlockNumber, Balance, AccountId))` bytes and whose key size is
     * `32 + sizeof(AccountId)` bytes.
     **/
    depositBase: bigint;

    /**
     * The amount of currency needed per unit threshold when creating a multisig execution.
     *
     * This is held for adding 32 bytes more into a pre-existing storage value.
     **/
    depositFactor: bigint;

    /**
     * The maximum amount of signatories allowed in the multisig.
     **/
    maxSignatories: number;

    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `Uniques`'s constants
   **/
  uniques: {
    /**
     * The basic amount of funds that must be reserved for collection.
     **/
    collectionDeposit: bigint;

    /**
     * The basic amount of funds that must be reserved for an item.
     **/
    itemDeposit: bigint;

    /**
     * The basic amount of funds that must be reserved when adding metadata to your item.
     **/
    metadataDepositBase: bigint;

    /**
     * The basic amount of funds that must be reserved when adding an attribute to an item.
     **/
    attributeDepositBase: bigint;

    /**
     * The additional funds that must be reserved for the number of bytes store in metadata,
     * either "normal" metadata or attribute metadata.
     **/
    depositPerByte: bigint;

    /**
     * The maximum length of data stored on-chain.
     **/
    stringLimit: number;

    /**
     * The maximum length of an attribute key.
     **/
    keyLimit: number;

    /**
     * The maximum length of an attribute value.
     **/
    valueLimit: number;

    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `StateTrieMigration`'s constants
   **/
  stateTrieMigration: {
    /**
     * Maximal number of bytes that a key can have.
     *
     * FRAME itself does not limit the key length.
     * The concrete value must therefore depend on your storage usage.
     * A [`frame_support::storage::StorageNMap`] for example can have an arbitrary number of
     * keys which are then hashed and concatenated, resulting in arbitrarily long keys.
     *
     * Use the *state migration RPC* to retrieve the length of the longest key in your
     * storage: <https://github.com/paritytech/substrate/issues/11642>
     *
     * The migration will halt with a `Halted` event if this value is too small.
     * Since there is no real penalty from over-estimating, it is advised to use a large
     * value. The default is 512 byte.
     *
     * Some key lengths for reference:
     * - [`frame_support::storage::StorageValue`]: 32 byte
     * - [`frame_support::storage::StorageMap`]: 64 byte
     * - [`frame_support::storage::StorageDoubleMap`]: 96 byte
     *
     * For more info see
     * <https://www.shawntabrizi.com/blog/substrate/querying-substrate-storage-via-rpc/>
     **/
    maxKeyLen: number;

    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `ConvictionVoting`'s constants
   **/
  convictionVoting: {
    /**
     * The maximum number of concurrent votes an account may have.
     *
     * Also used to compute weight, an overly large value can lead to extrinsics with large
     * weight estimation: see `delegate` for instance.
     **/
    maxVotes: number;

    /**
     * The minimum period of vote locking.
     *
     * It should be no shorter than enactment period to ensure that in the case of an approval,
     * those successful voters are locked into the consequences that their votes entail.
     **/
    voteLockingPeriod: number;

    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `Referenda`'s constants
   **/
  referenda: {
    /**
     * The minimum amount to be used as a deposit for a public referendum proposal.
     **/
    submissionDeposit: bigint;

    /**
     * Maximum size of the referendum queue for a single track.
     **/
    maxQueued: number;

    /**
     * The number of blocks after submission that a referendum must begin being decided by.
     * Once this passes, then anyone may cancel the referendum.
     **/
    undecidingTimeout: number;

    /**
     * Quantization level for the referendum wakeup scheduler. A higher number will result in
     * fewer storage reads/writes needed for smaller voters, but also result in delays to the
     * automatic referendum status changes. Explicit servicing instructions are unaffected.
     **/
    alarmInterval: number;

    /**
     * Information concerning the different referendum tracks.
     **/
    tracks: Array<[number, PalletReferendaTrackInfo]>;

    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `Origins`'s constants
   **/
  origins: {
    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `Whitelist`'s constants
   **/
  whitelist: {
    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `Dispatcher`'s constants
   **/
  dispatcher: {
    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `AssetRegistry`'s constants
   **/
  assetRegistry: {
    sequentialIdStartAt: number;

    /**
     * The maximum length of a name or symbol stored on-chain.
     **/
    stringLimit: number;

    /**
     * The min length of a name or symbol stored on-chain.
     **/
    minStringLimit: number;

    /**
     * Weight multiplier for `register_external` extrinsic
     **/
    regExternalWeightMultiplier: bigint;

    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `Claims`'s constants
   **/
  claims: {
    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `GenesisHistory`'s constants
   **/
  genesisHistory: {
    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `CollatorRewards`'s constants
   **/
  collatorRewards: {
    /**
     * Reward amount per one collator.
     **/
    rewardPerCollator: bigint;

    /**
     * Reward Asset Id
     **/
    rewardCurrencyId: number;
    rewardsBag: AccountId32;

    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `Omnipool`'s constants
   **/
  omnipool: {
    /**
     * Native Asset ID
     **/
    hdxAssetId: number;

    /**
     * Hub Asset ID
     **/
    hubAssetId: number;

    /**
     * Minimum withdrawal fee
     **/
    minWithdrawalFee: Permill;

    /**
     * Minimum trading limit
     **/
    minimumTradingLimit: bigint;

    /**
     * Minimum pool liquidity which can be added
     **/
    minimumPoolLiquidity: bigint;

    /**
     * Max fraction of asset reserve to sell in single transaction
     **/
    maxInRatio: bigint;

    /**
     * Max fraction of asset reserve to buy in single transaction
     **/
    maxOutRatio: bigint;

    /**
     * Non fungible class id
     **/
    nftCollectionId: bigint;
    burnProtocolFee: Permill;

    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `TransactionPause`'s constants
   **/
  transactionPause: {
    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `Duster`'s constants
   **/
  duster: {
    /**
     * Reward amount
     **/
    reward: bigint;

    /**
     * Native Asset Id
     **/
    nativeCurrencyId: number;

    /**
     * Default account for `reward_account` and `dust_account` in genesis config.
     **/
    treasuryAccountId: AccountId32;

    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `OmnipoolWarehouseLM`'s constants
   **/
  omnipoolWarehouseLM: {
    /**
     * Pallet id.
     **/
    palletId: FrameSupportPalletId;

    /**
     * Treasury account to receive claimed rewards lower than ED
     **/
    treasuryAccountId: AccountId32;

    /**
     * Minimum total rewards to distribute from global farm during liquidity mining.
     **/
    minTotalFarmRewards: bigint;

    /**
     * Minimum number of periods to run liquidity mining program.
     **/
    minPlannedYieldingPeriods: number;

    /**
     * Maximum number of yield farms same LP shares can be re/deposited into. This value always
     * MUST BE >= 1.
     **/
    maxFarmEntriesPerDeposit: number;

    /**
     * Max number of yield farms can exist in global farm. This includes all farms in the
     * storage(active, stopped, terminated).
     **/
    maxYieldFarmsPerGlobalFarm: number;

    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `OmnipoolLiquidityMining`'s constants
   **/
  omnipoolLiquidityMining: {
    /**
     * NFT collection id for liquidity mining's deposit nfts.
     **/
    nftCollectionId: bigint;

    /**
     * Identifier of oracle data soruce
     **/
    oracleSource: FixedBytes<8>;

    /**
     * Oracle's price aggregation period.
     **/
    oraclePeriod: HydradxTraitsOracleOraclePeriod;

    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `OTC`'s constants
   **/
  otc: {
    /**
     * Multiplier used to compute minimal amounts of asset_in and asset_out in an OTC.
     **/
    existentialDepositMultiplier: number;

    /**
     * Fee deducted from amount_out.
     **/
    fee: Permill;

    /**
     * Fee receiver.
     **/
    feeReceiver: AccountId32;

    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `CircuitBreaker`'s constants
   **/
  circuitBreaker: {
    /**
     * The maximum percentage of a pool's liquidity that can be traded in a block.
     * Represented as a non-zero fraction (nominator, denominator) with the max value being 10_000.
     **/
    defaultMaxNetTradeVolumeLimitPerBlock: [number, number];

    /**
     * The maximum percentage of a pool's liquidity that can be added in a block.
     * Represented as an optional non-zero fraction (nominator, denominator) with the max value being 10_000.
     * If set to None, the limits are not enforced.
     **/
    defaultMaxAddLiquidityLimitPerBlock: [number, number] | undefined;

    /**
     * The maximum percentage of a pool's liquidity that can be removed in a block.
     * Represented as an optional non-zero fraction (nominator, denominator) with the max value being 10_000.
     * If set to None, the limits are not enforced.
     **/
    defaultMaxRemoveLiquidityLimitPerBlock: [number, number] | undefined;

    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `Router`'s constants
   **/
  router: {
    /**
     * Native Asset Id
     **/
    nativeAssetId: number;

    /**
     * Oracle's price aggregation period.
     **/
    oraclePeriod: HydradxTraitsOracleOraclePeriod;

    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `DynamicFees`'s constants
   **/
  dynamicFees: {
    assetFeeParameters: PalletDynamicFeesFeeParams;
    protocolFeeParameters: PalletDynamicFeesFeeParams;

    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `Staking`'s constants
   **/
  staking: {
    /**
     * Staking period length in blocks.
     **/
    periodLength: number;

    /**
     * Pallet id.
     **/
    palletId: FrameSupportPalletId;

    /**
     * Native Asset ID.
     **/
    nativeAssetId: number;

    /**
     * Min amount user must stake.
     **/
    minStake: bigint;

    /**
     * Weight of the time points in total points calculations.
     **/
    timePointsWeight: Permill;

    /**
     * Weight of the action points in total points calculations.
     **/
    actionPointsWeight: Perbill;

    /**
     * Number of time points users receive for each period.
     **/
    timePointsPerPeriod: number;

    /**
     * Number of periods user can't claim rewards for. User can exit but won't receive any rewards.
     * If he stay longer than `UnclaimablePeriods` he will receive rewards also for these periods.
     **/
    unclaimablePeriods: bigint;

    /**
     * Weight of the actual stake in slash points calculation. Bigger the value lower the calculated slash points.
     **/
    currentStakeWeight: number;

    /**
     * Max amount of votes the user can have at any time.
     **/
    maxVotes: number;

    /**
     * NFT collection id.
     **/
    nftCollectionId: bigint;

    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `Stableswap`'s constants
   **/
  stableswap: {
    /**
     * Minimum pool liquidity
     **/
    minPoolLiquidity: bigint;

    /**
     * Minimum trading amount
     **/
    minTradingLimit: bigint;

    /**
     * Amplification inclusive range. Pool's amp can be selected from the range only.
     **/
    amplificationRange: { start: NonZeroU16; end: NonZeroU16 };

    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `Bonds`'s constants
   **/
  bonds: {
    /**
     * The pallet id, used for deriving its sovereign account ID.
     **/
    palletId: FrameSupportPalletId;

    /**
     * Protocol fee.
     **/
    protocolFee: Permill;

    /**
     * Protocol fee receiver.
     **/
    feeReceiver: AccountId32;

    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `OtcSettlements`'s constants
   **/
  otcSettlements: {
    /**
     * Account who receives the profit.
     **/
    profitReceiver: AccountId32;

    /**
     * Minimum profit in terms of percentage.
     **/
    minProfitPercentage: Perbill;

    /**
     * Determines when we consider an arbitrage as closed.
     **/
    pricePrecision: FixedU128;

    /**
     * Minimum trading limit.
     **/
    minTradingLimit: bigint;

    /**
     * Maximum number of iterations used in the binary search algorithm to find the trade amount.
     **/
    maxIterations: number;

    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `LBP`'s constants
   **/
  lbp: {
    /**
     * Minimum trading limit, sole purpose of this is to keep the math working
     **/
    minTradingLimit: bigint;

    /**
     * Minimum pool liquidity, sole purpose of this is to keep the math working
     **/
    minPoolLiquidity: bigint;

    /**
     * Max fraction of pool to sell in single transaction
     **/
    maxInRatio: bigint;

    /**
     * Max fraction of pool to buy in single transaction
     **/
    maxOutRatio: bigint;
    repayFee: [number, number];

    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `XYK`'s constants
   **/
  xyk: {
    /**
     * Native Asset Id
     **/
    nativeAssetId: number;

    /**
     * Trading fee rate
     **/
    getExchangeFee: [number, number];

    /**
     * Minimum trading limit
     **/
    minTradingLimit: bigint;

    /**
     * Minimum pool liquidity
     **/
    minPoolLiquidity: bigint;

    /**
     * Max fraction of pool to sell in single transaction
     **/
    maxInRatio: bigint;

    /**
     * Max fraction of pool to buy in single transaction
     **/
    maxOutRatio: bigint;

    /**
     * Oracle source identifier for this pallet.
     **/
    oracleSource: FixedBytes<8>;

    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `Referrals`'s constants
   **/
  referrals: {
    /**
     * ID of an asset that is used to distribute rewards in.
     **/
    rewardAsset: number;

    /**
     * Pallet id. Determines account which holds accumulated rewards in various assets.
     **/
    palletId: FrameSupportPalletId;

    /**
     * Registration fee details.
     * (ID of an asset which fee is to be paid in, Amount, Beneficiary account)
     **/
    registrationFee: [number, bigint, AccountId32];

    /**
     * Maximum referral code length.
     **/
    codeLength: number;

    /**
     * Minimum referral code length.
     **/
    minCodeLength: number;

    /**
     * Seed amount that was sent to the reward pot.
     **/
    seedNativeAmount: bigint;

    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `Liquidation`'s constants
   **/
  liquidation: {
    /**
     * The gas limit for the execution of the liquidation call.
     **/
    gasLimit: bigint;

    /**
     * Account who receives the profit.
     **/
    profitReceiver: AccountId32;

    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `Tokens`'s constants
   **/
  tokens: {
    maxLocks: number;

    /**
     * The maximum number of named reserves that can exist on an account.
     **/
    maxReserves: number;

    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `Currencies`'s constants
   **/
  currencies: {
    reserveAccount: AccountId32;
    getNativeCurrencyId: number;

    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `Vesting`'s constants
   **/
  vesting: {
    /**
     * The minimum amount transferred to call `vested_transfer`.
     **/
    minVestedTransfer: bigint;

    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `EVM`'s constants
   **/
  evm: {
    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `EVMChainId`'s constants
   **/
  evmChainId: {
    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `Ethereum`'s constants
   **/
  ethereum: {
    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `EVMAccounts`'s constants
   **/
  evmAccounts: {
    /**
     * Fee multiplier for the binding of addresses.
     **/
    feeMultiplier: number;

    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `DynamicEvmFee`'s constants
   **/
  dynamicEvmFee: {
    /**
     * WETH Asset Id
     **/
    wethAssetId: number;

    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `XYKLiquidityMining`'s constants
   **/
  xykLiquidityMining: {
    /**
     * NFT collection id for liquidity mining's deposit nfts.
     **/
    nftCollectionId: bigint;

    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `XYKWarehouseLM`'s constants
   **/
  xykWarehouseLM: {
    /**
     * Pallet id.
     **/
    palletId: FrameSupportPalletId;

    /**
     * Treasury account to receive claimed rewards lower than ED
     **/
    treasuryAccountId: AccountId32;

    /**
     * Minimum total rewards to distribute from global farm during liquidity mining.
     **/
    minTotalFarmRewards: bigint;

    /**
     * Minimum number of periods to run liquidity mining program.
     **/
    minPlannedYieldingPeriods: number;

    /**
     * Maximum number of yield farms same LP shares can be re/deposited into. This value always
     * MUST BE >= 1.
     **/
    maxFarmEntriesPerDeposit: number;

    /**
     * Max number of yield farms can exist in global farm. This includes all farms in the
     * storage(active, stopped, terminated).
     **/
    maxYieldFarmsPerGlobalFarm: number;

    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `RelayChainInfo`'s constants
   **/
  relayChainInfo: {
    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `DCA`'s constants
   **/
  dca: {
    /**
     * Max price difference allowed between blocks
     **/
    maxPriceDifferenceBetweenBlocks: Permill;

    /**
     * Max configurable price difference allowed between blocks
     **/
    maxConfigurablePriceDifferenceBetweenBlocks: Permill;

    /**
     * The number of max schedules to be executed per block
     **/
    maxSchedulePerBlock: number;

    /**
     * The number of max retries in case of trade limit error
     **/
    maxNumberOfRetriesOnError: number;

    /**
     * Minimal period between executions
     **/
    minimalPeriod: number;

    /**
     * Chance of the random rescheduling
     **/
    bumpChance: Percent;

    /**
     * Minimum trading limit for a single trade
     **/
    minimumTradingLimit: bigint;

    /**
     * Native Asset Id
     **/
    nativeAssetId: number;

    /**
     * Polkadot Native Asset Id (DOT)
     **/
    polkadotNativeAssetId: number;

    /**
     * Minimum budget to be able to schedule a DCA, specified in native currency
     **/
    minBudgetInNativeCurrency: bigint;

    /**
     * The fee receiver for transaction fees
     **/
    feeReceiver: AccountId32;

    /**
     * Named reserve identifier to store named reserves for orders of each users
     **/
    namedReserveId: FixedBytes<8>;

    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `Scheduler`'s constants
   **/
  scheduler: {
    /**
     * The maximum weight that may be scheduled per block for any dispatchables.
     **/
    maximumWeight: SpWeightsWeightV2Weight;

    /**
     * The maximum number of scheduled calls in the queue for a single block.
     *
     * NOTE:
     * + Dependent pallets' benchmarks might require a higher limit for the setting. Set a
     * higher limit under `runtime-benchmarks` feature.
     **/
    maxScheduledPerBlock: number;

    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `ParachainSystem`'s constants
   **/
  parachainSystem: {
    /**
     * Returns the parachain ID we are running with.
     **/
    selfParaId: PolkadotParachainPrimitivesPrimitivesId;

    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `ParachainInfo`'s constants
   **/
  parachainInfo: {
    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `PolkadotXcm`'s constants
   **/
  polkadotXcm: {
    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `CumulusXcm`'s constants
   **/
  cumulusXcm: {
    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `XcmpQueue`'s constants
   **/
  xcmpQueue: {
    /**
     * The maximum number of inbound XCMP channels that can be suspended simultaneously.
     *
     * Any further channel suspensions will fail and messages may get dropped without further
     * notice. Choosing a high value (1000) is okay; the trade-off that is described in
     * [`InboundXcmpSuspended`] still applies at that scale.
     **/
    maxInboundSuspended: number;

    /**
     * Maximal number of outbound XCMP channels that can have messages queued at the same time.
     *
     * If this is reached, then no further messages can be sent to channels that do not yet
     * have a message queued. This should be set to the expected maximum of outbound channels
     * which is determined by [`Self::ChannelInfo`]. It is important to set this large enough,
     * since otherwise the congestion control protocol will not work as intended and messages
     * may be dropped. This value increases the PoV and should therefore not be picked too
     * high. Governance needs to pay attention to not open more channels than this value.
     **/
    maxActiveOutboundChannels: number;

    /**
     * The maximal page size for HRMP message pages.
     *
     * A lower limit can be set dynamically, but this is the hard-limit for the PoV worst case
     * benchmarking. The limit for the size of a message is slightly below this, since some
     * overhead is incurred for encoding the format.
     **/
    maxPageSize: number;

    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `MessageQueue`'s constants
   **/
  messageQueue: {
    /**
     * The size of the page; this implies the maximum message size which can be sent.
     *
     * A good value depends on the expected message sizes, their weights, the weight that is
     * available for processing them and the maximal needed message size. The maximal message
     * size is slightly lower than this as defined by [`MaxMessageLenOf`].
     **/
    heapSize: number;

    /**
     * The maximum number of stale pages (i.e. of overweight messages) allowed before culling
     * can happen. Once there are more stale pages than this, then historical pages may be
     * dropped, even if they contain unprocessed overweight messages.
     **/
    maxStale: number;

    /**
     * The amount of weight (if any) which should be provided to the message queue for
     * servicing enqueued items `on_initialize`.
     *
     * This may be legitimately `None` in the case that you will call
     * `ServiceQueues::service_queues` manually or set [`Self::IdleMaxServiceWeight`] to have
     * it run in `on_idle`.
     **/
    serviceWeight: SpWeightsWeightV2Weight | undefined;

    /**
     * The maximum amount of weight (if any) to be used from remaining weight `on_idle` which
     * should be provided to the message queue for servicing enqueued items `on_idle`.
     * Useful for parachains to process messages at the same block they are received.
     *
     * If `None`, it will not call `ServiceQueues::service_queues` in `on_idle`.
     **/
    idleMaxServiceWeight: SpWeightsWeightV2Weight | undefined;

    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `OrmlXcm`'s constants
   **/
  ormlXcm: {
    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `XTokens`'s constants
   **/
  xTokens: {
    /**
     * Self chain location.
     **/
    selfLocation: StagingXcmV4Location;

    /**
     * Base XCM weight.
     *
     * The actually weight for an XCM message is `T::BaseXcmWeight +
     * T::Weigher::weight(&msg)`.
     **/
    baseXcmWeight: SpWeightsWeightV2Weight;

    /**
     * The id of the RateLimiter.
     **/
    rateLimiterId: [];

    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `UnknownTokens`'s constants
   **/
  unknownTokens: {
    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `Authorship`'s constants
   **/
  authorship: {
    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `CollatorSelection`'s constants
   **/
  collatorSelection: {
    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `Session`'s constants
   **/
  session: {
    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `Aura`'s constants
   **/
  aura: {
    /**
     * The slot duration Aura should run with, expressed in milliseconds.
     * The effective value of this type should not change while the chain is running.
     *
     * For backwards compatibility either use [`MinimumPeriodTimesTwo`] or a const.
     **/
    slotDuration: bigint;

    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `AuraExt`'s constants
   **/
  auraExt: {
    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `EmaOracle`'s constants
   **/
  emaOracle: {
    /**
     * Maximum allowed percentage difference for bifrost oracle price update
     **/
    maxAllowedPriceDifference: Permill;

    /**
     * Maximum number of unique oracle entries expected in one block.
     **/
    maxUniqueEntries: number;

    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `Broadcast`'s constants
   **/
  broadcast: {
    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
}
