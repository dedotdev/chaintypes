// Generated by dedot cli

import type { GenericRuntimeApis, GenericRuntimeApiMethod, RpcVersion } from 'dedot/types';
import type {
  Result,
  H256,
  RuntimeVersion,
  Header,
  DispatchError,
  Bytes,
  BytesLike,
  AccountId20Like,
  H160,
  U256,
  Permill,
} from 'dedot/codecs';
import type {
  SpRuntimeTransactionValidityValidTransaction,
  SpRuntimeTransactionValidityTransactionValidityError,
  SpRuntimeTransactionValidityTransactionSource,
  FpSelfContainedUncheckedExtrinsic,
  SpConsensusSlotsSlot,
  SpRuntimeBlock,
  SpCoreOpaqueMetadata,
  SpInherentsInherentData,
  SpInherentsCheckInherentsResult,
  SpCoreCryptoKeyTypeId,
  EthereumTransactionTransactionV2,
  MoonbeamRpcPrimitivesTxpoolTxPoolResponse,
  EvmBackendBasic,
  FpEvmExecutionInfoV2,
  FpEvmExecutionInfoV2H160,
  EthereumBlock,
  EthereumReceiptReceiptV3,
  FpRpcTransactionStatus,
  PalletTransactionPaymentRuntimeDispatchInfo,
  PalletTransactionPaymentFeeDetails,
  SpWeightsWeightV2Weight,
  NimbusPrimitivesNimbusCryptoPublic,
  CumulusPrimitivesCoreCollationInfo,
  SessionKeysPrimitivesVrfVrfCryptoPublic,
} from './types';

export interface RuntimeApis<Rv extends RpcVersion> extends GenericRuntimeApis<Rv> {
  /**
   * @runtimeapi: TaggedTransactionQueue - 0xd2bc9897eed08f15
   **/
  taggedTransactionQueue: {
    /**
     * Validate the transaction.
     *
     * This method is invoked by the transaction pool to learn details about given transaction.
     * The implementation should make sure to verify the correctness of the transaction
     * against current state. The given `block_hash` corresponds to the hash of the block
     * that is used as current state.
     *
     * Note that this call may be performed by the pool multiple times and transactions
     * might be verified in any possible order.
     *
     * @callname: TaggedTransactionQueue_validate_transaction
     * @param {SpRuntimeTransactionValidityTransactionSource} source
     * @param {FpSelfContainedUncheckedExtrinsic} tx
     * @param {H256} block_hash
     **/
    validateTransaction: GenericRuntimeApiMethod<
      Rv,
      (
        source: SpRuntimeTransactionValidityTransactionSource,
        tx: FpSelfContainedUncheckedExtrinsic,
        blockHash: H256,
      ) => Promise<
        Result<SpRuntimeTransactionValidityValidTransaction, SpRuntimeTransactionValidityTransactionValidityError>
      >
    >;

    /**
     * Generic runtime api call
     **/
    [method: string]: GenericRuntimeApiMethod<Rv>;
  };
  /**
   * @runtimeapi: UnincludedSegmentApi - 0xd0399cd053adda2b
   **/
  unincludedSegmentApi: {
    /**
     * Whether it is legal to extend the chain, assuming the given block is the most
     * recently included one as-of the relay parent that will be built against, and
     * the given slot.
     *
     * This should be consistent with the logic the runtime uses when validating blocks to
     * avoid issues.
     *
     * When the unincluded segment is empty, i.e. `included_hash == at`, where at is the block
     * whose state we are querying against, this must always return `true` as long as the slot
     * is more recent than the included block itself.
     *
     * @callname: UnincludedSegmentApi_can_build_upon
     * @param {H256} included_hash
     * @param {SpConsensusSlotsSlot} slot
     **/
    canBuildUpon: GenericRuntimeApiMethod<Rv, (includedHash: H256, slot: SpConsensusSlotsSlot) => Promise<boolean>>;

    /**
     * Generic runtime api call
     **/
    [method: string]: GenericRuntimeApiMethod<Rv>;
  };
  /**
   * @runtimeapi: Core - 0xdf6acb689907609b
   **/
  core: {
    /**
     * Returns the version of the runtime.
     *
     * @callname: Core_version
     **/
    version: GenericRuntimeApiMethod<Rv, () => Promise<RuntimeVersion>>;

    /**
     * Execute the given block.
     *
     * @callname: Core_execute_block
     * @param {SpRuntimeBlock} block
     **/
    executeBlock: GenericRuntimeApiMethod<Rv, (block: SpRuntimeBlock) => Promise<[]>>;

    /**
     * Initialize a block with the given header.
     *
     * @callname: Core_initialize_block
     * @param {Header} header
     **/
    initializeBlock: GenericRuntimeApiMethod<Rv, (header: Header) => Promise<[]>>;

    /**
     * Generic runtime api call
     **/
    [method: string]: GenericRuntimeApiMethod<Rv>;
  };
  /**
   * @runtimeapi: Metadata - 0x37e397fc7c91f5e4
   **/
  metadata: {
    /**
     * Returns the metadata of a runtime.
     *
     * @callname: Metadata_metadata
     **/
    metadata: GenericRuntimeApiMethod<Rv, () => Promise<SpCoreOpaqueMetadata>>;

    /**
     * Returns the metadata at a given version.
     *
     * If the given `version` isn't supported, this will return `None`.
     * Use [`Self::metadata_versions`] to find out about supported metadata version of the runtime.
     *
     * @callname: Metadata_metadata_at_version
     * @param {number} version
     **/
    metadataAtVersion: GenericRuntimeApiMethod<Rv, (version: number) => Promise<SpCoreOpaqueMetadata | undefined>>;

    /**
     * Returns the supported metadata versions.
     *
     * This can be used to call `metadata_at_version`.
     *
     * @callname: Metadata_metadata_versions
     **/
    metadataVersions: GenericRuntimeApiMethod<Rv, () => Promise<Array<number>>>;

    /**
     * Generic runtime api call
     **/
    [method: string]: GenericRuntimeApiMethod<Rv>;
  };
  /**
   * @runtimeapi: BlockBuilder - 0x40fe3ad401f8959a
   **/
  blockBuilder: {
    /**
     * Apply the given extrinsic.
     *
     * Returns an inclusion outcome which specifies if this extrinsic is included in
     * this block or not.
     *
     * @callname: BlockBuilder_apply_extrinsic
     * @param {FpSelfContainedUncheckedExtrinsic} extrinsic
     **/
    applyExtrinsic: GenericRuntimeApiMethod<
      Rv,
      (
        extrinsic: FpSelfContainedUncheckedExtrinsic,
      ) => Promise<Result<Result<[], DispatchError>, SpRuntimeTransactionValidityTransactionValidityError>>
    >;

    /**
     * Finish the current block.
     *
     * @callname: BlockBuilder_finalize_block
     **/
    finalizeBlock: GenericRuntimeApiMethod<Rv, () => Promise<Header>>;

    /**
     * Generate inherent extrinsics. The inherent data will vary from chain to chain.
     *
     * @callname: BlockBuilder_inherent_extrinsics
     * @param {SpInherentsInherentData} inherent
     **/
    inherentExtrinsics: GenericRuntimeApiMethod<
      Rv,
      (inherent: SpInherentsInherentData) => Promise<Array<FpSelfContainedUncheckedExtrinsic>>
    >;

    /**
     * Check that the inherents are valid. The inherent data will vary from chain to chain.
     *
     * @callname: BlockBuilder_check_inherents
     * @param {SpRuntimeBlock} block
     * @param {SpInherentsInherentData} data
     **/
    checkInherents: GenericRuntimeApiMethod<
      Rv,
      (block: SpRuntimeBlock, data: SpInherentsInherentData) => Promise<SpInherentsCheckInherentsResult>
    >;

    /**
     * Generic runtime api call
     **/
    [method: string]: GenericRuntimeApiMethod<Rv>;
  };
  /**
   * @runtimeapi: OffchainWorkerApi - 0xf78b278be53f454c
   **/
  offchainWorkerApi: {
    /**
     * Starts the off-chain task for given block header.
     *
     * @callname: OffchainWorkerApi_offchain_worker
     * @param {Header} header
     **/
    offchainWorker: GenericRuntimeApiMethod<Rv, (header: Header) => Promise<[]>>;

    /**
     * Generic runtime api call
     **/
    [method: string]: GenericRuntimeApiMethod<Rv>;
  };
  /**
   * @runtimeapi: SessionKeys - 0xab3c0572291feb8b
   **/
  sessionKeys: {
    /**
     * Generate a set of session keys with optionally using the given seed.
     * The keys should be stored within the keystore exposed via runtime
     * externalities.
     *
     * The seed needs to be a valid `utf8` string.
     *
     * Returns the concatenated SCALE encoded public keys.
     *
     * @callname: SessionKeys_generate_session_keys
     * @param {BytesLike | undefined} seed
     **/
    generateSessionKeys: GenericRuntimeApiMethod<Rv, (seed?: BytesLike | undefined) => Promise<Bytes>>;

    /**
     * Decode the given public session keys.
     *
     * Returns the list of public raw public keys + key type.
     *
     * @callname: SessionKeys_decode_session_keys
     * @param {BytesLike} encoded
     **/
    decodeSessionKeys: GenericRuntimeApiMethod<
      Rv,
      (encoded: BytesLike) => Promise<Array<[Bytes, SpCoreCryptoKeyTypeId]> | undefined>
    >;

    /**
     * Generic runtime api call
     **/
    [method: string]: GenericRuntimeApiMethod<Rv>;
  };
  /**
   * @runtimeapi: GenesisBuilder - 0xfbc577b9d747efd6
   **/
  genesisBuilder: {
    /**
     * Creates the default `GenesisConfig` and returns it as a JSON blob.
     *
     * This function instantiates the default `GenesisConfig` struct for the runtime and serializes it into a JSON
     * blob. It returns a `Vec<u8>` containing the JSON representation of the default `GenesisConfig`.
     *
     * @callname: GenesisBuilder_create_default_config
     **/
    createDefaultConfig: GenericRuntimeApiMethod<Rv, () => Promise<Bytes>>;

    /**
     * Build `GenesisConfig` from a JSON blob not using any defaults and store it in the storage.
     *
     * This function deserializes the full `GenesisConfig` from the given JSON blob and puts it into the storage.
     * If the provided JSON blob is incorrect or incomplete or the deserialization fails, an error is returned.
     * It is recommended to log any errors encountered during the process.
     *
     * Please note that provided json blob must contain all `GenesisConfig` fields, no defaults will be used.
     *
     * @callname: GenesisBuilder_build_config
     * @param {BytesLike} json
     **/
    buildConfig: GenericRuntimeApiMethod<Rv, (json: BytesLike) => Promise<Result<[], string>>>;

    /**
     * Generic runtime api call
     **/
    [method: string]: GenericRuntimeApiMethod<Rv>;
  };
  /**
   * @runtimeapi: AccountNonceApi - 0xbc9d89904f5b923f
   **/
  accountNonceApi: {
    /**
     * Get current account nonce of given `AccountId`.
     *
     * @callname: AccountNonceApi_account_nonce
     * @param {AccountId20Like} account
     **/
    accountNonce: GenericRuntimeApiMethod<Rv, (account: AccountId20Like) => Promise<number>>;

    /**
     * Generic runtime api call
     **/
    [method: string]: GenericRuntimeApiMethod<Rv>;
  };
  /**
   * @runtimeapi: DebugRuntimeApi - 0xbd78255d4feeea1f
   **/
  debugRuntimeApi: {
    /**
     *
     * @callname: DebugRuntimeApi_trace_transaction
     * @param {Array<FpSelfContainedUncheckedExtrinsic>} extrinsics
     * @param {EthereumTransactionTransactionV2} transaction
     * @param {Header} header
     **/
    traceTransaction: GenericRuntimeApiMethod<
      Rv,
      (
        extrinsics: Array<FpSelfContainedUncheckedExtrinsic>,
        transaction: EthereumTransactionTransactionV2,
        header: Header,
      ) => Promise<Result<[], DispatchError>>
    >;

    /**
     *
     * @callname: DebugRuntimeApi_trace_block
     * @param {Array<FpSelfContainedUncheckedExtrinsic>} extrinsics
     * @param {Array<H256>} known_transactions
     * @param {Header} header
     **/
    traceBlock: GenericRuntimeApiMethod<
      Rv,
      (
        extrinsics: Array<FpSelfContainedUncheckedExtrinsic>,
        knownTransactions: Array<H256>,
        header: Header,
      ) => Promise<Result<[], DispatchError>>
    >;

    /**
     * Generic runtime api call
     **/
    [method: string]: GenericRuntimeApiMethod<Rv>;
  };
  /**
   * @runtimeapi: TxPoolRuntimeApi - 0xa33d43f58731ad84
   **/
  txPoolRuntimeApi: {
    /**
     *
     * @callname: TxPoolRuntimeApi_extrinsic_filter
     * @param {Array<FpSelfContainedUncheckedExtrinsic>} xt_ready
     * @param {Array<FpSelfContainedUncheckedExtrinsic>} xt_future
     **/
    extrinsicFilter: GenericRuntimeApiMethod<
      Rv,
      (
        xtReady: Array<FpSelfContainedUncheckedExtrinsic>,
        xtFuture: Array<FpSelfContainedUncheckedExtrinsic>,
      ) => Promise<MoonbeamRpcPrimitivesTxpoolTxPoolResponse>
    >;

    /**
     * Generic runtime api call
     **/
    [method: string]: GenericRuntimeApiMethod<Rv>;
  };
  /**
   * @runtimeapi: EthereumRuntimeRPCApi - 0x582211f65bb14b89
   **/
  ethereumRuntimeRPCApi: {
    /**
     * Returns runtime defined pallet_evm::ChainId.
     *
     * @callname: EthereumRuntimeRPCApi_chain_id
     **/
    chainId: GenericRuntimeApiMethod<Rv, () => Promise<bigint>>;

    /**
     * Returns pallet_evm::Accounts by address.
     *
     * @callname: EthereumRuntimeRPCApi_account_basic
     * @param {H160} address
     **/
    accountBasic: GenericRuntimeApiMethod<Rv, (address: H160) => Promise<EvmBackendBasic>>;

    /**
     * Returns FixedGasPrice::min_gas_price
     *
     * @callname: EthereumRuntimeRPCApi_gas_price
     **/
    gasPrice: GenericRuntimeApiMethod<Rv, () => Promise<U256>>;

    /**
     * For a given account address, returns pallet_evm::AccountCodes.
     *
     * @callname: EthereumRuntimeRPCApi_account_code_at
     * @param {H160} address
     **/
    accountCodeAt: GenericRuntimeApiMethod<Rv, (address: H160) => Promise<Bytes>>;

    /**
     * Returns the converted FindAuthor::find_author authority id.
     *
     * @callname: EthereumRuntimeRPCApi_author
     **/
    author: GenericRuntimeApiMethod<Rv, () => Promise<H160>>;

    /**
     * For a given account address and index, returns pallet_evm::AccountStorages.
     *
     * @callname: EthereumRuntimeRPCApi_storage_at
     * @param {H160} address
     * @param {U256} index
     **/
    storageAt: GenericRuntimeApiMethod<Rv, (address: H160, index: U256) => Promise<H256>>;

    /**
     *
     * @callname: EthereumRuntimeRPCApi_call
     * @param {H160} from
     * @param {H160} to
     * @param {BytesLike} data
     * @param {U256} value
     * @param {U256} gas_limit
     * @param {U256 | undefined} max_fee_per_gas
     * @param {U256 | undefined} max_priority_fee_per_gas
     * @param {U256 | undefined} nonce
     * @param {boolean} estimate
     * @param {Array<[H160, Array<H256>]> | undefined} access_list
     **/
    call: GenericRuntimeApiMethod<
      Rv,
      (
        from: H160,
        to: H160,
        data: BytesLike,
        value: U256,
        gasLimit: U256,
        maxFeePerGas: U256 | undefined,
        maxPriorityFeePerGas: U256 | undefined,
        nonce: U256 | undefined,
        estimate: boolean,
        accessList?: Array<[H160, Array<H256>]> | undefined,
      ) => Promise<Result<FpEvmExecutionInfoV2, DispatchError>>
    >;

    /**
     *
     * @callname: EthereumRuntimeRPCApi_create
     * @param {H160} from
     * @param {BytesLike} data
     * @param {U256} value
     * @param {U256} gas_limit
     * @param {U256 | undefined} max_fee_per_gas
     * @param {U256 | undefined} max_priority_fee_per_gas
     * @param {U256 | undefined} nonce
     * @param {boolean} estimate
     * @param {Array<[H160, Array<H256>]> | undefined} access_list
     **/
    create: GenericRuntimeApiMethod<
      Rv,
      (
        from: H160,
        data: BytesLike,
        value: U256,
        gasLimit: U256,
        maxFeePerGas: U256 | undefined,
        maxPriorityFeePerGas: U256 | undefined,
        nonce: U256 | undefined,
        estimate: boolean,
        accessList?: Array<[H160, Array<H256>]> | undefined,
      ) => Promise<Result<FpEvmExecutionInfoV2H160, DispatchError>>
    >;

    /**
     * Return the current block.
     *
     * @callname: EthereumRuntimeRPCApi_current_block
     **/
    currentBlock: GenericRuntimeApiMethod<Rv, () => Promise<EthereumBlock | undefined>>;

    /**
     * Return the current receipt.
     *
     * @callname: EthereumRuntimeRPCApi_current_receipts
     **/
    currentReceipts: GenericRuntimeApiMethod<Rv, () => Promise<Array<EthereumReceiptReceiptV3> | undefined>>;

    /**
     * Return the current transaction status.
     *
     * @callname: EthereumRuntimeRPCApi_current_transaction_statuses
     **/
    currentTransactionStatuses: GenericRuntimeApiMethod<Rv, () => Promise<Array<FpRpcTransactionStatus> | undefined>>;

    /**
     *
     * @callname: EthereumRuntimeRPCApi_current_all
     **/
    currentAll: GenericRuntimeApiMethod<
      Rv,
      () => Promise<
        [
          EthereumBlock | undefined,
          Array<EthereumReceiptReceiptV3> | undefined,
          Array<FpRpcTransactionStatus> | undefined,
        ]
      >
    >;

    /**
     * Receives a `Vec<OpaqueExtrinsic>` and filters all the ethereum transactions.
     *
     * @callname: EthereumRuntimeRPCApi_extrinsic_filter
     * @param {Array<FpSelfContainedUncheckedExtrinsic>} xts
     **/
    extrinsicFilter: GenericRuntimeApiMethod<
      Rv,
      (xts: Array<FpSelfContainedUncheckedExtrinsic>) => Promise<Array<EthereumTransactionTransactionV2>>
    >;

    /**
     * Return the elasticity multiplier.
     *
     * @callname: EthereumRuntimeRPCApi_elasticity
     **/
    elasticity: GenericRuntimeApiMethod<Rv, () => Promise<Permill | undefined>>;

    /**
     * Used to determine if gas limit multiplier for non-transactional calls (eth_call/estimateGas)
     * is supported.
     *
     * @callname: EthereumRuntimeRPCApi_gas_limit_multiplier_support
     **/
    gasLimitMultiplierSupport: GenericRuntimeApiMethod<Rv, () => Promise<[]>>;

    /**
     * Return the pending block.
     *
     * @callname: EthereumRuntimeRPCApi_pending_block
     * @param {Array<FpSelfContainedUncheckedExtrinsic>} xts
     **/
    pendingBlock: GenericRuntimeApiMethod<
      Rv,
      (
        xts: Array<FpSelfContainedUncheckedExtrinsic>,
      ) => Promise<[EthereumBlock | undefined, Array<FpRpcTransactionStatus> | undefined]>
    >;

    /**
     * initialize the pending block
     *
     * @callname: EthereumRuntimeRPCApi_initialize_pending_block
     * @param {Header} header
     **/
    initializePendingBlock: GenericRuntimeApiMethod<Rv, (header: Header) => Promise<[]>>;

    /**
     * Generic runtime api call
     **/
    [method: string]: GenericRuntimeApiMethod<Rv>;
  };
  /**
   * @runtimeapi: ConvertTransactionRuntimeApi - 0xe65b00e46cedd0aa
   **/
  convertTransactionRuntimeApi: {
    /**
     *
     * @callname: ConvertTransactionRuntimeApi_convert_transaction
     * @param {EthereumTransactionTransactionV2} transaction
     **/
    convertTransaction: GenericRuntimeApiMethod<
      Rv,
      (transaction: EthereumTransactionTransactionV2) => Promise<FpSelfContainedUncheckedExtrinsic>
    >;

    /**
     * Generic runtime api call
     **/
    [method: string]: GenericRuntimeApiMethod<Rv>;
  };
  /**
   * @runtimeapi: TransactionPaymentApi - 0x37c8bb1350a9a2a8
   **/
  transactionPaymentApi: {
    /**
     *
     * @callname: TransactionPaymentApi_query_info
     * @param {FpSelfContainedUncheckedExtrinsic} uxt
     * @param {number} len
     **/
    queryInfo: GenericRuntimeApiMethod<
      Rv,
      (uxt: FpSelfContainedUncheckedExtrinsic, len: number) => Promise<PalletTransactionPaymentRuntimeDispatchInfo>
    >;

    /**
     *
     * @callname: TransactionPaymentApi_query_fee_details
     * @param {FpSelfContainedUncheckedExtrinsic} uxt
     * @param {number} len
     **/
    queryFeeDetails: GenericRuntimeApiMethod<
      Rv,
      (uxt: FpSelfContainedUncheckedExtrinsic, len: number) => Promise<PalletTransactionPaymentFeeDetails>
    >;

    /**
     *
     * @callname: TransactionPaymentApi_query_weight_to_fee
     * @param {SpWeightsWeightV2Weight} weight
     **/
    queryWeightToFee: GenericRuntimeApiMethod<Rv, (weight: SpWeightsWeightV2Weight) => Promise<bigint>>;

    /**
     *
     * @callname: TransactionPaymentApi_query_length_to_fee
     * @param {number} length
     **/
    queryLengthToFee: GenericRuntimeApiMethod<Rv, (length: number) => Promise<bigint>>;

    /**
     * Generic runtime api call
     **/
    [method: string]: GenericRuntimeApiMethod<Rv>;
  };
  /**
   * @runtimeapi: NimbusApi - 0x2aa62120049dd2d2
   **/
  nimbusApi: {
    /**
     *
     * @callname: NimbusApi_can_author
     * @param {NimbusPrimitivesNimbusCryptoPublic} author
     * @param {number} relay_parent
     * @param {Header} parent_header
     **/
    canAuthor: GenericRuntimeApiMethod<
      Rv,
      (author: NimbusPrimitivesNimbusCryptoPublic, relayParent: number, parentHeader: Header) => Promise<boolean>
    >;

    /**
     * Generic runtime api call
     **/
    [method: string]: GenericRuntimeApiMethod<Rv>;
  };
  /**
   * @runtimeapi: CollectCollationInfo - 0xea93e3f16f3d6962
   **/
  collectCollationInfo: {
    /**
     * Collect information about a collation.
     *
     * The given `header` is the header of the built block for that
     * we are collecting the collation info for.
     *
     * @callname: CollectCollationInfo_collect_collation_info
     * @param {Header} header
     **/
    collectCollationInfo: GenericRuntimeApiMethod<Rv, (header: Header) => Promise<CumulusPrimitivesCoreCollationInfo>>;

    /**
     * Generic runtime api call
     **/
    [method: string]: GenericRuntimeApiMethod<Rv>;
  };
  /**
   * @runtimeapi: VrfApi - 0xba8173bf23b2e6f8
   **/
  vrfApi: {
    /**
     *
     * @callname: VrfApi_get_last_vrf_output
     **/
    getLastVrfOutput: GenericRuntimeApiMethod<Rv, () => Promise<H256 | undefined>>;

    /**
     *
     * @callname: VrfApi_vrf_key_lookup
     * @param {NimbusPrimitivesNimbusCryptoPublic} nimbus_id
     **/
    vrfKeyLookup: GenericRuntimeApiMethod<
      Rv,
      (nimbusId: NimbusPrimitivesNimbusCryptoPublic) => Promise<SessionKeysPrimitivesVrfVrfCryptoPublic | undefined>
    >;

    /**
     * Generic runtime api call
     **/
    [method: string]: GenericRuntimeApiMethod<Rv>;
  };
}
