// Generated by dedot cli

import type { GenericChainErrors, GenericPalletError, RpcVersion } from 'dedot/types';

export interface ChainErrors<Rv extends RpcVersion> extends GenericChainErrors<Rv> {
  /**
   * Pallet `System`'s errors
   **/
  system: {
    /**
     * The name of specification does not match between the current runtime
     * and the new runtime.
     **/
    InvalidSpecName: GenericPalletError<Rv>;

    /**
     * The specification version is not allowed to decrease between the current runtime
     * and the new runtime.
     **/
    SpecVersionNeedsToIncrease: GenericPalletError<Rv>;

    /**
     * Failed to extract the runtime version from the new runtime.
     *
     * Either calling `Core_version` or decoding `RuntimeVersion` failed.
     **/
    FailedToExtractRuntimeVersion: GenericPalletError<Rv>;

    /**
     * Suicide called when the account has non-default composite data.
     **/
    NonDefaultComposite: GenericPalletError<Rv>;

    /**
     * There is a non-zero reference count preventing the account from being purged.
     **/
    NonZeroRefCount: GenericPalletError<Rv>;

    /**
     * The origin filter prevent the call to be dispatched.
     **/
    CallFiltered: GenericPalletError<Rv>;

    /**
     * A multi-block migration is ongoing and prevents the current code from being replaced.
     **/
    MultiBlockMigrationsOngoing: GenericPalletError<Rv>;

    /**
     * No upgrade authorized.
     **/
    NothingAuthorized: GenericPalletError<Rv>;

    /**
     * The submitted code is not authorized.
     **/
    Unauthorized: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `Balances`'s errors
   **/
  balances: {
    /**
     * Vesting balance too high to send value.
     **/
    VestingBalance: GenericPalletError<Rv>;

    /**
     * Account liquidity restrictions prevent withdrawal.
     **/
    LiquidityRestrictions: GenericPalletError<Rv>;

    /**
     * Balance too low to send value.
     **/
    InsufficientBalance: GenericPalletError<Rv>;

    /**
     * Value too low to create account due to existential deposit.
     **/
    ExistentialDeposit: GenericPalletError<Rv>;

    /**
     * Transfer/payment would kill account.
     **/
    Expendability: GenericPalletError<Rv>;

    /**
     * A vesting schedule already exists for this account.
     **/
    ExistingVestingSchedule: GenericPalletError<Rv>;

    /**
     * Beneficiary account must pre-exist.
     **/
    DeadAccount: GenericPalletError<Rv>;

    /**
     * Number of named reserves exceed `MaxReserves`.
     **/
    TooManyReserves: GenericPalletError<Rv>;

    /**
     * Number of holds exceed `VariantCountOf<T::RuntimeHoldReason>`.
     **/
    TooManyHolds: GenericPalletError<Rv>;

    /**
     * Number of freezes exceed `MaxFreezes`.
     **/
    TooManyFreezes: GenericPalletError<Rv>;

    /**
     * The issuance cannot be modified since it is already deactivated.
     **/
    IssuanceDeactivated: GenericPalletError<Rv>;

    /**
     * The delta cannot be zero.
     **/
    DeltaZero: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `MultiTransactionPayment`'s errors
   **/
  multiTransactionPayment: {
    /**
     * Selected currency is not supported.
     **/
    UnsupportedCurrency: GenericPalletError<Rv>;

    /**
     * Account balance should be non-zero.
     **/
    ZeroBalance: GenericPalletError<Rv>;

    /**
     * Currency is already in the list of accepted currencies.
     **/
    AlreadyAccepted: GenericPalletError<Rv>;

    /**
     * It is not allowed to add Core Asset as accepted currency. Core asset is accepted by design.
     **/
    CoreAssetNotAllowed: GenericPalletError<Rv>;

    /**
     * Fallback price cannot be zero.
     **/
    ZeroPrice: GenericPalletError<Rv>;

    /**
     * Fallback price was not found.
     **/
    FallbackPriceNotFound: GenericPalletError<Rv>;

    /**
     * Math overflow
     **/
    Overflow: GenericPalletError<Rv>;

    /**
     * It is not allowed to change payment currency of an EVM account.
     **/
    EvmAccountNotAllowed: GenericPalletError<Rv>;

    /**
     * EVM permit expired.
     **/
    EvmPermitExpired: GenericPalletError<Rv>;

    /**
     * EVM permit is invalid.
     **/
    EvmPermitInvalid: GenericPalletError<Rv>;

    /**
     * EVM permit call failed.
     **/
    EvmPermitCallExecutionError: GenericPalletError<Rv>;

    /**
     * EVM permit call failed.
     **/
    EvmPermitRunnerError: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `Treasury`'s errors
   **/
  treasury: {
    /**
     * No proposal, bounty or spend at that index.
     **/
    InvalidIndex: GenericPalletError<Rv>;

    /**
     * Too many approvals in the queue.
     **/
    TooManyApprovals: GenericPalletError<Rv>;

    /**
     * The spend origin is valid but the amount it is allowed to spend is lower than the
     * amount to be spent.
     **/
    InsufficientPermission: GenericPalletError<Rv>;

    /**
     * Proposal has not been approved.
     **/
    ProposalNotApproved: GenericPalletError<Rv>;

    /**
     * The balance of the asset kind is not convertible to the balance of the native asset.
     **/
    FailedToConvertBalance: GenericPalletError<Rv>;

    /**
     * The spend has expired and cannot be claimed.
     **/
    SpendExpired: GenericPalletError<Rv>;

    /**
     * The spend is not yet eligible for payout.
     **/
    EarlyPayout: GenericPalletError<Rv>;

    /**
     * The payment has already been attempted.
     **/
    AlreadyAttempted: GenericPalletError<Rv>;

    /**
     * There was some issue with the mechanism of payment.
     **/
    PayoutError: GenericPalletError<Rv>;

    /**
     * The payout was not yet attempted/claimed.
     **/
    NotAttempted: GenericPalletError<Rv>;

    /**
     * The payment has neither failed nor succeeded yet.
     **/
    Inconclusive: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `Utility`'s errors
   **/
  utility: {
    /**
     * Too many calls batched.
     **/
    TooManyCalls: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `Preimage`'s errors
   **/
  preimage: {
    /**
     * Preimage is too large to store on-chain.
     **/
    TooBig: GenericPalletError<Rv>;

    /**
     * Preimage has already been noted on-chain.
     **/
    AlreadyNoted: GenericPalletError<Rv>;

    /**
     * The user is not authorized to perform this action.
     **/
    NotAuthorized: GenericPalletError<Rv>;

    /**
     * The preimage cannot be removed since it has not yet been noted.
     **/
    NotNoted: GenericPalletError<Rv>;

    /**
     * A preimage may not be removed when there are outstanding requests.
     **/
    Requested: GenericPalletError<Rv>;

    /**
     * The preimage request cannot be removed since no outstanding requests exist.
     **/
    NotRequested: GenericPalletError<Rv>;

    /**
     * More than `MAX_HASH_UPGRADE_BULK_COUNT` hashes were requested to be upgraded at once.
     **/
    TooMany: GenericPalletError<Rv>;

    /**
     * Too few hashes were requested to be upgraded (i.e. zero).
     **/
    TooFew: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `Identity`'s errors
   **/
  identity: {
    /**
     * Too many subs-accounts.
     **/
    TooManySubAccounts: GenericPalletError<Rv>;

    /**
     * Account isn't found.
     **/
    NotFound: GenericPalletError<Rv>;

    /**
     * Account isn't named.
     **/
    NotNamed: GenericPalletError<Rv>;

    /**
     * Empty index.
     **/
    EmptyIndex: GenericPalletError<Rv>;

    /**
     * Fee is changed.
     **/
    FeeChanged: GenericPalletError<Rv>;

    /**
     * No identity found.
     **/
    NoIdentity: GenericPalletError<Rv>;

    /**
     * Sticky judgement.
     **/
    StickyJudgement: GenericPalletError<Rv>;

    /**
     * Judgement given.
     **/
    JudgementGiven: GenericPalletError<Rv>;

    /**
     * Invalid judgement.
     **/
    InvalidJudgement: GenericPalletError<Rv>;

    /**
     * The index is invalid.
     **/
    InvalidIndex: GenericPalletError<Rv>;

    /**
     * The target is invalid.
     **/
    InvalidTarget: GenericPalletError<Rv>;

    /**
     * Maximum amount of registrars reached. Cannot add any more.
     **/
    TooManyRegistrars: GenericPalletError<Rv>;

    /**
     * Account ID is already named.
     **/
    AlreadyClaimed: GenericPalletError<Rv>;

    /**
     * Sender is not a sub-account.
     **/
    NotSub: GenericPalletError<Rv>;

    /**
     * Sub-account isn't owned by sender.
     **/
    NotOwned: GenericPalletError<Rv>;

    /**
     * The provided judgement was for a different identity.
     **/
    JudgementForDifferentIdentity: GenericPalletError<Rv>;

    /**
     * Error that occurs when there is an issue paying for judgement.
     **/
    JudgementPaymentFailed: GenericPalletError<Rv>;

    /**
     * The provided suffix is too long.
     **/
    InvalidSuffix: GenericPalletError<Rv>;

    /**
     * The sender does not have permission to issue a username.
     **/
    NotUsernameAuthority: GenericPalletError<Rv>;

    /**
     * The authority cannot allocate any more usernames.
     **/
    NoAllocation: GenericPalletError<Rv>;

    /**
     * The signature on a username was not valid.
     **/
    InvalidSignature: GenericPalletError<Rv>;

    /**
     * Setting this username requires a signature, but none was provided.
     **/
    RequiresSignature: GenericPalletError<Rv>;

    /**
     * The username does not meet the requirements.
     **/
    InvalidUsername: GenericPalletError<Rv>;

    /**
     * The username is already taken.
     **/
    UsernameTaken: GenericPalletError<Rv>;

    /**
     * The requested username does not exist.
     **/
    NoUsername: GenericPalletError<Rv>;

    /**
     * The username cannot be forcefully removed because it can still be accepted.
     **/
    NotExpired: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `Democracy`'s errors
   **/
  democracy: {
    /**
     * Value too low
     **/
    ValueLow: GenericPalletError<Rv>;

    /**
     * Proposal does not exist
     **/
    ProposalMissing: GenericPalletError<Rv>;

    /**
     * Cannot cancel the same proposal twice
     **/
    AlreadyCanceled: GenericPalletError<Rv>;

    /**
     * Proposal already made
     **/
    DuplicateProposal: GenericPalletError<Rv>;

    /**
     * Proposal still blacklisted
     **/
    ProposalBlacklisted: GenericPalletError<Rv>;

    /**
     * Next external proposal not simple majority
     **/
    NotSimpleMajority: GenericPalletError<Rv>;

    /**
     * Invalid hash
     **/
    InvalidHash: GenericPalletError<Rv>;

    /**
     * No external proposal
     **/
    NoProposal: GenericPalletError<Rv>;

    /**
     * Identity may not veto a proposal twice
     **/
    AlreadyVetoed: GenericPalletError<Rv>;

    /**
     * Vote given for invalid referendum
     **/
    ReferendumInvalid: GenericPalletError<Rv>;

    /**
     * No proposals waiting
     **/
    NoneWaiting: GenericPalletError<Rv>;

    /**
     * The given account did not vote on the referendum.
     **/
    NotVoter: GenericPalletError<Rv>;

    /**
     * The actor has no permission to conduct the action.
     **/
    NoPermission: GenericPalletError<Rv>;

    /**
     * The account is already delegating.
     **/
    AlreadyDelegating: GenericPalletError<Rv>;

    /**
     * Too high a balance was provided that the account cannot afford.
     **/
    InsufficientFunds: GenericPalletError<Rv>;

    /**
     * The account is not currently delegating.
     **/
    NotDelegating: GenericPalletError<Rv>;

    /**
     * The account currently has votes attached to it and the operation cannot succeed until
     * these are removed, either through `unvote` or `reap_vote`.
     **/
    VotesExist: GenericPalletError<Rv>;

    /**
     * The instant referendum origin is currently disallowed.
     **/
    InstantNotAllowed: GenericPalletError<Rv>;

    /**
     * Delegation to oneself makes no sense.
     **/
    Nonsense: GenericPalletError<Rv>;

    /**
     * Invalid upper bound.
     **/
    WrongUpperBound: GenericPalletError<Rv>;

    /**
     * Maximum number of votes reached.
     **/
    MaxVotesReached: GenericPalletError<Rv>;

    /**
     * Maximum number of items reached.
     **/
    TooMany: GenericPalletError<Rv>;

    /**
     * Voting period too low
     **/
    VotingPeriodLow: GenericPalletError<Rv>;

    /**
     * The preimage does not exist.
     **/
    PreimageNotExist: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `TechnicalCommittee`'s errors
   **/
  technicalCommittee: {
    /**
     * Account is not a member
     **/
    NotMember: GenericPalletError<Rv>;

    /**
     * Duplicate proposals not allowed
     **/
    DuplicateProposal: GenericPalletError<Rv>;

    /**
     * Proposal must exist
     **/
    ProposalMissing: GenericPalletError<Rv>;

    /**
     * Mismatched index
     **/
    WrongIndex: GenericPalletError<Rv>;

    /**
     * Duplicate vote ignored
     **/
    DuplicateVote: GenericPalletError<Rv>;

    /**
     * Members are already initialized!
     **/
    AlreadyInitialized: GenericPalletError<Rv>;

    /**
     * The close call was made too early, before the end of the voting.
     **/
    TooEarly: GenericPalletError<Rv>;

    /**
     * There can only be a maximum of `MaxProposals` active proposals.
     **/
    TooManyProposals: GenericPalletError<Rv>;

    /**
     * The given weight bound for the proposal was too low.
     **/
    WrongProposalWeight: GenericPalletError<Rv>;

    /**
     * The given length bound for the proposal was too low.
     **/
    WrongProposalLength: GenericPalletError<Rv>;

    /**
     * Prime account is not a member
     **/
    PrimeAccountNotMember: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `Proxy`'s errors
   **/
  proxy: {
    /**
     * There are too many proxies registered or too many announcements pending.
     **/
    TooMany: GenericPalletError<Rv>;

    /**
     * Proxy registration not found.
     **/
    NotFound: GenericPalletError<Rv>;

    /**
     * Sender is not a proxy of the account to be proxied.
     **/
    NotProxy: GenericPalletError<Rv>;

    /**
     * A call which is incompatible with the proxy type's filter was attempted.
     **/
    Unproxyable: GenericPalletError<Rv>;

    /**
     * Account is already a proxy.
     **/
    Duplicate: GenericPalletError<Rv>;

    /**
     * Call may not be made by proxy because it may escalate its privileges.
     **/
    NoPermission: GenericPalletError<Rv>;

    /**
     * Announcement, if made at all, was made too recently.
     **/
    Unannounced: GenericPalletError<Rv>;

    /**
     * Cannot add self as proxy.
     **/
    NoSelfProxy: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `Multisig`'s errors
   **/
  multisig: {
    /**
     * Threshold must be 2 or greater.
     **/
    MinimumThreshold: GenericPalletError<Rv>;

    /**
     * Call is already approved by this signatory.
     **/
    AlreadyApproved: GenericPalletError<Rv>;

    /**
     * Call doesn't need any (more) approvals.
     **/
    NoApprovalsNeeded: GenericPalletError<Rv>;

    /**
     * There are too few signatories in the list.
     **/
    TooFewSignatories: GenericPalletError<Rv>;

    /**
     * There are too many signatories in the list.
     **/
    TooManySignatories: GenericPalletError<Rv>;

    /**
     * The signatories were provided out of order; they should be ordered.
     **/
    SignatoriesOutOfOrder: GenericPalletError<Rv>;

    /**
     * The sender was contained in the other signatories; it shouldn't be.
     **/
    SenderInSignatories: GenericPalletError<Rv>;

    /**
     * Multisig operation not found when attempting to cancel.
     **/
    NotFound: GenericPalletError<Rv>;

    /**
     * Only the account that originally created the multisig is able to cancel it.
     **/
    NotOwner: GenericPalletError<Rv>;

    /**
     * No timepoint was given, yet the multisig operation is already underway.
     **/
    NoTimepoint: GenericPalletError<Rv>;

    /**
     * A different timepoint was given to the multisig operation that is underway.
     **/
    WrongTimepoint: GenericPalletError<Rv>;

    /**
     * A timepoint was given, yet no multisig operation is underway.
     **/
    UnexpectedTimepoint: GenericPalletError<Rv>;

    /**
     * The maximum weight information provided was too low.
     **/
    MaxWeightTooLow: GenericPalletError<Rv>;

    /**
     * The data to be stored is already stored.
     **/
    AlreadyStored: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `Uniques`'s errors
   **/
  uniques: {
    /**
     * The signing account has no permission to do the operation.
     **/
    NoPermission: GenericPalletError<Rv>;

    /**
     * The given item ID is unknown.
     **/
    UnknownCollection: GenericPalletError<Rv>;

    /**
     * The item ID has already been used for an item.
     **/
    AlreadyExists: GenericPalletError<Rv>;

    /**
     * The owner turned out to be different to what was expected.
     **/
    WrongOwner: GenericPalletError<Rv>;

    /**
     * Invalid witness data given.
     **/
    BadWitness: GenericPalletError<Rv>;

    /**
     * The item ID is already taken.
     **/
    InUse: GenericPalletError<Rv>;

    /**
     * The item or collection is frozen.
     **/
    Frozen: GenericPalletError<Rv>;

    /**
     * The delegate turned out to be different to what was expected.
     **/
    WrongDelegate: GenericPalletError<Rv>;

    /**
     * There is no delegate approved.
     **/
    NoDelegate: GenericPalletError<Rv>;

    /**
     * No approval exists that would allow the transfer.
     **/
    Unapproved: GenericPalletError<Rv>;

    /**
     * The named owner has not signed ownership of the collection is acceptable.
     **/
    Unaccepted: GenericPalletError<Rv>;

    /**
     * The item is locked.
     **/
    Locked: GenericPalletError<Rv>;

    /**
     * All items have been minted.
     **/
    MaxSupplyReached: GenericPalletError<Rv>;

    /**
     * The max supply has already been set.
     **/
    MaxSupplyAlreadySet: GenericPalletError<Rv>;

    /**
     * The provided max supply is less to the amount of items a collection already has.
     **/
    MaxSupplyTooSmall: GenericPalletError<Rv>;

    /**
     * The given item ID is unknown.
     **/
    UnknownItem: GenericPalletError<Rv>;

    /**
     * Item is not for sale.
     **/
    NotForSale: GenericPalletError<Rv>;

    /**
     * The provided bid is too low.
     **/
    BidTooLow: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `StateTrieMigration`'s errors
   **/
  stateTrieMigration: {
    /**
     * Max signed limits not respected.
     **/
    MaxSignedLimits: GenericPalletError<Rv>;

    /**
     * A key was longer than the configured maximum.
     *
     * This means that the migration halted at the current [`Progress`] and
     * can be resumed with a larger [`crate::Config::MaxKeyLen`] value.
     * Retrying with the same [`crate::Config::MaxKeyLen`] value will not work.
     * The value should only be increased to avoid a storage migration for the currently
     * stored [`crate::Progress::LastKey`].
     **/
    KeyTooLong: GenericPalletError<Rv>;

    /**
     * submitter does not have enough funds.
     **/
    NotEnoughFunds: GenericPalletError<Rv>;

    /**
     * Bad witness data provided.
     **/
    BadWitness: GenericPalletError<Rv>;

    /**
     * Signed migration is not allowed because the maximum limit is not set yet.
     **/
    SignedMigrationNotAllowed: GenericPalletError<Rv>;

    /**
     * Bad child root provided.
     **/
    BadChildRoot: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `ConvictionVoting`'s errors
   **/
  convictionVoting: {
    /**
     * Poll is not ongoing.
     **/
    NotOngoing: GenericPalletError<Rv>;

    /**
     * The given account did not vote on the poll.
     **/
    NotVoter: GenericPalletError<Rv>;

    /**
     * The actor has no permission to conduct the action.
     **/
    NoPermission: GenericPalletError<Rv>;

    /**
     * The actor has no permission to conduct the action right now but will do in the future.
     **/
    NoPermissionYet: GenericPalletError<Rv>;

    /**
     * The account is already delegating.
     **/
    AlreadyDelegating: GenericPalletError<Rv>;

    /**
     * The account currently has votes attached to it and the operation cannot succeed until
     * these are removed through `remove_vote`.
     **/
    AlreadyVoting: GenericPalletError<Rv>;

    /**
     * Too high a balance was provided that the account cannot afford.
     **/
    InsufficientFunds: GenericPalletError<Rv>;

    /**
     * The account is not currently delegating.
     **/
    NotDelegating: GenericPalletError<Rv>;

    /**
     * Delegation to oneself makes no sense.
     **/
    Nonsense: GenericPalletError<Rv>;

    /**
     * Maximum number of votes reached.
     **/
    MaxVotesReached: GenericPalletError<Rv>;

    /**
     * The class must be supplied since it is not easily determinable from the state.
     **/
    ClassNeeded: GenericPalletError<Rv>;

    /**
     * The class ID supplied is invalid.
     **/
    BadClass: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `Referenda`'s errors
   **/
  referenda: {
    /**
     * Referendum is not ongoing.
     **/
    NotOngoing: GenericPalletError<Rv>;

    /**
     * Referendum's decision deposit is already paid.
     **/
    HasDeposit: GenericPalletError<Rv>;

    /**
     * The track identifier given was invalid.
     **/
    BadTrack: GenericPalletError<Rv>;

    /**
     * There are already a full complement of referenda in progress for this track.
     **/
    Full: GenericPalletError<Rv>;

    /**
     * The queue of the track is empty.
     **/
    QueueEmpty: GenericPalletError<Rv>;

    /**
     * The referendum index provided is invalid in this context.
     **/
    BadReferendum: GenericPalletError<Rv>;

    /**
     * There was nothing to do in the advancement.
     **/
    NothingToDo: GenericPalletError<Rv>;

    /**
     * No track exists for the proposal origin.
     **/
    NoTrack: GenericPalletError<Rv>;

    /**
     * Any deposit cannot be refunded until after the decision is over.
     **/
    Unfinished: GenericPalletError<Rv>;

    /**
     * The deposit refunder is not the depositor.
     **/
    NoPermission: GenericPalletError<Rv>;

    /**
     * The deposit cannot be refunded since none was made.
     **/
    NoDeposit: GenericPalletError<Rv>;

    /**
     * The referendum status is invalid for this operation.
     **/
    BadStatus: GenericPalletError<Rv>;

    /**
     * The preimage does not exist.
     **/
    PreimageNotExist: GenericPalletError<Rv>;

    /**
     * The preimage is stored with a different length than the one provided.
     **/
    PreimageStoredWithDifferentLength: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `Whitelist`'s errors
   **/
  whitelist: {
    /**
     * The preimage of the call hash could not be loaded.
     **/
    UnavailablePreImage: GenericPalletError<Rv>;

    /**
     * The call could not be decoded.
     **/
    UndecodableCall: GenericPalletError<Rv>;

    /**
     * The weight of the decoded call was higher than the witness.
     **/
    InvalidCallWeightWitness: GenericPalletError<Rv>;

    /**
     * The call was not whitelisted.
     **/
    CallIsNotWhitelisted: GenericPalletError<Rv>;

    /**
     * The call was already whitelisted; No-Op.
     **/
    CallAlreadyWhitelisted: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `Dispatcher`'s errors
   **/
  dispatcher: {
    /**
     * The EVM call execution failed. This happens when the EVM returns an exit reason
     * other than `ExitSucceed(Returned)` or `ExitSucceed(Stopped)`.
     **/
    EvmCallFailed: GenericPalletError<Rv>;

    /**
     * The provided call is not an EVM call. This extrinsic only accepts `pallet_evm::Call::call`.
     **/
    NotEvmCall: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `AssetRegistry`'s errors
   **/
  assetRegistry: {
    /**
     * Asset ID is not available. This only happens when it reaches the MAX value of given id type.
     **/
    NoIdAvailable: GenericPalletError<Rv>;

    /**
     * Invalid asset name or symbol.
     **/
    AssetNotFound: GenericPalletError<Rv>;

    /**
     * Length of name or symbol is less than min. length.
     **/
    TooShort: GenericPalletError<Rv>;

    /**
     * Asset's symbol can't contain whitespace characters .
     **/
    InvalidSymbol: GenericPalletError<Rv>;

    /**
     * Asset ID is not registered in the asset-registry.
     **/
    AssetNotRegistered: GenericPalletError<Rv>;

    /**
     * Asset is already registered.
     **/
    AssetAlreadyRegistered: GenericPalletError<Rv>;

    /**
     * Incorrect number of assets provided to create shared asset.
     **/
    InvalidSharedAssetLen: GenericPalletError<Rv>;

    /**
     * Cannot update asset location.
     **/
    CannotUpdateLocation: GenericPalletError<Rv>;

    /**
     * Selected asset id is out of reserved range.
     **/
    NotInReservedRange: GenericPalletError<Rv>;

    /**
     * Location already registered with different asset.
     **/
    LocationAlreadyRegistered: GenericPalletError<Rv>;

    /**
     * Origin is forbidden to set/update value.
     **/
    Forbidden: GenericPalletError<Rv>;

    /**
     * Balance too low.
     **/
    InsufficientBalance: GenericPalletError<Rv>;

    /**
     * Sufficient assets can't be changed to insufficient.
     **/
    ForbiddenSufficiencyChange: GenericPalletError<Rv>;

    /**
     * Asset is already banned.
     **/
    AssetAlreadyBanned: GenericPalletError<Rv>;

    /**
     * Asset is not banned.
     **/
    AssetNotBanned: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `Claims`'s errors
   **/
  claims: {
    /**
     * Ethereum signature is not valid
     **/
    InvalidEthereumSignature: GenericPalletError<Rv>;

    /**
     * Claim is not valid
     **/
    NoClaimOrAlreadyClaimed: GenericPalletError<Rv>;

    /**
     * Value reached maximum and cannot be incremented further
     **/
    BalanceOverflow: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `CollatorRewards`'s errors
   **/
  collatorRewards: {
    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `Omnipool`'s errors
   **/
  omnipool: {
    /**
     * Balance too low
     **/
    InsufficientBalance: GenericPalletError<Rv>;

    /**
     * Asset is already in omnipool
     **/
    AssetAlreadyAdded: GenericPalletError<Rv>;

    /**
     * Asset is not in omnipool
     **/
    AssetNotFound: GenericPalletError<Rv>;

    /**
     * Failed to add token to Omnipool due to insufficient initial liquidity.
     **/
    MissingBalance: GenericPalletError<Rv>;

    /**
     * Invalid initial asset price.
     **/
    InvalidInitialAssetPrice: GenericPalletError<Rv>;

    /**
     * Slippage protection - minimum limit has not been reached.
     **/
    BuyLimitNotReached: GenericPalletError<Rv>;

    /**
     * Slippage protection - maximum limit has been exceeded.
     **/
    SellLimitExceeded: GenericPalletError<Rv>;

    /**
     * Position has not been found.
     **/
    PositionNotFound: GenericPalletError<Rv>;

    /**
     * Insufficient shares in position
     **/
    InsufficientShares: GenericPalletError<Rv>;

    /**
     * Asset is not allowed to be traded.
     **/
    NotAllowed: GenericPalletError<Rv>;

    /**
     * Signed account is not owner of position instance.
     **/
    Forbidden: GenericPalletError<Rv>;

    /**
     * Asset weight cap has been exceeded.
     **/
    AssetWeightCapExceeded: GenericPalletError<Rv>;

    /**
     * Asset is not registered in asset registry
     **/
    AssetNotRegistered: GenericPalletError<Rv>;

    /**
     * Provided liquidity is below minimum allowed limit
     **/
    InsufficientLiquidity: GenericPalletError<Rv>;

    /**
     * Traded amount is below minimum allowed limit
     **/
    InsufficientTradingAmount: GenericPalletError<Rv>;

    /**
     * Sell or buy with same asset ids is not allowed.
     **/
    SameAssetTradeNotAllowed: GenericPalletError<Rv>;

    /**
     * LRNA update after trade results in positive value.
     **/
    HubAssetUpdateError: GenericPalletError<Rv>;

    /**
     * Amount of shares provided cannot be 0.
     **/
    InvalidSharesAmount: GenericPalletError<Rv>;

    /**
     * Hub asset is only allowed to be sold.
     **/
    InvalidHubAssetTradableState: GenericPalletError<Rv>;

    /**
     * Asset is not allowed to be refunded.
     **/
    AssetRefundNotAllowed: GenericPalletError<Rv>;

    /**
     * Max fraction of asset to buy has been exceeded.
     **/
    MaxOutRatioExceeded: GenericPalletError<Rv>;

    /**
     * Max fraction of asset to sell has been exceeded.
     **/
    MaxInRatioExceeded: GenericPalletError<Rv>;

    /**
     * Max allowed price difference has been exceeded.
     **/
    PriceDifferenceTooHigh: GenericPalletError<Rv>;

    /**
     * Invalid oracle price - division by zero.
     **/
    InvalidOraclePrice: GenericPalletError<Rv>;

    /**
     * Failed to calculate withdrawal fee.
     **/
    InvalidWithdrawalFee: GenericPalletError<Rv>;

    /**
     * More than allowed amount of fee has been transferred.
     **/
    FeeOverdraft: GenericPalletError<Rv>;

    /**
     * Token cannot be removed from Omnipool due to shares still owned by other users.
     **/
    SharesRemaining: GenericPalletError<Rv>;

    /**
     * Token cannot be removed from Omnipool because asset is not frozen.
     **/
    AssetNotFrozen: GenericPalletError<Rv>;

    /**
     * Calculated amount out from sell trade is zero.
     **/
    ZeroAmountOut: GenericPalletError<Rv>;

    /**
     * Existential deposit of asset is not available.
     **/
    ExistentialDepositNotAvailable: GenericPalletError<Rv>;

    /**
     * Slippage protection
     **/
    SlippageLimit: GenericPalletError<Rv>;

    /**
     * Extra protocol fee has not been consumed.
     **/
    ProtocolFeeNotConsumed: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `TransactionPause`'s errors
   **/
  transactionPause: {
    /**
     * can not pause
     **/
    CannotPause: GenericPalletError<Rv>;

    /**
     * invalid character encoding
     **/
    InvalidCharacter: GenericPalletError<Rv>;

    /**
     * pallet name or function name is too long
     **/
    NameTooLong: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `Duster`'s errors
   **/
  duster: {
    /**
     * Account is excluded from dusting.
     **/
    AccountBlacklisted: GenericPalletError<Rv>;

    /**
     * Account is not present in the non-dustable list.
     **/
    AccountNotBlacklisted: GenericPalletError<Rv>;

    /**
     * The balance is zero.
     **/
    ZeroBalance: GenericPalletError<Rv>;

    /**
     * The balance is sufficient to keep account open.
     **/
    BalanceSufficient: GenericPalletError<Rv>;

    /**
     * Dust account is not set.
     **/
    DustAccountNotSet: GenericPalletError<Rv>;

    /**
     * Reserve account is not set.
     **/
    ReserveAccountNotSet: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `OmnipoolWarehouseLM`'s errors
   **/
  omnipoolWarehouseLM: {
    /**
     * Global farm does not exist.
     **/
    GlobalFarmNotFound: GenericPalletError<Rv>;

    /**
     * Yield farm does not exist.
     **/
    YieldFarmNotFound: GenericPalletError<Rv>;

    /**
     * Multiple claims in the same period is not allowed.
     **/
    DoubleClaimInPeriod: GenericPalletError<Rv>;

    /**
     * Liquidity mining is canceled.
     **/
    LiquidityMiningCanceled: GenericPalletError<Rv>;

    /**
     * Liquidity mining is not canceled.
     **/
    LiquidityMiningIsActive: GenericPalletError<Rv>;

    /**
     * Liquidity mining is in `active` or `terminated` state and action cannot be completed.
     **/
    LiquidityMiningIsNotStopped: GenericPalletError<Rv>;

    /**
     * Account is not allowed to perform action.
     **/
    Forbidden: GenericPalletError<Rv>;

    /**
     * Yield farm multiplier can't be 0.
     **/
    InvalidMultiplier: GenericPalletError<Rv>;

    /**
     * Yield farm with given `amm_pool_id` already exists in global farm.
     **/
    YieldFarmAlreadyExists: GenericPalletError<Rv>;

    /**
     * Loyalty curve's initial reward percentage is not valid. Valid range is: [0, 1).
     **/
    InvalidInitialRewardPercentage: GenericPalletError<Rv>;

    /**
     * One or more yield farms exist in global farm.
     **/
    GlobalFarmIsNotEmpty: GenericPalletError<Rv>;

    /**
     * Farm's `incentivized_asset` is missing in provided asset pair.
     **/
    MissingIncentivizedAsset: GenericPalletError<Rv>;

    /**
     * Reward currency balance is not sufficient.
     **/
    InsufficientRewardCurrencyBalance: GenericPalletError<Rv>;

    /**
     * Blocks per period can't be 0.
     **/
    InvalidBlocksPerPeriod: GenericPalletError<Rv>;

    /**
     * Yield per period can't be 0.
     **/
    InvalidYieldPerPeriod: GenericPalletError<Rv>;

    /**
     * Total rewards is less than `MinTotalFarmRewards`.
     **/
    InvalidTotalRewards: GenericPalletError<Rv>;

    /**
     * Planned yielding periods is less than `MinPlannedYieldingPeriods`.
     **/
    InvalidPlannedYieldingPeriods: GenericPalletError<Rv>;

    /**
     * Maximum number of locks reached for deposit.
     **/
    MaxEntriesPerDeposit: GenericPalletError<Rv>;

    /**
     * Trying to lock LP shares into already locked yield farm.
     **/
    DoubleLock: GenericPalletError<Rv>;

    /**
     * Yield farm entry doesn't exist for given deposit.
     **/
    YieldFarmEntryNotFound: GenericPalletError<Rv>;

    /**
     * Max number of yield farms in global farm was reached. Global farm can't accept new
     * yield farms until some yield farm is not removed from storage.
     **/
    GlobalFarmIsFull: GenericPalletError<Rv>;

    /**
     * Invalid min. deposit was set for global farm.
     **/
    InvalidMinDeposit: GenericPalletError<Rv>;

    /**
     * Price adjustment multiplier can't be 0.
     **/
    InvalidPriceAdjustment: GenericPalletError<Rv>;

    /**
     * Account creation from id failed.
     **/
    ErrorGetAccountId: GenericPalletError<Rv>;

    /**
     * Value of deposited shares amount in reward currency is bellow min. limit.
     **/
    IncorrectValuedShares: GenericPalletError<Rv>;

    /**
     * `reward_currency` is not registered in asset registry.
     **/
    RewardCurrencyNotRegistered: GenericPalletError<Rv>;

    /**
     * `incentivized_asset` is not registered in asset registry.
     **/
    IncentivizedAssetNotRegistered: GenericPalletError<Rv>;

    /**
     * Provided `amm_pool_id` doesn't match deposit's `amm_pool_id`.
     **/
    AmmPoolIdMismatch: GenericPalletError<Rv>;

    /**
     * Action cannot be completed because unexpected error has occurred. This should be reported
     * to protocol maintainers.
     **/
    InconsistentState: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `OmnipoolLiquidityMining`'s errors
   **/
  omnipoolLiquidityMining: {
    /**
     * Asset is not in the omnipool.
     **/
    AssetNotFound: GenericPalletError<Rv>;

    /**
     * Signed account is not owner of the deposit.
     **/
    Forbidden: GenericPalletError<Rv>;

    /**
     * Rewards to claim are 0.
     **/
    ZeroClaimedRewards: GenericPalletError<Rv>;

    /**
     * Action cannot be completed because unexpected error has occurred. This should be reported
     * to protocol maintainers.
     **/
    InconsistentState: GenericPalletError<Rv>;

    /**
     * Oracle could not be found for requested assets.
     **/
    OracleNotAvailable: GenericPalletError<Rv>;

    /**
     * Oracle providing `price_adjustment` could not be found for requested assets.
     **/
    PriceAdjustmentNotAvailable: GenericPalletError<Rv>;

    /**
     * No farms specified to join
     **/
    NoFarmEntriesSpecified: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `OTC`'s errors
   **/
  otc: {
    /**
     * Asset does not exist in registry
     **/
    AssetNotRegistered: GenericPalletError<Rv>;

    /**
     * Order cannot be found
     **/
    OrderNotFound: GenericPalletError<Rv>;

    /**
     * Size of order ID exceeds the bound
     **/
    OrderIdOutOfBound: GenericPalletError<Rv>;

    /**
     * Cannot partially fill an order which is not partially fillable
     **/
    OrderNotPartiallyFillable: GenericPalletError<Rv>;

    /**
     * Order amount_in and amount_out must at all times be greater than the existential deposit
     * for the asset multiplied by the ExistentialDepositMultiplier.
     * A fill order may not leave behind amounts smaller than this.
     **/
    OrderAmountTooSmall: GenericPalletError<Rv>;

    /**
     * Error with math calculations
     **/
    MathError: GenericPalletError<Rv>;

    /**
     * The caller does not have permission to complete the action
     **/
    Forbidden: GenericPalletError<Rv>;

    /**
     * Reserved amount not sufficient.
     **/
    InsufficientReservedAmount: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `CircuitBreaker`'s errors
   **/
  circuitBreaker: {
    /**
     * Invalid value for a limit. Limit must be non-zero.
     **/
    InvalidLimitValue: GenericPalletError<Rv>;

    /**
     * Allowed liquidity limit is not stored for asset
     **/
    LiquidityLimitNotStoredForAsset: GenericPalletError<Rv>;

    /**
     * Token trade outflow per block has been reached
     **/
    TokenOutflowLimitReached: GenericPalletError<Rv>;

    /**
     * Token trade influx per block has been reached
     **/
    TokenInfluxLimitReached: GenericPalletError<Rv>;

    /**
     * Maximum pool's liquidity limit per block has been reached
     **/
    MaxLiquidityLimitPerBlockReached: GenericPalletError<Rv>;

    /**
     * Asset is not allowed to have a limit
     **/
    NotAllowed: GenericPalletError<Rv>;

    /**
     * Asset still in lockdown as it reached the allowed deposit limit for the period
     * Query the `asset_lockdown_state` storage to determine until which block the asset is locked,
     * so that the deposit can be released afterward.
     **/
    AssetInLockdown: GenericPalletError<Rv>;

    /**
     * Asset is not in a lockdown
     **/
    AssetNotInLockdown: GenericPalletError<Rv>;

    /**
     * Invalid amount to save deposit
     **/
    InvalidAmount: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `Router`'s errors
   **/
  router: {
    /**
     * The trading limit has been reached
     **/
    TradingLimitReached: GenericPalletError<Rv>;

    /**
     * The the max number of trades limit is reached
     **/
    MaxTradesExceeded: GenericPalletError<Rv>;

    /**
     * The AMM pool is not supported for executing trades
     **/
    PoolNotSupported: GenericPalletError<Rv>;

    /**
     * The user has not enough balance to execute the trade
     **/
    InsufficientBalance: GenericPalletError<Rv>;

    /**
     * The calculation of route trade amounts failed in the underlying AMM
     **/
    RouteCalculationFailed: GenericPalletError<Rv>;

    /**
     * The route is invalid
     **/
    InvalidRoute: GenericPalletError<Rv>;

    /**
     * The route update was not successful
     **/
    RouteUpdateIsNotSuccessful: GenericPalletError<Rv>;

    /**
     * Route contains assets that has no oracle data
     **/
    RouteHasNoOracle: GenericPalletError<Rv>;

    /**
     * The route execution failed in the underlying AMM
     **/
    InvalidRouteExecution: GenericPalletError<Rv>;

    /**
     * Trading same assets is not allowed.
     **/
    NotAllowed: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `DynamicFees`'s errors
   **/
  dynamicFees: {
    /**
     * Invalid fee parameters provided
     **/
    InvalidFeeParameters: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `Staking`'s errors
   **/
  staking: {
    /**
     * Balance is too low.
     **/
    InsufficientBalance: GenericPalletError<Rv>;

    /**
     * Staked amount is too low.
     **/
    InsufficientStake: GenericPalletError<Rv>;

    /**
     * Staking position has not been found.
     **/
    PositionNotFound: GenericPalletError<Rv>;

    /**
     * Maximum amount of votes were reached for staking position.
     **/
    MaxVotesReached: GenericPalletError<Rv>;

    /**
     * Staking is not initialized.
     **/
    NotInitialized: GenericPalletError<Rv>;

    /**
     * Staking is already initialized.
     **/
    AlreadyInitialized: GenericPalletError<Rv>;

    /**
     * Arithmetic error.
     **/
    Arithmetic: GenericPalletError<Rv>;

    /**
     * Pot's balance is zero.
     **/
    MissingPotBalance: GenericPalletError<Rv>;

    /**
     * Account's position already exists.
     **/
    PositionAlreadyExists: GenericPalletError<Rv>;

    /**
     * Signer is not an owner of the staking position.
     **/
    Forbidden: GenericPalletError<Rv>;

    /**
     * Position contains registered votes.
     **/
    ExistingVotes: GenericPalletError<Rv>;

    /**
     * Position contains processed votes. Removed these votes first before increasing stake or claiming.
     **/
    ExistingProcessedVotes: GenericPalletError<Rv>;

    /**
     * Action cannot be completed because unexpected error has occurred. This should be reported
     * to protocol maintainers.
     **/
    InconsistentState: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `Stableswap`'s errors
   **/
  stableswap: {
    /**
     * Creating a pool with same assets or less than 2 assets is not allowed.
     **/
    IncorrectAssets: GenericPalletError<Rv>;

    /**
     * Maximum number of assets has been exceeded.
     **/
    MaxAssetsExceeded: GenericPalletError<Rv>;

    /**
     * A pool with given assets does not exist.
     **/
    PoolNotFound: GenericPalletError<Rv>;

    /**
     * A pool with given assets already exists.
     **/
    PoolExists: GenericPalletError<Rv>;

    /**
     * Asset is not in the pool.
     **/
    AssetNotInPool: GenericPalletError<Rv>;

    /**
     * Share asset is not registered in Registry.
     **/
    ShareAssetNotRegistered: GenericPalletError<Rv>;

    /**
     * Share asset is amount assets when creating a pool.
     **/
    ShareAssetInPoolAssets: GenericPalletError<Rv>;

    /**
     * One or more assets are not registered in AssetRegistry
     **/
    AssetNotRegistered: GenericPalletError<Rv>;

    /**
     * Invalid asset amount provided. Amount must be greater than zero.
     **/
    InvalidAssetAmount: GenericPalletError<Rv>;

    /**
     * Balance of an asset is not sufficient to perform a trade.
     **/
    InsufficientBalance: GenericPalletError<Rv>;

    /**
     * Balance of a share asset is not sufficient to withdraw liquidity.
     **/
    InsufficientShares: GenericPalletError<Rv>;

    /**
     * Liquidity has not reached the required minimum.
     **/
    InsufficientLiquidity: GenericPalletError<Rv>;

    /**
     * Insufficient liquidity left in the pool after withdrawal.
     **/
    InsufficientLiquidityRemaining: GenericPalletError<Rv>;

    /**
     * Amount is less than the minimum trading amount configured.
     **/
    InsufficientTradingAmount: GenericPalletError<Rv>;

    /**
     * Minimum limit has not been reached during trade.
     **/
    BuyLimitNotReached: GenericPalletError<Rv>;

    /**
     * Maximum limit has been exceeded during trade.
     **/
    SellLimitExceeded: GenericPalletError<Rv>;

    /**
     * Initial liquidity of asset must be > 0.
     **/
    InvalidInitialLiquidity: GenericPalletError<Rv>;

    /**
     * Amplification is outside configured range.
     **/
    InvalidAmplification: GenericPalletError<Rv>;

    /**
     * Remaining balance of share asset is below asset's existential deposit.
     **/
    InsufficientShareBalance: GenericPalletError<Rv>;

    /**
     * Not allowed to perform an operation on given asset.
     **/
    NotAllowed: GenericPalletError<Rv>;

    /**
     * Future block number is in the past.
     **/
    PastBlock: GenericPalletError<Rv>;

    /**
     * New amplification is equal to the previous value.
     **/
    SameAmplification: GenericPalletError<Rv>;

    /**
     * Slippage protection.
     **/
    SlippageLimit: GenericPalletError<Rv>;

    /**
     * Failed to retrieve asset decimals.
     **/
    UnknownDecimals: GenericPalletError<Rv>;

    /**
     * List of provided pegs is incorrect.
     **/
    IncorrectInitialPegs: GenericPalletError<Rv>;

    /**
     * Failed to retrieve oracle entry.
     **/
    MissingTargetPegOracle: GenericPalletError<Rv>;

    /**
     * Creating pool with pegs is not allowed for asset with different decimals.
     **/
    IncorrectAssetDecimals: GenericPalletError<Rv>;

    /**
     * Pool does not have pegs configured.
     **/
    NoPegSource: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `Bonds`'s errors
   **/
  bonds: {
    /**
     * Bond not registered
     **/
    NotRegistered: GenericPalletError<Rv>;

    /**
     * Bond is not mature
     **/
    NotMature: GenericPalletError<Rv>;

    /**
     * Maturity not long enough
     **/
    InvalidMaturity: GenericPalletError<Rv>;

    /**
     * Asset type not allowed for underlying asset
     **/
    DisallowedAsset: GenericPalletError<Rv>;

    /**
     * Asset is not registered in `AssetRegistry`
     **/
    AssetNotFound: GenericPalletError<Rv>;

    /**
     * Generated name is not valid.
     **/
    InvalidBondName: GenericPalletError<Rv>;

    /**
     * Bond's name parsing was now successful
     **/
    FailToParseName: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `OtcSettlements`'s errors
   **/
  otcSettlements: {
    /**
     * Otc order not found
     **/
    OrderNotFound: GenericPalletError<Rv>;

    /**
     * OTC order is not partially fillable
     **/
    NotPartiallyFillable: GenericPalletError<Rv>;

    /**
     * Provided route doesn't match the existing route
     **/
    InvalidRoute: GenericPalletError<Rv>;

    /**
     * Initial and final balance are different
     **/
    BalanceInconsistency: GenericPalletError<Rv>;

    /**
     * Trade amount higher than necessary
     **/
    TradeAmountTooHigh: GenericPalletError<Rv>;

    /**
     * Trade amount lower than necessary
     **/
    TradeAmountTooLow: GenericPalletError<Rv>;

    /**
     * Price for a route is not available
     **/
    PriceNotAvailable: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `LBP`'s errors
   **/
  lbp: {
    /**
     * Pool assets can not be the same
     **/
    CannotCreatePoolWithSameAssets: GenericPalletError<Rv>;

    /**
     * Account is not a pool owner
     **/
    NotOwner: GenericPalletError<Rv>;

    /**
     * Sale already started
     **/
    SaleStarted: GenericPalletError<Rv>;

    /**
     * Sale is still in progress
     **/
    SaleNotEnded: GenericPalletError<Rv>;

    /**
     * Sale is not running
     **/
    SaleIsNotRunning: GenericPalletError<Rv>;

    /**
     * Sale duration is too long
     **/
    MaxSaleDurationExceeded: GenericPalletError<Rv>;

    /**
     * Liquidity being added should not be zero
     **/
    CannotAddZeroLiquidity: GenericPalletError<Rv>;

    /**
     * Asset balance too low
     **/
    InsufficientAssetBalance: GenericPalletError<Rv>;

    /**
     * Pool does not exist
     **/
    PoolNotFound: GenericPalletError<Rv>;

    /**
     * Pool has been already created
     **/
    PoolAlreadyExists: GenericPalletError<Rv>;

    /**
     * Invalid block range
     **/
    InvalidBlockRange: GenericPalletError<Rv>;

    /**
     * Calculation error
     **/
    WeightCalculationError: GenericPalletError<Rv>;

    /**
     * Weight set is out of range
     **/
    InvalidWeight: GenericPalletError<Rv>;

    /**
     * Can not perform a trade with zero amount
     **/
    ZeroAmount: GenericPalletError<Rv>;

    /**
     * Trade amount is too high
     **/
    MaxInRatioExceeded: GenericPalletError<Rv>;

    /**
     * Trade amount is too high
     **/
    MaxOutRatioExceeded: GenericPalletError<Rv>;

    /**
     * Invalid fee amount
     **/
    FeeAmountInvalid: GenericPalletError<Rv>;

    /**
     * Trading limit reached
     **/
    TradingLimitReached: GenericPalletError<Rv>;

    /**
     * An unexpected integer overflow occurred
     **/
    Overflow: GenericPalletError<Rv>;

    /**
     * Nothing to update
     **/
    NothingToUpdate: GenericPalletError<Rv>;

    /**
     * Liquidity has not reached the required minimum.
     **/
    InsufficientLiquidity: GenericPalletError<Rv>;

    /**
     * Amount is less than minimum trading limit.
     **/
    InsufficientTradingAmount: GenericPalletError<Rv>;

    /**
     * Not more than one fee collector per asset id
     **/
    FeeCollectorWithAssetAlreadyUsed: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `XYK`'s errors
   **/
  xyk: {
    /**
     * It is not allowed to create a pool between same assets.
     **/
    CannotCreatePoolWithSameAssets: GenericPalletError<Rv>;

    /**
     * Liquidity has not reached the required minimum.
     **/
    InsufficientLiquidity: GenericPalletError<Rv>;

    /**
     * Amount is less than min trading limit.
     **/
    InsufficientTradingAmount: GenericPalletError<Rv>;

    /**
     * Liquidity is zero.
     **/
    ZeroLiquidity: GenericPalletError<Rv>;

    /**
     * It is not allowed to create a pool with zero initial price.
     * Not used, kept for backward compatibility
     **/
    ZeroInitialPrice: GenericPalletError<Rv>;

    /**
     * Overflow
     * Not used, kept for backward compatibility
     **/
    CreatePoolAssetAmountInvalid: GenericPalletError<Rv>;

    /**
     * Overflow
     **/
    InvalidMintedLiquidity: GenericPalletError<Rv>;

    /**
     * Overflow
     **/
    InvalidLiquidityAmount: GenericPalletError<Rv>;

    /**
     * Asset amount has exceeded given limit.
     **/
    AssetAmountExceededLimit: GenericPalletError<Rv>;

    /**
     * Asset amount has not reached given limit.
     **/
    AssetAmountNotReachedLimit: GenericPalletError<Rv>;

    /**
     * Asset balance is not sufficient.
     **/
    InsufficientAssetBalance: GenericPalletError<Rv>;

    /**
     * Not enough asset liquidity in the pool.
     **/
    InsufficientPoolAssetBalance: GenericPalletError<Rv>;

    /**
     * Not enough core asset liquidity in the pool.
     **/
    InsufficientNativeCurrencyBalance: GenericPalletError<Rv>;

    /**
     * Liquidity pool for given assets does not exist.
     **/
    TokenPoolNotFound: GenericPalletError<Rv>;

    /**
     * Liquidity pool for given assets already exists.
     **/
    TokenPoolAlreadyExists: GenericPalletError<Rv>;

    /**
     * Overflow
     **/
    AddAssetAmountInvalid: GenericPalletError<Rv>;

    /**
     * Overflow
     **/
    RemoveAssetAmountInvalid: GenericPalletError<Rv>;

    /**
     * Overflow
     **/
    SellAssetAmountInvalid: GenericPalletError<Rv>;

    /**
     * Overflow
     **/
    BuyAssetAmountInvalid: GenericPalletError<Rv>;

    /**
     * Overflow
     **/
    FeeAmountInvalid: GenericPalletError<Rv>;

    /**
     * Overflow
     **/
    CannotApplyDiscount: GenericPalletError<Rv>;

    /**
     * Max fraction of pool to buy in single transaction has been exceeded.
     **/
    MaxOutRatioExceeded: GenericPalletError<Rv>;

    /**
     * Max fraction of pool to sell in single transaction has been exceeded.
     **/
    MaxInRatioExceeded: GenericPalletError<Rv>;

    /**
     * Overflow
     **/
    Overflow: GenericPalletError<Rv>;

    /**
     * Pool cannot be created due to outside factors.
     **/
    CannotCreatePool: GenericPalletError<Rv>;

    /**
     * Slippage protection.
     **/
    SlippageLimit: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `Referrals`'s errors
   **/
  referrals: {
    /**
     * Referral code is too long.
     **/
    TooLong: GenericPalletError<Rv>;

    /**
     * Referral code is too short.
     **/
    TooShort: GenericPalletError<Rv>;

    /**
     * Referral code contains invalid character. Only alphanumeric characters are allowed.
     **/
    InvalidCharacter: GenericPalletError<Rv>;

    /**
     * Referral code already exists.
     **/
    AlreadyExists: GenericPalletError<Rv>;

    /**
     * Provided referral code is invalid. Either does not exist or is too long.
     **/
    InvalidCode: GenericPalletError<Rv>;

    /**
     * Account is already linked to another referral account.
     **/
    AlreadyLinked: GenericPalletError<Rv>;

    /**
     * Nothing in the referral pot account for the asset.
     **/
    ZeroAmount: GenericPalletError<Rv>;

    /**
     * Linking an account to the same referral account is not allowed.
     **/
    LinkNotAllowed: GenericPalletError<Rv>;

    /**
     * Calculated rewards are more than the fee amount. This can happen if percentages are incorrectly set.
     **/
    IncorrectRewardCalculation: GenericPalletError<Rv>;

    /**
     * Given referrer and trader percentages exceeds 100% percent.
     **/
    IncorrectRewardPercentage: GenericPalletError<Rv>;

    /**
     * The account has already a code registered.
     **/
    AlreadyRegistered: GenericPalletError<Rv>;

    /**
     * Price for given asset pair not found.
     **/
    PriceNotFound: GenericPalletError<Rv>;

    /**
     * Minimum trading amount for conversion has not been reached.
     **/
    ConversionMinTradingAmountNotReached: GenericPalletError<Rv>;

    /**
     * Zero amount received from conversion.
     **/
    ConversionZeroAmountReceived: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `Liquidation`'s errors
   **/
  liquidation: {
    /**
     * AssetId to EVM address conversion failed
     **/
    AssetConversionFailed: GenericPalletError<Rv>;

    /**
     * Liquidation call failed
     **/
    LiquidationCallFailed: GenericPalletError<Rv>;

    /**
     * Provided route doesn't match the existing route
     **/
    InvalidRoute: GenericPalletError<Rv>;

    /**
     * Liquidation was not profitable enough to repay flash loan
     **/
    NotProfitable: GenericPalletError<Rv>;

    /**
     * Flash minter contract address not set. It is required for Hollar liquidations.
     **/
    FlashMinterNotSet: GenericPalletError<Rv>;

    /**
     * Invalid liquidation data provided
     **/
    InvalidLiquidationData: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `HSM`'s errors
   **/
  hsm: {
    /**
     * Asset is not approved as collateral
     *
     * The operation attempted to use an asset that is not registered as an approved collateral.
     **/
    AssetNotApproved: GenericPalletError<Rv>;

    /**
     * Asset is already approved as collateral
     *
     * Attempted to add an asset that is already registered as a collateral.
     **/
    AssetAlreadyApproved: GenericPalletError<Rv>;

    /**
     * Another asset from the same pool is already approved
     *
     * Only one asset from each StableSwap pool can be used as collateral.
     **/
    PoolAlreadyHasCollateral: GenericPalletError<Rv>;

    /**
     * Invalid asset pair, must be Hollar and approved collateral
     *
     * The asset pair for buy/sell operations must include Hollar as one side and an approved collateral as the other.
     **/
    InvalidAssetPair: GenericPalletError<Rv>;

    /**
     * Max buy price exceeded
     *
     * The calculated buy price exceeds the maximum allowed buy price for the collateral.
     **/
    MaxBuyPriceExceeded: GenericPalletError<Rv>;

    /**
     * Max buy back amount in single block exceeded
     *
     * The amount of Hollar being sold to HSM exceeds the maximum allowed in a single block for this collateral.
     **/
    MaxBuyBackExceeded: GenericPalletError<Rv>;

    /**
     * Max holding amount for collateral exceeded
     *
     * The operation would cause the HSM to hold more of the collateral than the configured maximum.
     **/
    MaxHoldingExceeded: GenericPalletError<Rv>;

    /**
     * Slippage limit exceeded
     *
     * The calculated amount is worse than the provided slippage limit.
     **/
    SlippageLimitExceeded: GenericPalletError<Rv>;

    /**
     * Invalid EVM contract interaction
     *
     * The call to the EVM contract (GHO Hollar token) failed.
     **/
    InvalidEVMInteraction: GenericPalletError<Rv>;

    /**
     * Decimal retrieval failed
     *
     * Failed to retrieve the decimal information for an asset.
     **/
    DecimalRetrievalFailed: GenericPalletError<Rv>;

    /**
     * No arbitrage opportunity
     *
     * There is no profitable arbitrage opportunity for the specified collateral.
     **/
    NoArbitrageOpportunity: GenericPalletError<Rv>;

    /**
     * Offchain lock error
     *
     * Failed to acquire the lock for offchain workers, likely because another operation is in progress.
     **/
    OffchainLockError: GenericPalletError<Rv>;

    /**
     * Asset not in the pool
     *
     * The specified asset was not found in the pool.
     **/
    AssetNotFound: GenericPalletError<Rv>;

    /**
     * Provided pool state is invalid
     *
     * The retrieved pool state has inconsistent or invalid data.
     **/
    InvalidPoolState: GenericPalletError<Rv>;

    /**
     * Collateral is not empty
     *
     * Cannot remove a collateral asset that still has a non-zero balance in the HSM account.
     **/
    CollateralNotEmpty: GenericPalletError<Rv>;

    /**
     * Asset not in the pool
     *
     * The collateral asset is not present in the specified pool.
     **/
    AssetNotInPool: GenericPalletError<Rv>;

    /**
     * Hollar is not in the pool
     *
     * The Hollar asset is not present in the specified pool.
     **/
    HollarNotInPool: GenericPalletError<Rv>;

    /**
     * Insufficient collateral balance
     *
     * The HSM does not have enough of the collateral asset to complete the operation.
     **/
    InsufficientCollateralBalance: GenericPalletError<Rv>;

    /**
     * GHO Contract address not found
     *
     * The EVM address for the GHO (Hollar) token contract was not found.
     **/
    HollarContractAddressNotFound: GenericPalletError<Rv>;

    /**
     * HSM contains maximum number of allowed collateral assets.
     **/
    MaxNumberOfCollateralsReached: GenericPalletError<Rv>;

    /**
     * Flash minter address not set
     **/
    FlashMinterNotSet: GenericPalletError<Rv>;

    /**
     * Provided arbitrage data is invalid
     **/
    InvalidArbitrageData: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `Tokens`'s errors
   **/
  tokens: {
    /**
     * The balance is too low
     **/
    BalanceTooLow: GenericPalletError<Rv>;

    /**
     * Cannot convert Amount into Balance type
     **/
    AmountIntoBalanceFailed: GenericPalletError<Rv>;

    /**
     * Failed because liquidity restrictions due to locking
     **/
    LiquidityRestrictions: GenericPalletError<Rv>;

    /**
     * Failed because the maximum locks was exceeded
     **/
    MaxLocksExceeded: GenericPalletError<Rv>;

    /**
     * Transfer/payment would kill account
     **/
    KeepAlive: GenericPalletError<Rv>;

    /**
     * Value too low to create account due to existential deposit
     **/
    ExistentialDeposit: GenericPalletError<Rv>;

    /**
     * Beneficiary account must pre-exist
     **/
    DeadAccount: GenericPalletError<Rv>;
    TooManyReserves: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `Currencies`'s errors
   **/
  currencies: {
    /**
     * Unable to convert the Amount type into Balance.
     **/
    AmountIntoBalanceFailed: GenericPalletError<Rv>;

    /**
     * Balance is too low.
     **/
    BalanceTooLow: GenericPalletError<Rv>;

    /**
     * Deposit result is not expected
     **/
    DepositFailed: GenericPalletError<Rv>;

    /**
     * Operation is not supported for this currency
     **/
    NotSupported: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `Vesting`'s errors
   **/
  vesting: {
    /**
     * Vesting period is zero
     **/
    ZeroVestingPeriod: GenericPalletError<Rv>;

    /**
     * Number of vests is zero
     **/
    ZeroVestingPeriodCount: GenericPalletError<Rv>;

    /**
     * Insufficient amount of balance to lock
     **/
    InsufficientBalanceToLock: GenericPalletError<Rv>;

    /**
     * This account have too many vesting schedules
     **/
    TooManyVestingSchedules: GenericPalletError<Rv>;

    /**
     * The vested transfer amount is too low
     **/
    AmountLow: GenericPalletError<Rv>;

    /**
     * Failed because the maximum vesting schedules was exceeded
     **/
    MaxVestingSchedulesExceeded: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `EVM`'s errors
   **/
  evm: {
    /**
     * Not enough balance to perform action
     **/
    BalanceLow: GenericPalletError<Rv>;

    /**
     * Calculating total fee overflowed
     **/
    FeeOverflow: GenericPalletError<Rv>;

    /**
     * Calculating total payment overflowed
     **/
    PaymentOverflow: GenericPalletError<Rv>;

    /**
     * Withdraw fee failed
     **/
    WithdrawFailed: GenericPalletError<Rv>;

    /**
     * Gas price is too low.
     **/
    GasPriceTooLow: GenericPalletError<Rv>;

    /**
     * Nonce is invalid
     **/
    InvalidNonce: GenericPalletError<Rv>;

    /**
     * Gas limit is too low.
     **/
    GasLimitTooLow: GenericPalletError<Rv>;

    /**
     * Gas limit is too high.
     **/
    GasLimitTooHigh: GenericPalletError<Rv>;

    /**
     * The chain id is invalid.
     **/
    InvalidChainId: GenericPalletError<Rv>;

    /**
     * the signature is invalid.
     **/
    InvalidSignature: GenericPalletError<Rv>;

    /**
     * EVM reentrancy
     **/
    Reentrancy: GenericPalletError<Rv>;

    /**
     * EIP-3607,
     **/
    TransactionMustComeFromEOA: GenericPalletError<Rv>;

    /**
     * Undefined error.
     **/
    Undefined: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `Ethereum`'s errors
   **/
  ethereum: {
    /**
     * Signature is invalid.
     **/
    InvalidSignature: GenericPalletError<Rv>;

    /**
     * Pre-log is present, therefore transact is not allowed.
     **/
    PreLogExists: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `EVMAccounts`'s errors
   **/
  evmAccounts: {
    /**
     * Active EVM account cannot be bound
     **/
    TruncatedAccountAlreadyUsed: GenericPalletError<Rv>;

    /**
     * Address is already bound
     **/
    AddressAlreadyBound: GenericPalletError<Rv>;

    /**
     * Bound address cannot be used
     **/
    BoundAddressCannotBeUsed: GenericPalletError<Rv>;

    /**
     * Address not whitelisted
     **/
    AddressNotWhitelisted: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `XYKLiquidityMining`'s errors
   **/
  xykLiquidityMining: {
    /**
     * Nft pallet didn't return an owner.
     **/
    CantFindDepositOwner: GenericPalletError<Rv>;

    /**
     * Account balance of XYK pool shares is not sufficient.
     **/
    InsufficientXykSharesBalance: GenericPalletError<Rv>;

    /**
     * XYK pool does not exist
     **/
    XykPoolDoesntExist: GenericPalletError<Rv>;

    /**
     * Account is not deposit owner.
     **/
    NotDepositOwner: GenericPalletError<Rv>;

    /**
     * XYK did not return assets for given pool id
     **/
    CantGetXykAssets: GenericPalletError<Rv>;

    /**
     * Deposit data not found
     **/
    DepositDataNotFound: GenericPalletError<Rv>;

    /**
     * Calculated reward to claim is 0.
     **/
    ZeroClaimedRewards: GenericPalletError<Rv>;

    /**
     * Asset is not in the `AssetPair`.
     **/
    AssetNotInAssetPair: GenericPalletError<Rv>;

    /**
     * Provided `AssetPair` is not used by the deposit.
     **/
    InvalidAssetPair: GenericPalletError<Rv>;

    /**
     * Asset is not registered in asset registry.
     **/
    AssetNotRegistered: GenericPalletError<Rv>;

    /**
     * Failed to calculate `pot`'s account.
     **/
    FailToGetPotId: GenericPalletError<Rv>;

    /**
     * No global farm - yield farm pairs specified to join
     **/
    NoFarmsSpecified: GenericPalletError<Rv>;

    /**
     * Failed to calculate value of xyk shares
     **/
    FailedToValueShares: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `XYKWarehouseLM`'s errors
   **/
  xykWarehouseLM: {
    /**
     * Global farm does not exist.
     **/
    GlobalFarmNotFound: GenericPalletError<Rv>;

    /**
     * Yield farm does not exist.
     **/
    YieldFarmNotFound: GenericPalletError<Rv>;

    /**
     * Multiple claims in the same period is not allowed.
     **/
    DoubleClaimInPeriod: GenericPalletError<Rv>;

    /**
     * Liquidity mining is canceled.
     **/
    LiquidityMiningCanceled: GenericPalletError<Rv>;

    /**
     * Liquidity mining is not canceled.
     **/
    LiquidityMiningIsActive: GenericPalletError<Rv>;

    /**
     * Liquidity mining is in `active` or `terminated` state and action cannot be completed.
     **/
    LiquidityMiningIsNotStopped: GenericPalletError<Rv>;

    /**
     * Account is not allowed to perform action.
     **/
    Forbidden: GenericPalletError<Rv>;

    /**
     * Yield farm multiplier can't be 0.
     **/
    InvalidMultiplier: GenericPalletError<Rv>;

    /**
     * Yield farm with given `amm_pool_id` already exists in global farm.
     **/
    YieldFarmAlreadyExists: GenericPalletError<Rv>;

    /**
     * Loyalty curve's initial reward percentage is not valid. Valid range is: [0, 1).
     **/
    InvalidInitialRewardPercentage: GenericPalletError<Rv>;

    /**
     * One or more yield farms exist in global farm.
     **/
    GlobalFarmIsNotEmpty: GenericPalletError<Rv>;

    /**
     * Farm's `incentivized_asset` is missing in provided asset pair.
     **/
    MissingIncentivizedAsset: GenericPalletError<Rv>;

    /**
     * Reward currency balance is not sufficient.
     **/
    InsufficientRewardCurrencyBalance: GenericPalletError<Rv>;

    /**
     * Blocks per period can't be 0.
     **/
    InvalidBlocksPerPeriod: GenericPalletError<Rv>;

    /**
     * Yield per period can't be 0.
     **/
    InvalidYieldPerPeriod: GenericPalletError<Rv>;

    /**
     * Total rewards is less than `MinTotalFarmRewards`.
     **/
    InvalidTotalRewards: GenericPalletError<Rv>;

    /**
     * Planned yielding periods is less than `MinPlannedYieldingPeriods`.
     **/
    InvalidPlannedYieldingPeriods: GenericPalletError<Rv>;

    /**
     * Maximum number of locks reached for deposit.
     **/
    MaxEntriesPerDeposit: GenericPalletError<Rv>;

    /**
     * Trying to lock LP shares into already locked yield farm.
     **/
    DoubleLock: GenericPalletError<Rv>;

    /**
     * Yield farm entry doesn't exist for given deposit.
     **/
    YieldFarmEntryNotFound: GenericPalletError<Rv>;

    /**
     * Max number of yield farms in global farm was reached. Global farm can't accept new
     * yield farms until some yield farm is not removed from storage.
     **/
    GlobalFarmIsFull: GenericPalletError<Rv>;

    /**
     * Invalid min. deposit was set for global farm.
     **/
    InvalidMinDeposit: GenericPalletError<Rv>;

    /**
     * Price adjustment multiplier can't be 0.
     **/
    InvalidPriceAdjustment: GenericPalletError<Rv>;

    /**
     * Account creation from id failed.
     **/
    ErrorGetAccountId: GenericPalletError<Rv>;

    /**
     * Value of deposited shares amount in reward currency is bellow min. limit.
     **/
    IncorrectValuedShares: GenericPalletError<Rv>;

    /**
     * `reward_currency` is not registered in asset registry.
     **/
    RewardCurrencyNotRegistered: GenericPalletError<Rv>;

    /**
     * `incentivized_asset` is not registered in asset registry.
     **/
    IncentivizedAssetNotRegistered: GenericPalletError<Rv>;

    /**
     * Provided `amm_pool_id` doesn't match deposit's `amm_pool_id`.
     **/
    AmmPoolIdMismatch: GenericPalletError<Rv>;

    /**
     * Action cannot be completed because unexpected error has occurred. This should be reported
     * to protocol maintainers.
     **/
    InconsistentState: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `RelayChainInfo`'s errors
   **/
  relayChainInfo: {
    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `DCA`'s errors
   **/
  dca: {
    /**
     * Schedule not exist
     **/
    ScheduleNotFound: GenericPalletError<Rv>;

    /**
     * The min trade amount is not reached
     **/
    MinTradeAmountNotReached: GenericPalletError<Rv>;

    /**
     * Forbidden as the user is not the owner of the schedule
     **/
    Forbidden: GenericPalletError<Rv>;

    /**
     * The next execution block number is not in the future
     **/
    BlockNumberIsNotInFuture: GenericPalletError<Rv>;

    /**
     * Price is unstable as price change from oracle data is bigger than max allowed
     **/
    PriceUnstable: GenericPalletError<Rv>;

    /**
     * Order was randomly rescheduled to next block
     **/
    Bumped: GenericPalletError<Rv>;

    /**
     * Error occurred when calculating price
     **/
    CalculatingPriceError: GenericPalletError<Rv>;

    /**
     * The total amount to be reserved is smaller than min budget
     **/
    TotalAmountIsSmallerThanMinBudget: GenericPalletError<Rv>;

    /**
     * The budget is too low for executing at least two orders
     **/
    BudgetTooLow: GenericPalletError<Rv>;

    /**
     * There is no free block found to plan DCA execution
     **/
    NoFreeBlockFound: GenericPalletError<Rv>;

    /**
     * The DCA schedule has been manually terminated
     **/
    ManuallyTerminated: GenericPalletError<Rv>;

    /**
     * Max number of retries reached for schedule
     **/
    MaxRetryReached: GenericPalletError<Rv>;

    /**
     * Absolutely trade limit reached, leading to retry
     **/
    TradeLimitReached: GenericPalletError<Rv>;

    /**
     * Slippage limit calculated from oracle is reached, leading to retry
     **/
    SlippageLimitReached: GenericPalletError<Rv>;

    /**
     * No parent hash has been found from relay chain
     **/
    NoParentHashFound: GenericPalletError<Rv>;

    /**
     * Error that should not really happen only in case of invalid state of the schedule storage entries
     **/
    InvalidState: GenericPalletError<Rv>;

    /**
     * Period should be longer than 5 blocks
     **/
    PeriodTooShort: GenericPalletError<Rv>;

    /**
     * Stability threshold cannot be higher than `MaxConfigurablePriceDifferenceBetweenBlock`
     **/
    StabilityThresholdTooHigh: GenericPalletError<Rv>;

    /**
     * User still has active DCA schedules and cannot unlock reserves
     **/
    HasActiveSchedules: GenericPalletError<Rv>;

    /**
     * No reserves are locked for the user for the given asset
     **/
    NoReservesLocked: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `Scheduler`'s errors
   **/
  scheduler: {
    /**
     * Failed to schedule a call
     **/
    FailedToSchedule: GenericPalletError<Rv>;

    /**
     * Cannot find the scheduled call.
     **/
    NotFound: GenericPalletError<Rv>;

    /**
     * Given target block number is in the past.
     **/
    TargetBlockNumberInPast: GenericPalletError<Rv>;

    /**
     * Reschedule failed because it does not change scheduled time.
     **/
    RescheduleNoChange: GenericPalletError<Rv>;

    /**
     * Attempt to use a non-named function on a named task.
     **/
    Named: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `ParachainSystem`'s errors
   **/
  parachainSystem: {
    /**
     * Attempt to upgrade validation function while existing upgrade pending.
     **/
    OverlappingUpgrades: GenericPalletError<Rv>;

    /**
     * Polkadot currently prohibits this parachain from upgrading its validation function.
     **/
    ProhibitedByPolkadot: GenericPalletError<Rv>;

    /**
     * The supplied validation function has compiled into a blob larger than Polkadot is
     * willing to run.
     **/
    TooBig: GenericPalletError<Rv>;

    /**
     * The inherent which supplies the validation data did not run this block.
     **/
    ValidationDataNotAvailable: GenericPalletError<Rv>;

    /**
     * The inherent which supplies the host configuration did not run this block.
     **/
    HostConfigurationNotAvailable: GenericPalletError<Rv>;

    /**
     * No validation function upgrade is currently scheduled.
     **/
    NotScheduled: GenericPalletError<Rv>;

    /**
     * No code upgrade has been authorized.
     **/
    NothingAuthorized: GenericPalletError<Rv>;

    /**
     * The given code upgrade has not been authorized.
     **/
    Unauthorized: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `PolkadotXcm`'s errors
   **/
  polkadotXcm: {
    /**
     * The desired destination was unreachable, generally because there is a no way of routing
     * to it.
     **/
    Unreachable: GenericPalletError<Rv>;

    /**
     * There was some other issue (i.e. not to do with routing) in sending the message.
     * Perhaps a lack of space for buffering the message.
     **/
    SendFailure: GenericPalletError<Rv>;

    /**
     * The message execution fails the filter.
     **/
    Filtered: GenericPalletError<Rv>;

    /**
     * The message's weight could not be determined.
     **/
    UnweighableMessage: GenericPalletError<Rv>;

    /**
     * The destination `Location` provided cannot be inverted.
     **/
    DestinationNotInvertible: GenericPalletError<Rv>;

    /**
     * The assets to be sent are empty.
     **/
    Empty: GenericPalletError<Rv>;

    /**
     * Could not re-anchor the assets to declare the fees for the destination chain.
     **/
    CannotReanchor: GenericPalletError<Rv>;

    /**
     * Too many assets have been attempted for transfer.
     **/
    TooManyAssets: GenericPalletError<Rv>;

    /**
     * Origin is invalid for sending.
     **/
    InvalidOrigin: GenericPalletError<Rv>;

    /**
     * The version of the `Versioned` value used is not able to be interpreted.
     **/
    BadVersion: GenericPalletError<Rv>;

    /**
     * The given location could not be used (e.g. because it cannot be expressed in the
     * desired version of XCM).
     **/
    BadLocation: GenericPalletError<Rv>;

    /**
     * The referenced subscription could not be found.
     **/
    NoSubscription: GenericPalletError<Rv>;

    /**
     * The location is invalid since it already has a subscription from us.
     **/
    AlreadySubscribed: GenericPalletError<Rv>;

    /**
     * Could not check-out the assets for teleportation to the destination chain.
     **/
    CannotCheckOutTeleport: GenericPalletError<Rv>;

    /**
     * The owner does not own (all) of the asset that they wish to do the operation on.
     **/
    LowBalance: GenericPalletError<Rv>;

    /**
     * The asset owner has too many locks on the asset.
     **/
    TooManyLocks: GenericPalletError<Rv>;

    /**
     * The given account is not an identifiable sovereign account for any location.
     **/
    AccountNotSovereign: GenericPalletError<Rv>;

    /**
     * The operation required fees to be paid which the initiator could not meet.
     **/
    FeesNotMet: GenericPalletError<Rv>;

    /**
     * A remote lock with the corresponding data could not be found.
     **/
    LockNotFound: GenericPalletError<Rv>;

    /**
     * The unlock operation cannot succeed because there are still consumers of the lock.
     **/
    InUse: GenericPalletError<Rv>;

    /**
     * Invalid asset, reserve chain could not be determined for it.
     **/
    InvalidAssetUnknownReserve: GenericPalletError<Rv>;

    /**
     * Invalid asset, do not support remote asset reserves with different fees reserves.
     **/
    InvalidAssetUnsupportedReserve: GenericPalletError<Rv>;

    /**
     * Too many assets with different reserve locations have been attempted for transfer.
     **/
    TooManyReserves: GenericPalletError<Rv>;

    /**
     * Local XCM execution incomplete.
     **/
    LocalExecutionIncomplete: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `XcmpQueue`'s errors
   **/
  xcmpQueue: {
    /**
     * Setting the queue config failed since one of its values was invalid.
     **/
    BadQueueConfig: GenericPalletError<Rv>;

    /**
     * The execution is already suspended.
     **/
    AlreadySuspended: GenericPalletError<Rv>;

    /**
     * The execution is already resumed.
     **/
    AlreadyResumed: GenericPalletError<Rv>;

    /**
     * There are too many active outbound channels.
     **/
    TooManyActiveOutboundChannels: GenericPalletError<Rv>;

    /**
     * The message is too big.
     **/
    TooBig: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `MessageQueue`'s errors
   **/
  messageQueue: {
    /**
     * Page is not reapable because it has items remaining to be processed and is not old
     * enough.
     **/
    NotReapable: GenericPalletError<Rv>;

    /**
     * Page to be reaped does not exist.
     **/
    NoPage: GenericPalletError<Rv>;

    /**
     * The referenced message could not be found.
     **/
    NoMessage: GenericPalletError<Rv>;

    /**
     * The message was already processed and cannot be processed again.
     **/
    AlreadyProcessed: GenericPalletError<Rv>;

    /**
     * The message is queued for future execution.
     **/
    Queued: GenericPalletError<Rv>;

    /**
     * There is temporarily not enough weight to continue servicing messages.
     **/
    InsufficientWeight: GenericPalletError<Rv>;

    /**
     * This message is temporarily unprocessable.
     *
     * Such errors are expected, but not guaranteed, to resolve themselves eventually through
     * retrying.
     **/
    TemporarilyUnprocessable: GenericPalletError<Rv>;

    /**
     * The queue is paused and no message can be executed from it.
     *
     * This can change at any time and may resolve in the future by re-trying.
     **/
    QueuePaused: GenericPalletError<Rv>;

    /**
     * Another call is in progress and needs to finish before this call can happen.
     **/
    RecursiveDisallowed: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `OrmlXcm`'s errors
   **/
  ormlXcm: {
    /**
     * The message and destination combination was not recognized as being
     * reachable.
     **/
    Unreachable: GenericPalletError<Rv>;

    /**
     * The message and destination was recognized as being reachable but
     * the operation could not be completed.
     **/
    SendFailure: GenericPalletError<Rv>;

    /**
     * The version of the `Versioned` value used is not able to be
     * interpreted.
     **/
    BadVersion: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `XTokens`'s errors
   **/
  xTokens: {
    /**
     * Asset has no reserve location.
     **/
    AssetHasNoReserve: GenericPalletError<Rv>;

    /**
     * Not cross-chain transfer.
     **/
    NotCrossChainTransfer: GenericPalletError<Rv>;

    /**
     * Invalid transfer destination.
     **/
    InvalidDest: GenericPalletError<Rv>;

    /**
     * Currency is not cross-chain transferable.
     **/
    NotCrossChainTransferableCurrency: GenericPalletError<Rv>;

    /**
     * The message's weight could not be determined.
     **/
    UnweighableMessage: GenericPalletError<Rv>;

    /**
     * XCM execution failed.
     **/
    XcmExecutionFailed: GenericPalletError<Rv>;

    /**
     * Could not re-anchor the assets to declare the fees for the
     * destination chain.
     **/
    CannotReanchor: GenericPalletError<Rv>;

    /**
     * Could not get ancestry of asset reserve location.
     **/
    InvalidAncestry: GenericPalletError<Rv>;

    /**
     * The Asset is invalid.
     **/
    InvalidAsset: GenericPalletError<Rv>;

    /**
     * The destination `Location` provided cannot be inverted.
     **/
    DestinationNotInvertible: GenericPalletError<Rv>;

    /**
     * The version of the `Versioned` value used is not able to be
     * interpreted.
     **/
    BadVersion: GenericPalletError<Rv>;

    /**
     * We tried sending distinct asset and fee but they have different
     * reserve chains.
     **/
    DistinctReserveForAssetAndFee: GenericPalletError<Rv>;

    /**
     * The fee is zero.
     **/
    ZeroFee: GenericPalletError<Rv>;

    /**
     * The transfering asset amount is zero.
     **/
    ZeroAmount: GenericPalletError<Rv>;

    /**
     * The number of assets to be sent is over the maximum.
     **/
    TooManyAssetsBeingSent: GenericPalletError<Rv>;

    /**
     * The specified index does not exist in a Assets struct.
     **/
    AssetIndexNonExistent: GenericPalletError<Rv>;

    /**
     * Fee is not enough.
     **/
    FeeNotEnough: GenericPalletError<Rv>;

    /**
     * Not supported Location
     **/
    NotSupportedLocation: GenericPalletError<Rv>;

    /**
     * MinXcmFee not registered for certain reserve location
     **/
    MinXcmFeeNotDefined: GenericPalletError<Rv>;

    /**
     * Asset transfer is limited by RateLimiter.
     **/
    RateLimited: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `UnknownTokens`'s errors
   **/
  unknownTokens: {
    /**
     * The balance is too low.
     **/
    BalanceTooLow: GenericPalletError<Rv>;

    /**
     * The operation will cause balance to overflow.
     **/
    BalanceOverflow: GenericPalletError<Rv>;

    /**
     * Unhandled asset.
     **/
    UnhandledAsset: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `CollatorSelection`'s errors
   **/
  collatorSelection: {
    /**
     * The pallet has too many candidates.
     **/
    TooManyCandidates: GenericPalletError<Rv>;

    /**
     * Leaving would result in too few candidates.
     **/
    TooFewEligibleCollators: GenericPalletError<Rv>;

    /**
     * Account is already a candidate.
     **/
    AlreadyCandidate: GenericPalletError<Rv>;

    /**
     * Account is not a candidate.
     **/
    NotCandidate: GenericPalletError<Rv>;

    /**
     * There are too many Invulnerables.
     **/
    TooManyInvulnerables: GenericPalletError<Rv>;

    /**
     * Account is already an Invulnerable.
     **/
    AlreadyInvulnerable: GenericPalletError<Rv>;

    /**
     * Account is not an Invulnerable.
     **/
    NotInvulnerable: GenericPalletError<Rv>;

    /**
     * Account has no associated validator ID.
     **/
    NoAssociatedValidatorId: GenericPalletError<Rv>;

    /**
     * Validator ID is not yet registered.
     **/
    ValidatorNotRegistered: GenericPalletError<Rv>;

    /**
     * Could not insert in the candidate list.
     **/
    InsertToCandidateListFailed: GenericPalletError<Rv>;

    /**
     * Could not remove from the candidate list.
     **/
    RemoveFromCandidateListFailed: GenericPalletError<Rv>;

    /**
     * New deposit amount would be below the minimum candidacy bond.
     **/
    DepositTooLow: GenericPalletError<Rv>;

    /**
     * Could not update the candidate list.
     **/
    UpdateCandidateListFailed: GenericPalletError<Rv>;

    /**
     * Deposit amount is too low to take the target's slot in the candidate list.
     **/
    InsufficientBond: GenericPalletError<Rv>;

    /**
     * The target account to be replaced in the candidate list is not a candidate.
     **/
    TargetIsNotCandidate: GenericPalletError<Rv>;

    /**
     * The updated deposit amount is equal to the amount already reserved.
     **/
    IdenticalDeposit: GenericPalletError<Rv>;

    /**
     * Cannot lower candidacy bond while occupying a future collator slot in the list.
     **/
    InvalidUnreserve: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `Session`'s errors
   **/
  session: {
    /**
     * Invalid ownership proof.
     **/
    InvalidProof: GenericPalletError<Rv>;

    /**
     * No associated validator ID for account.
     **/
    NoAssociatedValidatorId: GenericPalletError<Rv>;

    /**
     * Registered duplicate key.
     **/
    DuplicatedKey: GenericPalletError<Rv>;

    /**
     * No keys are associated with this account.
     **/
    NoKeys: GenericPalletError<Rv>;

    /**
     * Key setting account is not live, so it's impossible to associate keys.
     **/
    NoAccount: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `EmaOracle`'s errors
   **/
  emaOracle: {
    TooManyUniqueEntries: GenericPalletError<Rv>;
    OnTradeValueZero: GenericPalletError<Rv>;
    OracleNotFound: GenericPalletError<Rv>;

    /**
     * Asset not found
     **/
    AssetNotFound: GenericPalletError<Rv>;

    /**
     * The new price is outside the max allowed range
     **/
    PriceOutsideAllowedRange: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `Broadcast`'s errors
   **/
  broadcast: {
    /**
     * The execution context call stack has reached its maximum size
     **/
    ExecutionCallStackOverflow: GenericPalletError<Rv>;

    /**
     * The execution context call stack is empty, unable to decrease level
     **/
    ExecutionCallStackUnderflow: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
}
