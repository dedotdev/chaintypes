// Generated by dedot cli

import type {
  Phase,
  H256,
  DispatchError,
  AccountId32,
  FixedBytes,
  Bytes,
  Result,
  FixedArray,
  FixedU128,
  Permill,
  H160,
  Perbill,
  BytesLike,
  MultiAddress,
  MultiAddressLike,
  AccountId32Like,
  Percent,
  PerU16,
  FixedI64,
  Era,
  Header,
  UncheckedExtrinsic,
  U256,
} from 'dedot/codecs';

export type FrameSystemAccountInfo = {
  nonce: number;
  consumers: number;
  providers: number;
  sufficients: number;
  data: PalletBalancesAccountData;
};

export type PalletBalancesAccountData = {
  free: bigint;
  reserved: bigint;
  frozen: bigint;
  flags: PalletBalancesExtraFlags;
};

export type PalletBalancesExtraFlags = bigint;

export type FrameSupportDispatchPerDispatchClass = {
  normal: SpWeightsWeightV2Weight;
  operational: SpWeightsWeightV2Weight;
  mandatory: SpWeightsWeightV2Weight;
};

export type SpWeightsWeightV2Weight = { refTime: bigint; proofSize: bigint };

export type FrameSystemEventRecord = { phase: Phase; event: AssetHubWestendRuntimeRuntimeEvent; topics: Array<H256> };

export type AssetHubWestendRuntimeRuntimeEvent =
  | { pallet: 'System'; palletEvent: FrameSystemEvent }
  | { pallet: 'ParachainSystem'; palletEvent: CumulusPalletParachainSystemEvent }
  | { pallet: 'MultiBlockMigrations'; palletEvent: PalletMigrationsEvent }
  | { pallet: 'Preimage'; palletEvent: PalletPreimageEvent }
  | { pallet: 'Scheduler'; palletEvent: PalletSchedulerEvent }
  | { pallet: 'Sudo'; palletEvent: PalletSudoEvent }
  | { pallet: 'Balances'; palletEvent: PalletBalancesEvent }
  | { pallet: 'TransactionPayment'; palletEvent: PalletTransactionPaymentEvent }
  | { pallet: 'AssetTxPayment'; palletEvent: PalletAssetConversionTxPaymentEvent }
  | { pallet: 'Vesting'; palletEvent: PalletVestingEvent }
  | { pallet: 'CollatorSelection'; palletEvent: PalletCollatorSelectionEvent }
  | { pallet: 'Session'; palletEvent: PalletSessionEvent }
  | { pallet: 'XcmpQueue'; palletEvent: CumulusPalletXcmpQueueEvent }
  | { pallet: 'PolkadotXcm'; palletEvent: PalletXcmEvent }
  | { pallet: 'CumulusXcm'; palletEvent: CumulusPalletXcmEvent }
  | { pallet: 'ToRococoXcmRouter'; palletEvent: PalletXcmBridgeHubRouterEvent }
  | { pallet: 'MessageQueue'; palletEvent: PalletMessageQueueEvent }
  | { pallet: 'SnowbridgeSystemFrontend'; palletEvent: SnowbridgePalletSystemFrontendEvent }
  | { pallet: 'Utility'; palletEvent: PalletUtilityEvent }
  | { pallet: 'Multisig'; palletEvent: PalletMultisigEvent }
  | { pallet: 'Proxy'; palletEvent: PalletProxyEvent }
  | { pallet: 'Indices'; palletEvent: PalletIndicesEvent }
  | { pallet: 'Assets'; palletEvent: PalletAssetsEvent }
  | { pallet: 'Uniques'; palletEvent: PalletUniquesEvent }
  | { pallet: 'Nfts'; palletEvent: PalletNftsEvent }
  | { pallet: 'ForeignAssets'; palletEvent: PalletAssetsEvent002 }
  | { pallet: 'NftFractionalization'; palletEvent: PalletNftFractionalizationEvent }
  | { pallet: 'PoolAssets'; palletEvent: PalletAssetsEvent }
  | { pallet: 'AssetConversion'; palletEvent: PalletAssetConversionEvent }
  | { pallet: 'AssetsFreezer'; palletEvent: PalletAssetsFreezerEvent }
  | { pallet: 'ForeignAssetsFreezer'; palletEvent: PalletAssetsFreezerEvent002 }
  | { pallet: 'PoolAssetsFreezer'; palletEvent: PalletAssetsFreezerEvent }
  | { pallet: 'Revive'; palletEvent: PalletReviveEvent }
  | { pallet: 'AssetRewards'; palletEvent: PalletAssetRewardsEvent }
  | { pallet: 'StateTrieMigration'; palletEvent: PalletStateTrieMigrationEvent }
  | { pallet: 'Staking'; palletEvent: PalletStakingAsyncPalletEvent }
  | { pallet: 'NominationPools'; palletEvent: PalletNominationPoolsEvent }
  | { pallet: 'FastUnstake'; palletEvent: PalletFastUnstakeEvent }
  | { pallet: 'VoterList'; palletEvent: PalletBagsListEvent }
  | { pallet: 'DelegatedStaking'; palletEvent: PalletDelegatedStakingEvent }
  | { pallet: 'StakingNextRcClient'; palletEvent: PalletStakingAsyncRcClientEvent }
  | { pallet: 'MultiBlock'; palletEvent: PalletElectionProviderMultiBlockEvent }
  | { pallet: 'MultiBlockVerifier'; palletEvent: PalletElectionProviderMultiBlockVerifierImplsPalletEvent }
  | { pallet: 'MultiBlockSigned'; palletEvent: PalletElectionProviderMultiBlockSignedPalletEvent }
  | { pallet: 'ConvictionVoting'; palletEvent: PalletConvictionVotingEvent }
  | { pallet: 'Referenda'; palletEvent: PalletReferendaEvent }
  | { pallet: 'Whitelist'; palletEvent: PalletWhitelistEvent }
  | { pallet: 'Treasury'; palletEvent: PalletTreasuryEvent }
  | { pallet: 'AssetRate'; palletEvent: PalletAssetRateEvent }
  | { pallet: 'AssetConversionMigration'; palletEvent: PalletAssetConversionOpsEvent }
  | { pallet: 'AhOps'; palletEvent: PalletAhOpsEvent }
  | { pallet: 'AhMigrator'; palletEvent: PalletAhMigratorEvent };

/**
 * Event for the System pallet.
 **/
export type FrameSystemEvent =
  /**
   * An extrinsic completed successfully.
   **/
  | { name: 'ExtrinsicSuccess'; data: { dispatchInfo: FrameSystemDispatchEventInfo } }
  /**
   * An extrinsic failed.
   **/
  | { name: 'ExtrinsicFailed'; data: { dispatchError: DispatchError; dispatchInfo: FrameSystemDispatchEventInfo } }
  /**
   * `:code` was updated.
   **/
  | { name: 'CodeUpdated' }
  /**
   * A new account was created.
   **/
  | { name: 'NewAccount'; data: { account: AccountId32 } }
  /**
   * An account was reaped.
   **/
  | { name: 'KilledAccount'; data: { account: AccountId32 } }
  /**
   * On on-chain remark happened.
   **/
  | { name: 'Remarked'; data: { sender: AccountId32; hash: H256 } }
  /**
   * An upgrade was authorized.
   **/
  | { name: 'UpgradeAuthorized'; data: { codeHash: H256; checkVersion: boolean } }
  /**
   * An invalid authorized upgrade was rejected while trying to apply it.
   **/
  | { name: 'RejectedInvalidAuthorizedUpgrade'; data: { codeHash: H256; error: DispatchError } };

export type FrameSystemDispatchEventInfo = {
  weight: SpWeightsWeightV2Weight;
  class: FrameSupportDispatchDispatchClass;
  paysFee: FrameSupportDispatchPays;
};

export type FrameSupportDispatchDispatchClass = 'Normal' | 'Operational' | 'Mandatory';

export type FrameSupportDispatchPays = 'Yes' | 'No';

export type SpRuntimeProvingTrieTrieError =
  | 'InvalidStateRoot'
  | 'IncompleteDatabase'
  | 'ValueAtIncompleteKey'
  | 'DecoderError'
  | 'InvalidHash'
  | 'DuplicateKey'
  | 'ExtraneousNode'
  | 'ExtraneousValue'
  | 'ExtraneousHashReference'
  | 'InvalidChildReference'
  | 'ValueMismatch'
  | 'IncompleteProof'
  | 'RootMismatch'
  | 'DecodeError';

/**
 * The `Event` enum of this pallet
 **/
export type CumulusPalletParachainSystemEvent =
  /**
   * The validation function has been scheduled to apply.
   **/
  | { name: 'ValidationFunctionStored' }
  /**
   * The validation function was applied as of the contained relay chain block number.
   **/
  | { name: 'ValidationFunctionApplied'; data: { relayChainBlockNum: number } }
  /**
   * The relay-chain aborted the upgrade process.
   **/
  | { name: 'ValidationFunctionDiscarded' }
  /**
   * Some downward messages have been received and will be processed.
   **/
  | { name: 'DownwardMessagesReceived'; data: { count: number } }
  /**
   * Downward messages were processed using the given weight.
   **/
  | { name: 'DownwardMessagesProcessed'; data: { weightUsed: SpWeightsWeightV2Weight; dmqHead: H256 } }
  /**
   * An upward message was sent to the relay chain.
   **/
  | { name: 'UpwardMessageSent'; data: { messageHash?: FixedBytes<32> | undefined } };

/**
 * The `Event` enum of this pallet
 **/
export type PalletMigrationsEvent =
  /**
   * A Runtime upgrade started.
   *
   * Its end is indicated by `UpgradeCompleted` or `UpgradeFailed`.
   **/
  | {
      name: 'UpgradeStarted';
      data: {
        /**
         * The number of migrations that this upgrade contains.
         *
         * This can be used to design a progress indicator in combination with counting the
         * `MigrationCompleted` and `MigrationSkipped` events.
         **/
        migrations: number;
      };
    }
  /**
   * The current runtime upgrade completed.
   *
   * This implies that all of its migrations completed successfully as well.
   **/
  | { name: 'UpgradeCompleted' }
  /**
   * Runtime upgrade failed.
   *
   * This is very bad and will require governance intervention.
   **/
  | { name: 'UpgradeFailed' }
  /**
   * A migration was skipped since it was already executed in the past.
   **/
  | {
      name: 'MigrationSkipped';
      data: {
        /**
         * The index of the skipped migration within the [`Config::Migrations`] list.
         **/
        index: number;
      };
    }
  /**
   * A migration progressed.
   **/
  | {
      name: 'MigrationAdvanced';
      data: {
        /**
         * The index of the migration within the [`Config::Migrations`] list.
         **/
        index: number;

        /**
         * The number of blocks that this migration took so far.
         **/
        took: number;
      };
    }
  /**
   * A Migration completed.
   **/
  | {
      name: 'MigrationCompleted';
      data: {
        /**
         * The index of the migration within the [`Config::Migrations`] list.
         **/
        index: number;

        /**
         * The number of blocks that this migration took so far.
         **/
        took: number;
      };
    }
  /**
   * A Migration failed.
   *
   * This implies that the whole upgrade failed and governance intervention is required.
   **/
  | {
      name: 'MigrationFailed';
      data: {
        /**
         * The index of the migration within the [`Config::Migrations`] list.
         **/
        index: number;

        /**
         * The number of blocks that this migration took so far.
         **/
        took: number;
      };
    }
  /**
   * The set of historical migrations has been cleared.
   **/
  | {
      name: 'HistoricCleared';
      data: {
        /**
         * Should be passed to `clear_historic` in a successive call.
         **/
        nextCursor?: Bytes | undefined;
      };
    };

/**
 * The `Event` enum of this pallet
 **/
export type PalletPreimageEvent =
  /**
   * A preimage has been noted.
   **/
  | { name: 'Noted'; data: { hash: H256 } }
  /**
   * A preimage has been requested.
   **/
  | { name: 'Requested'; data: { hash: H256 } }
  /**
   * A preimage has ben cleared.
   **/
  | { name: 'Cleared'; data: { hash: H256 } };

/**
 * Events type.
 **/
export type PalletSchedulerEvent =
  /**
   * Scheduled some task.
   **/
  | { name: 'Scheduled'; data: { when: number; index: number } }
  /**
   * Canceled some task.
   **/
  | { name: 'Canceled'; data: { when: number; index: number } }
  /**
   * Dispatched some task.
   **/
  | {
      name: 'Dispatched';
      data: { task: [number, number]; id?: FixedBytes<32> | undefined; result: Result<[], DispatchError> };
    }
  /**
   * Set a retry configuration for some task.
   **/
  | {
      name: 'RetrySet';
      data: { task: [number, number]; id?: FixedBytes<32> | undefined; period: number; retries: number };
    }
  /**
   * Cancel a retry configuration for some task.
   **/
  | { name: 'RetryCancelled'; data: { task: [number, number]; id?: FixedBytes<32> | undefined } }
  /**
   * The call for the provided hash was not found so the task has been aborted.
   **/
  | { name: 'CallUnavailable'; data: { task: [number, number]; id?: FixedBytes<32> | undefined } }
  /**
   * The given task was unable to be renewed since the agenda is full at that block.
   **/
  | { name: 'PeriodicFailed'; data: { task: [number, number]; id?: FixedBytes<32> | undefined } }
  /**
   * The given task was unable to be retried since the agenda is full at that block or there
   * was not enough weight to reschedule it.
   **/
  | { name: 'RetryFailed'; data: { task: [number, number]; id?: FixedBytes<32> | undefined } }
  /**
   * The given task can never be executed since it is overweight.
   **/
  | { name: 'PermanentlyOverweight'; data: { task: [number, number]; id?: FixedBytes<32> | undefined } }
  /**
   * Agenda is incomplete from `when`.
   **/
  | { name: 'AgendaIncomplete'; data: { when: number } };

/**
 * The `Event` enum of this pallet
 **/
export type PalletSudoEvent =
  /**
   * A sudo call just took place.
   **/
  | {
      name: 'Sudid';
      data: {
        /**
         * The result of the call made by the sudo user.
         **/
        sudoResult: Result<[], DispatchError>;
      };
    }
  /**
   * The sudo key has been updated.
   **/
  | {
      name: 'KeyChanged';
      data: {
        /**
         * The old sudo key (if one was previously set).
         **/
        old?: AccountId32 | undefined;

        /**
         * The new sudo key (if one was set).
         **/
        new: AccountId32;
      };
    }
  /**
   * The key was permanently removed.
   **/
  | { name: 'KeyRemoved' }
  /**
   * A [sudo_as](Pallet::sudo_as) call just took place.
   **/
  | {
      name: 'SudoAsDone';
      data: {
        /**
         * The result of the call made by the sudo user.
         **/
        sudoResult: Result<[], DispatchError>;
      };
    };

/**
 * The `Event` enum of this pallet
 **/
export type PalletBalancesEvent =
  /**
   * An account was created with some free balance.
   **/
  | { name: 'Endowed'; data: { account: AccountId32; freeBalance: bigint } }
  /**
   * An account was removed whose balance was non-zero but below ExistentialDeposit,
   * resulting in an outright loss.
   **/
  | { name: 'DustLost'; data: { account: AccountId32; amount: bigint } }
  /**
   * Transfer succeeded.
   **/
  | { name: 'Transfer'; data: { from: AccountId32; to: AccountId32; amount: bigint } }
  /**
   * A balance was set by root.
   **/
  | { name: 'BalanceSet'; data: { who: AccountId32; free: bigint } }
  /**
   * Some balance was reserved (moved from free to reserved).
   **/
  | { name: 'Reserved'; data: { who: AccountId32; amount: bigint } }
  /**
   * Some balance was unreserved (moved from reserved to free).
   **/
  | { name: 'Unreserved'; data: { who: AccountId32; amount: bigint } }
  /**
   * Some balance was moved from the reserve of the first account to the second account.
   * Final argument indicates the destination balance type.
   **/
  | {
      name: 'ReserveRepatriated';
      data: {
        from: AccountId32;
        to: AccountId32;
        amount: bigint;
        destinationStatus: FrameSupportTokensMiscBalanceStatus;
      };
    }
  /**
   * Some amount was deposited (e.g. for transaction fees).
   **/
  | { name: 'Deposit'; data: { who: AccountId32; amount: bigint } }
  /**
   * Some amount was withdrawn from the account (e.g. for transaction fees).
   **/
  | { name: 'Withdraw'; data: { who: AccountId32; amount: bigint } }
  /**
   * Some amount was removed from the account (e.g. for misbehavior).
   **/
  | { name: 'Slashed'; data: { who: AccountId32; amount: bigint } }
  /**
   * Some amount was minted into an account.
   **/
  | { name: 'Minted'; data: { who: AccountId32; amount: bigint } }
  /**
   * Some amount was burned from an account.
   **/
  | { name: 'Burned'; data: { who: AccountId32; amount: bigint } }
  /**
   * Some amount was suspended from an account (it can be restored later).
   **/
  | { name: 'Suspended'; data: { who: AccountId32; amount: bigint } }
  /**
   * Some amount was restored into an account.
   **/
  | { name: 'Restored'; data: { who: AccountId32; amount: bigint } }
  /**
   * An account was upgraded.
   **/
  | { name: 'Upgraded'; data: { who: AccountId32 } }
  /**
   * Total issuance was increased by `amount`, creating a credit to be balanced.
   **/
  | { name: 'Issued'; data: { amount: bigint } }
  /**
   * Total issuance was decreased by `amount`, creating a debt to be balanced.
   **/
  | { name: 'Rescinded'; data: { amount: bigint } }
  /**
   * Some balance was locked.
   **/
  | { name: 'Locked'; data: { who: AccountId32; amount: bigint } }
  /**
   * Some balance was unlocked.
   **/
  | { name: 'Unlocked'; data: { who: AccountId32; amount: bigint } }
  /**
   * Some balance was frozen.
   **/
  | { name: 'Frozen'; data: { who: AccountId32; amount: bigint } }
  /**
   * Some balance was thawed.
   **/
  | { name: 'Thawed'; data: { who: AccountId32; amount: bigint } }
  /**
   * The `TotalIssuance` was forcefully changed.
   **/
  | { name: 'TotalIssuanceForced'; data: { old: bigint; new: bigint } };

export type FrameSupportTokensMiscBalanceStatus = 'Free' | 'Reserved';

/**
 * The `Event` enum of this pallet
 **/
export type PalletTransactionPaymentEvent =
  /**
   * A transaction fee `actual_fee`, of which `tip` was added to the minimum inclusion fee,
   * has been paid by `who`.
   **/
  { name: 'TransactionFeePaid'; data: { who: AccountId32; actualFee: bigint; tip: bigint } };

/**
 * The `Event` enum of this pallet
 **/
export type PalletAssetConversionTxPaymentEvent =
  /**
   * A transaction fee `actual_fee`, of which `tip` was added to the minimum inclusion fee,
   * has been paid by `who` in an asset `asset_id`.
   **/
  | {
      name: 'AssetTxFeePaid';
      data: { who: AccountId32; actualFee: bigint; tip: bigint; assetId: StagingXcmV5Location };
    }
  /**
   * A swap of the refund in native currency back to asset failed.
   **/
  | { name: 'AssetRefundFailed'; data: { nativeAmountKept: bigint } };

export type StagingXcmV5Location = { parents: number; interior: StagingXcmV5Junctions };

export type StagingXcmV5Junctions =
  | { type: 'Here' }
  | { type: 'X1'; value: FixedArray<StagingXcmV5Junction, 1> }
  | { type: 'X2'; value: FixedArray<StagingXcmV5Junction, 2> }
  | { type: 'X3'; value: FixedArray<StagingXcmV5Junction, 3> }
  | { type: 'X4'; value: FixedArray<StagingXcmV5Junction, 4> }
  | { type: 'X5'; value: FixedArray<StagingXcmV5Junction, 5> }
  | { type: 'X6'; value: FixedArray<StagingXcmV5Junction, 6> }
  | { type: 'X7'; value: FixedArray<StagingXcmV5Junction, 7> }
  | { type: 'X8'; value: FixedArray<StagingXcmV5Junction, 8> };

export type StagingXcmV5Junction =
  | { type: 'Parachain'; value: number }
  | { type: 'AccountId32'; value: { network?: StagingXcmV5JunctionNetworkId | undefined; id: FixedBytes<32> } }
  | { type: 'AccountIndex64'; value: { network?: StagingXcmV5JunctionNetworkId | undefined; index: bigint } }
  | { type: 'AccountKey20'; value: { network?: StagingXcmV5JunctionNetworkId | undefined; key: FixedBytes<20> } }
  | { type: 'PalletInstance'; value: number }
  | { type: 'GeneralIndex'; value: bigint }
  | { type: 'GeneralKey'; value: { length: number; data: FixedBytes<32> } }
  | { type: 'OnlyChild' }
  | { type: 'Plurality'; value: { id: XcmV3JunctionBodyId; part: XcmV3JunctionBodyPart } }
  | { type: 'GlobalConsensus'; value: StagingXcmV5JunctionNetworkId };

export type StagingXcmV5JunctionNetworkId =
  | { type: 'ByGenesis'; value: FixedBytes<32> }
  | { type: 'ByFork'; value: { blockNumber: bigint; blockHash: FixedBytes<32> } }
  | { type: 'Polkadot' }
  | { type: 'Kusama' }
  | { type: 'Ethereum'; value: { chainId: bigint } }
  | { type: 'BitcoinCore' }
  | { type: 'BitcoinCash' }
  | { type: 'PolkadotBulletin' };

export type XcmV3JunctionBodyId =
  | { type: 'Unit' }
  | { type: 'Moniker'; value: FixedBytes<4> }
  | { type: 'Index'; value: number }
  | { type: 'Executive' }
  | { type: 'Technical' }
  | { type: 'Legislative' }
  | { type: 'Judicial' }
  | { type: 'Defense' }
  | { type: 'Administration' }
  | { type: 'Treasury' };

export type XcmV3JunctionBodyPart =
  | { type: 'Voice' }
  | { type: 'Members'; value: { count: number } }
  | { type: 'Fraction'; value: { nom: number; denom: number } }
  | { type: 'AtLeastProportion'; value: { nom: number; denom: number } }
  | { type: 'MoreThanProportion'; value: { nom: number; denom: number } };

/**
 * The `Event` enum of this pallet
 **/
export type PalletVestingEvent =
  /**
   * A vesting schedule has been created.
   **/
  | { name: 'VestingCreated'; data: { account: AccountId32; scheduleIndex: number } }
  /**
   * The amount vested has been updated. This could indicate a change in funds available.
   * The balance given is the amount which is left unvested (and thus locked).
   **/
  | { name: 'VestingUpdated'; data: { account: AccountId32; unvested: bigint } }
  /**
   * An \[account\] has become fully vested.
   **/
  | { name: 'VestingCompleted'; data: { account: AccountId32 } };

/**
 * The `Event` enum of this pallet
 **/
export type PalletCollatorSelectionEvent =
  /**
   * New Invulnerables were set.
   **/
  | { name: 'NewInvulnerables'; data: { invulnerables: Array<AccountId32> } }
  /**
   * A new Invulnerable was added.
   **/
  | { name: 'InvulnerableAdded'; data: { accountId: AccountId32 } }
  /**
   * An Invulnerable was removed.
   **/
  | { name: 'InvulnerableRemoved'; data: { accountId: AccountId32 } }
  /**
   * The number of desired candidates was set.
   **/
  | { name: 'NewDesiredCandidates'; data: { desiredCandidates: number } }
  /**
   * The candidacy bond was set.
   **/
  | { name: 'NewCandidacyBond'; data: { bondAmount: bigint } }
  /**
   * A new candidate joined.
   **/
  | { name: 'CandidateAdded'; data: { accountId: AccountId32; deposit: bigint } }
  /**
   * Bond of a candidate updated.
   **/
  | { name: 'CandidateBondUpdated'; data: { accountId: AccountId32; deposit: bigint } }
  /**
   * A candidate was removed.
   **/
  | { name: 'CandidateRemoved'; data: { accountId: AccountId32 } }
  /**
   * An account was replaced in the candidate list by another one.
   **/
  | { name: 'CandidateReplaced'; data: { old: AccountId32; new: AccountId32; deposit: bigint } }
  /**
   * An account was unable to be added to the Invulnerables because they did not have keys
   * registered. Other Invulnerables may have been set.
   **/
  | { name: 'InvalidInvulnerableSkipped'; data: { accountId: AccountId32 } };

/**
 * The `Event` enum of this pallet
 **/
export type PalletSessionEvent =
  /**
   * New session has happened. Note that the argument is the session index, not the
   * block number as the type might suggest.
   **/
  | { name: 'NewSession'; data: { sessionIndex: number } }
  /**
   * The `NewSession` event in the current block also implies a new validator set to be
   * queued.
   **/
  | { name: 'NewQueued' }
  /**
   * Validator has been disabled.
   **/
  | { name: 'ValidatorDisabled'; data: { validator: AccountId32 } }
  /**
   * Validator has been re-enabled.
   **/
  | { name: 'ValidatorReenabled'; data: { validator: AccountId32 } };

/**
 * The `Event` enum of this pallet
 **/
export type CumulusPalletXcmpQueueEvent =
  /**
   * An HRMP message was sent to a sibling parachain.
   **/
  { name: 'XcmpMessageSent'; data: { messageHash: FixedBytes<32> } };

/**
 * The `Event` enum of this pallet
 **/
export type PalletXcmEvent =
  /**
   * Execution of an XCM message was attempted.
   **/
  | { name: 'Attempted'; data: { outcome: StagingXcmV5TraitsOutcome } }
  /**
   * An XCM message was sent.
   **/
  | {
      name: 'Sent';
      data: {
        origin: StagingXcmV5Location;
        destination: StagingXcmV5Location;
        message: StagingXcmV5Xcm;
        messageId: FixedBytes<32>;
      };
    }
  /**
   * An XCM message failed to send.
   **/
  | {
      name: 'SendFailed';
      data: {
        origin: StagingXcmV5Location;
        destination: StagingXcmV5Location;
        error: XcmV3TraitsSendError;
        messageId: FixedBytes<32>;
      };
    }
  /**
   * An XCM message failed to process.
   **/
  | {
      name: 'ProcessXcmError';
      data: { origin: StagingXcmV5Location; error: XcmV5TraitsError; messageId: FixedBytes<32> };
    }
  /**
   * Query response received which does not match a registered query. This may be because a
   * matching query was never registered, it may be because it is a duplicate response, or
   * because the query timed out.
   **/
  | { name: 'UnexpectedResponse'; data: { origin: StagingXcmV5Location; queryId: bigint } }
  /**
   * Query response has been received and is ready for taking with `take_response`. There is
   * no registered notification call.
   **/
  | { name: 'ResponseReady'; data: { queryId: bigint; response: StagingXcmV5Response } }
  /**
   * Query response has been received and query is removed. The registered notification has
   * been dispatched and executed successfully.
   **/
  | { name: 'Notified'; data: { queryId: bigint; palletIndex: number; callIndex: number } }
  /**
   * Query response has been received and query is removed. The registered notification
   * could not be dispatched because the dispatch weight is greater than the maximum weight
   * originally budgeted by this runtime for the query result.
   **/
  | {
      name: 'NotifyOverweight';
      data: {
        queryId: bigint;
        palletIndex: number;
        callIndex: number;
        actualWeight: SpWeightsWeightV2Weight;
        maxBudgetedWeight: SpWeightsWeightV2Weight;
      };
    }
  /**
   * Query response has been received and query is removed. There was a general error with
   * dispatching the notification call.
   **/
  | { name: 'NotifyDispatchError'; data: { queryId: bigint; palletIndex: number; callIndex: number } }
  /**
   * Query response has been received and query is removed. The dispatch was unable to be
   * decoded into a `Call`; this might be due to dispatch function having a signature which
   * is not `(origin, QueryId, Response)`.
   **/
  | { name: 'NotifyDecodeFailed'; data: { queryId: bigint; palletIndex: number; callIndex: number } }
  /**
   * Expected query response has been received but the origin location of the response does
   * not match that expected. The query remains registered for a later, valid, response to
   * be received and acted upon.
   **/
  | {
      name: 'InvalidResponder';
      data: { origin: StagingXcmV5Location; queryId: bigint; expectedLocation?: StagingXcmV5Location | undefined };
    }
  /**
   * Expected query response has been received but the expected origin location placed in
   * storage by this runtime previously cannot be decoded. The query remains registered.
   *
   * This is unexpected (since a location placed in storage in a previously executing
   * runtime should be readable prior to query timeout) and dangerous since the possibly
   * valid response will be dropped. Manual governance intervention is probably going to be
   * needed.
   **/
  | { name: 'InvalidResponderVersion'; data: { origin: StagingXcmV5Location; queryId: bigint } }
  /**
   * Received query response has been read and removed.
   **/
  | { name: 'ResponseTaken'; data: { queryId: bigint } }
  /**
   * Some assets have been placed in an asset trap.
   **/
  | { name: 'AssetsTrapped'; data: { hash: H256; origin: StagingXcmV5Location; assets: XcmVersionedAssets } }
  /**
   * An XCM version change notification message has been attempted to be sent.
   *
   * The cost of sending it (borne by the chain) is included.
   **/
  | {
      name: 'VersionChangeNotified';
      data: {
        destination: StagingXcmV5Location;
        result: number;
        cost: StagingXcmV5AssetAssets;
        messageId: FixedBytes<32>;
      };
    }
  /**
   * The supported version of a location has been changed. This might be through an
   * automatic notification or a manual intervention.
   **/
  | { name: 'SupportedVersionChanged'; data: { location: StagingXcmV5Location; version: number } }
  /**
   * A given location which had a version change subscription was dropped owing to an error
   * sending the notification to it.
   **/
  | { name: 'NotifyTargetSendFail'; data: { location: StagingXcmV5Location; queryId: bigint; error: XcmV5TraitsError } }
  /**
   * A given location which had a version change subscription was dropped owing to an error
   * migrating the location to our new XCM format.
   **/
  | { name: 'NotifyTargetMigrationFail'; data: { location: XcmVersionedLocation; queryId: bigint } }
  /**
   * Expected query response has been received but the expected querier location placed in
   * storage by this runtime previously cannot be decoded. The query remains registered.
   *
   * This is unexpected (since a location placed in storage in a previously executing
   * runtime should be readable prior to query timeout) and dangerous since the possibly
   * valid response will be dropped. Manual governance intervention is probably going to be
   * needed.
   **/
  | { name: 'InvalidQuerierVersion'; data: { origin: StagingXcmV5Location; queryId: bigint } }
  /**
   * Expected query response has been received but the querier location of the response does
   * not match the expected. The query remains registered for a later, valid, response to
   * be received and acted upon.
   **/
  | {
      name: 'InvalidQuerier';
      data: {
        origin: StagingXcmV5Location;
        queryId: bigint;
        expectedQuerier: StagingXcmV5Location;
        maybeActualQuerier?: StagingXcmV5Location | undefined;
      };
    }
  /**
   * A remote has requested XCM version change notification from us and we have honored it.
   * A version information message is sent to them and its cost is included.
   **/
  | {
      name: 'VersionNotifyStarted';
      data: { destination: StagingXcmV5Location; cost: StagingXcmV5AssetAssets; messageId: FixedBytes<32> };
    }
  /**
   * We have requested that a remote chain send us XCM version change notifications.
   **/
  | {
      name: 'VersionNotifyRequested';
      data: { destination: StagingXcmV5Location; cost: StagingXcmV5AssetAssets; messageId: FixedBytes<32> };
    }
  /**
   * We have requested that a remote chain stops sending us XCM version change
   * notifications.
   **/
  | {
      name: 'VersionNotifyUnrequested';
      data: { destination: StagingXcmV5Location; cost: StagingXcmV5AssetAssets; messageId: FixedBytes<32> };
    }
  /**
   * Fees were paid from a location for an operation (often for using `SendXcm`).
   **/
  | { name: 'FeesPaid'; data: { paying: StagingXcmV5Location; fees: StagingXcmV5AssetAssets } }
  /**
   * Some assets have been claimed from an asset trap
   **/
  | { name: 'AssetsClaimed'; data: { hash: H256; origin: StagingXcmV5Location; assets: XcmVersionedAssets } }
  /**
   * A XCM version migration finished.
   **/
  | { name: 'VersionMigrationFinished'; data: { version: number } }
  /**
   * An `aliaser` location was authorized by `target` to alias it, authorization valid until
   * `expiry` block number.
   **/
  | {
      name: 'AliasAuthorized';
      data: { aliaser: StagingXcmV5Location; target: StagingXcmV5Location; expiry?: bigint | undefined };
    }
  /**
   * `target` removed alias authorization for `aliaser`.
   **/
  | { name: 'AliasAuthorizationRemoved'; data: { aliaser: StagingXcmV5Location; target: StagingXcmV5Location } }
  /**
   * `target` removed all alias authorizations.
   **/
  | { name: 'AliasesAuthorizationsRemoved'; data: { target: StagingXcmV5Location } };

export type StagingXcmV5TraitsOutcome =
  | { type: 'Complete'; value: { used: SpWeightsWeightV2Weight } }
  | { type: 'Incomplete'; value: { used: SpWeightsWeightV2Weight; error: XcmV5TraitsError } }
  | { type: 'Error'; value: { error: XcmV5TraitsError } };

export type XcmV5TraitsError =
  | { type: 'Overflow' }
  | { type: 'Unimplemented' }
  | { type: 'UntrustedReserveLocation' }
  | { type: 'UntrustedTeleportLocation' }
  | { type: 'LocationFull' }
  | { type: 'LocationNotInvertible' }
  | { type: 'BadOrigin' }
  | { type: 'InvalidLocation' }
  | { type: 'AssetNotFound' }
  | { type: 'FailedToTransactAsset' }
  | { type: 'NotWithdrawable' }
  | { type: 'LocationCannotHold' }
  | { type: 'ExceedsMaxMessageSize' }
  | { type: 'DestinationUnsupported' }
  | { type: 'Transport' }
  | { type: 'Unroutable' }
  | { type: 'UnknownClaim' }
  | { type: 'FailedToDecode' }
  | { type: 'MaxWeightInvalid' }
  | { type: 'NotHoldingFees' }
  | { type: 'TooExpensive' }
  | { type: 'Trap'; value: bigint }
  | { type: 'ExpectationFalse' }
  | { type: 'PalletNotFound' }
  | { type: 'NameMismatch' }
  | { type: 'VersionIncompatible' }
  | { type: 'HoldingWouldOverflow' }
  | { type: 'ExportError' }
  | { type: 'ReanchorFailed' }
  | { type: 'NoDeal' }
  | { type: 'FeesNotMet' }
  | { type: 'LockError' }
  | { type: 'NoPermission' }
  | { type: 'Unanchored' }
  | { type: 'NotDepositable' }
  | { type: 'TooManyAssets' }
  | { type: 'UnhandledXcmVersion' }
  | { type: 'WeightLimitReached'; value: SpWeightsWeightV2Weight }
  | { type: 'Barrier' }
  | { type: 'WeightNotComputable' }
  | { type: 'ExceedsStackLimit' };

export type StagingXcmV5Xcm = Array<StagingXcmV5Instruction>;

export type StagingXcmV5Instruction =
  | { type: 'WithdrawAsset'; value: StagingXcmV5AssetAssets }
  | { type: 'ReserveAssetDeposited'; value: StagingXcmV5AssetAssets }
  | { type: 'ReceiveTeleportedAsset'; value: StagingXcmV5AssetAssets }
  | {
      type: 'QueryResponse';
      value: {
        queryId: bigint;
        response: StagingXcmV5Response;
        maxWeight: SpWeightsWeightV2Weight;
        querier?: StagingXcmV5Location | undefined;
      };
    }
  | { type: 'TransferAsset'; value: { assets: StagingXcmV5AssetAssets; beneficiary: StagingXcmV5Location } }
  | {
      type: 'TransferReserveAsset';
      value: { assets: StagingXcmV5AssetAssets; dest: StagingXcmV5Location; xcm: StagingXcmV5Xcm };
    }
  | {
      type: 'Transact';
      value: {
        originKind: XcmV3OriginKind;
        fallbackMaxWeight?: SpWeightsWeightV2Weight | undefined;
        call: XcmDoubleEncoded;
      };
    }
  | { type: 'HrmpNewChannelOpenRequest'; value: { sender: number; maxMessageSize: number; maxCapacity: number } }
  | { type: 'HrmpChannelAccepted'; value: { recipient: number } }
  | { type: 'HrmpChannelClosing'; value: { initiator: number; sender: number; recipient: number } }
  | { type: 'ClearOrigin' }
  | { type: 'DescendOrigin'; value: StagingXcmV5Junctions }
  | { type: 'ReportError'; value: StagingXcmV5QueryResponseInfo }
  | { type: 'DepositAsset'; value: { assets: StagingXcmV5AssetAssetFilter; beneficiary: StagingXcmV5Location } }
  | {
      type: 'DepositReserveAsset';
      value: { assets: StagingXcmV5AssetAssetFilter; dest: StagingXcmV5Location; xcm: StagingXcmV5Xcm };
    }
  | {
      type: 'ExchangeAsset';
      value: { give: StagingXcmV5AssetAssetFilter; want: StagingXcmV5AssetAssets; maximal: boolean };
    }
  | {
      type: 'InitiateReserveWithdraw';
      value: { assets: StagingXcmV5AssetAssetFilter; reserve: StagingXcmV5Location; xcm: StagingXcmV5Xcm };
    }
  | {
      type: 'InitiateTeleport';
      value: { assets: StagingXcmV5AssetAssetFilter; dest: StagingXcmV5Location; xcm: StagingXcmV5Xcm };
    }
  | {
      type: 'ReportHolding';
      value: { responseInfo: StagingXcmV5QueryResponseInfo; assets: StagingXcmV5AssetAssetFilter };
    }
  | { type: 'BuyExecution'; value: { fees: StagingXcmV5Asset; weightLimit: XcmV3WeightLimit } }
  | { type: 'RefundSurplus' }
  | { type: 'SetErrorHandler'; value: StagingXcmV5Xcm }
  | { type: 'SetAppendix'; value: StagingXcmV5Xcm }
  | { type: 'ClearError' }
  | { type: 'ClaimAsset'; value: { assets: StagingXcmV5AssetAssets; ticket: StagingXcmV5Location } }
  | { type: 'Trap'; value: bigint }
  | { type: 'SubscribeVersion'; value: { queryId: bigint; maxResponseWeight: SpWeightsWeightV2Weight } }
  | { type: 'UnsubscribeVersion' }
  | { type: 'BurnAsset'; value: StagingXcmV5AssetAssets }
  | { type: 'ExpectAsset'; value: StagingXcmV5AssetAssets }
  | { type: 'ExpectOrigin'; value?: StagingXcmV5Location | undefined }
  | { type: 'ExpectError'; value?: [number, XcmV5TraitsError] | undefined }
  | { type: 'ExpectTransactStatus'; value: XcmV3MaybeErrorCode }
  | { type: 'QueryPallet'; value: { moduleName: Bytes; responseInfo: StagingXcmV5QueryResponseInfo } }
  | {
      type: 'ExpectPallet';
      value: { index: number; name: Bytes; moduleName: Bytes; crateMajor: number; minCrateMinor: number };
    }
  | { type: 'ReportTransactStatus'; value: StagingXcmV5QueryResponseInfo }
  | { type: 'ClearTransactStatus' }
  | { type: 'UniversalOrigin'; value: StagingXcmV5Junction }
  | {
      type: 'ExportMessage';
      value: { network: StagingXcmV5JunctionNetworkId; destination: StagingXcmV5Junctions; xcm: StagingXcmV5Xcm };
    }
  | { type: 'LockAsset'; value: { asset: StagingXcmV5Asset; unlocker: StagingXcmV5Location } }
  | { type: 'UnlockAsset'; value: { asset: StagingXcmV5Asset; target: StagingXcmV5Location } }
  | { type: 'NoteUnlockable'; value: { asset: StagingXcmV5Asset; owner: StagingXcmV5Location } }
  | { type: 'RequestUnlock'; value: { asset: StagingXcmV5Asset; locker: StagingXcmV5Location } }
  | { type: 'SetFeesMode'; value: { jitWithdraw: boolean } }
  | { type: 'SetTopic'; value: FixedBytes<32> }
  | { type: 'ClearTopic' }
  | { type: 'AliasOrigin'; value: StagingXcmV5Location }
  | {
      type: 'UnpaidExecution';
      value: { weightLimit: XcmV3WeightLimit; checkOrigin?: StagingXcmV5Location | undefined };
    }
  | { type: 'PayFees'; value: { asset: StagingXcmV5Asset } }
  | {
      type: 'InitiateTransfer';
      value: {
        destination: StagingXcmV5Location;
        remoteFees?: StagingXcmV5AssetAssetTransferFilter | undefined;
        preserveOrigin: boolean;
        assets: Array<StagingXcmV5AssetAssetTransferFilter>;
        remoteXcm: StagingXcmV5Xcm;
      };
    }
  | { type: 'ExecuteWithOrigin'; value: { descendantOrigin?: StagingXcmV5Junctions | undefined; xcm: StagingXcmV5Xcm } }
  | { type: 'SetHints'; value: { hints: Array<StagingXcmV5Hint> } };

export type StagingXcmV5AssetAssets = Array<StagingXcmV5Asset>;

export type StagingXcmV5Asset = { id: StagingXcmV5AssetAssetId; fun: StagingXcmV5AssetFungibility };

export type StagingXcmV5AssetAssetId = StagingXcmV5Location;

export type StagingXcmV5AssetFungibility =
  | { type: 'Fungible'; value: bigint }
  | { type: 'NonFungible'; value: StagingXcmV5AssetAssetInstance };

export type StagingXcmV5AssetAssetInstance =
  | { type: 'Undefined' }
  | { type: 'Index'; value: bigint }
  | { type: 'Array4'; value: FixedBytes<4> }
  | { type: 'Array8'; value: FixedBytes<8> }
  | { type: 'Array16'; value: FixedBytes<16> }
  | { type: 'Array32'; value: FixedBytes<32> };

export type StagingXcmV5Response =
  | { type: 'Null' }
  | { type: 'Assets'; value: StagingXcmV5AssetAssets }
  | { type: 'ExecutionResult'; value?: [number, XcmV5TraitsError] | undefined }
  | { type: 'Version'; value: number }
  | { type: 'PalletsInfo'; value: Array<StagingXcmV5PalletInfo> }
  | { type: 'DispatchResult'; value: XcmV3MaybeErrorCode };

export type StagingXcmV5PalletInfo = {
  index: number;
  name: Bytes;
  moduleName: Bytes;
  major: number;
  minor: number;
  patch: number;
};

export type XcmV3MaybeErrorCode =
  | { type: 'Success' }
  | { type: 'Error'; value: Bytes }
  | { type: 'TruncatedError'; value: Bytes };

export type XcmV3OriginKind = 'Native' | 'SovereignAccount' | 'Superuser' | 'Xcm';

export type XcmDoubleEncoded = { encoded: Bytes };

export type StagingXcmV5QueryResponseInfo = {
  destination: StagingXcmV5Location;
  queryId: bigint;
  maxWeight: SpWeightsWeightV2Weight;
};

export type StagingXcmV5AssetAssetFilter =
  | { type: 'Definite'; value: StagingXcmV5AssetAssets }
  | { type: 'Wild'; value: StagingXcmV5AssetWildAsset };

export type StagingXcmV5AssetWildAsset =
  | { type: 'All' }
  | { type: 'AllOf'; value: { id: StagingXcmV5AssetAssetId; fun: StagingXcmV5AssetWildFungibility } }
  | { type: 'AllCounted'; value: number }
  | {
      type: 'AllOfCounted';
      value: { id: StagingXcmV5AssetAssetId; fun: StagingXcmV5AssetWildFungibility; count: number };
    };

export type StagingXcmV5AssetWildFungibility = 'Fungible' | 'NonFungible';

export type XcmV3WeightLimit = { type: 'Unlimited' } | { type: 'Limited'; value: SpWeightsWeightV2Weight };

export type StagingXcmV5AssetAssetTransferFilter =
  | { type: 'Teleport'; value: StagingXcmV5AssetAssetFilter }
  | { type: 'ReserveDeposit'; value: StagingXcmV5AssetAssetFilter }
  | { type: 'ReserveWithdraw'; value: StagingXcmV5AssetAssetFilter };

export type StagingXcmV5Hint = { type: 'AssetClaimer'; value: { location: StagingXcmV5Location } };

export type XcmV3TraitsSendError =
  | 'NotApplicable'
  | 'Transport'
  | 'Unroutable'
  | 'DestinationUnsupported'
  | 'ExceedsMaxMessageSize'
  | 'MissingArgument'
  | 'Fees';

export type XcmVersionedAssets =
  | { type: 'V3'; value: XcmV3MultiassetMultiAssets }
  | { type: 'V4'; value: StagingXcmV4AssetAssets }
  | { type: 'V5'; value: StagingXcmV5AssetAssets };

export type XcmV3MultiassetMultiAssets = Array<XcmV3MultiassetMultiAsset>;

export type XcmV3MultiassetMultiAsset = { id: XcmV3MultiassetAssetId; fun: XcmV3MultiassetFungibility };

export type XcmV3MultiassetAssetId =
  | { type: 'Concrete'; value: StagingXcmV3MultilocationMultiLocation }
  | { type: 'Abstract'; value: FixedBytes<32> };

export type StagingXcmV3MultilocationMultiLocation = { parents: number; interior: XcmV3Junctions };

export type XcmV3Junctions =
  | { type: 'Here' }
  | { type: 'X1'; value: XcmV3Junction }
  | { type: 'X2'; value: [XcmV3Junction, XcmV3Junction] }
  | { type: 'X3'; value: [XcmV3Junction, XcmV3Junction, XcmV3Junction] }
  | { type: 'X4'; value: [XcmV3Junction, XcmV3Junction, XcmV3Junction, XcmV3Junction] }
  | { type: 'X5'; value: [XcmV3Junction, XcmV3Junction, XcmV3Junction, XcmV3Junction, XcmV3Junction] }
  | { type: 'X6'; value: [XcmV3Junction, XcmV3Junction, XcmV3Junction, XcmV3Junction, XcmV3Junction, XcmV3Junction] }
  | {
      type: 'X7';
      value: [XcmV3Junction, XcmV3Junction, XcmV3Junction, XcmV3Junction, XcmV3Junction, XcmV3Junction, XcmV3Junction];
    }
  | {
      type: 'X8';
      value: [
        XcmV3Junction,
        XcmV3Junction,
        XcmV3Junction,
        XcmV3Junction,
        XcmV3Junction,
        XcmV3Junction,
        XcmV3Junction,
        XcmV3Junction,
      ];
    };

export type XcmV3Junction =
  | { type: 'Parachain'; value: number }
  | { type: 'AccountId32'; value: { network?: XcmV3JunctionNetworkId | undefined; id: FixedBytes<32> } }
  | { type: 'AccountIndex64'; value: { network?: XcmV3JunctionNetworkId | undefined; index: bigint } }
  | { type: 'AccountKey20'; value: { network?: XcmV3JunctionNetworkId | undefined; key: FixedBytes<20> } }
  | { type: 'PalletInstance'; value: number }
  | { type: 'GeneralIndex'; value: bigint }
  | { type: 'GeneralKey'; value: { length: number; data: FixedBytes<32> } }
  | { type: 'OnlyChild' }
  | { type: 'Plurality'; value: { id: XcmV3JunctionBodyId; part: XcmV3JunctionBodyPart } }
  | { type: 'GlobalConsensus'; value: XcmV3JunctionNetworkId };

export type XcmV3JunctionNetworkId =
  | { type: 'ByGenesis'; value: FixedBytes<32> }
  | { type: 'ByFork'; value: { blockNumber: bigint; blockHash: FixedBytes<32> } }
  | { type: 'Polkadot' }
  | { type: 'Kusama' }
  | { type: 'Westend' }
  | { type: 'Rococo' }
  | { type: 'Wococo' }
  | { type: 'Ethereum'; value: { chainId: bigint } }
  | { type: 'BitcoinCore' }
  | { type: 'BitcoinCash' }
  | { type: 'PolkadotBulletin' };

export type XcmV3MultiassetFungibility =
  | { type: 'Fungible'; value: bigint }
  | { type: 'NonFungible'; value: XcmV3MultiassetAssetInstance };

export type XcmV3MultiassetAssetInstance =
  | { type: 'Undefined' }
  | { type: 'Index'; value: bigint }
  | { type: 'Array4'; value: FixedBytes<4> }
  | { type: 'Array8'; value: FixedBytes<8> }
  | { type: 'Array16'; value: FixedBytes<16> }
  | { type: 'Array32'; value: FixedBytes<32> };

export type StagingXcmV4AssetAssets = Array<StagingXcmV4Asset>;

export type StagingXcmV4Asset = { id: StagingXcmV4AssetAssetId; fun: StagingXcmV4AssetFungibility };

export type StagingXcmV4AssetAssetId = StagingXcmV4Location;

export type StagingXcmV4Location = { parents: number; interior: StagingXcmV4Junctions };

export type StagingXcmV4Junctions =
  | { type: 'Here' }
  | { type: 'X1'; value: FixedArray<StagingXcmV4Junction, 1> }
  | { type: 'X2'; value: FixedArray<StagingXcmV4Junction, 2> }
  | { type: 'X3'; value: FixedArray<StagingXcmV4Junction, 3> }
  | { type: 'X4'; value: FixedArray<StagingXcmV4Junction, 4> }
  | { type: 'X5'; value: FixedArray<StagingXcmV4Junction, 5> }
  | { type: 'X6'; value: FixedArray<StagingXcmV4Junction, 6> }
  | { type: 'X7'; value: FixedArray<StagingXcmV4Junction, 7> }
  | { type: 'X8'; value: FixedArray<StagingXcmV4Junction, 8> };

export type StagingXcmV4Junction =
  | { type: 'Parachain'; value: number }
  | { type: 'AccountId32'; value: { network?: StagingXcmV4JunctionNetworkId | undefined; id: FixedBytes<32> } }
  | { type: 'AccountIndex64'; value: { network?: StagingXcmV4JunctionNetworkId | undefined; index: bigint } }
  | { type: 'AccountKey20'; value: { network?: StagingXcmV4JunctionNetworkId | undefined; key: FixedBytes<20> } }
  | { type: 'PalletInstance'; value: number }
  | { type: 'GeneralIndex'; value: bigint }
  | { type: 'GeneralKey'; value: { length: number; data: FixedBytes<32> } }
  | { type: 'OnlyChild' }
  | { type: 'Plurality'; value: { id: XcmV3JunctionBodyId; part: XcmV3JunctionBodyPart } }
  | { type: 'GlobalConsensus'; value: StagingXcmV4JunctionNetworkId };

export type StagingXcmV4JunctionNetworkId =
  | { type: 'ByGenesis'; value: FixedBytes<32> }
  | { type: 'ByFork'; value: { blockNumber: bigint; blockHash: FixedBytes<32> } }
  | { type: 'Polkadot' }
  | { type: 'Kusama' }
  | { type: 'Westend' }
  | { type: 'Rococo' }
  | { type: 'Wococo' }
  | { type: 'Ethereum'; value: { chainId: bigint } }
  | { type: 'BitcoinCore' }
  | { type: 'BitcoinCash' }
  | { type: 'PolkadotBulletin' };

export type StagingXcmV4AssetFungibility =
  | { type: 'Fungible'; value: bigint }
  | { type: 'NonFungible'; value: StagingXcmV4AssetAssetInstance };

export type StagingXcmV4AssetAssetInstance =
  | { type: 'Undefined' }
  | { type: 'Index'; value: bigint }
  | { type: 'Array4'; value: FixedBytes<4> }
  | { type: 'Array8'; value: FixedBytes<8> }
  | { type: 'Array16'; value: FixedBytes<16> }
  | { type: 'Array32'; value: FixedBytes<32> };

export type XcmVersionedLocation =
  | { type: 'V3'; value: StagingXcmV3MultilocationMultiLocation }
  | { type: 'V4'; value: StagingXcmV4Location }
  | { type: 'V5'; value: StagingXcmV5Location };

/**
 * The `Event` enum of this pallet
 **/
export type CumulusPalletXcmEvent =
  /**
   * Downward message is invalid XCM.
   * \[ id \]
   **/
  | { name: 'InvalidFormat'; data: FixedBytes<32> }
  /**
   * Downward message is unsupported version of XCM.
   * \[ id \]
   **/
  | { name: 'UnsupportedVersion'; data: FixedBytes<32> }
  /**
   * Downward message executed with the given outcome.
   * \[ id, outcome \]
   **/
  | { name: 'ExecutedDownward'; data: [FixedBytes<32>, StagingXcmV5TraitsOutcome] };

/**
 * The `Event` enum of this pallet
 **/
export type PalletXcmBridgeHubRouterEvent =
  /**
   * Delivery fee factor has been decreased.
   **/
  | {
      name: 'DeliveryFeeFactorDecreased';
      data: {
        /**
         * New value of the `DeliveryFeeFactor`.
         **/
        newValue: FixedU128;
      };
    }
  /**
   * Delivery fee factor has been increased.
   **/
  | {
      name: 'DeliveryFeeFactorIncreased';
      data: {
        /**
         * New value of the `DeliveryFeeFactor`.
         **/
        newValue: FixedU128;
      };
    };

/**
 * The `Event` enum of this pallet
 **/
export type PalletMessageQueueEvent =
  /**
   * Message discarded due to an error in the `MessageProcessor` (usually a format error).
   **/
  | {
      name: 'ProcessingFailed';
      data: {
        /**
         * The `blake2_256` hash of the message.
         **/
        id: H256;

        /**
         * The queue of the message.
         **/
        origin: CumulusPrimitivesCoreAggregateMessageOrigin;

        /**
         * The error that occurred.
         *
         * This error is pretty opaque. More fine-grained errors need to be emitted as events
         * by the `MessageProcessor`.
         **/
        error: FrameSupportMessagesProcessMessageError;
      };
    }
  /**
   * Message is processed.
   **/
  | {
      name: 'Processed';
      data: {
        /**
         * The `blake2_256` hash of the message.
         **/
        id: H256;

        /**
         * The queue of the message.
         **/
        origin: CumulusPrimitivesCoreAggregateMessageOrigin;

        /**
         * How much weight was used to process the message.
         **/
        weightUsed: SpWeightsWeightV2Weight;

        /**
         * Whether the message was processed.
         *
         * Note that this does not mean that the underlying `MessageProcessor` was internally
         * successful. It *solely* means that the MQ pallet will treat this as a success
         * condition and discard the message. Any internal error needs to be emitted as events
         * by the `MessageProcessor`.
         **/
        success: boolean;
      };
    }
  /**
   * Message placed in overweight queue.
   **/
  | {
      name: 'OverweightEnqueued';
      data: {
        /**
         * The `blake2_256` hash of the message.
         **/
        id: FixedBytes<32>;

        /**
         * The queue of the message.
         **/
        origin: CumulusPrimitivesCoreAggregateMessageOrigin;

        /**
         * The page of the message.
         **/
        pageIndex: number;

        /**
         * The index of the message within the page.
         **/
        messageIndex: number;
      };
    }
  /**
   * This page was reaped.
   **/
  | {
      name: 'PageReaped';
      data: {
        /**
         * The queue of the page.
         **/
        origin: CumulusPrimitivesCoreAggregateMessageOrigin;

        /**
         * The index of the page.
         **/
        index: number;
      };
    };

export type CumulusPrimitivesCoreAggregateMessageOrigin =
  | { type: 'Here' }
  | { type: 'Parent' }
  | { type: 'Sibling'; value: PolkadotParachainPrimitivesPrimitivesId };

export type PolkadotParachainPrimitivesPrimitivesId = number;

export type FrameSupportMessagesProcessMessageError =
  | { type: 'BadFormat' }
  | { type: 'Corrupt' }
  | { type: 'Unsupported' }
  | { type: 'Overweight'; value: SpWeightsWeightV2Weight }
  | { type: 'Yield' }
  | { type: 'StackLimitReached' };

/**
 * The `Event` enum of this pallet
 **/
export type SnowbridgePalletSystemFrontendEvent =
  /**
   * An XCM was sent
   **/
  | {
      name: 'MessageSent';
      data: {
        origin: StagingXcmV5Location;
        destination: StagingXcmV5Location;
        message: StagingXcmV5Xcm;
        messageId: FixedBytes<32>;
      };
    }
  /**
   * Set OperatingMode
   **/
  | { name: 'ExportOperatingModeChanged'; data: { mode: SnowbridgeCoreOperatingModeBasicOperatingMode } };

export type SnowbridgeCoreOperatingModeBasicOperatingMode = 'Normal' | 'Halted';

/**
 * The `Event` enum of this pallet
 **/
export type PalletUtilityEvent =
  /**
   * Batch of dispatches did not complete fully. Index of first failing dispatch given, as
   * well as the error.
   **/
  | { name: 'BatchInterrupted'; data: { index: number; error: DispatchError } }
  /**
   * Batch of dispatches completed fully with no error.
   **/
  | { name: 'BatchCompleted' }
  /**
   * Batch of dispatches completed but has errors.
   **/
  | { name: 'BatchCompletedWithErrors' }
  /**
   * A single item within a Batch of dispatches has completed with no error.
   **/
  | { name: 'ItemCompleted' }
  /**
   * A single item within a Batch of dispatches has completed with error.
   **/
  | { name: 'ItemFailed'; data: { error: DispatchError } }
  /**
   * A call was dispatched.
   **/
  | { name: 'DispatchedAs'; data: { result: Result<[], DispatchError> } }
  /**
   * Main call was dispatched.
   **/
  | { name: 'IfElseMainSuccess' }
  /**
   * The fallback call was dispatched.
   **/
  | { name: 'IfElseFallbackCalled'; data: { mainError: DispatchError } };

/**
 * The `Event` enum of this pallet
 **/
export type PalletMultisigEvent =
  /**
   * A new multisig operation has begun.
   **/
  | { name: 'NewMultisig'; data: { approving: AccountId32; multisig: AccountId32; callHash: FixedBytes<32> } }
  /**
   * A multisig operation has been approved by someone.
   **/
  | {
      name: 'MultisigApproval';
      data: {
        approving: AccountId32;
        timepoint: PalletMultisigTimepoint;
        multisig: AccountId32;
        callHash: FixedBytes<32>;
      };
    }
  /**
   * A multisig operation has been executed.
   **/
  | {
      name: 'MultisigExecuted';
      data: {
        approving: AccountId32;
        timepoint: PalletMultisigTimepoint;
        multisig: AccountId32;
        callHash: FixedBytes<32>;
        result: Result<[], DispatchError>;
      };
    }
  /**
   * A multisig operation has been cancelled.
   **/
  | {
      name: 'MultisigCancelled';
      data: {
        cancelling: AccountId32;
        timepoint: PalletMultisigTimepoint;
        multisig: AccountId32;
        callHash: FixedBytes<32>;
      };
    }
  /**
   * The deposit for a multisig operation has been updated/poked.
   **/
  | {
      name: 'DepositPoked';
      data: { who: AccountId32; callHash: FixedBytes<32>; oldDeposit: bigint; newDeposit: bigint };
    };

export type PalletMultisigTimepoint = { height: number; index: number };

/**
 * The `Event` enum of this pallet
 **/
export type PalletProxyEvent =
  /**
   * A proxy was executed correctly, with the given.
   **/
  | { name: 'ProxyExecuted'; data: { result: Result<[], DispatchError> } }
  /**
   * A pure account has been created by new proxy with given
   * disambiguation index and proxy type.
   **/
  | {
      name: 'PureCreated';
      data: {
        pure: AccountId32;
        who: AccountId32;
        proxyType: AssetHubWestendRuntimeProxyType;
        disambiguationIndex: number;
      };
    }
  /**
   * A pure proxy was killed by its spawner.
   **/
  | {
      name: 'PureKilled';
      data: {
        pure: AccountId32;
        spawner: AccountId32;
        proxyType: AssetHubWestendRuntimeProxyType;
        disambiguationIndex: number;
      };
    }
  /**
   * An announcement was placed to make a call in the future.
   **/
  | { name: 'Announced'; data: { real: AccountId32; proxy: AccountId32; callHash: H256 } }
  /**
   * A proxy was added.
   **/
  | {
      name: 'ProxyAdded';
      data: {
        delegator: AccountId32;
        delegatee: AccountId32;
        proxyType: AssetHubWestendRuntimeProxyType;
        delay: number;
      };
    }
  /**
   * A proxy was removed.
   **/
  | {
      name: 'ProxyRemoved';
      data: {
        delegator: AccountId32;
        delegatee: AccountId32;
        proxyType: AssetHubWestendRuntimeProxyType;
        delay: number;
      };
    }
  /**
   * A deposit stored for proxies or announcements was poked / updated.
   **/
  | {
      name: 'DepositPoked';
      data: { who: AccountId32; kind: PalletProxyDepositKind; oldDeposit: bigint; newDeposit: bigint };
    };

export type AssetHubWestendRuntimeProxyType =
  | 'Any'
  | 'NonTransfer'
  | 'CancelProxy'
  | 'Assets'
  | 'AssetOwner'
  | 'AssetManager'
  | 'Collator'
  | 'Governance'
  | 'Staking'
  | 'NominationPools'
  | 'OldSudoBalances'
  | 'OldIdentityJudgement'
  | 'OldAuction'
  | 'OldParaRegistration';

export type PalletProxyDepositKind = 'Proxies' | 'Announcements';

/**
 * The `Event` enum of this pallet
 **/
export type PalletIndicesEvent =
  /**
   * A account index was assigned.
   **/
  | { name: 'IndexAssigned'; data: { who: AccountId32; index: number } }
  /**
   * A account index has been freed up (unassigned).
   **/
  | { name: 'IndexFreed'; data: { index: number } }
  /**
   * A account index has been frozen to its current account ID.
   **/
  | { name: 'IndexFrozen'; data: { index: number; who: AccountId32 } }
  /**
   * A deposit to reserve an index has been poked/reconsidered.
   **/
  | { name: 'DepositPoked'; data: { who: AccountId32; index: number; oldDeposit: bigint; newDeposit: bigint } };

/**
 * The `Event` enum of this pallet
 **/
export type PalletAssetsEvent =
  /**
   * Some asset class was created.
   **/
  | { name: 'Created'; data: { assetId: number; creator: AccountId32; owner: AccountId32 } }
  /**
   * Some assets were issued.
   **/
  | { name: 'Issued'; data: { assetId: number; owner: AccountId32; amount: bigint } }
  /**
   * Some assets were transferred.
   **/
  | { name: 'Transferred'; data: { assetId: number; from: AccountId32; to: AccountId32; amount: bigint } }
  /**
   * Some assets were destroyed.
   **/
  | { name: 'Burned'; data: { assetId: number; owner: AccountId32; balance: bigint } }
  /**
   * The management team changed.
   **/
  | { name: 'TeamChanged'; data: { assetId: number; issuer: AccountId32; admin: AccountId32; freezer: AccountId32 } }
  /**
   * The owner changed.
   **/
  | { name: 'OwnerChanged'; data: { assetId: number; owner: AccountId32 } }
  /**
   * Some account `who` was frozen.
   **/
  | { name: 'Frozen'; data: { assetId: number; who: AccountId32 } }
  /**
   * Some account `who` was thawed.
   **/
  | { name: 'Thawed'; data: { assetId: number; who: AccountId32 } }
  /**
   * Some asset `asset_id` was frozen.
   **/
  | { name: 'AssetFrozen'; data: { assetId: number } }
  /**
   * Some asset `asset_id` was thawed.
   **/
  | { name: 'AssetThawed'; data: { assetId: number } }
  /**
   * Accounts were destroyed for given asset.
   **/
  | { name: 'AccountsDestroyed'; data: { assetId: number; accountsDestroyed: number; accountsRemaining: number } }
  /**
   * Approvals were destroyed for given asset.
   **/
  | { name: 'ApprovalsDestroyed'; data: { assetId: number; approvalsDestroyed: number; approvalsRemaining: number } }
  /**
   * An asset class is in the process of being destroyed.
   **/
  | { name: 'DestructionStarted'; data: { assetId: number } }
  /**
   * An asset class was destroyed.
   **/
  | { name: 'Destroyed'; data: { assetId: number } }
  /**
   * Some asset class was force-created.
   **/
  | { name: 'ForceCreated'; data: { assetId: number; owner: AccountId32 } }
  /**
   * New metadata has been set for an asset.
   **/
  | { name: 'MetadataSet'; data: { assetId: number; name: Bytes; symbol: Bytes; decimals: number; isFrozen: boolean } }
  /**
   * Metadata has been cleared for an asset.
   **/
  | { name: 'MetadataCleared'; data: { assetId: number } }
  /**
   * (Additional) funds have been approved for transfer to a destination account.
   **/
  | { name: 'ApprovedTransfer'; data: { assetId: number; source: AccountId32; delegate: AccountId32; amount: bigint } }
  /**
   * An approval for account `delegate` was cancelled by `owner`.
   **/
  | { name: 'ApprovalCancelled'; data: { assetId: number; owner: AccountId32; delegate: AccountId32 } }
  /**
   * An `amount` was transferred in its entirety from `owner` to `destination` by
   * the approved `delegate`.
   **/
  | {
      name: 'TransferredApproved';
      data: { assetId: number; owner: AccountId32; delegate: AccountId32; destination: AccountId32; amount: bigint };
    }
  /**
   * An asset has had its attributes changed by the `Force` origin.
   **/
  | { name: 'AssetStatusChanged'; data: { assetId: number } }
  /**
   * The min_balance of an asset has been updated by the asset owner.
   **/
  | { name: 'AssetMinBalanceChanged'; data: { assetId: number; newMinBalance: bigint } }
  /**
   * Some account `who` was created with a deposit from `depositor`.
   **/
  | { name: 'Touched'; data: { assetId: number; who: AccountId32; depositor: AccountId32 } }
  /**
   * Some account `who` was blocked.
   **/
  | { name: 'Blocked'; data: { assetId: number; who: AccountId32 } }
  /**
   * Some assets were deposited (e.g. for transaction fees).
   **/
  | { name: 'Deposited'; data: { assetId: number; who: AccountId32; amount: bigint } }
  /**
   * Some assets were withdrawn from the account (e.g. for transaction fees).
   **/
  | { name: 'Withdrawn'; data: { assetId: number; who: AccountId32; amount: bigint } };

/**
 * The `Event` enum of this pallet
 **/
export type PalletUniquesEvent =
  /**
   * A `collection` was created.
   **/
  | { name: 'Created'; data: { collection: number; creator: AccountId32; owner: AccountId32 } }
  /**
   * A `collection` was force-created.
   **/
  | { name: 'ForceCreated'; data: { collection: number; owner: AccountId32 } }
  /**
   * A `collection` was destroyed.
   **/
  | { name: 'Destroyed'; data: { collection: number } }
  /**
   * An `item` was issued.
   **/
  | { name: 'Issued'; data: { collection: number; item: number; owner: AccountId32 } }
  /**
   * An `item` was transferred.
   **/
  | { name: 'Transferred'; data: { collection: number; item: number; from: AccountId32; to: AccountId32 } }
  /**
   * An `item` was destroyed.
   **/
  | { name: 'Burned'; data: { collection: number; item: number; owner: AccountId32 } }
  /**
   * Some `item` was frozen.
   **/
  | { name: 'Frozen'; data: { collection: number; item: number } }
  /**
   * Some `item` was thawed.
   **/
  | { name: 'Thawed'; data: { collection: number; item: number } }
  /**
   * Some `collection` was frozen.
   **/
  | { name: 'CollectionFrozen'; data: { collection: number } }
  /**
   * Some `collection` was thawed.
   **/
  | { name: 'CollectionThawed'; data: { collection: number } }
  /**
   * The owner changed.
   **/
  | { name: 'OwnerChanged'; data: { collection: number; newOwner: AccountId32 } }
  /**
   * The management team changed.
   **/
  | { name: 'TeamChanged'; data: { collection: number; issuer: AccountId32; admin: AccountId32; freezer: AccountId32 } }
  /**
   * An `item` of a `collection` has been approved by the `owner` for transfer by
   * a `delegate`.
   **/
  | { name: 'ApprovedTransfer'; data: { collection: number; item: number; owner: AccountId32; delegate: AccountId32 } }
  /**
   * An approval for a `delegate` account to transfer the `item` of an item
   * `collection` was cancelled by its `owner`.
   **/
  | { name: 'ApprovalCancelled'; data: { collection: number; item: number; owner: AccountId32; delegate: AccountId32 } }
  /**
   * A `collection` has had its attributes changed by the `Force` origin.
   **/
  | { name: 'ItemStatusChanged'; data: { collection: number } }
  /**
   * New metadata has been set for a `collection`.
   **/
  | { name: 'CollectionMetadataSet'; data: { collection: number; data: Bytes; isFrozen: boolean } }
  /**
   * Metadata has been cleared for a `collection`.
   **/
  | { name: 'CollectionMetadataCleared'; data: { collection: number } }
  /**
   * New metadata has been set for an item.
   **/
  | { name: 'MetadataSet'; data: { collection: number; item: number; data: Bytes; isFrozen: boolean } }
  /**
   * Metadata has been cleared for an item.
   **/
  | { name: 'MetadataCleared'; data: { collection: number; item: number } }
  /**
   * Metadata has been cleared for an item.
   **/
  | { name: 'Redeposited'; data: { collection: number; successfulItems: Array<number> } }
  /**
   * New attribute metadata has been set for a `collection` or `item`.
   **/
  | { name: 'AttributeSet'; data: { collection: number; maybeItem?: number | undefined; key: Bytes; value: Bytes } }
  /**
   * Attribute metadata has been cleared for a `collection` or `item`.
   **/
  | { name: 'AttributeCleared'; data: { collection: number; maybeItem?: number | undefined; key: Bytes } }
  /**
   * Ownership acceptance has changed for an account.
   **/
  | { name: 'OwnershipAcceptanceChanged'; data: { who: AccountId32; maybeCollection?: number | undefined } }
  /**
   * Max supply has been set for a collection.
   **/
  | { name: 'CollectionMaxSupplySet'; data: { collection: number; maxSupply: number } }
  /**
   * The price was set for the instance.
   **/
  | {
      name: 'ItemPriceSet';
      data: { collection: number; item: number; price: bigint; whitelistedBuyer?: AccountId32 | undefined };
    }
  /**
   * The price for the instance was removed.
   **/
  | { name: 'ItemPriceRemoved'; data: { collection: number; item: number } }
  /**
   * An item was bought.
   **/
  | {
      name: 'ItemBought';
      data: { collection: number; item: number; price: bigint; seller: AccountId32; buyer: AccountId32 };
    };

/**
 * The `Event` enum of this pallet
 **/
export type PalletNftsEvent =
  /**
   * A `collection` was created.
   **/
  | { name: 'Created'; data: { collection: number; creator: AccountId32; owner: AccountId32 } }
  /**
   * A `collection` was force-created.
   **/
  | { name: 'ForceCreated'; data: { collection: number; owner: AccountId32 } }
  /**
   * A `collection` was destroyed.
   **/
  | { name: 'Destroyed'; data: { collection: number } }
  /**
   * An `item` was issued.
   **/
  | { name: 'Issued'; data: { collection: number; item: number; owner: AccountId32 } }
  /**
   * An `item` was transferred.
   **/
  | { name: 'Transferred'; data: { collection: number; item: number; from: AccountId32; to: AccountId32 } }
  /**
   * An `item` was destroyed.
   **/
  | { name: 'Burned'; data: { collection: number; item: number; owner: AccountId32 } }
  /**
   * An `item` became non-transferable.
   **/
  | { name: 'ItemTransferLocked'; data: { collection: number; item: number } }
  /**
   * An `item` became transferable.
   **/
  | { name: 'ItemTransferUnlocked'; data: { collection: number; item: number } }
  /**
   * `item` metadata or attributes were locked.
   **/
  | {
      name: 'ItemPropertiesLocked';
      data: { collection: number; item: number; lockMetadata: boolean; lockAttributes: boolean };
    }
  /**
   * Some `collection` was locked.
   **/
  | { name: 'CollectionLocked'; data: { collection: number } }
  /**
   * The owner changed.
   **/
  | { name: 'OwnerChanged'; data: { collection: number; newOwner: AccountId32 } }
  /**
   * The management team changed.
   **/
  | {
      name: 'TeamChanged';
      data: {
        collection: number;
        issuer?: AccountId32 | undefined;
        admin?: AccountId32 | undefined;
        freezer?: AccountId32 | undefined;
      };
    }
  /**
   * An `item` of a `collection` has been approved by the `owner` for transfer by
   * a `delegate`.
   **/
  | {
      name: 'TransferApproved';
      data: {
        collection: number;
        item: number;
        owner: AccountId32;
        delegate: AccountId32;
        deadline?: number | undefined;
      };
    }
  /**
   * An approval for a `delegate` account to transfer the `item` of an item
   * `collection` was cancelled by its `owner`.
   **/
  | { name: 'ApprovalCancelled'; data: { collection: number; item: number; owner: AccountId32; delegate: AccountId32 } }
  /**
   * All approvals of an item got cancelled.
   **/
  | { name: 'AllApprovalsCancelled'; data: { collection: number; item: number; owner: AccountId32 } }
  /**
   * A `collection` has had its config changed by the `Force` origin.
   **/
  | { name: 'CollectionConfigChanged'; data: { collection: number } }
  /**
   * New metadata has been set for a `collection`.
   **/
  | { name: 'CollectionMetadataSet'; data: { collection: number; data: Bytes } }
  /**
   * Metadata has been cleared for a `collection`.
   **/
  | { name: 'CollectionMetadataCleared'; data: { collection: number } }
  /**
   * New metadata has been set for an item.
   **/
  | { name: 'ItemMetadataSet'; data: { collection: number; item: number; data: Bytes } }
  /**
   * Metadata has been cleared for an item.
   **/
  | { name: 'ItemMetadataCleared'; data: { collection: number; item: number } }
  /**
   * The deposit for a set of `item`s within a `collection` has been updated.
   **/
  | { name: 'Redeposited'; data: { collection: number; successfulItems: Array<number> } }
  /**
   * New attribute metadata has been set for a `collection` or `item`.
   **/
  | {
      name: 'AttributeSet';
      data: {
        collection: number;
        maybeItem?: number | undefined;
        key: Bytes;
        value: Bytes;
        namespace: PalletNftsAttributeNamespace;
      };
    }
  /**
   * Attribute metadata has been cleared for a `collection` or `item`.
   **/
  | {
      name: 'AttributeCleared';
      data: { collection: number; maybeItem?: number | undefined; key: Bytes; namespace: PalletNftsAttributeNamespace };
    }
  /**
   * A new approval to modify item attributes was added.
   **/
  | { name: 'ItemAttributesApprovalAdded'; data: { collection: number; item: number; delegate: AccountId32 } }
  /**
   * A new approval to modify item attributes was removed.
   **/
  | { name: 'ItemAttributesApprovalRemoved'; data: { collection: number; item: number; delegate: AccountId32 } }
  /**
   * Ownership acceptance has changed for an account.
   **/
  | { name: 'OwnershipAcceptanceChanged'; data: { who: AccountId32; maybeCollection?: number | undefined } }
  /**
   * Max supply has been set for a collection.
   **/
  | { name: 'CollectionMaxSupplySet'; data: { collection: number; maxSupply: number } }
  /**
   * Mint settings for a collection had changed.
   **/
  | { name: 'CollectionMintSettingsUpdated'; data: { collection: number } }
  /**
   * Event gets emitted when the `NextCollectionId` gets incremented.
   **/
  | { name: 'NextCollectionIdIncremented'; data: { nextId?: number | undefined } }
  /**
   * The price was set for the item.
   **/
  | {
      name: 'ItemPriceSet';
      data: { collection: number; item: number; price: bigint; whitelistedBuyer?: AccountId32 | undefined };
    }
  /**
   * The price for the item was removed.
   **/
  | { name: 'ItemPriceRemoved'; data: { collection: number; item: number } }
  /**
   * An item was bought.
   **/
  | {
      name: 'ItemBought';
      data: { collection: number; item: number; price: bigint; seller: AccountId32; buyer: AccountId32 };
    }
  /**
   * A tip was sent.
   **/
  | {
      name: 'TipSent';
      data: { collection: number; item: number; sender: AccountId32; receiver: AccountId32; amount: bigint };
    }
  /**
   * An `item` swap intent was created.
   **/
  | {
      name: 'SwapCreated';
      data: {
        offeredCollection: number;
        offeredItem: number;
        desiredCollection: number;
        desiredItem?: number | undefined;
        price?: PalletNftsPriceWithDirection | undefined;
        deadline: number;
      };
    }
  /**
   * The swap was cancelled.
   **/
  | {
      name: 'SwapCancelled';
      data: {
        offeredCollection: number;
        offeredItem: number;
        desiredCollection: number;
        desiredItem?: number | undefined;
        price?: PalletNftsPriceWithDirection | undefined;
        deadline: number;
      };
    }
  /**
   * The swap has been claimed.
   **/
  | {
      name: 'SwapClaimed';
      data: {
        sentCollection: number;
        sentItem: number;
        sentItemOwner: AccountId32;
        receivedCollection: number;
        receivedItem: number;
        receivedItemOwner: AccountId32;
        price?: PalletNftsPriceWithDirection | undefined;
        deadline: number;
      };
    }
  /**
   * New attributes have been set for an `item` of the `collection`.
   **/
  | {
      name: 'PreSignedAttributesSet';
      data: { collection: number; item: number; namespace: PalletNftsAttributeNamespace };
    }
  /**
   * A new attribute in the `Pallet` namespace was set for the `collection` or an `item`
   * within that `collection`.
   **/
  | {
      name: 'PalletAttributeSet';
      data: { collection: number; item?: number | undefined; attribute: PalletNftsPalletAttributes; value: Bytes };
    };

export type PalletNftsAttributeNamespace =
  | { type: 'Pallet' }
  | { type: 'CollectionOwner' }
  | { type: 'ItemOwner' }
  | { type: 'Account'; value: AccountId32 };

export type PalletNftsPriceWithDirection = { amount: bigint; direction: PalletNftsPriceDirection };

export type PalletNftsPriceDirection = 'Send' | 'Receive';

export type PalletNftsPalletAttributes = { type: 'UsedToClaim'; value: number } | { type: 'TransferDisabled' };

/**
 * The `Event` enum of this pallet
 **/
export type PalletAssetsEvent002 =
  /**
   * Some asset class was created.
   **/
  | { name: 'Created'; data: { assetId: StagingXcmV5Location; creator: AccountId32; owner: AccountId32 } }
  /**
   * Some assets were issued.
   **/
  | { name: 'Issued'; data: { assetId: StagingXcmV5Location; owner: AccountId32; amount: bigint } }
  /**
   * Some assets were transferred.
   **/
  | { name: 'Transferred'; data: { assetId: StagingXcmV5Location; from: AccountId32; to: AccountId32; amount: bigint } }
  /**
   * Some assets were destroyed.
   **/
  | { name: 'Burned'; data: { assetId: StagingXcmV5Location; owner: AccountId32; balance: bigint } }
  /**
   * The management team changed.
   **/
  | {
      name: 'TeamChanged';
      data: { assetId: StagingXcmV5Location; issuer: AccountId32; admin: AccountId32; freezer: AccountId32 };
    }
  /**
   * The owner changed.
   **/
  | { name: 'OwnerChanged'; data: { assetId: StagingXcmV5Location; owner: AccountId32 } }
  /**
   * Some account `who` was frozen.
   **/
  | { name: 'Frozen'; data: { assetId: StagingXcmV5Location; who: AccountId32 } }
  /**
   * Some account `who` was thawed.
   **/
  | { name: 'Thawed'; data: { assetId: StagingXcmV5Location; who: AccountId32 } }
  /**
   * Some asset `asset_id` was frozen.
   **/
  | { name: 'AssetFrozen'; data: { assetId: StagingXcmV5Location } }
  /**
   * Some asset `asset_id` was thawed.
   **/
  | { name: 'AssetThawed'; data: { assetId: StagingXcmV5Location } }
  /**
   * Accounts were destroyed for given asset.
   **/
  | {
      name: 'AccountsDestroyed';
      data: { assetId: StagingXcmV5Location; accountsDestroyed: number; accountsRemaining: number };
    }
  /**
   * Approvals were destroyed for given asset.
   **/
  | {
      name: 'ApprovalsDestroyed';
      data: { assetId: StagingXcmV5Location; approvalsDestroyed: number; approvalsRemaining: number };
    }
  /**
   * An asset class is in the process of being destroyed.
   **/
  | { name: 'DestructionStarted'; data: { assetId: StagingXcmV5Location } }
  /**
   * An asset class was destroyed.
   **/
  | { name: 'Destroyed'; data: { assetId: StagingXcmV5Location } }
  /**
   * Some asset class was force-created.
   **/
  | { name: 'ForceCreated'; data: { assetId: StagingXcmV5Location; owner: AccountId32 } }
  /**
   * New metadata has been set for an asset.
   **/
  | {
      name: 'MetadataSet';
      data: { assetId: StagingXcmV5Location; name: Bytes; symbol: Bytes; decimals: number; isFrozen: boolean };
    }
  /**
   * Metadata has been cleared for an asset.
   **/
  | { name: 'MetadataCleared'; data: { assetId: StagingXcmV5Location } }
  /**
   * (Additional) funds have been approved for transfer to a destination account.
   **/
  | {
      name: 'ApprovedTransfer';
      data: { assetId: StagingXcmV5Location; source: AccountId32; delegate: AccountId32; amount: bigint };
    }
  /**
   * An approval for account `delegate` was cancelled by `owner`.
   **/
  | { name: 'ApprovalCancelled'; data: { assetId: StagingXcmV5Location; owner: AccountId32; delegate: AccountId32 } }
  /**
   * An `amount` was transferred in its entirety from `owner` to `destination` by
   * the approved `delegate`.
   **/
  | {
      name: 'TransferredApproved';
      data: {
        assetId: StagingXcmV5Location;
        owner: AccountId32;
        delegate: AccountId32;
        destination: AccountId32;
        amount: bigint;
      };
    }
  /**
   * An asset has had its attributes changed by the `Force` origin.
   **/
  | { name: 'AssetStatusChanged'; data: { assetId: StagingXcmV5Location } }
  /**
   * The min_balance of an asset has been updated by the asset owner.
   **/
  | { name: 'AssetMinBalanceChanged'; data: { assetId: StagingXcmV5Location; newMinBalance: bigint } }
  /**
   * Some account `who` was created with a deposit from `depositor`.
   **/
  | { name: 'Touched'; data: { assetId: StagingXcmV5Location; who: AccountId32; depositor: AccountId32 } }
  /**
   * Some account `who` was blocked.
   **/
  | { name: 'Blocked'; data: { assetId: StagingXcmV5Location; who: AccountId32 } }
  /**
   * Some assets were deposited (e.g. for transaction fees).
   **/
  | { name: 'Deposited'; data: { assetId: StagingXcmV5Location; who: AccountId32; amount: bigint } }
  /**
   * Some assets were withdrawn from the account (e.g. for transaction fees).
   **/
  | { name: 'Withdrawn'; data: { assetId: StagingXcmV5Location; who: AccountId32; amount: bigint } };

/**
 * The `Event` enum of this pallet
 **/
export type PalletNftFractionalizationEvent =
  /**
   * An NFT was successfully fractionalized.
   **/
  | {
      name: 'NftFractionalized';
      data: { nftCollection: number; nft: number; fractions: bigint; asset: number; beneficiary: AccountId32 };
    }
  /**
   * An NFT was successfully returned back.
   **/
  | { name: 'NftUnified'; data: { nftCollection: number; nft: number; asset: number; beneficiary: AccountId32 } };

/**
 * The `Event` enum of this pallet
 **/
export type PalletAssetConversionEvent =
  /**
   * A successful call of the `CreatePool` extrinsic will create this event.
   **/
  | {
      name: 'PoolCreated';
      data: {
        /**
         * The account that created the pool.
         **/
        creator: AccountId32;

        /**
         * The pool id associated with the pool. Note that the order of the assets may not be
         * the same as the order specified in the create pool extrinsic.
         **/
        poolId: [StagingXcmV5Location, StagingXcmV5Location];

        /**
         * The account ID of the pool.
         **/
        poolAccount: AccountId32;

        /**
         * The id of the liquidity tokens that will be minted when assets are added to this
         * pool.
         **/
        lpToken: number;
      };
    }
  /**
   * A successful call of the `AddLiquidity` extrinsic will create this event.
   **/
  | {
      name: 'LiquidityAdded';
      data: {
        /**
         * The account that the liquidity was taken from.
         **/
        who: AccountId32;

        /**
         * The account that the liquidity tokens were minted to.
         **/
        mintTo: AccountId32;

        /**
         * The pool id of the pool that the liquidity was added to.
         **/
        poolId: [StagingXcmV5Location, StagingXcmV5Location];

        /**
         * The amount of the first asset that was added to the pool.
         **/
        amount1Provided: bigint;

        /**
         * The amount of the second asset that was added to the pool.
         **/
        amount2Provided: bigint;

        /**
         * The id of the lp token that was minted.
         **/
        lpToken: number;

        /**
         * The amount of lp tokens that were minted of that id.
         **/
        lpTokenMinted: bigint;
      };
    }
  /**
   * A successful call of the `RemoveLiquidity` extrinsic will create this event.
   **/
  | {
      name: 'LiquidityRemoved';
      data: {
        /**
         * The account that the liquidity tokens were burned from.
         **/
        who: AccountId32;

        /**
         * The account that the assets were transferred to.
         **/
        withdrawTo: AccountId32;

        /**
         * The pool id that the liquidity was removed from.
         **/
        poolId: [StagingXcmV5Location, StagingXcmV5Location];

        /**
         * The amount of the first asset that was removed from the pool.
         **/
        amount1: bigint;

        /**
         * The amount of the second asset that was removed from the pool.
         **/
        amount2: bigint;

        /**
         * The id of the lp token that was burned.
         **/
        lpToken: number;

        /**
         * The amount of lp tokens that were burned of that id.
         **/
        lpTokenBurned: bigint;

        /**
         * Liquidity withdrawal fee (%).
         **/
        withdrawalFee: Permill;
      };
    }
  /**
   * Assets have been converted from one to another. Both `SwapExactTokenForToken`
   * and `SwapTokenForExactToken` will generate this event.
   **/
  | {
      name: 'SwapExecuted';
      data: {
        /**
         * Which account was the instigator of the swap.
         **/
        who: AccountId32;

        /**
         * The account that the assets were transferred to.
         **/
        sendTo: AccountId32;

        /**
         * The amount of the first asset that was swapped.
         **/
        amountIn: bigint;

        /**
         * The amount of the second asset that was received.
         **/
        amountOut: bigint;

        /**
         * The route of asset IDs with amounts that the swap went through.
         * E.g. (A, amount_in) -> (Dot, amount_out) -> (B, amount_out)
         **/
        path: Array<[StagingXcmV5Location, bigint]>;
      };
    }
  /**
   * Assets have been converted from one to another.
   **/
  | {
      name: 'SwapCreditExecuted';
      data: {
        /**
         * The amount of the first asset that was swapped.
         **/
        amountIn: bigint;

        /**
         * The amount of the second asset that was received.
         **/
        amountOut: bigint;

        /**
         * The route of asset IDs with amounts that the swap went through.
         * E.g. (A, amount_in) -> (Dot, amount_out) -> (B, amount_out)
         **/
        path: Array<[StagingXcmV5Location, bigint]>;
      };
    }
  /**
   * Pool has been touched in order to fulfill operational requirements.
   **/
  | {
      name: 'Touched';
      data: {
        /**
         * The ID of the pool.
         **/
        poolId: [StagingXcmV5Location, StagingXcmV5Location];

        /**
         * The account initiating the touch.
         **/
        who: AccountId32;
      };
    };

/**
 * The `Event` enum of this pallet
 **/
export type PalletAssetsFreezerEvent =
  | { name: 'Frozen'; data: { who: AccountId32; assetId: number; amount: bigint } }
  | { name: 'Thawed'; data: { who: AccountId32; assetId: number; amount: bigint } };

/**
 * The `Event` enum of this pallet
 **/
export type PalletAssetsFreezerEvent002 =
  | { name: 'Frozen'; data: { who: AccountId32; assetId: StagingXcmV5Location; amount: bigint } }
  | { name: 'Thawed'; data: { who: AccountId32; assetId: StagingXcmV5Location; amount: bigint } };

/**
 * The `Event` enum of this pallet
 **/
export type PalletReviveEvent =
  /**
   * A custom event emitted by the contract.
   **/
  {
    name: 'ContractEmitted';
    data: {
      /**
       * The contract that emitted the event.
       **/
      contract: H160;

      /**
       * Data supplied by the contract. Metadata generated during contract compilation
       * is needed to decode it.
       **/
      data: Bytes;

      /**
       * A list of topics used to index the event.
       * Number of topics is capped by [`limits::NUM_EVENT_TOPICS`].
       **/
      topics: Array<H256>;
    };
  };

/**
 * The `Event` enum of this pallet
 **/
export type PalletAssetRewardsEvent =
  /**
   * An account staked some tokens in a pool.
   **/
  | {
      name: 'Staked';
      data: {
        /**
         * The account that staked assets.
         **/
        staker: AccountId32;

        /**
         * The pool.
         **/
        poolId: number;

        /**
         * The staked asset amount.
         **/
        amount: bigint;
      };
    }
  /**
   * An account unstaked some tokens from a pool.
   **/
  | {
      name: 'Unstaked';
      data: {
        /**
         * The account that signed transaction.
         **/
        caller: AccountId32;

        /**
         * The account that unstaked assets.
         **/
        staker: AccountId32;

        /**
         * The pool.
         **/
        poolId: number;

        /**
         * The unstaked asset amount.
         **/
        amount: bigint;
      };
    }
  /**
   * An account harvested some rewards.
   **/
  | {
      name: 'RewardsHarvested';
      data: {
        /**
         * The account that signed transaction.
         **/
        caller: AccountId32;

        /**
         * The staker whos rewards were harvested.
         **/
        staker: AccountId32;

        /**
         * The pool.
         **/
        poolId: number;

        /**
         * The amount of harvested tokens.
         **/
        amount: bigint;
      };
    }
  /**
   * A new reward pool was created.
   **/
  | {
      name: 'PoolCreated';
      data: {
        /**
         * The account that created the pool.
         **/
        creator: AccountId32;

        /**
         * The unique ID for the new pool.
         **/
        poolId: number;

        /**
         * The staking asset.
         **/
        stakedAssetId: StagingXcmV5Location;

        /**
         * The reward asset.
         **/
        rewardAssetId: StagingXcmV5Location;

        /**
         * The initial reward rate per block.
         **/
        rewardRatePerBlock: bigint;

        /**
         * The block the pool will cease to accumulate rewards.
         **/
        expiryBlock: number;

        /**
         * The account allowed to modify the pool.
         **/
        admin: AccountId32;
      };
    }
  /**
   * A pool reward rate was modified by the admin.
   **/
  | {
      name: 'PoolRewardRateModified';
      data: {
        /**
         * The modified pool.
         **/
        poolId: number;

        /**
         * The new reward rate per block.
         **/
        newRewardRatePerBlock: bigint;
      };
    }
  /**
   * A pool admin was modified.
   **/
  | {
      name: 'PoolAdminModified';
      data: {
        /**
         * The modified pool.
         **/
        poolId: number;

        /**
         * The new admin.
         **/
        newAdmin: AccountId32;
      };
    }
  /**
   * A pool expiry block was modified by the admin.
   **/
  | {
      name: 'PoolExpiryBlockModified';
      data: {
        /**
         * The modified pool.
         **/
        poolId: number;

        /**
         * The new expiry block.
         **/
        newExpiryBlock: number;
      };
    }
  /**
   * A pool information was cleared after it's completion.
   **/
  | {
      name: 'PoolCleanedUp';
      data: {
        /**
         * The cleared pool.
         **/
        poolId: number;
      };
    };

/**
 * Inner events of this pallet.
 **/
export type PalletStateTrieMigrationEvent =
  /**
   * Given number of `(top, child)` keys were migrated respectively, with the given
   * `compute`.
   **/
  | { name: 'Migrated'; data: { top: number; child: number; compute: PalletStateTrieMigrationMigrationCompute } }
  /**
   * Some account got slashed by the given amount.
   **/
  | { name: 'Slashed'; data: { who: AccountId32; amount: bigint } }
  /**
   * The auto migration task finished.
   **/
  | { name: 'AutoMigrationFinished' }
  /**
   * Migration got halted due to an error or miss-configuration.
   **/
  | { name: 'Halted'; data: { error: PalletStateTrieMigrationError } };

export type PalletStateTrieMigrationMigrationCompute = 'Signed' | 'Auto';

/**
 * The `Error` enum of this pallet.
 **/
export type PalletStateTrieMigrationError =
  /**
   * Max signed limits not respected.
   **/
  | 'MaxSignedLimits'
  /**
   * A key was longer than the configured maximum.
   *
   * This means that the migration halted at the current [`Progress`] and
   * can be resumed with a larger [`crate::Config::MaxKeyLen`] value.
   * Retrying with the same [`crate::Config::MaxKeyLen`] value will not work.
   * The value should only be increased to avoid a storage migration for the currently
   * stored [`crate::Progress::LastKey`].
   **/
  | 'KeyTooLong'
  /**
   * submitter does not have enough funds.
   **/
  | 'NotEnoughFunds'
  /**
   * Bad witness data provided.
   **/
  | 'BadWitness'
  /**
   * Signed migration is not allowed because the maximum limit is not set yet.
   **/
  | 'SignedMigrationNotAllowed'
  /**
   * Bad child root provided.
   **/
  | 'BadChildRoot';

/**
 * The `Event` enum of this pallet
 **/
export type PalletStakingAsyncPalletEvent =
  /**
   * The era payout has been set; the first balance is the validator-payout; the second is
   * the remainder from the maximum amount of reward.
   **/
  | { name: 'EraPaid'; data: { eraIndex: number; validatorPayout: bigint; remainder: bigint } }
  /**
   * The nominator has been rewarded by this amount to this destination.
   **/
  | { name: 'Rewarded'; data: { stash: AccountId32; dest: PalletStakingAsyncRewardDestination; amount: bigint } }
  /**
   * A staker (validator or nominator) has been slashed by the given amount.
   **/
  | { name: 'Slashed'; data: { staker: AccountId32; amount: bigint } }
  /**
   * An old slashing report from a prior era was discarded because it could
   * not be processed.
   **/
  | { name: 'OldSlashingReportDiscarded'; data: { sessionIndex: number } }
  /**
   * An account has bonded this amount. \[stash, amount\]
   *
   * NOTE: This event is only emitted when funds are bonded via a dispatchable. Notably,
   * it will not be emitted for staking rewards when they are added to stake.
   **/
  | { name: 'Bonded'; data: { stash: AccountId32; amount: bigint } }
  /**
   * An account has unbonded this amount.
   **/
  | { name: 'Unbonded'; data: { stash: AccountId32; amount: bigint } }
  /**
   * An account has called `withdraw_unbonded` and removed unbonding chunks worth `Balance`
   * from the unlocking queue.
   **/
  | { name: 'Withdrawn'; data: { stash: AccountId32; amount: bigint } }
  /**
   * A subsequent event of `Withdrawn`, indicating that `stash` was fully removed from the
   * system.
   **/
  | { name: 'StakerRemoved'; data: { stash: AccountId32 } }
  /**
   * A nominator has been kicked from a validator.
   **/
  | { name: 'Kicked'; data: { nominator: AccountId32; stash: AccountId32 } }
  /**
   * An account has stopped participating as either a validator or nominator.
   **/
  | { name: 'Chilled'; data: { stash: AccountId32 } }
  /**
   * A Page of stakers rewards are getting paid. `next` is `None` if all pages are claimed.
   **/
  | {
      name: 'PayoutStarted';
      data: { eraIndex: number; validatorStash: AccountId32; page: number; next?: number | undefined };
    }
  /**
   * A validator has set their preferences.
   **/
  | { name: 'ValidatorPrefsSet'; data: { stash: AccountId32; prefs: PalletStakingAsyncValidatorPrefs } }
  /**
   * Voters size limit reached.
   **/
  | { name: 'SnapshotVotersSizeExceeded'; data: { size: number } }
  /**
   * Targets size limit reached.
   **/
  | { name: 'SnapshotTargetsSizeExceeded'; data: { size: number } }
  | { name: 'ForceEra'; data: { mode: PalletStakingAsyncForcing } }
  /**
   * Report of a controller batch deprecation.
   **/
  | { name: 'ControllerBatchDeprecated'; data: { failures: number } }
  /**
   * Staking balance migrated from locks to holds, with any balance that could not be held
   * is force withdrawn.
   **/
  | { name: 'CurrencyMigrated'; data: { stash: AccountId32; forceWithdraw: bigint } }
  /**
   * A page from a multi-page election was fetched. A number of these are followed by
   * `StakersElected`.
   *
   * `Ok(count)` indicates the give number of stashes were added.
   * `Err(index)` indicates that the stashes after index were dropped.
   * `Err(0)` indicates that an error happened but no stashes were dropped nor added.
   *
   * The error indicates that a number of validators were dropped due to excess size, but
   * the overall election will continue.
   **/
  | { name: 'PagedElectionProceeded'; data: { page: number; result: Result<number, number> } }
  /**
   * An offence for the given validator, for the given percentage of their stake, at the
   * given era as been reported.
   **/
  | { name: 'OffenceReported'; data: { offenceEra: number; validator: AccountId32; fraction: Perbill } }
  /**
   * An offence has been processed and the corresponding slash has been computed.
   **/
  | { name: 'SlashComputed'; data: { offenceEra: number; slashEra: number; offender: AccountId32; page: number } }
  /**
   * An unapplied slash has been cancelled.
   **/
  | { name: 'SlashCancelled'; data: { slashEra: number; slashKey: [AccountId32, Perbill, number]; payout: bigint } }
  /**
   * Session change has been triggered.
   *
   * If planned_era is one era ahead of active_era, it implies new era is being planned and
   * election is ongoing.
   **/
  | { name: 'SessionRotated'; data: { startingSession: number; activeEra: number; plannedEra: number } };

export type PalletStakingAsyncRewardDestination =
  | { type: 'Staked' }
  | { type: 'Stash' }
  | { type: 'Controller' }
  | { type: 'Account'; value: AccountId32 }
  | { type: 'None' };

export type PalletStakingAsyncValidatorPrefs = { commission: Perbill; blocked: boolean };

export type PalletStakingAsyncForcing = 'NotForcing' | 'ForceNew' | 'ForceNone' | 'ForceAlways';

/**
 * Events of this pallet.
 **/
export type PalletNominationPoolsEvent =
  /**
   * A pool has been created.
   **/
  | { name: 'Created'; data: { depositor: AccountId32; poolId: number } }
  /**
   * A member has became bonded in a pool.
   **/
  | { name: 'Bonded'; data: { member: AccountId32; poolId: number; bonded: bigint; joined: boolean } }
  /**
   * A payout has been made to a member.
   **/
  | { name: 'PaidOut'; data: { member: AccountId32; poolId: number; payout: bigint } }
  /**
   * A member has unbonded from their pool.
   *
   * - `balance` is the corresponding balance of the number of points that has been
   * requested to be unbonded (the argument of the `unbond` transaction) from the bonded
   * pool.
   * - `points` is the number of points that are issued as a result of `balance` being
   * dissolved into the corresponding unbonding pool.
   * - `era` is the era in which the balance will be unbonded.
   * In the absence of slashing, these values will match. In the presence of slashing, the
   * number of points that are issued in the unbonding pool will be less than the amount
   * requested to be unbonded.
   **/
  | { name: 'Unbonded'; data: { member: AccountId32; poolId: number; balance: bigint; points: bigint; era: number } }
  /**
   * A member has withdrawn from their pool.
   *
   * The given number of `points` have been dissolved in return of `balance`.
   *
   * Similar to `Unbonded` event, in the absence of slashing, the ratio of point to balance
   * will be 1.
   **/
  | { name: 'Withdrawn'; data: { member: AccountId32; poolId: number; balance: bigint; points: bigint } }
  /**
   * A pool has been destroyed.
   **/
  | { name: 'Destroyed'; data: { poolId: number } }
  /**
   * The state of a pool has changed
   **/
  | { name: 'StateChanged'; data: { poolId: number; newState: PalletNominationPoolsPoolState } }
  /**
   * A member has been removed from a pool.
   *
   * The removal can be voluntary (withdrawn all unbonded funds) or involuntary (kicked).
   * Any funds that are still delegated (i.e. dangling delegation) are released and are
   * represented by `released_balance`.
   **/
  | { name: 'MemberRemoved'; data: { poolId: number; member: AccountId32; releasedBalance: bigint } }
  /**
   * The roles of a pool have been updated to the given new roles. Note that the depositor
   * can never change.
   **/
  | {
      name: 'RolesUpdated';
      data: { root?: AccountId32 | undefined; bouncer?: AccountId32 | undefined; nominator?: AccountId32 | undefined };
    }
  /**
   * The active balance of pool `pool_id` has been slashed to `balance`.
   **/
  | { name: 'PoolSlashed'; data: { poolId: number; balance: bigint } }
  /**
   * The unbond pool at `era` of pool `pool_id` has been slashed to `balance`.
   **/
  | { name: 'UnbondingPoolSlashed'; data: { poolId: number; era: number; balance: bigint } }
  /**
   * A pool's commission setting has been changed.
   **/
  | { name: 'PoolCommissionUpdated'; data: { poolId: number; current?: [Perbill, AccountId32] | undefined } }
  /**
   * A pool's maximum commission setting has been changed.
   **/
  | { name: 'PoolMaxCommissionUpdated'; data: { poolId: number; maxCommission: Perbill } }
  /**
   * A pool's commission `change_rate` has been changed.
   **/
  | {
      name: 'PoolCommissionChangeRateUpdated';
      data: { poolId: number; changeRate: PalletNominationPoolsCommissionChangeRate };
    }
  /**
   * Pool commission claim permission has been updated.
   **/
  | {
      name: 'PoolCommissionClaimPermissionUpdated';
      data: { poolId: number; permission?: PalletNominationPoolsCommissionClaimPermission | undefined };
    }
  /**
   * Pool commission has been claimed.
   **/
  | { name: 'PoolCommissionClaimed'; data: { poolId: number; commission: bigint } }
  /**
   * Topped up deficit in frozen ED of the reward pool.
   **/
  | { name: 'MinBalanceDeficitAdjusted'; data: { poolId: number; amount: bigint } }
  /**
   * Claimed excess frozen ED of af the reward pool.
   **/
  | { name: 'MinBalanceExcessAdjusted'; data: { poolId: number; amount: bigint } }
  /**
   * A pool member's claim permission has been updated.
   **/
  | {
      name: 'MemberClaimPermissionUpdated';
      data: { member: AccountId32; permission: PalletNominationPoolsClaimPermission };
    }
  /**
   * A pool's metadata was updated.
   **/
  | { name: 'MetadataUpdated'; data: { poolId: number; caller: AccountId32 } }
  /**
   * A pool's nominating account (or the pool's root account) has nominated a validator set
   * on behalf of the pool.
   **/
  | { name: 'PoolNominationMade'; data: { poolId: number; caller: AccountId32 } }
  /**
   * The pool is chilled i.e. no longer nominating.
   **/
  | { name: 'PoolNominatorChilled'; data: { poolId: number; caller: AccountId32 } }
  /**
   * Global parameters regulating nomination pools have been updated.
   **/
  | {
      name: 'GlobalParamsUpdated';
      data: {
        minJoinBond: bigint;
        minCreateBond: bigint;
        maxPools?: number | undefined;
        maxMembers?: number | undefined;
        maxMembersPerPool?: number | undefined;
        globalMaxCommission?: Perbill | undefined;
      };
    };

export type PalletNominationPoolsPoolState = 'Open' | 'Blocked' | 'Destroying';

export type PalletNominationPoolsCommissionChangeRate = { maxIncrease: Perbill; minDelay: number };

export type PalletNominationPoolsCommissionClaimPermission =
  | { type: 'Permissionless' }
  | { type: 'Account'; value: AccountId32 };

export type PalletNominationPoolsClaimPermission =
  | 'Permissioned'
  | 'PermissionlessCompound'
  | 'PermissionlessWithdraw'
  | 'PermissionlessAll';

/**
 * The `Event` enum of this pallet
 **/
export type PalletFastUnstakeEvent =
  /**
   * A staker was unstaked.
   **/
  | { name: 'Unstaked'; data: { stash: AccountId32; result: Result<[], DispatchError> } }
  /**
   * A staker was slashed for requesting fast-unstake whilst being exposed.
   **/
  | { name: 'Slashed'; data: { stash: AccountId32; amount: bigint } }
  /**
   * A batch was partially checked for the given eras, but the process did not finish.
   **/
  | { name: 'BatchChecked'; data: { eras: Array<number> } }
  /**
   * A batch of a given size was terminated.
   *
   * This is always follows by a number of `Unstaked` or `Slashed` events, marking the end
   * of the batch. A new batch will be created upon next block.
   **/
  | { name: 'BatchFinished'; data: { size: number } }
  /**
   * An internal error happened. Operations will be paused now.
   **/
  | { name: 'InternalError' };

/**
 * The `Event` enum of this pallet
 **/
export type PalletBagsListEvent =
  /**
   * Moved an account from one bag to another.
   **/
  | { name: 'Rebagged'; data: { who: AccountId32; from: bigint; to: bigint } }
  /**
   * Updated the score of some account to the given amount.
   **/
  | { name: 'ScoreUpdated'; data: { who: AccountId32; newScore: bigint } };

/**
 * The `Event` enum of this pallet
 **/
export type PalletDelegatedStakingEvent =
  /**
   * Funds delegated by a delegator.
   **/
  | { name: 'Delegated'; data: { agent: AccountId32; delegator: AccountId32; amount: bigint } }
  /**
   * Funds released to a delegator.
   **/
  | { name: 'Released'; data: { agent: AccountId32; delegator: AccountId32; amount: bigint } }
  /**
   * Funds slashed from a delegator.
   **/
  | { name: 'Slashed'; data: { agent: AccountId32; delegator: AccountId32; amount: bigint } }
  /**
   * Unclaimed delegation funds migrated to delegator.
   **/
  | { name: 'MigratedDelegation'; data: { agent: AccountId32; delegator: AccountId32; amount: bigint } };

/**
 * The `Event` enum of this pallet
 **/
export type PalletStakingAsyncRcClientEvent =
  /**
   * A said session report was received.
   **/
  | {
      name: 'SessionReportReceived';
      data: {
        endIndex: number;
        activationTimestamp?: [bigint, number] | undefined;
        validatorPointsCounts: number;
        leftover: boolean;
      };
    }
  /**
   * A new offence was reported.
   **/
  | { name: 'OffenceReceived'; data: { slashSession: number; offencesCount: number } }
  /**
   * Something occurred that should never happen under normal operation.
   * Logged as an event for fail-safe observability.
   **/
  | { name: 'Unexpected'; data: PalletStakingAsyncRcClientUnexpectedKind };

export type PalletStakingAsyncRcClientUnexpectedKind = 'SessionReportIntegrityFailed' | 'ValidatorSetIntegrityFailed';

/**
 * The `Event` enum of this pallet
 **/
export type PalletElectionProviderMultiBlockEvent =
  /**
   * A phase transition happened. Only checks major changes in the variants, not minor inner
   * values.
   **/
  {
    name: 'PhaseTransitioned';
    data: {
      /**
       * the source phase
       **/
      from: PalletElectionProviderMultiBlockPhase;

      /**
       * The target phase
       **/
      to: PalletElectionProviderMultiBlockPhase;
    };
  };

export type PalletElectionProviderMultiBlockPhase =
  | { type: 'Off' }
  | { type: 'Signed'; value: number }
  | { type: 'SignedValidation'; value: number }
  | { type: 'Unsigned'; value: number }
  | { type: 'Snapshot'; value: number }
  | { type: 'Done' }
  | { type: 'Export'; value: number }
  | { type: 'Emergency' };

/**
 * The `Event` enum of this pallet
 **/
export type PalletElectionProviderMultiBlockVerifierImplsPalletEvent =
  /**
   * The verification data was unavailable and it could not continue.
   **/
  | { name: 'VerificationDataUnavailable' }
  /**
   * A verification failed at the given page.
   *
   * NOTE: if the index is 0, then this could mean either the feasibility of the last page
   * was wrong, or the final checks of `finalize_verification` failed.
   **/
  | { name: 'VerificationFailed'; data: [number, PalletElectionProviderMultiBlockVerifierFeasibilityError] }
  /**
   * The given page of a solution has been verified, with the given number of winners being
   * found in it.
   **/
  | { name: 'Verified'; data: [number, number] }
  /**
   * A solution with the given score has replaced our current best solution.
   **/
  | { name: 'Queued'; data: [SpNposElectionsElectionScore, SpNposElectionsElectionScore | undefined] };

export type PalletElectionProviderMultiBlockVerifierFeasibilityError =
  | { type: 'WrongWinnerCount' }
  | { type: 'SnapshotUnavailable' }
  | { type: 'InvalidVote' }
  | { type: 'InvalidVoter' }
  | { type: 'InvalidWinner' }
  | { type: 'InvalidScore' }
  | { type: 'InvalidRound' }
  | { type: 'ScoreTooLow' }
  | { type: 'FailedToBoundSupport' }
  | { type: 'NposElection'; value: SpNposElectionsError }
  | { type: 'Incomplete' };

export type SpNposElectionsError =
  | 'SolutionWeightOverflow'
  | 'SolutionTargetOverflow'
  | 'SolutionInvalidIndex'
  | 'SolutionInvalidPageIndex'
  | 'ArithmeticError'
  | 'InvalidSupportEdge'
  | 'TooManyVoters'
  | 'BoundsExceeded';

export type SpNposElectionsElectionScore = { minimalStake: bigint; sumStake: bigint; sumStakeSquared: bigint };

/**
 * The `Event` enum of this pallet
 **/
export type PalletElectionProviderMultiBlockSignedPalletEvent =
  /**
   * Upcoming submission has been registered for the given account, with the given score.
   **/
  | { name: 'Registered'; data: [number, AccountId32, SpNposElectionsElectionScore] }
  /**
   * A page of solution solution with the given index has been stored for the given account.
   **/
  | { name: 'Stored'; data: [number, AccountId32, number] }
  /**
   * The given account has been rewarded with the given amount.
   **/
  | { name: 'Rewarded'; data: [number, AccountId32, bigint] }
  /**
   * The given account has been slashed with the given amount.
   **/
  | { name: 'Slashed'; data: [number, AccountId32, bigint] }
  /**
   * The given solution, for the given round, was ejected.
   **/
  | { name: 'Ejected'; data: [number, AccountId32] }
  /**
   * The given account has been discarded.
   **/
  | { name: 'Discarded'; data: [number, AccountId32] }
  /**
   * The given account has bailed.
   **/
  | { name: 'Bailed'; data: [number, AccountId32] };

/**
 * The `Event` enum of this pallet
 **/
export type PalletConvictionVotingEvent =
  /**
   * An account has delegated their vote to another account. \[who, target\]
   **/
  | { name: 'Delegated'; data: [AccountId32, AccountId32] }
  /**
   * An \[account\] has cancelled a previous delegation operation.
   **/
  | { name: 'Undelegated'; data: AccountId32 }
  /**
   * An account has voted
   **/
  | { name: 'Voted'; data: { who: AccountId32; vote: PalletConvictionVotingVoteAccountVote } }
  /**
   * A vote has been removed
   **/
  | { name: 'VoteRemoved'; data: { who: AccountId32; vote: PalletConvictionVotingVoteAccountVote } }
  /**
   * The lockup period of a conviction vote expired, and the funds have been unlocked.
   **/
  | { name: 'VoteUnlocked'; data: { who: AccountId32; class: number } };

export type PalletConvictionVotingVoteAccountVote =
  | { type: 'Standard'; value: { vote: PalletConvictionVotingVote; balance: bigint } }
  | { type: 'Split'; value: { aye: bigint; nay: bigint } }
  | { type: 'SplitAbstain'; value: { aye: bigint; nay: bigint; abstain: bigint } };

export type PalletConvictionVotingVote = number;

/**
 * The `Event` enum of this pallet
 **/
export type PalletReferendaEvent =
  /**
   * A referendum has been submitted.
   **/
  | {
      name: 'Submitted';
      data: {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * The track (and by extension proposal dispatch origin) of this referendum.
         **/
        track: number;

        /**
         * The proposal for the referendum.
         **/
        proposal: FrameSupportPreimagesBounded;
      };
    }
  /**
   * The decision deposit has been placed.
   **/
  | {
      name: 'DecisionDepositPlaced';
      data: {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * The account who placed the deposit.
         **/
        who: AccountId32;

        /**
         * The amount placed by the account.
         **/
        amount: bigint;
      };
    }
  /**
   * The decision deposit has been refunded.
   **/
  | {
      name: 'DecisionDepositRefunded';
      data: {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * The account who placed the deposit.
         **/
        who: AccountId32;

        /**
         * The amount placed by the account.
         **/
        amount: bigint;
      };
    }
  /**
   * A deposit has been slashed.
   **/
  | {
      name: 'DepositSlashed';
      data: {
        /**
         * The account who placed the deposit.
         **/
        who: AccountId32;

        /**
         * The amount placed by the account.
         **/
        amount: bigint;
      };
    }
  /**
   * A referendum has moved into the deciding phase.
   **/
  | {
      name: 'DecisionStarted';
      data: {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * The track (and by extension proposal dispatch origin) of this referendum.
         **/
        track: number;

        /**
         * The proposal for the referendum.
         **/
        proposal: FrameSupportPreimagesBounded;

        /**
         * The current tally of votes in this referendum.
         **/
        tally: PalletConvictionVotingTally;
      };
    }
  | {
      name: 'ConfirmStarted';
      data: {
        /**
         * Index of the referendum.
         **/
        index: number;
      };
    }
  | {
      name: 'ConfirmAborted';
      data: {
        /**
         * Index of the referendum.
         **/
        index: number;
      };
    }
  /**
   * A referendum has ended its confirmation phase and is ready for approval.
   **/
  | {
      name: 'Confirmed';
      data: {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * The final tally of votes in this referendum.
         **/
        tally: PalletConvictionVotingTally;
      };
    }
  /**
   * A referendum has been approved and its proposal has been scheduled.
   **/
  | {
      name: 'Approved';
      data: {
        /**
         * Index of the referendum.
         **/
        index: number;
      };
    }
  /**
   * A proposal has been rejected by referendum.
   **/
  | {
      name: 'Rejected';
      data: {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * The final tally of votes in this referendum.
         **/
        tally: PalletConvictionVotingTally;
      };
    }
  /**
   * A referendum has been timed out without being decided.
   **/
  | {
      name: 'TimedOut';
      data: {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * The final tally of votes in this referendum.
         **/
        tally: PalletConvictionVotingTally;
      };
    }
  /**
   * A referendum has been cancelled.
   **/
  | {
      name: 'Cancelled';
      data: {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * The final tally of votes in this referendum.
         **/
        tally: PalletConvictionVotingTally;
      };
    }
  /**
   * A referendum has been killed.
   **/
  | {
      name: 'Killed';
      data: {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * The final tally of votes in this referendum.
         **/
        tally: PalletConvictionVotingTally;
      };
    }
  /**
   * The submission deposit has been refunded.
   **/
  | {
      name: 'SubmissionDepositRefunded';
      data: {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * The account who placed the deposit.
         **/
        who: AccountId32;

        /**
         * The amount placed by the account.
         **/
        amount: bigint;
      };
    }
  /**
   * Metadata for a referendum has been set.
   **/
  | {
      name: 'MetadataSet';
      data: {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * Preimage hash.
         **/
        hash: H256;
      };
    }
  /**
   * Metadata for a referendum has been cleared.
   **/
  | {
      name: 'MetadataCleared';
      data: {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * Preimage hash.
         **/
        hash: H256;
      };
    };

export type FrameSupportPreimagesBounded =
  | { type: 'Legacy'; value: { hash: H256 } }
  | { type: 'Inline'; value: Bytes }
  | { type: 'Lookup'; value: { hash: H256; len: number } };

export type AssetHubWestendRuntimeRuntimeCall =
  | { pallet: 'System'; palletCall: FrameSystemCall }
  | { pallet: 'ParachainSystem'; palletCall: CumulusPalletParachainSystemCall }
  | { pallet: 'Timestamp'; palletCall: PalletTimestampCall }
  | { pallet: 'ParachainInfo'; palletCall: StagingParachainInfoCall }
  | { pallet: 'MultiBlockMigrations'; palletCall: PalletMigrationsCall }
  | { pallet: 'Preimage'; palletCall: PalletPreimageCall }
  | { pallet: 'Scheduler'; palletCall: PalletSchedulerCall }
  | { pallet: 'Sudo'; palletCall: PalletSudoCall }
  | { pallet: 'Balances'; palletCall: PalletBalancesCall }
  | { pallet: 'Vesting'; palletCall: PalletVestingCall }
  | { pallet: 'CollatorSelection'; palletCall: PalletCollatorSelectionCall }
  | { pallet: 'Session'; palletCall: PalletSessionCall }
  | { pallet: 'XcmpQueue'; palletCall: CumulusPalletXcmpQueueCall }
  | { pallet: 'PolkadotXcm'; palletCall: PalletXcmCall }
  | { pallet: 'CumulusXcm'; palletCall: CumulusPalletXcmCall }
  | { pallet: 'ToRococoXcmRouter'; palletCall: PalletXcmBridgeHubRouterCall }
  | { pallet: 'MessageQueue'; palletCall: PalletMessageQueueCall }
  | { pallet: 'SnowbridgeSystemFrontend'; palletCall: SnowbridgePalletSystemFrontendCall }
  | { pallet: 'Utility'; palletCall: PalletUtilityCall }
  | { pallet: 'Multisig'; palletCall: PalletMultisigCall }
  | { pallet: 'Proxy'; palletCall: PalletProxyCall }
  | { pallet: 'Indices'; palletCall: PalletIndicesCall }
  | { pallet: 'Assets'; palletCall: PalletAssetsCall }
  | { pallet: 'Uniques'; palletCall: PalletUniquesCall }
  | { pallet: 'Nfts'; palletCall: PalletNftsCall }
  | { pallet: 'ForeignAssets'; palletCall: PalletAssetsCall002 }
  | { pallet: 'NftFractionalization'; palletCall: PalletNftFractionalizationCall }
  | { pallet: 'PoolAssets'; palletCall: PalletAssetsCall003 }
  | { pallet: 'AssetConversion'; palletCall: PalletAssetConversionCall }
  | { pallet: 'Revive'; palletCall: PalletReviveCall }
  | { pallet: 'AssetRewards'; palletCall: PalletAssetRewardsCall }
  | { pallet: 'StateTrieMigration'; palletCall: PalletStateTrieMigrationCall }
  | { pallet: 'Staking'; palletCall: PalletStakingAsyncPalletCall }
  | { pallet: 'NominationPools'; palletCall: PalletNominationPoolsCall }
  | { pallet: 'FastUnstake'; palletCall: PalletFastUnstakeCall }
  | { pallet: 'VoterList'; palletCall: PalletBagsListCall }
  | { pallet: 'StakingNextRcClient'; palletCall: PalletStakingAsyncRcClientCall }
  | { pallet: 'MultiBlock'; palletCall: PalletElectionProviderMultiBlockCall }
  | { pallet: 'MultiBlockVerifier'; palletCall: PalletElectionProviderMultiBlockVerifierImplsPalletCall }
  | { pallet: 'MultiBlockUnsigned'; palletCall: PalletElectionProviderMultiBlockUnsignedPalletCall }
  | { pallet: 'MultiBlockSigned'; palletCall: PalletElectionProviderMultiBlockSignedPalletCall }
  | { pallet: 'ConvictionVoting'; palletCall: PalletConvictionVotingCall }
  | { pallet: 'Referenda'; palletCall: PalletReferendaCall }
  | { pallet: 'Whitelist'; palletCall: PalletWhitelistCall }
  | { pallet: 'Treasury'; palletCall: PalletTreasuryCall }
  | { pallet: 'AssetRate'; palletCall: PalletAssetRateCall }
  | { pallet: 'AssetConversionMigration'; palletCall: PalletAssetConversionOpsCall }
  | { pallet: 'AhOps'; palletCall: PalletAhOpsCall }
  | { pallet: 'AhMigrator'; palletCall: PalletAhMigratorCall };

export type AssetHubWestendRuntimeRuntimeCallLike =
  | { pallet: 'System'; palletCall: FrameSystemCallLike }
  | { pallet: 'ParachainSystem'; palletCall: CumulusPalletParachainSystemCallLike }
  | { pallet: 'Timestamp'; palletCall: PalletTimestampCallLike }
  | { pallet: 'ParachainInfo'; palletCall: StagingParachainInfoCallLike }
  | { pallet: 'MultiBlockMigrations'; palletCall: PalletMigrationsCallLike }
  | { pallet: 'Preimage'; palletCall: PalletPreimageCallLike }
  | { pallet: 'Scheduler'; palletCall: PalletSchedulerCallLike }
  | { pallet: 'Sudo'; palletCall: PalletSudoCallLike }
  | { pallet: 'Balances'; palletCall: PalletBalancesCallLike }
  | { pallet: 'Vesting'; palletCall: PalletVestingCallLike }
  | { pallet: 'CollatorSelection'; palletCall: PalletCollatorSelectionCallLike }
  | { pallet: 'Session'; palletCall: PalletSessionCallLike }
  | { pallet: 'XcmpQueue'; palletCall: CumulusPalletXcmpQueueCallLike }
  | { pallet: 'PolkadotXcm'; palletCall: PalletXcmCallLike }
  | { pallet: 'CumulusXcm'; palletCall: CumulusPalletXcmCallLike }
  | { pallet: 'ToRococoXcmRouter'; palletCall: PalletXcmBridgeHubRouterCallLike }
  | { pallet: 'MessageQueue'; palletCall: PalletMessageQueueCallLike }
  | { pallet: 'SnowbridgeSystemFrontend'; palletCall: SnowbridgePalletSystemFrontendCallLike }
  | { pallet: 'Utility'; palletCall: PalletUtilityCallLike }
  | { pallet: 'Multisig'; palletCall: PalletMultisigCallLike }
  | { pallet: 'Proxy'; palletCall: PalletProxyCallLike }
  | { pallet: 'Indices'; palletCall: PalletIndicesCallLike }
  | { pallet: 'Assets'; palletCall: PalletAssetsCallLike }
  | { pallet: 'Uniques'; palletCall: PalletUniquesCallLike }
  | { pallet: 'Nfts'; palletCall: PalletNftsCallLike }
  | { pallet: 'ForeignAssets'; palletCall: PalletAssetsCallLike002 }
  | { pallet: 'NftFractionalization'; palletCall: PalletNftFractionalizationCallLike }
  | { pallet: 'PoolAssets'; palletCall: PalletAssetsCallLike003 }
  | { pallet: 'AssetConversion'; palletCall: PalletAssetConversionCallLike }
  | { pallet: 'Revive'; palletCall: PalletReviveCallLike }
  | { pallet: 'AssetRewards'; palletCall: PalletAssetRewardsCallLike }
  | { pallet: 'StateTrieMigration'; palletCall: PalletStateTrieMigrationCallLike }
  | { pallet: 'Staking'; palletCall: PalletStakingAsyncPalletCallLike }
  | { pallet: 'NominationPools'; palletCall: PalletNominationPoolsCallLike }
  | { pallet: 'FastUnstake'; palletCall: PalletFastUnstakeCallLike }
  | { pallet: 'VoterList'; palletCall: PalletBagsListCallLike }
  | { pallet: 'StakingNextRcClient'; palletCall: PalletStakingAsyncRcClientCallLike }
  | { pallet: 'MultiBlock'; palletCall: PalletElectionProviderMultiBlockCallLike }
  | { pallet: 'MultiBlockVerifier'; palletCall: PalletElectionProviderMultiBlockVerifierImplsPalletCallLike }
  | { pallet: 'MultiBlockUnsigned'; palletCall: PalletElectionProviderMultiBlockUnsignedPalletCallLike }
  | { pallet: 'MultiBlockSigned'; palletCall: PalletElectionProviderMultiBlockSignedPalletCallLike }
  | { pallet: 'ConvictionVoting'; palletCall: PalletConvictionVotingCallLike }
  | { pallet: 'Referenda'; palletCall: PalletReferendaCallLike }
  | { pallet: 'Whitelist'; palletCall: PalletWhitelistCallLike }
  | { pallet: 'Treasury'; palletCall: PalletTreasuryCallLike }
  | { pallet: 'AssetRate'; palletCall: PalletAssetRateCallLike }
  | { pallet: 'AssetConversionMigration'; palletCall: PalletAssetConversionOpsCallLike }
  | { pallet: 'AhOps'; palletCall: PalletAhOpsCallLike }
  | { pallet: 'AhMigrator'; palletCall: PalletAhMigratorCallLike };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type FrameSystemCall =
  /**
   * Make some on-chain remark.
   *
   * Can be executed by every `origin`.
   **/
  | { name: 'Remark'; params: { remark: Bytes } }
  /**
   * Set the number of pages in the WebAssembly environment's heap.
   **/
  | { name: 'SetHeapPages'; params: { pages: bigint } }
  /**
   * Set the new runtime code.
   **/
  | { name: 'SetCode'; params: { code: Bytes } }
  /**
   * Set the new runtime code without doing any checks of the given `code`.
   *
   * Note that runtime upgrades will not run if this is called with a not-increasing spec
   * version!
   **/
  | { name: 'SetCodeWithoutChecks'; params: { code: Bytes } }
  /**
   * Set some items of storage.
   **/
  | { name: 'SetStorage'; params: { items: Array<[Bytes, Bytes]> } }
  /**
   * Kill some items from storage.
   **/
  | { name: 'KillStorage'; params: { keys: Array<Bytes> } }
  /**
   * Kill all storage items with a key that starts with the given prefix.
   *
   * **NOTE:** We rely on the Root origin to provide us the number of subkeys under
   * the prefix we are removing to accurately calculate the weight of this function.
   **/
  | { name: 'KillPrefix'; params: { prefix: Bytes; subkeys: number } }
  /**
   * Make some on-chain remark and emit event.
   **/
  | { name: 'RemarkWithEvent'; params: { remark: Bytes } }
  /**
   * Authorize an upgrade to a given `code_hash` for the runtime. The runtime can be supplied
   * later.
   *
   * This call requires Root origin.
   **/
  | { name: 'AuthorizeUpgrade'; params: { codeHash: H256 } }
  /**
   * Authorize an upgrade to a given `code_hash` for the runtime. The runtime can be supplied
   * later.
   *
   * WARNING: This authorizes an upgrade that will take place without any safety checks, for
   * example that the spec name remains the same and that the version number increases. Not
   * recommended for normal use. Use `authorize_upgrade` instead.
   *
   * This call requires Root origin.
   **/
  | { name: 'AuthorizeUpgradeWithoutChecks'; params: { codeHash: H256 } }
  /**
   * Provide the preimage (runtime binary) `code` for an upgrade that has been authorized.
   *
   * If the authorization required a version check, this call will ensure the spec name
   * remains unchanged and that the spec version has increased.
   *
   * Depending on the runtime's `OnSetCode` configuration, this function may directly apply
   * the new `code` in the same block or attempt to schedule the upgrade.
   *
   * All origins are allowed.
   **/
  | { name: 'ApplyAuthorizedUpgrade'; params: { code: Bytes } };

export type FrameSystemCallLike =
  /**
   * Make some on-chain remark.
   *
   * Can be executed by every `origin`.
   **/
  | { name: 'Remark'; params: { remark: BytesLike } }
  /**
   * Set the number of pages in the WebAssembly environment's heap.
   **/
  | { name: 'SetHeapPages'; params: { pages: bigint } }
  /**
   * Set the new runtime code.
   **/
  | { name: 'SetCode'; params: { code: BytesLike } }
  /**
   * Set the new runtime code without doing any checks of the given `code`.
   *
   * Note that runtime upgrades will not run if this is called with a not-increasing spec
   * version!
   **/
  | { name: 'SetCodeWithoutChecks'; params: { code: BytesLike } }
  /**
   * Set some items of storage.
   **/
  | { name: 'SetStorage'; params: { items: Array<[BytesLike, BytesLike]> } }
  /**
   * Kill some items from storage.
   **/
  | { name: 'KillStorage'; params: { keys: Array<BytesLike> } }
  /**
   * Kill all storage items with a key that starts with the given prefix.
   *
   * **NOTE:** We rely on the Root origin to provide us the number of subkeys under
   * the prefix we are removing to accurately calculate the weight of this function.
   **/
  | { name: 'KillPrefix'; params: { prefix: BytesLike; subkeys: number } }
  /**
   * Make some on-chain remark and emit event.
   **/
  | { name: 'RemarkWithEvent'; params: { remark: BytesLike } }
  /**
   * Authorize an upgrade to a given `code_hash` for the runtime. The runtime can be supplied
   * later.
   *
   * This call requires Root origin.
   **/
  | { name: 'AuthorizeUpgrade'; params: { codeHash: H256 } }
  /**
   * Authorize an upgrade to a given `code_hash` for the runtime. The runtime can be supplied
   * later.
   *
   * WARNING: This authorizes an upgrade that will take place without any safety checks, for
   * example that the spec name remains the same and that the version number increases. Not
   * recommended for normal use. Use `authorize_upgrade` instead.
   *
   * This call requires Root origin.
   **/
  | { name: 'AuthorizeUpgradeWithoutChecks'; params: { codeHash: H256 } }
  /**
   * Provide the preimage (runtime binary) `code` for an upgrade that has been authorized.
   *
   * If the authorization required a version check, this call will ensure the spec name
   * remains unchanged and that the spec version has increased.
   *
   * Depending on the runtime's `OnSetCode` configuration, this function may directly apply
   * the new `code` in the same block or attempt to schedule the upgrade.
   *
   * All origins are allowed.
   **/
  | { name: 'ApplyAuthorizedUpgrade'; params: { code: BytesLike } };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type CumulusPalletParachainSystemCall =
  /**
   * Set the current validation data.
   *
   * This should be invoked exactly once per block. It will panic at the finalization
   * phase if the call was not invoked.
   *
   * The dispatch origin for this call must be `Inherent`
   *
   * As a side effect, this function upgrades the current validation function
   * if the appropriate time has come.
   **/
  | { name: 'SetValidationData'; params: { data: CumulusPrimitivesParachainInherentParachainInherentData } }
  | { name: 'SudoSendUpwardMessage'; params: { message: Bytes } };

export type CumulusPalletParachainSystemCallLike =
  /**
   * Set the current validation data.
   *
   * This should be invoked exactly once per block. It will panic at the finalization
   * phase if the call was not invoked.
   *
   * The dispatch origin for this call must be `Inherent`
   *
   * As a side effect, this function upgrades the current validation function
   * if the appropriate time has come.
   **/
  | { name: 'SetValidationData'; params: { data: CumulusPrimitivesParachainInherentParachainInherentData } }
  | { name: 'SudoSendUpwardMessage'; params: { message: BytesLike } };

export type CumulusPrimitivesParachainInherentParachainInherentData = {
  validationData: PolkadotPrimitivesV8PersistedValidationData;
  relayChainState: SpTrieStorageProof;
  downwardMessages: Array<PolkadotCorePrimitivesInboundDownwardMessage>;
  horizontalMessages: Array<[PolkadotParachainPrimitivesPrimitivesId, Array<PolkadotCorePrimitivesInboundHrmpMessage>]>;
};

export type PolkadotPrimitivesV8PersistedValidationData = {
  parentHead: PolkadotParachainPrimitivesPrimitivesHeadData;
  relayParentNumber: number;
  relayParentStorageRoot: H256;
  maxPovSize: number;
};

export type PolkadotParachainPrimitivesPrimitivesHeadData = Bytes;

export type SpTrieStorageProof = { trieNodes: Array<Bytes> };

export type PolkadotCorePrimitivesInboundDownwardMessage = { sentAt: number; msg: Bytes };

export type PolkadotCorePrimitivesInboundHrmpMessage = { sentAt: number; data: Bytes };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletTimestampCall =
  /**
   * Set the current time.
   *
   * This call should be invoked exactly once per block. It will panic at the finalization
   * phase, if this call hasn't been invoked by that time.
   *
   * The timestamp should be greater than the previous one by the amount specified by
   * [`Config::MinimumPeriod`].
   *
   * The dispatch origin for this call must be _None_.
   *
   * This dispatch class is _Mandatory_ to ensure it gets executed in the block. Be aware
   * that changing the complexity of this call could result exhausting the resources in a
   * block to execute any other calls.
   *
   * ## Complexity
   * - `O(1)` (Note that implementations of `OnTimestampSet` must also be `O(1)`)
   * - 1 storage read and 1 storage mutation (codec `O(1)` because of `DidUpdate::take` in
   * `on_finalize`)
   * - 1 event handler `on_timestamp_set`. Must be `O(1)`.
   **/
  { name: 'Set'; params: { now: bigint } };

export type PalletTimestampCallLike =
  /**
   * Set the current time.
   *
   * This call should be invoked exactly once per block. It will panic at the finalization
   * phase, if this call hasn't been invoked by that time.
   *
   * The timestamp should be greater than the previous one by the amount specified by
   * [`Config::MinimumPeriod`].
   *
   * The dispatch origin for this call must be _None_.
   *
   * This dispatch class is _Mandatory_ to ensure it gets executed in the block. Be aware
   * that changing the complexity of this call could result exhausting the resources in a
   * block to execute any other calls.
   *
   * ## Complexity
   * - `O(1)` (Note that implementations of `OnTimestampSet` must also be `O(1)`)
   * - 1 storage read and 1 storage mutation (codec `O(1)` because of `DidUpdate::take` in
   * `on_finalize`)
   * - 1 event handler `on_timestamp_set`. Must be `O(1)`.
   **/
  { name: 'Set'; params: { now: bigint } };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type StagingParachainInfoCall = null;

export type StagingParachainInfoCallLike = null;

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletMigrationsCall =
  /**
   * Allows root to set a cursor to forcefully start, stop or forward the migration process.
   *
   * Should normally not be needed and is only in place as emergency measure. Note that
   * restarting the migration process in this manner will not call the
   * [`MigrationStatusHandler::started`] hook or emit an `UpgradeStarted` event.
   **/
  | { name: 'ForceSetCursor'; params: { cursor?: PalletMigrationsMigrationCursor | undefined } }
  /**
   * Allows root to set an active cursor to forcefully start/forward the migration process.
   *
   * This is an edge-case version of [`Self::force_set_cursor`] that allows to set the
   * `started_at` value to the next block number. Otherwise this would not be possible, since
   * `force_set_cursor` takes an absolute block number. Setting `started_at` to `None`
   * indicates that the current block number plus one should be used.
   **/
  | {
      name: 'ForceSetActiveCursor';
      params: { index: number; innerCursor?: Bytes | undefined; startedAt?: number | undefined };
    }
  /**
   * Forces the onboarding of the migrations.
   *
   * This process happens automatically on a runtime upgrade. It is in place as an emergency
   * measurement. The cursor needs to be `None` for this to succeed.
   **/
  | { name: 'ForceOnboardMbms' }
  /**
   * Clears the `Historic` set.
   *
   * `map_cursor` must be set to the last value that was returned by the
   * `HistoricCleared` event. The first time `None` can be used. `limit` must be chosen in a
   * way that will result in a sensible weight.
   **/
  | { name: 'ClearHistoric'; params: { selector: PalletMigrationsHistoricCleanupSelector } };

export type PalletMigrationsCallLike =
  /**
   * Allows root to set a cursor to forcefully start, stop or forward the migration process.
   *
   * Should normally not be needed and is only in place as emergency measure. Note that
   * restarting the migration process in this manner will not call the
   * [`MigrationStatusHandler::started`] hook or emit an `UpgradeStarted` event.
   **/
  | { name: 'ForceSetCursor'; params: { cursor?: PalletMigrationsMigrationCursor | undefined } }
  /**
   * Allows root to set an active cursor to forcefully start/forward the migration process.
   *
   * This is an edge-case version of [`Self::force_set_cursor`] that allows to set the
   * `started_at` value to the next block number. Otherwise this would not be possible, since
   * `force_set_cursor` takes an absolute block number. Setting `started_at` to `None`
   * indicates that the current block number plus one should be used.
   **/
  | {
      name: 'ForceSetActiveCursor';
      params: { index: number; innerCursor?: BytesLike | undefined; startedAt?: number | undefined };
    }
  /**
   * Forces the onboarding of the migrations.
   *
   * This process happens automatically on a runtime upgrade. It is in place as an emergency
   * measurement. The cursor needs to be `None` for this to succeed.
   **/
  | { name: 'ForceOnboardMbms' }
  /**
   * Clears the `Historic` set.
   *
   * `map_cursor` must be set to the last value that was returned by the
   * `HistoricCleared` event. The first time `None` can be used. `limit` must be chosen in a
   * way that will result in a sensible weight.
   **/
  | { name: 'ClearHistoric'; params: { selector: PalletMigrationsHistoricCleanupSelector } };

export type PalletMigrationsMigrationCursor =
  | { type: 'Active'; value: PalletMigrationsActiveCursor }
  | { type: 'Stuck' };

export type PalletMigrationsActiveCursor = { index: number; innerCursor?: Bytes | undefined; startedAt: number };

export type PalletMigrationsHistoricCleanupSelector =
  | { type: 'Specific'; value: Array<Bytes> }
  | { type: 'Wildcard'; value: { limit?: number | undefined; previousCursor?: Bytes | undefined } };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletPreimageCall =
  /**
   * Register a preimage on-chain.
   *
   * If the preimage was previously requested, no fees or deposits are taken for providing
   * the preimage. Otherwise, a deposit is taken proportional to the size of the preimage.
   **/
  | { name: 'NotePreimage'; params: { bytes: Bytes } }
  /**
   * Clear an unrequested preimage from the runtime storage.
   *
   * If `len` is provided, then it will be a much cheaper operation.
   *
   * - `hash`: The hash of the preimage to be removed from the store.
   * - `len`: The length of the preimage of `hash`.
   **/
  | { name: 'UnnotePreimage'; params: { hash: H256 } }
  /**
   * Request a preimage be uploaded to the chain without paying any fees or deposits.
   *
   * If the preimage requests has already been provided on-chain, we unreserve any deposit
   * a user may have paid, and take the control of the preimage out of their hands.
   **/
  | { name: 'RequestPreimage'; params: { hash: H256 } }
  /**
   * Clear a previously made request for a preimage.
   *
   * NOTE: THIS MUST NOT BE CALLED ON `hash` MORE TIMES THAN `request_preimage`.
   **/
  | { name: 'UnrequestPreimage'; params: { hash: H256 } }
  /**
   * Ensure that the bulk of pre-images is upgraded.
   *
   * The caller pays no fee if at least 90% of pre-images were successfully updated.
   **/
  | { name: 'EnsureUpdated'; params: { hashes: Array<H256> } };

export type PalletPreimageCallLike =
  /**
   * Register a preimage on-chain.
   *
   * If the preimage was previously requested, no fees or deposits are taken for providing
   * the preimage. Otherwise, a deposit is taken proportional to the size of the preimage.
   **/
  | { name: 'NotePreimage'; params: { bytes: BytesLike } }
  /**
   * Clear an unrequested preimage from the runtime storage.
   *
   * If `len` is provided, then it will be a much cheaper operation.
   *
   * - `hash`: The hash of the preimage to be removed from the store.
   * - `len`: The length of the preimage of `hash`.
   **/
  | { name: 'UnnotePreimage'; params: { hash: H256 } }
  /**
   * Request a preimage be uploaded to the chain without paying any fees or deposits.
   *
   * If the preimage requests has already been provided on-chain, we unreserve any deposit
   * a user may have paid, and take the control of the preimage out of their hands.
   **/
  | { name: 'RequestPreimage'; params: { hash: H256 } }
  /**
   * Clear a previously made request for a preimage.
   *
   * NOTE: THIS MUST NOT BE CALLED ON `hash` MORE TIMES THAN `request_preimage`.
   **/
  | { name: 'UnrequestPreimage'; params: { hash: H256 } }
  /**
   * Ensure that the bulk of pre-images is upgraded.
   *
   * The caller pays no fee if at least 90% of pre-images were successfully updated.
   **/
  | { name: 'EnsureUpdated'; params: { hashes: Array<H256> } };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletSchedulerCall =
  /**
   * Anonymously schedule a task.
   **/
  | {
      name: 'Schedule';
      params: {
        when: number;
        maybePeriodic?: [number, number] | undefined;
        priority: number;
        call: AssetHubWestendRuntimeRuntimeCall;
      };
    }
  /**
   * Cancel an anonymously scheduled task.
   **/
  | { name: 'Cancel'; params: { when: number; index: number } }
  /**
   * Schedule a named task.
   **/
  | {
      name: 'ScheduleNamed';
      params: {
        id: FixedBytes<32>;
        when: number;
        maybePeriodic?: [number, number] | undefined;
        priority: number;
        call: AssetHubWestendRuntimeRuntimeCall;
      };
    }
  /**
   * Cancel a named scheduled task.
   **/
  | { name: 'CancelNamed'; params: { id: FixedBytes<32> } }
  /**
   * Anonymously schedule a task after a delay.
   **/
  | {
      name: 'ScheduleAfter';
      params: {
        after: number;
        maybePeriodic?: [number, number] | undefined;
        priority: number;
        call: AssetHubWestendRuntimeRuntimeCall;
      };
    }
  /**
   * Schedule a named task after a delay.
   **/
  | {
      name: 'ScheduleNamedAfter';
      params: {
        id: FixedBytes<32>;
        after: number;
        maybePeriodic?: [number, number] | undefined;
        priority: number;
        call: AssetHubWestendRuntimeRuntimeCall;
      };
    }
  /**
   * Set a retry configuration for a task so that, in case its scheduled run fails, it will
   * be retried after `period` blocks, for a total amount of `retries` retries or until it
   * succeeds.
   *
   * Tasks which need to be scheduled for a retry are still subject to weight metering and
   * agenda space, same as a regular task. If a periodic task fails, it will be scheduled
   * normally while the task is retrying.
   *
   * Tasks scheduled as a result of a retry for a periodic task are unnamed, non-periodic
   * clones of the original task. Their retry configuration will be derived from the
   * original task's configuration, but will have a lower value for `remaining` than the
   * original `total_retries`.
   **/
  | { name: 'SetRetry'; params: { task: [number, number]; retries: number; period: number } }
  /**
   * Set a retry configuration for a named task so that, in case its scheduled run fails, it
   * will be retried after `period` blocks, for a total amount of `retries` retries or until
   * it succeeds.
   *
   * Tasks which need to be scheduled for a retry are still subject to weight metering and
   * agenda space, same as a regular task. If a periodic task fails, it will be scheduled
   * normally while the task is retrying.
   *
   * Tasks scheduled as a result of a retry for a periodic task are unnamed, non-periodic
   * clones of the original task. Their retry configuration will be derived from the
   * original task's configuration, but will have a lower value for `remaining` than the
   * original `total_retries`.
   **/
  | { name: 'SetRetryNamed'; params: { id: FixedBytes<32>; retries: number; period: number } }
  /**
   * Removes the retry configuration of a task.
   **/
  | { name: 'CancelRetry'; params: { task: [number, number] } }
  /**
   * Cancel the retry configuration of a named task.
   **/
  | { name: 'CancelRetryNamed'; params: { id: FixedBytes<32> } };

export type PalletSchedulerCallLike =
  /**
   * Anonymously schedule a task.
   **/
  | {
      name: 'Schedule';
      params: {
        when: number;
        maybePeriodic?: [number, number] | undefined;
        priority: number;
        call: AssetHubWestendRuntimeRuntimeCallLike;
      };
    }
  /**
   * Cancel an anonymously scheduled task.
   **/
  | { name: 'Cancel'; params: { when: number; index: number } }
  /**
   * Schedule a named task.
   **/
  | {
      name: 'ScheduleNamed';
      params: {
        id: FixedBytes<32>;
        when: number;
        maybePeriodic?: [number, number] | undefined;
        priority: number;
        call: AssetHubWestendRuntimeRuntimeCallLike;
      };
    }
  /**
   * Cancel a named scheduled task.
   **/
  | { name: 'CancelNamed'; params: { id: FixedBytes<32> } }
  /**
   * Anonymously schedule a task after a delay.
   **/
  | {
      name: 'ScheduleAfter';
      params: {
        after: number;
        maybePeriodic?: [number, number] | undefined;
        priority: number;
        call: AssetHubWestendRuntimeRuntimeCallLike;
      };
    }
  /**
   * Schedule a named task after a delay.
   **/
  | {
      name: 'ScheduleNamedAfter';
      params: {
        id: FixedBytes<32>;
        after: number;
        maybePeriodic?: [number, number] | undefined;
        priority: number;
        call: AssetHubWestendRuntimeRuntimeCallLike;
      };
    }
  /**
   * Set a retry configuration for a task so that, in case its scheduled run fails, it will
   * be retried after `period` blocks, for a total amount of `retries` retries or until it
   * succeeds.
   *
   * Tasks which need to be scheduled for a retry are still subject to weight metering and
   * agenda space, same as a regular task. If a periodic task fails, it will be scheduled
   * normally while the task is retrying.
   *
   * Tasks scheduled as a result of a retry for a periodic task are unnamed, non-periodic
   * clones of the original task. Their retry configuration will be derived from the
   * original task's configuration, but will have a lower value for `remaining` than the
   * original `total_retries`.
   **/
  | { name: 'SetRetry'; params: { task: [number, number]; retries: number; period: number } }
  /**
   * Set a retry configuration for a named task so that, in case its scheduled run fails, it
   * will be retried after `period` blocks, for a total amount of `retries` retries or until
   * it succeeds.
   *
   * Tasks which need to be scheduled for a retry are still subject to weight metering and
   * agenda space, same as a regular task. If a periodic task fails, it will be scheduled
   * normally while the task is retrying.
   *
   * Tasks scheduled as a result of a retry for a periodic task are unnamed, non-periodic
   * clones of the original task. Their retry configuration will be derived from the
   * original task's configuration, but will have a lower value for `remaining` than the
   * original `total_retries`.
   **/
  | { name: 'SetRetryNamed'; params: { id: FixedBytes<32>; retries: number; period: number } }
  /**
   * Removes the retry configuration of a task.
   **/
  | { name: 'CancelRetry'; params: { task: [number, number] } }
  /**
   * Cancel the retry configuration of a named task.
   **/
  | { name: 'CancelRetryNamed'; params: { id: FixedBytes<32> } };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletSudoCall =
  /**
   * Authenticates the sudo key and dispatches a function call with `Root` origin.
   **/
  | { name: 'Sudo'; params: { call: AssetHubWestendRuntimeRuntimeCall } }
  /**
   * Authenticates the sudo key and dispatches a function call with `Root` origin.
   * This function does not check the weight of the call, and instead allows the
   * Sudo user to specify the weight of the call.
   *
   * The dispatch origin for this call must be _Signed_.
   **/
  | {
      name: 'SudoUncheckedWeight';
      params: { call: AssetHubWestendRuntimeRuntimeCall; weight: SpWeightsWeightV2Weight };
    }
  /**
   * Authenticates the current sudo key and sets the given AccountId (`new`) as the new sudo
   * key.
   **/
  | { name: 'SetKey'; params: { new: MultiAddress } }
  /**
   * Authenticates the sudo key and dispatches a function call with `Signed` origin from
   * a given account.
   *
   * The dispatch origin for this call must be _Signed_.
   **/
  | { name: 'SudoAs'; params: { who: MultiAddress; call: AssetHubWestendRuntimeRuntimeCall } }
  /**
   * Permanently removes the sudo key.
   *
   * **This cannot be un-done.**
   **/
  | { name: 'RemoveKey' };

export type PalletSudoCallLike =
  /**
   * Authenticates the sudo key and dispatches a function call with `Root` origin.
   **/
  | { name: 'Sudo'; params: { call: AssetHubWestendRuntimeRuntimeCallLike } }
  /**
   * Authenticates the sudo key and dispatches a function call with `Root` origin.
   * This function does not check the weight of the call, and instead allows the
   * Sudo user to specify the weight of the call.
   *
   * The dispatch origin for this call must be _Signed_.
   **/
  | {
      name: 'SudoUncheckedWeight';
      params: { call: AssetHubWestendRuntimeRuntimeCallLike; weight: SpWeightsWeightV2Weight };
    }
  /**
   * Authenticates the current sudo key and sets the given AccountId (`new`) as the new sudo
   * key.
   **/
  | { name: 'SetKey'; params: { new: MultiAddressLike } }
  /**
   * Authenticates the sudo key and dispatches a function call with `Signed` origin from
   * a given account.
   *
   * The dispatch origin for this call must be _Signed_.
   **/
  | { name: 'SudoAs'; params: { who: MultiAddressLike; call: AssetHubWestendRuntimeRuntimeCallLike } }
  /**
   * Permanently removes the sudo key.
   *
   * **This cannot be un-done.**
   **/
  | { name: 'RemoveKey' };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletBalancesCall =
  /**
   * Transfer some liquid free balance to another account.
   *
   * `transfer_allow_death` will set the `FreeBalance` of the sender and receiver.
   * If the sender's account is below the existential deposit as a result
   * of the transfer, the account will be reaped.
   *
   * The dispatch origin for this call must be `Signed` by the transactor.
   **/
  | { name: 'TransferAllowDeath'; params: { dest: MultiAddress; value: bigint } }
  /**
   * Exactly as `transfer_allow_death`, except the origin must be root and the source account
   * may be specified.
   **/
  | { name: 'ForceTransfer'; params: { source: MultiAddress; dest: MultiAddress; value: bigint } }
  /**
   * Same as the [`transfer_allow_death`] call, but with a check that the transfer will not
   * kill the origin account.
   *
   * 99% of the time you want [`transfer_allow_death`] instead.
   *
   * [`transfer_allow_death`]: struct.Pallet.html#method.transfer
   **/
  | { name: 'TransferKeepAlive'; params: { dest: MultiAddress; value: bigint } }
  /**
   * Transfer the entire transferable balance from the caller account.
   *
   * NOTE: This function only attempts to transfer _transferable_ balances. This means that
   * any locked, reserved, or existential deposits (when `keep_alive` is `true`), will not be
   * transferred by this function. To ensure that this function results in a killed account,
   * you might need to prepare the account by removing any reference counters, storage
   * deposits, etc...
   *
   * The dispatch origin of this call must be Signed.
   *
   * - `dest`: The recipient of the transfer.
   * - `keep_alive`: A boolean to determine if the `transfer_all` operation should send all
   * of the funds the account has, causing the sender account to be killed (false), or
   * transfer everything except at least the existential deposit, which will guarantee to
   * keep the sender account alive (true).
   **/
  | { name: 'TransferAll'; params: { dest: MultiAddress; keepAlive: boolean } }
  /**
   * Unreserve some balance from a user by force.
   *
   * Can only be called by ROOT.
   **/
  | { name: 'ForceUnreserve'; params: { who: MultiAddress; amount: bigint } }
  /**
   * Upgrade a specified account.
   *
   * - `origin`: Must be `Signed`.
   * - `who`: The account to be upgraded.
   *
   * This will waive the transaction fee if at least all but 10% of the accounts needed to
   * be upgraded. (We let some not have to be upgraded just in order to allow for the
   * possibility of churn).
   **/
  | { name: 'UpgradeAccounts'; params: { who: Array<AccountId32> } }
  /**
   * Set the regular balance of a given account.
   *
   * The dispatch origin for this call is `root`.
   **/
  | { name: 'ForceSetBalance'; params: { who: MultiAddress; newFree: bigint } }
  /**
   * Adjust the total issuance in a saturating way.
   *
   * Can only be called by root and always needs a positive `delta`.
   *
   * # Example
   **/
  | { name: 'ForceAdjustTotalIssuance'; params: { direction: PalletBalancesAdjustmentDirection; delta: bigint } }
  /**
   * Burn the specified liquid free balance from the origin account.
   *
   * If the origin's account ends up below the existential deposit as a result
   * of the burn and `keep_alive` is false, the account will be reaped.
   *
   * Unlike sending funds to a _burn_ address, which merely makes the funds inaccessible,
   * this `burn` operation will reduce total issuance by the amount _burned_.
   **/
  | { name: 'Burn'; params: { value: bigint; keepAlive: boolean } };

export type PalletBalancesCallLike =
  /**
   * Transfer some liquid free balance to another account.
   *
   * `transfer_allow_death` will set the `FreeBalance` of the sender and receiver.
   * If the sender's account is below the existential deposit as a result
   * of the transfer, the account will be reaped.
   *
   * The dispatch origin for this call must be `Signed` by the transactor.
   **/
  | { name: 'TransferAllowDeath'; params: { dest: MultiAddressLike; value: bigint } }
  /**
   * Exactly as `transfer_allow_death`, except the origin must be root and the source account
   * may be specified.
   **/
  | { name: 'ForceTransfer'; params: { source: MultiAddressLike; dest: MultiAddressLike; value: bigint } }
  /**
   * Same as the [`transfer_allow_death`] call, but with a check that the transfer will not
   * kill the origin account.
   *
   * 99% of the time you want [`transfer_allow_death`] instead.
   *
   * [`transfer_allow_death`]: struct.Pallet.html#method.transfer
   **/
  | { name: 'TransferKeepAlive'; params: { dest: MultiAddressLike; value: bigint } }
  /**
   * Transfer the entire transferable balance from the caller account.
   *
   * NOTE: This function only attempts to transfer _transferable_ balances. This means that
   * any locked, reserved, or existential deposits (when `keep_alive` is `true`), will not be
   * transferred by this function. To ensure that this function results in a killed account,
   * you might need to prepare the account by removing any reference counters, storage
   * deposits, etc...
   *
   * The dispatch origin of this call must be Signed.
   *
   * - `dest`: The recipient of the transfer.
   * - `keep_alive`: A boolean to determine if the `transfer_all` operation should send all
   * of the funds the account has, causing the sender account to be killed (false), or
   * transfer everything except at least the existential deposit, which will guarantee to
   * keep the sender account alive (true).
   **/
  | { name: 'TransferAll'; params: { dest: MultiAddressLike; keepAlive: boolean } }
  /**
   * Unreserve some balance from a user by force.
   *
   * Can only be called by ROOT.
   **/
  | { name: 'ForceUnreserve'; params: { who: MultiAddressLike; amount: bigint } }
  /**
   * Upgrade a specified account.
   *
   * - `origin`: Must be `Signed`.
   * - `who`: The account to be upgraded.
   *
   * This will waive the transaction fee if at least all but 10% of the accounts needed to
   * be upgraded. (We let some not have to be upgraded just in order to allow for the
   * possibility of churn).
   **/
  | { name: 'UpgradeAccounts'; params: { who: Array<AccountId32Like> } }
  /**
   * Set the regular balance of a given account.
   *
   * The dispatch origin for this call is `root`.
   **/
  | { name: 'ForceSetBalance'; params: { who: MultiAddressLike; newFree: bigint } }
  /**
   * Adjust the total issuance in a saturating way.
   *
   * Can only be called by root and always needs a positive `delta`.
   *
   * # Example
   **/
  | { name: 'ForceAdjustTotalIssuance'; params: { direction: PalletBalancesAdjustmentDirection; delta: bigint } }
  /**
   * Burn the specified liquid free balance from the origin account.
   *
   * If the origin's account ends up below the existential deposit as a result
   * of the burn and `keep_alive` is false, the account will be reaped.
   *
   * Unlike sending funds to a _burn_ address, which merely makes the funds inaccessible,
   * this `burn` operation will reduce total issuance by the amount _burned_.
   **/
  | { name: 'Burn'; params: { value: bigint; keepAlive: boolean } };

export type PalletBalancesAdjustmentDirection = 'Increase' | 'Decrease';

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletVestingCall =
  /**
   * Unlock any vested funds of the sender account.
   *
   * The dispatch origin for this call must be _Signed_ and the sender must have funds still
   * locked under this pallet.
   *
   * Emits either `VestingCompleted` or `VestingUpdated`.
   *
   * ## Complexity
   * - `O(1)`.
   **/
  | { name: 'Vest' }
  /**
   * Unlock any vested funds of a `target` account.
   *
   * The dispatch origin for this call must be _Signed_.
   *
   * - `target`: The account whose vested funds should be unlocked. Must have funds still
   * locked under this pallet.
   *
   * Emits either `VestingCompleted` or `VestingUpdated`.
   *
   * ## Complexity
   * - `O(1)`.
   **/
  | { name: 'VestOther'; params: { target: MultiAddress } }
  /**
   * Create a vested transfer.
   *
   * The dispatch origin for this call must be _Signed_.
   *
   * - `target`: The account receiving the vested funds.
   * - `schedule`: The vesting schedule attached to the transfer.
   *
   * Emits `VestingCreated`.
   *
   * NOTE: This will unlock all schedules through the current block.
   *
   * ## Complexity
   * - `O(1)`.
   **/
  | { name: 'VestedTransfer'; params: { target: MultiAddress; schedule: PalletVestingVestingInfo } }
  /**
   * Force a vested transfer.
   *
   * The dispatch origin for this call must be _Root_.
   *
   * - `source`: The account whose funds should be transferred.
   * - `target`: The account that should be transferred the vested funds.
   * - `schedule`: The vesting schedule attached to the transfer.
   *
   * Emits `VestingCreated`.
   *
   * NOTE: This will unlock all schedules through the current block.
   *
   * ## Complexity
   * - `O(1)`.
   **/
  | {
      name: 'ForceVestedTransfer';
      params: { source: MultiAddress; target: MultiAddress; schedule: PalletVestingVestingInfo };
    }
  /**
   * Merge two vesting schedules together, creating a new vesting schedule that unlocks over
   * the highest possible start and end blocks. If both schedules have already started the
   * current block will be used as the schedule start; with the caveat that if one schedule
   * is finished by the current block, the other will be treated as the new merged schedule,
   * unmodified.
   *
   * NOTE: If `schedule1_index == schedule2_index` this is a no-op.
   * NOTE: This will unlock all schedules through the current block prior to merging.
   * NOTE: If both schedules have ended by the current block, no new schedule will be created
   * and both will be removed.
   *
   * Merged schedule attributes:
   * - `starting_block`: `MAX(schedule1.starting_block, scheduled2.starting_block,
   * current_block)`.
   * - `ending_block`: `MAX(schedule1.ending_block, schedule2.ending_block)`.
   * - `locked`: `schedule1.locked_at(current_block) + schedule2.locked_at(current_block)`.
   *
   * The dispatch origin for this call must be _Signed_.
   *
   * - `schedule1_index`: index of the first schedule to merge.
   * - `schedule2_index`: index of the second schedule to merge.
   **/
  | { name: 'MergeSchedules'; params: { schedule1Index: number; schedule2Index: number } }
  /**
   * Force remove a vesting schedule
   *
   * The dispatch origin for this call must be _Root_.
   *
   * - `target`: An account that has a vesting schedule
   * - `schedule_index`: The vesting schedule index that should be removed
   **/
  | { name: 'ForceRemoveVestingSchedule'; params: { target: MultiAddress; scheduleIndex: number } };

export type PalletVestingCallLike =
  /**
   * Unlock any vested funds of the sender account.
   *
   * The dispatch origin for this call must be _Signed_ and the sender must have funds still
   * locked under this pallet.
   *
   * Emits either `VestingCompleted` or `VestingUpdated`.
   *
   * ## Complexity
   * - `O(1)`.
   **/
  | { name: 'Vest' }
  /**
   * Unlock any vested funds of a `target` account.
   *
   * The dispatch origin for this call must be _Signed_.
   *
   * - `target`: The account whose vested funds should be unlocked. Must have funds still
   * locked under this pallet.
   *
   * Emits either `VestingCompleted` or `VestingUpdated`.
   *
   * ## Complexity
   * - `O(1)`.
   **/
  | { name: 'VestOther'; params: { target: MultiAddressLike } }
  /**
   * Create a vested transfer.
   *
   * The dispatch origin for this call must be _Signed_.
   *
   * - `target`: The account receiving the vested funds.
   * - `schedule`: The vesting schedule attached to the transfer.
   *
   * Emits `VestingCreated`.
   *
   * NOTE: This will unlock all schedules through the current block.
   *
   * ## Complexity
   * - `O(1)`.
   **/
  | { name: 'VestedTransfer'; params: { target: MultiAddressLike; schedule: PalletVestingVestingInfo } }
  /**
   * Force a vested transfer.
   *
   * The dispatch origin for this call must be _Root_.
   *
   * - `source`: The account whose funds should be transferred.
   * - `target`: The account that should be transferred the vested funds.
   * - `schedule`: The vesting schedule attached to the transfer.
   *
   * Emits `VestingCreated`.
   *
   * NOTE: This will unlock all schedules through the current block.
   *
   * ## Complexity
   * - `O(1)`.
   **/
  | {
      name: 'ForceVestedTransfer';
      params: { source: MultiAddressLike; target: MultiAddressLike; schedule: PalletVestingVestingInfo };
    }
  /**
   * Merge two vesting schedules together, creating a new vesting schedule that unlocks over
   * the highest possible start and end blocks. If both schedules have already started the
   * current block will be used as the schedule start; with the caveat that if one schedule
   * is finished by the current block, the other will be treated as the new merged schedule,
   * unmodified.
   *
   * NOTE: If `schedule1_index == schedule2_index` this is a no-op.
   * NOTE: This will unlock all schedules through the current block prior to merging.
   * NOTE: If both schedules have ended by the current block, no new schedule will be created
   * and both will be removed.
   *
   * Merged schedule attributes:
   * - `starting_block`: `MAX(schedule1.starting_block, scheduled2.starting_block,
   * current_block)`.
   * - `ending_block`: `MAX(schedule1.ending_block, schedule2.ending_block)`.
   * - `locked`: `schedule1.locked_at(current_block) + schedule2.locked_at(current_block)`.
   *
   * The dispatch origin for this call must be _Signed_.
   *
   * - `schedule1_index`: index of the first schedule to merge.
   * - `schedule2_index`: index of the second schedule to merge.
   **/
  | { name: 'MergeSchedules'; params: { schedule1Index: number; schedule2Index: number } }
  /**
   * Force remove a vesting schedule
   *
   * The dispatch origin for this call must be _Root_.
   *
   * - `target`: An account that has a vesting schedule
   * - `schedule_index`: The vesting schedule index that should be removed
   **/
  | { name: 'ForceRemoveVestingSchedule'; params: { target: MultiAddressLike; scheduleIndex: number } };

export type PalletVestingVestingInfo = { locked: bigint; perBlock: bigint; startingBlock: number };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletCollatorSelectionCall =
  /**
   * Set the list of invulnerable (fixed) collators. These collators must do some
   * preparation, namely to have registered session keys.
   *
   * The call will remove any accounts that have not registered keys from the set. That is,
   * it is non-atomic; the caller accepts all `AccountId`s passed in `new` _individually_ as
   * acceptable Invulnerables, and is not proposing a _set_ of new Invulnerables.
   *
   * This call does not maintain mutual exclusivity of `Invulnerables` and `Candidates`. It
   * is recommended to use a batch of `add_invulnerable` and `remove_invulnerable` instead. A
   * `batch_all` can also be used to enforce atomicity. If any candidates are included in
   * `new`, they should be removed with `remove_invulnerable_candidate` after execution.
   *
   * Must be called by the `UpdateOrigin`.
   **/
  | { name: 'SetInvulnerables'; params: { new: Array<AccountId32> } }
  /**
   * Set the ideal number of non-invulnerable collators. If lowering this number, then the
   * number of running collators could be higher than this figure. Aside from that edge case,
   * there should be no other way to have more candidates than the desired number.
   *
   * The origin for this call must be the `UpdateOrigin`.
   **/
  | { name: 'SetDesiredCandidates'; params: { max: number } }
  /**
   * Set the candidacy bond amount.
   *
   * If the candidacy bond is increased by this call, all current candidates which have a
   * deposit lower than the new bond will be kicked from the list and get their deposits
   * back.
   *
   * The origin for this call must be the `UpdateOrigin`.
   **/
  | { name: 'SetCandidacyBond'; params: { bond: bigint } }
  /**
   * Register this account as a collator candidate. The account must (a) already have
   * registered session keys and (b) be able to reserve the `CandidacyBond`.
   *
   * This call is not available to `Invulnerable` collators.
   **/
  | { name: 'RegisterAsCandidate' }
  /**
   * Deregister `origin` as a collator candidate. Note that the collator can only leave on
   * session change. The `CandidacyBond` will be unreserved immediately.
   *
   * This call will fail if the total number of candidates would drop below
   * `MinEligibleCollators`.
   **/
  | { name: 'LeaveIntent' }
  /**
   * Add a new account `who` to the list of `Invulnerables` collators. `who` must have
   * registered session keys. If `who` is a candidate, they will be removed.
   *
   * The origin for this call must be the `UpdateOrigin`.
   **/
  | { name: 'AddInvulnerable'; params: { who: AccountId32 } }
  /**
   * Remove an account `who` from the list of `Invulnerables` collators. `Invulnerables` must
   * be sorted.
   *
   * The origin for this call must be the `UpdateOrigin`.
   **/
  | { name: 'RemoveInvulnerable'; params: { who: AccountId32 } }
  /**
   * Update the candidacy bond of collator candidate `origin` to a new amount `new_deposit`.
   *
   * Setting a `new_deposit` that is lower than the current deposit while `origin` is
   * occupying a top-`DesiredCandidates` slot is not allowed.
   *
   * This call will fail if `origin` is not a collator candidate, the updated bond is lower
   * than the minimum candidacy bond, and/or the amount cannot be reserved.
   **/
  | { name: 'UpdateBond'; params: { newDeposit: bigint } }
  /**
   * The caller `origin` replaces a candidate `target` in the collator candidate list by
   * reserving `deposit`. The amount `deposit` reserved by the caller must be greater than
   * the existing bond of the target it is trying to replace.
   *
   * This call will fail if the caller is already a collator candidate or invulnerable, the
   * caller does not have registered session keys, the target is not a collator candidate,
   * and/or the `deposit` amount cannot be reserved.
   **/
  | { name: 'TakeCandidateSlot'; params: { deposit: bigint; target: AccountId32 } };

export type PalletCollatorSelectionCallLike =
  /**
   * Set the list of invulnerable (fixed) collators. These collators must do some
   * preparation, namely to have registered session keys.
   *
   * The call will remove any accounts that have not registered keys from the set. That is,
   * it is non-atomic; the caller accepts all `AccountId`s passed in `new` _individually_ as
   * acceptable Invulnerables, and is not proposing a _set_ of new Invulnerables.
   *
   * This call does not maintain mutual exclusivity of `Invulnerables` and `Candidates`. It
   * is recommended to use a batch of `add_invulnerable` and `remove_invulnerable` instead. A
   * `batch_all` can also be used to enforce atomicity. If any candidates are included in
   * `new`, they should be removed with `remove_invulnerable_candidate` after execution.
   *
   * Must be called by the `UpdateOrigin`.
   **/
  | { name: 'SetInvulnerables'; params: { new: Array<AccountId32Like> } }
  /**
   * Set the ideal number of non-invulnerable collators. If lowering this number, then the
   * number of running collators could be higher than this figure. Aside from that edge case,
   * there should be no other way to have more candidates than the desired number.
   *
   * The origin for this call must be the `UpdateOrigin`.
   **/
  | { name: 'SetDesiredCandidates'; params: { max: number } }
  /**
   * Set the candidacy bond amount.
   *
   * If the candidacy bond is increased by this call, all current candidates which have a
   * deposit lower than the new bond will be kicked from the list and get their deposits
   * back.
   *
   * The origin for this call must be the `UpdateOrigin`.
   **/
  | { name: 'SetCandidacyBond'; params: { bond: bigint } }
  /**
   * Register this account as a collator candidate. The account must (a) already have
   * registered session keys and (b) be able to reserve the `CandidacyBond`.
   *
   * This call is not available to `Invulnerable` collators.
   **/
  | { name: 'RegisterAsCandidate' }
  /**
   * Deregister `origin` as a collator candidate. Note that the collator can only leave on
   * session change. The `CandidacyBond` will be unreserved immediately.
   *
   * This call will fail if the total number of candidates would drop below
   * `MinEligibleCollators`.
   **/
  | { name: 'LeaveIntent' }
  /**
   * Add a new account `who` to the list of `Invulnerables` collators. `who` must have
   * registered session keys. If `who` is a candidate, they will be removed.
   *
   * The origin for this call must be the `UpdateOrigin`.
   **/
  | { name: 'AddInvulnerable'; params: { who: AccountId32Like } }
  /**
   * Remove an account `who` from the list of `Invulnerables` collators. `Invulnerables` must
   * be sorted.
   *
   * The origin for this call must be the `UpdateOrigin`.
   **/
  | { name: 'RemoveInvulnerable'; params: { who: AccountId32Like } }
  /**
   * Update the candidacy bond of collator candidate `origin` to a new amount `new_deposit`.
   *
   * Setting a `new_deposit` that is lower than the current deposit while `origin` is
   * occupying a top-`DesiredCandidates` slot is not allowed.
   *
   * This call will fail if `origin` is not a collator candidate, the updated bond is lower
   * than the minimum candidacy bond, and/or the amount cannot be reserved.
   **/
  | { name: 'UpdateBond'; params: { newDeposit: bigint } }
  /**
   * The caller `origin` replaces a candidate `target` in the collator candidate list by
   * reserving `deposit`. The amount `deposit` reserved by the caller must be greater than
   * the existing bond of the target it is trying to replace.
   *
   * This call will fail if the caller is already a collator candidate or invulnerable, the
   * caller does not have registered session keys, the target is not a collator candidate,
   * and/or the `deposit` amount cannot be reserved.
   **/
  | { name: 'TakeCandidateSlot'; params: { deposit: bigint; target: AccountId32Like } };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletSessionCall =
  /**
   * Sets the session key(s) of the function caller to `keys`.
   * Allows an account to set its session key prior to becoming a validator.
   * This doesn't take effect until the next session.
   *
   * The dispatch origin of this function must be signed.
   *
   * ## Complexity
   * - `O(1)`. Actual cost depends on the number of length of `T::Keys::key_ids()` which is
   * fixed.
   **/
  | { name: 'SetKeys'; params: { keys: AssetHubWestendRuntimeSessionKeys; proof: Bytes } }
  /**
   * Removes any session key(s) of the function caller.
   *
   * This doesn't take effect until the next session.
   *
   * The dispatch origin of this function must be Signed and the account must be either be
   * convertible to a validator ID using the chain's typical addressing system (this usually
   * means being a controller account) or directly convertible into a validator ID (which
   * usually means being a stash account).
   *
   * ## Complexity
   * - `O(1)` in number of key types. Actual cost depends on the number of length of
   * `T::Keys::key_ids()` which is fixed.
   **/
  | { name: 'PurgeKeys' };

export type PalletSessionCallLike =
  /**
   * Sets the session key(s) of the function caller to `keys`.
   * Allows an account to set its session key prior to becoming a validator.
   * This doesn't take effect until the next session.
   *
   * The dispatch origin of this function must be signed.
   *
   * ## Complexity
   * - `O(1)`. Actual cost depends on the number of length of `T::Keys::key_ids()` which is
   * fixed.
   **/
  | { name: 'SetKeys'; params: { keys: AssetHubWestendRuntimeSessionKeys; proof: BytesLike } }
  /**
   * Removes any session key(s) of the function caller.
   *
   * This doesn't take effect until the next session.
   *
   * The dispatch origin of this function must be Signed and the account must be either be
   * convertible to a validator ID using the chain's typical addressing system (this usually
   * means being a controller account) or directly convertible into a validator ID (which
   * usually means being a stash account).
   *
   * ## Complexity
   * - `O(1)` in number of key types. Actual cost depends on the number of length of
   * `T::Keys::key_ids()` which is fixed.
   **/
  | { name: 'PurgeKeys' };

export type AssetHubWestendRuntimeSessionKeys = { aura: SpConsensusAuraSr25519AppSr25519Public };

export type SpConsensusAuraSr25519AppSr25519Public = FixedBytes<32>;

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type CumulusPalletXcmpQueueCall =
  /**
   * Suspends all XCM executions for the XCMP queue, regardless of the sender's origin.
   *
   * - `origin`: Must pass `ControllerOrigin`.
   **/
  | { name: 'SuspendXcmExecution' }
  /**
   * Resumes all XCM executions for the XCMP queue.
   *
   * Note that this function doesn't change the status of the in/out bound channels.
   *
   * - `origin`: Must pass `ControllerOrigin`.
   **/
  | { name: 'ResumeXcmExecution' }
  /**
   * Overwrites the number of pages which must be in the queue for the other side to be
   * told to suspend their sending.
   *
   * - `origin`: Must pass `Root`.
   * - `new`: Desired value for `QueueConfigData.suspend_value`
   **/
  | { name: 'UpdateSuspendThreshold'; params: { new: number } }
  /**
   * Overwrites the number of pages which must be in the queue after which we drop any
   * further messages from the channel.
   *
   * - `origin`: Must pass `Root`.
   * - `new`: Desired value for `QueueConfigData.drop_threshold`
   **/
  | { name: 'UpdateDropThreshold'; params: { new: number } }
  /**
   * Overwrites the number of pages which the queue must be reduced to before it signals
   * that message sending may recommence after it has been suspended.
   *
   * - `origin`: Must pass `Root`.
   * - `new`: Desired value for `QueueConfigData.resume_threshold`
   **/
  | { name: 'UpdateResumeThreshold'; params: { new: number } };

export type CumulusPalletXcmpQueueCallLike =
  /**
   * Suspends all XCM executions for the XCMP queue, regardless of the sender's origin.
   *
   * - `origin`: Must pass `ControllerOrigin`.
   **/
  | { name: 'SuspendXcmExecution' }
  /**
   * Resumes all XCM executions for the XCMP queue.
   *
   * Note that this function doesn't change the status of the in/out bound channels.
   *
   * - `origin`: Must pass `ControllerOrigin`.
   **/
  | { name: 'ResumeXcmExecution' }
  /**
   * Overwrites the number of pages which must be in the queue for the other side to be
   * told to suspend their sending.
   *
   * - `origin`: Must pass `Root`.
   * - `new`: Desired value for `QueueConfigData.suspend_value`
   **/
  | { name: 'UpdateSuspendThreshold'; params: { new: number } }
  /**
   * Overwrites the number of pages which must be in the queue after which we drop any
   * further messages from the channel.
   *
   * - `origin`: Must pass `Root`.
   * - `new`: Desired value for `QueueConfigData.drop_threshold`
   **/
  | { name: 'UpdateDropThreshold'; params: { new: number } }
  /**
   * Overwrites the number of pages which the queue must be reduced to before it signals
   * that message sending may recommence after it has been suspended.
   *
   * - `origin`: Must pass `Root`.
   * - `new`: Desired value for `QueueConfigData.resume_threshold`
   **/
  | { name: 'UpdateResumeThreshold'; params: { new: number } };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletXcmCall =
  | { name: 'Send'; params: { dest: XcmVersionedLocation; message: XcmVersionedXcm } }
  /**
   * Teleport some assets from the local chain to some destination chain.
   *
   * **This function is deprecated: Use `limited_teleport_assets` instead.**
   *
   * Fee payment on the destination side is made from the asset in the `assets` vector of
   * index `fee_asset_item`. The weight limit for fees is not provided and thus is unlimited,
   * with all fees taken as needed from the asset.
   *
   * - `origin`: Must be capable of withdrawing the `assets` and executing XCM.
   * - `dest`: Destination context for the assets. Will typically be `[Parent,
   * Parachain(..)]` to send from parachain to parachain, or `[Parachain(..)]` to send from
   * relay to parachain.
   * - `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will
   * generally be an `AccountId32` value.
   * - `assets`: The assets to be withdrawn. This should include the assets used to pay the
   * fee on the `dest` chain.
   * - `fee_asset_item`: The index into `assets` of the item which should be used to pay
   * fees.
   **/
  | {
      name: 'TeleportAssets';
      params: {
        dest: XcmVersionedLocation;
        beneficiary: XcmVersionedLocation;
        assets: XcmVersionedAssets;
        feeAssetItem: number;
      };
    }
  /**
   * Transfer some assets from the local chain to the destination chain through their local,
   * destination or remote reserve.
   *
   * `assets` must have same reserve location and may not be teleportable to `dest`.
   * - `assets` have local reserve: transfer assets to sovereign account of destination
   * chain and forward a notification XCM to `dest` to mint and deposit reserve-based
   * assets to `beneficiary`.
   * - `assets` have destination reserve: burn local assets and forward a notification to
   * `dest` chain to withdraw the reserve assets from this chain's sovereign account and
   * deposit them to `beneficiary`.
   * - `assets` have remote reserve: burn local assets, forward XCM to reserve chain to move
   * reserves from this chain's SA to `dest` chain's SA, and forward another XCM to `dest`
   * to mint and deposit reserve-based assets to `beneficiary`.
   *
   * **This function is deprecated: Use `limited_reserve_transfer_assets` instead.**
   *
   * Fee payment on the destination side is made from the asset in the `assets` vector of
   * index `fee_asset_item`. The weight limit for fees is not provided and thus is unlimited,
   * with all fees taken as needed from the asset.
   *
   * - `origin`: Must be capable of withdrawing the `assets` and executing XCM.
   * - `dest`: Destination context for the assets. Will typically be `[Parent,
   * Parachain(..)]` to send from parachain to parachain, or `[Parachain(..)]` to send from
   * relay to parachain.
   * - `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will
   * generally be an `AccountId32` value.
   * - `assets`: The assets to be withdrawn. This should include the assets used to pay the
   * fee on the `dest` (and possibly reserve) chains.
   * - `fee_asset_item`: The index into `assets` of the item which should be used to pay
   * fees.
   **/
  | {
      name: 'ReserveTransferAssets';
      params: {
        dest: XcmVersionedLocation;
        beneficiary: XcmVersionedLocation;
        assets: XcmVersionedAssets;
        feeAssetItem: number;
      };
    }
  /**
   * Execute an XCM message from a local, signed, origin.
   *
   * An event is deposited indicating whether `msg` could be executed completely or only
   * partially.
   *
   * No more than `max_weight` will be used in its attempted execution. If this is less than
   * the maximum amount of weight that the message could take to be executed, then no
   * execution attempt will be made.
   **/
  | { name: 'Execute'; params: { message: XcmVersionedXcm; maxWeight: SpWeightsWeightV2Weight } }
  /**
   * Extoll that a particular destination can be communicated with through a particular
   * version of XCM.
   *
   * - `origin`: Must be an origin specified by AdminOrigin.
   * - `location`: The destination that is being described.
   * - `xcm_version`: The latest version of XCM that `location` supports.
   **/
  | { name: 'ForceXcmVersion'; params: { location: StagingXcmV5Location; version: number } }
  /**
   * Set a safe XCM version (the version that XCM should be encoded with if the most recent
   * version a destination can accept is unknown).
   *
   * - `origin`: Must be an origin specified by AdminOrigin.
   * - `maybe_xcm_version`: The default XCM encoding version, or `None` to disable.
   **/
  | { name: 'ForceDefaultXcmVersion'; params: { maybeXcmVersion?: number | undefined } }
  /**
   * Ask a location to notify us regarding their XCM version and any changes to it.
   *
   * - `origin`: Must be an origin specified by AdminOrigin.
   * - `location`: The location to which we should subscribe for XCM version notifications.
   **/
  | { name: 'ForceSubscribeVersionNotify'; params: { location: XcmVersionedLocation } }
  /**
   * Require that a particular destination should no longer notify us regarding any XCM
   * version changes.
   *
   * - `origin`: Must be an origin specified by AdminOrigin.
   * - `location`: The location to which we are currently subscribed for XCM version
   * notifications which we no longer desire.
   **/
  | { name: 'ForceUnsubscribeVersionNotify'; params: { location: XcmVersionedLocation } }
  /**
   * Transfer some assets from the local chain to the destination chain through their local,
   * destination or remote reserve.
   *
   * `assets` must have same reserve location and may not be teleportable to `dest`.
   * - `assets` have local reserve: transfer assets to sovereign account of destination
   * chain and forward a notification XCM to `dest` to mint and deposit reserve-based
   * assets to `beneficiary`.
   * - `assets` have destination reserve: burn local assets and forward a notification to
   * `dest` chain to withdraw the reserve assets from this chain's sovereign account and
   * deposit them to `beneficiary`.
   * - `assets` have remote reserve: burn local assets, forward XCM to reserve chain to move
   * reserves from this chain's SA to `dest` chain's SA, and forward another XCM to `dest`
   * to mint and deposit reserve-based assets to `beneficiary`.
   *
   * Fee payment on the destination side is made from the asset in the `assets` vector of
   * index `fee_asset_item`, up to enough to pay for `weight_limit` of weight. If more weight
   * is needed than `weight_limit`, then the operation will fail and the sent assets may be
   * at risk.
   *
   * - `origin`: Must be capable of withdrawing the `assets` and executing XCM.
   * - `dest`: Destination context for the assets. Will typically be `[Parent,
   * Parachain(..)]` to send from parachain to parachain, or `[Parachain(..)]` to send from
   * relay to parachain.
   * - `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will
   * generally be an `AccountId32` value.
   * - `assets`: The assets to be withdrawn. This should include the assets used to pay the
   * fee on the `dest` (and possibly reserve) chains.
   * - `fee_asset_item`: The index into `assets` of the item which should be used to pay
   * fees.
   * - `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase.
   **/
  | {
      name: 'LimitedReserveTransferAssets';
      params: {
        dest: XcmVersionedLocation;
        beneficiary: XcmVersionedLocation;
        assets: XcmVersionedAssets;
        feeAssetItem: number;
        weightLimit: XcmV3WeightLimit;
      };
    }
  /**
   * Teleport some assets from the local chain to some destination chain.
   *
   * Fee payment on the destination side is made from the asset in the `assets` vector of
   * index `fee_asset_item`, up to enough to pay for `weight_limit` of weight. If more weight
   * is needed than `weight_limit`, then the operation will fail and the sent assets may be
   * at risk.
   *
   * - `origin`: Must be capable of withdrawing the `assets` and executing XCM.
   * - `dest`: Destination context for the assets. Will typically be `[Parent,
   * Parachain(..)]` to send from parachain to parachain, or `[Parachain(..)]` to send from
   * relay to parachain.
   * - `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will
   * generally be an `AccountId32` value.
   * - `assets`: The assets to be withdrawn. This should include the assets used to pay the
   * fee on the `dest` chain.
   * - `fee_asset_item`: The index into `assets` of the item which should be used to pay
   * fees.
   * - `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase.
   **/
  | {
      name: 'LimitedTeleportAssets';
      params: {
        dest: XcmVersionedLocation;
        beneficiary: XcmVersionedLocation;
        assets: XcmVersionedAssets;
        feeAssetItem: number;
        weightLimit: XcmV3WeightLimit;
      };
    }
  /**
   * Set or unset the global suspension state of the XCM executor.
   *
   * - `origin`: Must be an origin specified by AdminOrigin.
   * - `suspended`: `true` to suspend, `false` to resume.
   **/
  | { name: 'ForceSuspension'; params: { suspended: boolean } }
  /**
   * Transfer some assets from the local chain to the destination chain through their local,
   * destination or remote reserve, or through teleports.
   *
   * Fee payment on the destination side is made from the asset in the `assets` vector of
   * index `fee_asset_item` (hence referred to as `fees`), up to enough to pay for
   * `weight_limit` of weight. If more weight is needed than `weight_limit`, then the
   * operation will fail and the sent assets may be at risk.
   *
   * `assets` (excluding `fees`) must have same reserve location or otherwise be teleportable
   * to `dest`, no limitations imposed on `fees`.
   * - for local reserve: transfer assets to sovereign account of destination chain and
   * forward a notification XCM to `dest` to mint and deposit reserve-based assets to
   * `beneficiary`.
   * - for destination reserve: burn local assets and forward a notification to `dest` chain
   * to withdraw the reserve assets from this chain's sovereign account and deposit them
   * to `beneficiary`.
   * - for remote reserve: burn local assets, forward XCM to reserve chain to move reserves
   * from this chain's SA to `dest` chain's SA, and forward another XCM to `dest` to mint
   * and deposit reserve-based assets to `beneficiary`.
   * - for teleports: burn local assets and forward XCM to `dest` chain to mint/teleport
   * assets and deposit them to `beneficiary`.
   *
   * - `origin`: Must be capable of withdrawing the `assets` and executing XCM.
   * - `dest`: Destination context for the assets. Will typically be `X2(Parent,
   * Parachain(..))` to send from parachain to parachain, or `X1(Parachain(..))` to send
   * from relay to parachain.
   * - `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will
   * generally be an `AccountId32` value.
   * - `assets`: The assets to be withdrawn. This should include the assets used to pay the
   * fee on the `dest` (and possibly reserve) chains.
   * - `fee_asset_item`: The index into `assets` of the item which should be used to pay
   * fees.
   * - `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase.
   **/
  | {
      name: 'TransferAssets';
      params: {
        dest: XcmVersionedLocation;
        beneficiary: XcmVersionedLocation;
        assets: XcmVersionedAssets;
        feeAssetItem: number;
        weightLimit: XcmV3WeightLimit;
      };
    }
  /**
   * Claims assets trapped on this pallet because of leftover assets during XCM execution.
   *
   * - `origin`: Anyone can call this extrinsic.
   * - `assets`: The exact assets that were trapped. Use the version to specify what version
   * was the latest when they were trapped.
   * - `beneficiary`: The location/account where the claimed assets will be deposited.
   **/
  | { name: 'ClaimAssets'; params: { assets: XcmVersionedAssets; beneficiary: XcmVersionedLocation } }
  /**
   * Transfer assets from the local chain to the destination chain using explicit transfer
   * types for assets and fees.
   *
   * `assets` must have same reserve location or may be teleportable to `dest`. Caller must
   * provide the `assets_transfer_type` to be used for `assets`:
   * - `TransferType::LocalReserve`: transfer assets to sovereign account of destination
   * chain and forward a notification XCM to `dest` to mint and deposit reserve-based
   * assets to `beneficiary`.
   * - `TransferType::DestinationReserve`: burn local assets and forward a notification to
   * `dest` chain to withdraw the reserve assets from this chain's sovereign account and
   * deposit them to `beneficiary`.
   * - `TransferType::RemoteReserve(reserve)`: burn local assets, forward XCM to `reserve`
   * chain to move reserves from this chain's SA to `dest` chain's SA, and forward another
   * XCM to `dest` to mint and deposit reserve-based assets to `beneficiary`. Typically
   * the remote `reserve` is Asset Hub.
   * - `TransferType::Teleport`: burn local assets and forward XCM to `dest` chain to
   * mint/teleport assets and deposit them to `beneficiary`.
   *
   * On the destination chain, as well as any intermediary hops, `BuyExecution` is used to
   * buy execution using transferred `assets` identified by `remote_fees_id`.
   * Make sure enough of the specified `remote_fees_id` asset is included in the given list
   * of `assets`. `remote_fees_id` should be enough to pay for `weight_limit`. If more weight
   * is needed than `weight_limit`, then the operation will fail and the sent assets may be
   * at risk.
   *
   * `remote_fees_id` may use different transfer type than rest of `assets` and can be
   * specified through `fees_transfer_type`.
   *
   * The caller needs to specify what should happen to the transferred assets once they reach
   * the `dest` chain. This is done through the `custom_xcm_on_dest` parameter, which
   * contains the instructions to execute on `dest` as a final step.
   * This is usually as simple as:
   * `Xcm(vec![DepositAsset { assets: Wild(AllCounted(assets.len())), beneficiary }])`,
   * but could be something more exotic like sending the `assets` even further.
   *
   * - `origin`: Must be capable of withdrawing the `assets` and executing XCM.
   * - `dest`: Destination context for the assets. Will typically be `[Parent,
   * Parachain(..)]` to send from parachain to parachain, or `[Parachain(..)]` to send from
   * relay to parachain, or `(parents: 2, (GlobalConsensus(..), ..))` to send from
   * parachain across a bridge to another ecosystem destination.
   * - `assets`: The assets to be withdrawn. This should include the assets used to pay the
   * fee on the `dest` (and possibly reserve) chains.
   * - `assets_transfer_type`: The XCM `TransferType` used to transfer the `assets`.
   * - `remote_fees_id`: One of the included `assets` to be used to pay fees.
   * - `fees_transfer_type`: The XCM `TransferType` used to transfer the `fees` assets.
   * - `custom_xcm_on_dest`: The XCM to be executed on `dest` chain as the last step of the
   * transfer, which also determines what happens to the assets on the destination chain.
   * - `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase.
   **/
  | {
      name: 'TransferAssetsUsingTypeAndThen';
      params: {
        dest: XcmVersionedLocation;
        assets: XcmVersionedAssets;
        assetsTransferType: StagingXcmExecutorAssetTransferTransferType;
        remoteFeesId: XcmVersionedAssetId;
        feesTransferType: StagingXcmExecutorAssetTransferTransferType;
        customXcmOnDest: XcmVersionedXcm;
        weightLimit: XcmV3WeightLimit;
      };
    }
  /**
   * Authorize another `aliaser` location to alias into the local `origin` making this call.
   * The `aliaser` is only authorized until the provided `expiry` block number.
   * The call can also be used for a previously authorized alias in order to update its
   * `expiry` block number.
   *
   * Usually useful to allow your local account to be aliased into from a remote location
   * also under your control (like your account on another chain).
   *
   * WARNING: make sure the caller `origin` (you) trusts the `aliaser` location to act in
   * their/your name. Once authorized using this call, the `aliaser` can freely impersonate
   * `origin` in XCM programs executed on the local chain.
   **/
  | { name: 'AddAuthorizedAlias'; params: { aliaser: XcmVersionedLocation; expires?: bigint | undefined } }
  /**
   * Remove a previously authorized `aliaser` from the list of locations that can alias into
   * the local `origin` making this call.
   **/
  | { name: 'RemoveAuthorizedAlias'; params: { aliaser: XcmVersionedLocation } }
  /**
   * Remove all previously authorized `aliaser`s that can alias into the local `origin`
   * making this call.
   **/
  | { name: 'RemoveAllAuthorizedAliases' };

export type PalletXcmCallLike =
  | { name: 'Send'; params: { dest: XcmVersionedLocation; message: XcmVersionedXcm } }
  /**
   * Teleport some assets from the local chain to some destination chain.
   *
   * **This function is deprecated: Use `limited_teleport_assets` instead.**
   *
   * Fee payment on the destination side is made from the asset in the `assets` vector of
   * index `fee_asset_item`. The weight limit for fees is not provided and thus is unlimited,
   * with all fees taken as needed from the asset.
   *
   * - `origin`: Must be capable of withdrawing the `assets` and executing XCM.
   * - `dest`: Destination context for the assets. Will typically be `[Parent,
   * Parachain(..)]` to send from parachain to parachain, or `[Parachain(..)]` to send from
   * relay to parachain.
   * - `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will
   * generally be an `AccountId32` value.
   * - `assets`: The assets to be withdrawn. This should include the assets used to pay the
   * fee on the `dest` chain.
   * - `fee_asset_item`: The index into `assets` of the item which should be used to pay
   * fees.
   **/
  | {
      name: 'TeleportAssets';
      params: {
        dest: XcmVersionedLocation;
        beneficiary: XcmVersionedLocation;
        assets: XcmVersionedAssets;
        feeAssetItem: number;
      };
    }
  /**
   * Transfer some assets from the local chain to the destination chain through their local,
   * destination or remote reserve.
   *
   * `assets` must have same reserve location and may not be teleportable to `dest`.
   * - `assets` have local reserve: transfer assets to sovereign account of destination
   * chain and forward a notification XCM to `dest` to mint and deposit reserve-based
   * assets to `beneficiary`.
   * - `assets` have destination reserve: burn local assets and forward a notification to
   * `dest` chain to withdraw the reserve assets from this chain's sovereign account and
   * deposit them to `beneficiary`.
   * - `assets` have remote reserve: burn local assets, forward XCM to reserve chain to move
   * reserves from this chain's SA to `dest` chain's SA, and forward another XCM to `dest`
   * to mint and deposit reserve-based assets to `beneficiary`.
   *
   * **This function is deprecated: Use `limited_reserve_transfer_assets` instead.**
   *
   * Fee payment on the destination side is made from the asset in the `assets` vector of
   * index `fee_asset_item`. The weight limit for fees is not provided and thus is unlimited,
   * with all fees taken as needed from the asset.
   *
   * - `origin`: Must be capable of withdrawing the `assets` and executing XCM.
   * - `dest`: Destination context for the assets. Will typically be `[Parent,
   * Parachain(..)]` to send from parachain to parachain, or `[Parachain(..)]` to send from
   * relay to parachain.
   * - `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will
   * generally be an `AccountId32` value.
   * - `assets`: The assets to be withdrawn. This should include the assets used to pay the
   * fee on the `dest` (and possibly reserve) chains.
   * - `fee_asset_item`: The index into `assets` of the item which should be used to pay
   * fees.
   **/
  | {
      name: 'ReserveTransferAssets';
      params: {
        dest: XcmVersionedLocation;
        beneficiary: XcmVersionedLocation;
        assets: XcmVersionedAssets;
        feeAssetItem: number;
      };
    }
  /**
   * Execute an XCM message from a local, signed, origin.
   *
   * An event is deposited indicating whether `msg` could be executed completely or only
   * partially.
   *
   * No more than `max_weight` will be used in its attempted execution. If this is less than
   * the maximum amount of weight that the message could take to be executed, then no
   * execution attempt will be made.
   **/
  | { name: 'Execute'; params: { message: XcmVersionedXcm; maxWeight: SpWeightsWeightV2Weight } }
  /**
   * Extoll that a particular destination can be communicated with through a particular
   * version of XCM.
   *
   * - `origin`: Must be an origin specified by AdminOrigin.
   * - `location`: The destination that is being described.
   * - `xcm_version`: The latest version of XCM that `location` supports.
   **/
  | { name: 'ForceXcmVersion'; params: { location: StagingXcmV5Location; version: number } }
  /**
   * Set a safe XCM version (the version that XCM should be encoded with if the most recent
   * version a destination can accept is unknown).
   *
   * - `origin`: Must be an origin specified by AdminOrigin.
   * - `maybe_xcm_version`: The default XCM encoding version, or `None` to disable.
   **/
  | { name: 'ForceDefaultXcmVersion'; params: { maybeXcmVersion?: number | undefined } }
  /**
   * Ask a location to notify us regarding their XCM version and any changes to it.
   *
   * - `origin`: Must be an origin specified by AdminOrigin.
   * - `location`: The location to which we should subscribe for XCM version notifications.
   **/
  | { name: 'ForceSubscribeVersionNotify'; params: { location: XcmVersionedLocation } }
  /**
   * Require that a particular destination should no longer notify us regarding any XCM
   * version changes.
   *
   * - `origin`: Must be an origin specified by AdminOrigin.
   * - `location`: The location to which we are currently subscribed for XCM version
   * notifications which we no longer desire.
   **/
  | { name: 'ForceUnsubscribeVersionNotify'; params: { location: XcmVersionedLocation } }
  /**
   * Transfer some assets from the local chain to the destination chain through their local,
   * destination or remote reserve.
   *
   * `assets` must have same reserve location and may not be teleportable to `dest`.
   * - `assets` have local reserve: transfer assets to sovereign account of destination
   * chain and forward a notification XCM to `dest` to mint and deposit reserve-based
   * assets to `beneficiary`.
   * - `assets` have destination reserve: burn local assets and forward a notification to
   * `dest` chain to withdraw the reserve assets from this chain's sovereign account and
   * deposit them to `beneficiary`.
   * - `assets` have remote reserve: burn local assets, forward XCM to reserve chain to move
   * reserves from this chain's SA to `dest` chain's SA, and forward another XCM to `dest`
   * to mint and deposit reserve-based assets to `beneficiary`.
   *
   * Fee payment on the destination side is made from the asset in the `assets` vector of
   * index `fee_asset_item`, up to enough to pay for `weight_limit` of weight. If more weight
   * is needed than `weight_limit`, then the operation will fail and the sent assets may be
   * at risk.
   *
   * - `origin`: Must be capable of withdrawing the `assets` and executing XCM.
   * - `dest`: Destination context for the assets. Will typically be `[Parent,
   * Parachain(..)]` to send from parachain to parachain, or `[Parachain(..)]` to send from
   * relay to parachain.
   * - `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will
   * generally be an `AccountId32` value.
   * - `assets`: The assets to be withdrawn. This should include the assets used to pay the
   * fee on the `dest` (and possibly reserve) chains.
   * - `fee_asset_item`: The index into `assets` of the item which should be used to pay
   * fees.
   * - `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase.
   **/
  | {
      name: 'LimitedReserveTransferAssets';
      params: {
        dest: XcmVersionedLocation;
        beneficiary: XcmVersionedLocation;
        assets: XcmVersionedAssets;
        feeAssetItem: number;
        weightLimit: XcmV3WeightLimit;
      };
    }
  /**
   * Teleport some assets from the local chain to some destination chain.
   *
   * Fee payment on the destination side is made from the asset in the `assets` vector of
   * index `fee_asset_item`, up to enough to pay for `weight_limit` of weight. If more weight
   * is needed than `weight_limit`, then the operation will fail and the sent assets may be
   * at risk.
   *
   * - `origin`: Must be capable of withdrawing the `assets` and executing XCM.
   * - `dest`: Destination context for the assets. Will typically be `[Parent,
   * Parachain(..)]` to send from parachain to parachain, or `[Parachain(..)]` to send from
   * relay to parachain.
   * - `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will
   * generally be an `AccountId32` value.
   * - `assets`: The assets to be withdrawn. This should include the assets used to pay the
   * fee on the `dest` chain.
   * - `fee_asset_item`: The index into `assets` of the item which should be used to pay
   * fees.
   * - `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase.
   **/
  | {
      name: 'LimitedTeleportAssets';
      params: {
        dest: XcmVersionedLocation;
        beneficiary: XcmVersionedLocation;
        assets: XcmVersionedAssets;
        feeAssetItem: number;
        weightLimit: XcmV3WeightLimit;
      };
    }
  /**
   * Set or unset the global suspension state of the XCM executor.
   *
   * - `origin`: Must be an origin specified by AdminOrigin.
   * - `suspended`: `true` to suspend, `false` to resume.
   **/
  | { name: 'ForceSuspension'; params: { suspended: boolean } }
  /**
   * Transfer some assets from the local chain to the destination chain through their local,
   * destination or remote reserve, or through teleports.
   *
   * Fee payment on the destination side is made from the asset in the `assets` vector of
   * index `fee_asset_item` (hence referred to as `fees`), up to enough to pay for
   * `weight_limit` of weight. If more weight is needed than `weight_limit`, then the
   * operation will fail and the sent assets may be at risk.
   *
   * `assets` (excluding `fees`) must have same reserve location or otherwise be teleportable
   * to `dest`, no limitations imposed on `fees`.
   * - for local reserve: transfer assets to sovereign account of destination chain and
   * forward a notification XCM to `dest` to mint and deposit reserve-based assets to
   * `beneficiary`.
   * - for destination reserve: burn local assets and forward a notification to `dest` chain
   * to withdraw the reserve assets from this chain's sovereign account and deposit them
   * to `beneficiary`.
   * - for remote reserve: burn local assets, forward XCM to reserve chain to move reserves
   * from this chain's SA to `dest` chain's SA, and forward another XCM to `dest` to mint
   * and deposit reserve-based assets to `beneficiary`.
   * - for teleports: burn local assets and forward XCM to `dest` chain to mint/teleport
   * assets and deposit them to `beneficiary`.
   *
   * - `origin`: Must be capable of withdrawing the `assets` and executing XCM.
   * - `dest`: Destination context for the assets. Will typically be `X2(Parent,
   * Parachain(..))` to send from parachain to parachain, or `X1(Parachain(..))` to send
   * from relay to parachain.
   * - `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will
   * generally be an `AccountId32` value.
   * - `assets`: The assets to be withdrawn. This should include the assets used to pay the
   * fee on the `dest` (and possibly reserve) chains.
   * - `fee_asset_item`: The index into `assets` of the item which should be used to pay
   * fees.
   * - `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase.
   **/
  | {
      name: 'TransferAssets';
      params: {
        dest: XcmVersionedLocation;
        beneficiary: XcmVersionedLocation;
        assets: XcmVersionedAssets;
        feeAssetItem: number;
        weightLimit: XcmV3WeightLimit;
      };
    }
  /**
   * Claims assets trapped on this pallet because of leftover assets during XCM execution.
   *
   * - `origin`: Anyone can call this extrinsic.
   * - `assets`: The exact assets that were trapped. Use the version to specify what version
   * was the latest when they were trapped.
   * - `beneficiary`: The location/account where the claimed assets will be deposited.
   **/
  | { name: 'ClaimAssets'; params: { assets: XcmVersionedAssets; beneficiary: XcmVersionedLocation } }
  /**
   * Transfer assets from the local chain to the destination chain using explicit transfer
   * types for assets and fees.
   *
   * `assets` must have same reserve location or may be teleportable to `dest`. Caller must
   * provide the `assets_transfer_type` to be used for `assets`:
   * - `TransferType::LocalReserve`: transfer assets to sovereign account of destination
   * chain and forward a notification XCM to `dest` to mint and deposit reserve-based
   * assets to `beneficiary`.
   * - `TransferType::DestinationReserve`: burn local assets and forward a notification to
   * `dest` chain to withdraw the reserve assets from this chain's sovereign account and
   * deposit them to `beneficiary`.
   * - `TransferType::RemoteReserve(reserve)`: burn local assets, forward XCM to `reserve`
   * chain to move reserves from this chain's SA to `dest` chain's SA, and forward another
   * XCM to `dest` to mint and deposit reserve-based assets to `beneficiary`. Typically
   * the remote `reserve` is Asset Hub.
   * - `TransferType::Teleport`: burn local assets and forward XCM to `dest` chain to
   * mint/teleport assets and deposit them to `beneficiary`.
   *
   * On the destination chain, as well as any intermediary hops, `BuyExecution` is used to
   * buy execution using transferred `assets` identified by `remote_fees_id`.
   * Make sure enough of the specified `remote_fees_id` asset is included in the given list
   * of `assets`. `remote_fees_id` should be enough to pay for `weight_limit`. If more weight
   * is needed than `weight_limit`, then the operation will fail and the sent assets may be
   * at risk.
   *
   * `remote_fees_id` may use different transfer type than rest of `assets` and can be
   * specified through `fees_transfer_type`.
   *
   * The caller needs to specify what should happen to the transferred assets once they reach
   * the `dest` chain. This is done through the `custom_xcm_on_dest` parameter, which
   * contains the instructions to execute on `dest` as a final step.
   * This is usually as simple as:
   * `Xcm(vec![DepositAsset { assets: Wild(AllCounted(assets.len())), beneficiary }])`,
   * but could be something more exotic like sending the `assets` even further.
   *
   * - `origin`: Must be capable of withdrawing the `assets` and executing XCM.
   * - `dest`: Destination context for the assets. Will typically be `[Parent,
   * Parachain(..)]` to send from parachain to parachain, or `[Parachain(..)]` to send from
   * relay to parachain, or `(parents: 2, (GlobalConsensus(..), ..))` to send from
   * parachain across a bridge to another ecosystem destination.
   * - `assets`: The assets to be withdrawn. This should include the assets used to pay the
   * fee on the `dest` (and possibly reserve) chains.
   * - `assets_transfer_type`: The XCM `TransferType` used to transfer the `assets`.
   * - `remote_fees_id`: One of the included `assets` to be used to pay fees.
   * - `fees_transfer_type`: The XCM `TransferType` used to transfer the `fees` assets.
   * - `custom_xcm_on_dest`: The XCM to be executed on `dest` chain as the last step of the
   * transfer, which also determines what happens to the assets on the destination chain.
   * - `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase.
   **/
  | {
      name: 'TransferAssetsUsingTypeAndThen';
      params: {
        dest: XcmVersionedLocation;
        assets: XcmVersionedAssets;
        assetsTransferType: StagingXcmExecutorAssetTransferTransferType;
        remoteFeesId: XcmVersionedAssetId;
        feesTransferType: StagingXcmExecutorAssetTransferTransferType;
        customXcmOnDest: XcmVersionedXcm;
        weightLimit: XcmV3WeightLimit;
      };
    }
  /**
   * Authorize another `aliaser` location to alias into the local `origin` making this call.
   * The `aliaser` is only authorized until the provided `expiry` block number.
   * The call can also be used for a previously authorized alias in order to update its
   * `expiry` block number.
   *
   * Usually useful to allow your local account to be aliased into from a remote location
   * also under your control (like your account on another chain).
   *
   * WARNING: make sure the caller `origin` (you) trusts the `aliaser` location to act in
   * their/your name. Once authorized using this call, the `aliaser` can freely impersonate
   * `origin` in XCM programs executed on the local chain.
   **/
  | { name: 'AddAuthorizedAlias'; params: { aliaser: XcmVersionedLocation; expires?: bigint | undefined } }
  /**
   * Remove a previously authorized `aliaser` from the list of locations that can alias into
   * the local `origin` making this call.
   **/
  | { name: 'RemoveAuthorizedAlias'; params: { aliaser: XcmVersionedLocation } }
  /**
   * Remove all previously authorized `aliaser`s that can alias into the local `origin`
   * making this call.
   **/
  | { name: 'RemoveAllAuthorizedAliases' };

export type XcmVersionedXcm =
  | { type: 'V3'; value: XcmV3Xcm }
  | { type: 'V4'; value: StagingXcmV4Xcm }
  | { type: 'V5'; value: StagingXcmV5Xcm };

export type XcmV3Xcm = Array<XcmV3Instruction>;

export type XcmV3Instruction =
  | { type: 'WithdrawAsset'; value: XcmV3MultiassetMultiAssets }
  | { type: 'ReserveAssetDeposited'; value: XcmV3MultiassetMultiAssets }
  | { type: 'ReceiveTeleportedAsset'; value: XcmV3MultiassetMultiAssets }
  | {
      type: 'QueryResponse';
      value: {
        queryId: bigint;
        response: XcmV3Response;
        maxWeight: SpWeightsWeightV2Weight;
        querier?: StagingXcmV3MultilocationMultiLocation | undefined;
      };
    }
  | {
      type: 'TransferAsset';
      value: { assets: XcmV3MultiassetMultiAssets; beneficiary: StagingXcmV3MultilocationMultiLocation };
    }
  | {
      type: 'TransferReserveAsset';
      value: { assets: XcmV3MultiassetMultiAssets; dest: StagingXcmV3MultilocationMultiLocation; xcm: XcmV3Xcm };
    }
  | {
      type: 'Transact';
      value: { originKind: XcmV3OriginKind; requireWeightAtMost: SpWeightsWeightV2Weight; call: XcmDoubleEncoded };
    }
  | { type: 'HrmpNewChannelOpenRequest'; value: { sender: number; maxMessageSize: number; maxCapacity: number } }
  | { type: 'HrmpChannelAccepted'; value: { recipient: number } }
  | { type: 'HrmpChannelClosing'; value: { initiator: number; sender: number; recipient: number } }
  | { type: 'ClearOrigin' }
  | { type: 'DescendOrigin'; value: XcmV3Junctions }
  | { type: 'ReportError'; value: XcmV3QueryResponseInfo }
  | {
      type: 'DepositAsset';
      value: { assets: XcmV3MultiassetMultiAssetFilter; beneficiary: StagingXcmV3MultilocationMultiLocation };
    }
  | {
      type: 'DepositReserveAsset';
      value: { assets: XcmV3MultiassetMultiAssetFilter; dest: StagingXcmV3MultilocationMultiLocation; xcm: XcmV3Xcm };
    }
  | {
      type: 'ExchangeAsset';
      value: { give: XcmV3MultiassetMultiAssetFilter; want: XcmV3MultiassetMultiAssets; maximal: boolean };
    }
  | {
      type: 'InitiateReserveWithdraw';
      value: {
        assets: XcmV3MultiassetMultiAssetFilter;
        reserve: StagingXcmV3MultilocationMultiLocation;
        xcm: XcmV3Xcm;
      };
    }
  | {
      type: 'InitiateTeleport';
      value: { assets: XcmV3MultiassetMultiAssetFilter; dest: StagingXcmV3MultilocationMultiLocation; xcm: XcmV3Xcm };
    }
  | { type: 'ReportHolding'; value: { responseInfo: XcmV3QueryResponseInfo; assets: XcmV3MultiassetMultiAssetFilter } }
  | { type: 'BuyExecution'; value: { fees: XcmV3MultiassetMultiAsset; weightLimit: XcmV3WeightLimit } }
  | { type: 'RefundSurplus' }
  | { type: 'SetErrorHandler'; value: XcmV3Xcm }
  | { type: 'SetAppendix'; value: XcmV3Xcm }
  | { type: 'ClearError' }
  | {
      type: 'ClaimAsset';
      value: { assets: XcmV3MultiassetMultiAssets; ticket: StagingXcmV3MultilocationMultiLocation };
    }
  | { type: 'Trap'; value: bigint }
  | { type: 'SubscribeVersion'; value: { queryId: bigint; maxResponseWeight: SpWeightsWeightV2Weight } }
  | { type: 'UnsubscribeVersion' }
  | { type: 'BurnAsset'; value: XcmV3MultiassetMultiAssets }
  | { type: 'ExpectAsset'; value: XcmV3MultiassetMultiAssets }
  | { type: 'ExpectOrigin'; value?: StagingXcmV3MultilocationMultiLocation | undefined }
  | { type: 'ExpectError'; value?: [number, XcmV3TraitsError] | undefined }
  | { type: 'ExpectTransactStatus'; value: XcmV3MaybeErrorCode }
  | { type: 'QueryPallet'; value: { moduleName: Bytes; responseInfo: XcmV3QueryResponseInfo } }
  | {
      type: 'ExpectPallet';
      value: { index: number; name: Bytes; moduleName: Bytes; crateMajor: number; minCrateMinor: number };
    }
  | { type: 'ReportTransactStatus'; value: XcmV3QueryResponseInfo }
  | { type: 'ClearTransactStatus' }
  | { type: 'UniversalOrigin'; value: XcmV3Junction }
  | { type: 'ExportMessage'; value: { network: XcmV3JunctionNetworkId; destination: XcmV3Junctions; xcm: XcmV3Xcm } }
  | { type: 'LockAsset'; value: { asset: XcmV3MultiassetMultiAsset; unlocker: StagingXcmV3MultilocationMultiLocation } }
  | { type: 'UnlockAsset'; value: { asset: XcmV3MultiassetMultiAsset; target: StagingXcmV3MultilocationMultiLocation } }
  | {
      type: 'NoteUnlockable';
      value: { asset: XcmV3MultiassetMultiAsset; owner: StagingXcmV3MultilocationMultiLocation };
    }
  | {
      type: 'RequestUnlock';
      value: { asset: XcmV3MultiassetMultiAsset; locker: StagingXcmV3MultilocationMultiLocation };
    }
  | { type: 'SetFeesMode'; value: { jitWithdraw: boolean } }
  | { type: 'SetTopic'; value: FixedBytes<32> }
  | { type: 'ClearTopic' }
  | { type: 'AliasOrigin'; value: StagingXcmV3MultilocationMultiLocation }
  | {
      type: 'UnpaidExecution';
      value: { weightLimit: XcmV3WeightLimit; checkOrigin?: StagingXcmV3MultilocationMultiLocation | undefined };
    };

export type XcmV3Response =
  | { type: 'Null' }
  | { type: 'Assets'; value: XcmV3MultiassetMultiAssets }
  | { type: 'ExecutionResult'; value?: [number, XcmV3TraitsError] | undefined }
  | { type: 'Version'; value: number }
  | { type: 'PalletsInfo'; value: Array<XcmV3PalletInfo> }
  | { type: 'DispatchResult'; value: XcmV3MaybeErrorCode };

export type XcmV3TraitsError =
  | { type: 'Overflow' }
  | { type: 'Unimplemented' }
  | { type: 'UntrustedReserveLocation' }
  | { type: 'UntrustedTeleportLocation' }
  | { type: 'LocationFull' }
  | { type: 'LocationNotInvertible' }
  | { type: 'BadOrigin' }
  | { type: 'InvalidLocation' }
  | { type: 'AssetNotFound' }
  | { type: 'FailedToTransactAsset' }
  | { type: 'NotWithdrawable' }
  | { type: 'LocationCannotHold' }
  | { type: 'ExceedsMaxMessageSize' }
  | { type: 'DestinationUnsupported' }
  | { type: 'Transport' }
  | { type: 'Unroutable' }
  | { type: 'UnknownClaim' }
  | { type: 'FailedToDecode' }
  | { type: 'MaxWeightInvalid' }
  | { type: 'NotHoldingFees' }
  | { type: 'TooExpensive' }
  | { type: 'Trap'; value: bigint }
  | { type: 'ExpectationFalse' }
  | { type: 'PalletNotFound' }
  | { type: 'NameMismatch' }
  | { type: 'VersionIncompatible' }
  | { type: 'HoldingWouldOverflow' }
  | { type: 'ExportError' }
  | { type: 'ReanchorFailed' }
  | { type: 'NoDeal' }
  | { type: 'FeesNotMet' }
  | { type: 'LockError' }
  | { type: 'NoPermission' }
  | { type: 'Unanchored' }
  | { type: 'NotDepositable' }
  | { type: 'UnhandledXcmVersion' }
  | { type: 'WeightLimitReached'; value: SpWeightsWeightV2Weight }
  | { type: 'Barrier' }
  | { type: 'WeightNotComputable' }
  | { type: 'ExceedsStackLimit' };

export type XcmV3PalletInfo = {
  index: number;
  name: Bytes;
  moduleName: Bytes;
  major: number;
  minor: number;
  patch: number;
};

export type XcmV3QueryResponseInfo = {
  destination: StagingXcmV3MultilocationMultiLocation;
  queryId: bigint;
  maxWeight: SpWeightsWeightV2Weight;
};

export type XcmV3MultiassetMultiAssetFilter =
  | { type: 'Definite'; value: XcmV3MultiassetMultiAssets }
  | { type: 'Wild'; value: XcmV3MultiassetWildMultiAsset };

export type XcmV3MultiassetWildMultiAsset =
  | { type: 'All' }
  | { type: 'AllOf'; value: { id: XcmV3MultiassetAssetId; fun: XcmV3MultiassetWildFungibility } }
  | { type: 'AllCounted'; value: number }
  | { type: 'AllOfCounted'; value: { id: XcmV3MultiassetAssetId; fun: XcmV3MultiassetWildFungibility; count: number } };

export type XcmV3MultiassetWildFungibility = 'Fungible' | 'NonFungible';

export type StagingXcmV4Xcm = Array<StagingXcmV4Instruction>;

export type StagingXcmV4Instruction =
  | { type: 'WithdrawAsset'; value: StagingXcmV4AssetAssets }
  | { type: 'ReserveAssetDeposited'; value: StagingXcmV4AssetAssets }
  | { type: 'ReceiveTeleportedAsset'; value: StagingXcmV4AssetAssets }
  | {
      type: 'QueryResponse';
      value: {
        queryId: bigint;
        response: StagingXcmV4Response;
        maxWeight: SpWeightsWeightV2Weight;
        querier?: StagingXcmV4Location | undefined;
      };
    }
  | { type: 'TransferAsset'; value: { assets: StagingXcmV4AssetAssets; beneficiary: StagingXcmV4Location } }
  | {
      type: 'TransferReserveAsset';
      value: { assets: StagingXcmV4AssetAssets; dest: StagingXcmV4Location; xcm: StagingXcmV4Xcm };
    }
  | {
      type: 'Transact';
      value: { originKind: XcmV3OriginKind; requireWeightAtMost: SpWeightsWeightV2Weight; call: XcmDoubleEncoded };
    }
  | { type: 'HrmpNewChannelOpenRequest'; value: { sender: number; maxMessageSize: number; maxCapacity: number } }
  | { type: 'HrmpChannelAccepted'; value: { recipient: number } }
  | { type: 'HrmpChannelClosing'; value: { initiator: number; sender: number; recipient: number } }
  | { type: 'ClearOrigin' }
  | { type: 'DescendOrigin'; value: StagingXcmV4Junctions }
  | { type: 'ReportError'; value: StagingXcmV4QueryResponseInfo }
  | { type: 'DepositAsset'; value: { assets: StagingXcmV4AssetAssetFilter; beneficiary: StagingXcmV4Location } }
  | {
      type: 'DepositReserveAsset';
      value: { assets: StagingXcmV4AssetAssetFilter; dest: StagingXcmV4Location; xcm: StagingXcmV4Xcm };
    }
  | {
      type: 'ExchangeAsset';
      value: { give: StagingXcmV4AssetAssetFilter; want: StagingXcmV4AssetAssets; maximal: boolean };
    }
  | {
      type: 'InitiateReserveWithdraw';
      value: { assets: StagingXcmV4AssetAssetFilter; reserve: StagingXcmV4Location; xcm: StagingXcmV4Xcm };
    }
  | {
      type: 'InitiateTeleport';
      value: { assets: StagingXcmV4AssetAssetFilter; dest: StagingXcmV4Location; xcm: StagingXcmV4Xcm };
    }
  | {
      type: 'ReportHolding';
      value: { responseInfo: StagingXcmV4QueryResponseInfo; assets: StagingXcmV4AssetAssetFilter };
    }
  | { type: 'BuyExecution'; value: { fees: StagingXcmV4Asset; weightLimit: XcmV3WeightLimit } }
  | { type: 'RefundSurplus' }
  | { type: 'SetErrorHandler'; value: StagingXcmV4Xcm }
  | { type: 'SetAppendix'; value: StagingXcmV4Xcm }
  | { type: 'ClearError' }
  | { type: 'ClaimAsset'; value: { assets: StagingXcmV4AssetAssets; ticket: StagingXcmV4Location } }
  | { type: 'Trap'; value: bigint }
  | { type: 'SubscribeVersion'; value: { queryId: bigint; maxResponseWeight: SpWeightsWeightV2Weight } }
  | { type: 'UnsubscribeVersion' }
  | { type: 'BurnAsset'; value: StagingXcmV4AssetAssets }
  | { type: 'ExpectAsset'; value: StagingXcmV4AssetAssets }
  | { type: 'ExpectOrigin'; value?: StagingXcmV4Location | undefined }
  | { type: 'ExpectError'; value?: [number, XcmV3TraitsError] | undefined }
  | { type: 'ExpectTransactStatus'; value: XcmV3MaybeErrorCode }
  | { type: 'QueryPallet'; value: { moduleName: Bytes; responseInfo: StagingXcmV4QueryResponseInfo } }
  | {
      type: 'ExpectPallet';
      value: { index: number; name: Bytes; moduleName: Bytes; crateMajor: number; minCrateMinor: number };
    }
  | { type: 'ReportTransactStatus'; value: StagingXcmV4QueryResponseInfo }
  | { type: 'ClearTransactStatus' }
  | { type: 'UniversalOrigin'; value: StagingXcmV4Junction }
  | {
      type: 'ExportMessage';
      value: { network: StagingXcmV4JunctionNetworkId; destination: StagingXcmV4Junctions; xcm: StagingXcmV4Xcm };
    }
  | { type: 'LockAsset'; value: { asset: StagingXcmV4Asset; unlocker: StagingXcmV4Location } }
  | { type: 'UnlockAsset'; value: { asset: StagingXcmV4Asset; target: StagingXcmV4Location } }
  | { type: 'NoteUnlockable'; value: { asset: StagingXcmV4Asset; owner: StagingXcmV4Location } }
  | { type: 'RequestUnlock'; value: { asset: StagingXcmV4Asset; locker: StagingXcmV4Location } }
  | { type: 'SetFeesMode'; value: { jitWithdraw: boolean } }
  | { type: 'SetTopic'; value: FixedBytes<32> }
  | { type: 'ClearTopic' }
  | { type: 'AliasOrigin'; value: StagingXcmV4Location }
  | {
      type: 'UnpaidExecution';
      value: { weightLimit: XcmV3WeightLimit; checkOrigin?: StagingXcmV4Location | undefined };
    };

export type StagingXcmV4Response =
  | { type: 'Null' }
  | { type: 'Assets'; value: StagingXcmV4AssetAssets }
  | { type: 'ExecutionResult'; value?: [number, XcmV3TraitsError] | undefined }
  | { type: 'Version'; value: number }
  | { type: 'PalletsInfo'; value: Array<StagingXcmV4PalletInfo> }
  | { type: 'DispatchResult'; value: XcmV3MaybeErrorCode };

export type StagingXcmV4PalletInfo = {
  index: number;
  name: Bytes;
  moduleName: Bytes;
  major: number;
  minor: number;
  patch: number;
};

export type StagingXcmV4QueryResponseInfo = {
  destination: StagingXcmV4Location;
  queryId: bigint;
  maxWeight: SpWeightsWeightV2Weight;
};

export type StagingXcmV4AssetAssetFilter =
  | { type: 'Definite'; value: StagingXcmV4AssetAssets }
  | { type: 'Wild'; value: StagingXcmV4AssetWildAsset };

export type StagingXcmV4AssetWildAsset =
  | { type: 'All' }
  | { type: 'AllOf'; value: { id: StagingXcmV4AssetAssetId; fun: StagingXcmV4AssetWildFungibility } }
  | { type: 'AllCounted'; value: number }
  | {
      type: 'AllOfCounted';
      value: { id: StagingXcmV4AssetAssetId; fun: StagingXcmV4AssetWildFungibility; count: number };
    };

export type StagingXcmV4AssetWildFungibility = 'Fungible' | 'NonFungible';

export type StagingXcmExecutorAssetTransferTransferType =
  | { type: 'Teleport' }
  | { type: 'LocalReserve' }
  | { type: 'DestinationReserve' }
  | { type: 'RemoteReserve'; value: XcmVersionedLocation };

export type XcmVersionedAssetId =
  | { type: 'V3'; value: XcmV3MultiassetAssetId }
  | { type: 'V4'; value: StagingXcmV4AssetAssetId }
  | { type: 'V5'; value: StagingXcmV5AssetAssetId };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type CumulusPalletXcmCall = null;

export type CumulusPalletXcmCallLike = null;

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletXcmBridgeHubRouterCall =
  /**
   * Notification about congested bridge queue.
   **/
  { name: 'ReportBridgeStatus'; params: { bridgeId: H256; isCongested: boolean } };

export type PalletXcmBridgeHubRouterCallLike =
  /**
   * Notification about congested bridge queue.
   **/
  { name: 'ReportBridgeStatus'; params: { bridgeId: H256; isCongested: boolean } };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletMessageQueueCall =
  /**
   * Remove a page which has no more messages remaining to be processed or is stale.
   **/
  | { name: 'ReapPage'; params: { messageOrigin: CumulusPrimitivesCoreAggregateMessageOrigin; pageIndex: number } }
  /**
   * Execute an overweight message.
   *
   * Temporary processing errors will be propagated whereas permanent errors are treated
   * as success condition.
   *
   * - `origin`: Must be `Signed`.
   * - `message_origin`: The origin from which the message to be executed arrived.
   * - `page`: The page in the queue in which the message to be executed is sitting.
   * - `index`: The index into the queue of the message to be executed.
   * - `weight_limit`: The maximum amount of weight allowed to be consumed in the execution
   * of the message.
   *
   * Benchmark complexity considerations: O(index + weight_limit).
   **/
  | {
      name: 'ExecuteOverweight';
      params: {
        messageOrigin: CumulusPrimitivesCoreAggregateMessageOrigin;
        page: number;
        index: number;
        weightLimit: SpWeightsWeightV2Weight;
      };
    };

export type PalletMessageQueueCallLike =
  /**
   * Remove a page which has no more messages remaining to be processed or is stale.
   **/
  | { name: 'ReapPage'; params: { messageOrigin: CumulusPrimitivesCoreAggregateMessageOrigin; pageIndex: number } }
  /**
   * Execute an overweight message.
   *
   * Temporary processing errors will be propagated whereas permanent errors are treated
   * as success condition.
   *
   * - `origin`: Must be `Signed`.
   * - `message_origin`: The origin from which the message to be executed arrived.
   * - `page`: The page in the queue in which the message to be executed is sitting.
   * - `index`: The index into the queue of the message to be executed.
   * - `weight_limit`: The maximum amount of weight allowed to be consumed in the execution
   * of the message.
   *
   * Benchmark complexity considerations: O(index + weight_limit).
   **/
  | {
      name: 'ExecuteOverweight';
      params: {
        messageOrigin: CumulusPrimitivesCoreAggregateMessageOrigin;
        page: number;
        index: number;
        weightLimit: SpWeightsWeightV2Weight;
      };
    };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type SnowbridgePalletSystemFrontendCall =
  /**
   * Set the operating mode for exporting messages to Ethereum.
   **/
  | { name: 'SetOperatingMode'; params: { mode: SnowbridgeCoreOperatingModeBasicOperatingMode } }
  /**
   * Initiates the registration for a Polkadot-native token as a wrapped ERC20 token on
   * Ethereum.
   * - `asset_id`: Location of the asset
   * - `metadata`: Metadata to include in the instantiated ERC20 contract on Ethereum
   *
   * All origins are allowed, however `asset_id` must be a location nested within the origin
   * consensus system.
   **/
  | { name: 'RegisterToken'; params: { assetId: XcmVersionedLocation; metadata: SnowbridgeCoreAssetMetadata } }
  /**
   * Add an additional relayer tip for a committed message identified by `message_id`.
   * The tip asset will be swapped for ether.
   **/
  | { name: 'AddTip'; params: { messageId: SnowbridgeCoreRewardMessageId; asset: StagingXcmV5Asset } };

export type SnowbridgePalletSystemFrontendCallLike =
  /**
   * Set the operating mode for exporting messages to Ethereum.
   **/
  | { name: 'SetOperatingMode'; params: { mode: SnowbridgeCoreOperatingModeBasicOperatingMode } }
  /**
   * Initiates the registration for a Polkadot-native token as a wrapped ERC20 token on
   * Ethereum.
   * - `asset_id`: Location of the asset
   * - `metadata`: Metadata to include in the instantiated ERC20 contract on Ethereum
   *
   * All origins are allowed, however `asset_id` must be a location nested within the origin
   * consensus system.
   **/
  | { name: 'RegisterToken'; params: { assetId: XcmVersionedLocation; metadata: SnowbridgeCoreAssetMetadata } }
  /**
   * Add an additional relayer tip for a committed message identified by `message_id`.
   * The tip asset will be swapped for ether.
   **/
  | { name: 'AddTip'; params: { messageId: SnowbridgeCoreRewardMessageId; asset: StagingXcmV5Asset } };

export type SnowbridgeCoreAssetMetadata = { name: Bytes; symbol: Bytes; decimals: number };

export type SnowbridgeCoreRewardMessageId = { type: 'Inbound'; value: bigint } | { type: 'Outbound'; value: bigint };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletUtilityCall =
  /**
   * Send a batch of dispatch calls.
   *
   * May be called from any origin except `None`.
   *
   * - `calls`: The calls to be dispatched from the same origin. The number of call must not
   * exceed the constant: `batched_calls_limit` (available in constant metadata).
   *
   * If origin is root then the calls are dispatched without checking origin filter. (This
   * includes bypassing `frame_system::Config::BaseCallFilter`).
   *
   * ## Complexity
   * - O(C) where C is the number of calls to be batched.
   *
   * This will return `Ok` in all circumstances. To determine the success of the batch, an
   * event is deposited. If a call failed and the batch was interrupted, then the
   * `BatchInterrupted` event is deposited, along with the number of successful calls made
   * and the error of the failed call. If all were successful, then the `BatchCompleted`
   * event is deposited.
   **/
  | { name: 'Batch'; params: { calls: Array<AssetHubWestendRuntimeRuntimeCall> } }
  /**
   * Send a call through an indexed pseudonym of the sender.
   *
   * Filter from origin are passed along. The call will be dispatched with an origin which
   * use the same filter as the origin of this call.
   *
   * NOTE: If you need to ensure that any account-based filtering is not honored (i.e.
   * because you expect `proxy` to have been used prior in the call stack and you do not want
   * the call restrictions to apply to any sub-accounts), then use `as_multi_threshold_1`
   * in the Multisig pallet instead.
   *
   * NOTE: Prior to version *12, this was called `as_limited_sub`.
   *
   * The dispatch origin for this call must be _Signed_.
   **/
  | { name: 'AsDerivative'; params: { index: number; call: AssetHubWestendRuntimeRuntimeCall } }
  /**
   * Send a batch of dispatch calls and atomically execute them.
   * The whole transaction will rollback and fail if any of the calls failed.
   *
   * May be called from any origin except `None`.
   *
   * - `calls`: The calls to be dispatched from the same origin. The number of call must not
   * exceed the constant: `batched_calls_limit` (available in constant metadata).
   *
   * If origin is root then the calls are dispatched without checking origin filter. (This
   * includes bypassing `frame_system::Config::BaseCallFilter`).
   *
   * ## Complexity
   * - O(C) where C is the number of calls to be batched.
   **/
  | { name: 'BatchAll'; params: { calls: Array<AssetHubWestendRuntimeRuntimeCall> } }
  /**
   * Dispatches a function call with a provided origin.
   *
   * The dispatch origin for this call must be _Root_.
   *
   * ## Complexity
   * - O(1).
   **/
  | {
      name: 'DispatchAs';
      params: { asOrigin: AssetHubWestendRuntimeOriginCaller; call: AssetHubWestendRuntimeRuntimeCall };
    }
  /**
   * Send a batch of dispatch calls.
   * Unlike `batch`, it allows errors and won't interrupt.
   *
   * May be called from any origin except `None`.
   *
   * - `calls`: The calls to be dispatched from the same origin. The number of call must not
   * exceed the constant: `batched_calls_limit` (available in constant metadata).
   *
   * If origin is root then the calls are dispatch without checking origin filter. (This
   * includes bypassing `frame_system::Config::BaseCallFilter`).
   *
   * ## Complexity
   * - O(C) where C is the number of calls to be batched.
   **/
  | { name: 'ForceBatch'; params: { calls: Array<AssetHubWestendRuntimeRuntimeCall> } }
  /**
   * Dispatch a function call with a specified weight.
   *
   * This function does not check the weight of the call, and instead allows the
   * Root origin to specify the weight of the call.
   *
   * The dispatch origin for this call must be _Root_.
   **/
  | { name: 'WithWeight'; params: { call: AssetHubWestendRuntimeRuntimeCall; weight: SpWeightsWeightV2Weight } }
  /**
   * Dispatch a fallback call in the event the main call fails to execute.
   * May be called from any origin except `None`.
   *
   * This function first attempts to dispatch the `main` call.
   * If the `main` call fails, the `fallback` is attemted.
   * if the fallback is successfully dispatched, the weights of both calls
   * are accumulated and an event containing the main call error is deposited.
   *
   * In the event of a fallback failure the whole call fails
   * with the weights returned.
   *
   * - `main`: The main call to be dispatched. This is the primary action to execute.
   * - `fallback`: The fallback call to be dispatched in case the `main` call fails.
   *
   * ## Dispatch Logic
   * - If the origin is `root`, both the main and fallback calls are executed without
   * applying any origin filters.
   * - If the origin is not `root`, the origin filter is applied to both the `main` and
   * `fallback` calls.
   *
   * ## Use Case
   * - Some use cases might involve submitting a `batch` type call in either main, fallback
   * or both.
   **/
  | { name: 'IfElse'; params: { main: AssetHubWestendRuntimeRuntimeCall; fallback: AssetHubWestendRuntimeRuntimeCall } }
  /**
   * Dispatches a function call with a provided origin.
   *
   * Almost the same as [`Pallet::dispatch_as`] but forwards any error of the inner call.
   *
   * The dispatch origin for this call must be _Root_.
   **/
  | {
      name: 'DispatchAsFallible';
      params: { asOrigin: AssetHubWestendRuntimeOriginCaller; call: AssetHubWestendRuntimeRuntimeCall };
    };

export type PalletUtilityCallLike =
  /**
   * Send a batch of dispatch calls.
   *
   * May be called from any origin except `None`.
   *
   * - `calls`: The calls to be dispatched from the same origin. The number of call must not
   * exceed the constant: `batched_calls_limit` (available in constant metadata).
   *
   * If origin is root then the calls are dispatched without checking origin filter. (This
   * includes bypassing `frame_system::Config::BaseCallFilter`).
   *
   * ## Complexity
   * - O(C) where C is the number of calls to be batched.
   *
   * This will return `Ok` in all circumstances. To determine the success of the batch, an
   * event is deposited. If a call failed and the batch was interrupted, then the
   * `BatchInterrupted` event is deposited, along with the number of successful calls made
   * and the error of the failed call. If all were successful, then the `BatchCompleted`
   * event is deposited.
   **/
  | { name: 'Batch'; params: { calls: Array<AssetHubWestendRuntimeRuntimeCallLike> } }
  /**
   * Send a call through an indexed pseudonym of the sender.
   *
   * Filter from origin are passed along. The call will be dispatched with an origin which
   * use the same filter as the origin of this call.
   *
   * NOTE: If you need to ensure that any account-based filtering is not honored (i.e.
   * because you expect `proxy` to have been used prior in the call stack and you do not want
   * the call restrictions to apply to any sub-accounts), then use `as_multi_threshold_1`
   * in the Multisig pallet instead.
   *
   * NOTE: Prior to version *12, this was called `as_limited_sub`.
   *
   * The dispatch origin for this call must be _Signed_.
   **/
  | { name: 'AsDerivative'; params: { index: number; call: AssetHubWestendRuntimeRuntimeCallLike } }
  /**
   * Send a batch of dispatch calls and atomically execute them.
   * The whole transaction will rollback and fail if any of the calls failed.
   *
   * May be called from any origin except `None`.
   *
   * - `calls`: The calls to be dispatched from the same origin. The number of call must not
   * exceed the constant: `batched_calls_limit` (available in constant metadata).
   *
   * If origin is root then the calls are dispatched without checking origin filter. (This
   * includes bypassing `frame_system::Config::BaseCallFilter`).
   *
   * ## Complexity
   * - O(C) where C is the number of calls to be batched.
   **/
  | { name: 'BatchAll'; params: { calls: Array<AssetHubWestendRuntimeRuntimeCallLike> } }
  /**
   * Dispatches a function call with a provided origin.
   *
   * The dispatch origin for this call must be _Root_.
   *
   * ## Complexity
   * - O(1).
   **/
  | {
      name: 'DispatchAs';
      params: { asOrigin: AssetHubWestendRuntimeOriginCaller; call: AssetHubWestendRuntimeRuntimeCallLike };
    }
  /**
   * Send a batch of dispatch calls.
   * Unlike `batch`, it allows errors and won't interrupt.
   *
   * May be called from any origin except `None`.
   *
   * - `calls`: The calls to be dispatched from the same origin. The number of call must not
   * exceed the constant: `batched_calls_limit` (available in constant metadata).
   *
   * If origin is root then the calls are dispatch without checking origin filter. (This
   * includes bypassing `frame_system::Config::BaseCallFilter`).
   *
   * ## Complexity
   * - O(C) where C is the number of calls to be batched.
   **/
  | { name: 'ForceBatch'; params: { calls: Array<AssetHubWestendRuntimeRuntimeCallLike> } }
  /**
   * Dispatch a function call with a specified weight.
   *
   * This function does not check the weight of the call, and instead allows the
   * Root origin to specify the weight of the call.
   *
   * The dispatch origin for this call must be _Root_.
   **/
  | { name: 'WithWeight'; params: { call: AssetHubWestendRuntimeRuntimeCallLike; weight: SpWeightsWeightV2Weight } }
  /**
   * Dispatch a fallback call in the event the main call fails to execute.
   * May be called from any origin except `None`.
   *
   * This function first attempts to dispatch the `main` call.
   * If the `main` call fails, the `fallback` is attemted.
   * if the fallback is successfully dispatched, the weights of both calls
   * are accumulated and an event containing the main call error is deposited.
   *
   * In the event of a fallback failure the whole call fails
   * with the weights returned.
   *
   * - `main`: The main call to be dispatched. This is the primary action to execute.
   * - `fallback`: The fallback call to be dispatched in case the `main` call fails.
   *
   * ## Dispatch Logic
   * - If the origin is `root`, both the main and fallback calls are executed without
   * applying any origin filters.
   * - If the origin is not `root`, the origin filter is applied to both the `main` and
   * `fallback` calls.
   *
   * ## Use Case
   * - Some use cases might involve submitting a `batch` type call in either main, fallback
   * or both.
   **/
  | {
      name: 'IfElse';
      params: { main: AssetHubWestendRuntimeRuntimeCallLike; fallback: AssetHubWestendRuntimeRuntimeCallLike };
    }
  /**
   * Dispatches a function call with a provided origin.
   *
   * Almost the same as [`Pallet::dispatch_as`] but forwards any error of the inner call.
   *
   * The dispatch origin for this call must be _Root_.
   **/
  | {
      name: 'DispatchAsFallible';
      params: { asOrigin: AssetHubWestendRuntimeOriginCaller; call: AssetHubWestendRuntimeRuntimeCallLike };
    };

export type AssetHubWestendRuntimeOriginCaller =
  | { type: 'System'; value: FrameSupportDispatchRawOrigin }
  | { type: 'PolkadotXcm'; value: PalletXcmOrigin }
  | { type: 'CumulusXcm'; value: CumulusPalletXcmOrigin }
  | { type: 'Origins'; value: AssetHubWestendRuntimeGovernanceOriginsPalletCustomOriginsOrigin };

export type FrameSupportDispatchRawOrigin =
  | { type: 'Root' }
  | { type: 'Signed'; value: AccountId32 }
  | { type: 'None' }
  | { type: 'Authorized' };

export type PalletXcmOrigin =
  | { type: 'Xcm'; value: StagingXcmV5Location }
  | { type: 'Response'; value: StagingXcmV5Location };

export type CumulusPalletXcmOrigin =
  | { type: 'Relay' }
  | { type: 'SiblingParachain'; value: PolkadotParachainPrimitivesPrimitivesId };

export type AssetHubWestendRuntimeGovernanceOriginsPalletCustomOriginsOrigin =
  | 'StakingAdmin'
  | 'Treasurer'
  | 'FellowshipAdmin'
  | 'GeneralAdmin'
  | 'AuctionAdmin'
  | 'LeaseAdmin'
  | 'ReferendumCanceller'
  | 'ReferendumKiller'
  | 'SmallTipper'
  | 'BigTipper'
  | 'SmallSpender'
  | 'MediumSpender'
  | 'BigSpender'
  | 'WhitelistedCaller'
  | 'FellowshipInitiates'
  | 'Fellows'
  | 'FellowshipExperts'
  | 'FellowshipMasters'
  | 'Fellowship1Dan'
  | 'Fellowship2Dan'
  | 'Fellowship3Dan'
  | 'Fellowship4Dan'
  | 'Fellowship5Dan'
  | 'Fellowship6Dan'
  | 'Fellowship7Dan'
  | 'Fellowship8Dan'
  | 'Fellowship9Dan';

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletMultisigCall =
  /**
   * Immediately dispatch a multi-signature call using a single approval from the caller.
   *
   * The dispatch origin for this call must be _Signed_.
   *
   * - `other_signatories`: The accounts (other than the sender) who are part of the
   * multi-signature, but do not participate in the approval process.
   * - `call`: The call to be executed.
   *
   * Result is equivalent to the dispatched result.
   *
   * ## Complexity
   * O(Z + C) where Z is the length of the call and C its execution weight.
   **/
  | {
      name: 'AsMultiThreshold1';
      params: { otherSignatories: Array<AccountId32>; call: AssetHubWestendRuntimeRuntimeCall };
    }
  /**
   * Register approval for a dispatch to be made from a deterministic composite account if
   * approved by a total of `threshold - 1` of `other_signatories`.
   *
   * If there are enough, then dispatch the call.
   *
   * Payment: `DepositBase` will be reserved if this is the first approval, plus
   * `threshold` times `DepositFactor`. It is returned once this dispatch happens or
   * is cancelled.
   *
   * The dispatch origin for this call must be _Signed_.
   *
   * - `threshold`: The total number of approvals for this dispatch before it is executed.
   * - `other_signatories`: The accounts (other than the sender) who can approve this
   * dispatch. May not be empty.
   * - `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is
   * not the first approval, then it must be `Some`, with the timepoint (block number and
   * transaction index) of the first approval transaction.
   * - `call`: The call to be executed.
   *
   * NOTE: Unless this is the final approval, you will generally want to use
   * `approve_as_multi` instead, since it only requires a hash of the call.
   *
   * Result is equivalent to the dispatched result if `threshold` is exactly `1`. Otherwise
   * on success, result is `Ok` and the result from the interior call, if it was executed,
   * may be found in the deposited `MultisigExecuted` event.
   *
   * ## Complexity
   * - `O(S + Z + Call)`.
   * - Up to one balance-reserve or unreserve operation.
   * - One passthrough operation, one insert, both `O(S)` where `S` is the number of
   * signatories. `S` is capped by `MaxSignatories`, with weight being proportional.
   * - One call encode & hash, both of complexity `O(Z)` where `Z` is tx-len.
   * - One encode & hash, both of complexity `O(S)`.
   * - Up to one binary search and insert (`O(logS + S)`).
   * - I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove.
   * - One event.
   * - The weight of the `call`.
   * - Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit
   * taken for its lifetime of `DepositBase + threshold * DepositFactor`.
   **/
  | {
      name: 'AsMulti';
      params: {
        threshold: number;
        otherSignatories: Array<AccountId32>;
        maybeTimepoint?: PalletMultisigTimepoint | undefined;
        call: AssetHubWestendRuntimeRuntimeCall;
        maxWeight: SpWeightsWeightV2Weight;
      };
    }
  /**
   * Register approval for a dispatch to be made from a deterministic composite account if
   * approved by a total of `threshold - 1` of `other_signatories`.
   *
   * Payment: `DepositBase` will be reserved if this is the first approval, plus
   * `threshold` times `DepositFactor`. It is returned once this dispatch happens or
   * is cancelled.
   *
   * The dispatch origin for this call must be _Signed_.
   *
   * - `threshold`: The total number of approvals for this dispatch before it is executed.
   * - `other_signatories`: The accounts (other than the sender) who can approve this
   * dispatch. May not be empty.
   * - `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is
   * not the first approval, then it must be `Some`, with the timepoint (block number and
   * transaction index) of the first approval transaction.
   * - `call_hash`: The hash of the call to be executed.
   *
   * NOTE: If this is the final approval, you will want to use `as_multi` instead.
   *
   * ## Complexity
   * - `O(S)`.
   * - Up to one balance-reserve or unreserve operation.
   * - One passthrough operation, one insert, both `O(S)` where `S` is the number of
   * signatories. `S` is capped by `MaxSignatories`, with weight being proportional.
   * - One encode & hash, both of complexity `O(S)`.
   * - Up to one binary search and insert (`O(logS + S)`).
   * - I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove.
   * - One event.
   * - Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit
   * taken for its lifetime of `DepositBase + threshold * DepositFactor`.
   **/
  | {
      name: 'ApproveAsMulti';
      params: {
        threshold: number;
        otherSignatories: Array<AccountId32>;
        maybeTimepoint?: PalletMultisigTimepoint | undefined;
        callHash: FixedBytes<32>;
        maxWeight: SpWeightsWeightV2Weight;
      };
    }
  /**
   * Cancel a pre-existing, on-going multisig transaction. Any deposit reserved previously
   * for this operation will be unreserved on success.
   *
   * The dispatch origin for this call must be _Signed_.
   *
   * - `threshold`: The total number of approvals for this dispatch before it is executed.
   * - `other_signatories`: The accounts (other than the sender) who can approve this
   * dispatch. May not be empty.
   * - `timepoint`: The timepoint (block number and transaction index) of the first approval
   * transaction for this dispatch.
   * - `call_hash`: The hash of the call to be executed.
   *
   * ## Complexity
   * - `O(S)`.
   * - Up to one balance-reserve or unreserve operation.
   * - One passthrough operation, one insert, both `O(S)` where `S` is the number of
   * signatories. `S` is capped by `MaxSignatories`, with weight being proportional.
   * - One encode & hash, both of complexity `O(S)`.
   * - One event.
   * - I/O: 1 read `O(S)`, one remove.
   * - Storage: removes one item.
   **/
  | {
      name: 'CancelAsMulti';
      params: {
        threshold: number;
        otherSignatories: Array<AccountId32>;
        timepoint: PalletMultisigTimepoint;
        callHash: FixedBytes<32>;
      };
    }
  /**
   * Poke the deposit reserved for an existing multisig operation.
   *
   * The dispatch origin for this call must be _Signed_ and must be the original depositor of
   * the multisig operation.
   *
   * The transaction fee is waived if the deposit amount has changed.
   *
   * - `threshold`: The total number of approvals needed for this multisig.
   * - `other_signatories`: The accounts (other than the sender) who are part of the
   * multisig.
   * - `call_hash`: The hash of the call this deposit is reserved for.
   *
   * Emits `DepositPoked` if successful.
   **/
  | {
      name: 'PokeDeposit';
      params: { threshold: number; otherSignatories: Array<AccountId32>; callHash: FixedBytes<32> };
    };

export type PalletMultisigCallLike =
  /**
   * Immediately dispatch a multi-signature call using a single approval from the caller.
   *
   * The dispatch origin for this call must be _Signed_.
   *
   * - `other_signatories`: The accounts (other than the sender) who are part of the
   * multi-signature, but do not participate in the approval process.
   * - `call`: The call to be executed.
   *
   * Result is equivalent to the dispatched result.
   *
   * ## Complexity
   * O(Z + C) where Z is the length of the call and C its execution weight.
   **/
  | {
      name: 'AsMultiThreshold1';
      params: { otherSignatories: Array<AccountId32Like>; call: AssetHubWestendRuntimeRuntimeCallLike };
    }
  /**
   * Register approval for a dispatch to be made from a deterministic composite account if
   * approved by a total of `threshold - 1` of `other_signatories`.
   *
   * If there are enough, then dispatch the call.
   *
   * Payment: `DepositBase` will be reserved if this is the first approval, plus
   * `threshold` times `DepositFactor`. It is returned once this dispatch happens or
   * is cancelled.
   *
   * The dispatch origin for this call must be _Signed_.
   *
   * - `threshold`: The total number of approvals for this dispatch before it is executed.
   * - `other_signatories`: The accounts (other than the sender) who can approve this
   * dispatch. May not be empty.
   * - `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is
   * not the first approval, then it must be `Some`, with the timepoint (block number and
   * transaction index) of the first approval transaction.
   * - `call`: The call to be executed.
   *
   * NOTE: Unless this is the final approval, you will generally want to use
   * `approve_as_multi` instead, since it only requires a hash of the call.
   *
   * Result is equivalent to the dispatched result if `threshold` is exactly `1`. Otherwise
   * on success, result is `Ok` and the result from the interior call, if it was executed,
   * may be found in the deposited `MultisigExecuted` event.
   *
   * ## Complexity
   * - `O(S + Z + Call)`.
   * - Up to one balance-reserve or unreserve operation.
   * - One passthrough operation, one insert, both `O(S)` where `S` is the number of
   * signatories. `S` is capped by `MaxSignatories`, with weight being proportional.
   * - One call encode & hash, both of complexity `O(Z)` where `Z` is tx-len.
   * - One encode & hash, both of complexity `O(S)`.
   * - Up to one binary search and insert (`O(logS + S)`).
   * - I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove.
   * - One event.
   * - The weight of the `call`.
   * - Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit
   * taken for its lifetime of `DepositBase + threshold * DepositFactor`.
   **/
  | {
      name: 'AsMulti';
      params: {
        threshold: number;
        otherSignatories: Array<AccountId32Like>;
        maybeTimepoint?: PalletMultisigTimepoint | undefined;
        call: AssetHubWestendRuntimeRuntimeCallLike;
        maxWeight: SpWeightsWeightV2Weight;
      };
    }
  /**
   * Register approval for a dispatch to be made from a deterministic composite account if
   * approved by a total of `threshold - 1` of `other_signatories`.
   *
   * Payment: `DepositBase` will be reserved if this is the first approval, plus
   * `threshold` times `DepositFactor`. It is returned once this dispatch happens or
   * is cancelled.
   *
   * The dispatch origin for this call must be _Signed_.
   *
   * - `threshold`: The total number of approvals for this dispatch before it is executed.
   * - `other_signatories`: The accounts (other than the sender) who can approve this
   * dispatch. May not be empty.
   * - `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is
   * not the first approval, then it must be `Some`, with the timepoint (block number and
   * transaction index) of the first approval transaction.
   * - `call_hash`: The hash of the call to be executed.
   *
   * NOTE: If this is the final approval, you will want to use `as_multi` instead.
   *
   * ## Complexity
   * - `O(S)`.
   * - Up to one balance-reserve or unreserve operation.
   * - One passthrough operation, one insert, both `O(S)` where `S` is the number of
   * signatories. `S` is capped by `MaxSignatories`, with weight being proportional.
   * - One encode & hash, both of complexity `O(S)`.
   * - Up to one binary search and insert (`O(logS + S)`).
   * - I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove.
   * - One event.
   * - Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit
   * taken for its lifetime of `DepositBase + threshold * DepositFactor`.
   **/
  | {
      name: 'ApproveAsMulti';
      params: {
        threshold: number;
        otherSignatories: Array<AccountId32Like>;
        maybeTimepoint?: PalletMultisigTimepoint | undefined;
        callHash: FixedBytes<32>;
        maxWeight: SpWeightsWeightV2Weight;
      };
    }
  /**
   * Cancel a pre-existing, on-going multisig transaction. Any deposit reserved previously
   * for this operation will be unreserved on success.
   *
   * The dispatch origin for this call must be _Signed_.
   *
   * - `threshold`: The total number of approvals for this dispatch before it is executed.
   * - `other_signatories`: The accounts (other than the sender) who can approve this
   * dispatch. May not be empty.
   * - `timepoint`: The timepoint (block number and transaction index) of the first approval
   * transaction for this dispatch.
   * - `call_hash`: The hash of the call to be executed.
   *
   * ## Complexity
   * - `O(S)`.
   * - Up to one balance-reserve or unreserve operation.
   * - One passthrough operation, one insert, both `O(S)` where `S` is the number of
   * signatories. `S` is capped by `MaxSignatories`, with weight being proportional.
   * - One encode & hash, both of complexity `O(S)`.
   * - One event.
   * - I/O: 1 read `O(S)`, one remove.
   * - Storage: removes one item.
   **/
  | {
      name: 'CancelAsMulti';
      params: {
        threshold: number;
        otherSignatories: Array<AccountId32Like>;
        timepoint: PalletMultisigTimepoint;
        callHash: FixedBytes<32>;
      };
    }
  /**
   * Poke the deposit reserved for an existing multisig operation.
   *
   * The dispatch origin for this call must be _Signed_ and must be the original depositor of
   * the multisig operation.
   *
   * The transaction fee is waived if the deposit amount has changed.
   *
   * - `threshold`: The total number of approvals needed for this multisig.
   * - `other_signatories`: The accounts (other than the sender) who are part of the
   * multisig.
   * - `call_hash`: The hash of the call this deposit is reserved for.
   *
   * Emits `DepositPoked` if successful.
   **/
  | {
      name: 'PokeDeposit';
      params: { threshold: number; otherSignatories: Array<AccountId32Like>; callHash: FixedBytes<32> };
    };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletProxyCall =
  /**
   * Dispatch the given `call` from an account that the sender is authorised for through
   * `add_proxy`.
   *
   * The dispatch origin for this call must be _Signed_.
   *
   * Parameters:
   * - `real`: The account that the proxy will make a call on behalf of.
   * - `force_proxy_type`: Specify the exact proxy type to be used and checked for this call.
   * - `call`: The call to be made by the `real` account.
   **/
  | {
      name: 'Proxy';
      params: {
        real: MultiAddress;
        forceProxyType?: AssetHubWestendRuntimeProxyType | undefined;
        call: AssetHubWestendRuntimeRuntimeCall;
      };
    }
  /**
   * Register a proxy account for the sender that is able to make calls on its behalf.
   *
   * The dispatch origin for this call must be _Signed_.
   *
   * Parameters:
   * - `proxy`: The account that the `caller` would like to make a proxy.
   * - `proxy_type`: The permissions allowed for this proxy account.
   * - `delay`: The announcement period required of the initial proxy. Will generally be
   * zero.
   **/
  | { name: 'AddProxy'; params: { delegate: MultiAddress; proxyType: AssetHubWestendRuntimeProxyType; delay: number } }
  /**
   * Unregister a proxy account for the sender.
   *
   * The dispatch origin for this call must be _Signed_.
   *
   * Parameters:
   * - `proxy`: The account that the `caller` would like to remove as a proxy.
   * - `proxy_type`: The permissions currently enabled for the removed proxy account.
   **/
  | {
      name: 'RemoveProxy';
      params: { delegate: MultiAddress; proxyType: AssetHubWestendRuntimeProxyType; delay: number };
    }
  /**
   * Unregister all proxy accounts for the sender.
   *
   * The dispatch origin for this call must be _Signed_.
   *
   * WARNING: This may be called on accounts created by `pure`, however if done, then
   * the unreserved fees will be inaccessible. **All access to this account will be lost.**
   **/
  | { name: 'RemoveProxies' }
  /**
   * Spawn a fresh new account that is guaranteed to be otherwise inaccessible, and
   * initialize it with a proxy of `proxy_type` for `origin` sender.
   *
   * Requires a `Signed` origin.
   *
   * - `proxy_type`: The type of the proxy that the sender will be registered as over the
   * new account. This will almost always be the most permissive `ProxyType` possible to
   * allow for maximum flexibility.
   * - `index`: A disambiguation index, in case this is called multiple times in the same
   * transaction (e.g. with `utility::batch`). Unless you're using `batch` you probably just
   * want to use `0`.
   * - `delay`: The announcement period required of the initial proxy. Will generally be
   * zero.
   *
   * Fails with `Duplicate` if this has already been called in this transaction, from the
   * same sender, with the same parameters.
   *
   * Fails if there are insufficient funds to pay for deposit.
   **/
  | { name: 'CreatePure'; params: { proxyType: AssetHubWestendRuntimeProxyType; delay: number; index: number } }
  /**
   * Removes a previously spawned pure proxy.
   *
   * WARNING: **All access to this account will be lost.** Any funds held in it will be
   * inaccessible.
   *
   * Requires a `Signed` origin, and the sender account must have been created by a call to
   * `pure` with corresponding parameters.
   *
   * - `spawner`: The account that originally called `pure` to create this account.
   * - `index`: The disambiguation index originally passed to `create_pure`. Probably `0`.
   * - `proxy_type`: The proxy type originally passed to `pure`.
   * - `height`: The height of the chain when the call to `pure` was processed.
   * - `ext_index`: The extrinsic index in which the call to `pure` was processed.
   *
   * Fails with `NoPermission` in case the caller is not a previously created pure
   * account whose `pure` call has corresponding parameters.
   **/
  | {
      name: 'KillPure';
      params: {
        spawner: MultiAddress;
        proxyType: AssetHubWestendRuntimeProxyType;
        index: number;
        height: number;
        extIndex: number;
      };
    }
  /**
   * Publish the hash of a proxy-call that will be made in the future.
   *
   * This must be called some number of blocks before the corresponding `proxy` is attempted
   * if the delay associated with the proxy relationship is greater than zero.
   *
   * No more than `MaxPending` announcements may be made at any one time.
   *
   * This will take a deposit of `AnnouncementDepositFactor` as well as
   * `AnnouncementDepositBase` if there are no other pending announcements.
   *
   * The dispatch origin for this call must be _Signed_ and a proxy of `real`.
   *
   * Parameters:
   * - `real`: The account that the proxy will make a call on behalf of.
   * - `call_hash`: The hash of the call to be made by the `real` account.
   **/
  | { name: 'Announce'; params: { real: MultiAddress; callHash: H256 } }
  /**
   * Remove a given announcement.
   *
   * May be called by a proxy account to remove a call they previously announced and return
   * the deposit.
   *
   * The dispatch origin for this call must be _Signed_.
   *
   * Parameters:
   * - `real`: The account that the proxy will make a call on behalf of.
   * - `call_hash`: The hash of the call to be made by the `real` account.
   **/
  | { name: 'RemoveAnnouncement'; params: { real: MultiAddress; callHash: H256 } }
  /**
   * Remove the given announcement of a delegate.
   *
   * May be called by a target (proxied) account to remove a call that one of their delegates
   * (`delegate`) has announced they want to execute. The deposit is returned.
   *
   * The dispatch origin for this call must be _Signed_.
   *
   * Parameters:
   * - `delegate`: The account that previously announced the call.
   * - `call_hash`: The hash of the call to be made.
   **/
  | { name: 'RejectAnnouncement'; params: { delegate: MultiAddress; callHash: H256 } }
  /**
   * Dispatch the given `call` from an account that the sender is authorized for through
   * `add_proxy`.
   *
   * Removes any corresponding announcement(s).
   *
   * The dispatch origin for this call must be _Signed_.
   *
   * Parameters:
   * - `real`: The account that the proxy will make a call on behalf of.
   * - `force_proxy_type`: Specify the exact proxy type to be used and checked for this call.
   * - `call`: The call to be made by the `real` account.
   **/
  | {
      name: 'ProxyAnnounced';
      params: {
        delegate: MultiAddress;
        real: MultiAddress;
        forceProxyType?: AssetHubWestendRuntimeProxyType | undefined;
        call: AssetHubWestendRuntimeRuntimeCall;
      };
    }
  /**
   * Poke / Adjust deposits made for proxies and announcements based on current values.
   * This can be used by accounts to possibly lower their locked amount.
   *
   * The dispatch origin for this call must be _Signed_.
   *
   * The transaction fee is waived if the deposit amount has changed.
   *
   * Emits `DepositPoked` if successful.
   **/
  | { name: 'PokeDeposit' };

export type PalletProxyCallLike =
  /**
   * Dispatch the given `call` from an account that the sender is authorised for through
   * `add_proxy`.
   *
   * The dispatch origin for this call must be _Signed_.
   *
   * Parameters:
   * - `real`: The account that the proxy will make a call on behalf of.
   * - `force_proxy_type`: Specify the exact proxy type to be used and checked for this call.
   * - `call`: The call to be made by the `real` account.
   **/
  | {
      name: 'Proxy';
      params: {
        real: MultiAddressLike;
        forceProxyType?: AssetHubWestendRuntimeProxyType | undefined;
        call: AssetHubWestendRuntimeRuntimeCallLike;
      };
    }
  /**
   * Register a proxy account for the sender that is able to make calls on its behalf.
   *
   * The dispatch origin for this call must be _Signed_.
   *
   * Parameters:
   * - `proxy`: The account that the `caller` would like to make a proxy.
   * - `proxy_type`: The permissions allowed for this proxy account.
   * - `delay`: The announcement period required of the initial proxy. Will generally be
   * zero.
   **/
  | {
      name: 'AddProxy';
      params: { delegate: MultiAddressLike; proxyType: AssetHubWestendRuntimeProxyType; delay: number };
    }
  /**
   * Unregister a proxy account for the sender.
   *
   * The dispatch origin for this call must be _Signed_.
   *
   * Parameters:
   * - `proxy`: The account that the `caller` would like to remove as a proxy.
   * - `proxy_type`: The permissions currently enabled for the removed proxy account.
   **/
  | {
      name: 'RemoveProxy';
      params: { delegate: MultiAddressLike; proxyType: AssetHubWestendRuntimeProxyType; delay: number };
    }
  /**
   * Unregister all proxy accounts for the sender.
   *
   * The dispatch origin for this call must be _Signed_.
   *
   * WARNING: This may be called on accounts created by `pure`, however if done, then
   * the unreserved fees will be inaccessible. **All access to this account will be lost.**
   **/
  | { name: 'RemoveProxies' }
  /**
   * Spawn a fresh new account that is guaranteed to be otherwise inaccessible, and
   * initialize it with a proxy of `proxy_type` for `origin` sender.
   *
   * Requires a `Signed` origin.
   *
   * - `proxy_type`: The type of the proxy that the sender will be registered as over the
   * new account. This will almost always be the most permissive `ProxyType` possible to
   * allow for maximum flexibility.
   * - `index`: A disambiguation index, in case this is called multiple times in the same
   * transaction (e.g. with `utility::batch`). Unless you're using `batch` you probably just
   * want to use `0`.
   * - `delay`: The announcement period required of the initial proxy. Will generally be
   * zero.
   *
   * Fails with `Duplicate` if this has already been called in this transaction, from the
   * same sender, with the same parameters.
   *
   * Fails if there are insufficient funds to pay for deposit.
   **/
  | { name: 'CreatePure'; params: { proxyType: AssetHubWestendRuntimeProxyType; delay: number; index: number } }
  /**
   * Removes a previously spawned pure proxy.
   *
   * WARNING: **All access to this account will be lost.** Any funds held in it will be
   * inaccessible.
   *
   * Requires a `Signed` origin, and the sender account must have been created by a call to
   * `pure` with corresponding parameters.
   *
   * - `spawner`: The account that originally called `pure` to create this account.
   * - `index`: The disambiguation index originally passed to `create_pure`. Probably `0`.
   * - `proxy_type`: The proxy type originally passed to `pure`.
   * - `height`: The height of the chain when the call to `pure` was processed.
   * - `ext_index`: The extrinsic index in which the call to `pure` was processed.
   *
   * Fails with `NoPermission` in case the caller is not a previously created pure
   * account whose `pure` call has corresponding parameters.
   **/
  | {
      name: 'KillPure';
      params: {
        spawner: MultiAddressLike;
        proxyType: AssetHubWestendRuntimeProxyType;
        index: number;
        height: number;
        extIndex: number;
      };
    }
  /**
   * Publish the hash of a proxy-call that will be made in the future.
   *
   * This must be called some number of blocks before the corresponding `proxy` is attempted
   * if the delay associated with the proxy relationship is greater than zero.
   *
   * No more than `MaxPending` announcements may be made at any one time.
   *
   * This will take a deposit of `AnnouncementDepositFactor` as well as
   * `AnnouncementDepositBase` if there are no other pending announcements.
   *
   * The dispatch origin for this call must be _Signed_ and a proxy of `real`.
   *
   * Parameters:
   * - `real`: The account that the proxy will make a call on behalf of.
   * - `call_hash`: The hash of the call to be made by the `real` account.
   **/
  | { name: 'Announce'; params: { real: MultiAddressLike; callHash: H256 } }
  /**
   * Remove a given announcement.
   *
   * May be called by a proxy account to remove a call they previously announced and return
   * the deposit.
   *
   * The dispatch origin for this call must be _Signed_.
   *
   * Parameters:
   * - `real`: The account that the proxy will make a call on behalf of.
   * - `call_hash`: The hash of the call to be made by the `real` account.
   **/
  | { name: 'RemoveAnnouncement'; params: { real: MultiAddressLike; callHash: H256 } }
  /**
   * Remove the given announcement of a delegate.
   *
   * May be called by a target (proxied) account to remove a call that one of their delegates
   * (`delegate`) has announced they want to execute. The deposit is returned.
   *
   * The dispatch origin for this call must be _Signed_.
   *
   * Parameters:
   * - `delegate`: The account that previously announced the call.
   * - `call_hash`: The hash of the call to be made.
   **/
  | { name: 'RejectAnnouncement'; params: { delegate: MultiAddressLike; callHash: H256 } }
  /**
   * Dispatch the given `call` from an account that the sender is authorized for through
   * `add_proxy`.
   *
   * Removes any corresponding announcement(s).
   *
   * The dispatch origin for this call must be _Signed_.
   *
   * Parameters:
   * - `real`: The account that the proxy will make a call on behalf of.
   * - `force_proxy_type`: Specify the exact proxy type to be used and checked for this call.
   * - `call`: The call to be made by the `real` account.
   **/
  | {
      name: 'ProxyAnnounced';
      params: {
        delegate: MultiAddressLike;
        real: MultiAddressLike;
        forceProxyType?: AssetHubWestendRuntimeProxyType | undefined;
        call: AssetHubWestendRuntimeRuntimeCallLike;
      };
    }
  /**
   * Poke / Adjust deposits made for proxies and announcements based on current values.
   * This can be used by accounts to possibly lower their locked amount.
   *
   * The dispatch origin for this call must be _Signed_.
   *
   * The transaction fee is waived if the deposit amount has changed.
   *
   * Emits `DepositPoked` if successful.
   **/
  | { name: 'PokeDeposit' };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletIndicesCall =
  /**
   * Assign an previously unassigned index.
   *
   * Payment: `Deposit` is reserved from the sender account.
   *
   * The dispatch origin for this call must be _Signed_.
   *
   * - `index`: the index to be claimed. This must not be in use.
   *
   * Emits `IndexAssigned` if successful.
   *
   * ## Complexity
   * - `O(1)`.
   **/
  | { name: 'Claim'; params: { index: number } }
  /**
   * Assign an index already owned by the sender to another account. The balance reservation
   * is effectively transferred to the new account.
   *
   * The dispatch origin for this call must be _Signed_.
   *
   * - `index`: the index to be re-assigned. This must be owned by the sender.
   * - `new`: the new owner of the index. This function is a no-op if it is equal to sender.
   *
   * Emits `IndexAssigned` if successful.
   *
   * ## Complexity
   * - `O(1)`.
   **/
  | { name: 'Transfer'; params: { new: MultiAddress; index: number } }
  /**
   * Free up an index owned by the sender.
   *
   * Payment: Any previous deposit placed for the index is unreserved in the sender account.
   *
   * The dispatch origin for this call must be _Signed_ and the sender must own the index.
   *
   * - `index`: the index to be freed. This must be owned by the sender.
   *
   * Emits `IndexFreed` if successful.
   *
   * ## Complexity
   * - `O(1)`.
   **/
  | { name: 'Free'; params: { index: number } }
  /**
   * Force an index to an account. This doesn't require a deposit. If the index is already
   * held, then any deposit is reimbursed to its current owner.
   *
   * The dispatch origin for this call must be _Root_.
   *
   * - `index`: the index to be (re-)assigned.
   * - `new`: the new owner of the index. This function is a no-op if it is equal to sender.
   * - `freeze`: if set to `true`, will freeze the index so it cannot be transferred.
   *
   * Emits `IndexAssigned` if successful.
   *
   * ## Complexity
   * - `O(1)`.
   **/
  | { name: 'ForceTransfer'; params: { new: MultiAddress; index: number; freeze: boolean } }
  /**
   * Freeze an index so it will always point to the sender account. This consumes the
   * deposit.
   *
   * The dispatch origin for this call must be _Signed_ and the signing account must have a
   * non-frozen account `index`.
   *
   * - `index`: the index to be frozen in place.
   *
   * Emits `IndexFrozen` if successful.
   *
   * ## Complexity
   * - `O(1)`.
   **/
  | { name: 'Freeze'; params: { index: number } }
  /**
   * Poke the deposit reserved for an index.
   *
   * The dispatch origin for this call must be _Signed_ and the signing account must have a
   * non-frozen account `index`.
   *
   * The transaction fees is waived if the deposit is changed after poking/reconsideration.
   *
   * - `index`: the index whose deposit is to be poked/reconsidered.
   *
   * Emits `DepositPoked` if successful.
   **/
  | { name: 'PokeDeposit'; params: { index: number } };

export type PalletIndicesCallLike =
  /**
   * Assign an previously unassigned index.
   *
   * Payment: `Deposit` is reserved from the sender account.
   *
   * The dispatch origin for this call must be _Signed_.
   *
   * - `index`: the index to be claimed. This must not be in use.
   *
   * Emits `IndexAssigned` if successful.
   *
   * ## Complexity
   * - `O(1)`.
   **/
  | { name: 'Claim'; params: { index: number } }
  /**
   * Assign an index already owned by the sender to another account. The balance reservation
   * is effectively transferred to the new account.
   *
   * The dispatch origin for this call must be _Signed_.
   *
   * - `index`: the index to be re-assigned. This must be owned by the sender.
   * - `new`: the new owner of the index. This function is a no-op if it is equal to sender.
   *
   * Emits `IndexAssigned` if successful.
   *
   * ## Complexity
   * - `O(1)`.
   **/
  | { name: 'Transfer'; params: { new: MultiAddressLike; index: number } }
  /**
   * Free up an index owned by the sender.
   *
   * Payment: Any previous deposit placed for the index is unreserved in the sender account.
   *
   * The dispatch origin for this call must be _Signed_ and the sender must own the index.
   *
   * - `index`: the index to be freed. This must be owned by the sender.
   *
   * Emits `IndexFreed` if successful.
   *
   * ## Complexity
   * - `O(1)`.
   **/
  | { name: 'Free'; params: { index: number } }
  /**
   * Force an index to an account. This doesn't require a deposit. If the index is already
   * held, then any deposit is reimbursed to its current owner.
   *
   * The dispatch origin for this call must be _Root_.
   *
   * - `index`: the index to be (re-)assigned.
   * - `new`: the new owner of the index. This function is a no-op if it is equal to sender.
   * - `freeze`: if set to `true`, will freeze the index so it cannot be transferred.
   *
   * Emits `IndexAssigned` if successful.
   *
   * ## Complexity
   * - `O(1)`.
   **/
  | { name: 'ForceTransfer'; params: { new: MultiAddressLike; index: number; freeze: boolean } }
  /**
   * Freeze an index so it will always point to the sender account. This consumes the
   * deposit.
   *
   * The dispatch origin for this call must be _Signed_ and the signing account must have a
   * non-frozen account `index`.
   *
   * - `index`: the index to be frozen in place.
   *
   * Emits `IndexFrozen` if successful.
   *
   * ## Complexity
   * - `O(1)`.
   **/
  | { name: 'Freeze'; params: { index: number } }
  /**
   * Poke the deposit reserved for an index.
   *
   * The dispatch origin for this call must be _Signed_ and the signing account must have a
   * non-frozen account `index`.
   *
   * The transaction fees is waived if the deposit is changed after poking/reconsideration.
   *
   * - `index`: the index whose deposit is to be poked/reconsidered.
   *
   * Emits `DepositPoked` if successful.
   **/
  | { name: 'PokeDeposit'; params: { index: number } };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletAssetsCall =
  /**
   * Issue a new class of fungible assets from a public origin.
   *
   * This new asset class has no assets initially and its owner is the origin.
   *
   * The origin must conform to the configured `CreateOrigin` and have sufficient funds free.
   *
   * Funds of sender are reserved by `AssetDeposit`.
   *
   * Parameters:
   * - `id`: The identifier of the new asset. This must not be currently in use to identify
   * an existing asset. If [`NextAssetId`] is set, then this must be equal to it.
   * - `admin`: The admin of this class of assets. The admin is the initial address of each
   * member of the asset class's admin team.
   * - `min_balance`: The minimum balance of this new asset that any single account must
   * have. If an account's balance is reduced below this, then it collapses to zero.
   *
   * Emits `Created` event when successful.
   *
   * Weight: `O(1)`
   **/
  | { name: 'Create'; params: { id: number; admin: MultiAddress; minBalance: bigint } }
  /**
   * Issue a new class of fungible assets from a privileged origin.
   *
   * This new asset class has no assets initially.
   *
   * The origin must conform to `ForceOrigin`.
   *
   * Unlike `create`, no funds are reserved.
   *
   * - `id`: The identifier of the new asset. This must not be currently in use to identify
   * an existing asset. If [`NextAssetId`] is set, then this must be equal to it.
   * - `owner`: The owner of this class of assets. The owner has full superuser permissions
   * over this asset, but may later change and configure the permissions using
   * `transfer_ownership` and `set_team`.
   * - `min_balance`: The minimum balance of this new asset that any single account must
   * have. If an account's balance is reduced below this, then it collapses to zero.
   *
   * Emits `ForceCreated` event when successful.
   *
   * Weight: `O(1)`
   **/
  | { name: 'ForceCreate'; params: { id: number; owner: MultiAddress; isSufficient: boolean; minBalance: bigint } }
  /**
   * Start the process of destroying a fungible asset class.
   *
   * `start_destroy` is the first in a series of extrinsics that should be called, to allow
   * destruction of an asset class.
   *
   * The origin must conform to `ForceOrigin` or must be `Signed` by the asset's `owner`.
   *
   * - `id`: The identifier of the asset to be destroyed. This must identify an existing
   * asset.
   *
   * It will fail with either [`Error::ContainsHolds`] or [`Error::ContainsFreezes`] if
   * an account contains holds or freezes in place.
   **/
  | { name: 'StartDestroy'; params: { id: number } }
  /**
   * Destroy all accounts associated with a given asset.
   *
   * `destroy_accounts` should only be called after `start_destroy` has been called, and the
   * asset is in a `Destroying` state.
   *
   * Due to weight restrictions, this function may need to be called multiple times to fully
   * destroy all accounts. It will destroy `RemoveItemsLimit` accounts at a time.
   *
   * - `id`: The identifier of the asset to be destroyed. This must identify an existing
   * asset.
   *
   * Each call emits the `Event::DestroyedAccounts` event.
   **/
  | { name: 'DestroyAccounts'; params: { id: number } }
  /**
   * Destroy all approvals associated with a given asset up to the max (T::RemoveItemsLimit).
   *
   * `destroy_approvals` should only be called after `start_destroy` has been called, and the
   * asset is in a `Destroying` state.
   *
   * Due to weight restrictions, this function may need to be called multiple times to fully
   * destroy all approvals. It will destroy `RemoveItemsLimit` approvals at a time.
   *
   * - `id`: The identifier of the asset to be destroyed. This must identify an existing
   * asset.
   *
   * Each call emits the `Event::DestroyedApprovals` event.
   **/
  | { name: 'DestroyApprovals'; params: { id: number } }
  /**
   * Complete destroying asset and unreserve currency.
   *
   * `finish_destroy` should only be called after `start_destroy` has been called, and the
   * asset is in a `Destroying` state. All accounts or approvals should be destroyed before
   * hand.
   *
   * - `id`: The identifier of the asset to be destroyed. This must identify an existing
   * asset.
   *
   * Each successful call emits the `Event::Destroyed` event.
   **/
  | { name: 'FinishDestroy'; params: { id: number } }
  /**
   * Mint assets of a particular class.
   *
   * The origin must be Signed and the sender must be the Issuer of the asset `id`.
   *
   * - `id`: The identifier of the asset to have some amount minted.
   * - `beneficiary`: The account to be credited with the minted assets.
   * - `amount`: The amount of the asset to be minted.
   *
   * Emits `Issued` event when successful.
   *
   * Weight: `O(1)`
   * Modes: Pre-existing balance of `beneficiary`; Account pre-existence of `beneficiary`.
   **/
  | { name: 'Mint'; params: { id: number; beneficiary: MultiAddress; amount: bigint } }
  /**
   * Reduce the balance of `who` by as much as possible up to `amount` assets of `id`.
   *
   * Origin must be Signed and the sender should be the Manager of the asset `id`.
   *
   * Bails with `NoAccount` if the `who` is already dead.
   *
   * - `id`: The identifier of the asset to have some amount burned.
   * - `who`: The account to be debited from.
   * - `amount`: The maximum amount by which `who`'s balance should be reduced.
   *
   * Emits `Burned` with the actual amount burned. If this takes the balance to below the
   * minimum for the asset, then the amount burned is increased to take it to zero.
   *
   * Weight: `O(1)`
   * Modes: Post-existence of `who`; Pre & post Zombie-status of `who`.
   **/
  | { name: 'Burn'; params: { id: number; who: MultiAddress; amount: bigint } }
  /**
   * Move some assets from the sender account to another.
   *
   * Origin must be Signed.
   *
   * - `id`: The identifier of the asset to have some amount transferred.
   * - `target`: The account to be credited.
   * - `amount`: The amount by which the sender's balance of assets should be reduced and
   * `target`'s balance increased. The amount actually transferred may be slightly greater in
   * the case that the transfer would otherwise take the sender balance above zero but below
   * the minimum balance. Must be greater than zero.
   *
   * Emits `Transferred` with the actual amount transferred. If this takes the source balance
   * to below the minimum for the asset, then the amount transferred is increased to take it
   * to zero.
   *
   * Weight: `O(1)`
   * Modes: Pre-existence of `target`; Post-existence of sender; Account pre-existence of
   * `target`.
   **/
  | { name: 'Transfer'; params: { id: number; target: MultiAddress; amount: bigint } }
  /**
   * Move some assets from the sender account to another, keeping the sender account alive.
   *
   * Origin must be Signed.
   *
   * - `id`: The identifier of the asset to have some amount transferred.
   * - `target`: The account to be credited.
   * - `amount`: The amount by which the sender's balance of assets should be reduced and
   * `target`'s balance increased. The amount actually transferred may be slightly greater in
   * the case that the transfer would otherwise take the sender balance above zero but below
   * the minimum balance. Must be greater than zero.
   *
   * Emits `Transferred` with the actual amount transferred. If this takes the source balance
   * to below the minimum for the asset, then the amount transferred is increased to take it
   * to zero.
   *
   * Weight: `O(1)`
   * Modes: Pre-existence of `target`; Post-existence of sender; Account pre-existence of
   * `target`.
   **/
  | { name: 'TransferKeepAlive'; params: { id: number; target: MultiAddress; amount: bigint } }
  /**
   * Move some assets from one account to another.
   *
   * Origin must be Signed and the sender should be the Admin of the asset `id`.
   *
   * - `id`: The identifier of the asset to have some amount transferred.
   * - `source`: The account to be debited.
   * - `dest`: The account to be credited.
   * - `amount`: The amount by which the `source`'s balance of assets should be reduced and
   * `dest`'s balance increased. The amount actually transferred may be slightly greater in
   * the case that the transfer would otherwise take the `source` balance above zero but
   * below the minimum balance. Must be greater than zero.
   *
   * Emits `Transferred` with the actual amount transferred. If this takes the source balance
   * to below the minimum for the asset, then the amount transferred is increased to take it
   * to zero.
   *
   * Weight: `O(1)`
   * Modes: Pre-existence of `dest`; Post-existence of `source`; Account pre-existence of
   * `dest`.
   **/
  | { name: 'ForceTransfer'; params: { id: number; source: MultiAddress; dest: MultiAddress; amount: bigint } }
  /**
   * Disallow further unprivileged transfers of an asset `id` from an account `who`. `who`
   * must already exist as an entry in `Account`s of the asset. If you want to freeze an
   * account that does not have an entry, use `touch_other` first.
   *
   * Origin must be Signed and the sender should be the Freezer of the asset `id`.
   *
   * - `id`: The identifier of the asset to be frozen.
   * - `who`: The account to be frozen.
   *
   * Emits `Frozen`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'Freeze'; params: { id: number; who: MultiAddress } }
  /**
   * Allow unprivileged transfers to and from an account again.
   *
   * Origin must be Signed and the sender should be the Admin of the asset `id`.
   *
   * - `id`: The identifier of the asset to be frozen.
   * - `who`: The account to be unfrozen.
   *
   * Emits `Thawed`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'Thaw'; params: { id: number; who: MultiAddress } }
  /**
   * Disallow further unprivileged transfers for the asset class.
   *
   * Origin must be Signed and the sender should be the Freezer of the asset `id`.
   *
   * - `id`: The identifier of the asset to be frozen.
   *
   * Emits `Frozen`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'FreezeAsset'; params: { id: number } }
  /**
   * Allow unprivileged transfers for the asset again.
   *
   * Origin must be Signed and the sender should be the Admin of the asset `id`.
   *
   * - `id`: The identifier of the asset to be thawed.
   *
   * Emits `Thawed`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'ThawAsset'; params: { id: number } }
  /**
   * Change the Owner of an asset.
   *
   * Origin must be Signed and the sender should be the Owner of the asset `id`.
   *
   * - `id`: The identifier of the asset.
   * - `owner`: The new Owner of this asset.
   *
   * Emits `OwnerChanged`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'TransferOwnership'; params: { id: number; owner: MultiAddress } }
  /**
   * Change the Issuer, Admin and Freezer of an asset.
   *
   * Origin must be Signed and the sender should be the Owner of the asset `id`.
   *
   * - `id`: The identifier of the asset to be frozen.
   * - `issuer`: The new Issuer of this asset.
   * - `admin`: The new Admin of this asset.
   * - `freezer`: The new Freezer of this asset.
   *
   * Emits `TeamChanged`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'SetTeam'; params: { id: number; issuer: MultiAddress; admin: MultiAddress; freezer: MultiAddress } }
  /**
   * Set the metadata for an asset.
   *
   * Origin must be Signed and the sender should be the Owner of the asset `id`.
   *
   * Funds of sender are reserved according to the formula:
   * `MetadataDepositBase + MetadataDepositPerByte * (name.len + symbol.len)` taking into
   * account any already reserved funds.
   *
   * - `id`: The identifier of the asset to update.
   * - `name`: The user friendly name of this asset. Limited in length by `StringLimit`.
   * - `symbol`: The exchange symbol for this asset. Limited in length by `StringLimit`.
   * - `decimals`: The number of decimals this asset uses to represent one unit.
   *
   * Emits `MetadataSet`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'SetMetadata'; params: { id: number; name: Bytes; symbol: Bytes; decimals: number } }
  /**
   * Clear the metadata for an asset.
   *
   * Origin must be Signed and the sender should be the Owner of the asset `id`.
   *
   * Any deposit is freed for the asset owner.
   *
   * - `id`: The identifier of the asset to clear.
   *
   * Emits `MetadataCleared`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'ClearMetadata'; params: { id: number } }
  /**
   * Force the metadata for an asset to some value.
   *
   * Origin must be ForceOrigin.
   *
   * Any deposit is left alone.
   *
   * - `id`: The identifier of the asset to update.
   * - `name`: The user friendly name of this asset. Limited in length by `StringLimit`.
   * - `symbol`: The exchange symbol for this asset. Limited in length by `StringLimit`.
   * - `decimals`: The number of decimals this asset uses to represent one unit.
   *
   * Emits `MetadataSet`.
   *
   * Weight: `O(N + S)` where N and S are the length of the name and symbol respectively.
   **/
  | {
      name: 'ForceSetMetadata';
      params: { id: number; name: Bytes; symbol: Bytes; decimals: number; isFrozen: boolean };
    }
  /**
   * Clear the metadata for an asset.
   *
   * Origin must be ForceOrigin.
   *
   * Any deposit is returned.
   *
   * - `id`: The identifier of the asset to clear.
   *
   * Emits `MetadataCleared`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'ForceClearMetadata'; params: { id: number } }
  /**
   * Alter the attributes of a given asset.
   *
   * Origin must be `ForceOrigin`.
   *
   * - `id`: The identifier of the asset.
   * - `owner`: The new Owner of this asset.
   * - `issuer`: The new Issuer of this asset.
   * - `admin`: The new Admin of this asset.
   * - `freezer`: The new Freezer of this asset.
   * - `min_balance`: The minimum balance of this new asset that any single account must
   * have. If an account's balance is reduced below this, then it collapses to zero.
   * - `is_sufficient`: Whether a non-zero balance of this asset is deposit of sufficient
   * value to account for the state bloat associated with its balance storage. If set to
   * `true`, then non-zero balances may be stored without a `consumer` reference (and thus
   * an ED in the Balances pallet or whatever else is used to control user-account state
   * growth).
   * - `is_frozen`: Whether this asset class is frozen except for permissioned/admin
   * instructions.
   *
   * Emits `AssetStatusChanged` with the identity of the asset.
   *
   * Weight: `O(1)`
   **/
  | {
      name: 'ForceAssetStatus';
      params: {
        id: number;
        owner: MultiAddress;
        issuer: MultiAddress;
        admin: MultiAddress;
        freezer: MultiAddress;
        minBalance: bigint;
        isSufficient: boolean;
        isFrozen: boolean;
      };
    }
  /**
   * Approve an amount of asset for transfer by a delegated third-party account.
   *
   * Origin must be Signed.
   *
   * Ensures that `ApprovalDeposit` worth of `Currency` is reserved from signing account
   * for the purpose of holding the approval. If some non-zero amount of assets is already
   * approved from signing account to `delegate`, then it is topped up or unreserved to
   * meet the right value.
   *
   * NOTE: The signing account does not need to own `amount` of assets at the point of
   * making this call.
   *
   * - `id`: The identifier of the asset.
   * - `delegate`: The account to delegate permission to transfer asset.
   * - `amount`: The amount of asset that may be transferred by `delegate`. If there is
   * already an approval in place, then this acts additively.
   *
   * Emits `ApprovedTransfer` on success.
   *
   * Weight: `O(1)`
   **/
  | { name: 'ApproveTransfer'; params: { id: number; delegate: MultiAddress; amount: bigint } }
  /**
   * Cancel all of some asset approved for delegated transfer by a third-party account.
   *
   * Origin must be Signed and there must be an approval in place between signer and
   * `delegate`.
   *
   * Unreserves any deposit previously reserved by `approve_transfer` for the approval.
   *
   * - `id`: The identifier of the asset.
   * - `delegate`: The account delegated permission to transfer asset.
   *
   * Emits `ApprovalCancelled` on success.
   *
   * Weight: `O(1)`
   **/
  | { name: 'CancelApproval'; params: { id: number; delegate: MultiAddress } }
  /**
   * Cancel all of some asset approved for delegated transfer by a third-party account.
   *
   * Origin must be either ForceOrigin or Signed origin with the signer being the Admin
   * account of the asset `id`.
   *
   * Unreserves any deposit previously reserved by `approve_transfer` for the approval.
   *
   * - `id`: The identifier of the asset.
   * - `delegate`: The account delegated permission to transfer asset.
   *
   * Emits `ApprovalCancelled` on success.
   *
   * Weight: `O(1)`
   **/
  | { name: 'ForceCancelApproval'; params: { id: number; owner: MultiAddress; delegate: MultiAddress } }
  /**
   * Transfer some asset balance from a previously delegated account to some third-party
   * account.
   *
   * Origin must be Signed and there must be an approval in place by the `owner` to the
   * signer.
   *
   * If the entire amount approved for transfer is transferred, then any deposit previously
   * reserved by `approve_transfer` is unreserved.
   *
   * - `id`: The identifier of the asset.
   * - `owner`: The account which previously approved for a transfer of at least `amount` and
   * from which the asset balance will be withdrawn.
   * - `destination`: The account to which the asset balance of `amount` will be transferred.
   * - `amount`: The amount of assets to transfer.
   *
   * Emits `TransferredApproved` on success.
   *
   * Weight: `O(1)`
   **/
  | { name: 'TransferApproved'; params: { id: number; owner: MultiAddress; destination: MultiAddress; amount: bigint } }
  /**
   * Create an asset account for non-provider assets.
   *
   * A deposit will be taken from the signer account.
   *
   * - `origin`: Must be Signed; the signer account must have sufficient funds for a deposit
   * to be taken.
   * - `id`: The identifier of the asset for the account to be created.
   *
   * Emits `Touched` event when successful.
   **/
  | { name: 'Touch'; params: { id: number } }
  /**
   * Return the deposit (if any) of an asset account or a consumer reference (if any) of an
   * account.
   *
   * The origin must be Signed.
   *
   * - `id`: The identifier of the asset for which the caller would like the deposit
   * refunded.
   * - `allow_burn`: If `true` then assets may be destroyed in order to complete the refund.
   *
   * It will fail with either [`Error::ContainsHolds`] or [`Error::ContainsFreezes`] if
   * the asset account contains holds or freezes in place.
   *
   * Emits `Refunded` event when successful.
   **/
  | { name: 'Refund'; params: { id: number; allowBurn: boolean } }
  /**
   * Sets the minimum balance of an asset.
   *
   * Only works if there aren't any accounts that are holding the asset or if
   * the new value of `min_balance` is less than the old one.
   *
   * Origin must be Signed and the sender has to be the Owner of the
   * asset `id`.
   *
   * - `id`: The identifier of the asset.
   * - `min_balance`: The new value of `min_balance`.
   *
   * Emits `AssetMinBalanceChanged` event when successful.
   **/
  | { name: 'SetMinBalance'; params: { id: number; minBalance: bigint } }
  /**
   * Create an asset account for `who`.
   *
   * A deposit will be taken from the signer account.
   *
   * - `origin`: Must be Signed by `Freezer` or `Admin` of the asset `id`; the signer account
   * must have sufficient funds for a deposit to be taken.
   * - `id`: The identifier of the asset for the account to be created.
   * - `who`: The account to be created.
   *
   * Emits `Touched` event when successful.
   **/
  | { name: 'TouchOther'; params: { id: number; who: MultiAddress } }
  /**
   * Return the deposit (if any) of a target asset account. Useful if you are the depositor.
   *
   * The origin must be Signed and either the account owner, depositor, or asset `Admin`. In
   * order to burn a non-zero balance of the asset, the caller must be the account and should
   * use `refund`.
   *
   * - `id`: The identifier of the asset for the account holding a deposit.
   * - `who`: The account to refund.
   *
   * It will fail with either [`Error::ContainsHolds`] or [`Error::ContainsFreezes`] if
   * the asset account contains holds or freezes in place.
   *
   * Emits `Refunded` event when successful.
   **/
  | { name: 'RefundOther'; params: { id: number; who: MultiAddress } }
  /**
   * Disallow further unprivileged transfers of an asset `id` to and from an account `who`.
   *
   * Origin must be Signed and the sender should be the Freezer of the asset `id`.
   *
   * - `id`: The identifier of the account's asset.
   * - `who`: The account to be unblocked.
   *
   * Emits `Blocked`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'Block'; params: { id: number; who: MultiAddress } }
  /**
   * Transfer the entire transferable balance from the caller asset account.
   *
   * NOTE: This function only attempts to transfer _transferable_ balances. This means that
   * any held, frozen, or minimum balance (when `keep_alive` is `true`), will not be
   * transferred by this function. To ensure that this function results in a killed account,
   * you might need to prepare the account by removing any reference counters, storage
   * deposits, etc...
   *
   * The dispatch origin of this call must be Signed.
   *
   * - `id`: The identifier of the asset for the account holding a deposit.
   * - `dest`: The recipient of the transfer.
   * - `keep_alive`: A boolean to determine if the `transfer_all` operation should send all
   * of the funds the asset account has, causing the sender asset account to be killed
   * (false), or transfer everything except at least the minimum balance, which will
   * guarantee to keep the sender asset account alive (true).
   **/
  | { name: 'TransferAll'; params: { id: number; dest: MultiAddress; keepAlive: boolean } };

export type PalletAssetsCallLike =
  /**
   * Issue a new class of fungible assets from a public origin.
   *
   * This new asset class has no assets initially and its owner is the origin.
   *
   * The origin must conform to the configured `CreateOrigin` and have sufficient funds free.
   *
   * Funds of sender are reserved by `AssetDeposit`.
   *
   * Parameters:
   * - `id`: The identifier of the new asset. This must not be currently in use to identify
   * an existing asset. If [`NextAssetId`] is set, then this must be equal to it.
   * - `admin`: The admin of this class of assets. The admin is the initial address of each
   * member of the asset class's admin team.
   * - `min_balance`: The minimum balance of this new asset that any single account must
   * have. If an account's balance is reduced below this, then it collapses to zero.
   *
   * Emits `Created` event when successful.
   *
   * Weight: `O(1)`
   **/
  | { name: 'Create'; params: { id: number; admin: MultiAddressLike; minBalance: bigint } }
  /**
   * Issue a new class of fungible assets from a privileged origin.
   *
   * This new asset class has no assets initially.
   *
   * The origin must conform to `ForceOrigin`.
   *
   * Unlike `create`, no funds are reserved.
   *
   * - `id`: The identifier of the new asset. This must not be currently in use to identify
   * an existing asset. If [`NextAssetId`] is set, then this must be equal to it.
   * - `owner`: The owner of this class of assets. The owner has full superuser permissions
   * over this asset, but may later change and configure the permissions using
   * `transfer_ownership` and `set_team`.
   * - `min_balance`: The minimum balance of this new asset that any single account must
   * have. If an account's balance is reduced below this, then it collapses to zero.
   *
   * Emits `ForceCreated` event when successful.
   *
   * Weight: `O(1)`
   **/
  | { name: 'ForceCreate'; params: { id: number; owner: MultiAddressLike; isSufficient: boolean; minBalance: bigint } }
  /**
   * Start the process of destroying a fungible asset class.
   *
   * `start_destroy` is the first in a series of extrinsics that should be called, to allow
   * destruction of an asset class.
   *
   * The origin must conform to `ForceOrigin` or must be `Signed` by the asset's `owner`.
   *
   * - `id`: The identifier of the asset to be destroyed. This must identify an existing
   * asset.
   *
   * It will fail with either [`Error::ContainsHolds`] or [`Error::ContainsFreezes`] if
   * an account contains holds or freezes in place.
   **/
  | { name: 'StartDestroy'; params: { id: number } }
  /**
   * Destroy all accounts associated with a given asset.
   *
   * `destroy_accounts` should only be called after `start_destroy` has been called, and the
   * asset is in a `Destroying` state.
   *
   * Due to weight restrictions, this function may need to be called multiple times to fully
   * destroy all accounts. It will destroy `RemoveItemsLimit` accounts at a time.
   *
   * - `id`: The identifier of the asset to be destroyed. This must identify an existing
   * asset.
   *
   * Each call emits the `Event::DestroyedAccounts` event.
   **/
  | { name: 'DestroyAccounts'; params: { id: number } }
  /**
   * Destroy all approvals associated with a given asset up to the max (T::RemoveItemsLimit).
   *
   * `destroy_approvals` should only be called after `start_destroy` has been called, and the
   * asset is in a `Destroying` state.
   *
   * Due to weight restrictions, this function may need to be called multiple times to fully
   * destroy all approvals. It will destroy `RemoveItemsLimit` approvals at a time.
   *
   * - `id`: The identifier of the asset to be destroyed. This must identify an existing
   * asset.
   *
   * Each call emits the `Event::DestroyedApprovals` event.
   **/
  | { name: 'DestroyApprovals'; params: { id: number } }
  /**
   * Complete destroying asset and unreserve currency.
   *
   * `finish_destroy` should only be called after `start_destroy` has been called, and the
   * asset is in a `Destroying` state. All accounts or approvals should be destroyed before
   * hand.
   *
   * - `id`: The identifier of the asset to be destroyed. This must identify an existing
   * asset.
   *
   * Each successful call emits the `Event::Destroyed` event.
   **/
  | { name: 'FinishDestroy'; params: { id: number } }
  /**
   * Mint assets of a particular class.
   *
   * The origin must be Signed and the sender must be the Issuer of the asset `id`.
   *
   * - `id`: The identifier of the asset to have some amount minted.
   * - `beneficiary`: The account to be credited with the minted assets.
   * - `amount`: The amount of the asset to be minted.
   *
   * Emits `Issued` event when successful.
   *
   * Weight: `O(1)`
   * Modes: Pre-existing balance of `beneficiary`; Account pre-existence of `beneficiary`.
   **/
  | { name: 'Mint'; params: { id: number; beneficiary: MultiAddressLike; amount: bigint } }
  /**
   * Reduce the balance of `who` by as much as possible up to `amount` assets of `id`.
   *
   * Origin must be Signed and the sender should be the Manager of the asset `id`.
   *
   * Bails with `NoAccount` if the `who` is already dead.
   *
   * - `id`: The identifier of the asset to have some amount burned.
   * - `who`: The account to be debited from.
   * - `amount`: The maximum amount by which `who`'s balance should be reduced.
   *
   * Emits `Burned` with the actual amount burned. If this takes the balance to below the
   * minimum for the asset, then the amount burned is increased to take it to zero.
   *
   * Weight: `O(1)`
   * Modes: Post-existence of `who`; Pre & post Zombie-status of `who`.
   **/
  | { name: 'Burn'; params: { id: number; who: MultiAddressLike; amount: bigint } }
  /**
   * Move some assets from the sender account to another.
   *
   * Origin must be Signed.
   *
   * - `id`: The identifier of the asset to have some amount transferred.
   * - `target`: The account to be credited.
   * - `amount`: The amount by which the sender's balance of assets should be reduced and
   * `target`'s balance increased. The amount actually transferred may be slightly greater in
   * the case that the transfer would otherwise take the sender balance above zero but below
   * the minimum balance. Must be greater than zero.
   *
   * Emits `Transferred` with the actual amount transferred. If this takes the source balance
   * to below the minimum for the asset, then the amount transferred is increased to take it
   * to zero.
   *
   * Weight: `O(1)`
   * Modes: Pre-existence of `target`; Post-existence of sender; Account pre-existence of
   * `target`.
   **/
  | { name: 'Transfer'; params: { id: number; target: MultiAddressLike; amount: bigint } }
  /**
   * Move some assets from the sender account to another, keeping the sender account alive.
   *
   * Origin must be Signed.
   *
   * - `id`: The identifier of the asset to have some amount transferred.
   * - `target`: The account to be credited.
   * - `amount`: The amount by which the sender's balance of assets should be reduced and
   * `target`'s balance increased. The amount actually transferred may be slightly greater in
   * the case that the transfer would otherwise take the sender balance above zero but below
   * the minimum balance. Must be greater than zero.
   *
   * Emits `Transferred` with the actual amount transferred. If this takes the source balance
   * to below the minimum for the asset, then the amount transferred is increased to take it
   * to zero.
   *
   * Weight: `O(1)`
   * Modes: Pre-existence of `target`; Post-existence of sender; Account pre-existence of
   * `target`.
   **/
  | { name: 'TransferKeepAlive'; params: { id: number; target: MultiAddressLike; amount: bigint } }
  /**
   * Move some assets from one account to another.
   *
   * Origin must be Signed and the sender should be the Admin of the asset `id`.
   *
   * - `id`: The identifier of the asset to have some amount transferred.
   * - `source`: The account to be debited.
   * - `dest`: The account to be credited.
   * - `amount`: The amount by which the `source`'s balance of assets should be reduced and
   * `dest`'s balance increased. The amount actually transferred may be slightly greater in
   * the case that the transfer would otherwise take the `source` balance above zero but
   * below the minimum balance. Must be greater than zero.
   *
   * Emits `Transferred` with the actual amount transferred. If this takes the source balance
   * to below the minimum for the asset, then the amount transferred is increased to take it
   * to zero.
   *
   * Weight: `O(1)`
   * Modes: Pre-existence of `dest`; Post-existence of `source`; Account pre-existence of
   * `dest`.
   **/
  | { name: 'ForceTransfer'; params: { id: number; source: MultiAddressLike; dest: MultiAddressLike; amount: bigint } }
  /**
   * Disallow further unprivileged transfers of an asset `id` from an account `who`. `who`
   * must already exist as an entry in `Account`s of the asset. If you want to freeze an
   * account that does not have an entry, use `touch_other` first.
   *
   * Origin must be Signed and the sender should be the Freezer of the asset `id`.
   *
   * - `id`: The identifier of the asset to be frozen.
   * - `who`: The account to be frozen.
   *
   * Emits `Frozen`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'Freeze'; params: { id: number; who: MultiAddressLike } }
  /**
   * Allow unprivileged transfers to and from an account again.
   *
   * Origin must be Signed and the sender should be the Admin of the asset `id`.
   *
   * - `id`: The identifier of the asset to be frozen.
   * - `who`: The account to be unfrozen.
   *
   * Emits `Thawed`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'Thaw'; params: { id: number; who: MultiAddressLike } }
  /**
   * Disallow further unprivileged transfers for the asset class.
   *
   * Origin must be Signed and the sender should be the Freezer of the asset `id`.
   *
   * - `id`: The identifier of the asset to be frozen.
   *
   * Emits `Frozen`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'FreezeAsset'; params: { id: number } }
  /**
   * Allow unprivileged transfers for the asset again.
   *
   * Origin must be Signed and the sender should be the Admin of the asset `id`.
   *
   * - `id`: The identifier of the asset to be thawed.
   *
   * Emits `Thawed`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'ThawAsset'; params: { id: number } }
  /**
   * Change the Owner of an asset.
   *
   * Origin must be Signed and the sender should be the Owner of the asset `id`.
   *
   * - `id`: The identifier of the asset.
   * - `owner`: The new Owner of this asset.
   *
   * Emits `OwnerChanged`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'TransferOwnership'; params: { id: number; owner: MultiAddressLike } }
  /**
   * Change the Issuer, Admin and Freezer of an asset.
   *
   * Origin must be Signed and the sender should be the Owner of the asset `id`.
   *
   * - `id`: The identifier of the asset to be frozen.
   * - `issuer`: The new Issuer of this asset.
   * - `admin`: The new Admin of this asset.
   * - `freezer`: The new Freezer of this asset.
   *
   * Emits `TeamChanged`.
   *
   * Weight: `O(1)`
   **/
  | {
      name: 'SetTeam';
      params: { id: number; issuer: MultiAddressLike; admin: MultiAddressLike; freezer: MultiAddressLike };
    }
  /**
   * Set the metadata for an asset.
   *
   * Origin must be Signed and the sender should be the Owner of the asset `id`.
   *
   * Funds of sender are reserved according to the formula:
   * `MetadataDepositBase + MetadataDepositPerByte * (name.len + symbol.len)` taking into
   * account any already reserved funds.
   *
   * - `id`: The identifier of the asset to update.
   * - `name`: The user friendly name of this asset. Limited in length by `StringLimit`.
   * - `symbol`: The exchange symbol for this asset. Limited in length by `StringLimit`.
   * - `decimals`: The number of decimals this asset uses to represent one unit.
   *
   * Emits `MetadataSet`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'SetMetadata'; params: { id: number; name: BytesLike; symbol: BytesLike; decimals: number } }
  /**
   * Clear the metadata for an asset.
   *
   * Origin must be Signed and the sender should be the Owner of the asset `id`.
   *
   * Any deposit is freed for the asset owner.
   *
   * - `id`: The identifier of the asset to clear.
   *
   * Emits `MetadataCleared`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'ClearMetadata'; params: { id: number } }
  /**
   * Force the metadata for an asset to some value.
   *
   * Origin must be ForceOrigin.
   *
   * Any deposit is left alone.
   *
   * - `id`: The identifier of the asset to update.
   * - `name`: The user friendly name of this asset. Limited in length by `StringLimit`.
   * - `symbol`: The exchange symbol for this asset. Limited in length by `StringLimit`.
   * - `decimals`: The number of decimals this asset uses to represent one unit.
   *
   * Emits `MetadataSet`.
   *
   * Weight: `O(N + S)` where N and S are the length of the name and symbol respectively.
   **/
  | {
      name: 'ForceSetMetadata';
      params: { id: number; name: BytesLike; symbol: BytesLike; decimals: number; isFrozen: boolean };
    }
  /**
   * Clear the metadata for an asset.
   *
   * Origin must be ForceOrigin.
   *
   * Any deposit is returned.
   *
   * - `id`: The identifier of the asset to clear.
   *
   * Emits `MetadataCleared`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'ForceClearMetadata'; params: { id: number } }
  /**
   * Alter the attributes of a given asset.
   *
   * Origin must be `ForceOrigin`.
   *
   * - `id`: The identifier of the asset.
   * - `owner`: The new Owner of this asset.
   * - `issuer`: The new Issuer of this asset.
   * - `admin`: The new Admin of this asset.
   * - `freezer`: The new Freezer of this asset.
   * - `min_balance`: The minimum balance of this new asset that any single account must
   * have. If an account's balance is reduced below this, then it collapses to zero.
   * - `is_sufficient`: Whether a non-zero balance of this asset is deposit of sufficient
   * value to account for the state bloat associated with its balance storage. If set to
   * `true`, then non-zero balances may be stored without a `consumer` reference (and thus
   * an ED in the Balances pallet or whatever else is used to control user-account state
   * growth).
   * - `is_frozen`: Whether this asset class is frozen except for permissioned/admin
   * instructions.
   *
   * Emits `AssetStatusChanged` with the identity of the asset.
   *
   * Weight: `O(1)`
   **/
  | {
      name: 'ForceAssetStatus';
      params: {
        id: number;
        owner: MultiAddressLike;
        issuer: MultiAddressLike;
        admin: MultiAddressLike;
        freezer: MultiAddressLike;
        minBalance: bigint;
        isSufficient: boolean;
        isFrozen: boolean;
      };
    }
  /**
   * Approve an amount of asset for transfer by a delegated third-party account.
   *
   * Origin must be Signed.
   *
   * Ensures that `ApprovalDeposit` worth of `Currency` is reserved from signing account
   * for the purpose of holding the approval. If some non-zero amount of assets is already
   * approved from signing account to `delegate`, then it is topped up or unreserved to
   * meet the right value.
   *
   * NOTE: The signing account does not need to own `amount` of assets at the point of
   * making this call.
   *
   * - `id`: The identifier of the asset.
   * - `delegate`: The account to delegate permission to transfer asset.
   * - `amount`: The amount of asset that may be transferred by `delegate`. If there is
   * already an approval in place, then this acts additively.
   *
   * Emits `ApprovedTransfer` on success.
   *
   * Weight: `O(1)`
   **/
  | { name: 'ApproveTransfer'; params: { id: number; delegate: MultiAddressLike; amount: bigint } }
  /**
   * Cancel all of some asset approved for delegated transfer by a third-party account.
   *
   * Origin must be Signed and there must be an approval in place between signer and
   * `delegate`.
   *
   * Unreserves any deposit previously reserved by `approve_transfer` for the approval.
   *
   * - `id`: The identifier of the asset.
   * - `delegate`: The account delegated permission to transfer asset.
   *
   * Emits `ApprovalCancelled` on success.
   *
   * Weight: `O(1)`
   **/
  | { name: 'CancelApproval'; params: { id: number; delegate: MultiAddressLike } }
  /**
   * Cancel all of some asset approved for delegated transfer by a third-party account.
   *
   * Origin must be either ForceOrigin or Signed origin with the signer being the Admin
   * account of the asset `id`.
   *
   * Unreserves any deposit previously reserved by `approve_transfer` for the approval.
   *
   * - `id`: The identifier of the asset.
   * - `delegate`: The account delegated permission to transfer asset.
   *
   * Emits `ApprovalCancelled` on success.
   *
   * Weight: `O(1)`
   **/
  | { name: 'ForceCancelApproval'; params: { id: number; owner: MultiAddressLike; delegate: MultiAddressLike } }
  /**
   * Transfer some asset balance from a previously delegated account to some third-party
   * account.
   *
   * Origin must be Signed and there must be an approval in place by the `owner` to the
   * signer.
   *
   * If the entire amount approved for transfer is transferred, then any deposit previously
   * reserved by `approve_transfer` is unreserved.
   *
   * - `id`: The identifier of the asset.
   * - `owner`: The account which previously approved for a transfer of at least `amount` and
   * from which the asset balance will be withdrawn.
   * - `destination`: The account to which the asset balance of `amount` will be transferred.
   * - `amount`: The amount of assets to transfer.
   *
   * Emits `TransferredApproved` on success.
   *
   * Weight: `O(1)`
   **/
  | {
      name: 'TransferApproved';
      params: { id: number; owner: MultiAddressLike; destination: MultiAddressLike; amount: bigint };
    }
  /**
   * Create an asset account for non-provider assets.
   *
   * A deposit will be taken from the signer account.
   *
   * - `origin`: Must be Signed; the signer account must have sufficient funds for a deposit
   * to be taken.
   * - `id`: The identifier of the asset for the account to be created.
   *
   * Emits `Touched` event when successful.
   **/
  | { name: 'Touch'; params: { id: number } }
  /**
   * Return the deposit (if any) of an asset account or a consumer reference (if any) of an
   * account.
   *
   * The origin must be Signed.
   *
   * - `id`: The identifier of the asset for which the caller would like the deposit
   * refunded.
   * - `allow_burn`: If `true` then assets may be destroyed in order to complete the refund.
   *
   * It will fail with either [`Error::ContainsHolds`] or [`Error::ContainsFreezes`] if
   * the asset account contains holds or freezes in place.
   *
   * Emits `Refunded` event when successful.
   **/
  | { name: 'Refund'; params: { id: number; allowBurn: boolean } }
  /**
   * Sets the minimum balance of an asset.
   *
   * Only works if there aren't any accounts that are holding the asset or if
   * the new value of `min_balance` is less than the old one.
   *
   * Origin must be Signed and the sender has to be the Owner of the
   * asset `id`.
   *
   * - `id`: The identifier of the asset.
   * - `min_balance`: The new value of `min_balance`.
   *
   * Emits `AssetMinBalanceChanged` event when successful.
   **/
  | { name: 'SetMinBalance'; params: { id: number; minBalance: bigint } }
  /**
   * Create an asset account for `who`.
   *
   * A deposit will be taken from the signer account.
   *
   * - `origin`: Must be Signed by `Freezer` or `Admin` of the asset `id`; the signer account
   * must have sufficient funds for a deposit to be taken.
   * - `id`: The identifier of the asset for the account to be created.
   * - `who`: The account to be created.
   *
   * Emits `Touched` event when successful.
   **/
  | { name: 'TouchOther'; params: { id: number; who: MultiAddressLike } }
  /**
   * Return the deposit (if any) of a target asset account. Useful if you are the depositor.
   *
   * The origin must be Signed and either the account owner, depositor, or asset `Admin`. In
   * order to burn a non-zero balance of the asset, the caller must be the account and should
   * use `refund`.
   *
   * - `id`: The identifier of the asset for the account holding a deposit.
   * - `who`: The account to refund.
   *
   * It will fail with either [`Error::ContainsHolds`] or [`Error::ContainsFreezes`] if
   * the asset account contains holds or freezes in place.
   *
   * Emits `Refunded` event when successful.
   **/
  | { name: 'RefundOther'; params: { id: number; who: MultiAddressLike } }
  /**
   * Disallow further unprivileged transfers of an asset `id` to and from an account `who`.
   *
   * Origin must be Signed and the sender should be the Freezer of the asset `id`.
   *
   * - `id`: The identifier of the account's asset.
   * - `who`: The account to be unblocked.
   *
   * Emits `Blocked`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'Block'; params: { id: number; who: MultiAddressLike } }
  /**
   * Transfer the entire transferable balance from the caller asset account.
   *
   * NOTE: This function only attempts to transfer _transferable_ balances. This means that
   * any held, frozen, or minimum balance (when `keep_alive` is `true`), will not be
   * transferred by this function. To ensure that this function results in a killed account,
   * you might need to prepare the account by removing any reference counters, storage
   * deposits, etc...
   *
   * The dispatch origin of this call must be Signed.
   *
   * - `id`: The identifier of the asset for the account holding a deposit.
   * - `dest`: The recipient of the transfer.
   * - `keep_alive`: A boolean to determine if the `transfer_all` operation should send all
   * of the funds the asset account has, causing the sender asset account to be killed
   * (false), or transfer everything except at least the minimum balance, which will
   * guarantee to keep the sender asset account alive (true).
   **/
  | { name: 'TransferAll'; params: { id: number; dest: MultiAddressLike; keepAlive: boolean } };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletUniquesCall =
  /**
   * Issue a new collection of non-fungible items from a public origin.
   *
   * This new collection has no items initially and its owner is the origin.
   *
   * The origin must conform to the configured `CreateOrigin` and have sufficient funds free.
   *
   * `ItemDeposit` funds of sender are reserved.
   *
   * Parameters:
   * - `collection`: The identifier of the new collection. This must not be currently in use.
   * - `admin`: The admin of this collection. The admin is the initial address of each
   * member of the collection's admin team.
   *
   * Emits `Created` event when successful.
   *
   * Weight: `O(1)`
   **/
  | { name: 'Create'; params: { collection: number; admin: MultiAddress } }
  /**
   * Issue a new collection of non-fungible items from a privileged origin.
   *
   * This new collection has no items initially.
   *
   * The origin must conform to `ForceOrigin`.
   *
   * Unlike `create`, no funds are reserved.
   *
   * - `collection`: The identifier of the new item. This must not be currently in use.
   * - `owner`: The owner of this collection of items. The owner has full superuser
   * permissions
   * over this item, but may later change and configure the permissions using
   * `transfer_ownership` and `set_team`.
   *
   * Emits `ForceCreated` event when successful.
   *
   * Weight: `O(1)`
   **/
  | { name: 'ForceCreate'; params: { collection: number; owner: MultiAddress; freeHolding: boolean } }
  /**
   * Destroy a collection of fungible items.
   *
   * The origin must conform to `ForceOrigin` or must be `Signed` and the sender must be the
   * owner of the `collection`.
   *
   * - `collection`: The identifier of the collection to be destroyed.
   * - `witness`: Information on the items minted in the collection. This must be
   * correct.
   *
   * Emits `Destroyed` event when successful.
   *
   * Weight: `O(n + m)` where:
   * - `n = witness.items`
   * - `m = witness.item_metadatas`
   * - `a = witness.attributes`
   **/
  | { name: 'Destroy'; params: { collection: number; witness: PalletUniquesDestroyWitness } }
  /**
   * Mint an item of a particular collection.
   *
   * The origin must be Signed and the sender must be the Issuer of the `collection`.
   *
   * - `collection`: The collection of the item to be minted.
   * - `item`: The item value of the item to be minted.
   * - `beneficiary`: The initial owner of the minted item.
   *
   * Emits `Issued` event when successful.
   *
   * Weight: `O(1)`
   **/
  | { name: 'Mint'; params: { collection: number; item: number; owner: MultiAddress } }
  /**
   * Destroy a single item.
   *
   * Origin must be Signed and the signing account must be either:
   * - the Admin of the `collection`;
   * - the Owner of the `item`;
   *
   * - `collection`: The collection of the item to be burned.
   * - `item`: The item of the item to be burned.
   * - `check_owner`: If `Some` then the operation will fail with `WrongOwner` unless the
   * item is owned by this value.
   *
   * Emits `Burned` with the actual amount burned.
   *
   * Weight: `O(1)`
   * Modes: `check_owner.is_some()`.
   **/
  | { name: 'Burn'; params: { collection: number; item: number; checkOwner?: MultiAddress | undefined } }
  /**
   * Move an item from the sender account to another.
   *
   * This resets the approved account of the item.
   *
   * Origin must be Signed and the signing account must be either:
   * - the Admin of the `collection`;
   * - the Owner of the `item`;
   * - the approved delegate for the `item` (in this case, the approval is reset).
   *
   * Arguments:
   * - `collection`: The collection of the item to be transferred.
   * - `item`: The item of the item to be transferred.
   * - `dest`: The account to receive ownership of the item.
   *
   * Emits `Transferred`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'Transfer'; params: { collection: number; item: number; dest: MultiAddress } }
  /**
   * Reevaluate the deposits on some items.
   *
   * Origin must be Signed and the sender should be the Owner of the `collection`.
   *
   * - `collection`: The collection to be frozen.
   * - `items`: The items of the collection whose deposits will be reevaluated.
   *
   * NOTE: This exists as a best-effort function. Any items which are unknown or
   * in the case that the owner account does not have reservable funds to pay for a
   * deposit increase are ignored. Generally the owner isn't going to call this on items
   * whose existing deposit is less than the refreshed deposit as it would only cost them,
   * so it's of little consequence.
   *
   * It will still return an error in the case that the collection is unknown of the signer
   * is not permitted to call it.
   *
   * Weight: `O(items.len())`
   **/
  | { name: 'Redeposit'; params: { collection: number; items: Array<number> } }
  /**
   * Disallow further unprivileged transfer of an item.
   *
   * Origin must be Signed and the sender should be the Freezer of the `collection`.
   *
   * - `collection`: The collection of the item to be frozen.
   * - `item`: The item of the item to be frozen.
   *
   * Emits `Frozen`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'Freeze'; params: { collection: number; item: number } }
  /**
   * Re-allow unprivileged transfer of an item.
   *
   * Origin must be Signed and the sender should be the Freezer of the `collection`.
   *
   * - `collection`: The collection of the item to be thawed.
   * - `item`: The item of the item to be thawed.
   *
   * Emits `Thawed`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'Thaw'; params: { collection: number; item: number } }
  /**
   * Disallow further unprivileged transfers for a whole collection.
   *
   * Origin must be Signed and the sender should be the Freezer of the `collection`.
   *
   * - `collection`: The collection to be frozen.
   *
   * Emits `CollectionFrozen`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'FreezeCollection'; params: { collection: number } }
  /**
   * Re-allow unprivileged transfers for a whole collection.
   *
   * Origin must be Signed and the sender should be the Admin of the `collection`.
   *
   * - `collection`: The collection to be thawed.
   *
   * Emits `CollectionThawed`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'ThawCollection'; params: { collection: number } }
  /**
   * Change the Owner of a collection.
   *
   * Origin must be Signed and the sender should be the Owner of the `collection`.
   *
   * - `collection`: The collection whose owner should be changed.
   * - `owner`: The new Owner of this collection. They must have called
   * `set_accept_ownership` with `collection` in order for this operation to succeed.
   *
   * Emits `OwnerChanged`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'TransferOwnership'; params: { collection: number; newOwner: MultiAddress } }
  /**
   * Change the Issuer, Admin and Freezer of a collection.
   *
   * Origin must be Signed and the sender should be the Owner of the `collection`.
   *
   * - `collection`: The collection whose team should be changed.
   * - `issuer`: The new Issuer of this collection.
   * - `admin`: The new Admin of this collection.
   * - `freezer`: The new Freezer of this collection.
   *
   * Emits `TeamChanged`.
   *
   * Weight: `O(1)`
   **/
  | {
      name: 'SetTeam';
      params: { collection: number; issuer: MultiAddress; admin: MultiAddress; freezer: MultiAddress };
    }
  /**
   * Approve an item to be transferred by a delegated third-party account.
   *
   * The origin must conform to `ForceOrigin` or must be `Signed` and the sender must be
   * either the owner of the `item` or the admin of the collection.
   *
   * - `collection`: The collection of the item to be approved for delegated transfer.
   * - `item`: The item of the item to be approved for delegated transfer.
   * - `delegate`: The account to delegate permission to transfer the item.
   *
   * Important NOTE: The `approved` account gets reset after each transfer.
   *
   * Emits `ApprovedTransfer` on success.
   *
   * Weight: `O(1)`
   **/
  | { name: 'ApproveTransfer'; params: { collection: number; item: number; delegate: MultiAddress } }
  /**
   * Cancel the prior approval for the transfer of an item by a delegate.
   *
   * Origin must be either:
   * - the `Force` origin;
   * - `Signed` with the signer being the Admin of the `collection`;
   * - `Signed` with the signer being the Owner of the `item`;
   *
   * Arguments:
   * - `collection`: The collection of the item of whose approval will be cancelled.
   * - `item`: The item of the item of whose approval will be cancelled.
   * - `maybe_check_delegate`: If `Some` will ensure that the given account is the one to
   * which permission of transfer is delegated.
   *
   * Emits `ApprovalCancelled` on success.
   *
   * Weight: `O(1)`
   **/
  | {
      name: 'CancelApproval';
      params: { collection: number; item: number; maybeCheckDelegate?: MultiAddress | undefined };
    }
  /**
   * Alter the attributes of a given item.
   *
   * Origin must be `ForceOrigin`.
   *
   * - `collection`: The identifier of the item.
   * - `owner`: The new Owner of this item.
   * - `issuer`: The new Issuer of this item.
   * - `admin`: The new Admin of this item.
   * - `freezer`: The new Freezer of this item.
   * - `free_holding`: Whether a deposit is taken for holding an item of this collection.
   * - `is_frozen`: Whether this collection is frozen except for permissioned/admin
   * instructions.
   *
   * Emits `ItemStatusChanged` with the identity of the item.
   *
   * Weight: `O(1)`
   **/
  | {
      name: 'ForceItemStatus';
      params: {
        collection: number;
        owner: MultiAddress;
        issuer: MultiAddress;
        admin: MultiAddress;
        freezer: MultiAddress;
        freeHolding: boolean;
        isFrozen: boolean;
      };
    }
  /**
   * Set an attribute for a collection or item.
   *
   * Origin must be either `ForceOrigin` or Signed and the sender should be the Owner of the
   * `collection`.
   *
   * If the origin is Signed, then funds of signer are reserved according to the formula:
   * `MetadataDepositBase + DepositPerByte * (key.len + value.len)` taking into
   * account any already reserved funds.
   *
   * - `collection`: The identifier of the collection whose item's metadata to set.
   * - `maybe_item`: The identifier of the item whose metadata to set.
   * - `key`: The key of the attribute.
   * - `value`: The value to which to set the attribute.
   *
   * Emits `AttributeSet`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'SetAttribute'; params: { collection: number; maybeItem?: number | undefined; key: Bytes; value: Bytes } }
  /**
   * Clear an attribute for a collection or item.
   *
   * Origin must be either `ForceOrigin` or Signed and the sender should be the Owner of the
   * `collection`.
   *
   * Any deposit is freed for the collection's owner.
   *
   * - `collection`: The identifier of the collection whose item's metadata to clear.
   * - `maybe_item`: The identifier of the item whose metadata to clear.
   * - `key`: The key of the attribute.
   *
   * Emits `AttributeCleared`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'ClearAttribute'; params: { collection: number; maybeItem?: number | undefined; key: Bytes } }
  /**
   * Set the metadata for an item.
   *
   * Origin must be either `ForceOrigin` or Signed and the sender should be the Owner of the
   * `collection`.
   *
   * If the origin is Signed, then funds of signer are reserved according to the formula:
   * `MetadataDepositBase + DepositPerByte * data.len` taking into
   * account any already reserved funds.
   *
   * - `collection`: The identifier of the collection whose item's metadata to set.
   * - `item`: The identifier of the item whose metadata to set.
   * - `data`: The general information of this item. Limited in length by `StringLimit`.
   * - `is_frozen`: Whether the metadata should be frozen against further changes.
   *
   * Emits `MetadataSet`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'SetMetadata'; params: { collection: number; item: number; data: Bytes; isFrozen: boolean } }
  /**
   * Clear the metadata for an item.
   *
   * Origin must be either `ForceOrigin` or Signed and the sender should be the Owner of the
   * `item`.
   *
   * Any deposit is freed for the collection's owner.
   *
   * - `collection`: The identifier of the collection whose item's metadata to clear.
   * - `item`: The identifier of the item whose metadata to clear.
   *
   * Emits `MetadataCleared`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'ClearMetadata'; params: { collection: number; item: number } }
  /**
   * Set the metadata for a collection.
   *
   * Origin must be either `ForceOrigin` or `Signed` and the sender should be the Owner of
   * the `collection`.
   *
   * If the origin is `Signed`, then funds of signer are reserved according to the formula:
   * `MetadataDepositBase + DepositPerByte * data.len` taking into
   * account any already reserved funds.
   *
   * - `collection`: The identifier of the item whose metadata to update.
   * - `data`: The general information of this item. Limited in length by `StringLimit`.
   * - `is_frozen`: Whether the metadata should be frozen against further changes.
   *
   * Emits `CollectionMetadataSet`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'SetCollectionMetadata'; params: { collection: number; data: Bytes; isFrozen: boolean } }
  /**
   * Clear the metadata for a collection.
   *
   * Origin must be either `ForceOrigin` or `Signed` and the sender should be the Owner of
   * the `collection`.
   *
   * Any deposit is freed for the collection's owner.
   *
   * - `collection`: The identifier of the collection whose metadata to clear.
   *
   * Emits `CollectionMetadataCleared`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'ClearCollectionMetadata'; params: { collection: number } }
  /**
   * Set (or reset) the acceptance of ownership for a particular account.
   *
   * Origin must be `Signed` and if `maybe_collection` is `Some`, then the signer must have a
   * provider reference.
   *
   * - `maybe_collection`: The identifier of the collection whose ownership the signer is
   * willing to accept, or if `None`, an indication that the signer is willing to accept no
   * ownership transferal.
   *
   * Emits `OwnershipAcceptanceChanged`.
   **/
  | { name: 'SetAcceptOwnership'; params: { maybeCollection?: number | undefined } }
  /**
   * Set the maximum amount of items a collection could have.
   *
   * Origin must be either `ForceOrigin` or `Signed` and the sender should be the Owner of
   * the `collection`.
   *
   * Note: This function can only succeed once per collection.
   *
   * - `collection`: The identifier of the collection to change.
   * - `max_supply`: The maximum amount of items a collection could have.
   *
   * Emits `CollectionMaxSupplySet` event when successful.
   **/
  | { name: 'SetCollectionMaxSupply'; params: { collection: number; maxSupply: number } }
  /**
   * Set (or reset) the price for an item.
   *
   * Origin must be Signed and must be the owner of the asset `item`.
   *
   * - `collection`: The collection of the item.
   * - `item`: The item to set the price for.
   * - `price`: The price for the item. Pass `None`, to reset the price.
   * - `buyer`: Restricts the buy operation to a specific account.
   *
   * Emits `ItemPriceSet` on success if the price is not `None`.
   * Emits `ItemPriceRemoved` on success if the price is `None`.
   **/
  | {
      name: 'SetPrice';
      params: {
        collection: number;
        item: number;
        price?: bigint | undefined;
        whitelistedBuyer?: MultiAddress | undefined;
      };
    }
  /**
   * Allows to buy an item if it's up for sale.
   *
   * Origin must be Signed and must not be the owner of the `item`.
   *
   * - `collection`: The collection of the item.
   * - `item`: The item the sender wants to buy.
   * - `bid_price`: The price the sender is willing to pay.
   *
   * Emits `ItemBought` on success.
   **/
  | { name: 'BuyItem'; params: { collection: number; item: number; bidPrice: bigint } };

export type PalletUniquesCallLike =
  /**
   * Issue a new collection of non-fungible items from a public origin.
   *
   * This new collection has no items initially and its owner is the origin.
   *
   * The origin must conform to the configured `CreateOrigin` and have sufficient funds free.
   *
   * `ItemDeposit` funds of sender are reserved.
   *
   * Parameters:
   * - `collection`: The identifier of the new collection. This must not be currently in use.
   * - `admin`: The admin of this collection. The admin is the initial address of each
   * member of the collection's admin team.
   *
   * Emits `Created` event when successful.
   *
   * Weight: `O(1)`
   **/
  | { name: 'Create'; params: { collection: number; admin: MultiAddressLike } }
  /**
   * Issue a new collection of non-fungible items from a privileged origin.
   *
   * This new collection has no items initially.
   *
   * The origin must conform to `ForceOrigin`.
   *
   * Unlike `create`, no funds are reserved.
   *
   * - `collection`: The identifier of the new item. This must not be currently in use.
   * - `owner`: The owner of this collection of items. The owner has full superuser
   * permissions
   * over this item, but may later change and configure the permissions using
   * `transfer_ownership` and `set_team`.
   *
   * Emits `ForceCreated` event when successful.
   *
   * Weight: `O(1)`
   **/
  | { name: 'ForceCreate'; params: { collection: number; owner: MultiAddressLike; freeHolding: boolean } }
  /**
   * Destroy a collection of fungible items.
   *
   * The origin must conform to `ForceOrigin` or must be `Signed` and the sender must be the
   * owner of the `collection`.
   *
   * - `collection`: The identifier of the collection to be destroyed.
   * - `witness`: Information on the items minted in the collection. This must be
   * correct.
   *
   * Emits `Destroyed` event when successful.
   *
   * Weight: `O(n + m)` where:
   * - `n = witness.items`
   * - `m = witness.item_metadatas`
   * - `a = witness.attributes`
   **/
  | { name: 'Destroy'; params: { collection: number; witness: PalletUniquesDestroyWitness } }
  /**
   * Mint an item of a particular collection.
   *
   * The origin must be Signed and the sender must be the Issuer of the `collection`.
   *
   * - `collection`: The collection of the item to be minted.
   * - `item`: The item value of the item to be minted.
   * - `beneficiary`: The initial owner of the minted item.
   *
   * Emits `Issued` event when successful.
   *
   * Weight: `O(1)`
   **/
  | { name: 'Mint'; params: { collection: number; item: number; owner: MultiAddressLike } }
  /**
   * Destroy a single item.
   *
   * Origin must be Signed and the signing account must be either:
   * - the Admin of the `collection`;
   * - the Owner of the `item`;
   *
   * - `collection`: The collection of the item to be burned.
   * - `item`: The item of the item to be burned.
   * - `check_owner`: If `Some` then the operation will fail with `WrongOwner` unless the
   * item is owned by this value.
   *
   * Emits `Burned` with the actual amount burned.
   *
   * Weight: `O(1)`
   * Modes: `check_owner.is_some()`.
   **/
  | { name: 'Burn'; params: { collection: number; item: number; checkOwner?: MultiAddressLike | undefined } }
  /**
   * Move an item from the sender account to another.
   *
   * This resets the approved account of the item.
   *
   * Origin must be Signed and the signing account must be either:
   * - the Admin of the `collection`;
   * - the Owner of the `item`;
   * - the approved delegate for the `item` (in this case, the approval is reset).
   *
   * Arguments:
   * - `collection`: The collection of the item to be transferred.
   * - `item`: The item of the item to be transferred.
   * - `dest`: The account to receive ownership of the item.
   *
   * Emits `Transferred`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'Transfer'; params: { collection: number; item: number; dest: MultiAddressLike } }
  /**
   * Reevaluate the deposits on some items.
   *
   * Origin must be Signed and the sender should be the Owner of the `collection`.
   *
   * - `collection`: The collection to be frozen.
   * - `items`: The items of the collection whose deposits will be reevaluated.
   *
   * NOTE: This exists as a best-effort function. Any items which are unknown or
   * in the case that the owner account does not have reservable funds to pay for a
   * deposit increase are ignored. Generally the owner isn't going to call this on items
   * whose existing deposit is less than the refreshed deposit as it would only cost them,
   * so it's of little consequence.
   *
   * It will still return an error in the case that the collection is unknown of the signer
   * is not permitted to call it.
   *
   * Weight: `O(items.len())`
   **/
  | { name: 'Redeposit'; params: { collection: number; items: Array<number> } }
  /**
   * Disallow further unprivileged transfer of an item.
   *
   * Origin must be Signed and the sender should be the Freezer of the `collection`.
   *
   * - `collection`: The collection of the item to be frozen.
   * - `item`: The item of the item to be frozen.
   *
   * Emits `Frozen`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'Freeze'; params: { collection: number; item: number } }
  /**
   * Re-allow unprivileged transfer of an item.
   *
   * Origin must be Signed and the sender should be the Freezer of the `collection`.
   *
   * - `collection`: The collection of the item to be thawed.
   * - `item`: The item of the item to be thawed.
   *
   * Emits `Thawed`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'Thaw'; params: { collection: number; item: number } }
  /**
   * Disallow further unprivileged transfers for a whole collection.
   *
   * Origin must be Signed and the sender should be the Freezer of the `collection`.
   *
   * - `collection`: The collection to be frozen.
   *
   * Emits `CollectionFrozen`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'FreezeCollection'; params: { collection: number } }
  /**
   * Re-allow unprivileged transfers for a whole collection.
   *
   * Origin must be Signed and the sender should be the Admin of the `collection`.
   *
   * - `collection`: The collection to be thawed.
   *
   * Emits `CollectionThawed`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'ThawCollection'; params: { collection: number } }
  /**
   * Change the Owner of a collection.
   *
   * Origin must be Signed and the sender should be the Owner of the `collection`.
   *
   * - `collection`: The collection whose owner should be changed.
   * - `owner`: The new Owner of this collection. They must have called
   * `set_accept_ownership` with `collection` in order for this operation to succeed.
   *
   * Emits `OwnerChanged`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'TransferOwnership'; params: { collection: number; newOwner: MultiAddressLike } }
  /**
   * Change the Issuer, Admin and Freezer of a collection.
   *
   * Origin must be Signed and the sender should be the Owner of the `collection`.
   *
   * - `collection`: The collection whose team should be changed.
   * - `issuer`: The new Issuer of this collection.
   * - `admin`: The new Admin of this collection.
   * - `freezer`: The new Freezer of this collection.
   *
   * Emits `TeamChanged`.
   *
   * Weight: `O(1)`
   **/
  | {
      name: 'SetTeam';
      params: { collection: number; issuer: MultiAddressLike; admin: MultiAddressLike; freezer: MultiAddressLike };
    }
  /**
   * Approve an item to be transferred by a delegated third-party account.
   *
   * The origin must conform to `ForceOrigin` or must be `Signed` and the sender must be
   * either the owner of the `item` or the admin of the collection.
   *
   * - `collection`: The collection of the item to be approved for delegated transfer.
   * - `item`: The item of the item to be approved for delegated transfer.
   * - `delegate`: The account to delegate permission to transfer the item.
   *
   * Important NOTE: The `approved` account gets reset after each transfer.
   *
   * Emits `ApprovedTransfer` on success.
   *
   * Weight: `O(1)`
   **/
  | { name: 'ApproveTransfer'; params: { collection: number; item: number; delegate: MultiAddressLike } }
  /**
   * Cancel the prior approval for the transfer of an item by a delegate.
   *
   * Origin must be either:
   * - the `Force` origin;
   * - `Signed` with the signer being the Admin of the `collection`;
   * - `Signed` with the signer being the Owner of the `item`;
   *
   * Arguments:
   * - `collection`: The collection of the item of whose approval will be cancelled.
   * - `item`: The item of the item of whose approval will be cancelled.
   * - `maybe_check_delegate`: If `Some` will ensure that the given account is the one to
   * which permission of transfer is delegated.
   *
   * Emits `ApprovalCancelled` on success.
   *
   * Weight: `O(1)`
   **/
  | {
      name: 'CancelApproval';
      params: { collection: number; item: number; maybeCheckDelegate?: MultiAddressLike | undefined };
    }
  /**
   * Alter the attributes of a given item.
   *
   * Origin must be `ForceOrigin`.
   *
   * - `collection`: The identifier of the item.
   * - `owner`: The new Owner of this item.
   * - `issuer`: The new Issuer of this item.
   * - `admin`: The new Admin of this item.
   * - `freezer`: The new Freezer of this item.
   * - `free_holding`: Whether a deposit is taken for holding an item of this collection.
   * - `is_frozen`: Whether this collection is frozen except for permissioned/admin
   * instructions.
   *
   * Emits `ItemStatusChanged` with the identity of the item.
   *
   * Weight: `O(1)`
   **/
  | {
      name: 'ForceItemStatus';
      params: {
        collection: number;
        owner: MultiAddressLike;
        issuer: MultiAddressLike;
        admin: MultiAddressLike;
        freezer: MultiAddressLike;
        freeHolding: boolean;
        isFrozen: boolean;
      };
    }
  /**
   * Set an attribute for a collection or item.
   *
   * Origin must be either `ForceOrigin` or Signed and the sender should be the Owner of the
   * `collection`.
   *
   * If the origin is Signed, then funds of signer are reserved according to the formula:
   * `MetadataDepositBase + DepositPerByte * (key.len + value.len)` taking into
   * account any already reserved funds.
   *
   * - `collection`: The identifier of the collection whose item's metadata to set.
   * - `maybe_item`: The identifier of the item whose metadata to set.
   * - `key`: The key of the attribute.
   * - `value`: The value to which to set the attribute.
   *
   * Emits `AttributeSet`.
   *
   * Weight: `O(1)`
   **/
  | {
      name: 'SetAttribute';
      params: { collection: number; maybeItem?: number | undefined; key: BytesLike; value: BytesLike };
    }
  /**
   * Clear an attribute for a collection or item.
   *
   * Origin must be either `ForceOrigin` or Signed and the sender should be the Owner of the
   * `collection`.
   *
   * Any deposit is freed for the collection's owner.
   *
   * - `collection`: The identifier of the collection whose item's metadata to clear.
   * - `maybe_item`: The identifier of the item whose metadata to clear.
   * - `key`: The key of the attribute.
   *
   * Emits `AttributeCleared`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'ClearAttribute'; params: { collection: number; maybeItem?: number | undefined; key: BytesLike } }
  /**
   * Set the metadata for an item.
   *
   * Origin must be either `ForceOrigin` or Signed and the sender should be the Owner of the
   * `collection`.
   *
   * If the origin is Signed, then funds of signer are reserved according to the formula:
   * `MetadataDepositBase + DepositPerByte * data.len` taking into
   * account any already reserved funds.
   *
   * - `collection`: The identifier of the collection whose item's metadata to set.
   * - `item`: The identifier of the item whose metadata to set.
   * - `data`: The general information of this item. Limited in length by `StringLimit`.
   * - `is_frozen`: Whether the metadata should be frozen against further changes.
   *
   * Emits `MetadataSet`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'SetMetadata'; params: { collection: number; item: number; data: BytesLike; isFrozen: boolean } }
  /**
   * Clear the metadata for an item.
   *
   * Origin must be either `ForceOrigin` or Signed and the sender should be the Owner of the
   * `item`.
   *
   * Any deposit is freed for the collection's owner.
   *
   * - `collection`: The identifier of the collection whose item's metadata to clear.
   * - `item`: The identifier of the item whose metadata to clear.
   *
   * Emits `MetadataCleared`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'ClearMetadata'; params: { collection: number; item: number } }
  /**
   * Set the metadata for a collection.
   *
   * Origin must be either `ForceOrigin` or `Signed` and the sender should be the Owner of
   * the `collection`.
   *
   * If the origin is `Signed`, then funds of signer are reserved according to the formula:
   * `MetadataDepositBase + DepositPerByte * data.len` taking into
   * account any already reserved funds.
   *
   * - `collection`: The identifier of the item whose metadata to update.
   * - `data`: The general information of this item. Limited in length by `StringLimit`.
   * - `is_frozen`: Whether the metadata should be frozen against further changes.
   *
   * Emits `CollectionMetadataSet`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'SetCollectionMetadata'; params: { collection: number; data: BytesLike; isFrozen: boolean } }
  /**
   * Clear the metadata for a collection.
   *
   * Origin must be either `ForceOrigin` or `Signed` and the sender should be the Owner of
   * the `collection`.
   *
   * Any deposit is freed for the collection's owner.
   *
   * - `collection`: The identifier of the collection whose metadata to clear.
   *
   * Emits `CollectionMetadataCleared`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'ClearCollectionMetadata'; params: { collection: number } }
  /**
   * Set (or reset) the acceptance of ownership for a particular account.
   *
   * Origin must be `Signed` and if `maybe_collection` is `Some`, then the signer must have a
   * provider reference.
   *
   * - `maybe_collection`: The identifier of the collection whose ownership the signer is
   * willing to accept, or if `None`, an indication that the signer is willing to accept no
   * ownership transferal.
   *
   * Emits `OwnershipAcceptanceChanged`.
   **/
  | { name: 'SetAcceptOwnership'; params: { maybeCollection?: number | undefined } }
  /**
   * Set the maximum amount of items a collection could have.
   *
   * Origin must be either `ForceOrigin` or `Signed` and the sender should be the Owner of
   * the `collection`.
   *
   * Note: This function can only succeed once per collection.
   *
   * - `collection`: The identifier of the collection to change.
   * - `max_supply`: The maximum amount of items a collection could have.
   *
   * Emits `CollectionMaxSupplySet` event when successful.
   **/
  | { name: 'SetCollectionMaxSupply'; params: { collection: number; maxSupply: number } }
  /**
   * Set (or reset) the price for an item.
   *
   * Origin must be Signed and must be the owner of the asset `item`.
   *
   * - `collection`: The collection of the item.
   * - `item`: The item to set the price for.
   * - `price`: The price for the item. Pass `None`, to reset the price.
   * - `buyer`: Restricts the buy operation to a specific account.
   *
   * Emits `ItemPriceSet` on success if the price is not `None`.
   * Emits `ItemPriceRemoved` on success if the price is `None`.
   **/
  | {
      name: 'SetPrice';
      params: {
        collection: number;
        item: number;
        price?: bigint | undefined;
        whitelistedBuyer?: MultiAddressLike | undefined;
      };
    }
  /**
   * Allows to buy an item if it's up for sale.
   *
   * Origin must be Signed and must not be the owner of the `item`.
   *
   * - `collection`: The collection of the item.
   * - `item`: The item the sender wants to buy.
   * - `bid_price`: The price the sender is willing to pay.
   *
   * Emits `ItemBought` on success.
   **/
  | { name: 'BuyItem'; params: { collection: number; item: number; bidPrice: bigint } };

export type PalletUniquesDestroyWitness = { items: number; itemMetadatas: number; attributes: number };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletNftsCall =
  /**
   * Issue a new collection of non-fungible items from a public origin.
   *
   * This new collection has no items initially and its owner is the origin.
   *
   * The origin must be Signed and the sender must have sufficient funds free.
   *
   * `CollectionDeposit` funds of sender are reserved.
   *
   * Parameters:
   * - `admin`: The admin of this collection. The admin is the initial address of each
   * member of the collection's admin team.
   *
   * Emits `Created` event when successful.
   *
   * Weight: `O(1)`
   **/
  | { name: 'Create'; params: { admin: MultiAddress; config: PalletNftsCollectionConfig } }
  /**
   * Issue a new collection of non-fungible items from a privileged origin.
   *
   * This new collection has no items initially.
   *
   * The origin must conform to `ForceOrigin`.
   *
   * Unlike `create`, no funds are reserved.
   *
   * - `owner`: The owner of this collection of items. The owner has full superuser
   * permissions over this item, but may later change and configure the permissions using
   * `transfer_ownership` and `set_team`.
   *
   * Emits `ForceCreated` event when successful.
   *
   * Weight: `O(1)`
   **/
  | { name: 'ForceCreate'; params: { owner: MultiAddress; config: PalletNftsCollectionConfig } }
  /**
   * Destroy a collection of fungible items.
   *
   * The origin must conform to `ForceOrigin` or must be `Signed` and the sender must be the
   * owner of the `collection`.
   *
   * NOTE: The collection must have 0 items to be destroyed.
   *
   * - `collection`: The identifier of the collection to be destroyed.
   * - `witness`: Information on the items minted in the collection. This must be
   * correct.
   *
   * Emits `Destroyed` event when successful.
   *
   * Weight: `O(m + c + a)` where:
   * - `m = witness.item_metadatas`
   * - `c = witness.item_configs`
   * - `a = witness.attributes`
   **/
  | { name: 'Destroy'; params: { collection: number; witness: PalletNftsDestroyWitness } }
  /**
   * Mint an item of a particular collection.
   *
   * The origin must be Signed and the sender must comply with the `mint_settings` rules.
   *
   * - `collection`: The collection of the item to be minted.
   * - `item`: An identifier of the new item.
   * - `mint_to`: Account into which the item will be minted.
   * - `witness_data`: When the mint type is `HolderOf(collection_id)`, then the owned
   * item_id from that collection needs to be provided within the witness data object. If
   * the mint price is set, then it should be additionally confirmed in the `witness_data`.
   *
   * Note: the deposit will be taken from the `origin` and not the `owner` of the `item`.
   *
   * Emits `Issued` event when successful.
   *
   * Weight: `O(1)`
   **/
  | {
      name: 'Mint';
      params: {
        collection: number;
        item: number;
        mintTo: MultiAddress;
        witnessData?: PalletNftsMintWitness | undefined;
      };
    }
  /**
   * Mint an item of a particular collection from a privileged origin.
   *
   * The origin must conform to `ForceOrigin` or must be `Signed` and the sender must be the
   * Issuer of the `collection`.
   *
   * - `collection`: The collection of the item to be minted.
   * - `item`: An identifier of the new item.
   * - `mint_to`: Account into which the item will be minted.
   * - `item_config`: A config of the new item.
   *
   * Emits `Issued` event when successful.
   *
   * Weight: `O(1)`
   **/
  | {
      name: 'ForceMint';
      params: { collection: number; item: number; mintTo: MultiAddress; itemConfig: PalletNftsItemConfig };
    }
  /**
   * Destroy a single item.
   *
   * The origin must conform to `ForceOrigin` or must be Signed and the signing account must
   * be the owner of the `item`.
   *
   * - `collection`: The collection of the item to be burned.
   * - `item`: The item to be burned.
   *
   * Emits `Burned`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'Burn'; params: { collection: number; item: number } }
  /**
   * Move an item from the sender account to another.
   *
   * Origin must be Signed and the signing account must be either:
   * - the Owner of the `item`;
   * - the approved delegate for the `item` (in this case, the approval is reset).
   *
   * Arguments:
   * - `collection`: The collection of the item to be transferred.
   * - `item`: The item to be transferred.
   * - `dest`: The account to receive ownership of the item.
   *
   * Emits `Transferred`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'Transfer'; params: { collection: number; item: number; dest: MultiAddress } }
  /**
   * Re-evaluate the deposits on some items.
   *
   * Origin must be Signed and the sender should be the Owner of the `collection`.
   *
   * - `collection`: The collection of the items to be reevaluated.
   * - `items`: The items of the collection whose deposits will be reevaluated.
   *
   * NOTE: This exists as a best-effort function. Any items which are unknown or
   * in the case that the owner account does not have reservable funds to pay for a
   * deposit increase are ignored. Generally the owner isn't going to call this on items
   * whose existing deposit is less than the refreshed deposit as it would only cost them,
   * so it's of little consequence.
   *
   * It will still return an error in the case that the collection is unknown or the signer
   * is not permitted to call it.
   *
   * Weight: `O(items.len())`
   **/
  | { name: 'Redeposit'; params: { collection: number; items: Array<number> } }
  /**
   * Disallow further unprivileged transfer of an item.
   *
   * Origin must be Signed and the sender should be the Freezer of the `collection`.
   *
   * - `collection`: The collection of the item to be changed.
   * - `item`: The item to become non-transferable.
   *
   * Emits `ItemTransferLocked`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'LockItemTransfer'; params: { collection: number; item: number } }
  /**
   * Re-allow unprivileged transfer of an item.
   *
   * Origin must be Signed and the sender should be the Freezer of the `collection`.
   *
   * - `collection`: The collection of the item to be changed.
   * - `item`: The item to become transferable.
   *
   * Emits `ItemTransferUnlocked`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'UnlockItemTransfer'; params: { collection: number; item: number } }
  /**
   * Disallows specified settings for the whole collection.
   *
   * Origin must be Signed and the sender should be the Owner of the `collection`.
   *
   * - `collection`: The collection to be locked.
   * - `lock_settings`: The settings to be locked.
   *
   * Note: it's possible to only lock(set) the setting, but not to unset it.
   *
   * Emits `CollectionLocked`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'LockCollection'; params: { collection: number; lockSettings: PalletNftsBitFlags } }
  /**
   * Change the Owner of a collection.
   *
   * Origin must be Signed and the sender should be the Owner of the `collection`.
   *
   * - `collection`: The collection whose owner should be changed.
   * - `owner`: The new Owner of this collection. They must have called
   * `set_accept_ownership` with `collection` in order for this operation to succeed.
   *
   * Emits `OwnerChanged`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'TransferOwnership'; params: { collection: number; newOwner: MultiAddress } }
  /**
   * Change the Issuer, Admin and Freezer of a collection.
   *
   * Origin must be either `ForceOrigin` or Signed and the sender should be the Owner of the
   * `collection`.
   *
   * Note: by setting the role to `None` only the `ForceOrigin` will be able to change it
   * after to `Some(account)`.
   *
   * - `collection`: The collection whose team should be changed.
   * - `issuer`: The new Issuer of this collection.
   * - `admin`: The new Admin of this collection.
   * - `freezer`: The new Freezer of this collection.
   *
   * Emits `TeamChanged`.
   *
   * Weight: `O(1)`
   **/
  | {
      name: 'SetTeam';
      params: {
        collection: number;
        issuer?: MultiAddress | undefined;
        admin?: MultiAddress | undefined;
        freezer?: MultiAddress | undefined;
      };
    }
  /**
   * Change the Owner of a collection.
   *
   * Origin must be `ForceOrigin`.
   *
   * - `collection`: The identifier of the collection.
   * - `owner`: The new Owner of this collection.
   *
   * Emits `OwnerChanged`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'ForceCollectionOwner'; params: { collection: number; owner: MultiAddress } }
  /**
   * Change the config of a collection.
   *
   * Origin must be `ForceOrigin`.
   *
   * - `collection`: The identifier of the collection.
   * - `config`: The new config of this collection.
   *
   * Emits `CollectionConfigChanged`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'ForceCollectionConfig'; params: { collection: number; config: PalletNftsCollectionConfig } }
  /**
   * Approve an item to be transferred by a delegated third-party account.
   *
   * Origin must be either `ForceOrigin` or Signed and the sender should be the Owner of the
   * `item`.
   *
   * - `collection`: The collection of the item to be approved for delegated transfer.
   * - `item`: The item to be approved for delegated transfer.
   * - `delegate`: The account to delegate permission to transfer the item.
   * - `maybe_deadline`: Optional deadline for the approval. Specified by providing the
   * number of blocks after which the approval will expire
   *
   * Emits `TransferApproved` on success.
   *
   * Weight: `O(1)`
   **/
  | {
      name: 'ApproveTransfer';
      params: { collection: number; item: number; delegate: MultiAddress; maybeDeadline?: number | undefined };
    }
  /**
   * Cancel one of the transfer approvals for a specific item.
   *
   * Origin must be either:
   * - the `Force` origin;
   * - `Signed` with the signer being the Owner of the `item`;
   *
   * Arguments:
   * - `collection`: The collection of the item of whose approval will be cancelled.
   * - `item`: The item of the collection of whose approval will be cancelled.
   * - `delegate`: The account that is going to loose their approval.
   *
   * Emits `ApprovalCancelled` on success.
   *
   * Weight: `O(1)`
   **/
  | { name: 'CancelApproval'; params: { collection: number; item: number; delegate: MultiAddress } }
  /**
   * Cancel all the approvals of a specific item.
   *
   * Origin must be either:
   * - the `Force` origin;
   * - `Signed` with the signer being the Owner of the `item`;
   *
   * Arguments:
   * - `collection`: The collection of the item of whose approvals will be cleared.
   * - `item`: The item of the collection of whose approvals will be cleared.
   *
   * Emits `AllApprovalsCancelled` on success.
   *
   * Weight: `O(1)`
   **/
  | { name: 'ClearAllTransferApprovals'; params: { collection: number; item: number } }
  /**
   * Disallows changing the metadata or attributes of the item.
   *
   * Origin must be either `ForceOrigin` or Signed and the sender should be the Admin
   * of the `collection`.
   *
   * - `collection`: The collection if the `item`.
   * - `item`: An item to be locked.
   * - `lock_metadata`: Specifies whether the metadata should be locked.
   * - `lock_attributes`: Specifies whether the attributes in the `CollectionOwner` namespace
   * should be locked.
   *
   * Note: `lock_attributes` affects the attributes in the `CollectionOwner` namespace only.
   * When the metadata or attributes are locked, it won't be possible the unlock them.
   *
   * Emits `ItemPropertiesLocked`.
   *
   * Weight: `O(1)`
   **/
  | {
      name: 'LockItemProperties';
      params: { collection: number; item: number; lockMetadata: boolean; lockAttributes: boolean };
    }
  /**
   * Set an attribute for a collection or item.
   *
   * Origin must be Signed and must conform to the namespace ruleset:
   * - `CollectionOwner` namespace could be modified by the `collection` Admin only;
   * - `ItemOwner` namespace could be modified by the `maybe_item` owner only. `maybe_item`
   * should be set in that case;
   * - `Account(AccountId)` namespace could be modified only when the `origin` was given a
   * permission to do so;
   *
   * The funds of `origin` are reserved according to the formula:
   * `AttributeDepositBase + DepositPerByte * (key.len + value.len)` taking into
   * account any already reserved funds.
   *
   * - `collection`: The identifier of the collection whose item's metadata to set.
   * - `maybe_item`: The identifier of the item whose metadata to set.
   * - `namespace`: Attribute's namespace.
   * - `key`: The key of the attribute.
   * - `value`: The value to which to set the attribute.
   *
   * Emits `AttributeSet`.
   *
   * Weight: `O(1)`
   **/
  | {
      name: 'SetAttribute';
      params: {
        collection: number;
        maybeItem?: number | undefined;
        namespace: PalletNftsAttributeNamespace;
        key: Bytes;
        value: Bytes;
      };
    }
  /**
   * Force-set an attribute for a collection or item.
   *
   * Origin must be `ForceOrigin`.
   *
   * If the attribute already exists and it was set by another account, the deposit
   * will be returned to the previous owner.
   *
   * - `set_as`: An optional owner of the attribute.
   * - `collection`: The identifier of the collection whose item's metadata to set.
   * - `maybe_item`: The identifier of the item whose metadata to set.
   * - `namespace`: Attribute's namespace.
   * - `key`: The key of the attribute.
   * - `value`: The value to which to set the attribute.
   *
   * Emits `AttributeSet`.
   *
   * Weight: `O(1)`
   **/
  | {
      name: 'ForceSetAttribute';
      params: {
        setAs?: AccountId32 | undefined;
        collection: number;
        maybeItem?: number | undefined;
        namespace: PalletNftsAttributeNamespace;
        key: Bytes;
        value: Bytes;
      };
    }
  /**
   * Clear an attribute for a collection or item.
   *
   * Origin must be either `ForceOrigin` or Signed and the sender should be the Owner of the
   * attribute.
   *
   * Any deposit is freed for the collection's owner.
   *
   * - `collection`: The identifier of the collection whose item's metadata to clear.
   * - `maybe_item`: The identifier of the item whose metadata to clear.
   * - `namespace`: Attribute's namespace.
   * - `key`: The key of the attribute.
   *
   * Emits `AttributeCleared`.
   *
   * Weight: `O(1)`
   **/
  | {
      name: 'ClearAttribute';
      params: {
        collection: number;
        maybeItem?: number | undefined;
        namespace: PalletNftsAttributeNamespace;
        key: Bytes;
      };
    }
  /**
   * Approve item's attributes to be changed by a delegated third-party account.
   *
   * Origin must be Signed and must be an owner of the `item`.
   *
   * - `collection`: A collection of the item.
   * - `item`: The item that holds attributes.
   * - `delegate`: The account to delegate permission to change attributes of the item.
   *
   * Emits `ItemAttributesApprovalAdded` on success.
   **/
  | { name: 'ApproveItemAttributes'; params: { collection: number; item: number; delegate: MultiAddress } }
  /**
   * Cancel the previously provided approval to change item's attributes.
   * All the previously set attributes by the `delegate` will be removed.
   *
   * Origin must be Signed and must be an owner of the `item`.
   *
   * - `collection`: Collection that the item is contained within.
   * - `item`: The item that holds attributes.
   * - `delegate`: The previously approved account to remove.
   *
   * Emits `ItemAttributesApprovalRemoved` on success.
   **/
  | {
      name: 'CancelItemAttributesApproval';
      params: {
        collection: number;
        item: number;
        delegate: MultiAddress;
        witness: PalletNftsCancelAttributesApprovalWitness;
      };
    }
  /**
   * Set the metadata for an item.
   *
   * Origin must be either `ForceOrigin` or Signed and the sender should be the Admin of the
   * `collection`.
   *
   * If the origin is Signed, then funds of signer are reserved according to the formula:
   * `MetadataDepositBase + DepositPerByte * data.len` taking into
   * account any already reserved funds.
   *
   * - `collection`: The identifier of the collection whose item's metadata to set.
   * - `item`: The identifier of the item whose metadata to set.
   * - `data`: The general information of this item. Limited in length by `StringLimit`.
   *
   * Emits `ItemMetadataSet`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'SetMetadata'; params: { collection: number; item: number; data: Bytes } }
  /**
   * Clear the metadata for an item.
   *
   * Origin must be either `ForceOrigin` or Signed and the sender should be the Admin of the
   * `collection`.
   *
   * Any deposit is freed for the collection's owner.
   *
   * - `collection`: The identifier of the collection whose item's metadata to clear.
   * - `item`: The identifier of the item whose metadata to clear.
   *
   * Emits `ItemMetadataCleared`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'ClearMetadata'; params: { collection: number; item: number } }
  /**
   * Set the metadata for a collection.
   *
   * Origin must be either `ForceOrigin` or `Signed` and the sender should be the Admin of
   * the `collection`.
   *
   * If the origin is `Signed`, then funds of signer are reserved according to the formula:
   * `MetadataDepositBase + DepositPerByte * data.len` taking into
   * account any already reserved funds.
   *
   * - `collection`: The identifier of the item whose metadata to update.
   * - `data`: The general information of this item. Limited in length by `StringLimit`.
   *
   * Emits `CollectionMetadataSet`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'SetCollectionMetadata'; params: { collection: number; data: Bytes } }
  /**
   * Clear the metadata for a collection.
   *
   * Origin must be either `ForceOrigin` or `Signed` and the sender should be the Admin of
   * the `collection`.
   *
   * Any deposit is freed for the collection's owner.
   *
   * - `collection`: The identifier of the collection whose metadata to clear.
   *
   * Emits `CollectionMetadataCleared`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'ClearCollectionMetadata'; params: { collection: number } }
  /**
   * Set (or reset) the acceptance of ownership for a particular account.
   *
   * Origin must be `Signed` and if `maybe_collection` is `Some`, then the signer must have a
   * provider reference.
   *
   * - `maybe_collection`: The identifier of the collection whose ownership the signer is
   * willing to accept, or if `None`, an indication that the signer is willing to accept no
   * ownership transferal.
   *
   * Emits `OwnershipAcceptanceChanged`.
   **/
  | { name: 'SetAcceptOwnership'; params: { maybeCollection?: number | undefined } }
  /**
   * Set the maximum number of items a collection could have.
   *
   * Origin must be either `ForceOrigin` or `Signed` and the sender should be the Owner of
   * the `collection`.
   *
   * - `collection`: The identifier of the collection to change.
   * - `max_supply`: The maximum number of items a collection could have.
   *
   * Emits `CollectionMaxSupplySet` event when successful.
   **/
  | { name: 'SetCollectionMaxSupply'; params: { collection: number; maxSupply: number } }
  /**
   * Update mint settings.
   *
   * Origin must be either `ForceOrigin` or `Signed` and the sender should be the Issuer
   * of the `collection`.
   *
   * - `collection`: The identifier of the collection to change.
   * - `mint_settings`: The new mint settings.
   *
   * Emits `CollectionMintSettingsUpdated` event when successful.
   **/
  | { name: 'UpdateMintSettings'; params: { collection: number; mintSettings: PalletNftsMintSettings } }
  /**
   * Set (or reset) the price for an item.
   *
   * Origin must be Signed and must be the owner of the `item`.
   *
   * - `collection`: The collection of the item.
   * - `item`: The item to set the price for.
   * - `price`: The price for the item. Pass `None`, to reset the price.
   * - `buyer`: Restricts the buy operation to a specific account.
   *
   * Emits `ItemPriceSet` on success if the price is not `None`.
   * Emits `ItemPriceRemoved` on success if the price is `None`.
   **/
  | {
      name: 'SetPrice';
      params: {
        collection: number;
        item: number;
        price?: bigint | undefined;
        whitelistedBuyer?: MultiAddress | undefined;
      };
    }
  /**
   * Allows to buy an item if it's up for sale.
   *
   * Origin must be Signed and must not be the owner of the `item`.
   *
   * - `collection`: The collection of the item.
   * - `item`: The item the sender wants to buy.
   * - `bid_price`: The price the sender is willing to pay.
   *
   * Emits `ItemBought` on success.
   **/
  | { name: 'BuyItem'; params: { collection: number; item: number; bidPrice: bigint } }
  /**
   * Allows to pay the tips.
   *
   * Origin must be Signed.
   *
   * - `tips`: Tips array.
   *
   * Emits `TipSent` on every tip transfer.
   **/
  | { name: 'PayTips'; params: { tips: Array<PalletNftsItemTip> } }
  /**
   * Register a new atomic swap, declaring an intention to send an `item` in exchange for
   * `desired_item` from origin to target on the current blockchain.
   * The target can execute the swap during the specified `duration` of blocks (if set).
   * Additionally, the price could be set for the desired `item`.
   *
   * Origin must be Signed and must be an owner of the `item`.
   *
   * - `collection`: The collection of the item.
   * - `item`: The item an owner wants to give.
   * - `desired_collection`: The collection of the desired item.
   * - `desired_item`: The desired item an owner wants to receive.
   * - `maybe_price`: The price an owner is willing to pay or receive for the desired `item`.
   * - `duration`: A deadline for the swap. Specified by providing the number of blocks
   * after which the swap will expire.
   *
   * Emits `SwapCreated` on success.
   **/
  | {
      name: 'CreateSwap';
      params: {
        offeredCollection: number;
        offeredItem: number;
        desiredCollection: number;
        maybeDesiredItem?: number | undefined;
        maybePrice?: PalletNftsPriceWithDirection | undefined;
        duration: number;
      };
    }
  /**
   * Cancel an atomic swap.
   *
   * Origin must be Signed.
   * Origin must be an owner of the `item` if the deadline hasn't expired.
   *
   * - `collection`: The collection of the item.
   * - `item`: The item an owner wants to give.
   *
   * Emits `SwapCancelled` on success.
   **/
  | { name: 'CancelSwap'; params: { offeredCollection: number; offeredItem: number } }
  /**
   * Claim an atomic swap.
   * This method executes a pending swap, that was created by a counterpart before.
   *
   * Origin must be Signed and must be an owner of the `item`.
   *
   * - `send_collection`: The collection of the item to be sent.
   * - `send_item`: The item to be sent.
   * - `receive_collection`: The collection of the item to be received.
   * - `receive_item`: The item to be received.
   * - `witness_price`: A price that was previously agreed on.
   *
   * Emits `SwapClaimed` on success.
   **/
  | {
      name: 'ClaimSwap';
      params: {
        sendCollection: number;
        sendItem: number;
        receiveCollection: number;
        receiveItem: number;
        witnessPrice?: PalletNftsPriceWithDirection | undefined;
      };
    }
  /**
   * Mint an item by providing the pre-signed approval.
   *
   * Origin must be Signed.
   *
   * - `mint_data`: The pre-signed approval that consists of the information about the item,
   * its metadata, attributes, who can mint it (`None` for anyone) and until what block
   * number.
   * - `signature`: The signature of the `data` object.
   * - `signer`: The `data` object's signer. Should be an Issuer of the collection.
   *
   * Emits `Issued` on success.
   * Emits `AttributeSet` if the attributes were provided.
   * Emits `ItemMetadataSet` if the metadata was not empty.
   **/
  | {
      name: 'MintPreSigned';
      params: { mintData: PalletNftsPreSignedMint; signature: SpRuntimeMultiSignature; signer: AccountId32 };
    }
  /**
   * Set attributes for an item by providing the pre-signed approval.
   *
   * Origin must be Signed and must be an owner of the `data.item`.
   *
   * - `data`: The pre-signed approval that consists of the information about the item,
   * attributes to update and until what block number.
   * - `signature`: The signature of the `data` object.
   * - `signer`: The `data` object's signer. Should be an Admin of the collection for the
   * `CollectionOwner` namespace.
   *
   * Emits `AttributeSet` for each provided attribute.
   * Emits `ItemAttributesApprovalAdded` if the approval wasn't set before.
   * Emits `PreSignedAttributesSet` on success.
   **/
  | {
      name: 'SetAttributesPreSigned';
      params: { data: PalletNftsPreSignedAttributes; signature: SpRuntimeMultiSignature; signer: AccountId32 };
    };

export type PalletNftsCallLike =
  /**
   * Issue a new collection of non-fungible items from a public origin.
   *
   * This new collection has no items initially and its owner is the origin.
   *
   * The origin must be Signed and the sender must have sufficient funds free.
   *
   * `CollectionDeposit` funds of sender are reserved.
   *
   * Parameters:
   * - `admin`: The admin of this collection. The admin is the initial address of each
   * member of the collection's admin team.
   *
   * Emits `Created` event when successful.
   *
   * Weight: `O(1)`
   **/
  | { name: 'Create'; params: { admin: MultiAddressLike; config: PalletNftsCollectionConfig } }
  /**
   * Issue a new collection of non-fungible items from a privileged origin.
   *
   * This new collection has no items initially.
   *
   * The origin must conform to `ForceOrigin`.
   *
   * Unlike `create`, no funds are reserved.
   *
   * - `owner`: The owner of this collection of items. The owner has full superuser
   * permissions over this item, but may later change and configure the permissions using
   * `transfer_ownership` and `set_team`.
   *
   * Emits `ForceCreated` event when successful.
   *
   * Weight: `O(1)`
   **/
  | { name: 'ForceCreate'; params: { owner: MultiAddressLike; config: PalletNftsCollectionConfig } }
  /**
   * Destroy a collection of fungible items.
   *
   * The origin must conform to `ForceOrigin` or must be `Signed` and the sender must be the
   * owner of the `collection`.
   *
   * NOTE: The collection must have 0 items to be destroyed.
   *
   * - `collection`: The identifier of the collection to be destroyed.
   * - `witness`: Information on the items minted in the collection. This must be
   * correct.
   *
   * Emits `Destroyed` event when successful.
   *
   * Weight: `O(m + c + a)` where:
   * - `m = witness.item_metadatas`
   * - `c = witness.item_configs`
   * - `a = witness.attributes`
   **/
  | { name: 'Destroy'; params: { collection: number; witness: PalletNftsDestroyWitness } }
  /**
   * Mint an item of a particular collection.
   *
   * The origin must be Signed and the sender must comply with the `mint_settings` rules.
   *
   * - `collection`: The collection of the item to be minted.
   * - `item`: An identifier of the new item.
   * - `mint_to`: Account into which the item will be minted.
   * - `witness_data`: When the mint type is `HolderOf(collection_id)`, then the owned
   * item_id from that collection needs to be provided within the witness data object. If
   * the mint price is set, then it should be additionally confirmed in the `witness_data`.
   *
   * Note: the deposit will be taken from the `origin` and not the `owner` of the `item`.
   *
   * Emits `Issued` event when successful.
   *
   * Weight: `O(1)`
   **/
  | {
      name: 'Mint';
      params: {
        collection: number;
        item: number;
        mintTo: MultiAddressLike;
        witnessData?: PalletNftsMintWitness | undefined;
      };
    }
  /**
   * Mint an item of a particular collection from a privileged origin.
   *
   * The origin must conform to `ForceOrigin` or must be `Signed` and the sender must be the
   * Issuer of the `collection`.
   *
   * - `collection`: The collection of the item to be minted.
   * - `item`: An identifier of the new item.
   * - `mint_to`: Account into which the item will be minted.
   * - `item_config`: A config of the new item.
   *
   * Emits `Issued` event when successful.
   *
   * Weight: `O(1)`
   **/
  | {
      name: 'ForceMint';
      params: { collection: number; item: number; mintTo: MultiAddressLike; itemConfig: PalletNftsItemConfig };
    }
  /**
   * Destroy a single item.
   *
   * The origin must conform to `ForceOrigin` or must be Signed and the signing account must
   * be the owner of the `item`.
   *
   * - `collection`: The collection of the item to be burned.
   * - `item`: The item to be burned.
   *
   * Emits `Burned`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'Burn'; params: { collection: number; item: number } }
  /**
   * Move an item from the sender account to another.
   *
   * Origin must be Signed and the signing account must be either:
   * - the Owner of the `item`;
   * - the approved delegate for the `item` (in this case, the approval is reset).
   *
   * Arguments:
   * - `collection`: The collection of the item to be transferred.
   * - `item`: The item to be transferred.
   * - `dest`: The account to receive ownership of the item.
   *
   * Emits `Transferred`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'Transfer'; params: { collection: number; item: number; dest: MultiAddressLike } }
  /**
   * Re-evaluate the deposits on some items.
   *
   * Origin must be Signed and the sender should be the Owner of the `collection`.
   *
   * - `collection`: The collection of the items to be reevaluated.
   * - `items`: The items of the collection whose deposits will be reevaluated.
   *
   * NOTE: This exists as a best-effort function. Any items which are unknown or
   * in the case that the owner account does not have reservable funds to pay for a
   * deposit increase are ignored. Generally the owner isn't going to call this on items
   * whose existing deposit is less than the refreshed deposit as it would only cost them,
   * so it's of little consequence.
   *
   * It will still return an error in the case that the collection is unknown or the signer
   * is not permitted to call it.
   *
   * Weight: `O(items.len())`
   **/
  | { name: 'Redeposit'; params: { collection: number; items: Array<number> } }
  /**
   * Disallow further unprivileged transfer of an item.
   *
   * Origin must be Signed and the sender should be the Freezer of the `collection`.
   *
   * - `collection`: The collection of the item to be changed.
   * - `item`: The item to become non-transferable.
   *
   * Emits `ItemTransferLocked`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'LockItemTransfer'; params: { collection: number; item: number } }
  /**
   * Re-allow unprivileged transfer of an item.
   *
   * Origin must be Signed and the sender should be the Freezer of the `collection`.
   *
   * - `collection`: The collection of the item to be changed.
   * - `item`: The item to become transferable.
   *
   * Emits `ItemTransferUnlocked`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'UnlockItemTransfer'; params: { collection: number; item: number } }
  /**
   * Disallows specified settings for the whole collection.
   *
   * Origin must be Signed and the sender should be the Owner of the `collection`.
   *
   * - `collection`: The collection to be locked.
   * - `lock_settings`: The settings to be locked.
   *
   * Note: it's possible to only lock(set) the setting, but not to unset it.
   *
   * Emits `CollectionLocked`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'LockCollection'; params: { collection: number; lockSettings: PalletNftsBitFlags } }
  /**
   * Change the Owner of a collection.
   *
   * Origin must be Signed and the sender should be the Owner of the `collection`.
   *
   * - `collection`: The collection whose owner should be changed.
   * - `owner`: The new Owner of this collection. They must have called
   * `set_accept_ownership` with `collection` in order for this operation to succeed.
   *
   * Emits `OwnerChanged`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'TransferOwnership'; params: { collection: number; newOwner: MultiAddressLike } }
  /**
   * Change the Issuer, Admin and Freezer of a collection.
   *
   * Origin must be either `ForceOrigin` or Signed and the sender should be the Owner of the
   * `collection`.
   *
   * Note: by setting the role to `None` only the `ForceOrigin` will be able to change it
   * after to `Some(account)`.
   *
   * - `collection`: The collection whose team should be changed.
   * - `issuer`: The new Issuer of this collection.
   * - `admin`: The new Admin of this collection.
   * - `freezer`: The new Freezer of this collection.
   *
   * Emits `TeamChanged`.
   *
   * Weight: `O(1)`
   **/
  | {
      name: 'SetTeam';
      params: {
        collection: number;
        issuer?: MultiAddressLike | undefined;
        admin?: MultiAddressLike | undefined;
        freezer?: MultiAddressLike | undefined;
      };
    }
  /**
   * Change the Owner of a collection.
   *
   * Origin must be `ForceOrigin`.
   *
   * - `collection`: The identifier of the collection.
   * - `owner`: The new Owner of this collection.
   *
   * Emits `OwnerChanged`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'ForceCollectionOwner'; params: { collection: number; owner: MultiAddressLike } }
  /**
   * Change the config of a collection.
   *
   * Origin must be `ForceOrigin`.
   *
   * - `collection`: The identifier of the collection.
   * - `config`: The new config of this collection.
   *
   * Emits `CollectionConfigChanged`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'ForceCollectionConfig'; params: { collection: number; config: PalletNftsCollectionConfig } }
  /**
   * Approve an item to be transferred by a delegated third-party account.
   *
   * Origin must be either `ForceOrigin` or Signed and the sender should be the Owner of the
   * `item`.
   *
   * - `collection`: The collection of the item to be approved for delegated transfer.
   * - `item`: The item to be approved for delegated transfer.
   * - `delegate`: The account to delegate permission to transfer the item.
   * - `maybe_deadline`: Optional deadline for the approval. Specified by providing the
   * number of blocks after which the approval will expire
   *
   * Emits `TransferApproved` on success.
   *
   * Weight: `O(1)`
   **/
  | {
      name: 'ApproveTransfer';
      params: { collection: number; item: number; delegate: MultiAddressLike; maybeDeadline?: number | undefined };
    }
  /**
   * Cancel one of the transfer approvals for a specific item.
   *
   * Origin must be either:
   * - the `Force` origin;
   * - `Signed` with the signer being the Owner of the `item`;
   *
   * Arguments:
   * - `collection`: The collection of the item of whose approval will be cancelled.
   * - `item`: The item of the collection of whose approval will be cancelled.
   * - `delegate`: The account that is going to loose their approval.
   *
   * Emits `ApprovalCancelled` on success.
   *
   * Weight: `O(1)`
   **/
  | { name: 'CancelApproval'; params: { collection: number; item: number; delegate: MultiAddressLike } }
  /**
   * Cancel all the approvals of a specific item.
   *
   * Origin must be either:
   * - the `Force` origin;
   * - `Signed` with the signer being the Owner of the `item`;
   *
   * Arguments:
   * - `collection`: The collection of the item of whose approvals will be cleared.
   * - `item`: The item of the collection of whose approvals will be cleared.
   *
   * Emits `AllApprovalsCancelled` on success.
   *
   * Weight: `O(1)`
   **/
  | { name: 'ClearAllTransferApprovals'; params: { collection: number; item: number } }
  /**
   * Disallows changing the metadata or attributes of the item.
   *
   * Origin must be either `ForceOrigin` or Signed and the sender should be the Admin
   * of the `collection`.
   *
   * - `collection`: The collection if the `item`.
   * - `item`: An item to be locked.
   * - `lock_metadata`: Specifies whether the metadata should be locked.
   * - `lock_attributes`: Specifies whether the attributes in the `CollectionOwner` namespace
   * should be locked.
   *
   * Note: `lock_attributes` affects the attributes in the `CollectionOwner` namespace only.
   * When the metadata or attributes are locked, it won't be possible the unlock them.
   *
   * Emits `ItemPropertiesLocked`.
   *
   * Weight: `O(1)`
   **/
  | {
      name: 'LockItemProperties';
      params: { collection: number; item: number; lockMetadata: boolean; lockAttributes: boolean };
    }
  /**
   * Set an attribute for a collection or item.
   *
   * Origin must be Signed and must conform to the namespace ruleset:
   * - `CollectionOwner` namespace could be modified by the `collection` Admin only;
   * - `ItemOwner` namespace could be modified by the `maybe_item` owner only. `maybe_item`
   * should be set in that case;
   * - `Account(AccountId)` namespace could be modified only when the `origin` was given a
   * permission to do so;
   *
   * The funds of `origin` are reserved according to the formula:
   * `AttributeDepositBase + DepositPerByte * (key.len + value.len)` taking into
   * account any already reserved funds.
   *
   * - `collection`: The identifier of the collection whose item's metadata to set.
   * - `maybe_item`: The identifier of the item whose metadata to set.
   * - `namespace`: Attribute's namespace.
   * - `key`: The key of the attribute.
   * - `value`: The value to which to set the attribute.
   *
   * Emits `AttributeSet`.
   *
   * Weight: `O(1)`
   **/
  | {
      name: 'SetAttribute';
      params: {
        collection: number;
        maybeItem?: number | undefined;
        namespace: PalletNftsAttributeNamespace;
        key: BytesLike;
        value: BytesLike;
      };
    }
  /**
   * Force-set an attribute for a collection or item.
   *
   * Origin must be `ForceOrigin`.
   *
   * If the attribute already exists and it was set by another account, the deposit
   * will be returned to the previous owner.
   *
   * - `set_as`: An optional owner of the attribute.
   * - `collection`: The identifier of the collection whose item's metadata to set.
   * - `maybe_item`: The identifier of the item whose metadata to set.
   * - `namespace`: Attribute's namespace.
   * - `key`: The key of the attribute.
   * - `value`: The value to which to set the attribute.
   *
   * Emits `AttributeSet`.
   *
   * Weight: `O(1)`
   **/
  | {
      name: 'ForceSetAttribute';
      params: {
        setAs?: AccountId32Like | undefined;
        collection: number;
        maybeItem?: number | undefined;
        namespace: PalletNftsAttributeNamespace;
        key: BytesLike;
        value: BytesLike;
      };
    }
  /**
   * Clear an attribute for a collection or item.
   *
   * Origin must be either `ForceOrigin` or Signed and the sender should be the Owner of the
   * attribute.
   *
   * Any deposit is freed for the collection's owner.
   *
   * - `collection`: The identifier of the collection whose item's metadata to clear.
   * - `maybe_item`: The identifier of the item whose metadata to clear.
   * - `namespace`: Attribute's namespace.
   * - `key`: The key of the attribute.
   *
   * Emits `AttributeCleared`.
   *
   * Weight: `O(1)`
   **/
  | {
      name: 'ClearAttribute';
      params: {
        collection: number;
        maybeItem?: number | undefined;
        namespace: PalletNftsAttributeNamespace;
        key: BytesLike;
      };
    }
  /**
   * Approve item's attributes to be changed by a delegated third-party account.
   *
   * Origin must be Signed and must be an owner of the `item`.
   *
   * - `collection`: A collection of the item.
   * - `item`: The item that holds attributes.
   * - `delegate`: The account to delegate permission to change attributes of the item.
   *
   * Emits `ItemAttributesApprovalAdded` on success.
   **/
  | { name: 'ApproveItemAttributes'; params: { collection: number; item: number; delegate: MultiAddressLike } }
  /**
   * Cancel the previously provided approval to change item's attributes.
   * All the previously set attributes by the `delegate` will be removed.
   *
   * Origin must be Signed and must be an owner of the `item`.
   *
   * - `collection`: Collection that the item is contained within.
   * - `item`: The item that holds attributes.
   * - `delegate`: The previously approved account to remove.
   *
   * Emits `ItemAttributesApprovalRemoved` on success.
   **/
  | {
      name: 'CancelItemAttributesApproval';
      params: {
        collection: number;
        item: number;
        delegate: MultiAddressLike;
        witness: PalletNftsCancelAttributesApprovalWitness;
      };
    }
  /**
   * Set the metadata for an item.
   *
   * Origin must be either `ForceOrigin` or Signed and the sender should be the Admin of the
   * `collection`.
   *
   * If the origin is Signed, then funds of signer are reserved according to the formula:
   * `MetadataDepositBase + DepositPerByte * data.len` taking into
   * account any already reserved funds.
   *
   * - `collection`: The identifier of the collection whose item's metadata to set.
   * - `item`: The identifier of the item whose metadata to set.
   * - `data`: The general information of this item. Limited in length by `StringLimit`.
   *
   * Emits `ItemMetadataSet`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'SetMetadata'; params: { collection: number; item: number; data: BytesLike } }
  /**
   * Clear the metadata for an item.
   *
   * Origin must be either `ForceOrigin` or Signed and the sender should be the Admin of the
   * `collection`.
   *
   * Any deposit is freed for the collection's owner.
   *
   * - `collection`: The identifier of the collection whose item's metadata to clear.
   * - `item`: The identifier of the item whose metadata to clear.
   *
   * Emits `ItemMetadataCleared`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'ClearMetadata'; params: { collection: number; item: number } }
  /**
   * Set the metadata for a collection.
   *
   * Origin must be either `ForceOrigin` or `Signed` and the sender should be the Admin of
   * the `collection`.
   *
   * If the origin is `Signed`, then funds of signer are reserved according to the formula:
   * `MetadataDepositBase + DepositPerByte * data.len` taking into
   * account any already reserved funds.
   *
   * - `collection`: The identifier of the item whose metadata to update.
   * - `data`: The general information of this item. Limited in length by `StringLimit`.
   *
   * Emits `CollectionMetadataSet`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'SetCollectionMetadata'; params: { collection: number; data: BytesLike } }
  /**
   * Clear the metadata for a collection.
   *
   * Origin must be either `ForceOrigin` or `Signed` and the sender should be the Admin of
   * the `collection`.
   *
   * Any deposit is freed for the collection's owner.
   *
   * - `collection`: The identifier of the collection whose metadata to clear.
   *
   * Emits `CollectionMetadataCleared`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'ClearCollectionMetadata'; params: { collection: number } }
  /**
   * Set (or reset) the acceptance of ownership for a particular account.
   *
   * Origin must be `Signed` and if `maybe_collection` is `Some`, then the signer must have a
   * provider reference.
   *
   * - `maybe_collection`: The identifier of the collection whose ownership the signer is
   * willing to accept, or if `None`, an indication that the signer is willing to accept no
   * ownership transferal.
   *
   * Emits `OwnershipAcceptanceChanged`.
   **/
  | { name: 'SetAcceptOwnership'; params: { maybeCollection?: number | undefined } }
  /**
   * Set the maximum number of items a collection could have.
   *
   * Origin must be either `ForceOrigin` or `Signed` and the sender should be the Owner of
   * the `collection`.
   *
   * - `collection`: The identifier of the collection to change.
   * - `max_supply`: The maximum number of items a collection could have.
   *
   * Emits `CollectionMaxSupplySet` event when successful.
   **/
  | { name: 'SetCollectionMaxSupply'; params: { collection: number; maxSupply: number } }
  /**
   * Update mint settings.
   *
   * Origin must be either `ForceOrigin` or `Signed` and the sender should be the Issuer
   * of the `collection`.
   *
   * - `collection`: The identifier of the collection to change.
   * - `mint_settings`: The new mint settings.
   *
   * Emits `CollectionMintSettingsUpdated` event when successful.
   **/
  | { name: 'UpdateMintSettings'; params: { collection: number; mintSettings: PalletNftsMintSettings } }
  /**
   * Set (or reset) the price for an item.
   *
   * Origin must be Signed and must be the owner of the `item`.
   *
   * - `collection`: The collection of the item.
   * - `item`: The item to set the price for.
   * - `price`: The price for the item. Pass `None`, to reset the price.
   * - `buyer`: Restricts the buy operation to a specific account.
   *
   * Emits `ItemPriceSet` on success if the price is not `None`.
   * Emits `ItemPriceRemoved` on success if the price is `None`.
   **/
  | {
      name: 'SetPrice';
      params: {
        collection: number;
        item: number;
        price?: bigint | undefined;
        whitelistedBuyer?: MultiAddressLike | undefined;
      };
    }
  /**
   * Allows to buy an item if it's up for sale.
   *
   * Origin must be Signed and must not be the owner of the `item`.
   *
   * - `collection`: The collection of the item.
   * - `item`: The item the sender wants to buy.
   * - `bid_price`: The price the sender is willing to pay.
   *
   * Emits `ItemBought` on success.
   **/
  | { name: 'BuyItem'; params: { collection: number; item: number; bidPrice: bigint } }
  /**
   * Allows to pay the tips.
   *
   * Origin must be Signed.
   *
   * - `tips`: Tips array.
   *
   * Emits `TipSent` on every tip transfer.
   **/
  | { name: 'PayTips'; params: { tips: Array<PalletNftsItemTip> } }
  /**
   * Register a new atomic swap, declaring an intention to send an `item` in exchange for
   * `desired_item` from origin to target on the current blockchain.
   * The target can execute the swap during the specified `duration` of blocks (if set).
   * Additionally, the price could be set for the desired `item`.
   *
   * Origin must be Signed and must be an owner of the `item`.
   *
   * - `collection`: The collection of the item.
   * - `item`: The item an owner wants to give.
   * - `desired_collection`: The collection of the desired item.
   * - `desired_item`: The desired item an owner wants to receive.
   * - `maybe_price`: The price an owner is willing to pay or receive for the desired `item`.
   * - `duration`: A deadline for the swap. Specified by providing the number of blocks
   * after which the swap will expire.
   *
   * Emits `SwapCreated` on success.
   **/
  | {
      name: 'CreateSwap';
      params: {
        offeredCollection: number;
        offeredItem: number;
        desiredCollection: number;
        maybeDesiredItem?: number | undefined;
        maybePrice?: PalletNftsPriceWithDirection | undefined;
        duration: number;
      };
    }
  /**
   * Cancel an atomic swap.
   *
   * Origin must be Signed.
   * Origin must be an owner of the `item` if the deadline hasn't expired.
   *
   * - `collection`: The collection of the item.
   * - `item`: The item an owner wants to give.
   *
   * Emits `SwapCancelled` on success.
   **/
  | { name: 'CancelSwap'; params: { offeredCollection: number; offeredItem: number } }
  /**
   * Claim an atomic swap.
   * This method executes a pending swap, that was created by a counterpart before.
   *
   * Origin must be Signed and must be an owner of the `item`.
   *
   * - `send_collection`: The collection of the item to be sent.
   * - `send_item`: The item to be sent.
   * - `receive_collection`: The collection of the item to be received.
   * - `receive_item`: The item to be received.
   * - `witness_price`: A price that was previously agreed on.
   *
   * Emits `SwapClaimed` on success.
   **/
  | {
      name: 'ClaimSwap';
      params: {
        sendCollection: number;
        sendItem: number;
        receiveCollection: number;
        receiveItem: number;
        witnessPrice?: PalletNftsPriceWithDirection | undefined;
      };
    }
  /**
   * Mint an item by providing the pre-signed approval.
   *
   * Origin must be Signed.
   *
   * - `mint_data`: The pre-signed approval that consists of the information about the item,
   * its metadata, attributes, who can mint it (`None` for anyone) and until what block
   * number.
   * - `signature`: The signature of the `data` object.
   * - `signer`: The `data` object's signer. Should be an Issuer of the collection.
   *
   * Emits `Issued` on success.
   * Emits `AttributeSet` if the attributes were provided.
   * Emits `ItemMetadataSet` if the metadata was not empty.
   **/
  | {
      name: 'MintPreSigned';
      params: { mintData: PalletNftsPreSignedMint; signature: SpRuntimeMultiSignature; signer: AccountId32Like };
    }
  /**
   * Set attributes for an item by providing the pre-signed approval.
   *
   * Origin must be Signed and must be an owner of the `data.item`.
   *
   * - `data`: The pre-signed approval that consists of the information about the item,
   * attributes to update and until what block number.
   * - `signature`: The signature of the `data` object.
   * - `signer`: The `data` object's signer. Should be an Admin of the collection for the
   * `CollectionOwner` namespace.
   *
   * Emits `AttributeSet` for each provided attribute.
   * Emits `ItemAttributesApprovalAdded` if the approval wasn't set before.
   * Emits `PreSignedAttributesSet` on success.
   **/
  | {
      name: 'SetAttributesPreSigned';
      params: { data: PalletNftsPreSignedAttributes; signature: SpRuntimeMultiSignature; signer: AccountId32Like };
    };

export type PalletNftsCollectionConfig = {
  settings: PalletNftsBitFlags;
  maxSupply?: number | undefined;
  mintSettings: PalletNftsMintSettings;
};

export type PalletNftsBitFlags = bigint;

export type PalletNftsCollectionSetting =
  | 'TransferableItems'
  | 'UnlockedMetadata'
  | 'UnlockedAttributes'
  | 'UnlockedMaxSupply'
  | 'DepositRequired';

export type PalletNftsMintSettings = {
  mintType: PalletNftsMintType;
  price?: bigint | undefined;
  startBlock?: number | undefined;
  endBlock?: number | undefined;
  defaultItemSettings: PalletNftsBitFlagsItemSetting;
};

export type PalletNftsMintType = { type: 'Issuer' } | { type: 'Public' } | { type: 'HolderOf'; value: number };

export type PalletNftsBitFlagsItemSetting = bigint;

export type PalletNftsItemSetting = 'Transferable' | 'UnlockedMetadata' | 'UnlockedAttributes';

export type PalletNftsDestroyWitness = { itemMetadatas: number; itemConfigs: number; attributes: number };

export type PalletNftsMintWitness = { ownedItem?: number | undefined; mintPrice?: bigint | undefined };

export type PalletNftsItemConfig = { settings: PalletNftsBitFlagsItemSetting };

export type PalletNftsCancelAttributesApprovalWitness = { accountAttributes: number };

export type PalletNftsItemTip = { collection: number; item: number; receiver: AccountId32; amount: bigint };

export type PalletNftsPreSignedMint = {
  collection: number;
  item: number;
  attributes: Array<[Bytes, Bytes]>;
  metadata: Bytes;
  onlyAccount?: AccountId32 | undefined;
  deadline: number;
  mintPrice?: bigint | undefined;
};

export type SpRuntimeMultiSignature =
  | { type: 'Ed25519'; value: FixedBytes<64> }
  | { type: 'Sr25519'; value: FixedBytes<64> }
  | { type: 'Ecdsa'; value: FixedBytes<65> };

export type PalletNftsPreSignedAttributes = {
  collection: number;
  item: number;
  attributes: Array<[Bytes, Bytes]>;
  namespace: PalletNftsAttributeNamespace;
  deadline: number;
};

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletAssetsCall002 =
  /**
   * Issue a new class of fungible assets from a public origin.
   *
   * This new asset class has no assets initially and its owner is the origin.
   *
   * The origin must conform to the configured `CreateOrigin` and have sufficient funds free.
   *
   * Funds of sender are reserved by `AssetDeposit`.
   *
   * Parameters:
   * - `id`: The identifier of the new asset. This must not be currently in use to identify
   * an existing asset. If [`NextAssetId`] is set, then this must be equal to it.
   * - `admin`: The admin of this class of assets. The admin is the initial address of each
   * member of the asset class's admin team.
   * - `min_balance`: The minimum balance of this new asset that any single account must
   * have. If an account's balance is reduced below this, then it collapses to zero.
   *
   * Emits `Created` event when successful.
   *
   * Weight: `O(1)`
   **/
  | { name: 'Create'; params: { id: StagingXcmV5Location; admin: MultiAddress; minBalance: bigint } }
  /**
   * Issue a new class of fungible assets from a privileged origin.
   *
   * This new asset class has no assets initially.
   *
   * The origin must conform to `ForceOrigin`.
   *
   * Unlike `create`, no funds are reserved.
   *
   * - `id`: The identifier of the new asset. This must not be currently in use to identify
   * an existing asset. If [`NextAssetId`] is set, then this must be equal to it.
   * - `owner`: The owner of this class of assets. The owner has full superuser permissions
   * over this asset, but may later change and configure the permissions using
   * `transfer_ownership` and `set_team`.
   * - `min_balance`: The minimum balance of this new asset that any single account must
   * have. If an account's balance is reduced below this, then it collapses to zero.
   *
   * Emits `ForceCreated` event when successful.
   *
   * Weight: `O(1)`
   **/
  | {
      name: 'ForceCreate';
      params: { id: StagingXcmV5Location; owner: MultiAddress; isSufficient: boolean; minBalance: bigint };
    }
  /**
   * Start the process of destroying a fungible asset class.
   *
   * `start_destroy` is the first in a series of extrinsics that should be called, to allow
   * destruction of an asset class.
   *
   * The origin must conform to `ForceOrigin` or must be `Signed` by the asset's `owner`.
   *
   * - `id`: The identifier of the asset to be destroyed. This must identify an existing
   * asset.
   *
   * It will fail with either [`Error::ContainsHolds`] or [`Error::ContainsFreezes`] if
   * an account contains holds or freezes in place.
   **/
  | { name: 'StartDestroy'; params: { id: StagingXcmV5Location } }
  /**
   * Destroy all accounts associated with a given asset.
   *
   * `destroy_accounts` should only be called after `start_destroy` has been called, and the
   * asset is in a `Destroying` state.
   *
   * Due to weight restrictions, this function may need to be called multiple times to fully
   * destroy all accounts. It will destroy `RemoveItemsLimit` accounts at a time.
   *
   * - `id`: The identifier of the asset to be destroyed. This must identify an existing
   * asset.
   *
   * Each call emits the `Event::DestroyedAccounts` event.
   **/
  | { name: 'DestroyAccounts'; params: { id: StagingXcmV5Location } }
  /**
   * Destroy all approvals associated with a given asset up to the max (T::RemoveItemsLimit).
   *
   * `destroy_approvals` should only be called after `start_destroy` has been called, and the
   * asset is in a `Destroying` state.
   *
   * Due to weight restrictions, this function may need to be called multiple times to fully
   * destroy all approvals. It will destroy `RemoveItemsLimit` approvals at a time.
   *
   * - `id`: The identifier of the asset to be destroyed. This must identify an existing
   * asset.
   *
   * Each call emits the `Event::DestroyedApprovals` event.
   **/
  | { name: 'DestroyApprovals'; params: { id: StagingXcmV5Location } }
  /**
   * Complete destroying asset and unreserve currency.
   *
   * `finish_destroy` should only be called after `start_destroy` has been called, and the
   * asset is in a `Destroying` state. All accounts or approvals should be destroyed before
   * hand.
   *
   * - `id`: The identifier of the asset to be destroyed. This must identify an existing
   * asset.
   *
   * Each successful call emits the `Event::Destroyed` event.
   **/
  | { name: 'FinishDestroy'; params: { id: StagingXcmV5Location } }
  /**
   * Mint assets of a particular class.
   *
   * The origin must be Signed and the sender must be the Issuer of the asset `id`.
   *
   * - `id`: The identifier of the asset to have some amount minted.
   * - `beneficiary`: The account to be credited with the minted assets.
   * - `amount`: The amount of the asset to be minted.
   *
   * Emits `Issued` event when successful.
   *
   * Weight: `O(1)`
   * Modes: Pre-existing balance of `beneficiary`; Account pre-existence of `beneficiary`.
   **/
  | { name: 'Mint'; params: { id: StagingXcmV5Location; beneficiary: MultiAddress; amount: bigint } }
  /**
   * Reduce the balance of `who` by as much as possible up to `amount` assets of `id`.
   *
   * Origin must be Signed and the sender should be the Manager of the asset `id`.
   *
   * Bails with `NoAccount` if the `who` is already dead.
   *
   * - `id`: The identifier of the asset to have some amount burned.
   * - `who`: The account to be debited from.
   * - `amount`: The maximum amount by which `who`'s balance should be reduced.
   *
   * Emits `Burned` with the actual amount burned. If this takes the balance to below the
   * minimum for the asset, then the amount burned is increased to take it to zero.
   *
   * Weight: `O(1)`
   * Modes: Post-existence of `who`; Pre & post Zombie-status of `who`.
   **/
  | { name: 'Burn'; params: { id: StagingXcmV5Location; who: MultiAddress; amount: bigint } }
  /**
   * Move some assets from the sender account to another.
   *
   * Origin must be Signed.
   *
   * - `id`: The identifier of the asset to have some amount transferred.
   * - `target`: The account to be credited.
   * - `amount`: The amount by which the sender's balance of assets should be reduced and
   * `target`'s balance increased. The amount actually transferred may be slightly greater in
   * the case that the transfer would otherwise take the sender balance above zero but below
   * the minimum balance. Must be greater than zero.
   *
   * Emits `Transferred` with the actual amount transferred. If this takes the source balance
   * to below the minimum for the asset, then the amount transferred is increased to take it
   * to zero.
   *
   * Weight: `O(1)`
   * Modes: Pre-existence of `target`; Post-existence of sender; Account pre-existence of
   * `target`.
   **/
  | { name: 'Transfer'; params: { id: StagingXcmV5Location; target: MultiAddress; amount: bigint } }
  /**
   * Move some assets from the sender account to another, keeping the sender account alive.
   *
   * Origin must be Signed.
   *
   * - `id`: The identifier of the asset to have some amount transferred.
   * - `target`: The account to be credited.
   * - `amount`: The amount by which the sender's balance of assets should be reduced and
   * `target`'s balance increased. The amount actually transferred may be slightly greater in
   * the case that the transfer would otherwise take the sender balance above zero but below
   * the minimum balance. Must be greater than zero.
   *
   * Emits `Transferred` with the actual amount transferred. If this takes the source balance
   * to below the minimum for the asset, then the amount transferred is increased to take it
   * to zero.
   *
   * Weight: `O(1)`
   * Modes: Pre-existence of `target`; Post-existence of sender; Account pre-existence of
   * `target`.
   **/
  | { name: 'TransferKeepAlive'; params: { id: StagingXcmV5Location; target: MultiAddress; amount: bigint } }
  /**
   * Move some assets from one account to another.
   *
   * Origin must be Signed and the sender should be the Admin of the asset `id`.
   *
   * - `id`: The identifier of the asset to have some amount transferred.
   * - `source`: The account to be debited.
   * - `dest`: The account to be credited.
   * - `amount`: The amount by which the `source`'s balance of assets should be reduced and
   * `dest`'s balance increased. The amount actually transferred may be slightly greater in
   * the case that the transfer would otherwise take the `source` balance above zero but
   * below the minimum balance. Must be greater than zero.
   *
   * Emits `Transferred` with the actual amount transferred. If this takes the source balance
   * to below the minimum for the asset, then the amount transferred is increased to take it
   * to zero.
   *
   * Weight: `O(1)`
   * Modes: Pre-existence of `dest`; Post-existence of `source`; Account pre-existence of
   * `dest`.
   **/
  | {
      name: 'ForceTransfer';
      params: { id: StagingXcmV5Location; source: MultiAddress; dest: MultiAddress; amount: bigint };
    }
  /**
   * Disallow further unprivileged transfers of an asset `id` from an account `who`. `who`
   * must already exist as an entry in `Account`s of the asset. If you want to freeze an
   * account that does not have an entry, use `touch_other` first.
   *
   * Origin must be Signed and the sender should be the Freezer of the asset `id`.
   *
   * - `id`: The identifier of the asset to be frozen.
   * - `who`: The account to be frozen.
   *
   * Emits `Frozen`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'Freeze'; params: { id: StagingXcmV5Location; who: MultiAddress } }
  /**
   * Allow unprivileged transfers to and from an account again.
   *
   * Origin must be Signed and the sender should be the Admin of the asset `id`.
   *
   * - `id`: The identifier of the asset to be frozen.
   * - `who`: The account to be unfrozen.
   *
   * Emits `Thawed`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'Thaw'; params: { id: StagingXcmV5Location; who: MultiAddress } }
  /**
   * Disallow further unprivileged transfers for the asset class.
   *
   * Origin must be Signed and the sender should be the Freezer of the asset `id`.
   *
   * - `id`: The identifier of the asset to be frozen.
   *
   * Emits `Frozen`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'FreezeAsset'; params: { id: StagingXcmV5Location } }
  /**
   * Allow unprivileged transfers for the asset again.
   *
   * Origin must be Signed and the sender should be the Admin of the asset `id`.
   *
   * - `id`: The identifier of the asset to be thawed.
   *
   * Emits `Thawed`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'ThawAsset'; params: { id: StagingXcmV5Location } }
  /**
   * Change the Owner of an asset.
   *
   * Origin must be Signed and the sender should be the Owner of the asset `id`.
   *
   * - `id`: The identifier of the asset.
   * - `owner`: The new Owner of this asset.
   *
   * Emits `OwnerChanged`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'TransferOwnership'; params: { id: StagingXcmV5Location; owner: MultiAddress } }
  /**
   * Change the Issuer, Admin and Freezer of an asset.
   *
   * Origin must be Signed and the sender should be the Owner of the asset `id`.
   *
   * - `id`: The identifier of the asset to be frozen.
   * - `issuer`: The new Issuer of this asset.
   * - `admin`: The new Admin of this asset.
   * - `freezer`: The new Freezer of this asset.
   *
   * Emits `TeamChanged`.
   *
   * Weight: `O(1)`
   **/
  | {
      name: 'SetTeam';
      params: { id: StagingXcmV5Location; issuer: MultiAddress; admin: MultiAddress; freezer: MultiAddress };
    }
  /**
   * Set the metadata for an asset.
   *
   * Origin must be Signed and the sender should be the Owner of the asset `id`.
   *
   * Funds of sender are reserved according to the formula:
   * `MetadataDepositBase + MetadataDepositPerByte * (name.len + symbol.len)` taking into
   * account any already reserved funds.
   *
   * - `id`: The identifier of the asset to update.
   * - `name`: The user friendly name of this asset. Limited in length by `StringLimit`.
   * - `symbol`: The exchange symbol for this asset. Limited in length by `StringLimit`.
   * - `decimals`: The number of decimals this asset uses to represent one unit.
   *
   * Emits `MetadataSet`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'SetMetadata'; params: { id: StagingXcmV5Location; name: Bytes; symbol: Bytes; decimals: number } }
  /**
   * Clear the metadata for an asset.
   *
   * Origin must be Signed and the sender should be the Owner of the asset `id`.
   *
   * Any deposit is freed for the asset owner.
   *
   * - `id`: The identifier of the asset to clear.
   *
   * Emits `MetadataCleared`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'ClearMetadata'; params: { id: StagingXcmV5Location } }
  /**
   * Force the metadata for an asset to some value.
   *
   * Origin must be ForceOrigin.
   *
   * Any deposit is left alone.
   *
   * - `id`: The identifier of the asset to update.
   * - `name`: The user friendly name of this asset. Limited in length by `StringLimit`.
   * - `symbol`: The exchange symbol for this asset. Limited in length by `StringLimit`.
   * - `decimals`: The number of decimals this asset uses to represent one unit.
   *
   * Emits `MetadataSet`.
   *
   * Weight: `O(N + S)` where N and S are the length of the name and symbol respectively.
   **/
  | {
      name: 'ForceSetMetadata';
      params: { id: StagingXcmV5Location; name: Bytes; symbol: Bytes; decimals: number; isFrozen: boolean };
    }
  /**
   * Clear the metadata for an asset.
   *
   * Origin must be ForceOrigin.
   *
   * Any deposit is returned.
   *
   * - `id`: The identifier of the asset to clear.
   *
   * Emits `MetadataCleared`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'ForceClearMetadata'; params: { id: StagingXcmV5Location } }
  /**
   * Alter the attributes of a given asset.
   *
   * Origin must be `ForceOrigin`.
   *
   * - `id`: The identifier of the asset.
   * - `owner`: The new Owner of this asset.
   * - `issuer`: The new Issuer of this asset.
   * - `admin`: The new Admin of this asset.
   * - `freezer`: The new Freezer of this asset.
   * - `min_balance`: The minimum balance of this new asset that any single account must
   * have. If an account's balance is reduced below this, then it collapses to zero.
   * - `is_sufficient`: Whether a non-zero balance of this asset is deposit of sufficient
   * value to account for the state bloat associated with its balance storage. If set to
   * `true`, then non-zero balances may be stored without a `consumer` reference (and thus
   * an ED in the Balances pallet or whatever else is used to control user-account state
   * growth).
   * - `is_frozen`: Whether this asset class is frozen except for permissioned/admin
   * instructions.
   *
   * Emits `AssetStatusChanged` with the identity of the asset.
   *
   * Weight: `O(1)`
   **/
  | {
      name: 'ForceAssetStatus';
      params: {
        id: StagingXcmV5Location;
        owner: MultiAddress;
        issuer: MultiAddress;
        admin: MultiAddress;
        freezer: MultiAddress;
        minBalance: bigint;
        isSufficient: boolean;
        isFrozen: boolean;
      };
    }
  /**
   * Approve an amount of asset for transfer by a delegated third-party account.
   *
   * Origin must be Signed.
   *
   * Ensures that `ApprovalDeposit` worth of `Currency` is reserved from signing account
   * for the purpose of holding the approval. If some non-zero amount of assets is already
   * approved from signing account to `delegate`, then it is topped up or unreserved to
   * meet the right value.
   *
   * NOTE: The signing account does not need to own `amount` of assets at the point of
   * making this call.
   *
   * - `id`: The identifier of the asset.
   * - `delegate`: The account to delegate permission to transfer asset.
   * - `amount`: The amount of asset that may be transferred by `delegate`. If there is
   * already an approval in place, then this acts additively.
   *
   * Emits `ApprovedTransfer` on success.
   *
   * Weight: `O(1)`
   **/
  | { name: 'ApproveTransfer'; params: { id: StagingXcmV5Location; delegate: MultiAddress; amount: bigint } }
  /**
   * Cancel all of some asset approved for delegated transfer by a third-party account.
   *
   * Origin must be Signed and there must be an approval in place between signer and
   * `delegate`.
   *
   * Unreserves any deposit previously reserved by `approve_transfer` for the approval.
   *
   * - `id`: The identifier of the asset.
   * - `delegate`: The account delegated permission to transfer asset.
   *
   * Emits `ApprovalCancelled` on success.
   *
   * Weight: `O(1)`
   **/
  | { name: 'CancelApproval'; params: { id: StagingXcmV5Location; delegate: MultiAddress } }
  /**
   * Cancel all of some asset approved for delegated transfer by a third-party account.
   *
   * Origin must be either ForceOrigin or Signed origin with the signer being the Admin
   * account of the asset `id`.
   *
   * Unreserves any deposit previously reserved by `approve_transfer` for the approval.
   *
   * - `id`: The identifier of the asset.
   * - `delegate`: The account delegated permission to transfer asset.
   *
   * Emits `ApprovalCancelled` on success.
   *
   * Weight: `O(1)`
   **/
  | { name: 'ForceCancelApproval'; params: { id: StagingXcmV5Location; owner: MultiAddress; delegate: MultiAddress } }
  /**
   * Transfer some asset balance from a previously delegated account to some third-party
   * account.
   *
   * Origin must be Signed and there must be an approval in place by the `owner` to the
   * signer.
   *
   * If the entire amount approved for transfer is transferred, then any deposit previously
   * reserved by `approve_transfer` is unreserved.
   *
   * - `id`: The identifier of the asset.
   * - `owner`: The account which previously approved for a transfer of at least `amount` and
   * from which the asset balance will be withdrawn.
   * - `destination`: The account to which the asset balance of `amount` will be transferred.
   * - `amount`: The amount of assets to transfer.
   *
   * Emits `TransferredApproved` on success.
   *
   * Weight: `O(1)`
   **/
  | {
      name: 'TransferApproved';
      params: { id: StagingXcmV5Location; owner: MultiAddress; destination: MultiAddress; amount: bigint };
    }
  /**
   * Create an asset account for non-provider assets.
   *
   * A deposit will be taken from the signer account.
   *
   * - `origin`: Must be Signed; the signer account must have sufficient funds for a deposit
   * to be taken.
   * - `id`: The identifier of the asset for the account to be created.
   *
   * Emits `Touched` event when successful.
   **/
  | { name: 'Touch'; params: { id: StagingXcmV5Location } }
  /**
   * Return the deposit (if any) of an asset account or a consumer reference (if any) of an
   * account.
   *
   * The origin must be Signed.
   *
   * - `id`: The identifier of the asset for which the caller would like the deposit
   * refunded.
   * - `allow_burn`: If `true` then assets may be destroyed in order to complete the refund.
   *
   * It will fail with either [`Error::ContainsHolds`] or [`Error::ContainsFreezes`] if
   * the asset account contains holds or freezes in place.
   *
   * Emits `Refunded` event when successful.
   **/
  | { name: 'Refund'; params: { id: StagingXcmV5Location; allowBurn: boolean } }
  /**
   * Sets the minimum balance of an asset.
   *
   * Only works if there aren't any accounts that are holding the asset or if
   * the new value of `min_balance` is less than the old one.
   *
   * Origin must be Signed and the sender has to be the Owner of the
   * asset `id`.
   *
   * - `id`: The identifier of the asset.
   * - `min_balance`: The new value of `min_balance`.
   *
   * Emits `AssetMinBalanceChanged` event when successful.
   **/
  | { name: 'SetMinBalance'; params: { id: StagingXcmV5Location; minBalance: bigint } }
  /**
   * Create an asset account for `who`.
   *
   * A deposit will be taken from the signer account.
   *
   * - `origin`: Must be Signed by `Freezer` or `Admin` of the asset `id`; the signer account
   * must have sufficient funds for a deposit to be taken.
   * - `id`: The identifier of the asset for the account to be created.
   * - `who`: The account to be created.
   *
   * Emits `Touched` event when successful.
   **/
  | { name: 'TouchOther'; params: { id: StagingXcmV5Location; who: MultiAddress } }
  /**
   * Return the deposit (if any) of a target asset account. Useful if you are the depositor.
   *
   * The origin must be Signed and either the account owner, depositor, or asset `Admin`. In
   * order to burn a non-zero balance of the asset, the caller must be the account and should
   * use `refund`.
   *
   * - `id`: The identifier of the asset for the account holding a deposit.
   * - `who`: The account to refund.
   *
   * It will fail with either [`Error::ContainsHolds`] or [`Error::ContainsFreezes`] if
   * the asset account contains holds or freezes in place.
   *
   * Emits `Refunded` event when successful.
   **/
  | { name: 'RefundOther'; params: { id: StagingXcmV5Location; who: MultiAddress } }
  /**
   * Disallow further unprivileged transfers of an asset `id` to and from an account `who`.
   *
   * Origin must be Signed and the sender should be the Freezer of the asset `id`.
   *
   * - `id`: The identifier of the account's asset.
   * - `who`: The account to be unblocked.
   *
   * Emits `Blocked`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'Block'; params: { id: StagingXcmV5Location; who: MultiAddress } }
  /**
   * Transfer the entire transferable balance from the caller asset account.
   *
   * NOTE: This function only attempts to transfer _transferable_ balances. This means that
   * any held, frozen, or minimum balance (when `keep_alive` is `true`), will not be
   * transferred by this function. To ensure that this function results in a killed account,
   * you might need to prepare the account by removing any reference counters, storage
   * deposits, etc...
   *
   * The dispatch origin of this call must be Signed.
   *
   * - `id`: The identifier of the asset for the account holding a deposit.
   * - `dest`: The recipient of the transfer.
   * - `keep_alive`: A boolean to determine if the `transfer_all` operation should send all
   * of the funds the asset account has, causing the sender asset account to be killed
   * (false), or transfer everything except at least the minimum balance, which will
   * guarantee to keep the sender asset account alive (true).
   **/
  | { name: 'TransferAll'; params: { id: StagingXcmV5Location; dest: MultiAddress; keepAlive: boolean } };

export type PalletAssetsCallLike002 =
  /**
   * Issue a new class of fungible assets from a public origin.
   *
   * This new asset class has no assets initially and its owner is the origin.
   *
   * The origin must conform to the configured `CreateOrigin` and have sufficient funds free.
   *
   * Funds of sender are reserved by `AssetDeposit`.
   *
   * Parameters:
   * - `id`: The identifier of the new asset. This must not be currently in use to identify
   * an existing asset. If [`NextAssetId`] is set, then this must be equal to it.
   * - `admin`: The admin of this class of assets. The admin is the initial address of each
   * member of the asset class's admin team.
   * - `min_balance`: The minimum balance of this new asset that any single account must
   * have. If an account's balance is reduced below this, then it collapses to zero.
   *
   * Emits `Created` event when successful.
   *
   * Weight: `O(1)`
   **/
  | { name: 'Create'; params: { id: StagingXcmV5Location; admin: MultiAddressLike; minBalance: bigint } }
  /**
   * Issue a new class of fungible assets from a privileged origin.
   *
   * This new asset class has no assets initially.
   *
   * The origin must conform to `ForceOrigin`.
   *
   * Unlike `create`, no funds are reserved.
   *
   * - `id`: The identifier of the new asset. This must not be currently in use to identify
   * an existing asset. If [`NextAssetId`] is set, then this must be equal to it.
   * - `owner`: The owner of this class of assets. The owner has full superuser permissions
   * over this asset, but may later change and configure the permissions using
   * `transfer_ownership` and `set_team`.
   * - `min_balance`: The minimum balance of this new asset that any single account must
   * have. If an account's balance is reduced below this, then it collapses to zero.
   *
   * Emits `ForceCreated` event when successful.
   *
   * Weight: `O(1)`
   **/
  | {
      name: 'ForceCreate';
      params: { id: StagingXcmV5Location; owner: MultiAddressLike; isSufficient: boolean; minBalance: bigint };
    }
  /**
   * Start the process of destroying a fungible asset class.
   *
   * `start_destroy` is the first in a series of extrinsics that should be called, to allow
   * destruction of an asset class.
   *
   * The origin must conform to `ForceOrigin` or must be `Signed` by the asset's `owner`.
   *
   * - `id`: The identifier of the asset to be destroyed. This must identify an existing
   * asset.
   *
   * It will fail with either [`Error::ContainsHolds`] or [`Error::ContainsFreezes`] if
   * an account contains holds or freezes in place.
   **/
  | { name: 'StartDestroy'; params: { id: StagingXcmV5Location } }
  /**
   * Destroy all accounts associated with a given asset.
   *
   * `destroy_accounts` should only be called after `start_destroy` has been called, and the
   * asset is in a `Destroying` state.
   *
   * Due to weight restrictions, this function may need to be called multiple times to fully
   * destroy all accounts. It will destroy `RemoveItemsLimit` accounts at a time.
   *
   * - `id`: The identifier of the asset to be destroyed. This must identify an existing
   * asset.
   *
   * Each call emits the `Event::DestroyedAccounts` event.
   **/
  | { name: 'DestroyAccounts'; params: { id: StagingXcmV5Location } }
  /**
   * Destroy all approvals associated with a given asset up to the max (T::RemoveItemsLimit).
   *
   * `destroy_approvals` should only be called after `start_destroy` has been called, and the
   * asset is in a `Destroying` state.
   *
   * Due to weight restrictions, this function may need to be called multiple times to fully
   * destroy all approvals. It will destroy `RemoveItemsLimit` approvals at a time.
   *
   * - `id`: The identifier of the asset to be destroyed. This must identify an existing
   * asset.
   *
   * Each call emits the `Event::DestroyedApprovals` event.
   **/
  | { name: 'DestroyApprovals'; params: { id: StagingXcmV5Location } }
  /**
   * Complete destroying asset and unreserve currency.
   *
   * `finish_destroy` should only be called after `start_destroy` has been called, and the
   * asset is in a `Destroying` state. All accounts or approvals should be destroyed before
   * hand.
   *
   * - `id`: The identifier of the asset to be destroyed. This must identify an existing
   * asset.
   *
   * Each successful call emits the `Event::Destroyed` event.
   **/
  | { name: 'FinishDestroy'; params: { id: StagingXcmV5Location } }
  /**
   * Mint assets of a particular class.
   *
   * The origin must be Signed and the sender must be the Issuer of the asset `id`.
   *
   * - `id`: The identifier of the asset to have some amount minted.
   * - `beneficiary`: The account to be credited with the minted assets.
   * - `amount`: The amount of the asset to be minted.
   *
   * Emits `Issued` event when successful.
   *
   * Weight: `O(1)`
   * Modes: Pre-existing balance of `beneficiary`; Account pre-existence of `beneficiary`.
   **/
  | { name: 'Mint'; params: { id: StagingXcmV5Location; beneficiary: MultiAddressLike; amount: bigint } }
  /**
   * Reduce the balance of `who` by as much as possible up to `amount` assets of `id`.
   *
   * Origin must be Signed and the sender should be the Manager of the asset `id`.
   *
   * Bails with `NoAccount` if the `who` is already dead.
   *
   * - `id`: The identifier of the asset to have some amount burned.
   * - `who`: The account to be debited from.
   * - `amount`: The maximum amount by which `who`'s balance should be reduced.
   *
   * Emits `Burned` with the actual amount burned. If this takes the balance to below the
   * minimum for the asset, then the amount burned is increased to take it to zero.
   *
   * Weight: `O(1)`
   * Modes: Post-existence of `who`; Pre & post Zombie-status of `who`.
   **/
  | { name: 'Burn'; params: { id: StagingXcmV5Location; who: MultiAddressLike; amount: bigint } }
  /**
   * Move some assets from the sender account to another.
   *
   * Origin must be Signed.
   *
   * - `id`: The identifier of the asset to have some amount transferred.
   * - `target`: The account to be credited.
   * - `amount`: The amount by which the sender's balance of assets should be reduced and
   * `target`'s balance increased. The amount actually transferred may be slightly greater in
   * the case that the transfer would otherwise take the sender balance above zero but below
   * the minimum balance. Must be greater than zero.
   *
   * Emits `Transferred` with the actual amount transferred. If this takes the source balance
   * to below the minimum for the asset, then the amount transferred is increased to take it
   * to zero.
   *
   * Weight: `O(1)`
   * Modes: Pre-existence of `target`; Post-existence of sender; Account pre-existence of
   * `target`.
   **/
  | { name: 'Transfer'; params: { id: StagingXcmV5Location; target: MultiAddressLike; amount: bigint } }
  /**
   * Move some assets from the sender account to another, keeping the sender account alive.
   *
   * Origin must be Signed.
   *
   * - `id`: The identifier of the asset to have some amount transferred.
   * - `target`: The account to be credited.
   * - `amount`: The amount by which the sender's balance of assets should be reduced and
   * `target`'s balance increased. The amount actually transferred may be slightly greater in
   * the case that the transfer would otherwise take the sender balance above zero but below
   * the minimum balance. Must be greater than zero.
   *
   * Emits `Transferred` with the actual amount transferred. If this takes the source balance
   * to below the minimum for the asset, then the amount transferred is increased to take it
   * to zero.
   *
   * Weight: `O(1)`
   * Modes: Pre-existence of `target`; Post-existence of sender; Account pre-existence of
   * `target`.
   **/
  | { name: 'TransferKeepAlive'; params: { id: StagingXcmV5Location; target: MultiAddressLike; amount: bigint } }
  /**
   * Move some assets from one account to another.
   *
   * Origin must be Signed and the sender should be the Admin of the asset `id`.
   *
   * - `id`: The identifier of the asset to have some amount transferred.
   * - `source`: The account to be debited.
   * - `dest`: The account to be credited.
   * - `amount`: The amount by which the `source`'s balance of assets should be reduced and
   * `dest`'s balance increased. The amount actually transferred may be slightly greater in
   * the case that the transfer would otherwise take the `source` balance above zero but
   * below the minimum balance. Must be greater than zero.
   *
   * Emits `Transferred` with the actual amount transferred. If this takes the source balance
   * to below the minimum for the asset, then the amount transferred is increased to take it
   * to zero.
   *
   * Weight: `O(1)`
   * Modes: Pre-existence of `dest`; Post-existence of `source`; Account pre-existence of
   * `dest`.
   **/
  | {
      name: 'ForceTransfer';
      params: { id: StagingXcmV5Location; source: MultiAddressLike; dest: MultiAddressLike; amount: bigint };
    }
  /**
   * Disallow further unprivileged transfers of an asset `id` from an account `who`. `who`
   * must already exist as an entry in `Account`s of the asset. If you want to freeze an
   * account that does not have an entry, use `touch_other` first.
   *
   * Origin must be Signed and the sender should be the Freezer of the asset `id`.
   *
   * - `id`: The identifier of the asset to be frozen.
   * - `who`: The account to be frozen.
   *
   * Emits `Frozen`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'Freeze'; params: { id: StagingXcmV5Location; who: MultiAddressLike } }
  /**
   * Allow unprivileged transfers to and from an account again.
   *
   * Origin must be Signed and the sender should be the Admin of the asset `id`.
   *
   * - `id`: The identifier of the asset to be frozen.
   * - `who`: The account to be unfrozen.
   *
   * Emits `Thawed`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'Thaw'; params: { id: StagingXcmV5Location; who: MultiAddressLike } }
  /**
   * Disallow further unprivileged transfers for the asset class.
   *
   * Origin must be Signed and the sender should be the Freezer of the asset `id`.
   *
   * - `id`: The identifier of the asset to be frozen.
   *
   * Emits `Frozen`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'FreezeAsset'; params: { id: StagingXcmV5Location } }
  /**
   * Allow unprivileged transfers for the asset again.
   *
   * Origin must be Signed and the sender should be the Admin of the asset `id`.
   *
   * - `id`: The identifier of the asset to be thawed.
   *
   * Emits `Thawed`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'ThawAsset'; params: { id: StagingXcmV5Location } }
  /**
   * Change the Owner of an asset.
   *
   * Origin must be Signed and the sender should be the Owner of the asset `id`.
   *
   * - `id`: The identifier of the asset.
   * - `owner`: The new Owner of this asset.
   *
   * Emits `OwnerChanged`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'TransferOwnership'; params: { id: StagingXcmV5Location; owner: MultiAddressLike } }
  /**
   * Change the Issuer, Admin and Freezer of an asset.
   *
   * Origin must be Signed and the sender should be the Owner of the asset `id`.
   *
   * - `id`: The identifier of the asset to be frozen.
   * - `issuer`: The new Issuer of this asset.
   * - `admin`: The new Admin of this asset.
   * - `freezer`: The new Freezer of this asset.
   *
   * Emits `TeamChanged`.
   *
   * Weight: `O(1)`
   **/
  | {
      name: 'SetTeam';
      params: {
        id: StagingXcmV5Location;
        issuer: MultiAddressLike;
        admin: MultiAddressLike;
        freezer: MultiAddressLike;
      };
    }
  /**
   * Set the metadata for an asset.
   *
   * Origin must be Signed and the sender should be the Owner of the asset `id`.
   *
   * Funds of sender are reserved according to the formula:
   * `MetadataDepositBase + MetadataDepositPerByte * (name.len + symbol.len)` taking into
   * account any already reserved funds.
   *
   * - `id`: The identifier of the asset to update.
   * - `name`: The user friendly name of this asset. Limited in length by `StringLimit`.
   * - `symbol`: The exchange symbol for this asset. Limited in length by `StringLimit`.
   * - `decimals`: The number of decimals this asset uses to represent one unit.
   *
   * Emits `MetadataSet`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'SetMetadata'; params: { id: StagingXcmV5Location; name: BytesLike; symbol: BytesLike; decimals: number } }
  /**
   * Clear the metadata for an asset.
   *
   * Origin must be Signed and the sender should be the Owner of the asset `id`.
   *
   * Any deposit is freed for the asset owner.
   *
   * - `id`: The identifier of the asset to clear.
   *
   * Emits `MetadataCleared`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'ClearMetadata'; params: { id: StagingXcmV5Location } }
  /**
   * Force the metadata for an asset to some value.
   *
   * Origin must be ForceOrigin.
   *
   * Any deposit is left alone.
   *
   * - `id`: The identifier of the asset to update.
   * - `name`: The user friendly name of this asset. Limited in length by `StringLimit`.
   * - `symbol`: The exchange symbol for this asset. Limited in length by `StringLimit`.
   * - `decimals`: The number of decimals this asset uses to represent one unit.
   *
   * Emits `MetadataSet`.
   *
   * Weight: `O(N + S)` where N and S are the length of the name and symbol respectively.
   **/
  | {
      name: 'ForceSetMetadata';
      params: { id: StagingXcmV5Location; name: BytesLike; symbol: BytesLike; decimals: number; isFrozen: boolean };
    }
  /**
   * Clear the metadata for an asset.
   *
   * Origin must be ForceOrigin.
   *
   * Any deposit is returned.
   *
   * - `id`: The identifier of the asset to clear.
   *
   * Emits `MetadataCleared`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'ForceClearMetadata'; params: { id: StagingXcmV5Location } }
  /**
   * Alter the attributes of a given asset.
   *
   * Origin must be `ForceOrigin`.
   *
   * - `id`: The identifier of the asset.
   * - `owner`: The new Owner of this asset.
   * - `issuer`: The new Issuer of this asset.
   * - `admin`: The new Admin of this asset.
   * - `freezer`: The new Freezer of this asset.
   * - `min_balance`: The minimum balance of this new asset that any single account must
   * have. If an account's balance is reduced below this, then it collapses to zero.
   * - `is_sufficient`: Whether a non-zero balance of this asset is deposit of sufficient
   * value to account for the state bloat associated with its balance storage. If set to
   * `true`, then non-zero balances may be stored without a `consumer` reference (and thus
   * an ED in the Balances pallet or whatever else is used to control user-account state
   * growth).
   * - `is_frozen`: Whether this asset class is frozen except for permissioned/admin
   * instructions.
   *
   * Emits `AssetStatusChanged` with the identity of the asset.
   *
   * Weight: `O(1)`
   **/
  | {
      name: 'ForceAssetStatus';
      params: {
        id: StagingXcmV5Location;
        owner: MultiAddressLike;
        issuer: MultiAddressLike;
        admin: MultiAddressLike;
        freezer: MultiAddressLike;
        minBalance: bigint;
        isSufficient: boolean;
        isFrozen: boolean;
      };
    }
  /**
   * Approve an amount of asset for transfer by a delegated third-party account.
   *
   * Origin must be Signed.
   *
   * Ensures that `ApprovalDeposit` worth of `Currency` is reserved from signing account
   * for the purpose of holding the approval. If some non-zero amount of assets is already
   * approved from signing account to `delegate`, then it is topped up or unreserved to
   * meet the right value.
   *
   * NOTE: The signing account does not need to own `amount` of assets at the point of
   * making this call.
   *
   * - `id`: The identifier of the asset.
   * - `delegate`: The account to delegate permission to transfer asset.
   * - `amount`: The amount of asset that may be transferred by `delegate`. If there is
   * already an approval in place, then this acts additively.
   *
   * Emits `ApprovedTransfer` on success.
   *
   * Weight: `O(1)`
   **/
  | { name: 'ApproveTransfer'; params: { id: StagingXcmV5Location; delegate: MultiAddressLike; amount: bigint } }
  /**
   * Cancel all of some asset approved for delegated transfer by a third-party account.
   *
   * Origin must be Signed and there must be an approval in place between signer and
   * `delegate`.
   *
   * Unreserves any deposit previously reserved by `approve_transfer` for the approval.
   *
   * - `id`: The identifier of the asset.
   * - `delegate`: The account delegated permission to transfer asset.
   *
   * Emits `ApprovalCancelled` on success.
   *
   * Weight: `O(1)`
   **/
  | { name: 'CancelApproval'; params: { id: StagingXcmV5Location; delegate: MultiAddressLike } }
  /**
   * Cancel all of some asset approved for delegated transfer by a third-party account.
   *
   * Origin must be either ForceOrigin or Signed origin with the signer being the Admin
   * account of the asset `id`.
   *
   * Unreserves any deposit previously reserved by `approve_transfer` for the approval.
   *
   * - `id`: The identifier of the asset.
   * - `delegate`: The account delegated permission to transfer asset.
   *
   * Emits `ApprovalCancelled` on success.
   *
   * Weight: `O(1)`
   **/
  | {
      name: 'ForceCancelApproval';
      params: { id: StagingXcmV5Location; owner: MultiAddressLike; delegate: MultiAddressLike };
    }
  /**
   * Transfer some asset balance from a previously delegated account to some third-party
   * account.
   *
   * Origin must be Signed and there must be an approval in place by the `owner` to the
   * signer.
   *
   * If the entire amount approved for transfer is transferred, then any deposit previously
   * reserved by `approve_transfer` is unreserved.
   *
   * - `id`: The identifier of the asset.
   * - `owner`: The account which previously approved for a transfer of at least `amount` and
   * from which the asset balance will be withdrawn.
   * - `destination`: The account to which the asset balance of `amount` will be transferred.
   * - `amount`: The amount of assets to transfer.
   *
   * Emits `TransferredApproved` on success.
   *
   * Weight: `O(1)`
   **/
  | {
      name: 'TransferApproved';
      params: { id: StagingXcmV5Location; owner: MultiAddressLike; destination: MultiAddressLike; amount: bigint };
    }
  /**
   * Create an asset account for non-provider assets.
   *
   * A deposit will be taken from the signer account.
   *
   * - `origin`: Must be Signed; the signer account must have sufficient funds for a deposit
   * to be taken.
   * - `id`: The identifier of the asset for the account to be created.
   *
   * Emits `Touched` event when successful.
   **/
  | { name: 'Touch'; params: { id: StagingXcmV5Location } }
  /**
   * Return the deposit (if any) of an asset account or a consumer reference (if any) of an
   * account.
   *
   * The origin must be Signed.
   *
   * - `id`: The identifier of the asset for which the caller would like the deposit
   * refunded.
   * - `allow_burn`: If `true` then assets may be destroyed in order to complete the refund.
   *
   * It will fail with either [`Error::ContainsHolds`] or [`Error::ContainsFreezes`] if
   * the asset account contains holds or freezes in place.
   *
   * Emits `Refunded` event when successful.
   **/
  | { name: 'Refund'; params: { id: StagingXcmV5Location; allowBurn: boolean } }
  /**
   * Sets the minimum balance of an asset.
   *
   * Only works if there aren't any accounts that are holding the asset or if
   * the new value of `min_balance` is less than the old one.
   *
   * Origin must be Signed and the sender has to be the Owner of the
   * asset `id`.
   *
   * - `id`: The identifier of the asset.
   * - `min_balance`: The new value of `min_balance`.
   *
   * Emits `AssetMinBalanceChanged` event when successful.
   **/
  | { name: 'SetMinBalance'; params: { id: StagingXcmV5Location; minBalance: bigint } }
  /**
   * Create an asset account for `who`.
   *
   * A deposit will be taken from the signer account.
   *
   * - `origin`: Must be Signed by `Freezer` or `Admin` of the asset `id`; the signer account
   * must have sufficient funds for a deposit to be taken.
   * - `id`: The identifier of the asset for the account to be created.
   * - `who`: The account to be created.
   *
   * Emits `Touched` event when successful.
   **/
  | { name: 'TouchOther'; params: { id: StagingXcmV5Location; who: MultiAddressLike } }
  /**
   * Return the deposit (if any) of a target asset account. Useful if you are the depositor.
   *
   * The origin must be Signed and either the account owner, depositor, or asset `Admin`. In
   * order to burn a non-zero balance of the asset, the caller must be the account and should
   * use `refund`.
   *
   * - `id`: The identifier of the asset for the account holding a deposit.
   * - `who`: The account to refund.
   *
   * It will fail with either [`Error::ContainsHolds`] or [`Error::ContainsFreezes`] if
   * the asset account contains holds or freezes in place.
   *
   * Emits `Refunded` event when successful.
   **/
  | { name: 'RefundOther'; params: { id: StagingXcmV5Location; who: MultiAddressLike } }
  /**
   * Disallow further unprivileged transfers of an asset `id` to and from an account `who`.
   *
   * Origin must be Signed and the sender should be the Freezer of the asset `id`.
   *
   * - `id`: The identifier of the account's asset.
   * - `who`: The account to be unblocked.
   *
   * Emits `Blocked`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'Block'; params: { id: StagingXcmV5Location; who: MultiAddressLike } }
  /**
   * Transfer the entire transferable balance from the caller asset account.
   *
   * NOTE: This function only attempts to transfer _transferable_ balances. This means that
   * any held, frozen, or minimum balance (when `keep_alive` is `true`), will not be
   * transferred by this function. To ensure that this function results in a killed account,
   * you might need to prepare the account by removing any reference counters, storage
   * deposits, etc...
   *
   * The dispatch origin of this call must be Signed.
   *
   * - `id`: The identifier of the asset for the account holding a deposit.
   * - `dest`: The recipient of the transfer.
   * - `keep_alive`: A boolean to determine if the `transfer_all` operation should send all
   * of the funds the asset account has, causing the sender asset account to be killed
   * (false), or transfer everything except at least the minimum balance, which will
   * guarantee to keep the sender asset account alive (true).
   **/
  | { name: 'TransferAll'; params: { id: StagingXcmV5Location; dest: MultiAddressLike; keepAlive: boolean } };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletNftFractionalizationCall =
  /**
   * Lock the NFT and mint a new fungible asset.
   *
   * The dispatch origin for this call must be Signed.
   * The origin must be the owner of the NFT they are trying to lock.
   *
   * `Deposit` funds of sender are reserved.
   *
   * - `nft_collection_id`: The ID used to identify the collection of the NFT.
   * Is used within the context of `pallet_nfts`.
   * - `nft_id`: The ID used to identify the NFT within the given collection.
   * Is used within the context of `pallet_nfts`.
   * - `asset_id`: The ID of the new asset. It must not exist.
   * Is used within the context of `pallet_assets`.
   * - `beneficiary`: The account that will receive the newly created asset.
   * - `fractions`: The total issuance of the newly created asset class.
   *
   * Emits `NftFractionalized` event when successful.
   **/
  | {
      name: 'Fractionalize';
      params: { nftCollectionId: number; nftId: number; assetId: number; beneficiary: MultiAddress; fractions: bigint };
    }
  /**
   * Burn the total issuance of the fungible asset and return (unlock) the locked NFT.
   *
   * The dispatch origin for this call must be Signed.
   *
   * `Deposit` funds will be returned to `asset_creator`.
   *
   * - `nft_collection_id`: The ID used to identify the collection of the NFT.
   * Is used within the context of `pallet_nfts`.
   * - `nft_id`: The ID used to identify the NFT within the given collection.
   * Is used within the context of `pallet_nfts`.
   * - `asset_id`: The ID of the asset being returned and destroyed. Must match
   * the original ID of the created asset, corresponding to the NFT.
   * Is used within the context of `pallet_assets`.
   * - `beneficiary`: The account that will receive the unified NFT.
   *
   * Emits `NftUnified` event when successful.
   **/
  | { name: 'Unify'; params: { nftCollectionId: number; nftId: number; assetId: number; beneficiary: MultiAddress } };

export type PalletNftFractionalizationCallLike =
  /**
   * Lock the NFT and mint a new fungible asset.
   *
   * The dispatch origin for this call must be Signed.
   * The origin must be the owner of the NFT they are trying to lock.
   *
   * `Deposit` funds of sender are reserved.
   *
   * - `nft_collection_id`: The ID used to identify the collection of the NFT.
   * Is used within the context of `pallet_nfts`.
   * - `nft_id`: The ID used to identify the NFT within the given collection.
   * Is used within the context of `pallet_nfts`.
   * - `asset_id`: The ID of the new asset. It must not exist.
   * Is used within the context of `pallet_assets`.
   * - `beneficiary`: The account that will receive the newly created asset.
   * - `fractions`: The total issuance of the newly created asset class.
   *
   * Emits `NftFractionalized` event when successful.
   **/
  | {
      name: 'Fractionalize';
      params: {
        nftCollectionId: number;
        nftId: number;
        assetId: number;
        beneficiary: MultiAddressLike;
        fractions: bigint;
      };
    }
  /**
   * Burn the total issuance of the fungible asset and return (unlock) the locked NFT.
   *
   * The dispatch origin for this call must be Signed.
   *
   * `Deposit` funds will be returned to `asset_creator`.
   *
   * - `nft_collection_id`: The ID used to identify the collection of the NFT.
   * Is used within the context of `pallet_nfts`.
   * - `nft_id`: The ID used to identify the NFT within the given collection.
   * Is used within the context of `pallet_nfts`.
   * - `asset_id`: The ID of the asset being returned and destroyed. Must match
   * the original ID of the created asset, corresponding to the NFT.
   * Is used within the context of `pallet_assets`.
   * - `beneficiary`: The account that will receive the unified NFT.
   *
   * Emits `NftUnified` event when successful.
   **/
  | {
      name: 'Unify';
      params: { nftCollectionId: number; nftId: number; assetId: number; beneficiary: MultiAddressLike };
    };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletAssetsCall003 =
  /**
   * Issue a new class of fungible assets from a public origin.
   *
   * This new asset class has no assets initially and its owner is the origin.
   *
   * The origin must conform to the configured `CreateOrigin` and have sufficient funds free.
   *
   * Funds of sender are reserved by `AssetDeposit`.
   *
   * Parameters:
   * - `id`: The identifier of the new asset. This must not be currently in use to identify
   * an existing asset. If [`NextAssetId`] is set, then this must be equal to it.
   * - `admin`: The admin of this class of assets. The admin is the initial address of each
   * member of the asset class's admin team.
   * - `min_balance`: The minimum balance of this new asset that any single account must
   * have. If an account's balance is reduced below this, then it collapses to zero.
   *
   * Emits `Created` event when successful.
   *
   * Weight: `O(1)`
   **/
  | { name: 'Create'; params: { id: number; admin: MultiAddress; minBalance: bigint } }
  /**
   * Issue a new class of fungible assets from a privileged origin.
   *
   * This new asset class has no assets initially.
   *
   * The origin must conform to `ForceOrigin`.
   *
   * Unlike `create`, no funds are reserved.
   *
   * - `id`: The identifier of the new asset. This must not be currently in use to identify
   * an existing asset. If [`NextAssetId`] is set, then this must be equal to it.
   * - `owner`: The owner of this class of assets. The owner has full superuser permissions
   * over this asset, but may later change and configure the permissions using
   * `transfer_ownership` and `set_team`.
   * - `min_balance`: The minimum balance of this new asset that any single account must
   * have. If an account's balance is reduced below this, then it collapses to zero.
   *
   * Emits `ForceCreated` event when successful.
   *
   * Weight: `O(1)`
   **/
  | { name: 'ForceCreate'; params: { id: number; owner: MultiAddress; isSufficient: boolean; minBalance: bigint } }
  /**
   * Start the process of destroying a fungible asset class.
   *
   * `start_destroy` is the first in a series of extrinsics that should be called, to allow
   * destruction of an asset class.
   *
   * The origin must conform to `ForceOrigin` or must be `Signed` by the asset's `owner`.
   *
   * - `id`: The identifier of the asset to be destroyed. This must identify an existing
   * asset.
   *
   * It will fail with either [`Error::ContainsHolds`] or [`Error::ContainsFreezes`] if
   * an account contains holds or freezes in place.
   **/
  | { name: 'StartDestroy'; params: { id: number } }
  /**
   * Destroy all accounts associated with a given asset.
   *
   * `destroy_accounts` should only be called after `start_destroy` has been called, and the
   * asset is in a `Destroying` state.
   *
   * Due to weight restrictions, this function may need to be called multiple times to fully
   * destroy all accounts. It will destroy `RemoveItemsLimit` accounts at a time.
   *
   * - `id`: The identifier of the asset to be destroyed. This must identify an existing
   * asset.
   *
   * Each call emits the `Event::DestroyedAccounts` event.
   **/
  | { name: 'DestroyAccounts'; params: { id: number } }
  /**
   * Destroy all approvals associated with a given asset up to the max (T::RemoveItemsLimit).
   *
   * `destroy_approvals` should only be called after `start_destroy` has been called, and the
   * asset is in a `Destroying` state.
   *
   * Due to weight restrictions, this function may need to be called multiple times to fully
   * destroy all approvals. It will destroy `RemoveItemsLimit` approvals at a time.
   *
   * - `id`: The identifier of the asset to be destroyed. This must identify an existing
   * asset.
   *
   * Each call emits the `Event::DestroyedApprovals` event.
   **/
  | { name: 'DestroyApprovals'; params: { id: number } }
  /**
   * Complete destroying asset and unreserve currency.
   *
   * `finish_destroy` should only be called after `start_destroy` has been called, and the
   * asset is in a `Destroying` state. All accounts or approvals should be destroyed before
   * hand.
   *
   * - `id`: The identifier of the asset to be destroyed. This must identify an existing
   * asset.
   *
   * Each successful call emits the `Event::Destroyed` event.
   **/
  | { name: 'FinishDestroy'; params: { id: number } }
  /**
   * Mint assets of a particular class.
   *
   * The origin must be Signed and the sender must be the Issuer of the asset `id`.
   *
   * - `id`: The identifier of the asset to have some amount minted.
   * - `beneficiary`: The account to be credited with the minted assets.
   * - `amount`: The amount of the asset to be minted.
   *
   * Emits `Issued` event when successful.
   *
   * Weight: `O(1)`
   * Modes: Pre-existing balance of `beneficiary`; Account pre-existence of `beneficiary`.
   **/
  | { name: 'Mint'; params: { id: number; beneficiary: MultiAddress; amount: bigint } }
  /**
   * Reduce the balance of `who` by as much as possible up to `amount` assets of `id`.
   *
   * Origin must be Signed and the sender should be the Manager of the asset `id`.
   *
   * Bails with `NoAccount` if the `who` is already dead.
   *
   * - `id`: The identifier of the asset to have some amount burned.
   * - `who`: The account to be debited from.
   * - `amount`: The maximum amount by which `who`'s balance should be reduced.
   *
   * Emits `Burned` with the actual amount burned. If this takes the balance to below the
   * minimum for the asset, then the amount burned is increased to take it to zero.
   *
   * Weight: `O(1)`
   * Modes: Post-existence of `who`; Pre & post Zombie-status of `who`.
   **/
  | { name: 'Burn'; params: { id: number; who: MultiAddress; amount: bigint } }
  /**
   * Move some assets from the sender account to another.
   *
   * Origin must be Signed.
   *
   * - `id`: The identifier of the asset to have some amount transferred.
   * - `target`: The account to be credited.
   * - `amount`: The amount by which the sender's balance of assets should be reduced and
   * `target`'s balance increased. The amount actually transferred may be slightly greater in
   * the case that the transfer would otherwise take the sender balance above zero but below
   * the minimum balance. Must be greater than zero.
   *
   * Emits `Transferred` with the actual amount transferred. If this takes the source balance
   * to below the minimum for the asset, then the amount transferred is increased to take it
   * to zero.
   *
   * Weight: `O(1)`
   * Modes: Pre-existence of `target`; Post-existence of sender; Account pre-existence of
   * `target`.
   **/
  | { name: 'Transfer'; params: { id: number; target: MultiAddress; amount: bigint } }
  /**
   * Move some assets from the sender account to another, keeping the sender account alive.
   *
   * Origin must be Signed.
   *
   * - `id`: The identifier of the asset to have some amount transferred.
   * - `target`: The account to be credited.
   * - `amount`: The amount by which the sender's balance of assets should be reduced and
   * `target`'s balance increased. The amount actually transferred may be slightly greater in
   * the case that the transfer would otherwise take the sender balance above zero but below
   * the minimum balance. Must be greater than zero.
   *
   * Emits `Transferred` with the actual amount transferred. If this takes the source balance
   * to below the minimum for the asset, then the amount transferred is increased to take it
   * to zero.
   *
   * Weight: `O(1)`
   * Modes: Pre-existence of `target`; Post-existence of sender; Account pre-existence of
   * `target`.
   **/
  | { name: 'TransferKeepAlive'; params: { id: number; target: MultiAddress; amount: bigint } }
  /**
   * Move some assets from one account to another.
   *
   * Origin must be Signed and the sender should be the Admin of the asset `id`.
   *
   * - `id`: The identifier of the asset to have some amount transferred.
   * - `source`: The account to be debited.
   * - `dest`: The account to be credited.
   * - `amount`: The amount by which the `source`'s balance of assets should be reduced and
   * `dest`'s balance increased. The amount actually transferred may be slightly greater in
   * the case that the transfer would otherwise take the `source` balance above zero but
   * below the minimum balance. Must be greater than zero.
   *
   * Emits `Transferred` with the actual amount transferred. If this takes the source balance
   * to below the minimum for the asset, then the amount transferred is increased to take it
   * to zero.
   *
   * Weight: `O(1)`
   * Modes: Pre-existence of `dest`; Post-existence of `source`; Account pre-existence of
   * `dest`.
   **/
  | { name: 'ForceTransfer'; params: { id: number; source: MultiAddress; dest: MultiAddress; amount: bigint } }
  /**
   * Disallow further unprivileged transfers of an asset `id` from an account `who`. `who`
   * must already exist as an entry in `Account`s of the asset. If you want to freeze an
   * account that does not have an entry, use `touch_other` first.
   *
   * Origin must be Signed and the sender should be the Freezer of the asset `id`.
   *
   * - `id`: The identifier of the asset to be frozen.
   * - `who`: The account to be frozen.
   *
   * Emits `Frozen`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'Freeze'; params: { id: number; who: MultiAddress } }
  /**
   * Allow unprivileged transfers to and from an account again.
   *
   * Origin must be Signed and the sender should be the Admin of the asset `id`.
   *
   * - `id`: The identifier of the asset to be frozen.
   * - `who`: The account to be unfrozen.
   *
   * Emits `Thawed`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'Thaw'; params: { id: number; who: MultiAddress } }
  /**
   * Disallow further unprivileged transfers for the asset class.
   *
   * Origin must be Signed and the sender should be the Freezer of the asset `id`.
   *
   * - `id`: The identifier of the asset to be frozen.
   *
   * Emits `Frozen`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'FreezeAsset'; params: { id: number } }
  /**
   * Allow unprivileged transfers for the asset again.
   *
   * Origin must be Signed and the sender should be the Admin of the asset `id`.
   *
   * - `id`: The identifier of the asset to be thawed.
   *
   * Emits `Thawed`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'ThawAsset'; params: { id: number } }
  /**
   * Change the Owner of an asset.
   *
   * Origin must be Signed and the sender should be the Owner of the asset `id`.
   *
   * - `id`: The identifier of the asset.
   * - `owner`: The new Owner of this asset.
   *
   * Emits `OwnerChanged`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'TransferOwnership'; params: { id: number; owner: MultiAddress } }
  /**
   * Change the Issuer, Admin and Freezer of an asset.
   *
   * Origin must be Signed and the sender should be the Owner of the asset `id`.
   *
   * - `id`: The identifier of the asset to be frozen.
   * - `issuer`: The new Issuer of this asset.
   * - `admin`: The new Admin of this asset.
   * - `freezer`: The new Freezer of this asset.
   *
   * Emits `TeamChanged`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'SetTeam'; params: { id: number; issuer: MultiAddress; admin: MultiAddress; freezer: MultiAddress } }
  /**
   * Set the metadata for an asset.
   *
   * Origin must be Signed and the sender should be the Owner of the asset `id`.
   *
   * Funds of sender are reserved according to the formula:
   * `MetadataDepositBase + MetadataDepositPerByte * (name.len + symbol.len)` taking into
   * account any already reserved funds.
   *
   * - `id`: The identifier of the asset to update.
   * - `name`: The user friendly name of this asset. Limited in length by `StringLimit`.
   * - `symbol`: The exchange symbol for this asset. Limited in length by `StringLimit`.
   * - `decimals`: The number of decimals this asset uses to represent one unit.
   *
   * Emits `MetadataSet`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'SetMetadata'; params: { id: number; name: Bytes; symbol: Bytes; decimals: number } }
  /**
   * Clear the metadata for an asset.
   *
   * Origin must be Signed and the sender should be the Owner of the asset `id`.
   *
   * Any deposit is freed for the asset owner.
   *
   * - `id`: The identifier of the asset to clear.
   *
   * Emits `MetadataCleared`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'ClearMetadata'; params: { id: number } }
  /**
   * Force the metadata for an asset to some value.
   *
   * Origin must be ForceOrigin.
   *
   * Any deposit is left alone.
   *
   * - `id`: The identifier of the asset to update.
   * - `name`: The user friendly name of this asset. Limited in length by `StringLimit`.
   * - `symbol`: The exchange symbol for this asset. Limited in length by `StringLimit`.
   * - `decimals`: The number of decimals this asset uses to represent one unit.
   *
   * Emits `MetadataSet`.
   *
   * Weight: `O(N + S)` where N and S are the length of the name and symbol respectively.
   **/
  | {
      name: 'ForceSetMetadata';
      params: { id: number; name: Bytes; symbol: Bytes; decimals: number; isFrozen: boolean };
    }
  /**
   * Clear the metadata for an asset.
   *
   * Origin must be ForceOrigin.
   *
   * Any deposit is returned.
   *
   * - `id`: The identifier of the asset to clear.
   *
   * Emits `MetadataCleared`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'ForceClearMetadata'; params: { id: number } }
  /**
   * Alter the attributes of a given asset.
   *
   * Origin must be `ForceOrigin`.
   *
   * - `id`: The identifier of the asset.
   * - `owner`: The new Owner of this asset.
   * - `issuer`: The new Issuer of this asset.
   * - `admin`: The new Admin of this asset.
   * - `freezer`: The new Freezer of this asset.
   * - `min_balance`: The minimum balance of this new asset that any single account must
   * have. If an account's balance is reduced below this, then it collapses to zero.
   * - `is_sufficient`: Whether a non-zero balance of this asset is deposit of sufficient
   * value to account for the state bloat associated with its balance storage. If set to
   * `true`, then non-zero balances may be stored without a `consumer` reference (and thus
   * an ED in the Balances pallet or whatever else is used to control user-account state
   * growth).
   * - `is_frozen`: Whether this asset class is frozen except for permissioned/admin
   * instructions.
   *
   * Emits `AssetStatusChanged` with the identity of the asset.
   *
   * Weight: `O(1)`
   **/
  | {
      name: 'ForceAssetStatus';
      params: {
        id: number;
        owner: MultiAddress;
        issuer: MultiAddress;
        admin: MultiAddress;
        freezer: MultiAddress;
        minBalance: bigint;
        isSufficient: boolean;
        isFrozen: boolean;
      };
    }
  /**
   * Approve an amount of asset for transfer by a delegated third-party account.
   *
   * Origin must be Signed.
   *
   * Ensures that `ApprovalDeposit` worth of `Currency` is reserved from signing account
   * for the purpose of holding the approval. If some non-zero amount of assets is already
   * approved from signing account to `delegate`, then it is topped up or unreserved to
   * meet the right value.
   *
   * NOTE: The signing account does not need to own `amount` of assets at the point of
   * making this call.
   *
   * - `id`: The identifier of the asset.
   * - `delegate`: The account to delegate permission to transfer asset.
   * - `amount`: The amount of asset that may be transferred by `delegate`. If there is
   * already an approval in place, then this acts additively.
   *
   * Emits `ApprovedTransfer` on success.
   *
   * Weight: `O(1)`
   **/
  | { name: 'ApproveTransfer'; params: { id: number; delegate: MultiAddress; amount: bigint } }
  /**
   * Cancel all of some asset approved for delegated transfer by a third-party account.
   *
   * Origin must be Signed and there must be an approval in place between signer and
   * `delegate`.
   *
   * Unreserves any deposit previously reserved by `approve_transfer` for the approval.
   *
   * - `id`: The identifier of the asset.
   * - `delegate`: The account delegated permission to transfer asset.
   *
   * Emits `ApprovalCancelled` on success.
   *
   * Weight: `O(1)`
   **/
  | { name: 'CancelApproval'; params: { id: number; delegate: MultiAddress } }
  /**
   * Cancel all of some asset approved for delegated transfer by a third-party account.
   *
   * Origin must be either ForceOrigin or Signed origin with the signer being the Admin
   * account of the asset `id`.
   *
   * Unreserves any deposit previously reserved by `approve_transfer` for the approval.
   *
   * - `id`: The identifier of the asset.
   * - `delegate`: The account delegated permission to transfer asset.
   *
   * Emits `ApprovalCancelled` on success.
   *
   * Weight: `O(1)`
   **/
  | { name: 'ForceCancelApproval'; params: { id: number; owner: MultiAddress; delegate: MultiAddress } }
  /**
   * Transfer some asset balance from a previously delegated account to some third-party
   * account.
   *
   * Origin must be Signed and there must be an approval in place by the `owner` to the
   * signer.
   *
   * If the entire amount approved for transfer is transferred, then any deposit previously
   * reserved by `approve_transfer` is unreserved.
   *
   * - `id`: The identifier of the asset.
   * - `owner`: The account which previously approved for a transfer of at least `amount` and
   * from which the asset balance will be withdrawn.
   * - `destination`: The account to which the asset balance of `amount` will be transferred.
   * - `amount`: The amount of assets to transfer.
   *
   * Emits `TransferredApproved` on success.
   *
   * Weight: `O(1)`
   **/
  | { name: 'TransferApproved'; params: { id: number; owner: MultiAddress; destination: MultiAddress; amount: bigint } }
  /**
   * Create an asset account for non-provider assets.
   *
   * A deposit will be taken from the signer account.
   *
   * - `origin`: Must be Signed; the signer account must have sufficient funds for a deposit
   * to be taken.
   * - `id`: The identifier of the asset for the account to be created.
   *
   * Emits `Touched` event when successful.
   **/
  | { name: 'Touch'; params: { id: number } }
  /**
   * Return the deposit (if any) of an asset account or a consumer reference (if any) of an
   * account.
   *
   * The origin must be Signed.
   *
   * - `id`: The identifier of the asset for which the caller would like the deposit
   * refunded.
   * - `allow_burn`: If `true` then assets may be destroyed in order to complete the refund.
   *
   * It will fail with either [`Error::ContainsHolds`] or [`Error::ContainsFreezes`] if
   * the asset account contains holds or freezes in place.
   *
   * Emits `Refunded` event when successful.
   **/
  | { name: 'Refund'; params: { id: number; allowBurn: boolean } }
  /**
   * Sets the minimum balance of an asset.
   *
   * Only works if there aren't any accounts that are holding the asset or if
   * the new value of `min_balance` is less than the old one.
   *
   * Origin must be Signed and the sender has to be the Owner of the
   * asset `id`.
   *
   * - `id`: The identifier of the asset.
   * - `min_balance`: The new value of `min_balance`.
   *
   * Emits `AssetMinBalanceChanged` event when successful.
   **/
  | { name: 'SetMinBalance'; params: { id: number; minBalance: bigint } }
  /**
   * Create an asset account for `who`.
   *
   * A deposit will be taken from the signer account.
   *
   * - `origin`: Must be Signed by `Freezer` or `Admin` of the asset `id`; the signer account
   * must have sufficient funds for a deposit to be taken.
   * - `id`: The identifier of the asset for the account to be created.
   * - `who`: The account to be created.
   *
   * Emits `Touched` event when successful.
   **/
  | { name: 'TouchOther'; params: { id: number; who: MultiAddress } }
  /**
   * Return the deposit (if any) of a target asset account. Useful if you are the depositor.
   *
   * The origin must be Signed and either the account owner, depositor, or asset `Admin`. In
   * order to burn a non-zero balance of the asset, the caller must be the account and should
   * use `refund`.
   *
   * - `id`: The identifier of the asset for the account holding a deposit.
   * - `who`: The account to refund.
   *
   * It will fail with either [`Error::ContainsHolds`] or [`Error::ContainsFreezes`] if
   * the asset account contains holds or freezes in place.
   *
   * Emits `Refunded` event when successful.
   **/
  | { name: 'RefundOther'; params: { id: number; who: MultiAddress } }
  /**
   * Disallow further unprivileged transfers of an asset `id` to and from an account `who`.
   *
   * Origin must be Signed and the sender should be the Freezer of the asset `id`.
   *
   * - `id`: The identifier of the account's asset.
   * - `who`: The account to be unblocked.
   *
   * Emits `Blocked`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'Block'; params: { id: number; who: MultiAddress } }
  /**
   * Transfer the entire transferable balance from the caller asset account.
   *
   * NOTE: This function only attempts to transfer _transferable_ balances. This means that
   * any held, frozen, or minimum balance (when `keep_alive` is `true`), will not be
   * transferred by this function. To ensure that this function results in a killed account,
   * you might need to prepare the account by removing any reference counters, storage
   * deposits, etc...
   *
   * The dispatch origin of this call must be Signed.
   *
   * - `id`: The identifier of the asset for the account holding a deposit.
   * - `dest`: The recipient of the transfer.
   * - `keep_alive`: A boolean to determine if the `transfer_all` operation should send all
   * of the funds the asset account has, causing the sender asset account to be killed
   * (false), or transfer everything except at least the minimum balance, which will
   * guarantee to keep the sender asset account alive (true).
   **/
  | { name: 'TransferAll'; params: { id: number; dest: MultiAddress; keepAlive: boolean } };

export type PalletAssetsCallLike003 =
  /**
   * Issue a new class of fungible assets from a public origin.
   *
   * This new asset class has no assets initially and its owner is the origin.
   *
   * The origin must conform to the configured `CreateOrigin` and have sufficient funds free.
   *
   * Funds of sender are reserved by `AssetDeposit`.
   *
   * Parameters:
   * - `id`: The identifier of the new asset. This must not be currently in use to identify
   * an existing asset. If [`NextAssetId`] is set, then this must be equal to it.
   * - `admin`: The admin of this class of assets. The admin is the initial address of each
   * member of the asset class's admin team.
   * - `min_balance`: The minimum balance of this new asset that any single account must
   * have. If an account's balance is reduced below this, then it collapses to zero.
   *
   * Emits `Created` event when successful.
   *
   * Weight: `O(1)`
   **/
  | { name: 'Create'; params: { id: number; admin: MultiAddressLike; minBalance: bigint } }
  /**
   * Issue a new class of fungible assets from a privileged origin.
   *
   * This new asset class has no assets initially.
   *
   * The origin must conform to `ForceOrigin`.
   *
   * Unlike `create`, no funds are reserved.
   *
   * - `id`: The identifier of the new asset. This must not be currently in use to identify
   * an existing asset. If [`NextAssetId`] is set, then this must be equal to it.
   * - `owner`: The owner of this class of assets. The owner has full superuser permissions
   * over this asset, but may later change and configure the permissions using
   * `transfer_ownership` and `set_team`.
   * - `min_balance`: The minimum balance of this new asset that any single account must
   * have. If an account's balance is reduced below this, then it collapses to zero.
   *
   * Emits `ForceCreated` event when successful.
   *
   * Weight: `O(1)`
   **/
  | { name: 'ForceCreate'; params: { id: number; owner: MultiAddressLike; isSufficient: boolean; minBalance: bigint } }
  /**
   * Start the process of destroying a fungible asset class.
   *
   * `start_destroy` is the first in a series of extrinsics that should be called, to allow
   * destruction of an asset class.
   *
   * The origin must conform to `ForceOrigin` or must be `Signed` by the asset's `owner`.
   *
   * - `id`: The identifier of the asset to be destroyed. This must identify an existing
   * asset.
   *
   * It will fail with either [`Error::ContainsHolds`] or [`Error::ContainsFreezes`] if
   * an account contains holds or freezes in place.
   **/
  | { name: 'StartDestroy'; params: { id: number } }
  /**
   * Destroy all accounts associated with a given asset.
   *
   * `destroy_accounts` should only be called after `start_destroy` has been called, and the
   * asset is in a `Destroying` state.
   *
   * Due to weight restrictions, this function may need to be called multiple times to fully
   * destroy all accounts. It will destroy `RemoveItemsLimit` accounts at a time.
   *
   * - `id`: The identifier of the asset to be destroyed. This must identify an existing
   * asset.
   *
   * Each call emits the `Event::DestroyedAccounts` event.
   **/
  | { name: 'DestroyAccounts'; params: { id: number } }
  /**
   * Destroy all approvals associated with a given asset up to the max (T::RemoveItemsLimit).
   *
   * `destroy_approvals` should only be called after `start_destroy` has been called, and the
   * asset is in a `Destroying` state.
   *
   * Due to weight restrictions, this function may need to be called multiple times to fully
   * destroy all approvals. It will destroy `RemoveItemsLimit` approvals at a time.
   *
   * - `id`: The identifier of the asset to be destroyed. This must identify an existing
   * asset.
   *
   * Each call emits the `Event::DestroyedApprovals` event.
   **/
  | { name: 'DestroyApprovals'; params: { id: number } }
  /**
   * Complete destroying asset and unreserve currency.
   *
   * `finish_destroy` should only be called after `start_destroy` has been called, and the
   * asset is in a `Destroying` state. All accounts or approvals should be destroyed before
   * hand.
   *
   * - `id`: The identifier of the asset to be destroyed. This must identify an existing
   * asset.
   *
   * Each successful call emits the `Event::Destroyed` event.
   **/
  | { name: 'FinishDestroy'; params: { id: number } }
  /**
   * Mint assets of a particular class.
   *
   * The origin must be Signed and the sender must be the Issuer of the asset `id`.
   *
   * - `id`: The identifier of the asset to have some amount minted.
   * - `beneficiary`: The account to be credited with the minted assets.
   * - `amount`: The amount of the asset to be minted.
   *
   * Emits `Issued` event when successful.
   *
   * Weight: `O(1)`
   * Modes: Pre-existing balance of `beneficiary`; Account pre-existence of `beneficiary`.
   **/
  | { name: 'Mint'; params: { id: number; beneficiary: MultiAddressLike; amount: bigint } }
  /**
   * Reduce the balance of `who` by as much as possible up to `amount` assets of `id`.
   *
   * Origin must be Signed and the sender should be the Manager of the asset `id`.
   *
   * Bails with `NoAccount` if the `who` is already dead.
   *
   * - `id`: The identifier of the asset to have some amount burned.
   * - `who`: The account to be debited from.
   * - `amount`: The maximum amount by which `who`'s balance should be reduced.
   *
   * Emits `Burned` with the actual amount burned. If this takes the balance to below the
   * minimum for the asset, then the amount burned is increased to take it to zero.
   *
   * Weight: `O(1)`
   * Modes: Post-existence of `who`; Pre & post Zombie-status of `who`.
   **/
  | { name: 'Burn'; params: { id: number; who: MultiAddressLike; amount: bigint } }
  /**
   * Move some assets from the sender account to another.
   *
   * Origin must be Signed.
   *
   * - `id`: The identifier of the asset to have some amount transferred.
   * - `target`: The account to be credited.
   * - `amount`: The amount by which the sender's balance of assets should be reduced and
   * `target`'s balance increased. The amount actually transferred may be slightly greater in
   * the case that the transfer would otherwise take the sender balance above zero but below
   * the minimum balance. Must be greater than zero.
   *
   * Emits `Transferred` with the actual amount transferred. If this takes the source balance
   * to below the minimum for the asset, then the amount transferred is increased to take it
   * to zero.
   *
   * Weight: `O(1)`
   * Modes: Pre-existence of `target`; Post-existence of sender; Account pre-existence of
   * `target`.
   **/
  | { name: 'Transfer'; params: { id: number; target: MultiAddressLike; amount: bigint } }
  /**
   * Move some assets from the sender account to another, keeping the sender account alive.
   *
   * Origin must be Signed.
   *
   * - `id`: The identifier of the asset to have some amount transferred.
   * - `target`: The account to be credited.
   * - `amount`: The amount by which the sender's balance of assets should be reduced and
   * `target`'s balance increased. The amount actually transferred may be slightly greater in
   * the case that the transfer would otherwise take the sender balance above zero but below
   * the minimum balance. Must be greater than zero.
   *
   * Emits `Transferred` with the actual amount transferred. If this takes the source balance
   * to below the minimum for the asset, then the amount transferred is increased to take it
   * to zero.
   *
   * Weight: `O(1)`
   * Modes: Pre-existence of `target`; Post-existence of sender; Account pre-existence of
   * `target`.
   **/
  | { name: 'TransferKeepAlive'; params: { id: number; target: MultiAddressLike; amount: bigint } }
  /**
   * Move some assets from one account to another.
   *
   * Origin must be Signed and the sender should be the Admin of the asset `id`.
   *
   * - `id`: The identifier of the asset to have some amount transferred.
   * - `source`: The account to be debited.
   * - `dest`: The account to be credited.
   * - `amount`: The amount by which the `source`'s balance of assets should be reduced and
   * `dest`'s balance increased. The amount actually transferred may be slightly greater in
   * the case that the transfer would otherwise take the `source` balance above zero but
   * below the minimum balance. Must be greater than zero.
   *
   * Emits `Transferred` with the actual amount transferred. If this takes the source balance
   * to below the minimum for the asset, then the amount transferred is increased to take it
   * to zero.
   *
   * Weight: `O(1)`
   * Modes: Pre-existence of `dest`; Post-existence of `source`; Account pre-existence of
   * `dest`.
   **/
  | { name: 'ForceTransfer'; params: { id: number; source: MultiAddressLike; dest: MultiAddressLike; amount: bigint } }
  /**
   * Disallow further unprivileged transfers of an asset `id` from an account `who`. `who`
   * must already exist as an entry in `Account`s of the asset. If you want to freeze an
   * account that does not have an entry, use `touch_other` first.
   *
   * Origin must be Signed and the sender should be the Freezer of the asset `id`.
   *
   * - `id`: The identifier of the asset to be frozen.
   * - `who`: The account to be frozen.
   *
   * Emits `Frozen`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'Freeze'; params: { id: number; who: MultiAddressLike } }
  /**
   * Allow unprivileged transfers to and from an account again.
   *
   * Origin must be Signed and the sender should be the Admin of the asset `id`.
   *
   * - `id`: The identifier of the asset to be frozen.
   * - `who`: The account to be unfrozen.
   *
   * Emits `Thawed`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'Thaw'; params: { id: number; who: MultiAddressLike } }
  /**
   * Disallow further unprivileged transfers for the asset class.
   *
   * Origin must be Signed and the sender should be the Freezer of the asset `id`.
   *
   * - `id`: The identifier of the asset to be frozen.
   *
   * Emits `Frozen`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'FreezeAsset'; params: { id: number } }
  /**
   * Allow unprivileged transfers for the asset again.
   *
   * Origin must be Signed and the sender should be the Admin of the asset `id`.
   *
   * - `id`: The identifier of the asset to be thawed.
   *
   * Emits `Thawed`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'ThawAsset'; params: { id: number } }
  /**
   * Change the Owner of an asset.
   *
   * Origin must be Signed and the sender should be the Owner of the asset `id`.
   *
   * - `id`: The identifier of the asset.
   * - `owner`: The new Owner of this asset.
   *
   * Emits `OwnerChanged`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'TransferOwnership'; params: { id: number; owner: MultiAddressLike } }
  /**
   * Change the Issuer, Admin and Freezer of an asset.
   *
   * Origin must be Signed and the sender should be the Owner of the asset `id`.
   *
   * - `id`: The identifier of the asset to be frozen.
   * - `issuer`: The new Issuer of this asset.
   * - `admin`: The new Admin of this asset.
   * - `freezer`: The new Freezer of this asset.
   *
   * Emits `TeamChanged`.
   *
   * Weight: `O(1)`
   **/
  | {
      name: 'SetTeam';
      params: { id: number; issuer: MultiAddressLike; admin: MultiAddressLike; freezer: MultiAddressLike };
    }
  /**
   * Set the metadata for an asset.
   *
   * Origin must be Signed and the sender should be the Owner of the asset `id`.
   *
   * Funds of sender are reserved according to the formula:
   * `MetadataDepositBase + MetadataDepositPerByte * (name.len + symbol.len)` taking into
   * account any already reserved funds.
   *
   * - `id`: The identifier of the asset to update.
   * - `name`: The user friendly name of this asset. Limited in length by `StringLimit`.
   * - `symbol`: The exchange symbol for this asset. Limited in length by `StringLimit`.
   * - `decimals`: The number of decimals this asset uses to represent one unit.
   *
   * Emits `MetadataSet`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'SetMetadata'; params: { id: number; name: BytesLike; symbol: BytesLike; decimals: number } }
  /**
   * Clear the metadata for an asset.
   *
   * Origin must be Signed and the sender should be the Owner of the asset `id`.
   *
   * Any deposit is freed for the asset owner.
   *
   * - `id`: The identifier of the asset to clear.
   *
   * Emits `MetadataCleared`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'ClearMetadata'; params: { id: number } }
  /**
   * Force the metadata for an asset to some value.
   *
   * Origin must be ForceOrigin.
   *
   * Any deposit is left alone.
   *
   * - `id`: The identifier of the asset to update.
   * - `name`: The user friendly name of this asset. Limited in length by `StringLimit`.
   * - `symbol`: The exchange symbol for this asset. Limited in length by `StringLimit`.
   * - `decimals`: The number of decimals this asset uses to represent one unit.
   *
   * Emits `MetadataSet`.
   *
   * Weight: `O(N + S)` where N and S are the length of the name and symbol respectively.
   **/
  | {
      name: 'ForceSetMetadata';
      params: { id: number; name: BytesLike; symbol: BytesLike; decimals: number; isFrozen: boolean };
    }
  /**
   * Clear the metadata for an asset.
   *
   * Origin must be ForceOrigin.
   *
   * Any deposit is returned.
   *
   * - `id`: The identifier of the asset to clear.
   *
   * Emits `MetadataCleared`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'ForceClearMetadata'; params: { id: number } }
  /**
   * Alter the attributes of a given asset.
   *
   * Origin must be `ForceOrigin`.
   *
   * - `id`: The identifier of the asset.
   * - `owner`: The new Owner of this asset.
   * - `issuer`: The new Issuer of this asset.
   * - `admin`: The new Admin of this asset.
   * - `freezer`: The new Freezer of this asset.
   * - `min_balance`: The minimum balance of this new asset that any single account must
   * have. If an account's balance is reduced below this, then it collapses to zero.
   * - `is_sufficient`: Whether a non-zero balance of this asset is deposit of sufficient
   * value to account for the state bloat associated with its balance storage. If set to
   * `true`, then non-zero balances may be stored without a `consumer` reference (and thus
   * an ED in the Balances pallet or whatever else is used to control user-account state
   * growth).
   * - `is_frozen`: Whether this asset class is frozen except for permissioned/admin
   * instructions.
   *
   * Emits `AssetStatusChanged` with the identity of the asset.
   *
   * Weight: `O(1)`
   **/
  | {
      name: 'ForceAssetStatus';
      params: {
        id: number;
        owner: MultiAddressLike;
        issuer: MultiAddressLike;
        admin: MultiAddressLike;
        freezer: MultiAddressLike;
        minBalance: bigint;
        isSufficient: boolean;
        isFrozen: boolean;
      };
    }
  /**
   * Approve an amount of asset for transfer by a delegated third-party account.
   *
   * Origin must be Signed.
   *
   * Ensures that `ApprovalDeposit` worth of `Currency` is reserved from signing account
   * for the purpose of holding the approval. If some non-zero amount of assets is already
   * approved from signing account to `delegate`, then it is topped up or unreserved to
   * meet the right value.
   *
   * NOTE: The signing account does not need to own `amount` of assets at the point of
   * making this call.
   *
   * - `id`: The identifier of the asset.
   * - `delegate`: The account to delegate permission to transfer asset.
   * - `amount`: The amount of asset that may be transferred by `delegate`. If there is
   * already an approval in place, then this acts additively.
   *
   * Emits `ApprovedTransfer` on success.
   *
   * Weight: `O(1)`
   **/
  | { name: 'ApproveTransfer'; params: { id: number; delegate: MultiAddressLike; amount: bigint } }
  /**
   * Cancel all of some asset approved for delegated transfer by a third-party account.
   *
   * Origin must be Signed and there must be an approval in place between signer and
   * `delegate`.
   *
   * Unreserves any deposit previously reserved by `approve_transfer` for the approval.
   *
   * - `id`: The identifier of the asset.
   * - `delegate`: The account delegated permission to transfer asset.
   *
   * Emits `ApprovalCancelled` on success.
   *
   * Weight: `O(1)`
   **/
  | { name: 'CancelApproval'; params: { id: number; delegate: MultiAddressLike } }
  /**
   * Cancel all of some asset approved for delegated transfer by a third-party account.
   *
   * Origin must be either ForceOrigin or Signed origin with the signer being the Admin
   * account of the asset `id`.
   *
   * Unreserves any deposit previously reserved by `approve_transfer` for the approval.
   *
   * - `id`: The identifier of the asset.
   * - `delegate`: The account delegated permission to transfer asset.
   *
   * Emits `ApprovalCancelled` on success.
   *
   * Weight: `O(1)`
   **/
  | { name: 'ForceCancelApproval'; params: { id: number; owner: MultiAddressLike; delegate: MultiAddressLike } }
  /**
   * Transfer some asset balance from a previously delegated account to some third-party
   * account.
   *
   * Origin must be Signed and there must be an approval in place by the `owner` to the
   * signer.
   *
   * If the entire amount approved for transfer is transferred, then any deposit previously
   * reserved by `approve_transfer` is unreserved.
   *
   * - `id`: The identifier of the asset.
   * - `owner`: The account which previously approved for a transfer of at least `amount` and
   * from which the asset balance will be withdrawn.
   * - `destination`: The account to which the asset balance of `amount` will be transferred.
   * - `amount`: The amount of assets to transfer.
   *
   * Emits `TransferredApproved` on success.
   *
   * Weight: `O(1)`
   **/
  | {
      name: 'TransferApproved';
      params: { id: number; owner: MultiAddressLike; destination: MultiAddressLike; amount: bigint };
    }
  /**
   * Create an asset account for non-provider assets.
   *
   * A deposit will be taken from the signer account.
   *
   * - `origin`: Must be Signed; the signer account must have sufficient funds for a deposit
   * to be taken.
   * - `id`: The identifier of the asset for the account to be created.
   *
   * Emits `Touched` event when successful.
   **/
  | { name: 'Touch'; params: { id: number } }
  /**
   * Return the deposit (if any) of an asset account or a consumer reference (if any) of an
   * account.
   *
   * The origin must be Signed.
   *
   * - `id`: The identifier of the asset for which the caller would like the deposit
   * refunded.
   * - `allow_burn`: If `true` then assets may be destroyed in order to complete the refund.
   *
   * It will fail with either [`Error::ContainsHolds`] or [`Error::ContainsFreezes`] if
   * the asset account contains holds or freezes in place.
   *
   * Emits `Refunded` event when successful.
   **/
  | { name: 'Refund'; params: { id: number; allowBurn: boolean } }
  /**
   * Sets the minimum balance of an asset.
   *
   * Only works if there aren't any accounts that are holding the asset or if
   * the new value of `min_balance` is less than the old one.
   *
   * Origin must be Signed and the sender has to be the Owner of the
   * asset `id`.
   *
   * - `id`: The identifier of the asset.
   * - `min_balance`: The new value of `min_balance`.
   *
   * Emits `AssetMinBalanceChanged` event when successful.
   **/
  | { name: 'SetMinBalance'; params: { id: number; minBalance: bigint } }
  /**
   * Create an asset account for `who`.
   *
   * A deposit will be taken from the signer account.
   *
   * - `origin`: Must be Signed by `Freezer` or `Admin` of the asset `id`; the signer account
   * must have sufficient funds for a deposit to be taken.
   * - `id`: The identifier of the asset for the account to be created.
   * - `who`: The account to be created.
   *
   * Emits `Touched` event when successful.
   **/
  | { name: 'TouchOther'; params: { id: number; who: MultiAddressLike } }
  /**
   * Return the deposit (if any) of a target asset account. Useful if you are the depositor.
   *
   * The origin must be Signed and either the account owner, depositor, or asset `Admin`. In
   * order to burn a non-zero balance of the asset, the caller must be the account and should
   * use `refund`.
   *
   * - `id`: The identifier of the asset for the account holding a deposit.
   * - `who`: The account to refund.
   *
   * It will fail with either [`Error::ContainsHolds`] or [`Error::ContainsFreezes`] if
   * the asset account contains holds or freezes in place.
   *
   * Emits `Refunded` event when successful.
   **/
  | { name: 'RefundOther'; params: { id: number; who: MultiAddressLike } }
  /**
   * Disallow further unprivileged transfers of an asset `id` to and from an account `who`.
   *
   * Origin must be Signed and the sender should be the Freezer of the asset `id`.
   *
   * - `id`: The identifier of the account's asset.
   * - `who`: The account to be unblocked.
   *
   * Emits `Blocked`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'Block'; params: { id: number; who: MultiAddressLike } }
  /**
   * Transfer the entire transferable balance from the caller asset account.
   *
   * NOTE: This function only attempts to transfer _transferable_ balances. This means that
   * any held, frozen, or minimum balance (when `keep_alive` is `true`), will not be
   * transferred by this function. To ensure that this function results in a killed account,
   * you might need to prepare the account by removing any reference counters, storage
   * deposits, etc...
   *
   * The dispatch origin of this call must be Signed.
   *
   * - `id`: The identifier of the asset for the account holding a deposit.
   * - `dest`: The recipient of the transfer.
   * - `keep_alive`: A boolean to determine if the `transfer_all` operation should send all
   * of the funds the asset account has, causing the sender asset account to be killed
   * (false), or transfer everything except at least the minimum balance, which will
   * guarantee to keep the sender asset account alive (true).
   **/
  | { name: 'TransferAll'; params: { id: number; dest: MultiAddressLike; keepAlive: boolean } };

/**
 * Pallet's callable functions.
 **/
export type PalletAssetConversionCall =
  /**
   * Creates an empty liquidity pool and an associated new `lp_token` asset
   * (the id of which is returned in the `Event::PoolCreated` event).
   *
   * Once a pool is created, someone may [`Pallet::add_liquidity`] to it.
   **/
  | { name: 'CreatePool'; params: { asset1: StagingXcmV5Location; asset2: StagingXcmV5Location } }
  /**
   * Provide liquidity into the pool of `asset1` and `asset2`.
   * NOTE: an optimal amount of asset1 and asset2 will be calculated and
   * might be different than the provided `amount1_desired`/`amount2_desired`
   * thus you should provide the min amount you're happy to provide.
   * Params `amount1_min`/`amount2_min` represent that.
   * `mint_to` will be sent the liquidity tokens that represent this share of the pool.
   *
   * NOTE: when encountering an incorrect exchange rate and non-withdrawable pool liquidity,
   * batch an atomic call with [`Pallet::add_liquidity`] and
   * [`Pallet::swap_exact_tokens_for_tokens`] or [`Pallet::swap_tokens_for_exact_tokens`]
   * calls to render the liquidity withdrawable and rectify the exchange rate.
   *
   * Once liquidity is added, someone may successfully call
   * [`Pallet::swap_exact_tokens_for_tokens`].
   **/
  | {
      name: 'AddLiquidity';
      params: {
        asset1: StagingXcmV5Location;
        asset2: StagingXcmV5Location;
        amount1Desired: bigint;
        amount2Desired: bigint;
        amount1Min: bigint;
        amount2Min: bigint;
        mintTo: AccountId32;
      };
    }
  /**
   * Allows you to remove liquidity by providing the `lp_token_burn` tokens that will be
   * burned in the process. With the usage of `amount1_min_receive`/`amount2_min_receive`
   * it's possible to control the min amount of returned tokens you're happy with.
   **/
  | {
      name: 'RemoveLiquidity';
      params: {
        asset1: StagingXcmV5Location;
        asset2: StagingXcmV5Location;
        lpTokenBurn: bigint;
        amount1MinReceive: bigint;
        amount2MinReceive: bigint;
        withdrawTo: AccountId32;
      };
    }
  /**
   * Swap the exact amount of `asset1` into `asset2`.
   * `amount_out_min` param allows you to specify the min amount of the `asset2`
   * you're happy to receive.
   *
   * [`AssetConversionApi::quote_price_exact_tokens_for_tokens`] runtime call can be called
   * for a quote.
   **/
  | {
      name: 'SwapExactTokensForTokens';
      params: {
        path: Array<StagingXcmV5Location>;
        amountIn: bigint;
        amountOutMin: bigint;
        sendTo: AccountId32;
        keepAlive: boolean;
      };
    }
  /**
   * Swap any amount of `asset1` to get the exact amount of `asset2`.
   * `amount_in_max` param allows to specify the max amount of the `asset1`
   * you're happy to provide.
   *
   * [`AssetConversionApi::quote_price_tokens_for_exact_tokens`] runtime call can be called
   * for a quote.
   **/
  | {
      name: 'SwapTokensForExactTokens';
      params: {
        path: Array<StagingXcmV5Location>;
        amountOut: bigint;
        amountInMax: bigint;
        sendTo: AccountId32;
        keepAlive: boolean;
      };
    }
  /**
   * Touch an existing pool to fulfill prerequisites before providing liquidity, such as
   * ensuring that the pool's accounts are in place. It is typically useful when a pool
   * creator removes the pool's accounts and does not provide a liquidity. This action may
   * involve holding assets from the caller as a deposit for creating the pool's accounts.
   *
   * The origin must be Signed.
   *
   * - `asset1`: The asset ID of an existing pool with a pair (asset1, asset2).
   * - `asset2`: The asset ID of an existing pool with a pair (asset1, asset2).
   *
   * Emits `Touched` event when successful.
   **/
  | { name: 'Touch'; params: { asset1: StagingXcmV5Location; asset2: StagingXcmV5Location } };

export type PalletAssetConversionCallLike =
  /**
   * Creates an empty liquidity pool and an associated new `lp_token` asset
   * (the id of which is returned in the `Event::PoolCreated` event).
   *
   * Once a pool is created, someone may [`Pallet::add_liquidity`] to it.
   **/
  | { name: 'CreatePool'; params: { asset1: StagingXcmV5Location; asset2: StagingXcmV5Location } }
  /**
   * Provide liquidity into the pool of `asset1` and `asset2`.
   * NOTE: an optimal amount of asset1 and asset2 will be calculated and
   * might be different than the provided `amount1_desired`/`amount2_desired`
   * thus you should provide the min amount you're happy to provide.
   * Params `amount1_min`/`amount2_min` represent that.
   * `mint_to` will be sent the liquidity tokens that represent this share of the pool.
   *
   * NOTE: when encountering an incorrect exchange rate and non-withdrawable pool liquidity,
   * batch an atomic call with [`Pallet::add_liquidity`] and
   * [`Pallet::swap_exact_tokens_for_tokens`] or [`Pallet::swap_tokens_for_exact_tokens`]
   * calls to render the liquidity withdrawable and rectify the exchange rate.
   *
   * Once liquidity is added, someone may successfully call
   * [`Pallet::swap_exact_tokens_for_tokens`].
   **/
  | {
      name: 'AddLiquidity';
      params: {
        asset1: StagingXcmV5Location;
        asset2: StagingXcmV5Location;
        amount1Desired: bigint;
        amount2Desired: bigint;
        amount1Min: bigint;
        amount2Min: bigint;
        mintTo: AccountId32Like;
      };
    }
  /**
   * Allows you to remove liquidity by providing the `lp_token_burn` tokens that will be
   * burned in the process. With the usage of `amount1_min_receive`/`amount2_min_receive`
   * it's possible to control the min amount of returned tokens you're happy with.
   **/
  | {
      name: 'RemoveLiquidity';
      params: {
        asset1: StagingXcmV5Location;
        asset2: StagingXcmV5Location;
        lpTokenBurn: bigint;
        amount1MinReceive: bigint;
        amount2MinReceive: bigint;
        withdrawTo: AccountId32Like;
      };
    }
  /**
   * Swap the exact amount of `asset1` into `asset2`.
   * `amount_out_min` param allows you to specify the min amount of the `asset2`
   * you're happy to receive.
   *
   * [`AssetConversionApi::quote_price_exact_tokens_for_tokens`] runtime call can be called
   * for a quote.
   **/
  | {
      name: 'SwapExactTokensForTokens';
      params: {
        path: Array<StagingXcmV5Location>;
        amountIn: bigint;
        amountOutMin: bigint;
        sendTo: AccountId32Like;
        keepAlive: boolean;
      };
    }
  /**
   * Swap any amount of `asset1` to get the exact amount of `asset2`.
   * `amount_in_max` param allows to specify the max amount of the `asset1`
   * you're happy to provide.
   *
   * [`AssetConversionApi::quote_price_tokens_for_exact_tokens`] runtime call can be called
   * for a quote.
   **/
  | {
      name: 'SwapTokensForExactTokens';
      params: {
        path: Array<StagingXcmV5Location>;
        amountOut: bigint;
        amountInMax: bigint;
        sendTo: AccountId32Like;
        keepAlive: boolean;
      };
    }
  /**
   * Touch an existing pool to fulfill prerequisites before providing liquidity, such as
   * ensuring that the pool's accounts are in place. It is typically useful when a pool
   * creator removes the pool's accounts and does not provide a liquidity. This action may
   * involve holding assets from the caller as a deposit for creating the pool's accounts.
   *
   * The origin must be Signed.
   *
   * - `asset1`: The asset ID of an existing pool with a pair (asset1, asset2).
   * - `asset2`: The asset ID of an existing pool with a pair (asset1, asset2).
   *
   * Emits `Touched` event when successful.
   **/
  | { name: 'Touch'; params: { asset1: StagingXcmV5Location; asset2: StagingXcmV5Location } };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletReviveCall =
  /**
   * A raw EVM transaction, typically dispatched by an Ethereum JSON-RPC server.
   *
   * # Parameters
   *
   * * `payload`: The encoded [`crate::evm::TransactionSigned`].
   * * `gas_limit`: The gas limit enforced during contract execution.
   * * `storage_deposit_limit`: The maximum balance that can be charged to the caller for
   * storage usage.
   *
   * # Note
   *
   * This call cannot be dispatched directly; attempting to do so will result in a failed
   * transaction. It serves as a wrapper for an Ethereum transaction. When submitted, the
   * runtime converts it into a [`sp_runtime::generic::CheckedExtrinsic`] by recovering the
   * signer and validating the transaction.
   **/
  | { name: 'EthTransact'; params: { payload: Bytes } }
  /**
   * Makes a call to an account, optionally transferring some balance.
   *
   * # Parameters
   *
   * * `dest`: Address of the contract to call.
   * * `value`: The balance to transfer from the `origin` to `dest`.
   * * `gas_limit`: The gas limit enforced when executing the constructor.
   * * `storage_deposit_limit`: The maximum amount of balance that can be charged from the
   * caller to pay for the storage consumed.
   * * `data`: The input data to pass to the contract.
   *
   * * If the account is a smart-contract account, the associated code will be
   * executed and any value will be transferred.
   * * If the account is a regular account, any value will be transferred.
   * * If no account exists and the call value is not less than `existential_deposit`,
   * a regular account will be created and any value will be transferred.
   **/
  | {
      name: 'Call';
      params: {
        dest: H160;
        value: bigint;
        gasLimit: SpWeightsWeightV2Weight;
        storageDepositLimit: bigint;
        data: Bytes;
      };
    }
  /**
   * Instantiates a contract from a previously deployed wasm binary.
   *
   * This function is identical to [`Self::instantiate_with_code`] but without the
   * code deployment step. Instead, the `code_hash` of an on-chain deployed wasm binary
   * must be supplied.
   **/
  | {
      name: 'Instantiate';
      params: {
        value: bigint;
        gasLimit: SpWeightsWeightV2Weight;
        storageDepositLimit: bigint;
        codeHash: H256;
        data: Bytes;
        salt?: FixedBytes<32> | undefined;
      };
    }
  /**
   * Instantiates a new contract from the supplied `code` optionally transferring
   * some balance.
   *
   * This dispatchable has the same effect as calling [`Self::upload_code`] +
   * [`Self::instantiate`]. Bundling them together provides efficiency gains. Please
   * also check the documentation of [`Self::upload_code`].
   *
   * # Parameters
   *
   * * `value`: The balance to transfer from the `origin` to the newly created contract.
   * * `gas_limit`: The gas limit enforced when executing the constructor.
   * * `storage_deposit_limit`: The maximum amount of balance that can be charged/reserved
   * from the caller to pay for the storage consumed.
   * * `code`: The contract code to deploy in raw bytes.
   * * `data`: The input data to pass to the contract constructor.
   * * `salt`: Used for the address derivation. If `Some` is supplied then `CREATE2`
   * semantics are used. If `None` then `CRATE1` is used.
   *
   *
   * Instantiation is executed as follows:
   *
   * - The supplied `code` is deployed, and a `code_hash` is created for that code.
   * - If the `code_hash` already exists on the chain the underlying `code` will be shared.
   * - The destination address is computed based on the sender, code_hash and the salt.
   * - The smart-contract account is created at the computed address.
   * - The `value` is transferred to the new account.
   * - The `deploy` function is executed in the context of the newly-created account.
   **/
  | {
      name: 'InstantiateWithCode';
      params: {
        value: bigint;
        gasLimit: SpWeightsWeightV2Weight;
        storageDepositLimit: bigint;
        code: Bytes;
        data: Bytes;
        salt?: FixedBytes<32> | undefined;
      };
    }
  /**
   * Upload new `code` without instantiating a contract from it.
   *
   * If the code does not already exist a deposit is reserved from the caller
   * and unreserved only when [`Self::remove_code`] is called. The size of the reserve
   * depends on the size of the supplied `code`.
   *
   * # Note
   *
   * Anyone can instantiate a contract from any uploaded code and thus prevent its removal.
   * To avoid this situation a constructor could employ access control so that it can
   * only be instantiated by permissioned entities. The same is true when uploading
   * through [`Self::instantiate_with_code`].
   **/
  | { name: 'UploadCode'; params: { code: Bytes; storageDepositLimit: bigint } }
  /**
   * Remove the code stored under `code_hash` and refund the deposit to its owner.
   *
   * A code can only be removed by its original uploader (its owner) and only if it is
   * not used by any contract.
   **/
  | { name: 'RemoveCode'; params: { codeHash: H256 } }
  /**
   * Privileged function that changes the code of an existing contract.
   *
   * This takes care of updating refcounts and all other necessary operations. Returns
   * an error if either the `code_hash` or `dest` do not exist.
   *
   * # Note
   *
   * This does **not** change the address of the contract in question. This means
   * that the contract address is no longer derived from its code hash after calling
   * this dispatchable.
   **/
  | { name: 'SetCode'; params: { dest: H160; codeHash: H256 } }
  /**
   * Register the callers account id so that it can be used in contract interactions.
   *
   * This will error if the origin is already mapped or is a eth native `Address20`. It will
   * take a deposit that can be released by calling [`Self::unmap_account`].
   **/
  | { name: 'MapAccount' }
  /**
   * Unregister the callers account id in order to free the deposit.
   *
   * There is no reason to ever call this function other than freeing up the deposit.
   * This is only useful when the account should no longer be used.
   **/
  | { name: 'UnmapAccount' }
  /**
   * Dispatch an `call` with the origin set to the callers fallback address.
   *
   * Every `AccountId32` can control its corresponding fallback account. The fallback account
   * is the `AccountId20` with the last 12 bytes set to `0xEE`. This is essentially a
   * recovery function in case an `AccountId20` was used without creating a mapping first.
   **/
  | { name: 'DispatchAsFallbackAccount'; params: { call: AssetHubWestendRuntimeRuntimeCall } };

export type PalletReviveCallLike =
  /**
   * A raw EVM transaction, typically dispatched by an Ethereum JSON-RPC server.
   *
   * # Parameters
   *
   * * `payload`: The encoded [`crate::evm::TransactionSigned`].
   * * `gas_limit`: The gas limit enforced during contract execution.
   * * `storage_deposit_limit`: The maximum balance that can be charged to the caller for
   * storage usage.
   *
   * # Note
   *
   * This call cannot be dispatched directly; attempting to do so will result in a failed
   * transaction. It serves as a wrapper for an Ethereum transaction. When submitted, the
   * runtime converts it into a [`sp_runtime::generic::CheckedExtrinsic`] by recovering the
   * signer and validating the transaction.
   **/
  | { name: 'EthTransact'; params: { payload: BytesLike } }
  /**
   * Makes a call to an account, optionally transferring some balance.
   *
   * # Parameters
   *
   * * `dest`: Address of the contract to call.
   * * `value`: The balance to transfer from the `origin` to `dest`.
   * * `gas_limit`: The gas limit enforced when executing the constructor.
   * * `storage_deposit_limit`: The maximum amount of balance that can be charged from the
   * caller to pay for the storage consumed.
   * * `data`: The input data to pass to the contract.
   *
   * * If the account is a smart-contract account, the associated code will be
   * executed and any value will be transferred.
   * * If the account is a regular account, any value will be transferred.
   * * If no account exists and the call value is not less than `existential_deposit`,
   * a regular account will be created and any value will be transferred.
   **/
  | {
      name: 'Call';
      params: {
        dest: H160;
        value: bigint;
        gasLimit: SpWeightsWeightV2Weight;
        storageDepositLimit: bigint;
        data: BytesLike;
      };
    }
  /**
   * Instantiates a contract from a previously deployed wasm binary.
   *
   * This function is identical to [`Self::instantiate_with_code`] but without the
   * code deployment step. Instead, the `code_hash` of an on-chain deployed wasm binary
   * must be supplied.
   **/
  | {
      name: 'Instantiate';
      params: {
        value: bigint;
        gasLimit: SpWeightsWeightV2Weight;
        storageDepositLimit: bigint;
        codeHash: H256;
        data: BytesLike;
        salt?: FixedBytes<32> | undefined;
      };
    }
  /**
   * Instantiates a new contract from the supplied `code` optionally transferring
   * some balance.
   *
   * This dispatchable has the same effect as calling [`Self::upload_code`] +
   * [`Self::instantiate`]. Bundling them together provides efficiency gains. Please
   * also check the documentation of [`Self::upload_code`].
   *
   * # Parameters
   *
   * * `value`: The balance to transfer from the `origin` to the newly created contract.
   * * `gas_limit`: The gas limit enforced when executing the constructor.
   * * `storage_deposit_limit`: The maximum amount of balance that can be charged/reserved
   * from the caller to pay for the storage consumed.
   * * `code`: The contract code to deploy in raw bytes.
   * * `data`: The input data to pass to the contract constructor.
   * * `salt`: Used for the address derivation. If `Some` is supplied then `CREATE2`
   * semantics are used. If `None` then `CRATE1` is used.
   *
   *
   * Instantiation is executed as follows:
   *
   * - The supplied `code` is deployed, and a `code_hash` is created for that code.
   * - If the `code_hash` already exists on the chain the underlying `code` will be shared.
   * - The destination address is computed based on the sender, code_hash and the salt.
   * - The smart-contract account is created at the computed address.
   * - The `value` is transferred to the new account.
   * - The `deploy` function is executed in the context of the newly-created account.
   **/
  | {
      name: 'InstantiateWithCode';
      params: {
        value: bigint;
        gasLimit: SpWeightsWeightV2Weight;
        storageDepositLimit: bigint;
        code: BytesLike;
        data: BytesLike;
        salt?: FixedBytes<32> | undefined;
      };
    }
  /**
   * Upload new `code` without instantiating a contract from it.
   *
   * If the code does not already exist a deposit is reserved from the caller
   * and unreserved only when [`Self::remove_code`] is called. The size of the reserve
   * depends on the size of the supplied `code`.
   *
   * # Note
   *
   * Anyone can instantiate a contract from any uploaded code and thus prevent its removal.
   * To avoid this situation a constructor could employ access control so that it can
   * only be instantiated by permissioned entities. The same is true when uploading
   * through [`Self::instantiate_with_code`].
   **/
  | { name: 'UploadCode'; params: { code: BytesLike; storageDepositLimit: bigint } }
  /**
   * Remove the code stored under `code_hash` and refund the deposit to its owner.
   *
   * A code can only be removed by its original uploader (its owner) and only if it is
   * not used by any contract.
   **/
  | { name: 'RemoveCode'; params: { codeHash: H256 } }
  /**
   * Privileged function that changes the code of an existing contract.
   *
   * This takes care of updating refcounts and all other necessary operations. Returns
   * an error if either the `code_hash` or `dest` do not exist.
   *
   * # Note
   *
   * This does **not** change the address of the contract in question. This means
   * that the contract address is no longer derived from its code hash after calling
   * this dispatchable.
   **/
  | { name: 'SetCode'; params: { dest: H160; codeHash: H256 } }
  /**
   * Register the callers account id so that it can be used in contract interactions.
   *
   * This will error if the origin is already mapped or is a eth native `Address20`. It will
   * take a deposit that can be released by calling [`Self::unmap_account`].
   **/
  | { name: 'MapAccount' }
  /**
   * Unregister the callers account id in order to free the deposit.
   *
   * There is no reason to ever call this function other than freeing up the deposit.
   * This is only useful when the account should no longer be used.
   **/
  | { name: 'UnmapAccount' }
  /**
   * Dispatch an `call` with the origin set to the callers fallback address.
   *
   * Every `AccountId32` can control its corresponding fallback account. The fallback account
   * is the `AccountId20` with the last 12 bytes set to `0xEE`. This is essentially a
   * recovery function in case an `AccountId20` was used without creating a mapping first.
   **/
  | { name: 'DispatchAsFallbackAccount'; params: { call: AssetHubWestendRuntimeRuntimeCallLike } };

/**
 * Pallet's callable functions.
 **/
export type PalletAssetRewardsCall =
  /**
   * Create a new reward pool.
   *
   * Parameters:
   * - `origin`: must be `Config::CreatePoolOrigin`;
   * - `staked_asset_id`: the asset to be staked in the pool;
   * - `reward_asset_id`: the asset to be distributed as rewards;
   * - `reward_rate_per_block`: the amount of reward tokens distributed per block;
   * - `expiry`: the block number at which the pool will cease to accumulate rewards. The
   * [`DispatchTime::After`] variant evaluated at the execution time.
   * - `admin`: the account allowed to extend the pool expiration, increase the rewards rate
   * and receive the unutilized reward tokens back after the pool completion. If `None`,
   * the caller is set as an admin.
   **/
  | {
      name: 'CreatePool';
      params: {
        stakedAssetId: StagingXcmV5Location;
        rewardAssetId: StagingXcmV5Location;
        rewardRatePerBlock: bigint;
        expiry: FrameSupportScheduleDispatchTime;
        admin?: AccountId32 | undefined;
      };
    }
  /**
   * Stake additional tokens in a pool.
   *
   * A freeze is placed on the staked tokens.
   **/
  | { name: 'Stake'; params: { poolId: number; amount: bigint } }
  /**
   * Unstake tokens from a pool.
   *
   * Removes the freeze on the staked tokens.
   *
   * Parameters:
   * - origin: must be the `staker` if the pool is still active. Otherwise, any account.
   * - pool_id: the pool to unstake from.
   * - amount: the amount of tokens to unstake.
   * - staker: the account to unstake from. If `None`, the caller is used.
   **/
  | { name: 'Unstake'; params: { poolId: number; amount: bigint; staker?: AccountId32 | undefined } }
  /**
   * Harvest unclaimed pool rewards.
   *
   * Parameters:
   * - origin: must be the `staker` if the pool is still active. Otherwise, any account.
   * - pool_id: the pool to harvest from.
   * - staker: the account for which to harvest rewards. If `None`, the caller is used.
   **/
  | { name: 'HarvestRewards'; params: { poolId: number; staker?: AccountId32 | undefined } }
  /**
   * Modify a pool reward rate.
   *
   * Currently the reward rate can only be increased.
   *
   * Only the pool admin may perform this operation.
   **/
  | { name: 'SetPoolRewardRatePerBlock'; params: { poolId: number; newRewardRatePerBlock: bigint } }
  /**
   * Modify a pool admin.
   *
   * Only the pool admin may perform this operation.
   **/
  | { name: 'SetPoolAdmin'; params: { poolId: number; newAdmin: AccountId32 } }
  /**
   * Set when the pool should expire.
   *
   * Currently the expiry block can only be extended.
   *
   * Only the pool admin may perform this operation.
   **/
  | { name: 'SetPoolExpiryBlock'; params: { poolId: number; newExpiry: FrameSupportScheduleDispatchTime } }
  /**
   * Convenience method to deposit reward tokens into a pool.
   *
   * This method is not strictly necessary (tokens could be transferred directly to the
   * pool pot address), but is provided for convenience so manual derivation of the
   * account id is not required.
   **/
  | { name: 'DepositRewardTokens'; params: { poolId: number; amount: bigint } }
  /**
   * Cleanup a pool.
   *
   * Origin must be the pool admin.
   *
   * Cleanup storage, release any associated storage cost and return the remaining reward
   * tokens to the admin.
   **/
  | { name: 'CleanupPool'; params: { poolId: number } };

export type PalletAssetRewardsCallLike =
  /**
   * Create a new reward pool.
   *
   * Parameters:
   * - `origin`: must be `Config::CreatePoolOrigin`;
   * - `staked_asset_id`: the asset to be staked in the pool;
   * - `reward_asset_id`: the asset to be distributed as rewards;
   * - `reward_rate_per_block`: the amount of reward tokens distributed per block;
   * - `expiry`: the block number at which the pool will cease to accumulate rewards. The
   * [`DispatchTime::After`] variant evaluated at the execution time.
   * - `admin`: the account allowed to extend the pool expiration, increase the rewards rate
   * and receive the unutilized reward tokens back after the pool completion. If `None`,
   * the caller is set as an admin.
   **/
  | {
      name: 'CreatePool';
      params: {
        stakedAssetId: StagingXcmV5Location;
        rewardAssetId: StagingXcmV5Location;
        rewardRatePerBlock: bigint;
        expiry: FrameSupportScheduleDispatchTime;
        admin?: AccountId32Like | undefined;
      };
    }
  /**
   * Stake additional tokens in a pool.
   *
   * A freeze is placed on the staked tokens.
   **/
  | { name: 'Stake'; params: { poolId: number; amount: bigint } }
  /**
   * Unstake tokens from a pool.
   *
   * Removes the freeze on the staked tokens.
   *
   * Parameters:
   * - origin: must be the `staker` if the pool is still active. Otherwise, any account.
   * - pool_id: the pool to unstake from.
   * - amount: the amount of tokens to unstake.
   * - staker: the account to unstake from. If `None`, the caller is used.
   **/
  | { name: 'Unstake'; params: { poolId: number; amount: bigint; staker?: AccountId32Like | undefined } }
  /**
   * Harvest unclaimed pool rewards.
   *
   * Parameters:
   * - origin: must be the `staker` if the pool is still active. Otherwise, any account.
   * - pool_id: the pool to harvest from.
   * - staker: the account for which to harvest rewards. If `None`, the caller is used.
   **/
  | { name: 'HarvestRewards'; params: { poolId: number; staker?: AccountId32Like | undefined } }
  /**
   * Modify a pool reward rate.
   *
   * Currently the reward rate can only be increased.
   *
   * Only the pool admin may perform this operation.
   **/
  | { name: 'SetPoolRewardRatePerBlock'; params: { poolId: number; newRewardRatePerBlock: bigint } }
  /**
   * Modify a pool admin.
   *
   * Only the pool admin may perform this operation.
   **/
  | { name: 'SetPoolAdmin'; params: { poolId: number; newAdmin: AccountId32Like } }
  /**
   * Set when the pool should expire.
   *
   * Currently the expiry block can only be extended.
   *
   * Only the pool admin may perform this operation.
   **/
  | { name: 'SetPoolExpiryBlock'; params: { poolId: number; newExpiry: FrameSupportScheduleDispatchTime } }
  /**
   * Convenience method to deposit reward tokens into a pool.
   *
   * This method is not strictly necessary (tokens could be transferred directly to the
   * pool pot address), but is provided for convenience so manual derivation of the
   * account id is not required.
   **/
  | { name: 'DepositRewardTokens'; params: { poolId: number; amount: bigint } }
  /**
   * Cleanup a pool.
   *
   * Origin must be the pool admin.
   *
   * Cleanup storage, release any associated storage cost and return the remaining reward
   * tokens to the admin.
   **/
  | { name: 'CleanupPool'; params: { poolId: number } };

export type FrameSupportScheduleDispatchTime = { type: 'At'; value: number } | { type: 'After'; value: number };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletStateTrieMigrationCall =
  /**
   * Control the automatic migration.
   *
   * The dispatch origin of this call must be [`Config::ControlOrigin`].
   **/
  | { name: 'ControlAutoMigration'; params: { maybeConfig?: PalletStateTrieMigrationMigrationLimits | undefined } }
  /**
   * Continue the migration for the given `limits`.
   *
   * The dispatch origin of this call can be any signed account.
   *
   * This transaction has NO MONETARY INCENTIVES. calling it will not reward anyone. Albeit,
   * Upon successful execution, the transaction fee is returned.
   *
   * The (potentially over-estimated) of the byte length of all the data read must be
   * provided for up-front fee-payment and weighing. In essence, the caller is guaranteeing
   * that executing the current `MigrationTask` with the given `limits` will not exceed
   * `real_size_upper` bytes of read data.
   *
   * The `witness_task` is merely a helper to prevent the caller from being slashed or
   * generally trigger a migration that they do not intend. This parameter is just a message
   * from caller, saying that they believed `witness_task` was the last state of the
   * migration, and they only wish for their transaction to do anything, if this assumption
   * holds. In case `witness_task` does not match, the transaction fails.
   *
   * Based on the documentation of [`MigrationTask::migrate_until_exhaustion`], the
   * recommended way of doing this is to pass a `limit` that only bounds `count`, as the
   * `size` limit can always be overwritten.
   **/
  | {
      name: 'ContinueMigrate';
      params: {
        limits: PalletStateTrieMigrationMigrationLimits;
        realSizeUpper: number;
        witnessTask: PalletStateTrieMigrationMigrationTask;
      };
    }
  /**
   * Migrate the list of top keys by iterating each of them one by one.
   *
   * This does not affect the global migration process tracker ([`MigrationProcess`]), and
   * should only be used in case any keys are leftover due to a bug.
   **/
  | { name: 'MigrateCustomTop'; params: { keys: Array<Bytes>; witnessSize: number } }
  /**
   * Migrate the list of child keys by iterating each of them one by one.
   *
   * All of the given child keys must be present under one `child_root`.
   *
   * This does not affect the global migration process tracker ([`MigrationProcess`]), and
   * should only be used in case any keys are leftover due to a bug.
   **/
  | { name: 'MigrateCustomChild'; params: { root: Bytes; childKeys: Array<Bytes>; totalSize: number } }
  /**
   * Set the maximum limit of the signed migration.
   **/
  | { name: 'SetSignedMaxLimits'; params: { limits: PalletStateTrieMigrationMigrationLimits } }
  /**
   * Forcefully set the progress the running migration.
   *
   * This is only useful in one case: the next key to migrate is too big to be migrated with
   * a signed account, in a parachain context, and we simply want to skip it. A reasonable
   * example of this would be `:code:`, which is both very expensive to migrate, and commonly
   * used, so probably it is already migrated.
   *
   * In case you mess things up, you can also, in principle, use this to reset the migration
   * process.
   **/
  | {
      name: 'ForceSetProgress';
      params: { progressTop: PalletStateTrieMigrationProgress; progressChild: PalletStateTrieMigrationProgress };
    };

export type PalletStateTrieMigrationCallLike =
  /**
   * Control the automatic migration.
   *
   * The dispatch origin of this call must be [`Config::ControlOrigin`].
   **/
  | { name: 'ControlAutoMigration'; params: { maybeConfig?: PalletStateTrieMigrationMigrationLimits | undefined } }
  /**
   * Continue the migration for the given `limits`.
   *
   * The dispatch origin of this call can be any signed account.
   *
   * This transaction has NO MONETARY INCENTIVES. calling it will not reward anyone. Albeit,
   * Upon successful execution, the transaction fee is returned.
   *
   * The (potentially over-estimated) of the byte length of all the data read must be
   * provided for up-front fee-payment and weighing. In essence, the caller is guaranteeing
   * that executing the current `MigrationTask` with the given `limits` will not exceed
   * `real_size_upper` bytes of read data.
   *
   * The `witness_task` is merely a helper to prevent the caller from being slashed or
   * generally trigger a migration that they do not intend. This parameter is just a message
   * from caller, saying that they believed `witness_task` was the last state of the
   * migration, and they only wish for their transaction to do anything, if this assumption
   * holds. In case `witness_task` does not match, the transaction fails.
   *
   * Based on the documentation of [`MigrationTask::migrate_until_exhaustion`], the
   * recommended way of doing this is to pass a `limit` that only bounds `count`, as the
   * `size` limit can always be overwritten.
   **/
  | {
      name: 'ContinueMigrate';
      params: {
        limits: PalletStateTrieMigrationMigrationLimits;
        realSizeUpper: number;
        witnessTask: PalletStateTrieMigrationMigrationTask;
      };
    }
  /**
   * Migrate the list of top keys by iterating each of them one by one.
   *
   * This does not affect the global migration process tracker ([`MigrationProcess`]), and
   * should only be used in case any keys are leftover due to a bug.
   **/
  | { name: 'MigrateCustomTop'; params: { keys: Array<BytesLike>; witnessSize: number } }
  /**
   * Migrate the list of child keys by iterating each of them one by one.
   *
   * All of the given child keys must be present under one `child_root`.
   *
   * This does not affect the global migration process tracker ([`MigrationProcess`]), and
   * should only be used in case any keys are leftover due to a bug.
   **/
  | { name: 'MigrateCustomChild'; params: { root: BytesLike; childKeys: Array<BytesLike>; totalSize: number } }
  /**
   * Set the maximum limit of the signed migration.
   **/
  | { name: 'SetSignedMaxLimits'; params: { limits: PalletStateTrieMigrationMigrationLimits } }
  /**
   * Forcefully set the progress the running migration.
   *
   * This is only useful in one case: the next key to migrate is too big to be migrated with
   * a signed account, in a parachain context, and we simply want to skip it. A reasonable
   * example of this would be `:code:`, which is both very expensive to migrate, and commonly
   * used, so probably it is already migrated.
   *
   * In case you mess things up, you can also, in principle, use this to reset the migration
   * process.
   **/
  | {
      name: 'ForceSetProgress';
      params: { progressTop: PalletStateTrieMigrationProgress; progressChild: PalletStateTrieMigrationProgress };
    };

export type PalletStateTrieMigrationMigrationLimits = { size: number; item: number };

export type PalletStateTrieMigrationMigrationTask = {
  progressTop: PalletStateTrieMigrationProgress;
  progressChild: PalletStateTrieMigrationProgress;
  size: number;
  topItems: number;
  childItems: number;
};

export type PalletStateTrieMigrationProgress =
  | { type: 'ToStart' }
  | { type: 'LastKey'; value: Bytes }
  | { type: 'Complete' };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletStakingAsyncPalletCall =
  /**
   * Take the origin account as a stash and lock up `value` of its balance. `controller` will
   * be the account that controls it.
   *
   * `value` must be more than the `minimum_balance` specified by `T::Currency`.
   *
   * The dispatch origin for this call must be _Signed_ by the stash account.
   *
   * Emits `Bonded`.
   *
   * NOTE: Two of the storage writes (`Self::bonded`, `Self::payee`) are _never_ cleaned
   * unless the `origin` falls below _existential deposit_ (or equal to 0) and gets removed
   * as dust.
   **/
  | { name: 'Bond'; params: { value: bigint; payee: PalletStakingAsyncRewardDestination } }
  /**
   * Add some extra amount that have appeared in the stash `free_balance` into the balance up
   * for staking.
   *
   * The dispatch origin for this call must be _Signed_ by the stash, not the controller.
   *
   * Use this if there are additional funds in your stash account that you wish to bond.
   * Unlike [`bond`](Self::bond) or [`unbond`](Self::unbond) this function does not impose
   * any limitation on the amount that can be added.
   *
   * Emits `Bonded`.
   **/
  | { name: 'BondExtra'; params: { maxAdditional: bigint } }
  /**
   * Schedule a portion of the stash to be unlocked ready for transfer out after the bond
   * period ends. If this leaves an amount actively bonded less than
   * [`asset::existential_deposit`], then it is increased to the full amount.
   *
   * The dispatch origin for this call must be _Signed_ by the controller, not the stash.
   *
   * Once the unlock period is done, you can call `withdraw_unbonded` to actually move
   * the funds out of management ready for transfer.
   *
   * No more than a limited number of unlocking chunks (see `MaxUnlockingChunks`)
   * can co-exists at the same time. If there are no unlocking chunks slots available
   * [`Call::withdraw_unbonded`] is called to remove some of the chunks (if possible).
   *
   * If a user encounters the `InsufficientBond` error when calling this extrinsic,
   * they should call `chill` first in order to free up their bonded funds.
   *
   * Emits `Unbonded`.
   *
   * See also [`Call::withdraw_unbonded`].
   **/
  | { name: 'Unbond'; params: { value: bigint } }
  /**
   * Remove any unlocked chunks from the `unlocking` queue from our management.
   *
   * This essentially frees up that balance to be used by the stash account to do whatever
   * it wants.
   *
   * The dispatch origin for this call must be _Signed_ by the controller.
   *
   * Emits `Withdrawn`.
   *
   * See also [`Call::unbond`].
   *
   * ## Parameters
   *
   * - `num_slashing_spans`: **Deprecated**. This parameter is retained for backward
   * compatibility. It no longer has any effect.
   **/
  | { name: 'WithdrawUnbonded'; params: { numSlashingSpans: number } }
  /**
   * Declare the desire to validate for the origin controller.
   *
   * Effects will be felt at the beginning of the next era.
   *
   * The dispatch origin for this call must be _Signed_ by the controller, not the stash.
   **/
  | { name: 'Validate'; params: { prefs: PalletStakingAsyncValidatorPrefs } }
  /**
   * Declare the desire to nominate `targets` for the origin controller.
   *
   * Effects will be felt at the beginning of the next era.
   *
   * The dispatch origin for this call must be _Signed_ by the controller, not the stash.
   **/
  | { name: 'Nominate'; params: { targets: Array<MultiAddress> } }
  /**
   * Declare no desire to either validate or nominate.
   *
   * Effects will be felt at the beginning of the next era.
   *
   * The dispatch origin for this call must be _Signed_ by the controller, not the stash.
   *
   * ## Complexity
   * - Independent of the arguments. Insignificant complexity.
   * - Contains one read.
   * - Writes are limited to the `origin` account key.
   **/
  | { name: 'Chill' }
  /**
   * (Re-)set the payment target for a controller.
   *
   * Effects will be felt instantly (as soon as this function is completed successfully).
   *
   * The dispatch origin for this call must be _Signed_ by the controller, not the stash.
   **/
  | { name: 'SetPayee'; params: { payee: PalletStakingAsyncRewardDestination } }
  /**
   * (Re-)sets the controller of a stash to the stash itself. This function previously
   * accepted a `controller` argument to set the controller to an account other than the
   * stash itself. This functionality has now been removed, now only setting the controller
   * to the stash, if it is not already.
   *
   * Effects will be felt instantly (as soon as this function is completed successfully).
   *
   * The dispatch origin for this call must be _Signed_ by the stash, not the controller.
   **/
  | { name: 'SetController' }
  /**
   * Sets the ideal number of validators.
   *
   * The dispatch origin must be Root.
   **/
  | { name: 'SetValidatorCount'; params: { new: number } }
  /**
   * Increments the ideal number of validators up to maximum of
   * `T::MaxValidatorSet`.
   *
   * The dispatch origin must be Root.
   **/
  | { name: 'IncreaseValidatorCount'; params: { additional: number } }
  /**
   * Scale up the ideal number of validators by a factor up to maximum of
   * `T::MaxValidatorSet`.
   *
   * The dispatch origin must be Root.
   **/
  | { name: 'ScaleValidatorCount'; params: { factor: Percent } }
  /**
   * Force there to be no new eras indefinitely.
   *
   * The dispatch origin must be Root.
   *
   * # Warning
   *
   * The election process starts multiple blocks before the end of the era.
   * Thus the election process may be ongoing when this is called. In this case the
   * election will continue until the next era is triggered.
   **/
  | { name: 'ForceNoEras' }
  /**
   * Force there to be a new era at the end of the next session. After this, it will be
   * reset to normal (non-forced) behaviour.
   *
   * The dispatch origin must be Root.
   *
   * # Warning
   *
   * The election process starts multiple blocks before the end of the era.
   * If this is called just before a new era is triggered, the election process may not
   * have enough blocks to get a result.
   **/
  | { name: 'ForceNewEra' }
  /**
   * Set the validators who cannot be slashed (if any).
   *
   * The dispatch origin must be Root.
   **/
  | { name: 'SetInvulnerables'; params: { invulnerables: Array<AccountId32> } }
  /**
   * Force a current staker to become completely unstaked, immediately.
   *
   * The dispatch origin must be Root.
   * ## Parameters
   *
   * - `stash`: The stash account to be unstaked.
   * - `num_slashing_spans`: **Deprecated**. This parameter is retained for backward
   * compatibility. It no longer has any effect.
   **/
  | { name: 'ForceUnstake'; params: { stash: AccountId32; numSlashingSpans: number } }
  /**
   * Force there to be a new era at the end of sessions indefinitely.
   *
   * The dispatch origin must be Root.
   *
   * # Warning
   *
   * The election process starts multiple blocks before the end of the era.
   * If this is called just before a new era is triggered, the election process may not
   * have enough blocks to get a result.
   **/
  | { name: 'ForceNewEraAlways' }
  /**
   * Cancels scheduled slashes for a given era before they are applied.
   *
   * This function allows `T::AdminOrigin` to selectively remove pending slashes from
   * the `UnappliedSlashes` storage, preventing their enactment.
   *
   * ## Parameters
   * - `era`: The staking era for which slashes were deferred.
   * - `slash_keys`: A list of slash keys identifying the slashes to remove. This is a tuple
   * of `(stash, slash_fraction, page_index)`.
   **/
  | { name: 'CancelDeferredSlash'; params: { era: number; slashKeys: Array<[AccountId32, Perbill, number]> } }
  /**
   * Pay out next page of the stakers behind a validator for the given era.
   *
   * - `validator_stash` is the stash account of the validator.
   * - `era` may be any era between `[current_era - history_depth; current_era]`.
   *
   * The origin of this call must be _Signed_. Any account can call this function, even if
   * it is not one of the stakers.
   *
   * The reward payout could be paged in case there are too many nominators backing the
   * `validator_stash`. This call will payout unpaid pages in an ascending order. To claim a
   * specific page, use `payout_stakers_by_page`.`
   *
   * If all pages are claimed, it returns an error `InvalidPage`.
   **/
  | { name: 'PayoutStakers'; params: { validatorStash: AccountId32; era: number } }
  /**
   * Rebond a portion of the stash scheduled to be unlocked.
   *
   * The dispatch origin must be signed by the controller.
   **/
  | { name: 'Rebond'; params: { value: bigint } }
  /**
   * Remove all data structures concerning a staker/stash once it is at a state where it can
   * be considered `dust` in the staking system. The requirements are:
   *
   * 1. the `total_balance` of the stash is below existential deposit.
   * 2. or, the `ledger.total` of the stash is below existential deposit.
   * 3. or, existential deposit is zero and either `total_balance` or `ledger.total` is zero.
   *
   * The former can happen in cases like a slash; the latter when a fully unbonded account
   * is still receiving staking rewards in `RewardDestination::Staked`.
   *
   * It can be called by anyone, as long as `stash` meets the above requirements.
   *
   * Refunds the transaction fees upon successful execution.
   *
   * ## Parameters
   *
   * - `stash`: The stash account to be reaped.
   * - `num_slashing_spans`: **Deprecated**. This parameter is retained for backward
   * compatibility. It no longer has any effect.
   **/
  | { name: 'ReapStash'; params: { stash: AccountId32; numSlashingSpans: number } }
  /**
   * Remove the given nominations from the calling validator.
   *
   * Effects will be felt at the beginning of the next era.
   *
   * The dispatch origin for this call must be _Signed_ by the controller, not the stash.
   *
   * - `who`: A list of nominator stash accounts who are nominating this validator which
   * should no longer be nominating this validator.
   *
   * Note: Making this call only makes sense if you first set the validator preferences to
   * block any further nominations.
   **/
  | { name: 'Kick'; params: { who: Array<MultiAddress> } }
  /**
   * Update the various staking configurations .
   *
   * * `min_nominator_bond`: The minimum active bond needed to be a nominator.
   * * `min_validator_bond`: The minimum active bond needed to be a validator.
   * * `max_nominator_count`: The max number of users who can be a nominator at once. When
   * set to `None`, no limit is enforced.
   * * `max_validator_count`: The max number of users who can be a validator at once. When
   * set to `None`, no limit is enforced.
   * * `chill_threshold`: The ratio of `max_nominator_count` or `max_validator_count` which
   * should be filled in order for the `chill_other` transaction to work.
   * * `min_commission`: The minimum amount of commission that each validators must maintain.
   * This is checked only upon calling `validate`. Existing validators are not affected.
   *
   * RuntimeOrigin must be Root to call this function.
   *
   * NOTE: Existing nominators and validators will not be affected by this update.
   * to kick people under the new limits, `chill_other` should be called.
   **/
  | {
      name: 'SetStakingConfigs';
      params: {
        minNominatorBond: PalletStakingAsyncPalletConfigOp;
        minValidatorBond: PalletStakingAsyncPalletConfigOp;
        maxNominatorCount: PalletStakingAsyncPalletConfigOpU32;
        maxValidatorCount: PalletStakingAsyncPalletConfigOpU32;
        chillThreshold: PalletStakingAsyncPalletConfigOpPercent;
        minCommission: PalletStakingAsyncPalletConfigOpPerbill;
        maxStakedRewards: PalletStakingAsyncPalletConfigOpPercent;
      };
    }
  /**
   * Declare a `controller` to stop participating as either a validator or nominator.
   *
   * Effects will be felt at the beginning of the next era.
   *
   * The dispatch origin for this call must be _Signed_, but can be called by anyone.
   *
   * If the caller is the same as the controller being targeted, then no further checks are
   * enforced, and this function behaves just like `chill`.
   *
   * If the caller is different than the controller being targeted, the following conditions
   * must be met:
   *
   * * `controller` must belong to a nominator who has become non-decodable,
   *
   * Or:
   *
   * * A `ChillThreshold` must be set and checked which defines how close to the max
   * nominators or validators we must reach before users can start chilling one-another.
   * * A `MaxNominatorCount` and `MaxValidatorCount` must be set which is used to determine
   * how close we are to the threshold.
   * * A `MinNominatorBond` and `MinValidatorBond` must be set and checked, which determines
   * if this is a person that should be chilled because they have not met the threshold
   * bond required.
   *
   * This can be helpful if bond requirements are updated, and we need to remove old users
   * who do not satisfy these requirements.
   **/
  | { name: 'ChillOther'; params: { stash: AccountId32 } }
  /**
   * Force a validator to have at least the minimum commission. This will not affect a
   * validator who already has a commission greater than or equal to the minimum. Any account
   * can call this.
   **/
  | { name: 'ForceApplyMinCommission'; params: { validatorStash: AccountId32 } }
  /**
   * Sets the minimum amount of commission that each validators must maintain.
   *
   * This call has lower privilege requirements than `set_staking_config` and can be called
   * by the `T::AdminOrigin`. Root can always call this.
   **/
  | { name: 'SetMinCommission'; params: { new: Perbill } }
  /**
   * Pay out a page of the stakers behind a validator for the given era and page.
   *
   * - `validator_stash` is the stash account of the validator.
   * - `era` may be any era between `[current_era - history_depth; current_era]`.
   * - `page` is the page index of nominators to pay out with value between 0 and
   * `num_nominators / T::MaxExposurePageSize`.
   *
   * The origin of this call must be _Signed_. Any account can call this function, even if
   * it is not one of the stakers.
   *
   * If a validator has more than [`Config::MaxExposurePageSize`] nominators backing
   * them, then the list of nominators is paged, with each page being capped at
   * [`Config::MaxExposurePageSize`.] If a validator has more than one page of nominators,
   * the call needs to be made for each page separately in order for all the nominators
   * backing a validator to receive the reward. The nominators are not sorted across pages
   * and so it should not be assumed the highest staker would be on the topmost page and vice
   * versa. If rewards are not claimed in [`Config::HistoryDepth`] eras, they are lost.
   **/
  | { name: 'PayoutStakersByPage'; params: { validatorStash: AccountId32; era: number; page: number } }
  /**
   * Migrates an account's `RewardDestination::Controller` to
   * `RewardDestination::Account(controller)`.
   *
   * Effects will be felt instantly (as soon as this function is completed successfully).
   *
   * This will waive the transaction fee if the `payee` is successfully migrated.
   **/
  | { name: 'UpdatePayee'; params: { controller: AccountId32 } }
  /**
   * Updates a batch of controller accounts to their corresponding stash account if they are
   * not the same. Ignores any controller accounts that do not exist, and does not operate if
   * the stash and controller are already the same.
   *
   * Effects will be felt instantly (as soon as this function is completed successfully).
   *
   * The dispatch origin must be `T::AdminOrigin`.
   **/
  | { name: 'DeprecateControllerBatch'; params: { controllers: Array<AccountId32> } }
  /**
   * Restores the state of a ledger which is in an inconsistent state.
   *
   * The requirements to restore a ledger are the following:
   * * The stash is bonded; or
   * * The stash is not bonded but it has a staking lock left behind; or
   * * If the stash has an associated ledger and its state is inconsistent; or
   * * If the ledger is not corrupted *but* its staking lock is out of sync.
   *
   * The `maybe_*` input parameters will overwrite the corresponding data and metadata of the
   * ledger associated with the stash. If the input parameters are not set, the ledger will
   * be reset values from on-chain state.
   **/
  | {
      name: 'RestoreLedger';
      params: {
        stash: AccountId32;
        maybeController?: AccountId32 | undefined;
        maybeTotal?: bigint | undefined;
        maybeUnlocking?: Array<PalletStakingAsyncLedgerUnlockChunk> | undefined;
      };
    }
  /**
   * Migrates permissionlessly a stash from locks to holds.
   *
   * This removes the old lock on the stake and creates a hold on it atomically. If all
   * stake cannot be held, the best effort is made to hold as much as possible. The remaining
   * stake is removed from the ledger.
   *
   * The fee is waived if the migration is successful.
   **/
  | { name: 'MigrateCurrency'; params: { stash: AccountId32 } }
  /**
   * Manually applies a deferred slash for a given era.
   *
   * Normally, slashes are automatically applied shortly after the start of the `slash_era`.
   * This function exists as a **fallback mechanism** in case slashes were not applied due to
   * unexpected reasons. It allows anyone to manually apply an unapplied slash.
   *
   * ## Parameters
   * - `slash_era`: The staking era in which the slash was originally scheduled.
   * - `slash_key`: A unique identifier for the slash, represented as a tuple:
   * - `stash`: The stash account of the validator being slashed.
   * - `slash_fraction`: The fraction of the stake that was slashed.
   * - `page_index`: The index of the exposure page being processed.
   *
   * ## Behavior
   * - The function is **permissionless**—anyone can call it.
   * - The `slash_era` **must be the current era or a past era**. If it is in the future, the
   * call fails with `EraNotStarted`.
   * - The fee is waived if the slash is successfully applied.
   *
   * ## Future Improvement
   * - Implement an **off-chain worker (OCW) task** to automatically apply slashes when there
   * is unused block space, improving efficiency.
   **/
  | { name: 'ApplySlash'; params: { slashEra: number; slashKey: [AccountId32, Perbill, number] } }
  /**
   * Adjusts the staking ledger by withdrawing any excess staked amount.
   *
   * This function corrects cases where a user's recorded stake in the ledger
   * exceeds their actual staked funds. This situation can arise due to cases such as
   * external slashing by another pallet, leading to an inconsistency between the ledger
   * and the actual stake.
   **/
  | { name: 'WithdrawOverstake'; params: { stash: AccountId32 } };

export type PalletStakingAsyncPalletCallLike =
  /**
   * Take the origin account as a stash and lock up `value` of its balance. `controller` will
   * be the account that controls it.
   *
   * `value` must be more than the `minimum_balance` specified by `T::Currency`.
   *
   * The dispatch origin for this call must be _Signed_ by the stash account.
   *
   * Emits `Bonded`.
   *
   * NOTE: Two of the storage writes (`Self::bonded`, `Self::payee`) are _never_ cleaned
   * unless the `origin` falls below _existential deposit_ (or equal to 0) and gets removed
   * as dust.
   **/
  | { name: 'Bond'; params: { value: bigint; payee: PalletStakingAsyncRewardDestination } }
  /**
   * Add some extra amount that have appeared in the stash `free_balance` into the balance up
   * for staking.
   *
   * The dispatch origin for this call must be _Signed_ by the stash, not the controller.
   *
   * Use this if there are additional funds in your stash account that you wish to bond.
   * Unlike [`bond`](Self::bond) or [`unbond`](Self::unbond) this function does not impose
   * any limitation on the amount that can be added.
   *
   * Emits `Bonded`.
   **/
  | { name: 'BondExtra'; params: { maxAdditional: bigint } }
  /**
   * Schedule a portion of the stash to be unlocked ready for transfer out after the bond
   * period ends. If this leaves an amount actively bonded less than
   * [`asset::existential_deposit`], then it is increased to the full amount.
   *
   * The dispatch origin for this call must be _Signed_ by the controller, not the stash.
   *
   * Once the unlock period is done, you can call `withdraw_unbonded` to actually move
   * the funds out of management ready for transfer.
   *
   * No more than a limited number of unlocking chunks (see `MaxUnlockingChunks`)
   * can co-exists at the same time. If there are no unlocking chunks slots available
   * [`Call::withdraw_unbonded`] is called to remove some of the chunks (if possible).
   *
   * If a user encounters the `InsufficientBond` error when calling this extrinsic,
   * they should call `chill` first in order to free up their bonded funds.
   *
   * Emits `Unbonded`.
   *
   * See also [`Call::withdraw_unbonded`].
   **/
  | { name: 'Unbond'; params: { value: bigint } }
  /**
   * Remove any unlocked chunks from the `unlocking` queue from our management.
   *
   * This essentially frees up that balance to be used by the stash account to do whatever
   * it wants.
   *
   * The dispatch origin for this call must be _Signed_ by the controller.
   *
   * Emits `Withdrawn`.
   *
   * See also [`Call::unbond`].
   *
   * ## Parameters
   *
   * - `num_slashing_spans`: **Deprecated**. This parameter is retained for backward
   * compatibility. It no longer has any effect.
   **/
  | { name: 'WithdrawUnbonded'; params: { numSlashingSpans: number } }
  /**
   * Declare the desire to validate for the origin controller.
   *
   * Effects will be felt at the beginning of the next era.
   *
   * The dispatch origin for this call must be _Signed_ by the controller, not the stash.
   **/
  | { name: 'Validate'; params: { prefs: PalletStakingAsyncValidatorPrefs } }
  /**
   * Declare the desire to nominate `targets` for the origin controller.
   *
   * Effects will be felt at the beginning of the next era.
   *
   * The dispatch origin for this call must be _Signed_ by the controller, not the stash.
   **/
  | { name: 'Nominate'; params: { targets: Array<MultiAddressLike> } }
  /**
   * Declare no desire to either validate or nominate.
   *
   * Effects will be felt at the beginning of the next era.
   *
   * The dispatch origin for this call must be _Signed_ by the controller, not the stash.
   *
   * ## Complexity
   * - Independent of the arguments. Insignificant complexity.
   * - Contains one read.
   * - Writes are limited to the `origin` account key.
   **/
  | { name: 'Chill' }
  /**
   * (Re-)set the payment target for a controller.
   *
   * Effects will be felt instantly (as soon as this function is completed successfully).
   *
   * The dispatch origin for this call must be _Signed_ by the controller, not the stash.
   **/
  | { name: 'SetPayee'; params: { payee: PalletStakingAsyncRewardDestination } }
  /**
   * (Re-)sets the controller of a stash to the stash itself. This function previously
   * accepted a `controller` argument to set the controller to an account other than the
   * stash itself. This functionality has now been removed, now only setting the controller
   * to the stash, if it is not already.
   *
   * Effects will be felt instantly (as soon as this function is completed successfully).
   *
   * The dispatch origin for this call must be _Signed_ by the stash, not the controller.
   **/
  | { name: 'SetController' }
  /**
   * Sets the ideal number of validators.
   *
   * The dispatch origin must be Root.
   **/
  | { name: 'SetValidatorCount'; params: { new: number } }
  /**
   * Increments the ideal number of validators up to maximum of
   * `T::MaxValidatorSet`.
   *
   * The dispatch origin must be Root.
   **/
  | { name: 'IncreaseValidatorCount'; params: { additional: number } }
  /**
   * Scale up the ideal number of validators by a factor up to maximum of
   * `T::MaxValidatorSet`.
   *
   * The dispatch origin must be Root.
   **/
  | { name: 'ScaleValidatorCount'; params: { factor: Percent } }
  /**
   * Force there to be no new eras indefinitely.
   *
   * The dispatch origin must be Root.
   *
   * # Warning
   *
   * The election process starts multiple blocks before the end of the era.
   * Thus the election process may be ongoing when this is called. In this case the
   * election will continue until the next era is triggered.
   **/
  | { name: 'ForceNoEras' }
  /**
   * Force there to be a new era at the end of the next session. After this, it will be
   * reset to normal (non-forced) behaviour.
   *
   * The dispatch origin must be Root.
   *
   * # Warning
   *
   * The election process starts multiple blocks before the end of the era.
   * If this is called just before a new era is triggered, the election process may not
   * have enough blocks to get a result.
   **/
  | { name: 'ForceNewEra' }
  /**
   * Set the validators who cannot be slashed (if any).
   *
   * The dispatch origin must be Root.
   **/
  | { name: 'SetInvulnerables'; params: { invulnerables: Array<AccountId32Like> } }
  /**
   * Force a current staker to become completely unstaked, immediately.
   *
   * The dispatch origin must be Root.
   * ## Parameters
   *
   * - `stash`: The stash account to be unstaked.
   * - `num_slashing_spans`: **Deprecated**. This parameter is retained for backward
   * compatibility. It no longer has any effect.
   **/
  | { name: 'ForceUnstake'; params: { stash: AccountId32Like; numSlashingSpans: number } }
  /**
   * Force there to be a new era at the end of sessions indefinitely.
   *
   * The dispatch origin must be Root.
   *
   * # Warning
   *
   * The election process starts multiple blocks before the end of the era.
   * If this is called just before a new era is triggered, the election process may not
   * have enough blocks to get a result.
   **/
  | { name: 'ForceNewEraAlways' }
  /**
   * Cancels scheduled slashes for a given era before they are applied.
   *
   * This function allows `T::AdminOrigin` to selectively remove pending slashes from
   * the `UnappliedSlashes` storage, preventing their enactment.
   *
   * ## Parameters
   * - `era`: The staking era for which slashes were deferred.
   * - `slash_keys`: A list of slash keys identifying the slashes to remove. This is a tuple
   * of `(stash, slash_fraction, page_index)`.
   **/
  | { name: 'CancelDeferredSlash'; params: { era: number; slashKeys: Array<[AccountId32Like, Perbill, number]> } }
  /**
   * Pay out next page of the stakers behind a validator for the given era.
   *
   * - `validator_stash` is the stash account of the validator.
   * - `era` may be any era between `[current_era - history_depth; current_era]`.
   *
   * The origin of this call must be _Signed_. Any account can call this function, even if
   * it is not one of the stakers.
   *
   * The reward payout could be paged in case there are too many nominators backing the
   * `validator_stash`. This call will payout unpaid pages in an ascending order. To claim a
   * specific page, use `payout_stakers_by_page`.`
   *
   * If all pages are claimed, it returns an error `InvalidPage`.
   **/
  | { name: 'PayoutStakers'; params: { validatorStash: AccountId32Like; era: number } }
  /**
   * Rebond a portion of the stash scheduled to be unlocked.
   *
   * The dispatch origin must be signed by the controller.
   **/
  | { name: 'Rebond'; params: { value: bigint } }
  /**
   * Remove all data structures concerning a staker/stash once it is at a state where it can
   * be considered `dust` in the staking system. The requirements are:
   *
   * 1. the `total_balance` of the stash is below existential deposit.
   * 2. or, the `ledger.total` of the stash is below existential deposit.
   * 3. or, existential deposit is zero and either `total_balance` or `ledger.total` is zero.
   *
   * The former can happen in cases like a slash; the latter when a fully unbonded account
   * is still receiving staking rewards in `RewardDestination::Staked`.
   *
   * It can be called by anyone, as long as `stash` meets the above requirements.
   *
   * Refunds the transaction fees upon successful execution.
   *
   * ## Parameters
   *
   * - `stash`: The stash account to be reaped.
   * - `num_slashing_spans`: **Deprecated**. This parameter is retained for backward
   * compatibility. It no longer has any effect.
   **/
  | { name: 'ReapStash'; params: { stash: AccountId32Like; numSlashingSpans: number } }
  /**
   * Remove the given nominations from the calling validator.
   *
   * Effects will be felt at the beginning of the next era.
   *
   * The dispatch origin for this call must be _Signed_ by the controller, not the stash.
   *
   * - `who`: A list of nominator stash accounts who are nominating this validator which
   * should no longer be nominating this validator.
   *
   * Note: Making this call only makes sense if you first set the validator preferences to
   * block any further nominations.
   **/
  | { name: 'Kick'; params: { who: Array<MultiAddressLike> } }
  /**
   * Update the various staking configurations .
   *
   * * `min_nominator_bond`: The minimum active bond needed to be a nominator.
   * * `min_validator_bond`: The minimum active bond needed to be a validator.
   * * `max_nominator_count`: The max number of users who can be a nominator at once. When
   * set to `None`, no limit is enforced.
   * * `max_validator_count`: The max number of users who can be a validator at once. When
   * set to `None`, no limit is enforced.
   * * `chill_threshold`: The ratio of `max_nominator_count` or `max_validator_count` which
   * should be filled in order for the `chill_other` transaction to work.
   * * `min_commission`: The minimum amount of commission that each validators must maintain.
   * This is checked only upon calling `validate`. Existing validators are not affected.
   *
   * RuntimeOrigin must be Root to call this function.
   *
   * NOTE: Existing nominators and validators will not be affected by this update.
   * to kick people under the new limits, `chill_other` should be called.
   **/
  | {
      name: 'SetStakingConfigs';
      params: {
        minNominatorBond: PalletStakingAsyncPalletConfigOp;
        minValidatorBond: PalletStakingAsyncPalletConfigOp;
        maxNominatorCount: PalletStakingAsyncPalletConfigOpU32;
        maxValidatorCount: PalletStakingAsyncPalletConfigOpU32;
        chillThreshold: PalletStakingAsyncPalletConfigOpPercent;
        minCommission: PalletStakingAsyncPalletConfigOpPerbill;
        maxStakedRewards: PalletStakingAsyncPalletConfigOpPercent;
      };
    }
  /**
   * Declare a `controller` to stop participating as either a validator or nominator.
   *
   * Effects will be felt at the beginning of the next era.
   *
   * The dispatch origin for this call must be _Signed_, but can be called by anyone.
   *
   * If the caller is the same as the controller being targeted, then no further checks are
   * enforced, and this function behaves just like `chill`.
   *
   * If the caller is different than the controller being targeted, the following conditions
   * must be met:
   *
   * * `controller` must belong to a nominator who has become non-decodable,
   *
   * Or:
   *
   * * A `ChillThreshold` must be set and checked which defines how close to the max
   * nominators or validators we must reach before users can start chilling one-another.
   * * A `MaxNominatorCount` and `MaxValidatorCount` must be set which is used to determine
   * how close we are to the threshold.
   * * A `MinNominatorBond` and `MinValidatorBond` must be set and checked, which determines
   * if this is a person that should be chilled because they have not met the threshold
   * bond required.
   *
   * This can be helpful if bond requirements are updated, and we need to remove old users
   * who do not satisfy these requirements.
   **/
  | { name: 'ChillOther'; params: { stash: AccountId32Like } }
  /**
   * Force a validator to have at least the minimum commission. This will not affect a
   * validator who already has a commission greater than or equal to the minimum. Any account
   * can call this.
   **/
  | { name: 'ForceApplyMinCommission'; params: { validatorStash: AccountId32Like } }
  /**
   * Sets the minimum amount of commission that each validators must maintain.
   *
   * This call has lower privilege requirements than `set_staking_config` and can be called
   * by the `T::AdminOrigin`. Root can always call this.
   **/
  | { name: 'SetMinCommission'; params: { new: Perbill } }
  /**
   * Pay out a page of the stakers behind a validator for the given era and page.
   *
   * - `validator_stash` is the stash account of the validator.
   * - `era` may be any era between `[current_era - history_depth; current_era]`.
   * - `page` is the page index of nominators to pay out with value between 0 and
   * `num_nominators / T::MaxExposurePageSize`.
   *
   * The origin of this call must be _Signed_. Any account can call this function, even if
   * it is not one of the stakers.
   *
   * If a validator has more than [`Config::MaxExposurePageSize`] nominators backing
   * them, then the list of nominators is paged, with each page being capped at
   * [`Config::MaxExposurePageSize`.] If a validator has more than one page of nominators,
   * the call needs to be made for each page separately in order for all the nominators
   * backing a validator to receive the reward. The nominators are not sorted across pages
   * and so it should not be assumed the highest staker would be on the topmost page and vice
   * versa. If rewards are not claimed in [`Config::HistoryDepth`] eras, they are lost.
   **/
  | { name: 'PayoutStakersByPage'; params: { validatorStash: AccountId32Like; era: number; page: number } }
  /**
   * Migrates an account's `RewardDestination::Controller` to
   * `RewardDestination::Account(controller)`.
   *
   * Effects will be felt instantly (as soon as this function is completed successfully).
   *
   * This will waive the transaction fee if the `payee` is successfully migrated.
   **/
  | { name: 'UpdatePayee'; params: { controller: AccountId32Like } }
  /**
   * Updates a batch of controller accounts to their corresponding stash account if they are
   * not the same. Ignores any controller accounts that do not exist, and does not operate if
   * the stash and controller are already the same.
   *
   * Effects will be felt instantly (as soon as this function is completed successfully).
   *
   * The dispatch origin must be `T::AdminOrigin`.
   **/
  | { name: 'DeprecateControllerBatch'; params: { controllers: Array<AccountId32Like> } }
  /**
   * Restores the state of a ledger which is in an inconsistent state.
   *
   * The requirements to restore a ledger are the following:
   * * The stash is bonded; or
   * * The stash is not bonded but it has a staking lock left behind; or
   * * If the stash has an associated ledger and its state is inconsistent; or
   * * If the ledger is not corrupted *but* its staking lock is out of sync.
   *
   * The `maybe_*` input parameters will overwrite the corresponding data and metadata of the
   * ledger associated with the stash. If the input parameters are not set, the ledger will
   * be reset values from on-chain state.
   **/
  | {
      name: 'RestoreLedger';
      params: {
        stash: AccountId32Like;
        maybeController?: AccountId32Like | undefined;
        maybeTotal?: bigint | undefined;
        maybeUnlocking?: Array<PalletStakingAsyncLedgerUnlockChunk> | undefined;
      };
    }
  /**
   * Migrates permissionlessly a stash from locks to holds.
   *
   * This removes the old lock on the stake and creates a hold on it atomically. If all
   * stake cannot be held, the best effort is made to hold as much as possible. The remaining
   * stake is removed from the ledger.
   *
   * The fee is waived if the migration is successful.
   **/
  | { name: 'MigrateCurrency'; params: { stash: AccountId32Like } }
  /**
   * Manually applies a deferred slash for a given era.
   *
   * Normally, slashes are automatically applied shortly after the start of the `slash_era`.
   * This function exists as a **fallback mechanism** in case slashes were not applied due to
   * unexpected reasons. It allows anyone to manually apply an unapplied slash.
   *
   * ## Parameters
   * - `slash_era`: The staking era in which the slash was originally scheduled.
   * - `slash_key`: A unique identifier for the slash, represented as a tuple:
   * - `stash`: The stash account of the validator being slashed.
   * - `slash_fraction`: The fraction of the stake that was slashed.
   * - `page_index`: The index of the exposure page being processed.
   *
   * ## Behavior
   * - The function is **permissionless**—anyone can call it.
   * - The `slash_era` **must be the current era or a past era**. If it is in the future, the
   * call fails with `EraNotStarted`.
   * - The fee is waived if the slash is successfully applied.
   *
   * ## Future Improvement
   * - Implement an **off-chain worker (OCW) task** to automatically apply slashes when there
   * is unused block space, improving efficiency.
   **/
  | { name: 'ApplySlash'; params: { slashEra: number; slashKey: [AccountId32Like, Perbill, number] } }
  /**
   * Adjusts the staking ledger by withdrawing any excess staked amount.
   *
   * This function corrects cases where a user's recorded stake in the ledger
   * exceeds their actual staked funds. This situation can arise due to cases such as
   * external slashing by another pallet, leading to an inconsistency between the ledger
   * and the actual stake.
   **/
  | { name: 'WithdrawOverstake'; params: { stash: AccountId32Like } };

export type PalletStakingAsyncPalletConfigOp = { type: 'Noop' } | { type: 'Set'; value: bigint } | { type: 'Remove' };

export type PalletStakingAsyncPalletConfigOpU32 =
  | { type: 'Noop' }
  | { type: 'Set'; value: number }
  | { type: 'Remove' };

export type PalletStakingAsyncPalletConfigOpPercent =
  | { type: 'Noop' }
  | { type: 'Set'; value: Percent }
  | { type: 'Remove' };

export type PalletStakingAsyncPalletConfigOpPerbill =
  | { type: 'Noop' }
  | { type: 'Set'; value: Perbill }
  | { type: 'Remove' };

export type PalletStakingAsyncLedgerUnlockChunk = { value: bigint; era: number };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletNominationPoolsCall =
  /**
   * Stake funds with a pool. The amount to bond is delegated (or transferred based on
   * [`adapter::StakeStrategyType`]) from the member to the pool account and immediately
   * increases the pool's bond.
   *
   * The method of transferring the amount to the pool account is determined by
   * [`adapter::StakeStrategyType`]. If the pool is configured to use
   * [`adapter::StakeStrategyType::Delegate`], the funds remain in the account of
   * the `origin`, while the pool gains the right to use these funds for staking.
   *
   * # Note
   *
   * * An account can only be a member of a single pool.
   * * An account cannot join the same pool multiple times.
   * * This call will *not* dust the member account, so the member must have at least
   * `existential deposit + amount` in their account.
   * * Only a pool with [`PoolState::Open`] can be joined
   **/
  | { name: 'Join'; params: { amount: bigint; poolId: number } }
  /**
   * Bond `extra` more funds from `origin` into the pool to which they already belong.
   *
   * Additional funds can come from either the free balance of the account, of from the
   * accumulated rewards, see [`BondExtra`].
   *
   * Bonding extra funds implies an automatic payout of all pending rewards as well.
   * See `bond_extra_other` to bond pending rewards of `other` members.
   **/
  | { name: 'BondExtra'; params: { extra: PalletNominationPoolsBondExtra } }
  /**
   * A bonded member can use this to claim their payout based on the rewards that the pool
   * has accumulated since their last claimed payout (OR since joining if this is their first
   * time claiming rewards). The payout will be transferred to the member's account.
   *
   * The member will earn rewards pro rata based on the members stake vs the sum of the
   * members in the pools stake. Rewards do not "expire".
   *
   * See `claim_payout_other` to claim rewards on behalf of some `other` pool member.
   **/
  | { name: 'ClaimPayout' }
  /**
   * Unbond up to `unbonding_points` of the `member_account`'s funds from the pool. It
   * implicitly collects the rewards one last time, since not doing so would mean some
   * rewards would be forfeited.
   *
   * Under certain conditions, this call can be dispatched permissionlessly (i.e. by any
   * account).
   *
   * # Conditions for a permissionless dispatch.
   *
   * * The pool is blocked and the caller is either the root or bouncer. This is refereed to
   * as a kick.
   * * The pool is destroying and the member is not the depositor.
   * * The pool is destroying, the member is the depositor and no other members are in the
   * pool.
   *
   * ## Conditions for permissioned dispatch (i.e. the caller is also the
   * `member_account`):
   *
   * * The caller is not the depositor.
   * * The caller is the depositor, the pool is destroying and no other members are in the
   * pool.
   *
   * # Note
   *
   * If there are too many unlocking chunks to unbond with the pool account,
   * [`Call::pool_withdraw_unbonded`] can be called to try and minimize unlocking chunks.
   * The [`StakingInterface::unbond`] will implicitly call [`Call::pool_withdraw_unbonded`]
   * to try to free chunks if necessary (ie. if unbound was called and no unlocking chunks
   * are available). However, it may not be possible to release the current unlocking chunks,
   * in which case, the result of this call will likely be the `NoMoreChunks` error from the
   * staking system.
   **/
  | { name: 'Unbond'; params: { memberAccount: MultiAddress; unbondingPoints: bigint } }
  /**
   * Call `withdraw_unbonded` for the pools account. This call can be made by any account.
   *
   * This is useful if there are too many unlocking chunks to call `unbond`, and some
   * can be cleared by withdrawing. In the case there are too many unlocking chunks, the user
   * would probably see an error like `NoMoreChunks` emitted from the staking system when
   * they attempt to unbond.
   **/
  | { name: 'PoolWithdrawUnbonded'; params: { poolId: number; numSlashingSpans: number } }
  /**
   * Withdraw unbonded funds from `member_account`. If no bonded funds can be unbonded, an
   * error is returned.
   *
   * Under certain conditions, this call can be dispatched permissionlessly (i.e. by any
   * account).
   *
   * # Conditions for a permissionless dispatch
   *
   * * The pool is in destroy mode and the target is not the depositor.
   * * The target is the depositor and they are the only member in the sub pools.
   * * The pool is blocked and the caller is either the root or bouncer.
   *
   * # Conditions for permissioned dispatch
   *
   * * The caller is the target and they are not the depositor.
   *
   * # Note
   *
   * - If the target is the depositor, the pool will be destroyed.
   * - If the pool has any pending slash, we also try to slash the member before letting them
   * withdraw. This calculation adds some weight overhead and is only defensive. In reality,
   * pool slashes must have been already applied via permissionless [`Call::apply_slash`].
   **/
  | { name: 'WithdrawUnbonded'; params: { memberAccount: MultiAddress; numSlashingSpans: number } }
  /**
   * Create a new delegation pool.
   *
   * # Arguments
   *
   * * `amount` - The amount of funds to delegate to the pool. This also acts of a sort of
   * deposit since the pools creator cannot fully unbond funds until the pool is being
   * destroyed.
   * * `index` - A disambiguation index for creating the account. Likely only useful when
   * creating multiple pools in the same extrinsic.
   * * `root` - The account to set as [`PoolRoles::root`].
   * * `nominator` - The account to set as the [`PoolRoles::nominator`].
   * * `bouncer` - The account to set as the [`PoolRoles::bouncer`].
   *
   * # Note
   *
   * In addition to `amount`, the caller will transfer the existential deposit; so the caller
   * needs at have at least `amount + existential_deposit` transferable.
   **/
  | { name: 'Create'; params: { amount: bigint; root: MultiAddress; nominator: MultiAddress; bouncer: MultiAddress } }
  /**
   * Create a new delegation pool with a previously used pool id
   *
   * # Arguments
   *
   * same as `create` with the inclusion of
   * * `pool_id` - `A valid PoolId.
   **/
  | {
      name: 'CreateWithPoolId';
      params: { amount: bigint; root: MultiAddress; nominator: MultiAddress; bouncer: MultiAddress; poolId: number };
    }
  /**
   * Nominate on behalf of the pool.
   *
   * The dispatch origin of this call must be signed by the pool nominator or the pool
   * root role.
   *
   * This directly forwards the call to an implementation of `StakingInterface` (e.g.,
   * `pallet-staking`) through [`Config::StakeAdapter`], on behalf of the bonded pool.
   *
   * # Note
   *
   * In addition to a `root` or `nominator` role of `origin`, the pool's depositor needs to
   * have at least `depositor_min_bond` in the pool to start nominating.
   **/
  | { name: 'Nominate'; params: { poolId: number; validators: Array<AccountId32> } }
  /**
   * Set a new state for the pool.
   *
   * If a pool is already in the `Destroying` state, then under no condition can its state
   * change again.
   *
   * The dispatch origin of this call must be either:
   *
   * 1. signed by the bouncer, or the root role of the pool,
   * 2. if the pool conditions to be open are NOT met (as described by `ok_to_be_open`), and
   * then the state of the pool can be permissionlessly changed to `Destroying`.
   **/
  | { name: 'SetState'; params: { poolId: number; state: PalletNominationPoolsPoolState } }
  /**
   * Set a new metadata for the pool.
   *
   * The dispatch origin of this call must be signed by the bouncer, or the root role of the
   * pool.
   **/
  | { name: 'SetMetadata'; params: { poolId: number; metadata: Bytes } }
  /**
   * Update configurations for the nomination pools. The origin for this call must be
   * [`Config::AdminOrigin`].
   *
   * # Arguments
   *
   * * `min_join_bond` - Set [`MinJoinBond`].
   * * `min_create_bond` - Set [`MinCreateBond`].
   * * `max_pools` - Set [`MaxPools`].
   * * `max_members` - Set [`MaxPoolMembers`].
   * * `max_members_per_pool` - Set [`MaxPoolMembersPerPool`].
   * * `global_max_commission` - Set [`GlobalMaxCommission`].
   **/
  | {
      name: 'SetConfigs';
      params: {
        minJoinBond: PalletNominationPoolsConfigOp;
        minCreateBond: PalletNominationPoolsConfigOp;
        maxPools: PalletNominationPoolsConfigOpU32;
        maxMembers: PalletNominationPoolsConfigOpU32;
        maxMembersPerPool: PalletNominationPoolsConfigOpU32;
        globalMaxCommission: PalletNominationPoolsConfigOpPerbill;
      };
    }
  /**
   * Update the roles of the pool.
   *
   * The root is the only entity that can change any of the roles, including itself,
   * excluding the depositor, who can never change.
   *
   * It emits an event, notifying UIs of the role change. This event is quite relevant to
   * most pool members and they should be informed of changes to pool roles.
   **/
  | {
      name: 'UpdateRoles';
      params: {
        poolId: number;
        newRoot: PalletNominationPoolsConfigOp004;
        newNominator: PalletNominationPoolsConfigOp004;
        newBouncer: PalletNominationPoolsConfigOp004;
      };
    }
  /**
   * Chill on behalf of the pool.
   *
   * The dispatch origin of this call can be signed by the pool nominator or the pool
   * root role, same as [`Pallet::nominate`].
   *
   * This directly forwards the call to an implementation of `StakingInterface` (e.g.,
   * `pallet-staking`) through [`Config::StakeAdapter`], on behalf of the bonded pool.
   *
   * Under certain conditions, this call can be dispatched permissionlessly (i.e. by any
   * account).
   *
   * # Conditions for a permissionless dispatch:
   * * When pool depositor has less than `MinNominatorBond` staked, otherwise pool members
   * are unable to unbond.
   *
   * # Conditions for permissioned dispatch:
   * * The caller is the pool's nominator or root.
   **/
  | { name: 'Chill'; params: { poolId: number } }
  /**
   * `origin` bonds funds from `extra` for some pool member `member` into their respective
   * pools.
   *
   * `origin` can bond extra funds from free balance or pending rewards when `origin ==
   * other`.
   *
   * In the case of `origin != other`, `origin` can only bond extra pending rewards of
   * `other` members assuming set_claim_permission for the given member is
   * `PermissionlessCompound` or `PermissionlessAll`.
   **/
  | { name: 'BondExtraOther'; params: { member: MultiAddress; extra: PalletNominationPoolsBondExtra } }
  /**
   * Allows a pool member to set a claim permission to allow or disallow permissionless
   * bonding and withdrawing.
   *
   * # Arguments
   *
   * * `origin` - Member of a pool.
   * * `permission` - The permission to be applied.
   **/
  | { name: 'SetClaimPermission'; params: { permission: PalletNominationPoolsClaimPermission } }
  /**
   * `origin` can claim payouts on some pool member `other`'s behalf.
   *
   * Pool member `other` must have a `PermissionlessWithdraw` or `PermissionlessAll` claim
   * permission for this call to be successful.
   **/
  | { name: 'ClaimPayoutOther'; params: { other: AccountId32 } }
  /**
   * Set the commission of a pool.
   * Both a commission percentage and a commission payee must be provided in the `current`
   * tuple. Where a `current` of `None` is provided, any current commission will be removed.
   *
   * - If a `None` is supplied to `new_commission`, existing commission will be removed.
   **/
  | { name: 'SetCommission'; params: { poolId: number; newCommission?: [Perbill, AccountId32] | undefined } }
  /**
   * Set the maximum commission of a pool.
   *
   * - Initial max can be set to any `Perbill`, and only smaller values thereafter.
   * - Current commission will be lowered in the event it is higher than a new max
   * commission.
   **/
  | { name: 'SetCommissionMax'; params: { poolId: number; maxCommission: Perbill } }
  /**
   * Set the commission change rate for a pool.
   *
   * Initial change rate is not bounded, whereas subsequent updates can only be more
   * restrictive than the current.
   **/
  | {
      name: 'SetCommissionChangeRate';
      params: { poolId: number; changeRate: PalletNominationPoolsCommissionChangeRate };
    }
  /**
   * Claim pending commission.
   *
   * The `root` role of the pool is _always_ allowed to claim the pool's commission.
   *
   * If the pool has set `CommissionClaimPermission::Permissionless`, then any account can
   * trigger the process of claiming the pool's commission.
   *
   * If the pool has set its `CommissionClaimPermission` to `Account(acc)`, then only
   * accounts
   * * `acc`, and
   * * the pool's root account
   *
   * may call this extrinsic on behalf of the pool.
   *
   * Pending commissions are paid out and added to the total claimed commission.
   * The total pending commission is reset to zero.
   **/
  | { name: 'ClaimCommission'; params: { poolId: number } }
  /**
   * Top up the deficit or withdraw the excess ED from the pool.
   *
   * When a pool is created, the pool depositor transfers ED to the reward account of the
   * pool. ED is subject to change and over time, the deposit in the reward account may be
   * insufficient to cover the ED deficit of the pool or vice-versa where there is excess
   * deposit to the pool. This call allows anyone to adjust the ED deposit of the
   * pool by either topping up the deficit or claiming the excess.
   **/
  | { name: 'AdjustPoolDeposit'; params: { poolId: number } }
  /**
   * Set or remove a pool's commission claim permission.
   *
   * Determines who can claim the pool's pending commission. Only the `Root` role of the pool
   * is able to configure commission claim permissions.
   **/
  | {
      name: 'SetCommissionClaimPermission';
      params: { poolId: number; permission?: PalletNominationPoolsCommissionClaimPermission | undefined };
    }
  /**
   * Apply a pending slash on a member.
   *
   * Fails unless [`crate::pallet::Config::StakeAdapter`] is of strategy type:
   * [`adapter::StakeStrategyType::Delegate`].
   *
   * The pending slash amount of the member must be equal or more than `ExistentialDeposit`.
   * This call can be dispatched permissionlessly (i.e. by any account). If the execution
   * is successful, fee is refunded and caller may be rewarded with a part of the slash
   * based on the [`crate::pallet::Config::StakeAdapter`] configuration.
   **/
  | { name: 'ApplySlash'; params: { memberAccount: MultiAddress } }
  /**
   * Migrates delegated funds from the pool account to the `member_account`.
   *
   * Fails unless [`crate::pallet::Config::StakeAdapter`] is of strategy type:
   * [`adapter::StakeStrategyType::Delegate`].
   *
   * This is a permission-less call and refunds any fee if claim is successful.
   *
   * If the pool has migrated to delegation based staking, the staked tokens of pool members
   * can be moved and held in their own account. See [`adapter::DelegateStake`]
   **/
  | { name: 'MigrateDelegation'; params: { memberAccount: MultiAddress } }
  /**
   * Migrate pool from [`adapter::StakeStrategyType::Transfer`] to
   * [`adapter::StakeStrategyType::Delegate`].
   *
   * Fails unless [`crate::pallet::Config::StakeAdapter`] is of strategy type:
   * [`adapter::StakeStrategyType::Delegate`].
   *
   * This call can be dispatched permissionlessly, and refunds any fee if successful.
   *
   * If the pool has already migrated to delegation based staking, this call will fail.
   **/
  | { name: 'MigratePoolToDelegateStake'; params: { poolId: number } };

export type PalletNominationPoolsCallLike =
  /**
   * Stake funds with a pool. The amount to bond is delegated (or transferred based on
   * [`adapter::StakeStrategyType`]) from the member to the pool account and immediately
   * increases the pool's bond.
   *
   * The method of transferring the amount to the pool account is determined by
   * [`adapter::StakeStrategyType`]. If the pool is configured to use
   * [`adapter::StakeStrategyType::Delegate`], the funds remain in the account of
   * the `origin`, while the pool gains the right to use these funds for staking.
   *
   * # Note
   *
   * * An account can only be a member of a single pool.
   * * An account cannot join the same pool multiple times.
   * * This call will *not* dust the member account, so the member must have at least
   * `existential deposit + amount` in their account.
   * * Only a pool with [`PoolState::Open`] can be joined
   **/
  | { name: 'Join'; params: { amount: bigint; poolId: number } }
  /**
   * Bond `extra` more funds from `origin` into the pool to which they already belong.
   *
   * Additional funds can come from either the free balance of the account, of from the
   * accumulated rewards, see [`BondExtra`].
   *
   * Bonding extra funds implies an automatic payout of all pending rewards as well.
   * See `bond_extra_other` to bond pending rewards of `other` members.
   **/
  | { name: 'BondExtra'; params: { extra: PalletNominationPoolsBondExtra } }
  /**
   * A bonded member can use this to claim their payout based on the rewards that the pool
   * has accumulated since their last claimed payout (OR since joining if this is their first
   * time claiming rewards). The payout will be transferred to the member's account.
   *
   * The member will earn rewards pro rata based on the members stake vs the sum of the
   * members in the pools stake. Rewards do not "expire".
   *
   * See `claim_payout_other` to claim rewards on behalf of some `other` pool member.
   **/
  | { name: 'ClaimPayout' }
  /**
   * Unbond up to `unbonding_points` of the `member_account`'s funds from the pool. It
   * implicitly collects the rewards one last time, since not doing so would mean some
   * rewards would be forfeited.
   *
   * Under certain conditions, this call can be dispatched permissionlessly (i.e. by any
   * account).
   *
   * # Conditions for a permissionless dispatch.
   *
   * * The pool is blocked and the caller is either the root or bouncer. This is refereed to
   * as a kick.
   * * The pool is destroying and the member is not the depositor.
   * * The pool is destroying, the member is the depositor and no other members are in the
   * pool.
   *
   * ## Conditions for permissioned dispatch (i.e. the caller is also the
   * `member_account`):
   *
   * * The caller is not the depositor.
   * * The caller is the depositor, the pool is destroying and no other members are in the
   * pool.
   *
   * # Note
   *
   * If there are too many unlocking chunks to unbond with the pool account,
   * [`Call::pool_withdraw_unbonded`] can be called to try and minimize unlocking chunks.
   * The [`StakingInterface::unbond`] will implicitly call [`Call::pool_withdraw_unbonded`]
   * to try to free chunks if necessary (ie. if unbound was called and no unlocking chunks
   * are available). However, it may not be possible to release the current unlocking chunks,
   * in which case, the result of this call will likely be the `NoMoreChunks` error from the
   * staking system.
   **/
  | { name: 'Unbond'; params: { memberAccount: MultiAddressLike; unbondingPoints: bigint } }
  /**
   * Call `withdraw_unbonded` for the pools account. This call can be made by any account.
   *
   * This is useful if there are too many unlocking chunks to call `unbond`, and some
   * can be cleared by withdrawing. In the case there are too many unlocking chunks, the user
   * would probably see an error like `NoMoreChunks` emitted from the staking system when
   * they attempt to unbond.
   **/
  | { name: 'PoolWithdrawUnbonded'; params: { poolId: number; numSlashingSpans: number } }
  /**
   * Withdraw unbonded funds from `member_account`. If no bonded funds can be unbonded, an
   * error is returned.
   *
   * Under certain conditions, this call can be dispatched permissionlessly (i.e. by any
   * account).
   *
   * # Conditions for a permissionless dispatch
   *
   * * The pool is in destroy mode and the target is not the depositor.
   * * The target is the depositor and they are the only member in the sub pools.
   * * The pool is blocked and the caller is either the root or bouncer.
   *
   * # Conditions for permissioned dispatch
   *
   * * The caller is the target and they are not the depositor.
   *
   * # Note
   *
   * - If the target is the depositor, the pool will be destroyed.
   * - If the pool has any pending slash, we also try to slash the member before letting them
   * withdraw. This calculation adds some weight overhead and is only defensive. In reality,
   * pool slashes must have been already applied via permissionless [`Call::apply_slash`].
   **/
  | { name: 'WithdrawUnbonded'; params: { memberAccount: MultiAddressLike; numSlashingSpans: number } }
  /**
   * Create a new delegation pool.
   *
   * # Arguments
   *
   * * `amount` - The amount of funds to delegate to the pool. This also acts of a sort of
   * deposit since the pools creator cannot fully unbond funds until the pool is being
   * destroyed.
   * * `index` - A disambiguation index for creating the account. Likely only useful when
   * creating multiple pools in the same extrinsic.
   * * `root` - The account to set as [`PoolRoles::root`].
   * * `nominator` - The account to set as the [`PoolRoles::nominator`].
   * * `bouncer` - The account to set as the [`PoolRoles::bouncer`].
   *
   * # Note
   *
   * In addition to `amount`, the caller will transfer the existential deposit; so the caller
   * needs at have at least `amount + existential_deposit` transferable.
   **/
  | {
      name: 'Create';
      params: { amount: bigint; root: MultiAddressLike; nominator: MultiAddressLike; bouncer: MultiAddressLike };
    }
  /**
   * Create a new delegation pool with a previously used pool id
   *
   * # Arguments
   *
   * same as `create` with the inclusion of
   * * `pool_id` - `A valid PoolId.
   **/
  | {
      name: 'CreateWithPoolId';
      params: {
        amount: bigint;
        root: MultiAddressLike;
        nominator: MultiAddressLike;
        bouncer: MultiAddressLike;
        poolId: number;
      };
    }
  /**
   * Nominate on behalf of the pool.
   *
   * The dispatch origin of this call must be signed by the pool nominator or the pool
   * root role.
   *
   * This directly forwards the call to an implementation of `StakingInterface` (e.g.,
   * `pallet-staking`) through [`Config::StakeAdapter`], on behalf of the bonded pool.
   *
   * # Note
   *
   * In addition to a `root` or `nominator` role of `origin`, the pool's depositor needs to
   * have at least `depositor_min_bond` in the pool to start nominating.
   **/
  | { name: 'Nominate'; params: { poolId: number; validators: Array<AccountId32Like> } }
  /**
   * Set a new state for the pool.
   *
   * If a pool is already in the `Destroying` state, then under no condition can its state
   * change again.
   *
   * The dispatch origin of this call must be either:
   *
   * 1. signed by the bouncer, or the root role of the pool,
   * 2. if the pool conditions to be open are NOT met (as described by `ok_to_be_open`), and
   * then the state of the pool can be permissionlessly changed to `Destroying`.
   **/
  | { name: 'SetState'; params: { poolId: number; state: PalletNominationPoolsPoolState } }
  /**
   * Set a new metadata for the pool.
   *
   * The dispatch origin of this call must be signed by the bouncer, or the root role of the
   * pool.
   **/
  | { name: 'SetMetadata'; params: { poolId: number; metadata: BytesLike } }
  /**
   * Update configurations for the nomination pools. The origin for this call must be
   * [`Config::AdminOrigin`].
   *
   * # Arguments
   *
   * * `min_join_bond` - Set [`MinJoinBond`].
   * * `min_create_bond` - Set [`MinCreateBond`].
   * * `max_pools` - Set [`MaxPools`].
   * * `max_members` - Set [`MaxPoolMembers`].
   * * `max_members_per_pool` - Set [`MaxPoolMembersPerPool`].
   * * `global_max_commission` - Set [`GlobalMaxCommission`].
   **/
  | {
      name: 'SetConfigs';
      params: {
        minJoinBond: PalletNominationPoolsConfigOp;
        minCreateBond: PalletNominationPoolsConfigOp;
        maxPools: PalletNominationPoolsConfigOpU32;
        maxMembers: PalletNominationPoolsConfigOpU32;
        maxMembersPerPool: PalletNominationPoolsConfigOpU32;
        globalMaxCommission: PalletNominationPoolsConfigOpPerbill;
      };
    }
  /**
   * Update the roles of the pool.
   *
   * The root is the only entity that can change any of the roles, including itself,
   * excluding the depositor, who can never change.
   *
   * It emits an event, notifying UIs of the role change. This event is quite relevant to
   * most pool members and they should be informed of changes to pool roles.
   **/
  | {
      name: 'UpdateRoles';
      params: {
        poolId: number;
        newRoot: PalletNominationPoolsConfigOp004;
        newNominator: PalletNominationPoolsConfigOp004;
        newBouncer: PalletNominationPoolsConfigOp004;
      };
    }
  /**
   * Chill on behalf of the pool.
   *
   * The dispatch origin of this call can be signed by the pool nominator or the pool
   * root role, same as [`Pallet::nominate`].
   *
   * This directly forwards the call to an implementation of `StakingInterface` (e.g.,
   * `pallet-staking`) through [`Config::StakeAdapter`], on behalf of the bonded pool.
   *
   * Under certain conditions, this call can be dispatched permissionlessly (i.e. by any
   * account).
   *
   * # Conditions for a permissionless dispatch:
   * * When pool depositor has less than `MinNominatorBond` staked, otherwise pool members
   * are unable to unbond.
   *
   * # Conditions for permissioned dispatch:
   * * The caller is the pool's nominator or root.
   **/
  | { name: 'Chill'; params: { poolId: number } }
  /**
   * `origin` bonds funds from `extra` for some pool member `member` into their respective
   * pools.
   *
   * `origin` can bond extra funds from free balance or pending rewards when `origin ==
   * other`.
   *
   * In the case of `origin != other`, `origin` can only bond extra pending rewards of
   * `other` members assuming set_claim_permission for the given member is
   * `PermissionlessCompound` or `PermissionlessAll`.
   **/
  | { name: 'BondExtraOther'; params: { member: MultiAddressLike; extra: PalletNominationPoolsBondExtra } }
  /**
   * Allows a pool member to set a claim permission to allow or disallow permissionless
   * bonding and withdrawing.
   *
   * # Arguments
   *
   * * `origin` - Member of a pool.
   * * `permission` - The permission to be applied.
   **/
  | { name: 'SetClaimPermission'; params: { permission: PalletNominationPoolsClaimPermission } }
  /**
   * `origin` can claim payouts on some pool member `other`'s behalf.
   *
   * Pool member `other` must have a `PermissionlessWithdraw` or `PermissionlessAll` claim
   * permission for this call to be successful.
   **/
  | { name: 'ClaimPayoutOther'; params: { other: AccountId32Like } }
  /**
   * Set the commission of a pool.
   * Both a commission percentage and a commission payee must be provided in the `current`
   * tuple. Where a `current` of `None` is provided, any current commission will be removed.
   *
   * - If a `None` is supplied to `new_commission`, existing commission will be removed.
   **/
  | { name: 'SetCommission'; params: { poolId: number; newCommission?: [Perbill, AccountId32Like] | undefined } }
  /**
   * Set the maximum commission of a pool.
   *
   * - Initial max can be set to any `Perbill`, and only smaller values thereafter.
   * - Current commission will be lowered in the event it is higher than a new max
   * commission.
   **/
  | { name: 'SetCommissionMax'; params: { poolId: number; maxCommission: Perbill } }
  /**
   * Set the commission change rate for a pool.
   *
   * Initial change rate is not bounded, whereas subsequent updates can only be more
   * restrictive than the current.
   **/
  | {
      name: 'SetCommissionChangeRate';
      params: { poolId: number; changeRate: PalletNominationPoolsCommissionChangeRate };
    }
  /**
   * Claim pending commission.
   *
   * The `root` role of the pool is _always_ allowed to claim the pool's commission.
   *
   * If the pool has set `CommissionClaimPermission::Permissionless`, then any account can
   * trigger the process of claiming the pool's commission.
   *
   * If the pool has set its `CommissionClaimPermission` to `Account(acc)`, then only
   * accounts
   * * `acc`, and
   * * the pool's root account
   *
   * may call this extrinsic on behalf of the pool.
   *
   * Pending commissions are paid out and added to the total claimed commission.
   * The total pending commission is reset to zero.
   **/
  | { name: 'ClaimCommission'; params: { poolId: number } }
  /**
   * Top up the deficit or withdraw the excess ED from the pool.
   *
   * When a pool is created, the pool depositor transfers ED to the reward account of the
   * pool. ED is subject to change and over time, the deposit in the reward account may be
   * insufficient to cover the ED deficit of the pool or vice-versa where there is excess
   * deposit to the pool. This call allows anyone to adjust the ED deposit of the
   * pool by either topping up the deficit or claiming the excess.
   **/
  | { name: 'AdjustPoolDeposit'; params: { poolId: number } }
  /**
   * Set or remove a pool's commission claim permission.
   *
   * Determines who can claim the pool's pending commission. Only the `Root` role of the pool
   * is able to configure commission claim permissions.
   **/
  | {
      name: 'SetCommissionClaimPermission';
      params: { poolId: number; permission?: PalletNominationPoolsCommissionClaimPermission | undefined };
    }
  /**
   * Apply a pending slash on a member.
   *
   * Fails unless [`crate::pallet::Config::StakeAdapter`] is of strategy type:
   * [`adapter::StakeStrategyType::Delegate`].
   *
   * The pending slash amount of the member must be equal or more than `ExistentialDeposit`.
   * This call can be dispatched permissionlessly (i.e. by any account). If the execution
   * is successful, fee is refunded and caller may be rewarded with a part of the slash
   * based on the [`crate::pallet::Config::StakeAdapter`] configuration.
   **/
  | { name: 'ApplySlash'; params: { memberAccount: MultiAddressLike } }
  /**
   * Migrates delegated funds from the pool account to the `member_account`.
   *
   * Fails unless [`crate::pallet::Config::StakeAdapter`] is of strategy type:
   * [`adapter::StakeStrategyType::Delegate`].
   *
   * This is a permission-less call and refunds any fee if claim is successful.
   *
   * If the pool has migrated to delegation based staking, the staked tokens of pool members
   * can be moved and held in their own account. See [`adapter::DelegateStake`]
   **/
  | { name: 'MigrateDelegation'; params: { memberAccount: MultiAddressLike } }
  /**
   * Migrate pool from [`adapter::StakeStrategyType::Transfer`] to
   * [`adapter::StakeStrategyType::Delegate`].
   *
   * Fails unless [`crate::pallet::Config::StakeAdapter`] is of strategy type:
   * [`adapter::StakeStrategyType::Delegate`].
   *
   * This call can be dispatched permissionlessly, and refunds any fee if successful.
   *
   * If the pool has already migrated to delegation based staking, this call will fail.
   **/
  | { name: 'MigratePoolToDelegateStake'; params: { poolId: number } };

export type PalletNominationPoolsBondExtra = { type: 'FreeBalance'; value: bigint } | { type: 'Rewards' };

export type PalletNominationPoolsConfigOp = { type: 'Noop' } | { type: 'Set'; value: bigint } | { type: 'Remove' };

export type PalletNominationPoolsConfigOpU32 = { type: 'Noop' } | { type: 'Set'; value: number } | { type: 'Remove' };

export type PalletNominationPoolsConfigOpPerbill =
  | { type: 'Noop' }
  | { type: 'Set'; value: Perbill }
  | { type: 'Remove' };

export type PalletNominationPoolsConfigOp004 =
  | { type: 'Noop' }
  | { type: 'Set'; value: AccountId32 }
  | { type: 'Remove' };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletFastUnstakeCall =
  /**
   * Register oneself for fast-unstake.
   *
   * ## Dispatch Origin
   *
   * The dispatch origin of this call must be *signed* by whoever is permitted to call
   * unbond funds by the staking system. See [`Config::Staking`].
   *
   * ## Details
   *
   * The stash associated with the origin must have no ongoing unlocking chunks. If
   * successful, this will fully unbond and chill the stash. Then, it will enqueue the stash
   * to be checked in further blocks.
   *
   * If by the time this is called, the stash is actually eligible for fast-unstake, then
   * they are guaranteed to remain eligible, because the call will chill them as well.
   *
   * If the check works, the entire staking data is removed, i.e. the stash is fully
   * unstaked.
   *
   * If the check fails, the stash remains chilled and waiting for being unbonded as in with
   * the normal staking system, but they lose part of their unbonding chunks due to consuming
   * the chain's resources.
   *
   * ## Events
   *
   * Some events from the staking and currency system might be emitted.
   **/
  | { name: 'RegisterFastUnstake' }
  /**
   * Deregister oneself from the fast-unstake.
   *
   * ## Dispatch Origin
   *
   * The dispatch origin of this call must be *signed* by whoever is permitted to call
   * unbond funds by the staking system. See [`Config::Staking`].
   *
   * ## Details
   *
   * This is useful if one is registered, they are still waiting, and they change their mind.
   *
   * Note that the associated stash is still fully unbonded and chilled as a consequence of
   * calling [`Pallet::register_fast_unstake`]. Therefore, this should probably be followed
   * by a call to `rebond` in the staking system.
   *
   * ## Events
   *
   * Some events from the staking and currency system might be emitted.
   **/
  | { name: 'Deregister' }
  /**
   * Control the operation of this pallet.
   *
   * ## Dispatch Origin
   *
   * The dispatch origin of this call must be [`Config::ControlOrigin`].
   *
   * ## Details
   *
   * Can set the number of eras to check per block, and potentially other admin work.
   *
   * ## Events
   *
   * No events are emitted from this dispatch.
   **/
  | { name: 'Control'; params: { erasToCheck: number } };

export type PalletFastUnstakeCallLike =
  /**
   * Register oneself for fast-unstake.
   *
   * ## Dispatch Origin
   *
   * The dispatch origin of this call must be *signed* by whoever is permitted to call
   * unbond funds by the staking system. See [`Config::Staking`].
   *
   * ## Details
   *
   * The stash associated with the origin must have no ongoing unlocking chunks. If
   * successful, this will fully unbond and chill the stash. Then, it will enqueue the stash
   * to be checked in further blocks.
   *
   * If by the time this is called, the stash is actually eligible for fast-unstake, then
   * they are guaranteed to remain eligible, because the call will chill them as well.
   *
   * If the check works, the entire staking data is removed, i.e. the stash is fully
   * unstaked.
   *
   * If the check fails, the stash remains chilled and waiting for being unbonded as in with
   * the normal staking system, but they lose part of their unbonding chunks due to consuming
   * the chain's resources.
   *
   * ## Events
   *
   * Some events from the staking and currency system might be emitted.
   **/
  | { name: 'RegisterFastUnstake' }
  /**
   * Deregister oneself from the fast-unstake.
   *
   * ## Dispatch Origin
   *
   * The dispatch origin of this call must be *signed* by whoever is permitted to call
   * unbond funds by the staking system. See [`Config::Staking`].
   *
   * ## Details
   *
   * This is useful if one is registered, they are still waiting, and they change their mind.
   *
   * Note that the associated stash is still fully unbonded and chilled as a consequence of
   * calling [`Pallet::register_fast_unstake`]. Therefore, this should probably be followed
   * by a call to `rebond` in the staking system.
   *
   * ## Events
   *
   * Some events from the staking and currency system might be emitted.
   **/
  | { name: 'Deregister' }
  /**
   * Control the operation of this pallet.
   *
   * ## Dispatch Origin
   *
   * The dispatch origin of this call must be [`Config::ControlOrigin`].
   *
   * ## Details
   *
   * Can set the number of eras to check per block, and potentially other admin work.
   *
   * ## Events
   *
   * No events are emitted from this dispatch.
   **/
  | { name: 'Control'; params: { erasToCheck: number } };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletBagsListCall =
  /**
   * Declare that some `dislocated` account has, through rewards or penalties, sufficiently
   * changed its score that it should properly fall into a different bag than its current
   * one.
   *
   * Anyone can call this function about any potentially dislocated account.
   *
   * Will always update the stored score of `dislocated` to the correct score, based on
   * `ScoreProvider`.
   *
   * If `dislocated` does not exists, it returns an error.
   **/
  | { name: 'Rebag'; params: { dislocated: MultiAddress } }
  /**
   * Move the caller's Id directly in front of `lighter`.
   *
   * The dispatch origin for this call must be _Signed_ and can only be called by the Id of
   * the account going in front of `lighter`. Fee is payed by the origin under all
   * circumstances.
   *
   * Only works if:
   *
   * - both nodes are within the same bag,
   * - and `origin` has a greater `Score` than `lighter`.
   **/
  | { name: 'PutInFrontOf'; params: { lighter: MultiAddress } }
  /**
   * Same as [`Pallet::put_in_front_of`], but it can be called by anyone.
   *
   * Fee is paid by the origin under all circumstances.
   **/
  | { name: 'PutInFrontOfOther'; params: { heavier: MultiAddress; lighter: MultiAddress } };

export type PalletBagsListCallLike =
  /**
   * Declare that some `dislocated` account has, through rewards or penalties, sufficiently
   * changed its score that it should properly fall into a different bag than its current
   * one.
   *
   * Anyone can call this function about any potentially dislocated account.
   *
   * Will always update the stored score of `dislocated` to the correct score, based on
   * `ScoreProvider`.
   *
   * If `dislocated` does not exists, it returns an error.
   **/
  | { name: 'Rebag'; params: { dislocated: MultiAddressLike } }
  /**
   * Move the caller's Id directly in front of `lighter`.
   *
   * The dispatch origin for this call must be _Signed_ and can only be called by the Id of
   * the account going in front of `lighter`. Fee is payed by the origin under all
   * circumstances.
   *
   * Only works if:
   *
   * - both nodes are within the same bag,
   * - and `origin` has a greater `Score` than `lighter`.
   **/
  | { name: 'PutInFrontOf'; params: { lighter: MultiAddressLike } }
  /**
   * Same as [`Pallet::put_in_front_of`], but it can be called by anyone.
   *
   * Fee is paid by the origin under all circumstances.
   **/
  | { name: 'PutInFrontOfOther'; params: { heavier: MultiAddressLike; lighter: MultiAddressLike } };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletStakingAsyncRcClientCall =
  /**
   * Called to indicate the start of a new session on the relay chain.
   **/
  | { name: 'RelaySessionReport'; params: { report: PalletStakingAsyncRcClientSessionReport } }
  /**
   * Called to report one or more new offenses on the relay chain.
   **/
  | { name: 'RelayNewOffence'; params: { slashSession: number; offences: Array<PalletStakingAsyncRcClientOffence> } };

export type PalletStakingAsyncRcClientCallLike =
  /**
   * Called to indicate the start of a new session on the relay chain.
   **/
  | { name: 'RelaySessionReport'; params: { report: PalletStakingAsyncRcClientSessionReport } }
  /**
   * Called to report one or more new offenses on the relay chain.
   **/
  | { name: 'RelayNewOffence'; params: { slashSession: number; offences: Array<PalletStakingAsyncRcClientOffence> } };

export type PalletStakingAsyncRcClientSessionReport = {
  endIndex: number;
  validatorPoints: Array<[AccountId32, number]>;
  activationTimestamp?: [bigint, number] | undefined;
  leftover: boolean;
};

export type PalletStakingAsyncRcClientOffence = {
  offender: AccountId32;
  reporters: Array<AccountId32>;
  slashFraction: Perbill;
};

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletElectionProviderMultiBlockCall =
  /**
   * Manage this pallet.
   *
   * The origin of this call must be [`Config::AdminOrigin`].
   *
   * See [`AdminOperation`] for various operations that are possible.
   **/
  { name: 'Manage'; params: { op: PalletElectionProviderMultiBlockAdminOperation } };

export type PalletElectionProviderMultiBlockCallLike =
  /**
   * Manage this pallet.
   *
   * The origin of this call must be [`Config::AdminOrigin`].
   *
   * See [`AdminOperation`] for various operations that are possible.
   **/
  { name: 'Manage'; params: { op: PalletElectionProviderMultiBlockAdminOperation } };

export type PalletElectionProviderMultiBlockAdminOperation =
  | { type: 'ForceRotateRound' }
  | { type: 'ForceSetPhase'; value: PalletElectionProviderMultiBlockPhase }
  | { type: 'EmergencySetSolution'; value: [FrameElectionProviderSupportBoundedSupports, SpNposElectionsElectionScore] }
  | { type: 'EmergencyFallback' }
  | { type: 'SetMinUntrustedScore'; value: SpNposElectionsElectionScore }
  | { type: 'ForceCreateSnapshot'; value: number };

export type FrameElectionProviderSupportBoundedSupports = Array<
  [AccountId32, FrameElectionProviderSupportBoundedSupport]
>;

export type FrameElectionProviderSupportBoundedSupport = { total: bigint; voters: Array<[AccountId32, bigint]> };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletElectionProviderMultiBlockVerifierImplsPalletCall = null;

export type PalletElectionProviderMultiBlockVerifierImplsPalletCallLike = null;

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletElectionProviderMultiBlockUnsignedPalletCall =
  /**
   * Submit an unsigned solution.
   *
   * This works very much like an inherent, as only the validators are permitted to submit
   * anything. By default validators will compute this call in their `offchain_worker` hook
   * and try and submit it back.
   *
   * This is different from signed page submission mainly in that the solution page is
   * verified on the fly.
   *
   * The `paged_solution` may contain at most [`Config::MinerPages`] pages. They are
   * interpreted as msp -> lsp, as per [`crate::Pallet::msp_range_for`].
   *
   * For example, if `Pages = 4`, and `MinerPages = 2`, our full snapshot range would be [0,
   * 1, 2, 3], with 3 being msp. But, in this case, then the `paged_raw_solution.pages` is
   * expected to correspond to `[snapshot(2), snapshot(3)]`.
   **/
  { name: 'SubmitUnsigned'; params: { pagedSolution: PalletElectionProviderMultiBlockPagedRawSolution } };

export type PalletElectionProviderMultiBlockUnsignedPalletCallLike =
  /**
   * Submit an unsigned solution.
   *
   * This works very much like an inherent, as only the validators are permitted to submit
   * anything. By default validators will compute this call in their `offchain_worker` hook
   * and try and submit it back.
   *
   * This is different from signed page submission mainly in that the solution page is
   * verified on the fly.
   *
   * The `paged_solution` may contain at most [`Config::MinerPages`] pages. They are
   * interpreted as msp -> lsp, as per [`crate::Pallet::msp_range_for`].
   *
   * For example, if `Pages = 4`, and `MinerPages = 2`, our full snapshot range would be [0,
   * 1, 2, 3], with 3 being msp. But, in this case, then the `paged_raw_solution.pages` is
   * expected to correspond to `[snapshot(2), snapshot(3)]`.
   **/
  { name: 'SubmitUnsigned'; params: { pagedSolution: PalletElectionProviderMultiBlockPagedRawSolution } };

export type PalletElectionProviderMultiBlockPagedRawSolution = {
  solutionPages: Array<AssetHubWestendRuntimeStakingNposCompactSolution16>;
  score: SpNposElectionsElectionScore;
  round: number;
};

export type AssetHubWestendRuntimeStakingNposCompactSolution16 = {
  votes1: Array<[number, number]>;
  votes2: Array<[number, [number, PerU16], number]>;
  votes3: Array<[number, FixedArray<[number, PerU16], 2>, number]>;
  votes4: Array<[number, FixedArray<[number, PerU16], 3>, number]>;
  votes5: Array<[number, FixedArray<[number, PerU16], 4>, number]>;
  votes6: Array<[number, FixedArray<[number, PerU16], 5>, number]>;
  votes7: Array<[number, FixedArray<[number, PerU16], 6>, number]>;
  votes8: Array<[number, FixedArray<[number, PerU16], 7>, number]>;
  votes9: Array<[number, FixedArray<[number, PerU16], 8>, number]>;
  votes10: Array<[number, FixedArray<[number, PerU16], 9>, number]>;
  votes11: Array<[number, FixedArray<[number, PerU16], 10>, number]>;
  votes12: Array<[number, FixedArray<[number, PerU16], 11>, number]>;
  votes13: Array<[number, FixedArray<[number, PerU16], 12>, number]>;
  votes14: Array<[number, FixedArray<[number, PerU16], 13>, number]>;
  votes15: Array<[number, FixedArray<[number, PerU16], 14>, number]>;
  votes16: Array<[number, FixedArray<[number, PerU16], 15>, number]>;
};

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletElectionProviderMultiBlockSignedPalletCall =
  /**
   * Register oneself for an upcoming signed election.
   **/
  | { name: 'Register'; params: { claimedScore: SpNposElectionsElectionScore } }
  /**
   * Submit a single page of a solution.
   *
   * Must always come after [`Pallet::register`].
   *
   * `maybe_solution` can be set to `None` to erase the page.
   *
   * Collects deposits from the signed origin based on [`Config::DepositBase`] and
   * [`Config::DepositPerPage`].
   **/
  | {
      name: 'SubmitPage';
      params: { page: number; maybeSolution?: AssetHubWestendRuntimeStakingNposCompactSolution16 | undefined };
    }
  /**
   * Retract a submission.
   *
   * A portion of the deposit may be returned, based on the [`Config::BailoutGraceRatio`].
   *
   * This will fully remove the solution from storage.
   **/
  | { name: 'Bail' }
  /**
   * Clear the data of a submitter form an old round.
   *
   * The dispatch origin of this call must be signed, and the original submitter.
   *
   * This can only be called for submissions that end up being discarded, as in they are not
   * processed and they end up lingering in the queue.
   **/
  | { name: 'ClearOldRoundData'; params: { round: number; witnessPages: number } };

export type PalletElectionProviderMultiBlockSignedPalletCallLike =
  /**
   * Register oneself for an upcoming signed election.
   **/
  | { name: 'Register'; params: { claimedScore: SpNposElectionsElectionScore } }
  /**
   * Submit a single page of a solution.
   *
   * Must always come after [`Pallet::register`].
   *
   * `maybe_solution` can be set to `None` to erase the page.
   *
   * Collects deposits from the signed origin based on [`Config::DepositBase`] and
   * [`Config::DepositPerPage`].
   **/
  | {
      name: 'SubmitPage';
      params: { page: number; maybeSolution?: AssetHubWestendRuntimeStakingNposCompactSolution16 | undefined };
    }
  /**
   * Retract a submission.
   *
   * A portion of the deposit may be returned, based on the [`Config::BailoutGraceRatio`].
   *
   * This will fully remove the solution from storage.
   **/
  | { name: 'Bail' }
  /**
   * Clear the data of a submitter form an old round.
   *
   * The dispatch origin of this call must be signed, and the original submitter.
   *
   * This can only be called for submissions that end up being discarded, as in they are not
   * processed and they end up lingering in the queue.
   **/
  | { name: 'ClearOldRoundData'; params: { round: number; witnessPages: number } };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletConvictionVotingCall =
  /**
   * Vote in a poll. If `vote.is_aye()`, the vote is to enact the proposal;
   * otherwise it is a vote to keep the status quo.
   *
   * The dispatch origin of this call must be _Signed_.
   *
   * - `poll_index`: The index of the poll to vote for.
   * - `vote`: The vote configuration.
   *
   * Weight: `O(R)` where R is the number of polls the voter has voted on.
   **/
  | { name: 'Vote'; params: { pollIndex: number; vote: PalletConvictionVotingVoteAccountVote } }
  /**
   * Delegate the voting power (with some given conviction) of the sending account for a
   * particular class of polls.
   *
   * The balance delegated is locked for as long as it's delegated, and thereafter for the
   * time appropriate for the conviction's lock period.
   *
   * The dispatch origin of this call must be _Signed_, and the signing account must either:
   * - be delegating already; or
   * - have no voting activity (if there is, then it will need to be removed through
   * `remove_vote`).
   *
   * - `to`: The account whose voting the `target` account's voting power will follow.
   * - `class`: The class of polls to delegate. To delegate multiple classes, multiple calls
   * to this function are required.
   * - `conviction`: The conviction that will be attached to the delegated votes. When the
   * account is undelegated, the funds will be locked for the corresponding period.
   * - `balance`: The amount of the account's balance to be used in delegating. This must not
   * be more than the account's current balance.
   *
   * Emits `Delegated`.
   *
   * Weight: `O(R)` where R is the number of polls the voter delegating to has
   * voted on. Weight is initially charged as if maximum votes, but is refunded later.
   **/
  | {
      name: 'Delegate';
      params: { class: number; to: MultiAddress; conviction: PalletConvictionVotingConviction; balance: bigint };
    }
  /**
   * Undelegate the voting power of the sending account for a particular class of polls.
   *
   * Tokens may be unlocked following once an amount of time consistent with the lock period
   * of the conviction with which the delegation was issued has passed.
   *
   * The dispatch origin of this call must be _Signed_ and the signing account must be
   * currently delegating.
   *
   * - `class`: The class of polls to remove the delegation from.
   *
   * Emits `Undelegated`.
   *
   * Weight: `O(R)` where R is the number of polls the voter delegating to has
   * voted on. Weight is initially charged as if maximum votes, but is refunded later.
   **/
  | { name: 'Undelegate'; params: { class: number } }
  /**
   * Remove the lock caused by prior voting/delegating which has expired within a particular
   * class.
   *
   * The dispatch origin of this call must be _Signed_.
   *
   * - `class`: The class of polls to unlock.
   * - `target`: The account to remove the lock on.
   *
   * Weight: `O(R)` with R number of vote of target.
   **/
  | { name: 'Unlock'; params: { class: number; target: MultiAddress } }
  /**
   * Remove a vote for a poll.
   *
   * If:
   * - the poll was cancelled, or
   * - the poll is ongoing, or
   * - the poll has ended such that
   * - the vote of the account was in opposition to the result; or
   * - there was no conviction to the account's vote; or
   * - the account made a split vote
   * ...then the vote is removed cleanly and a following call to `unlock` may result in more
   * funds being available.
   *
   * If, however, the poll has ended and:
   * - it finished corresponding to the vote of the account, and
   * - the account made a standard vote with conviction, and
   * - the lock period of the conviction is not over
   * ...then the lock will be aggregated into the overall account's lock, which may involve
   * *overlocking* (where the two locks are combined into a single lock that is the maximum
   * of both the amount locked and the time is it locked for).
   *
   * The dispatch origin of this call must be _Signed_, and the signer must have a vote
   * registered for poll `index`.
   *
   * - `index`: The index of poll of the vote to be removed.
   * - `class`: Optional parameter, if given it indicates the class of the poll. For polls
   * which have finished or are cancelled, this must be `Some`.
   *
   * Weight: `O(R + log R)` where R is the number of polls that `target` has voted on.
   * Weight is calculated for the maximum number of vote.
   **/
  | { name: 'RemoveVote'; params: { class?: number | undefined; index: number } }
  /**
   * Remove a vote for a poll.
   *
   * If the `target` is equal to the signer, then this function is exactly equivalent to
   * `remove_vote`. If not equal to the signer, then the vote must have expired,
   * either because the poll was cancelled, because the voter lost the poll or
   * because the conviction period is over.
   *
   * The dispatch origin of this call must be _Signed_.
   *
   * - `target`: The account of the vote to be removed; this account must have voted for poll
   * `index`.
   * - `index`: The index of poll of the vote to be removed.
   * - `class`: The class of the poll.
   *
   * Weight: `O(R + log R)` where R is the number of polls that `target` has voted on.
   * Weight is calculated for the maximum number of vote.
   **/
  | { name: 'RemoveOtherVote'; params: { target: MultiAddress; class: number; index: number } };

export type PalletConvictionVotingCallLike =
  /**
   * Vote in a poll. If `vote.is_aye()`, the vote is to enact the proposal;
   * otherwise it is a vote to keep the status quo.
   *
   * The dispatch origin of this call must be _Signed_.
   *
   * - `poll_index`: The index of the poll to vote for.
   * - `vote`: The vote configuration.
   *
   * Weight: `O(R)` where R is the number of polls the voter has voted on.
   **/
  | { name: 'Vote'; params: { pollIndex: number; vote: PalletConvictionVotingVoteAccountVote } }
  /**
   * Delegate the voting power (with some given conviction) of the sending account for a
   * particular class of polls.
   *
   * The balance delegated is locked for as long as it's delegated, and thereafter for the
   * time appropriate for the conviction's lock period.
   *
   * The dispatch origin of this call must be _Signed_, and the signing account must either:
   * - be delegating already; or
   * - have no voting activity (if there is, then it will need to be removed through
   * `remove_vote`).
   *
   * - `to`: The account whose voting the `target` account's voting power will follow.
   * - `class`: The class of polls to delegate. To delegate multiple classes, multiple calls
   * to this function are required.
   * - `conviction`: The conviction that will be attached to the delegated votes. When the
   * account is undelegated, the funds will be locked for the corresponding period.
   * - `balance`: The amount of the account's balance to be used in delegating. This must not
   * be more than the account's current balance.
   *
   * Emits `Delegated`.
   *
   * Weight: `O(R)` where R is the number of polls the voter delegating to has
   * voted on. Weight is initially charged as if maximum votes, but is refunded later.
   **/
  | {
      name: 'Delegate';
      params: { class: number; to: MultiAddressLike; conviction: PalletConvictionVotingConviction; balance: bigint };
    }
  /**
   * Undelegate the voting power of the sending account for a particular class of polls.
   *
   * Tokens may be unlocked following once an amount of time consistent with the lock period
   * of the conviction with which the delegation was issued has passed.
   *
   * The dispatch origin of this call must be _Signed_ and the signing account must be
   * currently delegating.
   *
   * - `class`: The class of polls to remove the delegation from.
   *
   * Emits `Undelegated`.
   *
   * Weight: `O(R)` where R is the number of polls the voter delegating to has
   * voted on. Weight is initially charged as if maximum votes, but is refunded later.
   **/
  | { name: 'Undelegate'; params: { class: number } }
  /**
   * Remove the lock caused by prior voting/delegating which has expired within a particular
   * class.
   *
   * The dispatch origin of this call must be _Signed_.
   *
   * - `class`: The class of polls to unlock.
   * - `target`: The account to remove the lock on.
   *
   * Weight: `O(R)` with R number of vote of target.
   **/
  | { name: 'Unlock'; params: { class: number; target: MultiAddressLike } }
  /**
   * Remove a vote for a poll.
   *
   * If:
   * - the poll was cancelled, or
   * - the poll is ongoing, or
   * - the poll has ended such that
   * - the vote of the account was in opposition to the result; or
   * - there was no conviction to the account's vote; or
   * - the account made a split vote
   * ...then the vote is removed cleanly and a following call to `unlock` may result in more
   * funds being available.
   *
   * If, however, the poll has ended and:
   * - it finished corresponding to the vote of the account, and
   * - the account made a standard vote with conviction, and
   * - the lock period of the conviction is not over
   * ...then the lock will be aggregated into the overall account's lock, which may involve
   * *overlocking* (where the two locks are combined into a single lock that is the maximum
   * of both the amount locked and the time is it locked for).
   *
   * The dispatch origin of this call must be _Signed_, and the signer must have a vote
   * registered for poll `index`.
   *
   * - `index`: The index of poll of the vote to be removed.
   * - `class`: Optional parameter, if given it indicates the class of the poll. For polls
   * which have finished or are cancelled, this must be `Some`.
   *
   * Weight: `O(R + log R)` where R is the number of polls that `target` has voted on.
   * Weight is calculated for the maximum number of vote.
   **/
  | { name: 'RemoveVote'; params: { class?: number | undefined; index: number } }
  /**
   * Remove a vote for a poll.
   *
   * If the `target` is equal to the signer, then this function is exactly equivalent to
   * `remove_vote`. If not equal to the signer, then the vote must have expired,
   * either because the poll was cancelled, because the voter lost the poll or
   * because the conviction period is over.
   *
   * The dispatch origin of this call must be _Signed_.
   *
   * - `target`: The account of the vote to be removed; this account must have voted for poll
   * `index`.
   * - `index`: The index of poll of the vote to be removed.
   * - `class`: The class of the poll.
   *
   * Weight: `O(R + log R)` where R is the number of polls that `target` has voted on.
   * Weight is calculated for the maximum number of vote.
   **/
  | { name: 'RemoveOtherVote'; params: { target: MultiAddressLike; class: number; index: number } };

export type PalletConvictionVotingConviction =
  | 'None'
  | 'Locked1x'
  | 'Locked2x'
  | 'Locked3x'
  | 'Locked4x'
  | 'Locked5x'
  | 'Locked6x';

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletReferendaCall =
  /**
   * Propose a referendum on a privileged action.
   *
   * - `origin`: must be `SubmitOrigin` and the account must have `SubmissionDeposit` funds
   * available.
   * - `proposal_origin`: The origin from which the proposal should be executed.
   * - `proposal`: The proposal.
   * - `enactment_moment`: The moment that the proposal should be enacted.
   *
   * Emits `Submitted`.
   **/
  | {
      name: 'Submit';
      params: {
        proposalOrigin: AssetHubWestendRuntimeOriginCaller;
        proposal: FrameSupportPreimagesBounded;
        enactmentMoment: FrameSupportScheduleDispatchTime;
      };
    }
  /**
   * Post the Decision Deposit for a referendum.
   *
   * - `origin`: must be `Signed` and the account must have funds available for the
   * referendum's track's Decision Deposit.
   * - `index`: The index of the submitted referendum whose Decision Deposit is yet to be
   * posted.
   *
   * Emits `DecisionDepositPlaced`.
   **/
  | { name: 'PlaceDecisionDeposit'; params: { index: number } }
  /**
   * Refund the Decision Deposit for a closed referendum back to the depositor.
   *
   * - `origin`: must be `Signed` or `Root`.
   * - `index`: The index of a closed referendum whose Decision Deposit has not yet been
   * refunded.
   *
   * Emits `DecisionDepositRefunded`.
   **/
  | { name: 'RefundDecisionDeposit'; params: { index: number } }
  /**
   * Cancel an ongoing referendum.
   *
   * - `origin`: must be the `CancelOrigin`.
   * - `index`: The index of the referendum to be cancelled.
   *
   * Emits `Cancelled`.
   **/
  | { name: 'Cancel'; params: { index: number } }
  /**
   * Cancel an ongoing referendum and slash the deposits.
   *
   * - `origin`: must be the `KillOrigin`.
   * - `index`: The index of the referendum to be cancelled.
   *
   * Emits `Killed` and `DepositSlashed`.
   **/
  | { name: 'Kill'; params: { index: number } }
  /**
   * Advance a referendum onto its next logical state. Only used internally.
   *
   * - `origin`: must be `Root`.
   * - `index`: the referendum to be advanced.
   **/
  | { name: 'NudgeReferendum'; params: { index: number } }
  /**
   * Advance a track onto its next logical state. Only used internally.
   *
   * - `origin`: must be `Root`.
   * - `track`: the track to be advanced.
   *
   * Action item for when there is now one fewer referendum in the deciding phase and the
   * `DecidingCount` is not yet updated. This means that we should either:
   * - begin deciding another referendum (and leave `DecidingCount` alone); or
   * - decrement `DecidingCount`.
   **/
  | { name: 'OneFewerDeciding'; params: { track: number } }
  /**
   * Refund the Submission Deposit for a closed referendum back to the depositor.
   *
   * - `origin`: must be `Signed` or `Root`.
   * - `index`: The index of a closed referendum whose Submission Deposit has not yet been
   * refunded.
   *
   * Emits `SubmissionDepositRefunded`.
   **/
  | { name: 'RefundSubmissionDeposit'; params: { index: number } }
  /**
   * Set or clear metadata of a referendum.
   *
   * Parameters:
   * - `origin`: Must be `Signed` by a creator of a referendum or by anyone to clear a
   * metadata of a finished referendum.
   * - `index`: The index of a referendum to set or clear metadata for.
   * - `maybe_hash`: The hash of an on-chain stored preimage. `None` to clear a metadata.
   **/
  | { name: 'SetMetadata'; params: { index: number; maybeHash?: H256 | undefined } };

export type PalletReferendaCallLike =
  /**
   * Propose a referendum on a privileged action.
   *
   * - `origin`: must be `SubmitOrigin` and the account must have `SubmissionDeposit` funds
   * available.
   * - `proposal_origin`: The origin from which the proposal should be executed.
   * - `proposal`: The proposal.
   * - `enactment_moment`: The moment that the proposal should be enacted.
   *
   * Emits `Submitted`.
   **/
  | {
      name: 'Submit';
      params: {
        proposalOrigin: AssetHubWestendRuntimeOriginCaller;
        proposal: FrameSupportPreimagesBounded;
        enactmentMoment: FrameSupportScheduleDispatchTime;
      };
    }
  /**
   * Post the Decision Deposit for a referendum.
   *
   * - `origin`: must be `Signed` and the account must have funds available for the
   * referendum's track's Decision Deposit.
   * - `index`: The index of the submitted referendum whose Decision Deposit is yet to be
   * posted.
   *
   * Emits `DecisionDepositPlaced`.
   **/
  | { name: 'PlaceDecisionDeposit'; params: { index: number } }
  /**
   * Refund the Decision Deposit for a closed referendum back to the depositor.
   *
   * - `origin`: must be `Signed` or `Root`.
   * - `index`: The index of a closed referendum whose Decision Deposit has not yet been
   * refunded.
   *
   * Emits `DecisionDepositRefunded`.
   **/
  | { name: 'RefundDecisionDeposit'; params: { index: number } }
  /**
   * Cancel an ongoing referendum.
   *
   * - `origin`: must be the `CancelOrigin`.
   * - `index`: The index of the referendum to be cancelled.
   *
   * Emits `Cancelled`.
   **/
  | { name: 'Cancel'; params: { index: number } }
  /**
   * Cancel an ongoing referendum and slash the deposits.
   *
   * - `origin`: must be the `KillOrigin`.
   * - `index`: The index of the referendum to be cancelled.
   *
   * Emits `Killed` and `DepositSlashed`.
   **/
  | { name: 'Kill'; params: { index: number } }
  /**
   * Advance a referendum onto its next logical state. Only used internally.
   *
   * - `origin`: must be `Root`.
   * - `index`: the referendum to be advanced.
   **/
  | { name: 'NudgeReferendum'; params: { index: number } }
  /**
   * Advance a track onto its next logical state. Only used internally.
   *
   * - `origin`: must be `Root`.
   * - `track`: the track to be advanced.
   *
   * Action item for when there is now one fewer referendum in the deciding phase and the
   * `DecidingCount` is not yet updated. This means that we should either:
   * - begin deciding another referendum (and leave `DecidingCount` alone); or
   * - decrement `DecidingCount`.
   **/
  | { name: 'OneFewerDeciding'; params: { track: number } }
  /**
   * Refund the Submission Deposit for a closed referendum back to the depositor.
   *
   * - `origin`: must be `Signed` or `Root`.
   * - `index`: The index of a closed referendum whose Submission Deposit has not yet been
   * refunded.
   *
   * Emits `SubmissionDepositRefunded`.
   **/
  | { name: 'RefundSubmissionDeposit'; params: { index: number } }
  /**
   * Set or clear metadata of a referendum.
   *
   * Parameters:
   * - `origin`: Must be `Signed` by a creator of a referendum or by anyone to clear a
   * metadata of a finished referendum.
   * - `index`: The index of a referendum to set or clear metadata for.
   * - `maybe_hash`: The hash of an on-chain stored preimage. `None` to clear a metadata.
   **/
  | { name: 'SetMetadata'; params: { index: number; maybeHash?: H256 | undefined } };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletWhitelistCall =
  | { name: 'WhitelistCall'; params: { callHash: H256 } }
  | { name: 'RemoveWhitelistedCall'; params: { callHash: H256 } }
  | {
      name: 'DispatchWhitelistedCall';
      params: { callHash: H256; callEncodedLen: number; callWeightWitness: SpWeightsWeightV2Weight };
    }
  | { name: 'DispatchWhitelistedCallWithPreimage'; params: { call: AssetHubWestendRuntimeRuntimeCall } };

export type PalletWhitelistCallLike =
  | { name: 'WhitelistCall'; params: { callHash: H256 } }
  | { name: 'RemoveWhitelistedCall'; params: { callHash: H256 } }
  | {
      name: 'DispatchWhitelistedCall';
      params: { callHash: H256; callEncodedLen: number; callWeightWitness: SpWeightsWeightV2Weight };
    }
  | { name: 'DispatchWhitelistedCallWithPreimage'; params: { call: AssetHubWestendRuntimeRuntimeCallLike } };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletTreasuryCall =
  /**
   * Propose and approve a spend of treasury funds.
   *
   * ## Dispatch Origin
   *
   * Must be [`Config::SpendOrigin`] with the `Success` value being at least `amount`.
   *
   * ### Details
   * NOTE: For record-keeping purposes, the proposer is deemed to be equivalent to the
   * beneficiary.
   *
   * ### Parameters
   * - `amount`: The amount to be transferred from the treasury to the `beneficiary`.
   * - `beneficiary`: The destination account for the transfer.
   *
   * ## Events
   *
   * Emits [`Event::SpendApproved`] if successful.
   **/
  | { name: 'SpendLocal'; params: { amount: bigint; beneficiary: MultiAddress } }
  /**
   * Force a previously approved proposal to be removed from the approval queue.
   *
   * ## Dispatch Origin
   *
   * Must be [`Config::RejectOrigin`].
   *
   * ## Details
   *
   * The original deposit will no longer be returned.
   *
   * ### Parameters
   * - `proposal_id`: The index of a proposal
   *
   * ### Complexity
   * - O(A) where `A` is the number of approvals
   *
   * ### Errors
   * - [`Error::ProposalNotApproved`]: The `proposal_id` supplied was not found in the
   * approval queue, i.e., the proposal has not been approved. This could also mean the
   * proposal does not exist altogether, thus there is no way it would have been approved
   * in the first place.
   **/
  | { name: 'RemoveApproval'; params: { proposalId: number } }
  /**
   * Propose and approve a spend of treasury funds.
   *
   * ## Dispatch Origin
   *
   * Must be [`Config::SpendOrigin`] with the `Success` value being at least
   * `amount` of `asset_kind` in the native asset. The amount of `asset_kind` is converted
   * for assertion using the [`Config::BalanceConverter`].
   *
   * ## Details
   *
   * Create an approved spend for transferring a specific `amount` of `asset_kind` to a
   * designated beneficiary. The spend must be claimed using the `payout` dispatchable within
   * the [`Config::PayoutPeriod`].
   *
   * ### Parameters
   * - `asset_kind`: An indicator of the specific asset class to be spent.
   * - `amount`: The amount to be transferred from the treasury to the `beneficiary`.
   * - `beneficiary`: The beneficiary of the spend.
   * - `valid_from`: The block number from which the spend can be claimed. It can refer to
   * the past if the resulting spend has not yet expired according to the
   * [`Config::PayoutPeriod`]. If `None`, the spend can be claimed immediately after
   * approval.
   *
   * ## Events
   *
   * Emits [`Event::AssetSpendApproved`] if successful.
   **/
  | {
      name: 'Spend';
      params: {
        assetKind: PolkadotRuntimeCommonImplsVersionedLocatableAsset;
        amount: bigint;
        beneficiary: XcmVersionedLocation;
        validFrom?: number | undefined;
      };
    }
  /**
   * Claim a spend.
   *
   * ## Dispatch Origin
   *
   * Must be signed
   *
   * ## Details
   *
   * Spends must be claimed within some temporal bounds. A spend may be claimed within one
   * [`Config::PayoutPeriod`] from the `valid_from` block.
   * In case of a payout failure, the spend status must be updated with the `check_status`
   * dispatchable before retrying with the current function.
   *
   * ### Parameters
   * - `index`: The spend index.
   *
   * ## Events
   *
   * Emits [`Event::Paid`] if successful.
   **/
  | { name: 'Payout'; params: { index: number } }
  /**
   * Check the status of the spend and remove it from the storage if processed.
   *
   * ## Dispatch Origin
   *
   * Must be signed.
   *
   * ## Details
   *
   * The status check is a prerequisite for retrying a failed payout.
   * If a spend has either succeeded or expired, it is removed from the storage by this
   * function. In such instances, transaction fees are refunded.
   *
   * ### Parameters
   * - `index`: The spend index.
   *
   * ## Events
   *
   * Emits [`Event::PaymentFailed`] if the spend payout has failed.
   * Emits [`Event::SpendProcessed`] if the spend payout has succeed.
   **/
  | { name: 'CheckStatus'; params: { index: number } }
  /**
   * Void previously approved spend.
   *
   * ## Dispatch Origin
   *
   * Must be [`Config::RejectOrigin`].
   *
   * ## Details
   *
   * A spend void is only possible if the payout has not been attempted yet.
   *
   * ### Parameters
   * - `index`: The spend index.
   *
   * ## Events
   *
   * Emits [`Event::AssetSpendVoided`] if successful.
   **/
  | { name: 'VoidSpend'; params: { index: number } };

export type PalletTreasuryCallLike =
  /**
   * Propose and approve a spend of treasury funds.
   *
   * ## Dispatch Origin
   *
   * Must be [`Config::SpendOrigin`] with the `Success` value being at least `amount`.
   *
   * ### Details
   * NOTE: For record-keeping purposes, the proposer is deemed to be equivalent to the
   * beneficiary.
   *
   * ### Parameters
   * - `amount`: The amount to be transferred from the treasury to the `beneficiary`.
   * - `beneficiary`: The destination account for the transfer.
   *
   * ## Events
   *
   * Emits [`Event::SpendApproved`] if successful.
   **/
  | { name: 'SpendLocal'; params: { amount: bigint; beneficiary: MultiAddressLike } }
  /**
   * Force a previously approved proposal to be removed from the approval queue.
   *
   * ## Dispatch Origin
   *
   * Must be [`Config::RejectOrigin`].
   *
   * ## Details
   *
   * The original deposit will no longer be returned.
   *
   * ### Parameters
   * - `proposal_id`: The index of a proposal
   *
   * ### Complexity
   * - O(A) where `A` is the number of approvals
   *
   * ### Errors
   * - [`Error::ProposalNotApproved`]: The `proposal_id` supplied was not found in the
   * approval queue, i.e., the proposal has not been approved. This could also mean the
   * proposal does not exist altogether, thus there is no way it would have been approved
   * in the first place.
   **/
  | { name: 'RemoveApproval'; params: { proposalId: number } }
  /**
   * Propose and approve a spend of treasury funds.
   *
   * ## Dispatch Origin
   *
   * Must be [`Config::SpendOrigin`] with the `Success` value being at least
   * `amount` of `asset_kind` in the native asset. The amount of `asset_kind` is converted
   * for assertion using the [`Config::BalanceConverter`].
   *
   * ## Details
   *
   * Create an approved spend for transferring a specific `amount` of `asset_kind` to a
   * designated beneficiary. The spend must be claimed using the `payout` dispatchable within
   * the [`Config::PayoutPeriod`].
   *
   * ### Parameters
   * - `asset_kind`: An indicator of the specific asset class to be spent.
   * - `amount`: The amount to be transferred from the treasury to the `beneficiary`.
   * - `beneficiary`: The beneficiary of the spend.
   * - `valid_from`: The block number from which the spend can be claimed. It can refer to
   * the past if the resulting spend has not yet expired according to the
   * [`Config::PayoutPeriod`]. If `None`, the spend can be claimed immediately after
   * approval.
   *
   * ## Events
   *
   * Emits [`Event::AssetSpendApproved`] if successful.
   **/
  | {
      name: 'Spend';
      params: {
        assetKind: PolkadotRuntimeCommonImplsVersionedLocatableAsset;
        amount: bigint;
        beneficiary: XcmVersionedLocation;
        validFrom?: number | undefined;
      };
    }
  /**
   * Claim a spend.
   *
   * ## Dispatch Origin
   *
   * Must be signed
   *
   * ## Details
   *
   * Spends must be claimed within some temporal bounds. A spend may be claimed within one
   * [`Config::PayoutPeriod`] from the `valid_from` block.
   * In case of a payout failure, the spend status must be updated with the `check_status`
   * dispatchable before retrying with the current function.
   *
   * ### Parameters
   * - `index`: The spend index.
   *
   * ## Events
   *
   * Emits [`Event::Paid`] if successful.
   **/
  | { name: 'Payout'; params: { index: number } }
  /**
   * Check the status of the spend and remove it from the storage if processed.
   *
   * ## Dispatch Origin
   *
   * Must be signed.
   *
   * ## Details
   *
   * The status check is a prerequisite for retrying a failed payout.
   * If a spend has either succeeded or expired, it is removed from the storage by this
   * function. In such instances, transaction fees are refunded.
   *
   * ### Parameters
   * - `index`: The spend index.
   *
   * ## Events
   *
   * Emits [`Event::PaymentFailed`] if the spend payout has failed.
   * Emits [`Event::SpendProcessed`] if the spend payout has succeed.
   **/
  | { name: 'CheckStatus'; params: { index: number } }
  /**
   * Void previously approved spend.
   *
   * ## Dispatch Origin
   *
   * Must be [`Config::RejectOrigin`].
   *
   * ## Details
   *
   * A spend void is only possible if the payout has not been attempted yet.
   *
   * ### Parameters
   * - `index`: The spend index.
   *
   * ## Events
   *
   * Emits [`Event::AssetSpendVoided`] if successful.
   **/
  | { name: 'VoidSpend'; params: { index: number } };

export type PolkadotRuntimeCommonImplsVersionedLocatableAsset =
  | { type: 'V3'; value: { location: StagingXcmV3MultilocationMultiLocation; assetId: XcmV3MultiassetAssetId } }
  | { type: 'V4'; value: { location: StagingXcmV4Location; assetId: StagingXcmV4AssetAssetId } }
  | { type: 'V5'; value: { location: StagingXcmV5Location; assetId: StagingXcmV5AssetAssetId } };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletAssetRateCall =
  /**
   * Initialize a conversion rate to native balance for the given asset.
   *
   * ## Complexity
   * - O(1)
   **/
  | { name: 'Create'; params: { assetKind: PolkadotRuntimeCommonImplsVersionedLocatableAsset; rate: FixedU128 } }
  /**
   * Update the conversion rate to native balance for the given asset.
   *
   * ## Complexity
   * - O(1)
   **/
  | { name: 'Update'; params: { assetKind: PolkadotRuntimeCommonImplsVersionedLocatableAsset; rate: FixedU128 } }
  /**
   * Remove an existing conversion rate to native balance for the given asset.
   *
   * ## Complexity
   * - O(1)
   **/
  | { name: 'Remove'; params: { assetKind: PolkadotRuntimeCommonImplsVersionedLocatableAsset } };

export type PalletAssetRateCallLike =
  /**
   * Initialize a conversion rate to native balance for the given asset.
   *
   * ## Complexity
   * - O(1)
   **/
  | { name: 'Create'; params: { assetKind: PolkadotRuntimeCommonImplsVersionedLocatableAsset; rate: FixedU128 } }
  /**
   * Update the conversion rate to native balance for the given asset.
   *
   * ## Complexity
   * - O(1)
   **/
  | { name: 'Update'; params: { assetKind: PolkadotRuntimeCommonImplsVersionedLocatableAsset; rate: FixedU128 } }
  /**
   * Remove an existing conversion rate to native balance for the given asset.
   *
   * ## Complexity
   * - O(1)
   **/
  | { name: 'Remove'; params: { assetKind: PolkadotRuntimeCommonImplsVersionedLocatableAsset } };

/**
 * Pallet's callable functions.
 **/
export type PalletAssetConversionOpsCall =
  /**
   * Migrates an existing pool to a new account ID derivation method for a given asset pair.
   * If the migration is successful, transaction fees are refunded to the caller.
   *
   * Must be signed.
   **/
  { name: 'MigrateToNewAccount'; params: { asset1: StagingXcmV5Location; asset2: StagingXcmV5Location } };

export type PalletAssetConversionOpsCallLike =
  /**
   * Migrates an existing pool to a new account ID derivation method for a given asset pair.
   * If the migration is successful, transaction fees are refunded to the caller.
   *
   * Must be signed.
   **/
  { name: 'MigrateToNewAccount'; params: { asset1: StagingXcmV5Location; asset2: StagingXcmV5Location } };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletAhOpsCall =
  /**
   * Unreserve the deposit that was taken for creating a crowdloan.
   *
   * This can be called by any signed origin. It unreserves the lease deposit on the account
   * that won the lease auction. It can be unreserved once all leases expired. Note that it
   * will be called automatically from `withdraw_crowdloan_contribution` for the matching
   * crowdloan account.
   *
   * Solo bidder accounts that won lease auctions can use this to unreserve their amount.
   **/
  | {
      name: 'UnreserveLeaseDeposit';
      params: { block: number; depositor?: AccountId32 | undefined; paraId: PolkadotParachainPrimitivesPrimitivesId };
    }
  /**
   * Withdraw the contribution of a finished crowdloan.
   *
   * A crowdloan contribution can be withdrawn if either:
   * - The crowdloan failed to in an auction and timed out
   * - Won an auction and all leases expired
   *
   * Can be called by any signed origin.
   **/
  | {
      name: 'WithdrawCrowdloanContribution';
      params: { block: number; depositor?: AccountId32 | undefined; paraId: PolkadotParachainPrimitivesPrimitivesId };
    }
  /**
   * Unreserve the deposit that was taken for creating a crowdloan.
   *
   * This can be called once either:
   * - The crowdloan failed to win an auction and timed out
   * - Won an auction, all leases expired and all contributions are withdrawn
   *
   * Can be called by any signed origin. The condition that all contributions are withdrawn
   * is in place since the reserve acts as a storage deposit.
   **/
  | {
      name: 'UnreserveCrowdloanReserve';
      params: { block: number; depositor?: AccountId32 | undefined; paraId: PolkadotParachainPrimitivesPrimitivesId };
    }
  /**
   * Try to migrate a parachain sovereign child account to its respective sibling.
   *
   * Takes the old and new account and migrates it only if they are as expected. An event of
   * `SovereignMigrated` will be emitted if the account was migrated successfully.
   *
   * Callable by any signed origin.
   **/
  | { name: 'MigrateParachainSovereignAcc'; params: { from: AccountId32; to: AccountId32 } }
  /**
   * Force unreserve a named or unnamed reserve.
   **/
  | {
      name: 'ForceUnreserve';
      params: { account: AccountId32; amount: bigint; reason?: AssetHubWestendRuntimeRuntimeHoldReason | undefined };
    };

export type PalletAhOpsCallLike =
  /**
   * Unreserve the deposit that was taken for creating a crowdloan.
   *
   * This can be called by any signed origin. It unreserves the lease deposit on the account
   * that won the lease auction. It can be unreserved once all leases expired. Note that it
   * will be called automatically from `withdraw_crowdloan_contribution` for the matching
   * crowdloan account.
   *
   * Solo bidder accounts that won lease auctions can use this to unreserve their amount.
   **/
  | {
      name: 'UnreserveLeaseDeposit';
      params: {
        block: number;
        depositor?: AccountId32Like | undefined;
        paraId: PolkadotParachainPrimitivesPrimitivesId;
      };
    }
  /**
   * Withdraw the contribution of a finished crowdloan.
   *
   * A crowdloan contribution can be withdrawn if either:
   * - The crowdloan failed to in an auction and timed out
   * - Won an auction and all leases expired
   *
   * Can be called by any signed origin.
   **/
  | {
      name: 'WithdrawCrowdloanContribution';
      params: {
        block: number;
        depositor?: AccountId32Like | undefined;
        paraId: PolkadotParachainPrimitivesPrimitivesId;
      };
    }
  /**
   * Unreserve the deposit that was taken for creating a crowdloan.
   *
   * This can be called once either:
   * - The crowdloan failed to win an auction and timed out
   * - Won an auction, all leases expired and all contributions are withdrawn
   *
   * Can be called by any signed origin. The condition that all contributions are withdrawn
   * is in place since the reserve acts as a storage deposit.
   **/
  | {
      name: 'UnreserveCrowdloanReserve';
      params: {
        block: number;
        depositor?: AccountId32Like | undefined;
        paraId: PolkadotParachainPrimitivesPrimitivesId;
      };
    }
  /**
   * Try to migrate a parachain sovereign child account to its respective sibling.
   *
   * Takes the old and new account and migrates it only if they are as expected. An event of
   * `SovereignMigrated` will be emitted if the account was migrated successfully.
   *
   * Callable by any signed origin.
   **/
  | { name: 'MigrateParachainSovereignAcc'; params: { from: AccountId32Like; to: AccountId32Like } }
  /**
   * Force unreserve a named or unnamed reserve.
   **/
  | {
      name: 'ForceUnreserve';
      params: {
        account: AccountId32Like;
        amount: bigint;
        reason?: AssetHubWestendRuntimeRuntimeHoldReason | undefined;
      };
    };

export type AssetHubWestendRuntimeRuntimeHoldReason =
  | { type: 'Preimage'; value: PalletPreimageHoldReason }
  | { type: 'PolkadotXcm'; value: PalletXcmHoldReason }
  | { type: 'NftFractionalization'; value: PalletNftFractionalizationHoldReason }
  | { type: 'Revive'; value: PalletReviveHoldReason }
  | { type: 'AssetRewards'; value: PalletAssetRewardsHoldReason }
  | { type: 'StateTrieMigration'; value: PalletStateTrieMigrationHoldReason }
  | { type: 'Staking'; value: PalletStakingAsyncPalletHoldReason }
  | { type: 'DelegatedStaking'; value: PalletDelegatedStakingHoldReason }
  | { type: 'MultiBlockSigned'; value: PalletElectionProviderMultiBlockSignedPalletHoldReason };

export type PalletPreimageHoldReason = 'Preimage';

export type PalletXcmHoldReason = 'AuthorizeAlias';

export type PalletNftFractionalizationHoldReason = 'Fractionalized';

export type PalletReviveHoldReason = 'CodeUploadDepositReserve' | 'StorageDepositReserve' | 'AddressMapping';

export type PalletAssetRewardsHoldReason = 'PoolCreation';

export type PalletStateTrieMigrationHoldReason = 'SlashForMigrate';

export type PalletStakingAsyncPalletHoldReason = 'Staking';

export type PalletDelegatedStakingHoldReason = 'StakingDelegation';

export type PalletElectionProviderMultiBlockSignedPalletHoldReason = 'SignedSubmission';

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletAhMigratorCall =
  /**
   * Receive accounts from the Relay Chain.
   *
   * The accounts sent with `pallet_rc_migrator::Pallet::migrate_accounts` function.
   **/
  | { name: 'ReceiveAccounts'; params: { accounts: Array<PalletRcMigratorAccountsAccount> } }
  /**
   * Receive multisigs from the Relay Chain.
   *
   * This will be called from an XCM `Transact` inside a DMP from the relay chain. The
   * multisigs were prepared by
   * `pallet_rc_migrator::multisig::MultisigMigrator::migrate_many`.
   **/
  | { name: 'ReceiveMultisigs'; params: { accounts: Array<PalletRcMigratorMultisigRcMultisig> } }
  /**
   * Receive proxies from the Relay Chain.
   **/
  | { name: 'ReceiveProxyProxies'; params: { proxies: Array<PalletRcMigratorProxyRcProxy> } }
  /**
   * Receive proxy announcements from the Relay Chain.
   **/
  | { name: 'ReceiveProxyAnnouncements'; params: { announcements: Array<PalletRcMigratorProxyRcProxyAnnouncement> } }
  | { name: 'ReceivePreimageChunks'; params: { chunks: Array<PalletRcMigratorPreimageChunksRcPreimageChunk> } }
  | {
      name: 'ReceivePreimageRequestStatus';
      params: { requestStatus: Array<PalletRcMigratorPreimageRequestStatusRcPreimageRequestStatus> };
    }
  | {
      name: 'ReceivePreimageLegacyStatus';
      params: { legacyStatus: Array<PalletRcMigratorPreimageLegacyRequestStatusRcPreimageLegacyStatus> };
    }
  | { name: 'ReceiveNomPoolsMessages'; params: { messages: Array<PalletRcMigratorStakingNomPoolsRcNomPoolsMessage> } }
  | { name: 'ReceiveVestingSchedules'; params: { schedules: Array<PalletRcMigratorVestingRcVestingSchedule> } }
  | {
      name: 'ReceiveFastUnstakeMessages';
      params: { messages: Array<PalletRcMigratorStakingFastUnstakeRcFastUnstakeMessage> };
    }
  /**
   * Receive referendum counts, deciding counts, votes for the track queue.
   **/
  | {
      name: 'ReceiveReferendaValues';
      params: {
        referendumCount: number;
        decidingCount: Array<[number, number]>;
        trackQueue: Array<[number, Array<[number, bigint]>]>;
      };
    }
  /**
   * Receive referendums from the Relay Chain.
   **/
  | { name: 'ReceiveReferendums'; params: { referendums: Array<[number, PalletReferendaReferendumInfo]> } }
  | { name: 'ReceiveBagsListMessages'; params: { messages: Array<PalletRcMigratorStakingBagsListRcBagsListMessage> } }
  | { name: 'ReceiveSchedulerMessages'; params: { messages: Array<PalletRcMigratorSchedulerRcSchedulerMessage> } }
  | { name: 'ReceiveIndices'; params: { indices: Array<PalletRcMigratorIndicesRcIndicesIndex> } }
  | {
      name: 'ReceiveConvictionVotingMessages';
      params: { messages: Array<PalletRcMigratorConvictionVotingRcConvictionVotingMessage> };
    }
  | {
      name: 'ReceiveAssetRates';
      params: { rates: Array<[PolkadotRuntimeCommonImplsVersionedLocatableAsset, FixedU128]> };
    }
  | { name: 'ReceiveReferendaMetadata'; params: { metadata: Array<[number, H256]> } }
  | {
      name: 'ReceiveSchedulerAgendaMessages';
      params: { messages: Array<[number, Array<PalletRcMigratorSchedulerAliasScheduled | undefined>]> };
    }
  | { name: 'ReceiveStakingMessages'; params: { messages: Array<PalletRcMigratorStakingMessageRcStakingMessage> } }
  /**
   * Set the migration stage.
   *
   * This call is intended for emergency use only and is guarded by the
   * [`Config::ManagerOrigin`].
   **/
  | { name: 'ForceSetStage'; params: { stage: PalletAhMigratorMigrationStage } }
  /**
   * Start the data migration.
   *
   * This is typically called by the Relay Chain to start the migration on the Asset Hub and
   * receive a handshake message indicating the Asset Hub's readiness.
   **/
  | { name: 'StartMigration' }
  /**
   * Finish the migration.
   *
   * This is typically called by the Relay Chain to signal the migration has finished.
   **/
  | { name: 'FinishMigration'; params: { data: PalletRcMigratorMigrationFinishedData } }
  /**
   * Fix hold reasons that were incorrectly assigned during migration.
   * This should only be used post-migration to repair bad hold reasons.
   *
   * Only the `ManagerOrigin` can call this function.
   **/
  | { name: 'FixMisplacedHold'; params: { account: AccountId32; delegationHold: bigint; stakingHold: bigint } };

export type PalletAhMigratorCallLike =
  /**
   * Receive accounts from the Relay Chain.
   *
   * The accounts sent with `pallet_rc_migrator::Pallet::migrate_accounts` function.
   **/
  | { name: 'ReceiveAccounts'; params: { accounts: Array<PalletRcMigratorAccountsAccount> } }
  /**
   * Receive multisigs from the Relay Chain.
   *
   * This will be called from an XCM `Transact` inside a DMP from the relay chain. The
   * multisigs were prepared by
   * `pallet_rc_migrator::multisig::MultisigMigrator::migrate_many`.
   **/
  | { name: 'ReceiveMultisigs'; params: { accounts: Array<PalletRcMigratorMultisigRcMultisig> } }
  /**
   * Receive proxies from the Relay Chain.
   **/
  | { name: 'ReceiveProxyProxies'; params: { proxies: Array<PalletRcMigratorProxyRcProxy> } }
  /**
   * Receive proxy announcements from the Relay Chain.
   **/
  | { name: 'ReceiveProxyAnnouncements'; params: { announcements: Array<PalletRcMigratorProxyRcProxyAnnouncement> } }
  | { name: 'ReceivePreimageChunks'; params: { chunks: Array<PalletRcMigratorPreimageChunksRcPreimageChunk> } }
  | {
      name: 'ReceivePreimageRequestStatus';
      params: { requestStatus: Array<PalletRcMigratorPreimageRequestStatusRcPreimageRequestStatus> };
    }
  | {
      name: 'ReceivePreimageLegacyStatus';
      params: { legacyStatus: Array<PalletRcMigratorPreimageLegacyRequestStatusRcPreimageLegacyStatus> };
    }
  | { name: 'ReceiveNomPoolsMessages'; params: { messages: Array<PalletRcMigratorStakingNomPoolsRcNomPoolsMessage> } }
  | { name: 'ReceiveVestingSchedules'; params: { schedules: Array<PalletRcMigratorVestingRcVestingSchedule> } }
  | {
      name: 'ReceiveFastUnstakeMessages';
      params: { messages: Array<PalletRcMigratorStakingFastUnstakeRcFastUnstakeMessage> };
    }
  /**
   * Receive referendum counts, deciding counts, votes for the track queue.
   **/
  | {
      name: 'ReceiveReferendaValues';
      params: {
        referendumCount: number;
        decidingCount: Array<[number, number]>;
        trackQueue: Array<[number, Array<[number, bigint]>]>;
      };
    }
  /**
   * Receive referendums from the Relay Chain.
   **/
  | { name: 'ReceiveReferendums'; params: { referendums: Array<[number, PalletReferendaReferendumInfo]> } }
  | { name: 'ReceiveBagsListMessages'; params: { messages: Array<PalletRcMigratorStakingBagsListRcBagsListMessage> } }
  | { name: 'ReceiveSchedulerMessages'; params: { messages: Array<PalletRcMigratorSchedulerRcSchedulerMessage> } }
  | { name: 'ReceiveIndices'; params: { indices: Array<PalletRcMigratorIndicesRcIndicesIndex> } }
  | {
      name: 'ReceiveConvictionVotingMessages';
      params: { messages: Array<PalletRcMigratorConvictionVotingRcConvictionVotingMessage> };
    }
  | {
      name: 'ReceiveAssetRates';
      params: { rates: Array<[PolkadotRuntimeCommonImplsVersionedLocatableAsset, FixedU128]> };
    }
  | { name: 'ReceiveReferendaMetadata'; params: { metadata: Array<[number, H256]> } }
  | {
      name: 'ReceiveSchedulerAgendaMessages';
      params: { messages: Array<[number, Array<PalletRcMigratorSchedulerAliasScheduled | undefined>]> };
    }
  | { name: 'ReceiveStakingMessages'; params: { messages: Array<PalletRcMigratorStakingMessageRcStakingMessage> } }
  /**
   * Set the migration stage.
   *
   * This call is intended for emergency use only and is guarded by the
   * [`Config::ManagerOrigin`].
   **/
  | { name: 'ForceSetStage'; params: { stage: PalletAhMigratorMigrationStage } }
  /**
   * Start the data migration.
   *
   * This is typically called by the Relay Chain to start the migration on the Asset Hub and
   * receive a handshake message indicating the Asset Hub's readiness.
   **/
  | { name: 'StartMigration' }
  /**
   * Finish the migration.
   *
   * This is typically called by the Relay Chain to signal the migration has finished.
   **/
  | { name: 'FinishMigration'; params: { data: PalletRcMigratorMigrationFinishedData } }
  /**
   * Fix hold reasons that were incorrectly assigned during migration.
   * This should only be used post-migration to repair bad hold reasons.
   *
   * Only the `ManagerOrigin` can call this function.
   **/
  | { name: 'FixMisplacedHold'; params: { account: AccountId32Like; delegationHold: bigint; stakingHold: bigint } };

export type PalletRcMigratorAccountsAccount = {
  who: AccountId32;
  free: bigint;
  reserved: bigint;
  frozen: bigint;
  holds: Array<FrameSupportTokensMiscIdAmount>;
  freezes: Array<FrameSupportTokensMiscIdAmountRcFreezeReason>;
  locks: Array<PalletBalancesBalanceLock>;
  unnamedReserve: bigint;
  consumers: number;
  providers: number;
};

export type AssetHubWestendRuntimeAhMigrationRcHoldReason =
  | { type: 'Preimage'; value: PalletPreimageHoldReason }
  | { type: 'DelegatedStaking'; value: PalletDelegatedStakingHoldReason }
  | { type: 'Staking'; value: PalletStakingPalletHoldReason };

export type PalletStakingPalletHoldReason = 'Staking';

export type AssetHubWestendRuntimeAhMigrationRcFreezeReason = {
  type: 'NominationPools';
  value: PalletNominationPoolsFreezeReason;
};

export type PalletNominationPoolsFreezeReason = 'PoolMinBalance';

export type FrameSupportTokensMiscIdAmount = { id: AssetHubWestendRuntimeAhMigrationRcHoldReason; amount: bigint };

export type FrameSupportTokensMiscIdAmountRcFreezeReason = {
  id: AssetHubWestendRuntimeAhMigrationRcFreezeReason;
  amount: bigint;
};

export type PalletBalancesBalanceLock = { id: FixedBytes<8>; amount: bigint; reasons: PalletBalancesReasons };

export type PalletBalancesReasons = 'Fee' | 'Misc' | 'All';

export type PalletRcMigratorMultisigRcMultisig = {
  creator: AccountId32;
  deposit: bigint;
  details?: AccountId32 | undefined;
};

export type PalletRcMigratorProxyRcProxy = {
  delegator: AccountId32;
  deposit: bigint;
  proxies: Array<PalletProxyProxyDefinition>;
};

export type AssetHubWestendRuntimeAhMigrationRcProxyType =
  | 'Any'
  | 'NonTransfer'
  | 'Governance'
  | 'Staking'
  | 'SudoBalances'
  | 'IdentityJudgement'
  | 'CancelProxy'
  | 'Auction'
  | 'NominationPools'
  | 'ParaRegistration';

export type PalletProxyProxyDefinition = {
  delegate: AccountId32;
  proxyType: AssetHubWestendRuntimeAhMigrationRcProxyType;
  delay: number;
};

export type PalletRcMigratorProxyRcProxyAnnouncement = { depositor: AccountId32; deposit: bigint };

export type PalletRcMigratorPreimageChunksRcPreimageChunk = {
  preimageHash: H256;
  preimageLen: number;
  chunkByteOffset: number;
  chunkBytes: Bytes;
};

export type PalletRcMigratorPreimageRequestStatusRcPreimageRequestStatus = {
  hash: H256;
  requestStatus: PalletRcMigratorPreimageAliasRequestStatus;
};

export type FrameSupportTokensFungibleHoldConsideration = bigint;

export type PalletRcMigratorPreimageAliasRequestStatus =
  | { type: 'Unrequested'; value: { ticket: [AccountId32, FrameSupportTokensFungibleHoldConsideration]; len: number } }
  | {
      type: 'Requested';
      value: {
        maybeTicket?: [AccountId32, FrameSupportTokensFungibleHoldConsideration] | undefined;
        count: number;
        maybeLen?: number | undefined;
      };
    };

export type PalletRcMigratorPreimageLegacyRequestStatusRcPreimageLegacyStatus = {
  hash: H256;
  depositor: AccountId32;
  deposit: bigint;
};

export type PalletRcMigratorStakingNomPoolsRcNomPoolsMessage =
  | { type: 'StorageValues'; value: { values: PalletRcMigratorStakingNomPoolsNomPoolsStorageValues } }
  | { type: 'PoolMembers'; value: { member: [AccountId32, PalletNominationPoolsPoolMember] } }
  | { type: 'BondedPools'; value: { pool: [number, PalletNominationPoolsBondedPoolInner] } }
  | { type: 'RewardPools'; value: { rewards: [number, PalletRcMigratorStakingNomPoolsAliasRewardPool] } }
  | { type: 'SubPoolsStorage'; value: { subPools: [number, PalletRcMigratorStakingNomPoolsAliasSubPools] } }
  | { type: 'Metadata'; value: { meta: [number, Bytes] } }
  | { type: 'ReversePoolIdLookup'; value: { lookups: [AccountId32, number] } }
  | { type: 'ClaimPermissions'; value: { perms: [AccountId32, PalletNominationPoolsClaimPermission] } };

export type PalletRcMigratorStakingNomPoolsNomPoolsStorageValues = {
  totalValueLocked: bigint;
  minJoinBond: bigint;
  minCreateBond: bigint;
  maxPools?: number | undefined;
  maxPoolMembers?: number | undefined;
  maxPoolMembersPerPool?: number | undefined;
  globalMaxCommission?: Perbill | undefined;
  lastPoolId: number;
};

export type PalletNominationPoolsPoolMember = {
  poolId: number;
  points: bigint;
  lastRecordedRewardCounter: FixedU128;
  unbondingEras: Array<[number, bigint]>;
};

export type PalletNominationPoolsBondedPoolInner = {
  commission: PalletNominationPoolsCommission;
  memberCounter: number;
  points: bigint;
  roles: PalletNominationPoolsPoolRoles;
  state: PalletNominationPoolsPoolState;
};

export type PalletNominationPoolsCommission = {
  current?: [Perbill, AccountId32] | undefined;
  max?: Perbill | undefined;
  changeRate?: PalletNominationPoolsCommissionChangeRate | undefined;
  throttleFrom?: number | undefined;
  claimPermission?: PalletNominationPoolsCommissionClaimPermission | undefined;
};

export type PalletNominationPoolsPoolRoles = {
  depositor: AccountId32;
  root?: AccountId32 | undefined;
  nominator?: AccountId32 | undefined;
  bouncer?: AccountId32 | undefined;
};

export type PalletRcMigratorStakingNomPoolsAliasRewardPool = {
  lastRecordedRewardCounter: FixedU128;
  lastRecordedTotalPayouts: bigint;
  totalRewardsClaimed: bigint;
  totalCommissionPending: bigint;
  totalCommissionClaimed: bigint;
};

export type PalletRcMigratorStakingNomPoolsAliasSubPools = {
  noEra: PalletRcMigratorStakingNomPoolsAliasUnbondPool;
  withEra: Array<[number, PalletRcMigratorStakingNomPoolsAliasUnbondPool]>;
};

export type PalletRcMigratorStakingNomPoolsAliasUnbondPool = { points: bigint; balance: bigint };

export type PalletRcMigratorVestingRcVestingSchedule = { who: AccountId32; schedules: Array<PalletVestingVestingInfo> };

export type PalletRcMigratorStakingFastUnstakeRcFastUnstakeMessage =
  | { type: 'StorageValues'; value: { values: PalletRcMigratorStakingFastUnstakeFastUnstakeStorageValues } }
  | { type: 'Queue'; value: { member: [AccountId32, bigint] } };

export type PalletRcMigratorStakingFastUnstakeFastUnstakeStorageValues = {
  head?: PalletRcMigratorStakingFastUnstakeAliasUnstakeRequest | undefined;
  erasToCheckPerBlock: number;
};

export type PalletRcMigratorStakingFastUnstakeAliasUnstakeRequest = {
  stashes: Array<[AccountId32, bigint]>;
  checked: Array<number>;
};

export type PalletReferendaReferendumInfo =
  | { type: 'Ongoing'; value: PalletReferendaReferendumStatus }
  | { type: 'Approved'; value: [number, PalletReferendaDeposit | undefined, PalletReferendaDeposit | undefined] }
  | { type: 'Rejected'; value: [number, PalletReferendaDeposit | undefined, PalletReferendaDeposit | undefined] }
  | { type: 'Cancelled'; value: [number, PalletReferendaDeposit | undefined, PalletReferendaDeposit | undefined] }
  | { type: 'TimedOut'; value: [number, PalletReferendaDeposit | undefined, PalletReferendaDeposit | undefined] }
  | { type: 'Killed'; value: number };

export type AssetHubWestendRuntimeAhMigrationRcPalletsOrigin =
  | { type: 'System'; value: FrameSupportDispatchRawOrigin }
  | { type: 'Origins'; value: AssetHubWestendRuntimeGovernanceOriginsPalletCustomOriginsOrigin };

export type PalletConvictionVotingTally = { ayes: bigint; nays: bigint; support: bigint };

export type PalletReferendaReferendumStatus = {
  track: number;
  origin: AssetHubWestendRuntimeAhMigrationRcPalletsOrigin;
  proposal: FrameSupportPreimagesBounded;
  enactment: FrameSupportScheduleDispatchTime;
  submitted: number;
  submissionDeposit: PalletReferendaDeposit;
  decisionDeposit?: PalletReferendaDeposit | undefined;
  deciding?: PalletReferendaDecidingStatus | undefined;
  tally: PalletConvictionVotingTally;
  inQueue: boolean;
  alarm?: [number, [number, number]] | undefined;
};

export type PalletReferendaDeposit = { who: AccountId32; amount: bigint };

export type PalletReferendaDecidingStatus = { since: number; confirming?: number | undefined };

export type PalletRcMigratorStakingBagsListRcBagsListMessage =
  | { type: 'Node'; value: { id: AccountId32; node: PalletRcMigratorStakingBagsListAliasNode } }
  | { type: 'Bag'; value: { score: bigint; bag: PalletRcMigratorStakingBagsListAliasBag } };

export type PalletRcMigratorStakingBagsListAliasNode = {
  id: AccountId32;
  prev?: AccountId32 | undefined;
  next?: AccountId32 | undefined;
  bagUpper: bigint;
  score: bigint;
};

export type PalletRcMigratorStakingBagsListAliasBag = {
  head?: AccountId32 | undefined;
  tail?: AccountId32 | undefined;
};

export type PalletRcMigratorSchedulerRcSchedulerMessage =
  | { type: 'IncompleteSince'; value: number }
  | { type: 'Retries'; value: [[number, number], PalletSchedulerRetryConfig] }
  | { type: 'Lookup'; value: [FixedBytes<32>, [number, number]] };

export type PalletSchedulerRetryConfig = { totalRetries: number; remaining: number; period: number };

export type PalletRcMigratorIndicesRcIndicesIndex = {
  index: number;
  who: AccountId32;
  deposit: bigint;
  frozen: boolean;
};

export type PalletRcMigratorConvictionVotingRcConvictionVotingMessage =
  | { type: 'VotingFor'; value: [AccountId32, number, PalletConvictionVotingVoteVoting] }
  | { type: 'ClassLocksFor'; value: [AccountId32, Array<[number, bigint]>] };

export type PalletConvictionVotingVoteVoting =
  | { type: 'Casting'; value: PalletConvictionVotingVoteCasting }
  | { type: 'Delegating'; value: PalletConvictionVotingVoteDelegating };

export type PalletConvictionVotingVoteCasting = {
  votes: Array<[number, PalletConvictionVotingVoteAccountVote]>;
  delegations: PalletConvictionVotingDelegations;
  prior: PalletConvictionVotingVotePriorLock;
};

export type PalletConvictionVotingDelegations = { votes: bigint; capital: bigint };

export type PalletConvictionVotingVotePriorLock = [number, bigint];

export type PalletConvictionVotingVoteDelegating = {
  balance: bigint;
  target: AccountId32;
  conviction: PalletConvictionVotingConviction;
  delegations: PalletConvictionVotingDelegations;
  prior: PalletConvictionVotingVotePriorLock;
};

export type PalletRcMigratorSchedulerAliasScheduled = {
  maybeId?: FixedBytes<32> | undefined;
  priority: number;
  call: FrameSupportPreimagesBounded;
  maybePeriodic?: [number, number] | undefined;
  origin: AssetHubWestendRuntimeAhMigrationRcPalletsOrigin;
};

export type PalletRcMigratorStakingMessageRcStakingMessage =
  | { type: 'Values'; value: PalletRcMigratorStakingMessageStakingValues }
  | { type: 'Invulnerables'; value: Array<AccountId32> }
  | { type: 'Bonded'; value: { stash: AccountId32; controller: AccountId32 } }
  | { type: 'Ledger'; value: { controller: AccountId32; ledger: PalletStakingAsyncLedgerStakingLedger2 } }
  | { type: 'Payee'; value: { stash: AccountId32; payment: PalletStakingAsyncRewardDestination } }
  | { type: 'Validators'; value: { stash: AccountId32; validators: PalletStakingAsyncValidatorPrefs } }
  | { type: 'Nominators'; value: { stash: AccountId32; nominations: PalletStakingAsyncNominations } }
  | { type: 'VirtualStakers'; value: AccountId32 }
  | {
      type: 'ErasStakersOverview';
      value: { era: number; validator: AccountId32; exposure: SpStakingPagedExposureMetadata };
    }
  | {
      type: 'ErasStakersPaged';
      value: { era: number; validator: AccountId32; page: number; exposure: SpStakingExposurePage };
    }
  | { type: 'ClaimedRewards'; value: { era: number; validator: AccountId32; rewards: Array<number> } }
  | {
      type: 'ErasValidatorPrefs';
      value: { era: number; validator: AccountId32; prefs: PalletStakingAsyncValidatorPrefs };
    }
  | { type: 'ErasValidatorReward'; value: { era: number; reward: bigint } }
  | { type: 'ErasRewardPoints'; value: { era: number; points: PalletStakingAsyncEraRewardPoints } }
  | { type: 'ErasTotalStake'; value: { era: number; totalStake: bigint } }
  | { type: 'UnappliedSlashes'; value: { era: number; slash: PalletStakingAsyncUnappliedSlash } }
  | { type: 'BondedEras'; value: Array<[number, number]> }
  | { type: 'ValidatorSlashInEra'; value: { era: number; validator: AccountId32; slash: [Perbill, bigint] } }
  | { type: 'NominatorSlashInEra'; value: { era: number; validator: AccountId32; slash: bigint } };

export type PalletStakingAsyncLedgerStakingLedger2 = {
  stash: AccountId32;
  total: bigint;
  active: bigint;
  unlocking: Array<PalletStakingAsyncLedgerUnlockChunk>;
};

export type PalletStakingAsyncNominations = { targets: Array<AccountId32>; submittedIn: number; suppressed: boolean };

export type PalletStakingAsyncEraRewardPoints = { total: number; individual: Array<[AccountId32, number]> };

export type PalletStakingAsyncUnappliedSlash = {
  validator: AccountId32;
  own: bigint;
  others: Array<[AccountId32, bigint]>;
  reporter?: AccountId32 | undefined;
  payout: bigint;
};

export type PalletRcMigratorStakingMessageStakingValues = {
  validatorCount: number;
  minValidatorCount: number;
  minNominatorBond: bigint;
  minValidatorBond: bigint;
  minActiveStake: bigint;
  minCommission: Perbill;
  maxValidatorsCount?: number | undefined;
  maxNominatorsCount?: number | undefined;
  currentEra?: number | undefined;
  activeEra?: PalletStakingActiveEraInfo | undefined;
  forceEra: PalletStakingForcing;
  maxStakedRewards?: Percent | undefined;
  slashRewardFraction: Perbill;
  canceledSlashPayout: bigint;
  currentPlannedSession: number;
  chillThreshold?: Percent | undefined;
};

export type PalletStakingActiveEraInfo = { index: number; start?: bigint | undefined };

export type PalletStakingForcing = 'NotForcing' | 'ForceNew' | 'ForceNone' | 'ForceAlways';

export type SpStakingPagedExposureMetadata = { total: bigint; own: bigint; nominatorCount: number; pageCount: number };

export type SpStakingExposurePage = { pageTotal: bigint; others: Array<SpStakingIndividualExposure> };

export type SpStakingIndividualExposure = { who: AccountId32; value: bigint };

export type PalletAhMigratorMigrationStage = 'Pending' | 'DataMigrationOngoing' | 'DataMigrationDone' | 'MigrationDone';

export type PalletRcMigratorMigrationFinishedData = { rcBalanceKept: bigint };

export type SpRuntimeBlakeTwo256 = {};

/**
 * The `Event` enum of this pallet
 **/
export type PalletWhitelistEvent =
  | { name: 'CallWhitelisted'; data: { callHash: H256 } }
  | { name: 'WhitelistedCallRemoved'; data: { callHash: H256 } }
  | {
      name: 'WhitelistedCallDispatched';
      data: {
        callHash: H256;
        result: Result<FrameSupportDispatchPostDispatchInfo, SpRuntimeDispatchErrorWithPostInfo>;
      };
    };

export type FrameSupportDispatchPostDispatchInfo = {
  actualWeight?: SpWeightsWeightV2Weight | undefined;
  paysFee: FrameSupportDispatchPays;
};

export type SpRuntimeDispatchErrorWithPostInfo = {
  postInfo: FrameSupportDispatchPostDispatchInfo;
  error: DispatchError;
};

/**
 * The `Event` enum of this pallet
 **/
export type PalletTreasuryEvent =
  /**
   * We have ended a spend period and will now allocate funds.
   **/
  | { name: 'Spending'; data: { budgetRemaining: bigint } }
  /**
   * Some funds have been allocated.
   **/
  | { name: 'Awarded'; data: { proposalIndex: number; award: bigint; account: AccountId32 } }
  /**
   * Some of our funds have been burnt.
   **/
  | { name: 'Burnt'; data: { burntFunds: bigint } }
  /**
   * Spending has finished; this is the amount that rolls over until next spend.
   **/
  | { name: 'Rollover'; data: { rolloverBalance: bigint } }
  /**
   * Some funds have been deposited.
   **/
  | { name: 'Deposit'; data: { value: bigint } }
  /**
   * A new spend proposal has been approved.
   **/
  | { name: 'SpendApproved'; data: { proposalIndex: number; amount: bigint; beneficiary: AccountId32 } }
  /**
   * The inactive funds of the pallet have been updated.
   **/
  | { name: 'UpdatedInactive'; data: { reactivated: bigint; deactivated: bigint } }
  /**
   * A new asset spend proposal has been approved.
   **/
  | {
      name: 'AssetSpendApproved';
      data: {
        index: number;
        assetKind: PolkadotRuntimeCommonImplsVersionedLocatableAsset;
        amount: bigint;
        beneficiary: XcmVersionedLocation;
        validFrom: number;
        expireAt: number;
      };
    }
  /**
   * An approved spend was voided.
   **/
  | { name: 'AssetSpendVoided'; data: { index: number } }
  /**
   * A payment happened.
   **/
  | { name: 'Paid'; data: { index: number; paymentId: bigint } }
  /**
   * A payment failed and can be retried.
   **/
  | { name: 'PaymentFailed'; data: { index: number; paymentId: bigint } }
  /**
   * A spend was processed and removed from the storage. It might have been successfully
   * paid or it may have expired.
   **/
  | { name: 'SpendProcessed'; data: { index: number } };

/**
 * The `Event` enum of this pallet
 **/
export type PalletAssetRateEvent =
  | {
      name: 'AssetRateCreated';
      data: { assetKind: PolkadotRuntimeCommonImplsVersionedLocatableAsset; rate: FixedU128 };
    }
  | { name: 'AssetRateRemoved'; data: { assetKind: PolkadotRuntimeCommonImplsVersionedLocatableAsset } }
  | {
      name: 'AssetRateUpdated';
      data: { assetKind: PolkadotRuntimeCommonImplsVersionedLocatableAsset; old: FixedU128; new: FixedU128 };
    };

/**
 * The `Event` enum of this pallet
 **/
export type PalletAssetConversionOpsEvent =
  /**
   * Indicates that a pool has been migrated to the new account ID.
   **/
  {
    name: 'MigratedToNewAccount';
    data: {
      /**
       * Pool's ID.
       **/
      poolId: [StagingXcmV5Location, StagingXcmV5Location];

      /**
       * Pool's prior account ID.
       **/
      priorAccount: AccountId32;

      /**
       * Pool's new account ID.
       **/
      newAccount: AccountId32;
    };
  };

/**
 * The `Event` enum of this pallet
 **/
export type PalletAhOpsEvent =
  /**
   * Some lease reserve could not be unreserved and needs manual cleanup.
   **/
  | {
      name: 'LeaseUnreserveRemaining';
      data: { depositor: AccountId32; paraId: PolkadotParachainPrimitivesPrimitivesId; remaining: bigint };
    }
  /**
   * Some amount for a crowdloan reserve could not be unreserved and needs manual cleanup.
   **/
  | {
      name: 'CrowdloanUnreserveRemaining';
      data: { depositor: AccountId32; paraId: PolkadotParachainPrimitivesPrimitivesId; remaining: bigint };
    }
  /**
   * A sovereign parachain account has been migrated from its child to sibling
   * representation.
   **/
  | {
      name: 'SovereignMigrated';
      data: {
        /**
         * The parachain ID that had its account migrated.
         **/
        paraId: PolkadotParachainPrimitivesPrimitivesId;

        /**
         * The old account that was migrated out of.
         **/
        from: AccountId32;

        /**
         * The new account that was migrated into.
         **/
        to: AccountId32;
      };
    }
  /**
   * An amount of fungible balance was put on hold.
   **/
  | {
      name: 'HoldPlaced';
      data: { account: AccountId32; amount: bigint; reason: AssetHubWestendRuntimeRuntimeHoldReason };
    }
  /**
   * An amount of fungible balance was released from its hold.
   **/
  | {
      name: 'HoldReleased';
      data: { account: AccountId32; amount: bigint; reason: AssetHubWestendRuntimeRuntimeHoldReason };
    };

/**
 * The `Event` enum of this pallet
 **/
export type PalletAhMigratorEvent =
  /**
   * A stage transition has occurred.
   **/
  | {
      name: 'StageTransition';
      data: {
        /**
         * The old stage before the transition.
         **/
        old: PalletAhMigratorMigrationStage;

        /**
         * The new stage after the transition.
         **/
        new: PalletAhMigratorMigrationStage;
      };
    }
  /**
   * We received a batch of messages that will be integrated into a pallet.
   **/
  | { name: 'BatchReceived'; data: { pallet: PalletAhMigratorPalletEventName; count: number } }
  /**
   * We processed a batch of messages for this pallet.
   **/
  | { name: 'BatchProcessed'; data: { pallet: PalletAhMigratorPalletEventName; countGood: number; countBad: number } }
  /**
   * The Asset Hub Migration started and is active until `AssetHubMigrationFinished` is
   * emitted.
   *
   * This event is equivalent to `StageTransition { new: DataMigrationOngoing, .. }` but is
   * easier to understand. The activation is immediate and affects all events happening
   * afterwards.
   **/
  | { name: 'AssetHubMigrationStarted' }
  /**
   * The Asset Hub Migration finished.
   *
   * This event is equivalent to `StageTransition { new: MigrationDone, .. }` but is easier
   * to understand. The finishing is immediate and affects all events happening
   * afterwards.
   **/
  | { name: 'AssetHubMigrationFinished' };

export type PalletAhMigratorPalletEventName =
  | 'Indices'
  | 'FastUnstake'
  | 'Crowdloan'
  | 'BagsList'
  | 'Vesting'
  | 'Bounties'
  | 'Treasury'
  | 'Balances'
  | 'Multisig'
  | 'Claims'
  | 'ProxyProxies'
  | 'ProxyAnnouncements'
  | 'PreimageChunk'
  | 'PreimageRequestStatus'
  | 'PreimageLegacyStatus'
  | 'NomPools'
  | 'ReferendaValues'
  | 'ReferendaMetadata'
  | 'ReferendaReferendums'
  | 'Scheduler'
  | 'SchedulerAgenda'
  | 'ConvictionVoting'
  | 'AssetRates'
  | 'Staking';

export type FrameSystemLastRuntimeUpgradeInfo = { specVersion: number; specName: string };

export type FrameSystemCodeUpgradeAuthorization = { codeHash: H256; checkVersion: boolean };

export type FrameSystemLimitsBlockWeights = {
  baseBlock: SpWeightsWeightV2Weight;
  maxBlock: SpWeightsWeightV2Weight;
  perClass: FrameSupportDispatchPerDispatchClassWeightsPerClass;
};

export type FrameSupportDispatchPerDispatchClassWeightsPerClass = {
  normal: FrameSystemLimitsWeightsPerClass;
  operational: FrameSystemLimitsWeightsPerClass;
  mandatory: FrameSystemLimitsWeightsPerClass;
};

export type FrameSystemLimitsWeightsPerClass = {
  baseExtrinsic: SpWeightsWeightV2Weight;
  maxExtrinsic?: SpWeightsWeightV2Weight | undefined;
  maxTotal?: SpWeightsWeightV2Weight | undefined;
  reserved?: SpWeightsWeightV2Weight | undefined;
};

export type FrameSystemLimitsBlockLength = { max: FrameSupportDispatchPerDispatchClassU32 };

export type FrameSupportDispatchPerDispatchClassU32 = { normal: number; operational: number; mandatory: number };

export type SpWeightsRuntimeDbWeight = { read: bigint; write: bigint };

/**
 * Error for the System pallet
 **/
export type FrameSystemError =
  /**
   * The name of specification does not match between the current runtime
   * and the new runtime.
   **/
  | 'InvalidSpecName'
  /**
   * The specification version is not allowed to decrease between the current runtime
   * and the new runtime.
   **/
  | 'SpecVersionNeedsToIncrease'
  /**
   * Failed to extract the runtime version from the new runtime.
   *
   * Either calling `Core_version` or decoding `RuntimeVersion` failed.
   **/
  | 'FailedToExtractRuntimeVersion'
  /**
   * Suicide called when the account has non-default composite data.
   **/
  | 'NonDefaultComposite'
  /**
   * There is a non-zero reference count preventing the account from being purged.
   **/
  | 'NonZeroRefCount'
  /**
   * The origin filter prevent the call to be dispatched.
   **/
  | 'CallFiltered'
  /**
   * A multi-block migration is ongoing and prevents the current code from being replaced.
   **/
  | 'MultiBlockMigrationsOngoing'
  /**
   * No upgrade authorized.
   **/
  | 'NothingAuthorized'
  /**
   * The submitted code is not authorized.
   **/
  | 'Unauthorized';

export type CumulusPalletParachainSystemUnincludedSegmentAncestor = {
  usedBandwidth: CumulusPalletParachainSystemUnincludedSegmentUsedBandwidth;
  paraHeadHash?: H256 | undefined;
  consumedGoAheadSignal?: PolkadotPrimitivesV8UpgradeGoAhead | undefined;
};

export type CumulusPalletParachainSystemUnincludedSegmentUsedBandwidth = {
  umpMsgCount: number;
  umpTotalBytes: number;
  hrmpOutgoing: Array<
    [PolkadotParachainPrimitivesPrimitivesId, CumulusPalletParachainSystemUnincludedSegmentHrmpChannelUpdate]
  >;
};

export type CumulusPalletParachainSystemUnincludedSegmentHrmpChannelUpdate = { msgCount: number; totalBytes: number };

export type PolkadotPrimitivesV8UpgradeGoAhead = 'Abort' | 'GoAhead';

export type CumulusPalletParachainSystemUnincludedSegmentSegmentTracker = {
  usedBandwidth: CumulusPalletParachainSystemUnincludedSegmentUsedBandwidth;
  hrmpWatermark?: number | undefined;
  consumedGoAheadSignal?: PolkadotPrimitivesV8UpgradeGoAhead | undefined;
};

export type PolkadotPrimitivesV8UpgradeRestriction = 'Present';

export type CumulusPalletParachainSystemRelayStateSnapshotMessagingStateSnapshot = {
  dmqMqcHead: H256;
  relayDispatchQueueRemainingCapacity: CumulusPalletParachainSystemRelayStateSnapshotRelayDispatchQueueRemainingCapacity;
  ingressChannels: Array<[PolkadotParachainPrimitivesPrimitivesId, PolkadotPrimitivesV8AbridgedHrmpChannel]>;
  egressChannels: Array<[PolkadotParachainPrimitivesPrimitivesId, PolkadotPrimitivesV8AbridgedHrmpChannel]>;
};

export type CumulusPalletParachainSystemRelayStateSnapshotRelayDispatchQueueRemainingCapacity = {
  remainingCount: number;
  remainingSize: number;
};

export type PolkadotPrimitivesV8AbridgedHrmpChannel = {
  maxCapacity: number;
  maxTotalSize: number;
  maxMessageSize: number;
  msgCount: number;
  totalSize: number;
  mqcHead?: H256 | undefined;
};

export type PolkadotPrimitivesV8AbridgedHostConfiguration = {
  maxCodeSize: number;
  maxHeadDataSize: number;
  maxUpwardQueueCount: number;
  maxUpwardQueueSize: number;
  maxUpwardMessageSize: number;
  maxUpwardMessageNumPerCandidate: number;
  hrmpMaxMessageNumPerCandidate: number;
  validationUpgradeCooldown: number;
  validationUpgradeDelay: number;
  asyncBackingParams: PolkadotPrimitivesV8AsyncBackingAsyncBackingParams;
};

export type PolkadotPrimitivesV8AsyncBackingAsyncBackingParams = {
  maxCandidateDepth: number;
  allowedAncestryLen: number;
};

export type CumulusPrimitivesParachainInherentMessageQueueChain = H256;

export type PolkadotCorePrimitivesOutboundHrmpMessage = {
  recipient: PolkadotParachainPrimitivesPrimitivesId;
  data: Bytes;
};

/**
 * The `Error` enum of this pallet.
 **/
export type CumulusPalletParachainSystemError =
  /**
   * Attempt to upgrade validation function while existing upgrade pending.
   **/
  | 'OverlappingUpgrades'
  /**
   * Polkadot currently prohibits this parachain from upgrading its validation function.
   **/
  | 'ProhibitedByPolkadot'
  /**
   * The supplied validation function has compiled into a blob larger than Polkadot is
   * willing to run.
   **/
  | 'TooBig'
  /**
   * The inherent which supplies the validation data did not run this block.
   **/
  | 'ValidationDataNotAvailable'
  /**
   * The inherent which supplies the host configuration did not run this block.
   **/
  | 'HostConfigurationNotAvailable'
  /**
   * No validation function upgrade is currently scheduled.
   **/
  | 'NotScheduled';

/**
 * The `Error` enum of this pallet.
 **/
export type PalletMigrationsError =
  /**
   * The operation cannot complete since some MBMs are ongoing.
   **/
  'Ongoing';

export type PalletPreimageOldRequestStatus =
  | { type: 'Unrequested'; value: { deposit: [AccountId32, bigint]; len: number } }
  | {
      type: 'Requested';
      value: { deposit?: [AccountId32, bigint] | undefined; count: number; len?: number | undefined };
    };

export type PalletPreimageRequestStatus =
  | { type: 'Unrequested'; value: { ticket: [AccountId32, FrameSupportTokensFungibleHoldConsideration]; len: number } }
  | {
      type: 'Requested';
      value: {
        maybeTicket?: [AccountId32, FrameSupportTokensFungibleHoldConsideration] | undefined;
        count: number;
        maybeLen?: number | undefined;
      };
    };

/**
 * The `Error` enum of this pallet.
 **/
export type PalletPreimageError =
  /**
   * Preimage is too large to store on-chain.
   **/
  | 'TooBig'
  /**
   * Preimage has already been noted on-chain.
   **/
  | 'AlreadyNoted'
  /**
   * The user is not authorized to perform this action.
   **/
  | 'NotAuthorized'
  /**
   * The preimage cannot be removed since it has not yet been noted.
   **/
  | 'NotNoted'
  /**
   * A preimage may not be removed when there are outstanding requests.
   **/
  | 'Requested'
  /**
   * The preimage request cannot be removed since no outstanding requests exist.
   **/
  | 'NotRequested'
  /**
   * More than `MAX_HASH_UPGRADE_BULK_COUNT` hashes were requested to be upgraded at once.
   **/
  | 'TooMany'
  /**
   * Too few hashes were requested to be upgraded (i.e. zero).
   **/
  | 'TooFew';

export type PalletSchedulerScheduled = {
  maybeId?: FixedBytes<32> | undefined;
  priority: number;
  call: FrameSupportPreimagesBounded;
  maybePeriodic?: [number, number] | undefined;
  origin: AssetHubWestendRuntimeOriginCaller;
};

/**
 * The `Error` enum of this pallet.
 **/
export type PalletSchedulerError =
  /**
   * Failed to schedule a call
   **/
  | 'FailedToSchedule'
  /**
   * Cannot find the scheduled call.
   **/
  | 'NotFound'
  /**
   * Given target block number is in the past.
   **/
  | 'TargetBlockNumberInPast'
  /**
   * Reschedule failed because it does not change scheduled time.
   **/
  | 'RescheduleNoChange'
  /**
   * Attempt to use a non-named function on a named task.
   **/
  | 'Named';

/**
 * Error for the Sudo pallet.
 **/
export type PalletSudoError =
  /**
   * Sender must be the Sudo account.
   **/
  'RequireSudo';

export type PalletBalancesReserveData = { id: FixedBytes<8>; amount: bigint };

export type FrameSupportTokensMiscIdAmountRuntimeHoldReason = {
  id: AssetHubWestendRuntimeRuntimeHoldReason;
  amount: bigint;
};

export type FrameSupportTokensMiscIdAmountRuntimeFreezeReason = {
  id: AssetHubWestendRuntimeRuntimeFreezeReason;
  amount: bigint;
};

export type AssetHubWestendRuntimeRuntimeFreezeReason =
  | { type: 'AssetRewards'; value: PalletAssetRewardsFreezeReason }
  | { type: 'NominationPools'; value: PalletNominationPoolsFreezeReason };

export type PalletAssetRewardsFreezeReason = 'Staked';

/**
 * The `Error` enum of this pallet.
 **/
export type PalletBalancesError =
  /**
   * Vesting balance too high to send value.
   **/
  | 'VestingBalance'
  /**
   * Account liquidity restrictions prevent withdrawal.
   **/
  | 'LiquidityRestrictions'
  /**
   * Balance too low to send value.
   **/
  | 'InsufficientBalance'
  /**
   * Value too low to create account due to existential deposit.
   **/
  | 'ExistentialDeposit'
  /**
   * Transfer/payment would kill account.
   **/
  | 'Expendability'
  /**
   * A vesting schedule already exists for this account.
   **/
  | 'ExistingVestingSchedule'
  /**
   * Beneficiary account must pre-exist.
   **/
  | 'DeadAccount'
  /**
   * Number of named reserves exceed `MaxReserves`.
   **/
  | 'TooManyReserves'
  /**
   * Number of holds exceed `VariantCountOf<T::RuntimeHoldReason>`.
   **/
  | 'TooManyHolds'
  /**
   * Number of freezes exceed `MaxFreezes`.
   **/
  | 'TooManyFreezes'
  /**
   * The issuance cannot be modified since it is already deactivated.
   **/
  | 'IssuanceDeactivated'
  /**
   * The delta cannot be zero.
   **/
  | 'DeltaZero';

export type PalletTransactionPaymentReleases = 'V1Ancient' | 'V2';

export type PalletVestingReleases = 'V0' | 'V1';

/**
 * Error for the vesting pallet.
 **/
export type PalletVestingError =
  /**
   * The account given is not vesting.
   **/
  | 'NotVesting'
  /**
   * The account already has `MaxVestingSchedules` count of schedules and thus
   * cannot add another one. Consider merging existing schedules in order to add another.
   **/
  | 'AtMaxVestingSchedules'
  /**
   * Amount being transferred is too low to create a vesting schedule.
   **/
  | 'AmountLow'
  /**
   * An index was out of bounds of the vesting schedules.
   **/
  | 'ScheduleIndexOutOfBounds'
  /**
   * Failed to create a new schedule because some parameter was invalid.
   **/
  | 'InvalidScheduleParams';

export type PalletCollatorSelectionCandidateInfo = { who: AccountId32; deposit: bigint };

export type FrameSupportPalletId = FixedBytes<8>;

/**
 * The `Error` enum of this pallet.
 **/
export type PalletCollatorSelectionError =
  /**
   * The pallet has too many candidates.
   **/
  | 'TooManyCandidates'
  /**
   * Leaving would result in too few candidates.
   **/
  | 'TooFewEligibleCollators'
  /**
   * Account is already a candidate.
   **/
  | 'AlreadyCandidate'
  /**
   * Account is not a candidate.
   **/
  | 'NotCandidate'
  /**
   * There are too many Invulnerables.
   **/
  | 'TooManyInvulnerables'
  /**
   * Account is already an Invulnerable.
   **/
  | 'AlreadyInvulnerable'
  /**
   * Account is not an Invulnerable.
   **/
  | 'NotInvulnerable'
  /**
   * Account has no associated validator ID.
   **/
  | 'NoAssociatedValidatorId'
  /**
   * Validator ID is not yet registered.
   **/
  | 'ValidatorNotRegistered'
  /**
   * Could not insert in the candidate list.
   **/
  | 'InsertToCandidateListFailed'
  /**
   * Could not remove from the candidate list.
   **/
  | 'RemoveFromCandidateListFailed'
  /**
   * New deposit amount would be below the minimum candidacy bond.
   **/
  | 'DepositTooLow'
  /**
   * Could not update the candidate list.
   **/
  | 'UpdateCandidateListFailed'
  /**
   * Deposit amount is too low to take the target's slot in the candidate list.
   **/
  | 'InsufficientBond'
  /**
   * The target account to be replaced in the candidate list is not a candidate.
   **/
  | 'TargetIsNotCandidate'
  /**
   * The updated deposit amount is equal to the amount already reserved.
   **/
  | 'IdenticalDeposit'
  /**
   * Cannot lower candidacy bond while occupying a future collator slot in the list.
   **/
  | 'InvalidUnreserve';

export type SpStakingOffenceOffenceSeverity = Perbill;

export type SpCoreCryptoKeyTypeId = FixedBytes<4>;

/**
 * Error for the session pallet.
 **/
export type PalletSessionError =
  /**
   * Invalid ownership proof.
   **/
  | 'InvalidProof'
  /**
   * No associated validator ID for account.
   **/
  | 'NoAssociatedValidatorId'
  /**
   * Registered duplicate key.
   **/
  | 'DuplicatedKey'
  /**
   * No keys are associated with this account.
   **/
  | 'NoKeys'
  /**
   * Key setting account is not live, so it's impossible to associate keys.
   **/
  | 'NoAccount';

export type SpConsensusSlotsSlot = bigint;

export type CumulusPalletXcmpQueueOutboundChannelDetails = {
  recipient: PolkadotParachainPrimitivesPrimitivesId;
  state: CumulusPalletXcmpQueueOutboundState;
  signalsExist: boolean;
  firstIndex: number;
  lastIndex: number;
};

export type CumulusPalletXcmpQueueOutboundState = 'Ok' | 'Suspended';

export type CumulusPalletXcmpQueueQueueConfigData = {
  suspendThreshold: number;
  dropThreshold: number;
  resumeThreshold: number;
};

/**
 * The `Error` enum of this pallet.
 **/
export type CumulusPalletXcmpQueueError =
  /**
   * Setting the queue config failed since one of its values was invalid.
   **/
  | 'BadQueueConfig'
  /**
   * The execution is already suspended.
   **/
  | 'AlreadySuspended'
  /**
   * The execution is already resumed.
   **/
  | 'AlreadyResumed'
  /**
   * There are too many active outbound channels.
   **/
  | 'TooManyActiveOutboundChannels'
  /**
   * The message is too big.
   **/
  | 'TooBig';

export type PalletXcmQueryStatus =
  | {
      type: 'Pending';
      value: {
        responder: XcmVersionedLocation;
        maybeMatchQuerier?: XcmVersionedLocation | undefined;
        maybeNotify?: [number, number] | undefined;
        timeout: number;
      };
    }
  | { type: 'VersionNotifier'; value: { origin: XcmVersionedLocation; isActive: boolean } }
  | { type: 'Ready'; value: { response: XcmVersionedResponse; at: number } };

export type XcmVersionedResponse =
  | { type: 'V3'; value: XcmV3Response }
  | { type: 'V4'; value: StagingXcmV4Response }
  | { type: 'V5'; value: StagingXcmV5Response };

export type PalletXcmVersionMigrationStage =
  | { type: 'MigrateSupportedVersion' }
  | { type: 'MigrateVersionNotifiers' }
  | { type: 'NotifyCurrentTargets'; value?: Bytes | undefined }
  | { type: 'MigrateAndNotifyOldTargets' };

export type PalletXcmRemoteLockedFungibleRecord = {
  amount: bigint;
  owner: XcmVersionedLocation;
  locker: XcmVersionedLocation;
  consumers: Array<[[], bigint]>;
};

export type PalletXcmAuthorizedAliasesEntry = {
  aliasers: Array<XcmRuntimeApisAuthorizedAliasesOriginAliaser>;
  ticket: FrameSupportTokensFungibleHoldConsideration;
};

export type PalletXcmMaxAuthorizedAliases = {};

export type XcmRuntimeApisAuthorizedAliasesOriginAliaser = {
  location: XcmVersionedLocation;
  expiry?: bigint | undefined;
};

/**
 * The `Error` enum of this pallet.
 **/
export type PalletXcmError =
  /**
   * The desired destination was unreachable, generally because there is a no way of routing
   * to it.
   **/
  | 'Unreachable'
  /**
   * There was some other issue (i.e. not to do with routing) in sending the message.
   * Perhaps a lack of space for buffering the message.
   **/
  | 'SendFailure'
  /**
   * The message execution fails the filter.
   **/
  | 'Filtered'
  /**
   * The message's weight could not be determined.
   **/
  | 'UnweighableMessage'
  /**
   * The destination `Location` provided cannot be inverted.
   **/
  | 'DestinationNotInvertible'
  /**
   * The assets to be sent are empty.
   **/
  | 'Empty'
  /**
   * Could not re-anchor the assets to declare the fees for the destination chain.
   **/
  | 'CannotReanchor'
  /**
   * Too many assets have been attempted for transfer.
   **/
  | 'TooManyAssets'
  /**
   * Origin is invalid for sending.
   **/
  | 'InvalidOrigin'
  /**
   * The version of the `Versioned` value used is not able to be interpreted.
   **/
  | 'BadVersion'
  /**
   * The given location could not be used (e.g. because it cannot be expressed in the
   * desired version of XCM).
   **/
  | 'BadLocation'
  /**
   * The referenced subscription could not be found.
   **/
  | 'NoSubscription'
  /**
   * The location is invalid since it already has a subscription from us.
   **/
  | 'AlreadySubscribed'
  /**
   * Could not check-out the assets for teleportation to the destination chain.
   **/
  | 'CannotCheckOutTeleport'
  /**
   * The owner does not own (all) of the asset that they wish to do the operation on.
   **/
  | 'LowBalance'
  /**
   * The asset owner has too many locks on the asset.
   **/
  | 'TooManyLocks'
  /**
   * The given account is not an identifiable sovereign account for any location.
   **/
  | 'AccountNotSovereign'
  /**
   * The operation required fees to be paid which the initiator could not meet.
   **/
  | 'FeesNotMet'
  /**
   * A remote lock with the corresponding data could not be found.
   **/
  | 'LockNotFound'
  /**
   * The unlock operation cannot succeed because there are still consumers of the lock.
   **/
  | 'InUse'
  /**
   * Invalid asset, reserve chain could not be determined for it.
   **/
  | 'InvalidAssetUnknownReserve'
  /**
   * Invalid asset, do not support remote asset reserves with different fees reserves.
   **/
  | 'InvalidAssetUnsupportedReserve'
  /**
   * Too many assets with different reserve locations have been attempted for transfer.
   **/
  | 'TooManyReserves'
  /**
   * Local XCM execution incomplete.
   **/
  | 'LocalExecutionIncomplete'
  /**
   * Too many locations authorized to alias origin.
   **/
  | 'TooManyAuthorizedAliases'
  /**
   * Expiry block number is in the past.
   **/
  | 'ExpiresInPast'
  /**
   * The alias to remove authorization for was not found.
   **/
  | 'AliasNotFound';

export type BpXcmBridgeHubRouterBridgeState = { deliveryFeeFactor: FixedU128; isCongested: boolean };

export type PalletMessageQueueBookState = {
  begin: number;
  end: number;
  count: number;
  readyNeighbours?: PalletMessageQueueNeighbours | undefined;
  messageCount: bigint;
  size: bigint;
};

export type PalletMessageQueueNeighbours = {
  prev: CumulusPrimitivesCoreAggregateMessageOrigin;
  next: CumulusPrimitivesCoreAggregateMessageOrigin;
};

export type PalletMessageQueuePage = {
  remaining: number;
  remainingSize: number;
  firstIndex: number;
  first: number;
  last: number;
  heap: Bytes;
};

/**
 * The `Error` enum of this pallet.
 **/
export type PalletMessageQueueError =
  /**
   * Page is not reapable because it has items remaining to be processed and is not old
   * enough.
   **/
  | 'NotReapable'
  /**
   * Page to be reaped does not exist.
   **/
  | 'NoPage'
  /**
   * The referenced message could not be found.
   **/
  | 'NoMessage'
  /**
   * The message was already processed and cannot be processed again.
   **/
  | 'AlreadyProcessed'
  /**
   * The message is queued for future execution.
   **/
  | 'Queued'
  /**
   * There is temporarily not enough weight to continue servicing messages.
   **/
  | 'InsufficientWeight'
  /**
   * This message is temporarily unprocessable.
   *
   * Such errors are expected, but not guaranteed, to resolve themselves eventually through
   * retrying.
   **/
  | 'TemporarilyUnprocessable'
  /**
   * The queue is paused and no message can be executed from it.
   *
   * This can change at any time and may resolve in the future by re-trying.
   **/
  | 'QueuePaused'
  /**
   * Another call is in progress and needs to finish before this call can happen.
   **/
  | 'RecursiveDisallowed';

/**
 * The `Error` enum of this pallet.
 **/
export type SnowbridgePalletSystemFrontendError =
  /**
   * Convert versioned location failure
   **/
  | 'UnsupportedLocationVersion'
  /**
   * Check location failure, should start from the dispatch origin as owner
   **/
  | 'InvalidAssetOwner'
  /**
   * Send xcm message failure
   **/
  | 'SendFailure'
  /**
   * Withdraw fee asset failure
   **/
  | 'FeesNotMet'
  /**
   * Convert to reanchored location failure
   **/
  | 'LocationConversionFailed'
  /**
   * Message export is halted
   **/
  | 'Halted'
  /**
   * The desired destination was unreachable, generally because there is a no way of routing
   * to it.
   **/
  | 'Unreachable'
  /**
   * The asset provided for the tip is unsupported.
   **/
  | 'UnsupportedAsset'
  /**
   * Unable to withdraw asset.
   **/
  | 'WithdrawError'
  /**
   * Account could not be converted to a location.
   **/
  | 'InvalidAccount'
  /**
   * Provided tip asset could not be swapped for ether.
   **/
  | 'SwapError'
  /**
   * Ether could not be burned.
   **/
  | 'BurnError'
  /**
   * The tip provided is zero.
   **/
  | 'TipAmountZero';

/**
 * The `Error` enum of this pallet.
 **/
export type PalletUtilityError =
  /**
   * Too many calls batched.
   **/
  'TooManyCalls';

export type PalletMultisigMultisig = {
  when: PalletMultisigTimepoint;
  deposit: bigint;
  depositor: AccountId32;
  approvals: Array<AccountId32>;
};

/**
 * The `Error` enum of this pallet.
 **/
export type PalletMultisigError =
  /**
   * Threshold must be 2 or greater.
   **/
  | 'MinimumThreshold'
  /**
   * Call is already approved by this signatory.
   **/
  | 'AlreadyApproved'
  /**
   * Call doesn't need any (more) approvals.
   **/
  | 'NoApprovalsNeeded'
  /**
   * There are too few signatories in the list.
   **/
  | 'TooFewSignatories'
  /**
   * There are too many signatories in the list.
   **/
  | 'TooManySignatories'
  /**
   * The signatories were provided out of order; they should be ordered.
   **/
  | 'SignatoriesOutOfOrder'
  /**
   * The sender was contained in the other signatories; it shouldn't be.
   **/
  | 'SenderInSignatories'
  /**
   * Multisig operation not found in storage.
   **/
  | 'NotFound'
  /**
   * Only the account that originally created the multisig is able to cancel it or update
   * its deposits.
   **/
  | 'NotOwner'
  /**
   * No timepoint was given, yet the multisig operation is already underway.
   **/
  | 'NoTimepoint'
  /**
   * A different timepoint was given to the multisig operation that is underway.
   **/
  | 'WrongTimepoint'
  /**
   * A timepoint was given, yet no multisig operation is underway.
   **/
  | 'UnexpectedTimepoint'
  /**
   * The maximum weight information provided was too low.
   **/
  | 'MaxWeightTooLow'
  /**
   * The data to be stored is already stored.
   **/
  | 'AlreadyStored';

export type PalletProxyProxyDefinitionProxyType = {
  delegate: AccountId32;
  proxyType: AssetHubWestendRuntimeProxyType;
  delay: number;
};

export type PalletProxyAnnouncement = { real: AccountId32; callHash: H256; height: number };

/**
 * The `Error` enum of this pallet.
 **/
export type PalletProxyError =
  /**
   * There are too many proxies registered or too many announcements pending.
   **/
  | 'TooMany'
  /**
   * Proxy registration not found.
   **/
  | 'NotFound'
  /**
   * Sender is not a proxy of the account to be proxied.
   **/
  | 'NotProxy'
  /**
   * A call which is incompatible with the proxy type's filter was attempted.
   **/
  | 'Unproxyable'
  /**
   * Account is already a proxy.
   **/
  | 'Duplicate'
  /**
   * Call may not be made by proxy because it may escalate its privileges.
   **/
  | 'NoPermission'
  /**
   * Announcement, if made at all, was made too recently.
   **/
  | 'Unannounced'
  /**
   * Cannot add self as proxy.
   **/
  | 'NoSelfProxy';

/**
 * The `Error` enum of this pallet.
 **/
export type PalletIndicesError =
  /**
   * The index was not already assigned.
   **/
  | 'NotAssigned'
  /**
   * The index is assigned to another account.
   **/
  | 'NotOwner'
  /**
   * The index was not available.
   **/
  | 'InUse'
  /**
   * The source and destination accounts are identical.
   **/
  | 'NotTransfer'
  /**
   * The index is permanent and may not be freed/changed.
   **/
  | 'Permanent';

export type PalletAssetsAssetDetails = {
  owner: AccountId32;
  issuer: AccountId32;
  admin: AccountId32;
  freezer: AccountId32;
  supply: bigint;
  deposit: bigint;
  minBalance: bigint;
  isSufficient: boolean;
  accounts: number;
  sufficients: number;
  approvals: number;
  status: PalletAssetsAssetStatus;
};

export type PalletAssetsAssetStatus = 'Live' | 'Frozen' | 'Destroying';

export type PalletAssetsAssetAccount = {
  balance: bigint;
  status: PalletAssetsAccountStatus;
  reason: PalletAssetsExistenceReason;
  extra: [];
};

export type PalletAssetsAccountStatus = 'Liquid' | 'Frozen' | 'Blocked';

export type PalletAssetsExistenceReason =
  | { type: 'Consumer' }
  | { type: 'Sufficient' }
  | { type: 'DepositHeld'; value: bigint }
  | { type: 'DepositRefunded' }
  | { type: 'DepositFrom'; value: [AccountId32, bigint] };

export type PalletAssetsApproval = { amount: bigint; deposit: bigint };

export type PalletAssetsAssetMetadata = {
  deposit: bigint;
  name: Bytes;
  symbol: Bytes;
  decimals: number;
  isFrozen: boolean;
};

/**
 * The `Error` enum of this pallet.
 **/
export type PalletAssetsError =
  /**
   * Account balance must be greater than or equal to the transfer amount.
   **/
  | 'BalanceLow'
  /**
   * The account to alter does not exist.
   **/
  | 'NoAccount'
  /**
   * The signing account has no permission to do the operation.
   **/
  | 'NoPermission'
  /**
   * The given asset ID is unknown.
   **/
  | 'Unknown'
  /**
   * The origin account is frozen.
   **/
  | 'Frozen'
  /**
   * The asset ID is already taken.
   **/
  | 'InUse'
  /**
   * Invalid witness data given.
   **/
  | 'BadWitness'
  /**
   * Minimum balance should be non-zero.
   **/
  | 'MinBalanceZero'
  /**
   * Unable to increment the consumer reference counters on the account. Either no provider
   * reference exists to allow a non-zero balance of a non-self-sufficient asset, or one
   * fewer then the maximum number of consumers has been reached.
   **/
  | 'UnavailableConsumer'
  /**
   * Invalid metadata given.
   **/
  | 'BadMetadata'
  /**
   * No approval exists that would allow the transfer.
   **/
  | 'Unapproved'
  /**
   * The source account would not survive the transfer and it needs to stay alive.
   **/
  | 'WouldDie'
  /**
   * The asset-account already exists.
   **/
  | 'AlreadyExists'
  /**
   * The asset-account doesn't have an associated deposit.
   **/
  | 'NoDeposit'
  /**
   * The operation would result in funds being burned.
   **/
  | 'WouldBurn'
  /**
   * The asset is a live asset and is actively being used. Usually emit for operations such
   * as `start_destroy` which require the asset to be in a destroying state.
   **/
  | 'LiveAsset'
  /**
   * The asset is not live, and likely being destroyed.
   **/
  | 'AssetNotLive'
  /**
   * The asset status is not the expected status.
   **/
  | 'IncorrectStatus'
  /**
   * The asset should be frozen before the given operation.
   **/
  | 'NotFrozen'
  /**
   * Callback action resulted in error
   **/
  | 'CallbackFailed'
  /**
   * The asset ID must be equal to the [`NextAssetId`].
   **/
  | 'BadAssetId'
  /**
   * The asset cannot be destroyed because some accounts for this asset contain freezes.
   **/
  | 'ContainsFreezes'
  /**
   * The asset cannot be destroyed because some accounts for this asset contain holds.
   **/
  | 'ContainsHolds';

export type PalletUniquesCollectionDetails = {
  owner: AccountId32;
  issuer: AccountId32;
  admin: AccountId32;
  freezer: AccountId32;
  totalDeposit: bigint;
  freeHolding: boolean;
  items: number;
  itemMetadatas: number;
  attributes: number;
  isFrozen: boolean;
};

export type PalletUniquesItemDetails = {
  owner: AccountId32;
  approved?: AccountId32 | undefined;
  isFrozen: boolean;
  deposit: bigint;
};

export type PalletUniquesCollectionMetadata = { deposit: bigint; data: Bytes; isFrozen: boolean };

export type PalletUniquesItemMetadata = { deposit: bigint; data: Bytes; isFrozen: boolean };

/**
 * The `Error` enum of this pallet.
 **/
export type PalletUniquesError =
  /**
   * The signing account has no permission to do the operation.
   **/
  | 'NoPermission'
  /**
   * The given item ID is unknown.
   **/
  | 'UnknownCollection'
  /**
   * The item ID has already been used for an item.
   **/
  | 'AlreadyExists'
  /**
   * The owner turned out to be different to what was expected.
   **/
  | 'WrongOwner'
  /**
   * Invalid witness data given.
   **/
  | 'BadWitness'
  /**
   * The item ID is already taken.
   **/
  | 'InUse'
  /**
   * The item or collection is frozen.
   **/
  | 'Frozen'
  /**
   * The delegate turned out to be different to what was expected.
   **/
  | 'WrongDelegate'
  /**
   * There is no delegate approved.
   **/
  | 'NoDelegate'
  /**
   * No approval exists that would allow the transfer.
   **/
  | 'Unapproved'
  /**
   * The named owner has not signed ownership of the collection is acceptable.
   **/
  | 'Unaccepted'
  /**
   * The item is locked.
   **/
  | 'Locked'
  /**
   * All items have been minted.
   **/
  | 'MaxSupplyReached'
  /**
   * The max supply has already been set.
   **/
  | 'MaxSupplyAlreadySet'
  /**
   * The provided max supply is less to the amount of items a collection already has.
   **/
  | 'MaxSupplyTooSmall'
  /**
   * The given item ID is unknown.
   **/
  | 'UnknownItem'
  /**
   * Item is not for sale.
   **/
  | 'NotForSale'
  /**
   * The provided bid is too low.
   **/
  | 'BidTooLow'
  /**
   * No metadata is found.
   **/
  | 'NoMetadata'
  /**
   * Wrong metadata key/value bytes supplied.
   **/
  | 'WrongMetadata'
  /**
   * An attribute is not found.
   **/
  | 'AttributeNotFound'
  /**
   * Wrong attribute key/value bytes supplied.
   **/
  | 'WrongAttribute';

export type PalletNftsCollectionDetails = {
  owner: AccountId32;
  ownerDeposit: bigint;
  items: number;
  itemMetadatas: number;
  itemConfigs: number;
  attributes: number;
};

export type PalletNftsBitFlagsCollectionRole = number;

export type PalletNftsCollectionRole = 'Issuer' | 'Freezer' | 'Admin';

export type PalletNftsItemDetails = {
  owner: AccountId32;
  approvals: Array<[AccountId32, number | undefined]>;
  deposit: PalletNftsItemDeposit;
};

export type PalletNftsItemDeposit = { account: AccountId32; amount: bigint };

export type PalletNftsCollectionMetadata = { deposit: bigint; data: Bytes };

export type PalletNftsItemMetadata = { deposit: PalletNftsItemMetadataDeposit; data: Bytes };

export type PalletNftsItemMetadataDeposit = { account?: AccountId32 | undefined; amount: bigint };

export type PalletNftsAttributeDeposit = { account?: AccountId32 | undefined; amount: bigint };

export type PalletNftsPendingSwap = {
  desiredCollection: number;
  desiredItem?: number | undefined;
  price?: PalletNftsPriceWithDirection | undefined;
  deadline: number;
};

export type PalletNftsBitFlagsPalletFeature = bigint;

export type PalletNftsPalletFeature = 'Trading' | 'Attributes' | 'Approvals' | 'Swaps';

/**
 * The `Error` enum of this pallet.
 **/
export type PalletNftsError =
  /**
   * The signing account has no permission to do the operation.
   **/
  | 'NoPermission'
  /**
   * The given item ID is unknown.
   **/
  | 'UnknownCollection'
  /**
   * The item ID has already been used for an item.
   **/
  | 'AlreadyExists'
  /**
   * The approval had a deadline that expired, so the approval isn't valid anymore.
   **/
  | 'ApprovalExpired'
  /**
   * The owner turned out to be different to what was expected.
   **/
  | 'WrongOwner'
  /**
   * The witness data given does not match the current state of the chain.
   **/
  | 'BadWitness'
  /**
   * Collection ID is already taken.
   **/
  | 'CollectionIdInUse'
  /**
   * Items within that collection are non-transferable.
   **/
  | 'ItemsNonTransferable'
  /**
   * The provided account is not a delegate.
   **/
  | 'NotDelegate'
  /**
   * The delegate turned out to be different to what was expected.
   **/
  | 'WrongDelegate'
  /**
   * No approval exists that would allow the transfer.
   **/
  | 'Unapproved'
  /**
   * The named owner has not signed ownership acceptance of the collection.
   **/
  | 'Unaccepted'
  /**
   * The item is locked (non-transferable).
   **/
  | 'ItemLocked'
  /**
   * Item's attributes are locked.
   **/
  | 'LockedItemAttributes'
  /**
   * Collection's attributes are locked.
   **/
  | 'LockedCollectionAttributes'
  /**
   * Item's metadata is locked.
   **/
  | 'LockedItemMetadata'
  /**
   * Collection's metadata is locked.
   **/
  | 'LockedCollectionMetadata'
  /**
   * All items have been minted.
   **/
  | 'MaxSupplyReached'
  /**
   * The max supply is locked and can't be changed.
   **/
  | 'MaxSupplyLocked'
  /**
   * The provided max supply is less than the number of items a collection already has.
   **/
  | 'MaxSupplyTooSmall'
  /**
   * The given item ID is unknown.
   **/
  | 'UnknownItem'
  /**
   * Swap doesn't exist.
   **/
  | 'UnknownSwap'
  /**
   * The given item has no metadata set.
   **/
  | 'MetadataNotFound'
  /**
   * The provided attribute can't be found.
   **/
  | 'AttributeNotFound'
  /**
   * Item is not for sale.
   **/
  | 'NotForSale'
  /**
   * The provided bid is too low.
   **/
  | 'BidTooLow'
  /**
   * The item has reached its approval limit.
   **/
  | 'ReachedApprovalLimit'
  /**
   * The deadline has already expired.
   **/
  | 'DeadlineExpired'
  /**
   * The duration provided should be less than or equal to `MaxDeadlineDuration`.
   **/
  | 'WrongDuration'
  /**
   * The method is disabled by system settings.
   **/
  | 'MethodDisabled'
  /**
   * The provided setting can't be set.
   **/
  | 'WrongSetting'
  /**
   * Item's config already exists and should be equal to the provided one.
   **/
  | 'InconsistentItemConfig'
  /**
   * Config for a collection or an item can't be found.
   **/
  | 'NoConfig'
  /**
   * Some roles were not cleared.
   **/
  | 'RolesNotCleared'
  /**
   * Mint has not started yet.
   **/
  | 'MintNotStarted'
  /**
   * Mint has already ended.
   **/
  | 'MintEnded'
  /**
   * The provided Item was already used for claiming.
   **/
  | 'AlreadyClaimed'
  /**
   * The provided data is incorrect.
   **/
  | 'IncorrectData'
  /**
   * The extrinsic was sent by the wrong origin.
   **/
  | 'WrongOrigin'
  /**
   * The provided signature is incorrect.
   **/
  | 'WrongSignature'
  /**
   * The provided metadata might be too long.
   **/
  | 'IncorrectMetadata'
  /**
   * Can't set more attributes per one call.
   **/
  | 'MaxAttributesLimitReached'
  /**
   * The provided namespace isn't supported in this call.
   **/
  | 'WrongNamespace'
  /**
   * Can't delete non-empty collections.
   **/
  | 'CollectionNotEmpty'
  /**
   * The witness data should be provided.
   **/
  | 'WitnessRequired';

export type PalletNftFractionalizationDetails = {
  asset: number;
  fractions: bigint;
  deposit: bigint;
  assetCreator: AccountId32;
};

/**
 * The `Error` enum of this pallet.
 **/
export type PalletNftFractionalizationError =
  /**
   * Asset ID does not correspond to locked NFT.
   **/
  | 'IncorrectAssetId'
  /**
   * The signing account has no permission to do the operation.
   **/
  | 'NoPermission'
  /**
   * NFT doesn't exist.
   **/
  | 'NftNotFound'
  /**
   * NFT has not yet been fractionalised.
   **/
  | 'NftNotFractionalized';

export type PalletAssetConversionPoolInfo = { lpToken: number };

/**
 * The `Error` enum of this pallet.
 **/
export type PalletAssetConversionError =
  /**
   * Provided asset pair is not supported for pool.
   **/
  | 'InvalidAssetPair'
  /**
   * Pool already exists.
   **/
  | 'PoolExists'
  /**
   * Desired amount can't be zero.
   **/
  | 'WrongDesiredAmount'
  /**
   * Provided amount should be greater than or equal to the existential deposit/asset's
   * minimal amount.
   **/
  | 'AmountOneLessThanMinimal'
  /**
   * Provided amount should be greater than or equal to the existential deposit/asset's
   * minimal amount.
   **/
  | 'AmountTwoLessThanMinimal'
  /**
   * Reserve needs to always be greater than or equal to the existential deposit/asset's
   * minimal amount.
   **/
  | 'ReserveLeftLessThanMinimal'
  /**
   * Desired amount can't be equal to the pool reserve.
   **/
  | 'AmountOutTooHigh'
  /**
   * The pool doesn't exist.
   **/
  | 'PoolNotFound'
  /**
   * An overflow happened.
   **/
  | 'Overflow'
  /**
   * The minimal amount requirement for the first token in the pair wasn't met.
   **/
  | 'AssetOneDepositDidNotMeetMinimum'
  /**
   * The minimal amount requirement for the second token in the pair wasn't met.
   **/
  | 'AssetTwoDepositDidNotMeetMinimum'
  /**
   * The minimal amount requirement for the first token in the pair wasn't met.
   **/
  | 'AssetOneWithdrawalDidNotMeetMinimum'
  /**
   * The minimal amount requirement for the second token in the pair wasn't met.
   **/
  | 'AssetTwoWithdrawalDidNotMeetMinimum'
  /**
   * Optimal calculated amount is less than desired.
   **/
  | 'OptimalAmountLessThanDesired'
  /**
   * Insufficient liquidity minted.
   **/
  | 'InsufficientLiquidityMinted'
  /**
   * Requested liquidity can't be zero.
   **/
  | 'ZeroLiquidity'
  /**
   * Amount can't be zero.
   **/
  | 'ZeroAmount'
  /**
   * Calculated amount out is less than provided minimum amount.
   **/
  | 'ProvidedMinimumNotSufficientForSwap'
  /**
   * Provided maximum amount is not sufficient for swap.
   **/
  | 'ProvidedMaximumNotSufficientForSwap'
  /**
   * The provided path must consists of 2 assets at least.
   **/
  | 'InvalidPath'
  /**
   * The provided path must consists of unique assets.
   **/
  | 'NonUniquePath'
  /**
   * It was not possible to get or increment the Id of the pool.
   **/
  | 'IncorrectPoolAssetId'
  /**
   * The destination account cannot exist with the swapped funds.
   **/
  | 'BelowMinimum';

/**
 * The `Error` enum of this pallet.
 **/
export type PalletAssetsFreezerError =
  /**
   * Number of freezes on an account would exceed `MaxFreezes`.
   **/
  'TooManyFreezes';

export type PalletReviveWasmCodeInfo = {
  owner: AccountId32;
  deposit: bigint;
  refcount: bigint;
  codeLen: number;
  behaviourVersion: number;
};

export type PalletReviveStorageContractInfo = {
  trieId: Bytes;
  codeHash: H256;
  storageBytes: number;
  storageItems: number;
  storageByteDeposit: bigint;
  storageItemDeposit: bigint;
  storageBaseDeposit: bigint;
  immutableDataLen: number;
};

export type PalletReviveStorageDeletionQueueManager = { insertCounter: number; deleteCounter: number };

/**
 * The `Error` enum of this pallet.
 **/
export type PalletReviveError =
  /**
   * Invalid schedule supplied, e.g. with zero weight of a basic operation.
   **/
  | 'InvalidSchedule'
  /**
   * Invalid combination of flags supplied to `seal_call` or `seal_delegate_call`.
   **/
  | 'InvalidCallFlags'
  /**
   * The executed contract exhausted its gas limit.
   **/
  | 'OutOfGas'
  /**
   * Performing the requested transfer failed. Probably because there isn't enough
   * free balance in the sender's account.
   **/
  | 'TransferFailed'
  /**
   * Performing a call was denied because the calling depth reached the limit
   * of what is specified in the schedule.
   **/
  | 'MaxCallDepthReached'
  /**
   * No contract was found at the specified address.
   **/
  | 'ContractNotFound'
  /**
   * No code could be found at the supplied code hash.
   **/
  | 'CodeNotFound'
  /**
   * No code info could be found at the supplied code hash.
   **/
  | 'CodeInfoNotFound'
  /**
   * A buffer outside of sandbox memory was passed to a contract API function.
   **/
  | 'OutOfBounds'
  /**
   * Input passed to a contract API function failed to decode as expected type.
   **/
  | 'DecodingFailed'
  /**
   * Contract trapped during execution.
   **/
  | 'ContractTrapped'
  /**
   * The size defined in `T::MaxValueSize` was exceeded.
   **/
  | 'ValueTooLarge'
  /**
   * Termination of a contract is not allowed while the contract is already
   * on the call stack. Can be triggered by `seal_terminate`.
   **/
  | 'TerminatedWhileReentrant'
  /**
   * `seal_call` forwarded this contracts input. It therefore is no longer available.
   **/
  | 'InputForwarded'
  /**
   * The amount of topics passed to `seal_deposit_events` exceeds the limit.
   **/
  | 'TooManyTopics'
  /**
   * Failed to decode the XCM program.
   **/
  | 'XcmDecodeFailed'
  /**
   * A contract with the same AccountId already exists.
   **/
  | 'DuplicateContract'
  /**
   * A contract self destructed in its constructor.
   *
   * This can be triggered by a call to `seal_terminate`.
   **/
  | 'TerminatedInConstructor'
  /**
   * A call tried to invoke a contract that is flagged as non-reentrant.
   **/
  | 'ReentranceDenied'
  /**
   * A contract called into the runtime which then called back into this pallet.
   **/
  | 'ReenteredPallet'
  /**
   * A contract attempted to invoke a state modifying API while being in read-only mode.
   **/
  | 'StateChangeDenied'
  /**
   * Origin doesn't have enough balance to pay the required storage deposits.
   **/
  | 'StorageDepositNotEnoughFunds'
  /**
   * More storage was created than allowed by the storage deposit limit.
   **/
  | 'StorageDepositLimitExhausted'
  /**
   * Code removal was denied because the code is still in use by at least one contract.
   **/
  | 'CodeInUse'
  /**
   * The contract ran to completion but decided to revert its storage changes.
   * Please note that this error is only returned from extrinsics. When called directly
   * or via RPC an `Ok` will be returned. In this case the caller needs to inspect the flags
   * to determine whether a reversion has taken place.
   **/
  | 'ContractReverted'
  /**
   * The contract failed to compile or is missing the correct entry points.
   *
   * A more detailed error can be found on the node console if debug messages are enabled
   * by supplying `-lruntime::revive=debug`.
   **/
  | 'CodeRejected'
  /**
   * The code blob supplied is larger than [`limits::code::BLOB_BYTES`].
   **/
  | 'BlobTooLarge'
  /**
   * The static memory consumption of the blob will be larger than
   * [`limits::code::STATIC_MEMORY_BYTES`].
   **/
  | 'StaticMemoryTooLarge'
  /**
   * The program contains a basic block that is larger than allowed.
   **/
  | 'BasicBlockTooLarge'
  /**
   * The program contains an invalid instruction.
   **/
  | 'InvalidInstruction'
  /**
   * The contract has reached its maximum number of delegate dependencies.
   **/
  | 'MaxDelegateDependenciesReached'
  /**
   * The dependency was not found in the contract's delegate dependencies.
   **/
  | 'DelegateDependencyNotFound'
  /**
   * The contract already depends on the given delegate dependency.
   **/
  | 'DelegateDependencyAlreadyExists'
  /**
   * Can not add a delegate dependency to the code hash of the contract itself.
   **/
  | 'CannotAddSelfAsDelegateDependency'
  /**
   * Can not add more data to transient storage.
   **/
  | 'OutOfTransientStorage'
  /**
   * The contract tried to call a syscall which does not exist (at its current api level).
   **/
  | 'InvalidSyscall'
  /**
   * Invalid storage flags were passed to one of the storage syscalls.
   **/
  | 'InvalidStorageFlags'
  /**
   * PolkaVM failed during code execution. Probably due to a malformed program.
   **/
  | 'ExecutionFailed'
  /**
   * Failed to convert a U256 to a Balance.
   **/
  | 'BalanceConversionFailed'
  /**
   * Failed to convert an EVM balance to a native balance.
   **/
  | 'DecimalPrecisionLoss'
  /**
   * Immutable data can only be set during deploys and only be read during calls.
   * Additionally, it is only valid to set the data once and it must not be empty.
   **/
  | 'InvalidImmutableAccess'
  /**
   * An `AccountID32` account tried to interact with the pallet without having a mapping.
   *
   * Call [`Pallet::map_account`] in order to create a mapping for the account.
   **/
  | 'AccountUnmapped'
  /**
   * Tried to map an account that is already mapped.
   **/
  | 'AccountAlreadyMapped'
  /**
   * The transaction used to dry-run a contract is invalid.
   **/
  | 'InvalidGenericTransaction'
  /**
   * The refcount of a code either over or underflowed.
   **/
  | 'RefcountOverOrUnderflow'
  /**
   * Unsupported precompile address
   **/
  | 'UnsupportedPrecompileAddress';

export type PalletAssetRewardsPoolStakerInfo = { amount: bigint; rewards: bigint; rewardPerTokenPaid: bigint };

export type PalletAssetRewardsPoolInfo = {
  stakedAssetId: StagingXcmV5Location;
  rewardAssetId: StagingXcmV5Location;
  rewardRatePerBlock: bigint;
  expiryBlock: number;
  admin: AccountId32;
  totalTokensStaked: bigint;
  rewardPerTokenStored: bigint;
  lastUpdateBlock: number;
  account: AccountId32;
};

/**
 * The `Error` enum of this pallet.
 **/
export type PalletAssetRewardsError =
  /**
   * The staker does not have enough tokens to perform the operation.
   **/
  | 'NotEnoughTokens'
  /**
   * An operation was attempted on a non-existent pool.
   **/
  | 'NonExistentPool'
  /**
   * An operation was attempted for a non-existent staker.
   **/
  | 'NonExistentStaker'
  /**
   * An operation was attempted with a non-existent asset.
   **/
  | 'NonExistentAsset'
  /**
   * There was an error converting a block number.
   **/
  | 'BlockNumberConversionError'
  /**
   * The expiry block must be in the future.
   **/
  | 'ExpiryBlockMustBeInTheFuture'
  /**
   * Insufficient funds to create the freeze.
   **/
  | 'InsufficientFunds'
  /**
   * The expiry block can be only extended.
   **/
  | 'ExpiryCut'
  /**
   * The reward rate per block can be only increased.
   **/
  | 'RewardRateCut'
  /**
   * The pool still has staked tokens or rewards.
   **/
  | 'NonEmptyPool';

export type PalletStakingAsyncLedgerStakingLedger = {
  stash: AccountId32;
  total: bigint;
  active: bigint;
  unlocking: Array<PalletStakingAsyncLedgerUnlockChunk>;
};

export type PalletStakingAsyncActiveEraInfo = { index: number; start?: bigint | undefined };

export type PalletStakingAsyncPalletBoundedExposurePage = SpStakingExposurePage;

export type PalletStakingAsyncSlashingOffenceRecord = {
  reporter?: AccountId32 | undefined;
  reportedEra: number;
  exposurePage: number;
  slashFraction: Perbill;
  priorSlashFraction: Perbill;
};

export type PalletStakingAsyncSnapshotStatus =
  | { type: 'Ongoing'; value: AccountId32 }
  | { type: 'Consumed' }
  | { type: 'Waiting' };

/**
 * The `Error` enum of this pallet.
 **/
export type PalletStakingAsyncPalletError =
  /**
   * Not a controller account.
   **/
  | 'NotController'
  /**
   * Not a stash account.
   **/
  | 'NotStash'
  /**
   * Stash is already bonded.
   **/
  | 'AlreadyBonded'
  /**
   * Controller is already paired.
   **/
  | 'AlreadyPaired'
  /**
   * Targets cannot be empty.
   **/
  | 'EmptyTargets'
  /**
   * Duplicate index.
   **/
  | 'DuplicateIndex'
  /**
   * Slash record not found.
   **/
  | 'InvalidSlashRecord'
  /**
   * Cannot have a validator or nominator role, with value less than the minimum defined by
   * governance (see `MinValidatorBond` and `MinNominatorBond`). If unbonding is the
   * intention, `chill` first to remove one's role as validator/nominator.
   **/
  | 'InsufficientBond'
  /**
   * Can not schedule more unlock chunks.
   **/
  | 'NoMoreChunks'
  /**
   * Can not rebond without unlocking chunks.
   **/
  | 'NoUnlockChunk'
  /**
   * Attempting to target a stash that still has funds.
   **/
  | 'FundedTarget'
  /**
   * Invalid era to reward.
   **/
  | 'InvalidEraToReward'
  /**
   * Invalid number of nominations.
   **/
  | 'InvalidNumberOfNominations'
  /**
   * Rewards for this era have already been claimed for this validator.
   **/
  | 'AlreadyClaimed'
  /**
   * No nominators exist on this page.
   **/
  | 'InvalidPage'
  /**
   * Incorrect previous history depth input provided.
   **/
  | 'IncorrectHistoryDepth'
  /**
   * Internal state has become somehow corrupted and the operation cannot continue.
   **/
  | 'BadState'
  /**
   * Too many nomination targets supplied.
   **/
  | 'TooManyTargets'
  /**
   * A nomination target was supplied that was blocked or otherwise not a validator.
   **/
  | 'BadTarget'
  /**
   * The user has enough bond and thus cannot be chilled forcefully by an external person.
   **/
  | 'CannotChillOther'
  /**
   * There are too many nominators in the system. Governance needs to adjust the staking
   * settings to keep things safe for the runtime.
   **/
  | 'TooManyNominators'
  /**
   * There are too many validator candidates in the system. Governance needs to adjust the
   * staking settings to keep things safe for the runtime.
   **/
  | 'TooManyValidators'
  /**
   * Commission is too low. Must be at least `MinCommission`.
   **/
  | 'CommissionTooLow'
  /**
   * Some bound is not met.
   **/
  | 'BoundNotMet'
  /**
   * Used when attempting to use deprecated controller account logic.
   **/
  | 'ControllerDeprecated'
  /**
   * Cannot reset a ledger.
   **/
  | 'CannotRestoreLedger'
  /**
   * Provided reward destination is not allowed.
   **/
  | 'RewardDestinationRestricted'
  /**
   * Not enough funds available to withdraw.
   **/
  | 'NotEnoughFunds'
  /**
   * Operation not allowed for virtual stakers.
   **/
  | 'VirtualStakerNotAllowed'
  /**
   * Stash could not be reaped as other pallet might depend on it.
   **/
  | 'CannotReapStash'
  /**
   * The stake of this account is already migrated to `Fungible` holds.
   **/
  | 'AlreadyMigrated'
  /**
   * Era not yet started.
   **/
  | 'EraNotStarted'
  /**
   * Account is restricted from participation in staking. This may happen if the account is
   * staking in another way already, such as via pool.
   **/
  | 'Restricted';

export type PalletNominationPoolsRewardPool = {
  lastRecordedRewardCounter: FixedU128;
  lastRecordedTotalPayouts: bigint;
  totalRewardsClaimed: bigint;
  totalCommissionPending: bigint;
  totalCommissionClaimed: bigint;
};

export type PalletNominationPoolsSubPools = {
  noEra: PalletNominationPoolsUnbondPool;
  withEra: Array<[number, PalletNominationPoolsUnbondPool]>;
};

export type PalletNominationPoolsUnbondPool = { points: bigint; balance: bigint };

/**
 * The `Error` enum of this pallet.
 **/
export type PalletNominationPoolsError =
  /**
   * A (bonded) pool id does not exist.
   **/
  | { name: 'PoolNotFound' }
  /**
   * An account is not a member.
   **/
  | { name: 'PoolMemberNotFound' }
  /**
   * A reward pool does not exist. In all cases this is a system logic error.
   **/
  | { name: 'RewardPoolNotFound' }
  /**
   * A sub pool does not exist.
   **/
  | { name: 'SubPoolsNotFound' }
  /**
   * An account is already delegating in another pool. An account may only belong to one
   * pool at a time.
   **/
  | { name: 'AccountBelongsToOtherPool' }
  /**
   * The member is fully unbonded (and thus cannot access the bonded and reward pool
   * anymore to, for example, collect rewards).
   **/
  | { name: 'FullyUnbonding' }
  /**
   * The member cannot unbond further chunks due to reaching the limit.
   **/
  | { name: 'MaxUnbondingLimit' }
  /**
   * None of the funds can be withdrawn yet because the bonding duration has not passed.
   **/
  | { name: 'CannotWithdrawAny' }
  /**
   * The amount does not meet the minimum bond to either join or create a pool.
   *
   * The depositor can never unbond to a value less than `Pallet::depositor_min_bond`. The
   * caller does not have nominating permissions for the pool. Members can never unbond to a
   * value below `MinJoinBond`.
   **/
  | { name: 'MinimumBondNotMet' }
  /**
   * The transaction could not be executed due to overflow risk for the pool.
   **/
  | { name: 'OverflowRisk' }
  /**
   * A pool must be in [`PoolState::Destroying`] in order for the depositor to unbond or for
   * other members to be permissionlessly unbonded.
   **/
  | { name: 'NotDestroying' }
  /**
   * The caller does not have nominating permissions for the pool.
   **/
  | { name: 'NotNominator' }
  /**
   * Either a) the caller cannot make a valid kick or b) the pool is not destroying.
   **/
  | { name: 'NotKickerOrDestroying' }
  /**
   * The pool is not open to join
   **/
  | { name: 'NotOpen' }
  /**
   * The system is maxed out on pools.
   **/
  | { name: 'MaxPools' }
  /**
   * Too many members in the pool or system.
   **/
  | { name: 'MaxPoolMembers' }
  /**
   * The pools state cannot be changed.
   **/
  | { name: 'CanNotChangeState' }
  /**
   * The caller does not have adequate permissions.
   **/
  | { name: 'DoesNotHavePermission' }
  /**
   * Metadata exceeds [`Config::MaxMetadataLen`]
   **/
  | { name: 'MetadataExceedsMaxLen' }
  /**
   * Some error occurred that should never happen. This should be reported to the
   * maintainers.
   **/
  | { name: 'Defensive'; data: PalletNominationPoolsDefensiveError }
  /**
   * Partial unbonding now allowed permissionlessly.
   **/
  | { name: 'PartialUnbondNotAllowedPermissionlessly' }
  /**
   * The pool's max commission cannot be set higher than the existing value.
   **/
  | { name: 'MaxCommissionRestricted' }
  /**
   * The supplied commission exceeds the max allowed commission.
   **/
  | { name: 'CommissionExceedsMaximum' }
  /**
   * The supplied commission exceeds global maximum commission.
   **/
  | { name: 'CommissionExceedsGlobalMaximum' }
  /**
   * Not enough blocks have surpassed since the last commission update.
   **/
  | { name: 'CommissionChangeThrottled' }
  /**
   * The submitted changes to commission change rate are not allowed.
   **/
  | { name: 'CommissionChangeRateNotAllowed' }
  /**
   * There is no pending commission to claim.
   **/
  | { name: 'NoPendingCommission' }
  /**
   * No commission current has been set.
   **/
  | { name: 'NoCommissionCurrentSet' }
  /**
   * Pool id currently in use.
   **/
  | { name: 'PoolIdInUse' }
  /**
   * Pool id provided is not correct/usable.
   **/
  | { name: 'InvalidPoolId' }
  /**
   * Bonding extra is restricted to the exact pending reward amount.
   **/
  | { name: 'BondExtraRestricted' }
  /**
   * No imbalance in the ED deposit for the pool.
   **/
  | { name: 'NothingToAdjust' }
  /**
   * No slash pending that can be applied to the member.
   **/
  | { name: 'NothingToSlash' }
  /**
   * The slash amount is too low to be applied.
   **/
  | { name: 'SlashTooLow' }
  /**
   * The pool or member delegation has already migrated to delegate stake.
   **/
  | { name: 'AlreadyMigrated' }
  /**
   * The pool or member delegation has not migrated yet to delegate stake.
   **/
  | { name: 'NotMigrated' }
  /**
   * This call is not allowed in the current state of the pallet.
   **/
  | { name: 'NotSupported' }
  /**
   * Account is restricted from participation in pools. This may happen if the account is
   * staking in another way already.
   **/
  | { name: 'Restricted' };

export type PalletNominationPoolsDefensiveError =
  | 'NotEnoughSpaceInUnbondPool'
  | 'PoolNotFound'
  | 'RewardPoolNotFound'
  | 'SubPoolsNotFound'
  | 'BondedStashKilledPrematurely'
  | 'DelegationUnsupported'
  | 'SlashNotApplied';

export type PalletFastUnstakeUnstakeRequest = { stashes: Array<[AccountId32, bigint]>; checked: Array<number> };

/**
 * The `Error` enum of this pallet.
 **/
export type PalletFastUnstakeError =
  /**
   * The provided Controller account was not found.
   *
   * This means that the given account is not bonded.
   **/
  | 'NotController'
  /**
   * The bonded account has already been queued.
   **/
  | 'AlreadyQueued'
  /**
   * The bonded account has active unlocking chunks.
   **/
  | 'NotFullyBonded'
  /**
   * The provided un-staker is not in the `Queue`.
   **/
  | 'NotQueued'
  /**
   * The provided un-staker is already in Head, and cannot deregister.
   **/
  | 'AlreadyHead'
  /**
   * The call is not allowed at this point because the pallet is not active.
   **/
  | 'CallNotAllowed';

export type PalletBagsListListNode = {
  id: AccountId32;
  prev?: AccountId32 | undefined;
  next?: AccountId32 | undefined;
  bagUpper: bigint;
  score: bigint;
};

export type PalletBagsListListBag = { head?: AccountId32 | undefined; tail?: AccountId32 | undefined };

/**
 * The `Error` enum of this pallet.
 **/
export type PalletBagsListError =
  /**
   * A error in the list interface implementation.
   **/
  | { name: 'List'; data: PalletBagsListListListError }
  /**
   * Could not update a node, because the pallet is locked.
   **/
  | { name: 'Locked' };

export type PalletBagsListListListError = 'Duplicate' | 'NotHeavier' | 'NotInSameBag' | 'NodeNotFound' | 'Locked';

export type PalletDelegatedStakingDelegation = { agent: AccountId32; amount: bigint };

export type PalletDelegatedStakingAgentLedger = {
  payee: AccountId32;
  totalDelegated: bigint;
  unclaimedWithdrawals: bigint;
  pendingSlash: bigint;
};

/**
 * The `Error` enum of this pallet.
 **/
export type PalletDelegatedStakingError =
  /**
   * The account cannot perform this operation.
   **/
  | 'NotAllowed'
  /**
   * An existing staker cannot perform this action.
   **/
  | 'AlreadyStaking'
  /**
   * Reward Destination cannot be same as `Agent` account.
   **/
  | 'InvalidRewardDestination'
  /**
   * Delegation conditions are not met.
   *
   * Possible issues are
   * 1) Cannot delegate to self,
   * 2) Cannot delegate to multiple delegates.
   **/
  | 'InvalidDelegation'
  /**
   * The account does not have enough funds to perform the operation.
   **/
  | 'NotEnoughFunds'
  /**
   * Not an existing `Agent` account.
   **/
  | 'NotAgent'
  /**
   * Not a Delegator account.
   **/
  | 'NotDelegator'
  /**
   * Some corruption in internal state.
   **/
  | 'BadState'
  /**
   * Unapplied pending slash restricts operation on `Agent`.
   **/
  | 'UnappliedSlash'
  /**
   * `Agent` has no pending slash to be applied.
   **/
  | 'NothingToSlash'
  /**
   * Failed to withdraw amount from Core Staking.
   **/
  | 'WithdrawFailed'
  /**
   * Operation not supported by this pallet.
   **/
  | 'NotSupported';

/**
 * The `Error` enum of this pallet.
 **/
export type PalletStakingAsyncRcClientError =
  /**
   * The session report was not valid, due to a bad end index.
   **/
  'SessionIndexNotValid';

/**
 * Error of the pallet that can be returned in response to dispatches.
 **/
export type PalletElectionProviderMultiBlockError =
  /**
   * Triggering the `Fallback` failed.
   **/
  | 'Fallback'
  /**
   * Unexpected phase
   **/
  | 'UnexpectedPhase'
  /**
   * Snapshot was unavailable.
   **/
  | 'Snapshot';

export type PalletElectionProviderMultiBlockVerifierImplsValidSolution = 'X' | 'Y';

export type PalletElectionProviderMultiBlockVerifierImplsPartialBackings = { total: bigint; backers: number };

export type PalletElectionProviderMultiBlockVerifierImplsStatus =
  | { type: 'Ongoing'; value: number }
  | { type: 'Nothing' };

export type PalletElectionProviderMultiBlockSignedSubmissionMetadata = {
  deposit: bigint;
  fee: bigint;
  reward: bigint;
  claimedScore: SpNposElectionsElectionScore;
  pages: Array<boolean>;
};

/**
 * The `Error` enum of this pallet.
 **/
export type PalletElectionProviderMultiBlockSignedPalletError =
  /**
   * The phase is not signed.
   **/
  | 'PhaseNotSigned'
  /**
   * The submission is a duplicate.
   **/
  | 'Duplicate'
  /**
   * The queue is full.
   **/
  | 'QueueFull'
  /**
   * The page index is out of bounds.
   **/
  | 'BadPageIndex'
  /**
   * The account is not registered.
   **/
  | 'NotRegistered'
  /**
   * No submission found.
   **/
  | 'NoSubmission'
  /**
   * Round is not yet over.
   **/
  | 'RoundNotOver'
  /**
   * Bad witness data provided.
   **/
  | 'BadWitnessData';

/**
 * The `Error` enum of this pallet.
 **/
export type PalletConvictionVotingError =
  /**
   * Poll is not ongoing.
   **/
  | 'NotOngoing'
  /**
   * The given account did not vote on the poll.
   **/
  | 'NotVoter'
  /**
   * The actor has no permission to conduct the action.
   **/
  | 'NoPermission'
  /**
   * The actor has no permission to conduct the action right now but will do in the future.
   **/
  | 'NoPermissionYet'
  /**
   * The account is already delegating.
   **/
  | 'AlreadyDelegating'
  /**
   * The account currently has votes attached to it and the operation cannot succeed until
   * these are removed through `remove_vote`.
   **/
  | 'AlreadyVoting'
  /**
   * Too high a balance was provided that the account cannot afford.
   **/
  | 'InsufficientFunds'
  /**
   * The account is not currently delegating.
   **/
  | 'NotDelegating'
  /**
   * Delegation to oneself makes no sense.
   **/
  | 'Nonsense'
  /**
   * Maximum number of votes reached.
   **/
  | 'MaxVotesReached'
  /**
   * The class must be supplied since it is not easily determinable from the state.
   **/
  | 'ClassNeeded'
  /**
   * The class ID supplied is invalid.
   **/
  | 'BadClass';

export type PalletReferendaReferendumInfoOriginCaller =
  | { type: 'Ongoing'; value: PalletReferendaReferendumStatusOriginCaller }
  | { type: 'Approved'; value: [number, PalletReferendaDeposit | undefined, PalletReferendaDeposit | undefined] }
  | { type: 'Rejected'; value: [number, PalletReferendaDeposit | undefined, PalletReferendaDeposit | undefined] }
  | { type: 'Cancelled'; value: [number, PalletReferendaDeposit | undefined, PalletReferendaDeposit | undefined] }
  | { type: 'TimedOut'; value: [number, PalletReferendaDeposit | undefined, PalletReferendaDeposit | undefined] }
  | { type: 'Killed'; value: number };

export type PalletReferendaReferendumStatusOriginCaller = {
  track: number;
  origin: AssetHubWestendRuntimeOriginCaller;
  proposal: FrameSupportPreimagesBounded;
  enactment: FrameSupportScheduleDispatchTime;
  submitted: number;
  submissionDeposit: PalletReferendaDeposit;
  decisionDeposit?: PalletReferendaDeposit | undefined;
  deciding?: PalletReferendaDecidingStatus | undefined;
  tally: PalletConvictionVotingTally;
  inQueue: boolean;
  alarm?: [number, [number, number]] | undefined;
};

export type PalletReferendaTrackDetails = {
  name: string;
  maxDeciding: number;
  decisionDeposit: bigint;
  preparePeriod: number;
  decisionPeriod: number;
  confirmPeriod: number;
  minEnactmentPeriod: number;
  minApproval: PalletReferendaCurve;
  minSupport: PalletReferendaCurve;
};

export type PalletReferendaCurve =
  | { type: 'LinearDecreasing'; value: { length: Perbill; floor: Perbill; ceil: Perbill } }
  | { type: 'SteppedDecreasing'; value: { begin: Perbill; end: Perbill; step: Perbill; period: Perbill } }
  | { type: 'Reciprocal'; value: { factor: FixedI64; xOffset: FixedI64; yOffset: FixedI64 } };

/**
 * The `Error` enum of this pallet.
 **/
export type PalletReferendaError =
  /**
   * Referendum is not ongoing.
   **/
  | 'NotOngoing'
  /**
   * Referendum's decision deposit is already paid.
   **/
  | 'HasDeposit'
  /**
   * The track identifier given was invalid.
   **/
  | 'BadTrack'
  /**
   * There are already a full complement of referenda in progress for this track.
   **/
  | 'Full'
  /**
   * The queue of the track is empty.
   **/
  | 'QueueEmpty'
  /**
   * The referendum index provided is invalid in this context.
   **/
  | 'BadReferendum'
  /**
   * There was nothing to do in the advancement.
   **/
  | 'NothingToDo'
  /**
   * No track exists for the proposal origin.
   **/
  | 'NoTrack'
  /**
   * Any deposit cannot be refunded until after the decision is over.
   **/
  | 'Unfinished'
  /**
   * The deposit refunder is not the depositor.
   **/
  | 'NoPermission'
  /**
   * The deposit cannot be refunded since none was made.
   **/
  | 'NoDeposit'
  /**
   * The referendum status is invalid for this operation.
   **/
  | 'BadStatus'
  /**
   * The preimage does not exist.
   **/
  | 'PreimageNotExist'
  /**
   * The preimage is stored with a different length than the one provided.
   **/
  | 'PreimageStoredWithDifferentLength';

/**
 * The `Error` enum of this pallet.
 **/
export type PalletWhitelistError =
  /**
   * The preimage of the call hash could not be loaded.
   **/
  | 'UnavailablePreImage'
  /**
   * The call could not be decoded.
   **/
  | 'UndecodableCall'
  /**
   * The weight of the decoded call was higher than the witness.
   **/
  | 'InvalidCallWeightWitness'
  /**
   * The call was not whitelisted.
   **/
  | 'CallIsNotWhitelisted'
  /**
   * The call was already whitelisted; No-Op.
   **/
  | 'CallAlreadyWhitelisted';

export type PalletTreasuryProposal = { proposer: AccountId32; value: bigint; beneficiary: AccountId32; bond: bigint };

export type PalletTreasurySpendStatus = {
  assetKind: PolkadotRuntimeCommonImplsVersionedLocatableAsset;
  amount: bigint;
  beneficiary: XcmVersionedLocation;
  validFrom: number;
  expireAt: number;
  status: PalletTreasuryPaymentState;
};

export type PalletTreasuryPaymentState =
  | { type: 'Pending' }
  | { type: 'Attempted'; value: { id: bigint } }
  | { type: 'Failed' };

/**
 * Error for the treasury pallet.
 **/
export type PalletTreasuryError =
  /**
   * No proposal, bounty or spend at that index.
   **/
  | 'InvalidIndex'
  /**
   * Too many approvals in the queue.
   **/
  | 'TooManyApprovals'
  /**
   * The spend origin is valid but the amount it is allowed to spend is lower than the
   * amount to be spent.
   **/
  | 'InsufficientPermission'
  /**
   * Proposal has not been approved.
   **/
  | 'ProposalNotApproved'
  /**
   * The balance of the asset kind is not convertible to the balance of the native asset.
   **/
  | 'FailedToConvertBalance'
  /**
   * The spend has expired and cannot be claimed.
   **/
  | 'SpendExpired'
  /**
   * The spend is not yet eligible for payout.
   **/
  | 'EarlyPayout'
  /**
   * The payment has already been attempted.
   **/
  | 'AlreadyAttempted'
  /**
   * There was some issue with the mechanism of payment.
   **/
  | 'PayoutError'
  /**
   * The payout was not yet attempted/claimed.
   **/
  | 'NotAttempted'
  /**
   * The payment has neither failed nor succeeded yet.
   **/
  | 'Inconclusive';

/**
 * The `Error` enum of this pallet.
 **/
export type PalletAssetRateError =
  /**
   * The given asset ID is unknown.
   **/
  | 'UnknownAssetKind'
  /**
   * The given asset ID already has an assigned conversion rate and cannot be re-created.
   **/
  | 'AlreadyExists'
  /**
   * Overflow ocurred when calculating the inverse rate.
   **/
  | 'Overflow';

/**
 * The `Error` enum of this pallet.
 **/
export type PalletAssetConversionOpsError =
  /**
   * Provided asset pair is not supported for pool.
   **/
  | 'InvalidAssetPair'
  /**
   * The pool doesn't exist.
   **/
  | 'PoolNotFound'
  /**
   * Pool's balance cannot be zero.
   **/
  | 'ZeroBalance'
  /**
   * Indicates a partial transfer of balance to the new account during a migration.
   **/
  | 'PartialTransfer';

/**
 * The `Error` enum of this pallet.
 **/
export type PalletAhOpsError =
  /**
   * Either no lease deposit or already unreserved.
   **/
  | 'NoLeaseReserve'
  /**
   * Either no crowdloan contribution or already withdrawn.
   **/
  | 'NoCrowdloanContribution'
  /**
   * Either no crowdloan reserve or already unreserved.
   **/
  | 'NoCrowdloanReserve'
  /**
   * Failed to withdraw crowdloan contribution.
   **/
  | 'FailedToWithdrawCrowdloanContribution'
  /**
   * Block number is not yet reached.
   **/
  | 'NotYet'
  /**
   * Not all contributions are withdrawn.
   **/
  | 'ContributionsRemaining'
  /**
   * Passed account IDs are not matching unmigrated child and sibling accounts.
   **/
  | 'WrongSovereignTranslation'
  /**
   * Account cannot be migrated since it is not a sovereign parachain account.
   **/
  | 'NotSovereign'
  /**
   * Internal error, please bug report.
   **/
  | 'InternalError'
  /**
   * The migrated account would get reaped in the process.
   **/
  | 'WouldReap'
  /**
   * Failed to put a hold on an account.
   **/
  | 'FailedToPutHold'
  /**
   * Failed to release a hold from an account.
   **/
  | 'FailedToReleaseHold'
  /**
   * Failed to thaw a frozen balance.
   **/
  | 'FailedToThaw'
  /**
   * Failed to set a freeze on an account.
   **/
  | 'FailedToSetFreeze'
  /**
   * Failed to unreserve the full balance.
   **/
  | 'CannotUnreserve';

export type PalletAhMigratorBalancesBefore = { checkingAccount: bigint; totalIssuance: bigint };

/**
 * The `Error` enum of this pallet.
 **/
export type PalletAhMigratorError =
  /**
   * The error that should to be replaced by something meaningful.
   **/
  | 'Todo'
  | 'FailedToUnreserveDeposit'
  /**
   * Failed to process an account data from RC.
   **/
  | 'FailedToProcessAccount'
  /**
   * Some item could not be inserted because it already exists.
   **/
  | 'InsertConflict'
  /**
   * Failed to convert RC type to AH type.
   **/
  | 'FailedToConvertType'
  /**
   * Failed to fetch preimage.
   **/
  | 'PreimageNotFound'
  /**
   * Failed to convert RC call to AH call.
   **/
  | 'FailedToConvertCall'
  /**
   * Failed to bound a call.
   **/
  | 'FailedToBoundCall'
  /**
   * Failed to send XCM message.
   **/
  | 'XcmError'
  /**
   * Failed to integrate a vesting schedule.
   **/
  | 'FailedToIntegrateVestingSchedule'
  /**
   * Checking account overflow or underflow.
   **/
  | 'FailedToCalculateCheckingAccount'
  /**
   * Vector did not fit into its compile-time bound.
   **/
  | 'FailedToBoundVector'
  | 'Unreachable'
  /**
   * No misplaced hold found.
   **/
  | 'NoMisplacedHoldFound'
  /**
   * No free balance to hold.
   **/
  | 'NoFreeBalanceToHold';

export type CumulusPalletWeightReclaimStorageWeightReclaim = [
  FrameSystemExtensionsAuthorizeCall,
  FrameSystemExtensionsCheckNonZeroSender,
  FrameSystemExtensionsCheckSpecVersion,
  FrameSystemExtensionsCheckTxVersion,
  FrameSystemExtensionsCheckGenesis,
  FrameSystemExtensionsCheckMortality,
  FrameSystemExtensionsCheckNonce,
  FrameSystemExtensionsCheckWeight,
  PalletAssetConversionTxPaymentChargeAssetTxPayment,
  FrameMetadataHashExtensionCheckMetadataHash,
];

export type FrameSystemExtensionsAuthorizeCall = {};

export type FrameSystemExtensionsCheckNonZeroSender = {};

export type FrameSystemExtensionsCheckSpecVersion = {};

export type FrameSystemExtensionsCheckTxVersion = {};

export type FrameSystemExtensionsCheckGenesis = {};

export type FrameSystemExtensionsCheckMortality = Era;

export type FrameSystemExtensionsCheckNonce = number;

export type FrameSystemExtensionsCheckWeight = {};

export type PalletAssetConversionTxPaymentChargeAssetTxPayment = {
  tip: bigint;
  assetId?: StagingXcmV5Location | undefined;
};

export type FrameMetadataHashExtensionCheckMetadataHash = { mode: FrameMetadataHashExtensionMode };

export type FrameMetadataHashExtensionMode = 'Disabled' | 'Enabled';

export type AssetHubWestendRuntimeRuntime = {};

export type SpConsensusSlotsSlotDuration = bigint;

export type SpRuntimeBlock = { header: Header; extrinsics: Array<UncheckedExtrinsic> };

export type SpRuntimeExtrinsicInclusionMode = 'AllExtrinsics' | 'OnlyInherents';

export type SpCoreOpaqueMetadata = Bytes;

export type SpRuntimeTransactionValidityTransactionValidityError =
  | { type: 'Invalid'; value: SpRuntimeTransactionValidityInvalidTransaction }
  | { type: 'Unknown'; value: SpRuntimeTransactionValidityUnknownTransaction };

export type SpRuntimeTransactionValidityInvalidTransaction =
  | { type: 'Call' }
  | { type: 'Payment' }
  | { type: 'Future' }
  | { type: 'Stale' }
  | { type: 'BadProof' }
  | { type: 'AncientBirthBlock' }
  | { type: 'ExhaustsResources' }
  | { type: 'Custom'; value: number }
  | { type: 'BadMandatory' }
  | { type: 'MandatoryValidation' }
  | { type: 'BadSigner' }
  | { type: 'IndeterminateImplicit' }
  | { type: 'UnknownOrigin' };

export type SpRuntimeTransactionValidityUnknownTransaction =
  | { type: 'CannotLookup' }
  | { type: 'NoUnsignedValidator' }
  | { type: 'Custom'; value: number };

export type SpInherentsInherentData = { data: Array<[FixedBytes<8>, Bytes]> };

export type SpInherentsCheckInherentsResult = { okay: boolean; fatalError: boolean; errors: SpInherentsInherentData };

export type SpRuntimeTransactionValidityTransactionSource = 'InBlock' | 'Local' | 'External';

export type SpRuntimeTransactionValidityValidTransaction = {
  priority: bigint;
  requires: Array<Bytes>;
  provides: Array<Bytes>;
  longevity: bigint;
  propagate: boolean;
};

export type PalletTransactionPaymentRuntimeDispatchInfo = {
  weight: SpWeightsWeightV2Weight;
  class: FrameSupportDispatchDispatchClass;
  partialFee: bigint;
};

export type PalletTransactionPaymentFeeDetails = {
  inclusionFee?: PalletTransactionPaymentInclusionFee | undefined;
  tip: bigint;
};

export type PalletTransactionPaymentInclusionFee = { baseFee: bigint; lenFee: bigint; adjustedWeightFee: bigint };

export type XcmRuntimeApisFeesError =
  | 'Unimplemented'
  | 'VersionedConversionFailed'
  | 'WeightNotComputable'
  | 'UnhandledXcmVersion'
  | 'AssetNotFound'
  | 'Unroutable';

export type XcmRuntimeApisDryRunCallDryRunEffects = {
  executionResult: Result<FrameSupportDispatchPostDispatchInfo, SpRuntimeDispatchErrorWithPostInfo>;
  emittedEvents: Array<AssetHubWestendRuntimeRuntimeEvent>;
  localXcm?: XcmVersionedXcm | undefined;
  forwardedXcms: Array<[XcmVersionedLocation, Array<XcmVersionedXcm>]>;
};

export type XcmRuntimeApisDryRunError = 'Unimplemented' | 'VersionedConversionFailed';

export type XcmRuntimeApisDryRunXcmDryRunEffects = {
  executionResult: StagingXcmV5TraitsOutcome;
  emittedEvents: Array<AssetHubWestendRuntimeRuntimeEvent>;
  forwardedXcms: Array<[XcmVersionedLocation, Array<XcmVersionedXcm>]>;
};

export type XcmRuntimeApisConversionsError = 'Unsupported' | 'VersionedConversionFailed';

export type XcmVersionedAsset =
  | { type: 'V3'; value: XcmV3MultiassetMultiAsset }
  | { type: 'V4'; value: StagingXcmV4Asset }
  | { type: 'V5'; value: StagingXcmV5Asset };

export type XcmRuntimeApisTrustedQueryError = 'VersionedAssetConversionFailed' | 'VersionedLocationConversionFailed';

export type XcmRuntimeApisAuthorizedAliasesError = 'LocationVersionConversionFailed';

export type AssetsCommonRuntimeApiFungiblesAccessError = 'AssetIdConversionFailed' | 'AmountToBalanceConversionFailed';

export type CumulusPrimitivesCoreCollationInfo = {
  upwardMessages: Array<Bytes>;
  horizontalMessages: Array<PolkadotCorePrimitivesOutboundHrmpMessage>;
  newValidationCode?: PolkadotParachainPrimitivesPrimitivesValidationCode | undefined;
  processedDownwardMessages: number;
  hrmpWatermark: number;
  headData: PolkadotParachainPrimitivesPrimitivesHeadData;
};

export type PolkadotParachainPrimitivesPrimitivesValidationCode = Bytes;

export type PolkadotPrimitivesVstagingCoreSelector = number;

export type PolkadotPrimitivesVstagingClaimQueueOffset = number;

export type PalletRevivePrimitivesContractResult = {
  gasConsumed: SpWeightsWeightV2Weight;
  gasRequired: SpWeightsWeightV2Weight;
  storageDeposit: PalletRevivePrimitivesStorageDeposit;
  result: Result<PalletRevivePrimitivesExecReturnValue, DispatchError>;
};

export type PalletRevivePrimitivesExecReturnValue = { flags: PalletReviveUapiFlagsReturnFlags; data: Bytes };

export type PalletReviveUapiFlagsReturnFlags = { bits: number };

export type PalletRevivePrimitivesStorageDeposit =
  | { type: 'Refund'; value: bigint }
  | { type: 'Charge'; value: bigint };

export type PalletRevivePrimitivesCode = { type: 'Upload'; value: Bytes } | { type: 'Existing'; value: H256 };

export type PalletRevivePrimitivesContractResultInstantiateReturnValue = {
  gasConsumed: SpWeightsWeightV2Weight;
  gasRequired: SpWeightsWeightV2Weight;
  storageDeposit: PalletRevivePrimitivesStorageDeposit;
  result: Result<PalletRevivePrimitivesInstantiateReturnValue, DispatchError>;
};

export type PalletRevivePrimitivesInstantiateReturnValue = {
  result: PalletRevivePrimitivesExecReturnValue;
  addr: H160;
};

export type PalletReviveEvmApiRpcTypesGenGenericTransaction = {
  accessList?: Array<PalletReviveEvmApiRpcTypesGenAccessListEntry> | undefined;
  blobVersionedHashes: Array<H256>;
  blobs: Array<PalletReviveEvmApiByteBytes>;
  chainId?: U256 | undefined;
  from?: H160 | undefined;
  gas?: U256 | undefined;
  gasPrice?: U256 | undefined;
  input: PalletReviveEvmApiRpcTypesGenInputOrData;
  maxFeePerBlobGas?: U256 | undefined;
  maxFeePerGas?: U256 | undefined;
  maxPriorityFeePerGas?: U256 | undefined;
  nonce?: U256 | undefined;
  to?: H160 | undefined;
  rType?: PalletReviveEvmApiByte | undefined;
  value?: U256 | undefined;
};

export type PalletReviveEvmApiRpcTypesGenAccessListEntry = { address: H160; storageKeys: Array<H256> };

export type PalletReviveEvmApiByteBytes = Bytes;

export type PalletReviveEvmApiRpcTypesGenInputOrData = {
  input?: PalletReviveEvmApiByteBytes | undefined;
  data?: PalletReviveEvmApiByteBytes | undefined;
};

export type PalletReviveEvmApiByte = number;

export type PalletRevivePrimitivesEthTransactInfo = {
  gasRequired: SpWeightsWeightV2Weight;
  storageDeposit: bigint;
  ethGas: U256;
  data: Bytes;
};

export type PalletRevivePrimitivesEthTransactError =
  | { type: 'Data'; value: Bytes }
  | { type: 'Message'; value: string };

export type PalletRevivePrimitivesCodeUploadReturnValue = { codeHash: H256; deposit: bigint };

export type PalletRevivePrimitivesContractAccessError = 'DoesntExist' | 'KeyDecodingFailed';

export type PalletReviveEvmApiDebugRpcTypesTracerType = {
  type: 'CallTracer';
  value?: PalletReviveEvmApiDebugRpcTypesCallTracerConfig | undefined;
};

export type PalletReviveEvmApiDebugRpcTypesCallTracerConfig = { withLogs: boolean; onlyTopCall: boolean };

export type PalletReviveEvmApiDebugRpcTypesTrace = { type: 'Call'; value: PalletReviveEvmApiDebugRpcTypesCallTrace };

export type PalletReviveEvmApiDebugRpcTypesCallTrace = {
  from: H160;
  gas: U256;
  gasUsed: U256;
  to: H160;
  input: PalletReviveEvmApiByteBytes;
  output: PalletReviveEvmApiByteBytes;
  error?: string | undefined;
  revertReason?: string | undefined;
  calls: Array<PalletReviveEvmApiDebugRpcTypesCallTrace>;
  logs: Array<PalletReviveEvmApiDebugRpcTypesCallLog>;
  value?: U256 | undefined;
  callType: PalletReviveEvmApiDebugRpcTypesCallType;
};

export type PalletReviveEvmApiDebugRpcTypesCallLog = {
  address: H160;
  topics: Array<H256>;
  data: PalletReviveEvmApiByteBytes;
  position: number;
};

export type PalletReviveEvmApiDebugRpcTypesCallType = 'Call' | 'StaticCall' | 'DelegateCall';

export type AssetHubWestendRuntimeRuntimeError =
  | { pallet: 'System'; palletError: FrameSystemError }
  | { pallet: 'ParachainSystem'; palletError: CumulusPalletParachainSystemError }
  | { pallet: 'MultiBlockMigrations'; palletError: PalletMigrationsError }
  | { pallet: 'Preimage'; palletError: PalletPreimageError }
  | { pallet: 'Scheduler'; palletError: PalletSchedulerError }
  | { pallet: 'Sudo'; palletError: PalletSudoError }
  | { pallet: 'Balances'; palletError: PalletBalancesError }
  | { pallet: 'Vesting'; palletError: PalletVestingError }
  | { pallet: 'CollatorSelection'; palletError: PalletCollatorSelectionError }
  | { pallet: 'Session'; palletError: PalletSessionError }
  | { pallet: 'XcmpQueue'; palletError: CumulusPalletXcmpQueueError }
  | { pallet: 'PolkadotXcm'; palletError: PalletXcmError }
  | { pallet: 'MessageQueue'; palletError: PalletMessageQueueError }
  | { pallet: 'SnowbridgeSystemFrontend'; palletError: SnowbridgePalletSystemFrontendError }
  | { pallet: 'Utility'; palletError: PalletUtilityError }
  | { pallet: 'Multisig'; palletError: PalletMultisigError }
  | { pallet: 'Proxy'; palletError: PalletProxyError }
  | { pallet: 'Indices'; palletError: PalletIndicesError }
  | { pallet: 'Assets'; palletError: PalletAssetsError }
  | { pallet: 'Uniques'; palletError: PalletUniquesError }
  | { pallet: 'Nfts'; palletError: PalletNftsError }
  | { pallet: 'ForeignAssets'; palletError: PalletAssetsError }
  | { pallet: 'NftFractionalization'; palletError: PalletNftFractionalizationError }
  | { pallet: 'PoolAssets'; palletError: PalletAssetsError }
  | { pallet: 'AssetConversion'; palletError: PalletAssetConversionError }
  | { pallet: 'AssetsFreezer'; palletError: PalletAssetsFreezerError }
  | { pallet: 'ForeignAssetsFreezer'; palletError: PalletAssetsFreezerError }
  | { pallet: 'PoolAssetsFreezer'; palletError: PalletAssetsFreezerError }
  | { pallet: 'Revive'; palletError: PalletReviveError }
  | { pallet: 'AssetRewards'; palletError: PalletAssetRewardsError }
  | { pallet: 'StateTrieMigration'; palletError: PalletStateTrieMigrationError }
  | { pallet: 'Staking'; palletError: PalletStakingAsyncPalletError }
  | { pallet: 'NominationPools'; palletError: PalletNominationPoolsError }
  | { pallet: 'FastUnstake'; palletError: PalletFastUnstakeError }
  | { pallet: 'VoterList'; palletError: PalletBagsListError }
  | { pallet: 'DelegatedStaking'; palletError: PalletDelegatedStakingError }
  | { pallet: 'StakingNextRcClient'; palletError: PalletStakingAsyncRcClientError }
  | { pallet: 'MultiBlock'; palletError: PalletElectionProviderMultiBlockError }
  | { pallet: 'MultiBlockSigned'; palletError: PalletElectionProviderMultiBlockSignedPalletError }
  | { pallet: 'ConvictionVoting'; palletError: PalletConvictionVotingError }
  | { pallet: 'Referenda'; palletError: PalletReferendaError }
  | { pallet: 'Whitelist'; palletError: PalletWhitelistError }
  | { pallet: 'Treasury'; palletError: PalletTreasuryError }
  | { pallet: 'AssetRate'; palletError: PalletAssetRateError }
  | { pallet: 'AssetConversionMigration'; palletError: PalletAssetConversionOpsError }
  | { pallet: 'AhOps'; palletError: PalletAhOpsError }
  | { pallet: 'AhMigrator'; palletError: PalletAhMigratorError };
