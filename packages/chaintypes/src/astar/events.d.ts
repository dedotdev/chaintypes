// Generated by dedot cli

import type { GenericChainEvents, GenericPalletEvent, RpcVersion } from 'dedot/types';
import type {
  DispatchInfo,
  DispatchError,
  AccountId32,
  H256,
  Result,
  Bytes,
  FixedBytes,
  FixedU128,
  H160,
  U256,
} from 'dedot/codecs';
import type {
  PalletMultisigTimepoint,
  AstarRuntimeProxyType,
  SpWeightsWeightV2Weight,
  FrameSupportTokensMiscBalanceStatus,
  PalletInflationInflationConfiguration,
  PalletDappStakingSubperiod,
  AstarPrimitivesDappStakingSmartContract,
  PalletDappStakingForcingType,
  AstarPrimitivesOracleCurrencyId,
  StagingXcmV4TraitsOutcome,
  StagingXcmV4Location,
  StagingXcmV4Xcm,
  StagingXcmV4Response,
  XcmVersionedAssets,
  StagingXcmV4AssetAssets,
  XcmV3TraitsError,
  XcmVersionedLocation,
  StagingXcmV4Asset,
  CumulusPrimitivesCoreAggregateMessageOrigin,
  FrameSupportMessagesProcessMessageError,
  EthereumLog,
  EvmCoreErrorExitReason,
  PalletContractsOrigin,
  PalletDemocracyVoteThreshold,
  PalletDemocracyVoteAccountVote,
  PalletDemocracyMetadataOwner,
} from './types';

export interface ChainEvents<Rv extends RpcVersion> extends GenericChainEvents<Rv> {
  /**
   * Pallet `System`'s events
   **/
  system: {
    /**
     * An extrinsic completed successfully.
     **/
    ExtrinsicSuccess: GenericPalletEvent<Rv, 'System', 'ExtrinsicSuccess', { dispatchInfo: DispatchInfo }>;

    /**
     * An extrinsic failed.
     **/
    ExtrinsicFailed: GenericPalletEvent<
      Rv,
      'System',
      'ExtrinsicFailed',
      { dispatchError: DispatchError; dispatchInfo: DispatchInfo }
    >;

    /**
     * `:code` was updated.
     **/
    CodeUpdated: GenericPalletEvent<Rv, 'System', 'CodeUpdated', null>;

    /**
     * A new account was created.
     **/
    NewAccount: GenericPalletEvent<Rv, 'System', 'NewAccount', { account: AccountId32 }>;

    /**
     * An account was reaped.
     **/
    KilledAccount: GenericPalletEvent<Rv, 'System', 'KilledAccount', { account: AccountId32 }>;

    /**
     * On on-chain remark happened.
     **/
    Remarked: GenericPalletEvent<Rv, 'System', 'Remarked', { sender: AccountId32; hash: H256 }>;

    /**
     * An upgrade was authorized.
     **/
    UpgradeAuthorized: GenericPalletEvent<Rv, 'System', 'UpgradeAuthorized', { codeHash: H256; checkVersion: boolean }>;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Utility`'s events
   **/
  utility: {
    /**
     * Batch of dispatches did not complete fully. Index of first failing dispatch given, as
     * well as the error.
     **/
    BatchInterrupted: GenericPalletEvent<Rv, 'Utility', 'BatchInterrupted', { index: number; error: DispatchError }>;

    /**
     * Batch of dispatches completed fully with no error.
     **/
    BatchCompleted: GenericPalletEvent<Rv, 'Utility', 'BatchCompleted', null>;

    /**
     * Batch of dispatches completed but has errors.
     **/
    BatchCompletedWithErrors: GenericPalletEvent<Rv, 'Utility', 'BatchCompletedWithErrors', null>;

    /**
     * A single item within a Batch of dispatches has completed with no error.
     **/
    ItemCompleted: GenericPalletEvent<Rv, 'Utility', 'ItemCompleted', null>;

    /**
     * A single item within a Batch of dispatches has completed with error.
     **/
    ItemFailed: GenericPalletEvent<Rv, 'Utility', 'ItemFailed', { error: DispatchError }>;

    /**
     * A call was dispatched.
     **/
    DispatchedAs: GenericPalletEvent<Rv, 'Utility', 'DispatchedAs', { result: Result<[], DispatchError> }>;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Identity`'s events
   **/
  identity: {
    /**
     * A name was set or reset (which will remove all judgements).
     **/
    IdentitySet: GenericPalletEvent<Rv, 'Identity', 'IdentitySet', { who: AccountId32 }>;

    /**
     * A name was cleared, and the given balance returned.
     **/
    IdentityCleared: GenericPalletEvent<Rv, 'Identity', 'IdentityCleared', { who: AccountId32; deposit: bigint }>;

    /**
     * A name was removed and the given balance slashed.
     **/
    IdentityKilled: GenericPalletEvent<Rv, 'Identity', 'IdentityKilled', { who: AccountId32; deposit: bigint }>;

    /**
     * A judgement was asked from a registrar.
     **/
    JudgementRequested: GenericPalletEvent<
      Rv,
      'Identity',
      'JudgementRequested',
      { who: AccountId32; registrarIndex: number }
    >;

    /**
     * A judgement request was retracted.
     **/
    JudgementUnrequested: GenericPalletEvent<
      Rv,
      'Identity',
      'JudgementUnrequested',
      { who: AccountId32; registrarIndex: number }
    >;

    /**
     * A judgement was given by a registrar.
     **/
    JudgementGiven: GenericPalletEvent<
      Rv,
      'Identity',
      'JudgementGiven',
      { target: AccountId32; registrarIndex: number }
    >;

    /**
     * A registrar was added.
     **/
    RegistrarAdded: GenericPalletEvent<Rv, 'Identity', 'RegistrarAdded', { registrarIndex: number }>;

    /**
     * A sub-identity was added to an identity and the deposit paid.
     **/
    SubIdentityAdded: GenericPalletEvent<
      Rv,
      'Identity',
      'SubIdentityAdded',
      { sub: AccountId32; main: AccountId32; deposit: bigint }
    >;

    /**
     * A sub-identity was removed from an identity and the deposit freed.
     **/
    SubIdentityRemoved: GenericPalletEvent<
      Rv,
      'Identity',
      'SubIdentityRemoved',
      { sub: AccountId32; main: AccountId32; deposit: bigint }
    >;

    /**
     * A sub-identity was cleared, and the given deposit repatriated from the
     * main identity account to the sub-identity account.
     **/
    SubIdentityRevoked: GenericPalletEvent<
      Rv,
      'Identity',
      'SubIdentityRevoked',
      { sub: AccountId32; main: AccountId32; deposit: bigint }
    >;

    /**
     * A username authority was added.
     **/
    AuthorityAdded: GenericPalletEvent<Rv, 'Identity', 'AuthorityAdded', { authority: AccountId32 }>;

    /**
     * A username authority was removed.
     **/
    AuthorityRemoved: GenericPalletEvent<Rv, 'Identity', 'AuthorityRemoved', { authority: AccountId32 }>;

    /**
     * A username was set for `who`.
     **/
    UsernameSet: GenericPalletEvent<Rv, 'Identity', 'UsernameSet', { who: AccountId32; username: Bytes }>;

    /**
     * A username was queued, but `who` must accept it prior to `expiration`.
     **/
    UsernameQueued: GenericPalletEvent<
      Rv,
      'Identity',
      'UsernameQueued',
      { who: AccountId32; username: Bytes; expiration: number }
    >;

    /**
     * A queued username passed its expiration without being claimed and was removed.
     **/
    PreapprovalExpired: GenericPalletEvent<Rv, 'Identity', 'PreapprovalExpired', { whose: AccountId32 }>;

    /**
     * A username was set as a primary and can be looked up from `who`.
     **/
    PrimaryUsernameSet: GenericPalletEvent<Rv, 'Identity', 'PrimaryUsernameSet', { who: AccountId32; username: Bytes }>;

    /**
     * A dangling username (as in, a username corresponding to an account that has removed its
     * identity) has been removed.
     **/
    DanglingUsernameRemoved: GenericPalletEvent<
      Rv,
      'Identity',
      'DanglingUsernameRemoved',
      { who: AccountId32; username: Bytes }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Multisig`'s events
   **/
  multisig: {
    /**
     * A new multisig operation has begun.
     **/
    NewMultisig: GenericPalletEvent<
      Rv,
      'Multisig',
      'NewMultisig',
      { approving: AccountId32; multisig: AccountId32; callHash: FixedBytes<32> }
    >;

    /**
     * A multisig operation has been approved by someone.
     **/
    MultisigApproval: GenericPalletEvent<
      Rv,
      'Multisig',
      'MultisigApproval',
      { approving: AccountId32; timepoint: PalletMultisigTimepoint; multisig: AccountId32; callHash: FixedBytes<32> }
    >;

    /**
     * A multisig operation has been executed.
     **/
    MultisigExecuted: GenericPalletEvent<
      Rv,
      'Multisig',
      'MultisigExecuted',
      {
        approving: AccountId32;
        timepoint: PalletMultisigTimepoint;
        multisig: AccountId32;
        callHash: FixedBytes<32>;
        result: Result<[], DispatchError>;
      }
    >;

    /**
     * A multisig operation has been cancelled.
     **/
    MultisigCancelled: GenericPalletEvent<
      Rv,
      'Multisig',
      'MultisigCancelled',
      { cancelling: AccountId32; timepoint: PalletMultisigTimepoint; multisig: AccountId32; callHash: FixedBytes<32> }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Proxy`'s events
   **/
  proxy: {
    /**
     * A proxy was executed correctly, with the given.
     **/
    ProxyExecuted: GenericPalletEvent<Rv, 'Proxy', 'ProxyExecuted', { result: Result<[], DispatchError> }>;

    /**
     * A pure account has been created by new proxy with given
     * disambiguation index and proxy type.
     **/
    PureCreated: GenericPalletEvent<
      Rv,
      'Proxy',
      'PureCreated',
      { pure: AccountId32; who: AccountId32; proxyType: AstarRuntimeProxyType; disambiguationIndex: number }
    >;

    /**
     * An announcement was placed to make a call in the future.
     **/
    Announced: GenericPalletEvent<Rv, 'Proxy', 'Announced', { real: AccountId32; proxy: AccountId32; callHash: H256 }>;

    /**
     * A proxy was added.
     **/
    ProxyAdded: GenericPalletEvent<
      Rv,
      'Proxy',
      'ProxyAdded',
      { delegator: AccountId32; delegatee: AccountId32; proxyType: AstarRuntimeProxyType; delay: number }
    >;

    /**
     * A proxy was removed.
     **/
    ProxyRemoved: GenericPalletEvent<
      Rv,
      'Proxy',
      'ProxyRemoved',
      { delegator: AccountId32; delegatee: AccountId32; proxyType: AstarRuntimeProxyType; delay: number }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Scheduler`'s events
   **/
  scheduler: {
    /**
     * Scheduled some task.
     **/
    Scheduled: GenericPalletEvent<Rv, 'Scheduler', 'Scheduled', { when: number; index: number }>;

    /**
     * Canceled some task.
     **/
    Canceled: GenericPalletEvent<Rv, 'Scheduler', 'Canceled', { when: number; index: number }>;

    /**
     * Dispatched some task.
     **/
    Dispatched: GenericPalletEvent<
      Rv,
      'Scheduler',
      'Dispatched',
      { task: [number, number]; id?: FixedBytes<32> | undefined; result: Result<[], DispatchError> }
    >;

    /**
     * Set a retry configuration for some task.
     **/
    RetrySet: GenericPalletEvent<
      Rv,
      'Scheduler',
      'RetrySet',
      { task: [number, number]; id?: FixedBytes<32> | undefined; period: number; retries: number }
    >;

    /**
     * Cancel a retry configuration for some task.
     **/
    RetryCancelled: GenericPalletEvent<
      Rv,
      'Scheduler',
      'RetryCancelled',
      { task: [number, number]; id?: FixedBytes<32> | undefined }
    >;

    /**
     * The call for the provided hash was not found so the task has been aborted.
     **/
    CallUnavailable: GenericPalletEvent<
      Rv,
      'Scheduler',
      'CallUnavailable',
      { task: [number, number]; id?: FixedBytes<32> | undefined }
    >;

    /**
     * The given task was unable to be renewed since the agenda is full at that block.
     **/
    PeriodicFailed: GenericPalletEvent<
      Rv,
      'Scheduler',
      'PeriodicFailed',
      { task: [number, number]; id?: FixedBytes<32> | undefined }
    >;

    /**
     * The given task was unable to be retried since the agenda is full at that block or there
     * was not enough weight to reschedule it.
     **/
    RetryFailed: GenericPalletEvent<
      Rv,
      'Scheduler',
      'RetryFailed',
      { task: [number, number]; id?: FixedBytes<32> | undefined }
    >;

    /**
     * The given task can never be executed since it is overweight.
     **/
    PermanentlyOverweight: GenericPalletEvent<
      Rv,
      'Scheduler',
      'PermanentlyOverweight',
      { task: [number, number]; id?: FixedBytes<32> | undefined }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `ParachainSystem`'s events
   **/
  parachainSystem: {
    /**
     * The validation function has been scheduled to apply.
     **/
    ValidationFunctionStored: GenericPalletEvent<Rv, 'ParachainSystem', 'ValidationFunctionStored', null>;

    /**
     * The validation function was applied as of the contained relay chain block number.
     **/
    ValidationFunctionApplied: GenericPalletEvent<
      Rv,
      'ParachainSystem',
      'ValidationFunctionApplied',
      { relayChainBlockNum: number }
    >;

    /**
     * The relay-chain aborted the upgrade process.
     **/
    ValidationFunctionDiscarded: GenericPalletEvent<Rv, 'ParachainSystem', 'ValidationFunctionDiscarded', null>;

    /**
     * Some downward messages have been received and will be processed.
     **/
    DownwardMessagesReceived: GenericPalletEvent<Rv, 'ParachainSystem', 'DownwardMessagesReceived', { count: number }>;

    /**
     * Downward messages were processed using the given weight.
     **/
    DownwardMessagesProcessed: GenericPalletEvent<
      Rv,
      'ParachainSystem',
      'DownwardMessagesProcessed',
      { weightUsed: SpWeightsWeightV2Weight; dmqHead: H256 }
    >;

    /**
     * An upward message was sent to the relay chain.
     **/
    UpwardMessageSent: GenericPalletEvent<
      Rv,
      'ParachainSystem',
      'UpwardMessageSent',
      { messageHash?: FixedBytes<32> | undefined }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `TransactionPayment`'s events
   **/
  transactionPayment: {
    /**
     * A transaction fee `actual_fee`, of which `tip` was added to the minimum inclusion fee,
     * has been paid by `who`.
     **/
    TransactionFeePaid: GenericPalletEvent<
      Rv,
      'TransactionPayment',
      'TransactionFeePaid',
      { who: AccountId32; actualFee: bigint; tip: bigint }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Balances`'s events
   **/
  balances: {
    /**
     * An account was created with some free balance.
     **/
    Endowed: GenericPalletEvent<Rv, 'Balances', 'Endowed', { account: AccountId32; freeBalance: bigint }>;

    /**
     * An account was removed whose balance was non-zero but below ExistentialDeposit,
     * resulting in an outright loss.
     **/
    DustLost: GenericPalletEvent<Rv, 'Balances', 'DustLost', { account: AccountId32; amount: bigint }>;

    /**
     * Transfer succeeded.
     **/
    Transfer: GenericPalletEvent<Rv, 'Balances', 'Transfer', { from: AccountId32; to: AccountId32; amount: bigint }>;

    /**
     * A balance was set by root.
     **/
    BalanceSet: GenericPalletEvent<Rv, 'Balances', 'BalanceSet', { who: AccountId32; free: bigint }>;

    /**
     * Some balance was reserved (moved from free to reserved).
     **/
    Reserved: GenericPalletEvent<Rv, 'Balances', 'Reserved', { who: AccountId32; amount: bigint }>;

    /**
     * Some balance was unreserved (moved from reserved to free).
     **/
    Unreserved: GenericPalletEvent<Rv, 'Balances', 'Unreserved', { who: AccountId32; amount: bigint }>;

    /**
     * Some balance was moved from the reserve of the first account to the second account.
     * Final argument indicates the destination balance type.
     **/
    ReserveRepatriated: GenericPalletEvent<
      Rv,
      'Balances',
      'ReserveRepatriated',
      { from: AccountId32; to: AccountId32; amount: bigint; destinationStatus: FrameSupportTokensMiscBalanceStatus }
    >;

    /**
     * Some amount was deposited (e.g. for transaction fees).
     **/
    Deposit: GenericPalletEvent<Rv, 'Balances', 'Deposit', { who: AccountId32; amount: bigint }>;

    /**
     * Some amount was withdrawn from the account (e.g. for transaction fees).
     **/
    Withdraw: GenericPalletEvent<Rv, 'Balances', 'Withdraw', { who: AccountId32; amount: bigint }>;

    /**
     * Some amount was removed from the account (e.g. for misbehavior).
     **/
    Slashed: GenericPalletEvent<Rv, 'Balances', 'Slashed', { who: AccountId32; amount: bigint }>;

    /**
     * Some amount was minted into an account.
     **/
    Minted: GenericPalletEvent<Rv, 'Balances', 'Minted', { who: AccountId32; amount: bigint }>;

    /**
     * Some amount was burned from an account.
     **/
    Burned: GenericPalletEvent<Rv, 'Balances', 'Burned', { who: AccountId32; amount: bigint }>;

    /**
     * Some amount was suspended from an account (it can be restored later).
     **/
    Suspended: GenericPalletEvent<Rv, 'Balances', 'Suspended', { who: AccountId32; amount: bigint }>;

    /**
     * Some amount was restored into an account.
     **/
    Restored: GenericPalletEvent<Rv, 'Balances', 'Restored', { who: AccountId32; amount: bigint }>;

    /**
     * An account was upgraded.
     **/
    Upgraded: GenericPalletEvent<Rv, 'Balances', 'Upgraded', { who: AccountId32 }>;

    /**
     * Total issuance was increased by `amount`, creating a credit to be balanced.
     **/
    Issued: GenericPalletEvent<Rv, 'Balances', 'Issued', { amount: bigint }>;

    /**
     * Total issuance was decreased by `amount`, creating a debt to be balanced.
     **/
    Rescinded: GenericPalletEvent<Rv, 'Balances', 'Rescinded', { amount: bigint }>;

    /**
     * Some balance was locked.
     **/
    Locked: GenericPalletEvent<Rv, 'Balances', 'Locked', { who: AccountId32; amount: bigint }>;

    /**
     * Some balance was unlocked.
     **/
    Unlocked: GenericPalletEvent<Rv, 'Balances', 'Unlocked', { who: AccountId32; amount: bigint }>;

    /**
     * Some balance was frozen.
     **/
    Frozen: GenericPalletEvent<Rv, 'Balances', 'Frozen', { who: AccountId32; amount: bigint }>;

    /**
     * Some balance was thawed.
     **/
    Thawed: GenericPalletEvent<Rv, 'Balances', 'Thawed', { who: AccountId32; amount: bigint }>;

    /**
     * The `TotalIssuance` was forcefully changed.
     **/
    TotalIssuanceForced: GenericPalletEvent<Rv, 'Balances', 'TotalIssuanceForced', { old: bigint; new: bigint }>;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Vesting`'s events
   **/
  vesting: {
    /**
     * The amount vested has been updated. This could indicate a change in funds available.
     * The balance given is the amount which is left unvested (and thus locked).
     **/
    VestingUpdated: GenericPalletEvent<Rv, 'Vesting', 'VestingUpdated', { account: AccountId32; unvested: bigint }>;

    /**
     * An \[account\] has become fully vested.
     **/
    VestingCompleted: GenericPalletEvent<Rv, 'Vesting', 'VestingCompleted', { account: AccountId32 }>;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Inflation`'s events
   **/
  inflation: {
    /**
     * Inflation parameters have been force changed. This will have effect on the next inflation recalculation.
     **/
    InflationParametersForceChanged: GenericPalletEvent<Rv, 'Inflation', 'InflationParametersForceChanged', null>;

    /**
     * Inflation configuration has been force changed. This will have an immediate effect from this block.
     **/
    InflationConfigurationForceChanged: GenericPalletEvent<
      Rv,
      'Inflation',
      'InflationConfigurationForceChanged',
      { config: PalletInflationInflationConfiguration }
    >;

    /**
     * Inflation recalculation has been forced.
     **/
    ForcedInflationRecalculation: GenericPalletEvent<
      Rv,
      'Inflation',
      'ForcedInflationRecalculation',
      { config: PalletInflationInflationConfiguration }
    >;

    /**
     * New inflation configuration has been set.
     **/
    NewInflationConfiguration: GenericPalletEvent<
      Rv,
      'Inflation',
      'NewInflationConfiguration',
      { config: PalletInflationInflationConfiguration }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `DappStaking`'s events
   **/
  dappStaking: {
    /**
     * Maintenance mode has been either enabled or disabled.
     **/
    MaintenanceMode: GenericPalletEvent<Rv, 'DappStaking', 'MaintenanceMode', { enabled: boolean }>;

    /**
     * New era has started.
     **/
    NewEra: GenericPalletEvent<Rv, 'DappStaking', 'NewEra', { era: number }>;

    /**
     * New subperiod has started.
     **/
    NewSubperiod: GenericPalletEvent<
      Rv,
      'DappStaking',
      'NewSubperiod',
      { subperiod: PalletDappStakingSubperiod; number: number }
    >;

    /**
     * A smart contract has been registered for dApp staking
     **/
    DAppRegistered: GenericPalletEvent<
      Rv,
      'DappStaking',
      'DAppRegistered',
      { owner: AccountId32; smartContract: AstarPrimitivesDappStakingSmartContract; dappId: number }
    >;

    /**
     * dApp reward destination has been updated.
     **/
    DAppRewardDestinationUpdated: GenericPalletEvent<
      Rv,
      'DappStaking',
      'DAppRewardDestinationUpdated',
      { smartContract: AstarPrimitivesDappStakingSmartContract; beneficiary?: AccountId32 | undefined }
    >;

    /**
     * dApp owner has been changed.
     **/
    DAppOwnerChanged: GenericPalletEvent<
      Rv,
      'DappStaking',
      'DAppOwnerChanged',
      { smartContract: AstarPrimitivesDappStakingSmartContract; newOwner: AccountId32 }
    >;

    /**
     * dApp has been unregistered
     **/
    DAppUnregistered: GenericPalletEvent<
      Rv,
      'DappStaking',
      'DAppUnregistered',
      { smartContract: AstarPrimitivesDappStakingSmartContract; era: number }
    >;

    /**
     * Account has locked some amount into dApp staking.
     **/
    Locked: GenericPalletEvent<Rv, 'DappStaking', 'Locked', { account: AccountId32; amount: bigint }>;

    /**
     * Account has started the unlocking process for some amount.
     **/
    Unlocking: GenericPalletEvent<Rv, 'DappStaking', 'Unlocking', { account: AccountId32; amount: bigint }>;

    /**
     * Account has claimed unlocked amount, removing the lock from it.
     **/
    ClaimedUnlocked: GenericPalletEvent<Rv, 'DappStaking', 'ClaimedUnlocked', { account: AccountId32; amount: bigint }>;

    /**
     * Account has relocked all of the unlocking chunks.
     **/
    Relock: GenericPalletEvent<Rv, 'DappStaking', 'Relock', { account: AccountId32; amount: bigint }>;

    /**
     * Account has staked some amount on a smart contract.
     **/
    Stake: GenericPalletEvent<
      Rv,
      'DappStaking',
      'Stake',
      { account: AccountId32; smartContract: AstarPrimitivesDappStakingSmartContract; amount: bigint }
    >;

    /**
     * Account has unstaked some amount from a smart contract.
     **/
    Unstake: GenericPalletEvent<
      Rv,
      'DappStaking',
      'Unstake',
      { account: AccountId32; smartContract: AstarPrimitivesDappStakingSmartContract; amount: bigint }
    >;

    /**
     * Account has claimed some stake rewards.
     **/
    Reward: GenericPalletEvent<Rv, 'DappStaking', 'Reward', { account: AccountId32; era: number; amount: bigint }>;

    /**
     * Bonus reward has been paid out to a loyal staker.
     **/
    BonusReward: GenericPalletEvent<
      Rv,
      'DappStaking',
      'BonusReward',
      { account: AccountId32; smartContract: AstarPrimitivesDappStakingSmartContract; period: number; amount: bigint }
    >;

    /**
     * dApp reward has been paid out to a beneficiary.
     **/
    DAppReward: GenericPalletEvent<
      Rv,
      'DappStaking',
      'DAppReward',
      {
        beneficiary: AccountId32;
        smartContract: AstarPrimitivesDappStakingSmartContract;
        tierId: number;
        rank: number;
        era: number;
        amount: bigint;
      }
    >;

    /**
     * Account has unstaked funds from an unregistered smart contract
     **/
    UnstakeFromUnregistered: GenericPalletEvent<
      Rv,
      'DappStaking',
      'UnstakeFromUnregistered',
      { account: AccountId32; smartContract: AstarPrimitivesDappStakingSmartContract; amount: bigint }
    >;

    /**
     * Some expired stake entries have been removed from storage.
     **/
    ExpiredEntriesRemoved: GenericPalletEvent<
      Rv,
      'DappStaking',
      'ExpiredEntriesRemoved',
      { account: AccountId32; count: number }
    >;

    /**
     * Privileged origin has forced a new era and possibly a subperiod to start from next block.
     **/
    Force: GenericPalletEvent<Rv, 'DappStaking', 'Force', { forcingType: PalletDappStakingForcingType }>;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Assets`'s events
   **/
  assets: {
    /**
     * Some asset class was created.
     **/
    Created: GenericPalletEvent<Rv, 'Assets', 'Created', { assetId: bigint; creator: AccountId32; owner: AccountId32 }>;

    /**
     * Some assets were issued.
     **/
    Issued: GenericPalletEvent<Rv, 'Assets', 'Issued', { assetId: bigint; owner: AccountId32; amount: bigint }>;

    /**
     * Some assets were transferred.
     **/
    Transferred: GenericPalletEvent<
      Rv,
      'Assets',
      'Transferred',
      { assetId: bigint; from: AccountId32; to: AccountId32; amount: bigint }
    >;

    /**
     * Some assets were destroyed.
     **/
    Burned: GenericPalletEvent<Rv, 'Assets', 'Burned', { assetId: bigint; owner: AccountId32; balance: bigint }>;

    /**
     * The management team changed.
     **/
    TeamChanged: GenericPalletEvent<
      Rv,
      'Assets',
      'TeamChanged',
      { assetId: bigint; issuer: AccountId32; admin: AccountId32; freezer: AccountId32 }
    >;

    /**
     * The owner changed.
     **/
    OwnerChanged: GenericPalletEvent<Rv, 'Assets', 'OwnerChanged', { assetId: bigint; owner: AccountId32 }>;

    /**
     * Some account `who` was frozen.
     **/
    Frozen: GenericPalletEvent<Rv, 'Assets', 'Frozen', { assetId: bigint; who: AccountId32 }>;

    /**
     * Some account `who` was thawed.
     **/
    Thawed: GenericPalletEvent<Rv, 'Assets', 'Thawed', { assetId: bigint; who: AccountId32 }>;

    /**
     * Some asset `asset_id` was frozen.
     **/
    AssetFrozen: GenericPalletEvent<Rv, 'Assets', 'AssetFrozen', { assetId: bigint }>;

    /**
     * Some asset `asset_id` was thawed.
     **/
    AssetThawed: GenericPalletEvent<Rv, 'Assets', 'AssetThawed', { assetId: bigint }>;

    /**
     * Accounts were destroyed for given asset.
     **/
    AccountsDestroyed: GenericPalletEvent<
      Rv,
      'Assets',
      'AccountsDestroyed',
      { assetId: bigint; accountsDestroyed: number; accountsRemaining: number }
    >;

    /**
     * Approvals were destroyed for given asset.
     **/
    ApprovalsDestroyed: GenericPalletEvent<
      Rv,
      'Assets',
      'ApprovalsDestroyed',
      { assetId: bigint; approvalsDestroyed: number; approvalsRemaining: number }
    >;

    /**
     * An asset class is in the process of being destroyed.
     **/
    DestructionStarted: GenericPalletEvent<Rv, 'Assets', 'DestructionStarted', { assetId: bigint }>;

    /**
     * An asset class was destroyed.
     **/
    Destroyed: GenericPalletEvent<Rv, 'Assets', 'Destroyed', { assetId: bigint }>;

    /**
     * Some asset class was force-created.
     **/
    ForceCreated: GenericPalletEvent<Rv, 'Assets', 'ForceCreated', { assetId: bigint; owner: AccountId32 }>;

    /**
     * New metadata has been set for an asset.
     **/
    MetadataSet: GenericPalletEvent<
      Rv,
      'Assets',
      'MetadataSet',
      { assetId: bigint; name: Bytes; symbol: Bytes; decimals: number; isFrozen: boolean }
    >;

    /**
     * Metadata has been cleared for an asset.
     **/
    MetadataCleared: GenericPalletEvent<Rv, 'Assets', 'MetadataCleared', { assetId: bigint }>;

    /**
     * (Additional) funds have been approved for transfer to a destination account.
     **/
    ApprovedTransfer: GenericPalletEvent<
      Rv,
      'Assets',
      'ApprovedTransfer',
      { assetId: bigint; source: AccountId32; delegate: AccountId32; amount: bigint }
    >;

    /**
     * An approval for account `delegate` was cancelled by `owner`.
     **/
    ApprovalCancelled: GenericPalletEvent<
      Rv,
      'Assets',
      'ApprovalCancelled',
      { assetId: bigint; owner: AccountId32; delegate: AccountId32 }
    >;

    /**
     * An `amount` was transferred in its entirety from `owner` to `destination` by
     * the approved `delegate`.
     **/
    TransferredApproved: GenericPalletEvent<
      Rv,
      'Assets',
      'TransferredApproved',
      { assetId: bigint; owner: AccountId32; delegate: AccountId32; destination: AccountId32; amount: bigint }
    >;

    /**
     * An asset has had its attributes changed by the `Force` origin.
     **/
    AssetStatusChanged: GenericPalletEvent<Rv, 'Assets', 'AssetStatusChanged', { assetId: bigint }>;

    /**
     * The min_balance of an asset has been updated by the asset owner.
     **/
    AssetMinBalanceChanged: GenericPalletEvent<
      Rv,
      'Assets',
      'AssetMinBalanceChanged',
      { assetId: bigint; newMinBalance: bigint }
    >;

    /**
     * Some account `who` was created with a deposit from `depositor`.
     **/
    Touched: GenericPalletEvent<Rv, 'Assets', 'Touched', { assetId: bigint; who: AccountId32; depositor: AccountId32 }>;

    /**
     * Some account `who` was blocked.
     **/
    Blocked: GenericPalletEvent<Rv, 'Assets', 'Blocked', { assetId: bigint; who: AccountId32 }>;

    /**
     * Some assets were deposited (e.g. for transaction fees).
     **/
    Deposited: GenericPalletEvent<Rv, 'Assets', 'Deposited', { assetId: bigint; who: AccountId32; amount: bigint }>;

    /**
     * Some assets were withdrawn from the account (e.g. for transaction fees).
     **/
    Withdrawn: GenericPalletEvent<Rv, 'Assets', 'Withdrawn', { assetId: bigint; who: AccountId32; amount: bigint }>;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `PriceAggregator`'s events
   **/
  priceAggregator: {
    /**
     * New average native currency value has been calculated and pushed into the moving average buffer.
     **/
    AverageAggregatedValue: GenericPalletEvent<Rv, 'PriceAggregator', 'AverageAggregatedValue', { value: FixedU128 }>;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Oracle`'s events
   **/
  oracle: {
    /**
     * New feed data is submitted.
     **/
    NewFeedData: GenericPalletEvent<
      Rv,
      'Oracle',
      'NewFeedData',
      { sender: AccountId32; values: Array<[AstarPrimitivesOracleCurrencyId, FixedU128]> }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `OracleMembership`'s events
   **/
  oracleMembership: {
    /**
     * The given member was added; see the transaction for who.
     **/
    MemberAdded: GenericPalletEvent<Rv, 'OracleMembership', 'MemberAdded', undefined>;

    /**
     * The given member was removed; see the transaction for who.
     **/
    MemberRemoved: GenericPalletEvent<Rv, 'OracleMembership', 'MemberRemoved', undefined>;

    /**
     * Two members were swapped; see the transaction for who.
     **/
    MembersSwapped: GenericPalletEvent<Rv, 'OracleMembership', 'MembersSwapped', undefined>;

    /**
     * The membership was reset; see the transaction for who the new set is.
     **/
    MembersReset: GenericPalletEvent<Rv, 'OracleMembership', 'MembersReset', undefined>;

    /**
     * One of the members' keys changed.
     **/
    KeyChanged: GenericPalletEvent<Rv, 'OracleMembership', 'KeyChanged', undefined>;

    /**
     * Phantom member, never used.
     **/
    Dummy: GenericPalletEvent<Rv, 'OracleMembership', 'Dummy', undefined>;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `CollatorSelection`'s events
   **/
  collatorSelection: {
    /**
     * New invulnerables candidates were set.
     **/
    NewInvulnerables: GenericPalletEvent<Rv, 'CollatorSelection', 'NewInvulnerables', Array<AccountId32>>;

    /**
     * The number of desired candidates was set.
     **/
    NewDesiredCandidates: GenericPalletEvent<Rv, 'CollatorSelection', 'NewDesiredCandidates', number>;

    /**
     * The candidacy bond was set.
     **/
    NewCandidacyBond: GenericPalletEvent<Rv, 'CollatorSelection', 'NewCandidacyBond', bigint>;

    /**
     * A new candidate joined.
     **/
    CandidateAdded: GenericPalletEvent<Rv, 'CollatorSelection', 'CandidateAdded', [AccountId32, bigint]>;

    /**
     * A candidate was removed.
     **/
    CandidateRemoved: GenericPalletEvent<Rv, 'CollatorSelection', 'CandidateRemoved', AccountId32>;

    /**
     * A candidate was slashed.
     **/
    CandidateSlashed: GenericPalletEvent<Rv, 'CollatorSelection', 'CandidateSlashed', AccountId32>;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Session`'s events
   **/
  session: {
    /**
     * New session has happened. Note that the argument is the session index, not the
     * block number as the type might suggest.
     **/
    NewSession: GenericPalletEvent<Rv, 'Session', 'NewSession', { sessionIndex: number }>;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `XcmpQueue`'s events
   **/
  xcmpQueue: {
    /**
     * An HRMP message was sent to a sibling parachain.
     **/
    XcmpMessageSent: GenericPalletEvent<Rv, 'XcmpQueue', 'XcmpMessageSent', { messageHash: FixedBytes<32> }>;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `PolkadotXcm`'s events
   **/
  polkadotXcm: {
    /**
     * Execution of an XCM message was attempted.
     **/
    Attempted: GenericPalletEvent<Rv, 'PolkadotXcm', 'Attempted', { outcome: StagingXcmV4TraitsOutcome }>;

    /**
     * A XCM message was sent.
     **/
    Sent: GenericPalletEvent<
      Rv,
      'PolkadotXcm',
      'Sent',
      {
        origin: StagingXcmV4Location;
        destination: StagingXcmV4Location;
        message: StagingXcmV4Xcm;
        messageId: FixedBytes<32>;
      }
    >;

    /**
     * Query response received which does not match a registered query. This may be because a
     * matching query was never registered, it may be because it is a duplicate response, or
     * because the query timed out.
     **/
    UnexpectedResponse: GenericPalletEvent<
      Rv,
      'PolkadotXcm',
      'UnexpectedResponse',
      { origin: StagingXcmV4Location; queryId: bigint }
    >;

    /**
     * Query response has been received and is ready for taking with `take_response`. There is
     * no registered notification call.
     **/
    ResponseReady: GenericPalletEvent<
      Rv,
      'PolkadotXcm',
      'ResponseReady',
      { queryId: bigint; response: StagingXcmV4Response }
    >;

    /**
     * Query response has been received and query is removed. The registered notification has
     * been dispatched and executed successfully.
     **/
    Notified: GenericPalletEvent<
      Rv,
      'PolkadotXcm',
      'Notified',
      { queryId: bigint; palletIndex: number; callIndex: number }
    >;

    /**
     * Query response has been received and query is removed. The registered notification
     * could not be dispatched because the dispatch weight is greater than the maximum weight
     * originally budgeted by this runtime for the query result.
     **/
    NotifyOverweight: GenericPalletEvent<
      Rv,
      'PolkadotXcm',
      'NotifyOverweight',
      {
        queryId: bigint;
        palletIndex: number;
        callIndex: number;
        actualWeight: SpWeightsWeightV2Weight;
        maxBudgetedWeight: SpWeightsWeightV2Weight;
      }
    >;

    /**
     * Query response has been received and query is removed. There was a general error with
     * dispatching the notification call.
     **/
    NotifyDispatchError: GenericPalletEvent<
      Rv,
      'PolkadotXcm',
      'NotifyDispatchError',
      { queryId: bigint; palletIndex: number; callIndex: number }
    >;

    /**
     * Query response has been received and query is removed. The dispatch was unable to be
     * decoded into a `Call`; this might be due to dispatch function having a signature which
     * is not `(origin, QueryId, Response)`.
     **/
    NotifyDecodeFailed: GenericPalletEvent<
      Rv,
      'PolkadotXcm',
      'NotifyDecodeFailed',
      { queryId: bigint; palletIndex: number; callIndex: number }
    >;

    /**
     * Expected query response has been received but the origin location of the response does
     * not match that expected. The query remains registered for a later, valid, response to
     * be received and acted upon.
     **/
    InvalidResponder: GenericPalletEvent<
      Rv,
      'PolkadotXcm',
      'InvalidResponder',
      { origin: StagingXcmV4Location; queryId: bigint; expectedLocation?: StagingXcmV4Location | undefined }
    >;

    /**
     * Expected query response has been received but the expected origin location placed in
     * storage by this runtime previously cannot be decoded. The query remains registered.
     *
     * This is unexpected (since a location placed in storage in a previously executing
     * runtime should be readable prior to query timeout) and dangerous since the possibly
     * valid response will be dropped. Manual governance intervention is probably going to be
     * needed.
     **/
    InvalidResponderVersion: GenericPalletEvent<
      Rv,
      'PolkadotXcm',
      'InvalidResponderVersion',
      { origin: StagingXcmV4Location; queryId: bigint }
    >;

    /**
     * Received query response has been read and removed.
     **/
    ResponseTaken: GenericPalletEvent<Rv, 'PolkadotXcm', 'ResponseTaken', { queryId: bigint }>;

    /**
     * Some assets have been placed in an asset trap.
     **/
    AssetsTrapped: GenericPalletEvent<
      Rv,
      'PolkadotXcm',
      'AssetsTrapped',
      { hash: H256; origin: StagingXcmV4Location; assets: XcmVersionedAssets }
    >;

    /**
     * An XCM version change notification message has been attempted to be sent.
     *
     * The cost of sending it (borne by the chain) is included.
     **/
    VersionChangeNotified: GenericPalletEvent<
      Rv,
      'PolkadotXcm',
      'VersionChangeNotified',
      { destination: StagingXcmV4Location; result: number; cost: StagingXcmV4AssetAssets; messageId: FixedBytes<32> }
    >;

    /**
     * The supported version of a location has been changed. This might be through an
     * automatic notification or a manual intervention.
     **/
    SupportedVersionChanged: GenericPalletEvent<
      Rv,
      'PolkadotXcm',
      'SupportedVersionChanged',
      { location: StagingXcmV4Location; version: number }
    >;

    /**
     * A given location which had a version change subscription was dropped owing to an error
     * sending the notification to it.
     **/
    NotifyTargetSendFail: GenericPalletEvent<
      Rv,
      'PolkadotXcm',
      'NotifyTargetSendFail',
      { location: StagingXcmV4Location; queryId: bigint; error: XcmV3TraitsError }
    >;

    /**
     * A given location which had a version change subscription was dropped owing to an error
     * migrating the location to our new XCM format.
     **/
    NotifyTargetMigrationFail: GenericPalletEvent<
      Rv,
      'PolkadotXcm',
      'NotifyTargetMigrationFail',
      { location: XcmVersionedLocation; queryId: bigint }
    >;

    /**
     * Expected query response has been received but the expected querier location placed in
     * storage by this runtime previously cannot be decoded. The query remains registered.
     *
     * This is unexpected (since a location placed in storage in a previously executing
     * runtime should be readable prior to query timeout) and dangerous since the possibly
     * valid response will be dropped. Manual governance intervention is probably going to be
     * needed.
     **/
    InvalidQuerierVersion: GenericPalletEvent<
      Rv,
      'PolkadotXcm',
      'InvalidQuerierVersion',
      { origin: StagingXcmV4Location; queryId: bigint }
    >;

    /**
     * Expected query response has been received but the querier location of the response does
     * not match the expected. The query remains registered for a later, valid, response to
     * be received and acted upon.
     **/
    InvalidQuerier: GenericPalletEvent<
      Rv,
      'PolkadotXcm',
      'InvalidQuerier',
      {
        origin: StagingXcmV4Location;
        queryId: bigint;
        expectedQuerier: StagingXcmV4Location;
        maybeActualQuerier?: StagingXcmV4Location | undefined;
      }
    >;

    /**
     * A remote has requested XCM version change notification from us and we have honored it.
     * A version information message is sent to them and its cost is included.
     **/
    VersionNotifyStarted: GenericPalletEvent<
      Rv,
      'PolkadotXcm',
      'VersionNotifyStarted',
      { destination: StagingXcmV4Location; cost: StagingXcmV4AssetAssets; messageId: FixedBytes<32> }
    >;

    /**
     * We have requested that a remote chain send us XCM version change notifications.
     **/
    VersionNotifyRequested: GenericPalletEvent<
      Rv,
      'PolkadotXcm',
      'VersionNotifyRequested',
      { destination: StagingXcmV4Location; cost: StagingXcmV4AssetAssets; messageId: FixedBytes<32> }
    >;

    /**
     * We have requested that a remote chain stops sending us XCM version change
     * notifications.
     **/
    VersionNotifyUnrequested: GenericPalletEvent<
      Rv,
      'PolkadotXcm',
      'VersionNotifyUnrequested',
      { destination: StagingXcmV4Location; cost: StagingXcmV4AssetAssets; messageId: FixedBytes<32> }
    >;

    /**
     * Fees were paid from a location for an operation (often for using `SendXcm`).
     **/
    FeesPaid: GenericPalletEvent<
      Rv,
      'PolkadotXcm',
      'FeesPaid',
      { paying: StagingXcmV4Location; fees: StagingXcmV4AssetAssets }
    >;

    /**
     * Some assets have been claimed from an asset trap
     **/
    AssetsClaimed: GenericPalletEvent<
      Rv,
      'PolkadotXcm',
      'AssetsClaimed',
      { hash: H256; origin: StagingXcmV4Location; assets: XcmVersionedAssets }
    >;

    /**
     * A XCM version migration finished.
     **/
    VersionMigrationFinished: GenericPalletEvent<Rv, 'PolkadotXcm', 'VersionMigrationFinished', { version: number }>;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `CumulusXcm`'s events
   **/
  cumulusXcm: {
    /**
     * Downward message is invalid XCM.
     * \[ id \]
     **/
    InvalidFormat: GenericPalletEvent<Rv, 'CumulusXcm', 'InvalidFormat', FixedBytes<32>>;

    /**
     * Downward message is unsupported version of XCM.
     * \[ id \]
     **/
    UnsupportedVersion: GenericPalletEvent<Rv, 'CumulusXcm', 'UnsupportedVersion', FixedBytes<32>>;

    /**
     * Downward message executed with the given outcome.
     * \[ id, outcome \]
     **/
    ExecutedDownward: GenericPalletEvent<
      Rv,
      'CumulusXcm',
      'ExecutedDownward',
      [FixedBytes<32>, StagingXcmV4TraitsOutcome]
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `XcAssetConfig`'s events
   **/
  xcAssetConfig: {
    /**
     * Registed mapping between asset type and asset Id.
     **/
    AssetRegistered: GenericPalletEvent<
      Rv,
      'XcAssetConfig',
      'AssetRegistered',
      { assetLocation: XcmVersionedLocation; assetId: bigint }
    >;

    /**
     * Changed the amount of units we are charging per execution second for an asset
     **/
    UnitsPerSecondChanged: GenericPalletEvent<
      Rv,
      'XcAssetConfig',
      'UnitsPerSecondChanged',
      { assetLocation: XcmVersionedLocation; unitsPerSecond: bigint }
    >;

    /**
     * Changed the asset type mapping for a given asset id
     **/
    AssetLocationChanged: GenericPalletEvent<
      Rv,
      'XcAssetConfig',
      'AssetLocationChanged',
      { previousAssetLocation: XcmVersionedLocation; assetId: bigint; newAssetLocation: XcmVersionedLocation }
    >;

    /**
     * Supported asset type for fee payment removed.
     **/
    SupportedAssetRemoved: GenericPalletEvent<
      Rv,
      'XcAssetConfig',
      'SupportedAssetRemoved',
      { assetLocation: XcmVersionedLocation }
    >;

    /**
     * Removed all information related to an asset Id
     **/
    AssetRemoved: GenericPalletEvent<
      Rv,
      'XcAssetConfig',
      'AssetRemoved',
      { assetLocation: XcmVersionedLocation; assetId: bigint }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `XTokens`'s events
   **/
  xTokens: {
    /**
     * Transferred `Asset` with fee.
     **/
    TransferredAssets: GenericPalletEvent<
      Rv,
      'XTokens',
      'TransferredAssets',
      { sender: AccountId32; assets: StagingXcmV4AssetAssets; fee: StagingXcmV4Asset; dest: StagingXcmV4Location }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `MessageQueue`'s events
   **/
  messageQueue: {
    /**
     * Message discarded due to an error in the `MessageProcessor` (usually a format error).
     **/
    ProcessingFailed: GenericPalletEvent<
      Rv,
      'MessageQueue',
      'ProcessingFailed',
      {
        /**
         * The `blake2_256` hash of the message.
         **/
        id: H256;

        /**
         * The queue of the message.
         **/
        origin: CumulusPrimitivesCoreAggregateMessageOrigin;

        /**
         * The error that occurred.
         *
         * This error is pretty opaque. More fine-grained errors need to be emitted as events
         * by the `MessageProcessor`.
         **/
        error: FrameSupportMessagesProcessMessageError;
      }
    >;

    /**
     * Message is processed.
     **/
    Processed: GenericPalletEvent<
      Rv,
      'MessageQueue',
      'Processed',
      {
        /**
         * The `blake2_256` hash of the message.
         **/
        id: H256;

        /**
         * The queue of the message.
         **/
        origin: CumulusPrimitivesCoreAggregateMessageOrigin;

        /**
         * How much weight was used to process the message.
         **/
        weightUsed: SpWeightsWeightV2Weight;

        /**
         * Whether the message was processed.
         *
         * Note that this does not mean that the underlying `MessageProcessor` was internally
         * successful. It *solely* means that the MQ pallet will treat this as a success
         * condition and discard the message. Any internal error needs to be emitted as events
         * by the `MessageProcessor`.
         **/
        success: boolean;
      }
    >;

    /**
     * Message placed in overweight queue.
     **/
    OverweightEnqueued: GenericPalletEvent<
      Rv,
      'MessageQueue',
      'OverweightEnqueued',
      {
        /**
         * The `blake2_256` hash of the message.
         **/
        id: FixedBytes<32>;

        /**
         * The queue of the message.
         **/
        origin: CumulusPrimitivesCoreAggregateMessageOrigin;

        /**
         * The page of the message.
         **/
        pageIndex: number;

        /**
         * The index of the message within the page.
         **/
        messageIndex: number;
      }
    >;

    /**
     * This page was reaped.
     **/
    PageReaped: GenericPalletEvent<
      Rv,
      'MessageQueue',
      'PageReaped',
      {
        /**
         * The queue of the page.
         **/
        origin: CumulusPrimitivesCoreAggregateMessageOrigin;

        /**
         * The index of the page.
         **/
        index: number;
      }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `EVM`'s events
   **/
  evm: {
    /**
     * Ethereum events from contracts.
     **/
    Log: GenericPalletEvent<Rv, 'EVM', 'Log', { log: EthereumLog }>;

    /**
     * A contract has been created at given address.
     **/
    Created: GenericPalletEvent<Rv, 'EVM', 'Created', { address: H160 }>;

    /**
     * A contract was attempted to be created, but the execution failed.
     **/
    CreatedFailed: GenericPalletEvent<Rv, 'EVM', 'CreatedFailed', { address: H160 }>;

    /**
     * A contract has been executed successfully with states applied.
     **/
    Executed: GenericPalletEvent<Rv, 'EVM', 'Executed', { address: H160 }>;

    /**
     * A contract has been executed with errors. States are reverted with only gas fees applied.
     **/
    ExecutedFailed: GenericPalletEvent<Rv, 'EVM', 'ExecutedFailed', { address: H160 }>;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Ethereum`'s events
   **/
  ethereum: {
    /**
     * An ethereum transaction was successfully executed.
     **/
    Executed: GenericPalletEvent<
      Rv,
      'Ethereum',
      'Executed',
      { from: H160; to: H160; transactionHash: H256; exitReason: EvmCoreErrorExitReason; extraData: Bytes }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `DynamicEvmBaseFee`'s events
   **/
  dynamicEvmBaseFee: {
    /**
     * New `base fee per gas` value has been force-set.
     **/
    NewBaseFeePerGas: GenericPalletEvent<Rv, 'DynamicEvmBaseFee', 'NewBaseFeePerGas', { fee: U256 }>;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Contracts`'s events
   **/
  contracts: {
    /**
     * Contract deployed by address at the specified address.
     **/
    Instantiated: GenericPalletEvent<Rv, 'Contracts', 'Instantiated', { deployer: AccountId32; contract: AccountId32 }>;

    /**
     * Contract has been removed.
     *
     * # Note
     *
     * The only way for a contract to be removed and emitting this event is by calling
     * `seal_terminate`.
     **/
    Terminated: GenericPalletEvent<
      Rv,
      'Contracts',
      'Terminated',
      {
        /**
         * The contract that was terminated.
         **/
        contract: AccountId32;

        /**
         * The account that received the contracts remaining balance
         **/
        beneficiary: AccountId32;
      }
    >;

    /**
     * Code with the specified hash has been stored.
     **/
    CodeStored: GenericPalletEvent<
      Rv,
      'Contracts',
      'CodeStored',
      { codeHash: H256; depositHeld: bigint; uploader: AccountId32 }
    >;

    /**
     * A custom event emitted by the contract.
     **/
    ContractEmitted: GenericPalletEvent<
      Rv,
      'Contracts',
      'ContractEmitted',
      {
        /**
         * The contract that emitted the event.
         **/
        contract: AccountId32;

        /**
         * Data supplied by the contract. Metadata generated during contract compilation
         * is needed to decode it.
         **/
        data: Bytes;
      }
    >;

    /**
     * A code with the specified hash was removed.
     **/
    CodeRemoved: GenericPalletEvent<
      Rv,
      'Contracts',
      'CodeRemoved',
      { codeHash: H256; depositReleased: bigint; remover: AccountId32 }
    >;

    /**
     * A contract's code was updated.
     **/
    ContractCodeUpdated: GenericPalletEvent<
      Rv,
      'Contracts',
      'ContractCodeUpdated',
      {
        /**
         * The contract that has been updated.
         **/
        contract: AccountId32;

        /**
         * New code hash that was set for the contract.
         **/
        newCodeHash: H256;

        /**
         * Previous code hash of the contract.
         **/
        oldCodeHash: H256;
      }
    >;

    /**
     * A contract was called either by a plain account or another contract.
     *
     * # Note
     *
     * Please keep in mind that like all events this is only emitted for successful
     * calls. This is because on failure all storage changes including events are
     * rolled back.
     **/
    Called: GenericPalletEvent<
      Rv,
      'Contracts',
      'Called',
      {
        /**
         * The caller of the `contract`.
         **/
        caller: PalletContractsOrigin;

        /**
         * The contract that was called.
         **/
        contract: AccountId32;
      }
    >;

    /**
     * A contract delegate called a code hash.
     *
     * # Note
     *
     * Please keep in mind that like all events this is only emitted for successful
     * calls. This is because on failure all storage changes including events are
     * rolled back.
     **/
    DelegateCalled: GenericPalletEvent<
      Rv,
      'Contracts',
      'DelegateCalled',
      {
        /**
         * The contract that performed the delegate call and hence in whose context
         * the `code_hash` is executed.
         **/
        contract: AccountId32;

        /**
         * The code hash that was delegate called.
         **/
        codeHash: H256;
      }
    >;

    /**
     * Some funds have been transferred and held as storage deposit.
     **/
    StorageDepositTransferredAndHeld: GenericPalletEvent<
      Rv,
      'Contracts',
      'StorageDepositTransferredAndHeld',
      { from: AccountId32; to: AccountId32; amount: bigint }
    >;

    /**
     * Some storage deposit funds have been transferred and released.
     **/
    StorageDepositTransferredAndReleased: GenericPalletEvent<
      Rv,
      'Contracts',
      'StorageDepositTransferredAndReleased',
      { from: AccountId32; to: AccountId32; amount: bigint }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Preimage`'s events
   **/
  preimage: {
    /**
     * A preimage has been noted.
     **/
    Noted: GenericPalletEvent<Rv, 'Preimage', 'Noted', { hash: H256 }>;

    /**
     * A preimage has been requested.
     **/
    Requested: GenericPalletEvent<Rv, 'Preimage', 'Requested', { hash: H256 }>;

    /**
     * A preimage has ben cleared.
     **/
    Cleared: GenericPalletEvent<Rv, 'Preimage', 'Cleared', { hash: H256 }>;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Sudo`'s events
   **/
  sudo: {
    /**
     * A sudo call just took place.
     **/
    Sudid: GenericPalletEvent<
      Rv,
      'Sudo',
      'Sudid',
      {
        /**
         * The result of the call made by the sudo user.
         **/
        sudoResult: Result<[], DispatchError>;
      }
    >;

    /**
     * The sudo key has been updated.
     **/
    KeyChanged: GenericPalletEvent<
      Rv,
      'Sudo',
      'KeyChanged',
      {
        /**
         * The old sudo key (if one was previously set).
         **/
        old?: AccountId32 | undefined;

        /**
         * The new sudo key (if one was set).
         **/
        new: AccountId32;
      }
    >;

    /**
     * The key was permanently removed.
     **/
    KeyRemoved: GenericPalletEvent<Rv, 'Sudo', 'KeyRemoved', null>;

    /**
     * A [sudo_as](Pallet::sudo_as) call just took place.
     **/
    SudoAsDone: GenericPalletEvent<
      Rv,
      'Sudo',
      'SudoAsDone',
      {
        /**
         * The result of the call made by the sudo user.
         **/
        sudoResult: Result<[], DispatchError>;
      }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `CouncilMembership`'s events
   **/
  councilMembership: {
    /**
     * The given member was added; see the transaction for who.
     **/
    MemberAdded: GenericPalletEvent<Rv, 'CouncilMembership', 'MemberAdded', undefined>;

    /**
     * The given member was removed; see the transaction for who.
     **/
    MemberRemoved: GenericPalletEvent<Rv, 'CouncilMembership', 'MemberRemoved', undefined>;

    /**
     * Two members were swapped; see the transaction for who.
     **/
    MembersSwapped: GenericPalletEvent<Rv, 'CouncilMembership', 'MembersSwapped', undefined>;

    /**
     * The membership was reset; see the transaction for who the new set is.
     **/
    MembersReset: GenericPalletEvent<Rv, 'CouncilMembership', 'MembersReset', undefined>;

    /**
     * One of the members' keys changed.
     **/
    KeyChanged: GenericPalletEvent<Rv, 'CouncilMembership', 'KeyChanged', undefined>;

    /**
     * Phantom member, never used.
     **/
    Dummy: GenericPalletEvent<Rv, 'CouncilMembership', 'Dummy', undefined>;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `TechnicalCommitteeMembership`'s events
   **/
  technicalCommitteeMembership: {
    /**
     * The given member was added; see the transaction for who.
     **/
    MemberAdded: GenericPalletEvent<Rv, 'TechnicalCommitteeMembership', 'MemberAdded', undefined>;

    /**
     * The given member was removed; see the transaction for who.
     **/
    MemberRemoved: GenericPalletEvent<Rv, 'TechnicalCommitteeMembership', 'MemberRemoved', undefined>;

    /**
     * Two members were swapped; see the transaction for who.
     **/
    MembersSwapped: GenericPalletEvent<Rv, 'TechnicalCommitteeMembership', 'MembersSwapped', undefined>;

    /**
     * The membership was reset; see the transaction for who the new set is.
     **/
    MembersReset: GenericPalletEvent<Rv, 'TechnicalCommitteeMembership', 'MembersReset', undefined>;

    /**
     * One of the members' keys changed.
     **/
    KeyChanged: GenericPalletEvent<Rv, 'TechnicalCommitteeMembership', 'KeyChanged', undefined>;

    /**
     * Phantom member, never used.
     **/
    Dummy: GenericPalletEvent<Rv, 'TechnicalCommitteeMembership', 'Dummy', undefined>;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `CommunityCouncilMembership`'s events
   **/
  communityCouncilMembership: {
    /**
     * The given member was added; see the transaction for who.
     **/
    MemberAdded: GenericPalletEvent<Rv, 'CommunityCouncilMembership', 'MemberAdded', undefined>;

    /**
     * The given member was removed; see the transaction for who.
     **/
    MemberRemoved: GenericPalletEvent<Rv, 'CommunityCouncilMembership', 'MemberRemoved', undefined>;

    /**
     * Two members were swapped; see the transaction for who.
     **/
    MembersSwapped: GenericPalletEvent<Rv, 'CommunityCouncilMembership', 'MembersSwapped', undefined>;

    /**
     * The membership was reset; see the transaction for who the new set is.
     **/
    MembersReset: GenericPalletEvent<Rv, 'CommunityCouncilMembership', 'MembersReset', undefined>;

    /**
     * One of the members' keys changed.
     **/
    KeyChanged: GenericPalletEvent<Rv, 'CommunityCouncilMembership', 'KeyChanged', undefined>;

    /**
     * Phantom member, never used.
     **/
    Dummy: GenericPalletEvent<Rv, 'CommunityCouncilMembership', 'Dummy', undefined>;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Council`'s events
   **/
  council: {
    /**
     * A motion (given hash) has been proposed (by given account) with a threshold (given
     * `MemberCount`).
     **/
    Proposed: GenericPalletEvent<
      Rv,
      'Council',
      'Proposed',
      { account: AccountId32; proposalIndex: number; proposalHash: H256; threshold: number }
    >;

    /**
     * A motion (given hash) has been voted on by given account, leaving
     * a tally (yes votes and no votes given respectively as `MemberCount`).
     **/
    Voted: GenericPalletEvent<
      Rv,
      'Council',
      'Voted',
      { account: AccountId32; proposalHash: H256; voted: boolean; yes: number; no: number }
    >;

    /**
     * A motion was approved by the required threshold.
     **/
    Approved: GenericPalletEvent<Rv, 'Council', 'Approved', { proposalHash: H256 }>;

    /**
     * A motion was not approved by the required threshold.
     **/
    Disapproved: GenericPalletEvent<Rv, 'Council', 'Disapproved', { proposalHash: H256 }>;

    /**
     * A motion was executed; result will be `Ok` if it returned without error.
     **/
    Executed: GenericPalletEvent<Rv, 'Council', 'Executed', { proposalHash: H256; result: Result<[], DispatchError> }>;

    /**
     * A single member did some action; result will be `Ok` if it returned without error.
     **/
    MemberExecuted: GenericPalletEvent<
      Rv,
      'Council',
      'MemberExecuted',
      { proposalHash: H256; result: Result<[], DispatchError> }
    >;

    /**
     * A proposal was closed because its threshold was reached or after its duration was up.
     **/
    Closed: GenericPalletEvent<Rv, 'Council', 'Closed', { proposalHash: H256; yes: number; no: number }>;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `TechnicalCommittee`'s events
   **/
  technicalCommittee: {
    /**
     * A motion (given hash) has been proposed (by given account) with a threshold (given
     * `MemberCount`).
     **/
    Proposed: GenericPalletEvent<
      Rv,
      'TechnicalCommittee',
      'Proposed',
      { account: AccountId32; proposalIndex: number; proposalHash: H256; threshold: number }
    >;

    /**
     * A motion (given hash) has been voted on by given account, leaving
     * a tally (yes votes and no votes given respectively as `MemberCount`).
     **/
    Voted: GenericPalletEvent<
      Rv,
      'TechnicalCommittee',
      'Voted',
      { account: AccountId32; proposalHash: H256; voted: boolean; yes: number; no: number }
    >;

    /**
     * A motion was approved by the required threshold.
     **/
    Approved: GenericPalletEvent<Rv, 'TechnicalCommittee', 'Approved', { proposalHash: H256 }>;

    /**
     * A motion was not approved by the required threshold.
     **/
    Disapproved: GenericPalletEvent<Rv, 'TechnicalCommittee', 'Disapproved', { proposalHash: H256 }>;

    /**
     * A motion was executed; result will be `Ok` if it returned without error.
     **/
    Executed: GenericPalletEvent<
      Rv,
      'TechnicalCommittee',
      'Executed',
      { proposalHash: H256; result: Result<[], DispatchError> }
    >;

    /**
     * A single member did some action; result will be `Ok` if it returned without error.
     **/
    MemberExecuted: GenericPalletEvent<
      Rv,
      'TechnicalCommittee',
      'MemberExecuted',
      { proposalHash: H256; result: Result<[], DispatchError> }
    >;

    /**
     * A proposal was closed because its threshold was reached or after its duration was up.
     **/
    Closed: GenericPalletEvent<Rv, 'TechnicalCommittee', 'Closed', { proposalHash: H256; yes: number; no: number }>;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `CommunityCouncil`'s events
   **/
  communityCouncil: {
    /**
     * A motion (given hash) has been proposed (by given account) with a threshold (given
     * `MemberCount`).
     **/
    Proposed: GenericPalletEvent<
      Rv,
      'CommunityCouncil',
      'Proposed',
      { account: AccountId32; proposalIndex: number; proposalHash: H256; threshold: number }
    >;

    /**
     * A motion (given hash) has been voted on by given account, leaving
     * a tally (yes votes and no votes given respectively as `MemberCount`).
     **/
    Voted: GenericPalletEvent<
      Rv,
      'CommunityCouncil',
      'Voted',
      { account: AccountId32; proposalHash: H256; voted: boolean; yes: number; no: number }
    >;

    /**
     * A motion was approved by the required threshold.
     **/
    Approved: GenericPalletEvent<Rv, 'CommunityCouncil', 'Approved', { proposalHash: H256 }>;

    /**
     * A motion was not approved by the required threshold.
     **/
    Disapproved: GenericPalletEvent<Rv, 'CommunityCouncil', 'Disapproved', { proposalHash: H256 }>;

    /**
     * A motion was executed; result will be `Ok` if it returned without error.
     **/
    Executed: GenericPalletEvent<
      Rv,
      'CommunityCouncil',
      'Executed',
      { proposalHash: H256; result: Result<[], DispatchError> }
    >;

    /**
     * A single member did some action; result will be `Ok` if it returned without error.
     **/
    MemberExecuted: GenericPalletEvent<
      Rv,
      'CommunityCouncil',
      'MemberExecuted',
      { proposalHash: H256; result: Result<[], DispatchError> }
    >;

    /**
     * A proposal was closed because its threshold was reached or after its duration was up.
     **/
    Closed: GenericPalletEvent<Rv, 'CommunityCouncil', 'Closed', { proposalHash: H256; yes: number; no: number }>;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Democracy`'s events
   **/
  democracy: {
    /**
     * A motion has been proposed by a public account.
     **/
    Proposed: GenericPalletEvent<Rv, 'Democracy', 'Proposed', { proposalIndex: number; deposit: bigint }>;

    /**
     * A public proposal has been tabled for referendum vote.
     **/
    Tabled: GenericPalletEvent<Rv, 'Democracy', 'Tabled', { proposalIndex: number; deposit: bigint }>;

    /**
     * An external proposal has been tabled.
     **/
    ExternalTabled: GenericPalletEvent<Rv, 'Democracy', 'ExternalTabled', null>;

    /**
     * A referendum has begun.
     **/
    Started: GenericPalletEvent<
      Rv,
      'Democracy',
      'Started',
      { refIndex: number; threshold: PalletDemocracyVoteThreshold }
    >;

    /**
     * A proposal has been approved by referendum.
     **/
    Passed: GenericPalletEvent<Rv, 'Democracy', 'Passed', { refIndex: number }>;

    /**
     * A proposal has been rejected by referendum.
     **/
    NotPassed: GenericPalletEvent<Rv, 'Democracy', 'NotPassed', { refIndex: number }>;

    /**
     * A referendum has been cancelled.
     **/
    Cancelled: GenericPalletEvent<Rv, 'Democracy', 'Cancelled', { refIndex: number }>;

    /**
     * An account has delegated their vote to another account.
     **/
    Delegated: GenericPalletEvent<Rv, 'Democracy', 'Delegated', { who: AccountId32; target: AccountId32 }>;

    /**
     * An account has cancelled a previous delegation operation.
     **/
    Undelegated: GenericPalletEvent<Rv, 'Democracy', 'Undelegated', { account: AccountId32 }>;

    /**
     * An external proposal has been vetoed.
     **/
    Vetoed: GenericPalletEvent<Rv, 'Democracy', 'Vetoed', { who: AccountId32; proposalHash: H256; until: number }>;

    /**
     * A proposal_hash has been blacklisted permanently.
     **/
    Blacklisted: GenericPalletEvent<Rv, 'Democracy', 'Blacklisted', { proposalHash: H256 }>;

    /**
     * An account has voted in a referendum
     **/
    Voted: GenericPalletEvent<
      Rv,
      'Democracy',
      'Voted',
      { voter: AccountId32; refIndex: number; vote: PalletDemocracyVoteAccountVote }
    >;

    /**
     * An account has seconded a proposal
     **/
    Seconded: GenericPalletEvent<Rv, 'Democracy', 'Seconded', { seconder: AccountId32; propIndex: number }>;

    /**
     * A proposal got canceled.
     **/
    ProposalCanceled: GenericPalletEvent<Rv, 'Democracy', 'ProposalCanceled', { propIndex: number }>;

    /**
     * Metadata for a proposal or a referendum has been set.
     **/
    MetadataSet: GenericPalletEvent<
      Rv,
      'Democracy',
      'MetadataSet',
      {
        /**
         * Metadata owner.
         **/
        owner: PalletDemocracyMetadataOwner;

        /**
         * Preimage hash.
         **/
        hash: H256;
      }
    >;

    /**
     * Metadata for a proposal or a referendum has been cleared.
     **/
    MetadataCleared: GenericPalletEvent<
      Rv,
      'Democracy',
      'MetadataCleared',
      {
        /**
         * Metadata owner.
         **/
        owner: PalletDemocracyMetadataOwner;

        /**
         * Preimage hash.
         **/
        hash: H256;
      }
    >;

    /**
     * Metadata has been transferred to new owner.
     **/
    MetadataTransferred: GenericPalletEvent<
      Rv,
      'Democracy',
      'MetadataTransferred',
      {
        /**
         * Previous metadata owner.
         **/
        prevOwner: PalletDemocracyMetadataOwner;

        /**
         * New metadata owner.
         **/
        owner: PalletDemocracyMetadataOwner;

        /**
         * Preimage hash.
         **/
        hash: H256;
      }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Treasury`'s events
   **/
  treasury: {
    /**
     * New proposal.
     **/
    Proposed: GenericPalletEvent<Rv, 'Treasury', 'Proposed', { proposalIndex: number }>;

    /**
     * We have ended a spend period and will now allocate funds.
     **/
    Spending: GenericPalletEvent<Rv, 'Treasury', 'Spending', { budgetRemaining: bigint }>;

    /**
     * Some funds have been allocated.
     **/
    Awarded: GenericPalletEvent<
      Rv,
      'Treasury',
      'Awarded',
      { proposalIndex: number; award: bigint; account: AccountId32 }
    >;

    /**
     * A proposal was rejected; funds were slashed.
     **/
    Rejected: GenericPalletEvent<Rv, 'Treasury', 'Rejected', { proposalIndex: number; slashed: bigint }>;

    /**
     * Some of our funds have been burnt.
     **/
    Burnt: GenericPalletEvent<Rv, 'Treasury', 'Burnt', { burntFunds: bigint }>;

    /**
     * Spending has finished; this is the amount that rolls over until next spend.
     **/
    Rollover: GenericPalletEvent<Rv, 'Treasury', 'Rollover', { rolloverBalance: bigint }>;

    /**
     * Some funds have been deposited.
     **/
    Deposit: GenericPalletEvent<Rv, 'Treasury', 'Deposit', { value: bigint }>;

    /**
     * A new spend proposal has been approved.
     **/
    SpendApproved: GenericPalletEvent<
      Rv,
      'Treasury',
      'SpendApproved',
      { proposalIndex: number; amount: bigint; beneficiary: AccountId32 }
    >;

    /**
     * The inactive funds of the pallet have been updated.
     **/
    UpdatedInactive: GenericPalletEvent<
      Rv,
      'Treasury',
      'UpdatedInactive',
      { reactivated: bigint; deactivated: bigint }
    >;

    /**
     * A new asset spend proposal has been approved.
     **/
    AssetSpendApproved: GenericPalletEvent<
      Rv,
      'Treasury',
      'AssetSpendApproved',
      { index: number; assetKind: []; amount: bigint; beneficiary: AccountId32; validFrom: number; expireAt: number }
    >;

    /**
     * An approved spend was voided.
     **/
    AssetSpendVoided: GenericPalletEvent<Rv, 'Treasury', 'AssetSpendVoided', { index: number }>;

    /**
     * A payment happened.
     **/
    Paid: GenericPalletEvent<Rv, 'Treasury', 'Paid', { index: number; paymentId: [] }>;

    /**
     * A payment failed and can be retried.
     **/
    PaymentFailed: GenericPalletEvent<Rv, 'Treasury', 'PaymentFailed', { index: number; paymentId: [] }>;

    /**
     * A spend was processed and removed from the storage. It might have been successfully
     * paid or it may have expired.
     **/
    SpendProcessed: GenericPalletEvent<Rv, 'Treasury', 'SpendProcessed', { index: number }>;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `CommunityTreasury`'s events
   **/
  communityTreasury: {
    /**
     * New proposal.
     **/
    Proposed: GenericPalletEvent<Rv, 'CommunityTreasury', 'Proposed', { proposalIndex: number }>;

    /**
     * We have ended a spend period and will now allocate funds.
     **/
    Spending: GenericPalletEvent<Rv, 'CommunityTreasury', 'Spending', { budgetRemaining: bigint }>;

    /**
     * Some funds have been allocated.
     **/
    Awarded: GenericPalletEvent<
      Rv,
      'CommunityTreasury',
      'Awarded',
      { proposalIndex: number; award: bigint; account: AccountId32 }
    >;

    /**
     * A proposal was rejected; funds were slashed.
     **/
    Rejected: GenericPalletEvent<Rv, 'CommunityTreasury', 'Rejected', { proposalIndex: number; slashed: bigint }>;

    /**
     * Some of our funds have been burnt.
     **/
    Burnt: GenericPalletEvent<Rv, 'CommunityTreasury', 'Burnt', { burntFunds: bigint }>;

    /**
     * Spending has finished; this is the amount that rolls over until next spend.
     **/
    Rollover: GenericPalletEvent<Rv, 'CommunityTreasury', 'Rollover', { rolloverBalance: bigint }>;

    /**
     * Some funds have been deposited.
     **/
    Deposit: GenericPalletEvent<Rv, 'CommunityTreasury', 'Deposit', { value: bigint }>;

    /**
     * A new spend proposal has been approved.
     **/
    SpendApproved: GenericPalletEvent<
      Rv,
      'CommunityTreasury',
      'SpendApproved',
      { proposalIndex: number; amount: bigint; beneficiary: AccountId32 }
    >;

    /**
     * The inactive funds of the pallet have been updated.
     **/
    UpdatedInactive: GenericPalletEvent<
      Rv,
      'CommunityTreasury',
      'UpdatedInactive',
      { reactivated: bigint; deactivated: bigint }
    >;

    /**
     * A new asset spend proposal has been approved.
     **/
    AssetSpendApproved: GenericPalletEvent<
      Rv,
      'CommunityTreasury',
      'AssetSpendApproved',
      { index: number; assetKind: []; amount: bigint; beneficiary: AccountId32; validFrom: number; expireAt: number }
    >;

    /**
     * An approved spend was voided.
     **/
    AssetSpendVoided: GenericPalletEvent<Rv, 'CommunityTreasury', 'AssetSpendVoided', { index: number }>;

    /**
     * A payment happened.
     **/
    Paid: GenericPalletEvent<Rv, 'CommunityTreasury', 'Paid', { index: number; paymentId: [] }>;

    /**
     * A payment failed and can be retried.
     **/
    PaymentFailed: GenericPalletEvent<Rv, 'CommunityTreasury', 'PaymentFailed', { index: number; paymentId: [] }>;

    /**
     * A spend was processed and removed from the storage. It might have been successfully
     * paid or it may have expired.
     **/
    SpendProcessed: GenericPalletEvent<Rv, 'CommunityTreasury', 'SpendProcessed', { index: number }>;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `CollectiveProxy`'s events
   **/
  collectiveProxy: {
    /**
     * Community proxy call executed successfully.
     **/
    CollectiveProxyExecuted: GenericPalletEvent<
      Rv,
      'CollectiveProxy',
      'CollectiveProxyExecuted',
      { result: Result<[], DispatchError> }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `MultiBlockMigrations`'s events
   **/
  multiBlockMigrations: {
    /**
     * A Runtime upgrade started.
     *
     * Its end is indicated by `UpgradeCompleted` or `UpgradeFailed`.
     **/
    UpgradeStarted: GenericPalletEvent<
      Rv,
      'MultiBlockMigrations',
      'UpgradeStarted',
      {
        /**
         * The number of migrations that this upgrade contains.
         *
         * This can be used to design a progress indicator in combination with counting the
         * `MigrationCompleted` and `MigrationSkipped` events.
         **/
        migrations: number;
      }
    >;

    /**
     * The current runtime upgrade completed.
     *
     * This implies that all of its migrations completed successfully as well.
     **/
    UpgradeCompleted: GenericPalletEvent<Rv, 'MultiBlockMigrations', 'UpgradeCompleted', null>;

    /**
     * Runtime upgrade failed.
     *
     * This is very bad and will require governance intervention.
     **/
    UpgradeFailed: GenericPalletEvent<Rv, 'MultiBlockMigrations', 'UpgradeFailed', null>;

    /**
     * A migration was skipped since it was already executed in the past.
     **/
    MigrationSkipped: GenericPalletEvent<
      Rv,
      'MultiBlockMigrations',
      'MigrationSkipped',
      {
        /**
         * The index of the skipped migration within the [`Config::Migrations`] list.
         **/
        index: number;
      }
    >;

    /**
     * A migration progressed.
     **/
    MigrationAdvanced: GenericPalletEvent<
      Rv,
      'MultiBlockMigrations',
      'MigrationAdvanced',
      {
        /**
         * The index of the migration within the [`Config::Migrations`] list.
         **/
        index: number;

        /**
         * The number of blocks that this migration took so far.
         **/
        took: number;
      }
    >;

    /**
     * A Migration completed.
     **/
    MigrationCompleted: GenericPalletEvent<
      Rv,
      'MultiBlockMigrations',
      'MigrationCompleted',
      {
        /**
         * The index of the migration within the [`Config::Migrations`] list.
         **/
        index: number;

        /**
         * The number of blocks that this migration took so far.
         **/
        took: number;
      }
    >;

    /**
     * A Migration failed.
     *
     * This implies that the whole upgrade failed and governance intervention is required.
     **/
    MigrationFailed: GenericPalletEvent<
      Rv,
      'MultiBlockMigrations',
      'MigrationFailed',
      {
        /**
         * The index of the migration within the [`Config::Migrations`] list.
         **/
        index: number;

        /**
         * The number of blocks that this migration took so far.
         **/
        took: number;
      }
    >;

    /**
     * The set of historical migrations has been cleared.
     **/
    HistoricCleared: GenericPalletEvent<
      Rv,
      'MultiBlockMigrations',
      'HistoricCleared',
      {
        /**
         * Should be passed to `clear_historic` in a successive call.
         **/
        nextCursor?: Bytes | undefined;
      }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
}
