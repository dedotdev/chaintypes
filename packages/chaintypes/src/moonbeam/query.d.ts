// Generated by dedot cli

import type { GenericChainStorage, GenericStorageQuery, Callback, RpcVersion } from 'dedot/types';
import type {
  AccountId20,
  AccountId20Like,
  H256,
  Bytes,
  Digest,
  Phase,
  FixedU128,
  Perbill,
  Percent,
  Data,
  BytesLike,
  FixedBytes,
  H160,
  U256,
} from 'dedot/codecs';
import type {
  FrameSystemAccountInfo,
  FrameSupportDispatchPerDispatchClass,
  FrameSystemEventRecord,
  FrameSystemLastRuntimeUpgradeInfo,
  FrameSystemCodeUpgradeAuthorization,
  CumulusPalletParachainSystemUnincludedSegmentAncestor,
  CumulusPalletParachainSystemUnincludedSegmentSegmentTracker,
  PolkadotPrimitivesV7PersistedValidationData,
  PolkadotPrimitivesV7UpgradeRestriction,
  PolkadotPrimitivesV7UpgradeGoAhead,
  SpTrieStorageProof,
  CumulusPalletParachainSystemRelayStateSnapshotMessagingStateSnapshot,
  PolkadotPrimitivesV7AbridgedHostConfiguration,
  CumulusPrimitivesParachainInherentMessageQueueChain,
  PolkadotParachainPrimitivesPrimitivesId,
  PolkadotCorePrimitivesOutboundHrmpMessage,
  SpWeightsWeightV2Weight,
  PalletBalancesAccountData,
  PalletBalancesBalanceLock,
  PalletBalancesReserveData,
  FrameSupportTokensMiscIdAmount,
  FrameSupportTokensMiscIdAmount002,
  PalletTransactionPaymentReleases,
  PalletParachainStakingInflationDistributionConfig,
  PalletParachainStakingRoundInfo,
  PalletParachainStakingDelegator,
  PalletParachainStakingCandidateMetadata,
  PalletParachainStakingDelegationRequestsScheduledRequest,
  PalletParachainStakingAutoCompoundAutoCompoundConfig,
  PalletParachainStakingDelegations,
  PalletParachainStakingSetBoundedOrderedSet,
  PalletParachainStakingCollatorSnapshot,
  PalletParachainStakingDelayedPayout,
  PalletParachainStakingInflationInflationInfo,
  PalletAuthorSlotFilterNumNonZeroU32,
  PalletAuthorMappingRegistrationInfo,
  NimbusPrimitivesNimbusCryptoPublic,
  PalletMoonbeamOrbitersCollatorPoolInfo,
  SpConsensusSlotsSlot,
  PalletProxyProxyDefinition,
  PalletProxyAnnouncement,
  PalletIdentityRegistration,
  PalletIdentityRegistrarInfo,
  PalletIdentityAuthorityProperties,
  PalletMultisigMultisig,
  PalletMoonbeamLazyMigrationsStateMigrationStatus,
  MoonbeamRuntimeRuntimeParamsRuntimeParametersValue,
  MoonbeamRuntimeRuntimeParamsRuntimeParametersKey,
  PalletEvmCodeMetadata,
  EthereumTransactionTransactionV2,
  FpRpcTransactionStatus,
  EthereumReceiptReceiptV3,
  EthereumBlock,
  PalletSchedulerScheduled,
  PalletSchedulerRetryConfig,
  PalletPreimageOldRequestStatus,
  PalletPreimageRequestStatus,
  PalletConvictionVotingVoteVoting,
  PalletReferendaReferendumInfo,
  MoonbeamRuntimeRuntimeCall,
  PalletCollectiveVotes,
  PalletTreasuryProposal,
  PalletTreasurySpendStatus,
  PalletCrowdloanRewardsRewardInfo,
  CumulusPalletXcmpQueueOutboundChannelDetails,
  CumulusPalletXcmpQueueQueueConfigData,
  PalletXcmQueryStatus,
  XcmVersionedLocation,
  PalletXcmVersionMigrationStage,
  PalletXcmRemoteLockedFungibleRecord,
  XcmVersionedAssetId,
  StagingXcmV4Xcm,
  PalletAssetsAssetDetails,
  PalletAssetsAssetAccount,
  PalletAssetsApproval,
  PalletAssetsAssetMetadata,
  MoonbeamRuntimeXcmConfigAssetType,
  PalletXcmTransactorRemoteTransactInfoWithMaxWeight,
  StagingXcmV4Location,
  PalletXcmTransactorRelayIndicesRelayChainIndices,
  PalletMessageQueueBookState,
  CumulusPrimitivesCoreAggregateMessageOrigin,
  PalletMessageQueuePage,
  PalletMoonbeamForeignAssetsAssetStatus,
  PalletEmergencyParaXcmXcmMode,
  PalletRandomnessRequestState,
  PalletRandomnessRandomnessResult,
  PalletRandomnessRequestType,
} from './types';

export interface ChainStorage<Rv extends RpcVersion> extends GenericChainStorage<Rv> {
  /**
   * Pallet `System`'s storage queries
   **/
  system: {
    /**
     * The full account information for a particular account ID.
     *
     * @param {AccountId20Like} arg
     * @param {Callback<FrameSystemAccountInfo> =} callback
     **/
    account: GenericStorageQuery<Rv, (arg: AccountId20Like) => FrameSystemAccountInfo, AccountId20>;

    /**
     * Total extrinsics count for the current block.
     *
     * @param {Callback<number | undefined> =} callback
     **/
    extrinsicCount: GenericStorageQuery<Rv, () => number | undefined>;

    /**
     * Whether all inherents have been applied.
     *
     * @param {Callback<boolean> =} callback
     **/
    inherentsApplied: GenericStorageQuery<Rv, () => boolean>;

    /**
     * The current weight for the block.
     *
     * @param {Callback<FrameSupportDispatchPerDispatchClass> =} callback
     **/
    blockWeight: GenericStorageQuery<Rv, () => FrameSupportDispatchPerDispatchClass>;

    /**
     * Total length (in bytes) for all extrinsics put together, for the current block.
     *
     * @param {Callback<number | undefined> =} callback
     **/
    allExtrinsicsLen: GenericStorageQuery<Rv, () => number | undefined>;

    /**
     * Map of block numbers to block hashes.
     *
     * @param {number} arg
     * @param {Callback<H256> =} callback
     **/
    blockHash: GenericStorageQuery<Rv, (arg: number) => H256, number>;

    /**
     * Extrinsics data for the current block (maps an extrinsic's index to its data).
     *
     * @param {number} arg
     * @param {Callback<Bytes> =} callback
     **/
    extrinsicData: GenericStorageQuery<Rv, (arg: number) => Bytes, number>;

    /**
     * The current block number being processed. Set by `execute_block`.
     *
     * @param {Callback<number> =} callback
     **/
    number: GenericStorageQuery<Rv, () => number>;

    /**
     * Hash of the previous block.
     *
     * @param {Callback<H256> =} callback
     **/
    parentHash: GenericStorageQuery<Rv, () => H256>;

    /**
     * Digest of the current block, also part of the block header.
     *
     * @param {Callback<Digest> =} callback
     **/
    digest: GenericStorageQuery<Rv, () => Digest>;

    /**
     * Events deposited for the current block.
     *
     * NOTE: The item is unbound and should therefore never be read on chain.
     * It could otherwise inflate the PoV size of a block.
     *
     * Events have a large in-memory size. Box the events to not go out-of-memory
     * just in case someone still reads them from within the runtime.
     *
     * @param {Callback<Array<FrameSystemEventRecord>> =} callback
     **/
    events: GenericStorageQuery<Rv, () => Array<FrameSystemEventRecord>>;

    /**
     * The number of events in the `Events<T>` list.
     *
     * @param {Callback<number> =} callback
     **/
    eventCount: GenericStorageQuery<Rv, () => number>;

    /**
     * Mapping between a topic (represented by T::Hash) and a vector of indexes
     * of events in the `<Events<T>>` list.
     *
     * All topic vectors have deterministic storage locations depending on the topic. This
     * allows light-clients to leverage the changes trie storage tracking mechanism and
     * in case of changes fetch the list of events of interest.
     *
     * The value has the type `(BlockNumberFor<T>, EventIndex)` because if we used only just
     * the `EventIndex` then in case if the topic has the same contents on the next block
     * no notification will be triggered thus the event might be lost.
     *
     * @param {H256} arg
     * @param {Callback<Array<[number, number]>> =} callback
     **/
    eventTopics: GenericStorageQuery<Rv, (arg: H256) => Array<[number, number]>, H256>;

    /**
     * Stores the `spec_version` and `spec_name` of when the last runtime upgrade happened.
     *
     * @param {Callback<FrameSystemLastRuntimeUpgradeInfo | undefined> =} callback
     **/
    lastRuntimeUpgrade: GenericStorageQuery<Rv, () => FrameSystemLastRuntimeUpgradeInfo | undefined>;

    /**
     * True if we have upgraded so that `type RefCount` is `u32`. False (default) if not.
     *
     * @param {Callback<boolean> =} callback
     **/
    upgradedToU32RefCount: GenericStorageQuery<Rv, () => boolean>;

    /**
     * True if we have upgraded so that AccountInfo contains three types of `RefCount`. False
     * (default) if not.
     *
     * @param {Callback<boolean> =} callback
     **/
    upgradedToTripleRefCount: GenericStorageQuery<Rv, () => boolean>;

    /**
     * The execution phase of the block.
     *
     * @param {Callback<Phase | undefined> =} callback
     **/
    executionPhase: GenericStorageQuery<Rv, () => Phase | undefined>;

    /**
     * `Some` if a code upgrade has been authorized.
     *
     * @param {Callback<FrameSystemCodeUpgradeAuthorization | undefined> =} callback
     **/
    authorizedUpgrade: GenericStorageQuery<Rv, () => FrameSystemCodeUpgradeAuthorization | undefined>;

    /**
     * Generic pallet storage query
     **/
    [storage: string]: GenericStorageQuery<Rv>;
  };
  /**
   * Pallet `ParachainSystem`'s storage queries
   **/
  parachainSystem: {
    /**
     * Latest included block descendants the runtime accepted. In other words, these are
     * ancestors of the currently executing block which have not been included in the observed
     * relay-chain state.
     *
     * The segment length is limited by the capacity returned from the [`ConsensusHook`] configured
     * in the pallet.
     *
     * @param {Callback<Array<CumulusPalletParachainSystemUnincludedSegmentAncestor>> =} callback
     **/
    unincludedSegment: GenericStorageQuery<Rv, () => Array<CumulusPalletParachainSystemUnincludedSegmentAncestor>>;

    /**
     * Storage field that keeps track of bandwidth used by the unincluded segment along with the
     * latest HRMP watermark. Used for limiting the acceptance of new blocks with
     * respect to relay chain constraints.
     *
     * @param {Callback<CumulusPalletParachainSystemUnincludedSegmentSegmentTracker | undefined> =} callback
     **/
    aggregatedUnincludedSegment: GenericStorageQuery<
      Rv,
      () => CumulusPalletParachainSystemUnincludedSegmentSegmentTracker | undefined
    >;

    /**
     * In case of a scheduled upgrade, this storage field contains the validation code to be
     * applied.
     *
     * As soon as the relay chain gives us the go-ahead signal, we will overwrite the
     * [`:code`][sp_core::storage::well_known_keys::CODE] which will result the next block process
     * with the new validation code. This concludes the upgrade process.
     *
     * @param {Callback<Bytes> =} callback
     **/
    pendingValidationCode: GenericStorageQuery<Rv, () => Bytes>;

    /**
     * Validation code that is set by the parachain and is to be communicated to collator and
     * consequently the relay-chain.
     *
     * This will be cleared in `on_initialize` of each new block if no other pallet already set
     * the value.
     *
     * @param {Callback<Bytes | undefined> =} callback
     **/
    newValidationCode: GenericStorageQuery<Rv, () => Bytes | undefined>;

    /**
     * The [`PersistedValidationData`] set for this block.
     * This value is expected to be set only once per block and it's never stored
     * in the trie.
     *
     * @param {Callback<PolkadotPrimitivesV7PersistedValidationData | undefined> =} callback
     **/
    validationData: GenericStorageQuery<Rv, () => PolkadotPrimitivesV7PersistedValidationData | undefined>;

    /**
     * Were the validation data set to notify the relay chain?
     *
     * @param {Callback<boolean> =} callback
     **/
    didSetValidationCode: GenericStorageQuery<Rv, () => boolean>;

    /**
     * The relay chain block number associated with the last parachain block.
     *
     * This is updated in `on_finalize`.
     *
     * @param {Callback<number> =} callback
     **/
    lastRelayChainBlockNumber: GenericStorageQuery<Rv, () => number>;

    /**
     * An option which indicates if the relay-chain restricts signalling a validation code upgrade.
     * In other words, if this is `Some` and [`NewValidationCode`] is `Some` then the produced
     * candidate will be invalid.
     *
     * This storage item is a mirror of the corresponding value for the current parachain from the
     * relay-chain. This value is ephemeral which means it doesn't hit the storage. This value is
     * set after the inherent.
     *
     * @param {Callback<PolkadotPrimitivesV7UpgradeRestriction | undefined> =} callback
     **/
    upgradeRestrictionSignal: GenericStorageQuery<Rv, () => PolkadotPrimitivesV7UpgradeRestriction | undefined>;

    /**
     * Optional upgrade go-ahead signal from the relay-chain.
     *
     * This storage item is a mirror of the corresponding value for the current parachain from the
     * relay-chain. This value is ephemeral which means it doesn't hit the storage. This value is
     * set after the inherent.
     *
     * @param {Callback<PolkadotPrimitivesV7UpgradeGoAhead | undefined> =} callback
     **/
    upgradeGoAhead: GenericStorageQuery<Rv, () => PolkadotPrimitivesV7UpgradeGoAhead | undefined>;

    /**
     * The state proof for the last relay parent block.
     *
     * This field is meant to be updated each block with the validation data inherent. Therefore,
     * before processing of the inherent, e.g. in `on_initialize` this data may be stale.
     *
     * This data is also absent from the genesis.
     *
     * @param {Callback<SpTrieStorageProof | undefined> =} callback
     **/
    relayStateProof: GenericStorageQuery<Rv, () => SpTrieStorageProof | undefined>;

    /**
     * The snapshot of some state related to messaging relevant to the current parachain as per
     * the relay parent.
     *
     * This field is meant to be updated each block with the validation data inherent. Therefore,
     * before processing of the inherent, e.g. in `on_initialize` this data may be stale.
     *
     * This data is also absent from the genesis.
     *
     * @param {Callback<CumulusPalletParachainSystemRelayStateSnapshotMessagingStateSnapshot | undefined> =} callback
     **/
    relevantMessagingState: GenericStorageQuery<
      Rv,
      () => CumulusPalletParachainSystemRelayStateSnapshotMessagingStateSnapshot | undefined
    >;

    /**
     * The parachain host configuration that was obtained from the relay parent.
     *
     * This field is meant to be updated each block with the validation data inherent. Therefore,
     * before processing of the inherent, e.g. in `on_initialize` this data may be stale.
     *
     * This data is also absent from the genesis.
     *
     * @param {Callback<PolkadotPrimitivesV7AbridgedHostConfiguration | undefined> =} callback
     **/
    hostConfiguration: GenericStorageQuery<Rv, () => PolkadotPrimitivesV7AbridgedHostConfiguration | undefined>;

    /**
     * The last downward message queue chain head we have observed.
     *
     * This value is loaded before and saved after processing inbound downward messages carried
     * by the system inherent.
     *
     * @param {Callback<CumulusPrimitivesParachainInherentMessageQueueChain> =} callback
     **/
    lastDmqMqcHead: GenericStorageQuery<Rv, () => CumulusPrimitivesParachainInherentMessageQueueChain>;

    /**
     * The message queue chain heads we have observed per each channel incoming channel.
     *
     * This value is loaded before and saved after processing inbound downward messages carried
     * by the system inherent.
     *
     * @param {Callback<Array<[PolkadotParachainPrimitivesPrimitivesId, CumulusPrimitivesParachainInherentMessageQueueChain]>> =} callback
     **/
    lastHrmpMqcHeads: GenericStorageQuery<
      Rv,
      () => Array<[PolkadotParachainPrimitivesPrimitivesId, CumulusPrimitivesParachainInherentMessageQueueChain]>
    >;

    /**
     * Number of downward messages processed in a block.
     *
     * This will be cleared in `on_initialize` of each new block.
     *
     * @param {Callback<number> =} callback
     **/
    processedDownwardMessages: GenericStorageQuery<Rv, () => number>;

    /**
     * HRMP watermark that was set in a block.
     *
     * This will be cleared in `on_initialize` of each new block.
     *
     * @param {Callback<number> =} callback
     **/
    hrmpWatermark: GenericStorageQuery<Rv, () => number>;

    /**
     * HRMP messages that were sent in a block.
     *
     * This will be cleared in `on_initialize` of each new block.
     *
     * @param {Callback<Array<PolkadotCorePrimitivesOutboundHrmpMessage>> =} callback
     **/
    hrmpOutboundMessages: GenericStorageQuery<Rv, () => Array<PolkadotCorePrimitivesOutboundHrmpMessage>>;

    /**
     * Upward messages that were sent in a block.
     *
     * This will be cleared in `on_initialize` of each new block.
     *
     * @param {Callback<Array<Bytes>> =} callback
     **/
    upwardMessages: GenericStorageQuery<Rv, () => Array<Bytes>>;

    /**
     * Upward messages that are still pending and not yet send to the relay chain.
     *
     * @param {Callback<Array<Bytes>> =} callback
     **/
    pendingUpwardMessages: GenericStorageQuery<Rv, () => Array<Bytes>>;

    /**
     * The factor to multiply the base delivery fee by for UMP.
     *
     * @param {Callback<FixedU128> =} callback
     **/
    upwardDeliveryFeeFactor: GenericStorageQuery<Rv, () => FixedU128>;

    /**
     * The number of HRMP messages we observed in `on_initialize` and thus used that number for
     * announcing the weight of `on_initialize` and `on_finalize`.
     *
     * @param {Callback<number> =} callback
     **/
    announcedHrmpMessagesPerCandidate: GenericStorageQuery<Rv, () => number>;

    /**
     * The weight we reserve at the beginning of the block for processing XCMP messages. This
     * overrides the amount set in the Config trait.
     *
     * @param {Callback<SpWeightsWeightV2Weight | undefined> =} callback
     **/
    reservedXcmpWeightOverride: GenericStorageQuery<Rv, () => SpWeightsWeightV2Weight | undefined>;

    /**
     * The weight we reserve at the beginning of the block for processing DMP messages. This
     * overrides the amount set in the Config trait.
     *
     * @param {Callback<SpWeightsWeightV2Weight | undefined> =} callback
     **/
    reservedDmpWeightOverride: GenericStorageQuery<Rv, () => SpWeightsWeightV2Weight | undefined>;

    /**
     * A custom head data that should be returned as result of `validate_block`.
     *
     * See `Pallet::set_custom_validation_head_data` for more information.
     *
     * @param {Callback<Bytes | undefined> =} callback
     **/
    customValidationHeadData: GenericStorageQuery<Rv, () => Bytes | undefined>;

    /**
     * Generic pallet storage query
     **/
    [storage: string]: GenericStorageQuery<Rv>;
  };
  /**
   * Pallet `Timestamp`'s storage queries
   **/
  timestamp: {
    /**
     * The current time for the current block.
     *
     * @param {Callback<bigint> =} callback
     **/
    now: GenericStorageQuery<Rv, () => bigint>;

    /**
     * Whether the timestamp has been updated in this block.
     *
     * This value is updated to `true` upon successful submission of a timestamp by a node.
     * It is then checked at the end of each block execution in the `on_finalize` hook.
     *
     * @param {Callback<boolean> =} callback
     **/
    didUpdate: GenericStorageQuery<Rv, () => boolean>;

    /**
     * Generic pallet storage query
     **/
    [storage: string]: GenericStorageQuery<Rv>;
  };
  /**
   * Pallet `ParachainInfo`'s storage queries
   **/
  parachainInfo: {
    /**
     *
     * @param {Callback<PolkadotParachainPrimitivesPrimitivesId> =} callback
     **/
    parachainId: GenericStorageQuery<Rv, () => PolkadotParachainPrimitivesPrimitivesId>;

    /**
     * Generic pallet storage query
     **/
    [storage: string]: GenericStorageQuery<Rv>;
  };
  /**
   * Pallet `RootTesting`'s storage queries
   **/
  rootTesting: {
    /**
     * Generic pallet storage query
     **/
    [storage: string]: GenericStorageQuery<Rv>;
  };
  /**
   * Pallet `Balances`'s storage queries
   **/
  balances: {
    /**
     * The total units issued in the system.
     *
     * @param {Callback<bigint> =} callback
     **/
    totalIssuance: GenericStorageQuery<Rv, () => bigint>;

    /**
     * The total units of outstanding deactivated balance in the system.
     *
     * @param {Callback<bigint> =} callback
     **/
    inactiveIssuance: GenericStorageQuery<Rv, () => bigint>;

    /**
     * The Balances pallet example of storing the balance of an account.
     *
     * # Example
     *
     * ```nocompile
     * impl pallet_balances::Config for Runtime {
     * type AccountStore = StorageMapShim<Self::Account<Runtime>, frame_system::Provider<Runtime>, AccountId, Self::AccountData<Balance>>
     * }
     * ```
     *
     * You can also store the balance of an account in the `System` pallet.
     *
     * # Example
     *
     * ```nocompile
     * impl pallet_balances::Config for Runtime {
     * type AccountStore = System
     * }
     * ```
     *
     * But this comes with tradeoffs, storing account balances in the system pallet stores
     * `frame_system` data alongside the account data contrary to storing account balances in the
     * `Balances` pallet, which uses a `StorageMap` to store balances data only.
     * NOTE: This is only used in the case that this pallet is used to store balances.
     *
     * @param {AccountId20Like} arg
     * @param {Callback<PalletBalancesAccountData> =} callback
     **/
    account: GenericStorageQuery<Rv, (arg: AccountId20Like) => PalletBalancesAccountData, AccountId20>;

    /**
     * Any liquidity locks on some account balances.
     * NOTE: Should only be accessed when setting, changing and freeing a lock.
     *
     * Use of locks is deprecated in favour of freezes. See `https://github.com/paritytech/substrate/pull/12951/`
     *
     * @param {AccountId20Like} arg
     * @param {Callback<Array<PalletBalancesBalanceLock>> =} callback
     **/
    locks: GenericStorageQuery<Rv, (arg: AccountId20Like) => Array<PalletBalancesBalanceLock>, AccountId20>;

    /**
     * Named reserves on some account balances.
     *
     * Use of reserves is deprecated in favour of holds. See `https://github.com/paritytech/substrate/pull/12951/`
     *
     * @param {AccountId20Like} arg
     * @param {Callback<Array<PalletBalancesReserveData>> =} callback
     **/
    reserves: GenericStorageQuery<Rv, (arg: AccountId20Like) => Array<PalletBalancesReserveData>, AccountId20>;

    /**
     * Holds on account balances.
     *
     * @param {AccountId20Like} arg
     * @param {Callback<Array<FrameSupportTokensMiscIdAmount>> =} callback
     **/
    holds: GenericStorageQuery<Rv, (arg: AccountId20Like) => Array<FrameSupportTokensMiscIdAmount>, AccountId20>;

    /**
     * Freeze locks on account balances.
     *
     * @param {AccountId20Like} arg
     * @param {Callback<Array<FrameSupportTokensMiscIdAmount002>> =} callback
     **/
    freezes: GenericStorageQuery<Rv, (arg: AccountId20Like) => Array<FrameSupportTokensMiscIdAmount002>, AccountId20>;

    /**
     * Generic pallet storage query
     **/
    [storage: string]: GenericStorageQuery<Rv>;
  };
  /**
   * Pallet `TransactionPayment`'s storage queries
   **/
  transactionPayment: {
    /**
     *
     * @param {Callback<FixedU128> =} callback
     **/
    nextFeeMultiplier: GenericStorageQuery<Rv, () => FixedU128>;

    /**
     *
     * @param {Callback<PalletTransactionPaymentReleases> =} callback
     **/
    storageVersion: GenericStorageQuery<Rv, () => PalletTransactionPaymentReleases>;

    /**
     * Generic pallet storage query
     **/
    [storage: string]: GenericStorageQuery<Rv>;
  };
  /**
   * Pallet `ParachainStaking`'s storage queries
   **/
  parachainStaking: {
    /**
     * Commission percent taken off of rewards for all collators
     *
     * @param {Callback<Perbill> =} callback
     **/
    collatorCommission: GenericStorageQuery<Rv, () => Perbill>;

    /**
     * The total candidates selected every round
     *
     * @param {Callback<number> =} callback
     **/
    totalSelected: GenericStorageQuery<Rv, () => number>;

    /**
     * Inflation distribution configuration, including accounts that should receive inflation
     * before it is distributed to collators and delegators.
     *
     * The sum of the distribution percents must be less than or equal to 100.
     *
     * @param {Callback<PalletParachainStakingInflationDistributionConfig> =} callback
     **/
    inflationDistributionInfo: GenericStorageQuery<Rv, () => PalletParachainStakingInflationDistributionConfig>;

    /**
     * Current round index and next round scheduled transition
     *
     * @param {Callback<PalletParachainStakingRoundInfo> =} callback
     **/
    round: GenericStorageQuery<Rv, () => PalletParachainStakingRoundInfo>;

    /**
     * Get delegator state associated with an account if account is delegating else None
     *
     * @param {AccountId20Like} arg
     * @param {Callback<PalletParachainStakingDelegator | undefined> =} callback
     **/
    delegatorState: GenericStorageQuery<
      Rv,
      (arg: AccountId20Like) => PalletParachainStakingDelegator | undefined,
      AccountId20
    >;

    /**
     * Get collator candidate info associated with an account if account is candidate else None
     *
     * @param {AccountId20Like} arg
     * @param {Callback<PalletParachainStakingCandidateMetadata | undefined> =} callback
     **/
    candidateInfo: GenericStorageQuery<
      Rv,
      (arg: AccountId20Like) => PalletParachainStakingCandidateMetadata | undefined,
      AccountId20
    >;

    /**
     * Stores outstanding delegation requests per collator.
     *
     * @param {AccountId20Like} arg
     * @param {Callback<Array<PalletParachainStakingDelegationRequestsScheduledRequest>> =} callback
     **/
    delegationScheduledRequests: GenericStorageQuery<
      Rv,
      (arg: AccountId20Like) => Array<PalletParachainStakingDelegationRequestsScheduledRequest>,
      AccountId20
    >;

    /**
     * Stores auto-compounding configuration per collator.
     *
     * @param {AccountId20Like} arg
     * @param {Callback<Array<PalletParachainStakingAutoCompoundAutoCompoundConfig>> =} callback
     **/
    autoCompoundingDelegations: GenericStorageQuery<
      Rv,
      (arg: AccountId20Like) => Array<PalletParachainStakingAutoCompoundAutoCompoundConfig>,
      AccountId20
    >;

    /**
     * Top delegations for collator candidate
     *
     * @param {AccountId20Like} arg
     * @param {Callback<PalletParachainStakingDelegations | undefined> =} callback
     **/
    topDelegations: GenericStorageQuery<
      Rv,
      (arg: AccountId20Like) => PalletParachainStakingDelegations | undefined,
      AccountId20
    >;

    /**
     * Bottom delegations for collator candidate
     *
     * @param {AccountId20Like} arg
     * @param {Callback<PalletParachainStakingDelegations | undefined> =} callback
     **/
    bottomDelegations: GenericStorageQuery<
      Rv,
      (arg: AccountId20Like) => PalletParachainStakingDelegations | undefined,
      AccountId20
    >;

    /**
     * The collator candidates selected for the current round
     *
     * @param {Callback<Array<AccountId20>> =} callback
     **/
    selectedCandidates: GenericStorageQuery<Rv, () => Array<AccountId20>>;

    /**
     * Total capital locked by this staking pallet
     *
     * @param {Callback<bigint> =} callback
     **/
    total: GenericStorageQuery<Rv, () => bigint>;

    /**
     * The pool of collator candidates, each with their total backing stake
     *
     * @param {Callback<PalletParachainStakingSetBoundedOrderedSet> =} callback
     **/
    candidatePool: GenericStorageQuery<Rv, () => PalletParachainStakingSetBoundedOrderedSet>;

    /**
     * Snapshot of collator delegation stake at the start of the round
     *
     * @param {[number, AccountId20Like]} arg
     * @param {Callback<PalletParachainStakingCollatorSnapshot | undefined> =} callback
     **/
    atStake: GenericStorageQuery<
      Rv,
      (arg: [number, AccountId20Like]) => PalletParachainStakingCollatorSnapshot | undefined,
      [number, AccountId20]
    >;

    /**
     * Delayed payouts
     *
     * @param {number} arg
     * @param {Callback<PalletParachainStakingDelayedPayout | undefined> =} callback
     **/
    delayedPayouts: GenericStorageQuery<Rv, (arg: number) => PalletParachainStakingDelayedPayout | undefined, number>;

    /**
     * Inflation configuration
     *
     * @param {Callback<PalletParachainStakingInflationInflationInfo> =} callback
     **/
    inflationConfig: GenericStorageQuery<Rv, () => PalletParachainStakingInflationInflationInfo>;

    /**
     * Total points awarded to collators for block production in the round
     *
     * @param {number} arg
     * @param {Callback<number> =} callback
     **/
    points: GenericStorageQuery<Rv, (arg: number) => number, number>;

    /**
     * Points for each collator per round
     *
     * @param {[number, AccountId20Like]} arg
     * @param {Callback<number> =} callback
     **/
    awardedPts: GenericStorageQuery<Rv, (arg: [number, AccountId20Like]) => number, [number, AccountId20]>;

    /**
     * Killswitch to enable/disable marking offline feature.
     *
     * @param {Callback<boolean> =} callback
     **/
    enableMarkingOffline: GenericStorageQuery<Rv, () => boolean>;

    /**
     * Generic pallet storage query
     **/
    [storage: string]: GenericStorageQuery<Rv>;
  };
  /**
   * Pallet `AuthorInherent`'s storage queries
   **/
  authorInherent: {
    /**
     * Author of current block.
     *
     * @param {Callback<AccountId20 | undefined> =} callback
     **/
    author: GenericStorageQuery<Rv, () => AccountId20 | undefined>;

    /**
     * Check if the inherent was included
     *
     * @param {Callback<boolean> =} callback
     **/
    inherentIncluded: GenericStorageQuery<Rv, () => boolean>;

    /**
     * Generic pallet storage query
     **/
    [storage: string]: GenericStorageQuery<Rv>;
  };
  /**
   * Pallet `AuthorFilter`'s storage queries
   **/
  authorFilter: {
    /**
     *
     * @param {Callback<Percent> =} callback
     **/
    eligibleRatio: GenericStorageQuery<Rv, () => Percent>;

    /**
     * The number of active authors that will be eligible at each height.
     *
     * @param {Callback<PalletAuthorSlotFilterNumNonZeroU32> =} callback
     **/
    eligibleCount: GenericStorageQuery<Rv, () => PalletAuthorSlotFilterNumNonZeroU32>;

    /**
     * Generic pallet storage query
     **/
    [storage: string]: GenericStorageQuery<Rv>;
  };
  /**
   * Pallet `AuthorMapping`'s storage queries
   **/
  authorMapping: {
    /**
     * We maintain a mapping from the NimbusIds used in the consensus layer
     * to the AccountIds runtime.
     *
     * @param {NimbusPrimitivesNimbusCryptoPublic} arg
     * @param {Callback<PalletAuthorMappingRegistrationInfo | undefined> =} callback
     **/
    mappingWithDeposit: GenericStorageQuery<
      Rv,
      (arg: NimbusPrimitivesNimbusCryptoPublic) => PalletAuthorMappingRegistrationInfo | undefined,
      NimbusPrimitivesNimbusCryptoPublic
    >;

    /**
     * We maintain a reverse mapping from AccountIds to NimbusIDS
     *
     * @param {AccountId20Like} arg
     * @param {Callback<NimbusPrimitivesNimbusCryptoPublic | undefined> =} callback
     **/
    nimbusLookup: GenericStorageQuery<
      Rv,
      (arg: AccountId20Like) => NimbusPrimitivesNimbusCryptoPublic | undefined,
      AccountId20
    >;

    /**
     * Generic pallet storage query
     **/
    [storage: string]: GenericStorageQuery<Rv>;
  };
  /**
   * Pallet `MoonbeamOrbiters`'s storage queries
   **/
  moonbeamOrbiters: {
    /**
     * Account lookup override
     *
     * @param {AccountId20Like} arg
     * @param {Callback<AccountId20 | undefined | undefined> =} callback
     **/
    accountLookupOverride: GenericStorageQuery<
      Rv,
      (arg: AccountId20Like) => AccountId20 | undefined | undefined,
      AccountId20
    >;

    /**
     * Current orbiters, with their "parent" collator
     *
     * @param {AccountId20Like} arg
     * @param {Callback<PalletMoonbeamOrbitersCollatorPoolInfo | undefined> =} callback
     **/
    collatorsPool: GenericStorageQuery<
      Rv,
      (arg: AccountId20Like) => PalletMoonbeamOrbitersCollatorPoolInfo | undefined,
      AccountId20
    >;

    /**
     * Counter for the related counted storage map
     *
     * @param {Callback<number> =} callback
     **/
    counterForCollatorsPool: GenericStorageQuery<Rv, () => number>;

    /**
     * Current round index
     *
     * @param {Callback<number> =} callback
     **/
    currentRound: GenericStorageQuery<Rv, () => number>;

    /**
     * If true, it forces the rotation at the next round.
     * A use case: when changing RotatePeriod, you need a migration code that sets this value to
     * true to avoid holes in OrbiterPerRound.
     *
     * @param {Callback<boolean> =} callback
     **/
    forceRotation: GenericStorageQuery<Rv, () => boolean>;

    /**
     * Minimum deposit required to be registered as an orbiter
     *
     * @param {Callback<bigint | undefined> =} callback
     **/
    minOrbiterDeposit: GenericStorageQuery<Rv, () => bigint | undefined>;

    /**
     * Store active orbiter per round and per parent collator
     *
     * @param {[number, AccountId20Like]} arg
     * @param {Callback<AccountId20 | undefined> =} callback
     **/
    orbiterPerRound: GenericStorageQuery<
      Rv,
      (arg: [number, AccountId20Like]) => AccountId20 | undefined,
      [number, AccountId20]
    >;

    /**
     * Check if account is an orbiter
     *
     * @param {AccountId20Like} arg
     * @param {Callback<boolean | undefined> =} callback
     **/
    registeredOrbiter: GenericStorageQuery<Rv, (arg: AccountId20Like) => boolean | undefined, AccountId20>;

    /**
     * Generic pallet storage query
     **/
    [storage: string]: GenericStorageQuery<Rv>;
  };
  /**
   * Pallet `AsyncBacking`'s storage queries
   **/
  asyncBacking: {
    /**
     * First tuple element is the highest slot that has been seen in the history of this chain.
     * Second tuple element is the number of authored blocks so far.
     * This is a strictly-increasing value if T::AllowMultipleBlocksPerSlot = false.
     *
     * @param {Callback<[SpConsensusSlotsSlot, number] | undefined> =} callback
     **/
    slotInfo: GenericStorageQuery<Rv, () => [SpConsensusSlotsSlot, number] | undefined>;

    /**
     * Generic pallet storage query
     **/
    [storage: string]: GenericStorageQuery<Rv>;
  };
  /**
   * Pallet `Proxy`'s storage queries
   **/
  proxy: {
    /**
     * The set of account proxies. Maps the account which has delegated to the accounts
     * which are being delegated to, together with the amount held on deposit.
     *
     * @param {AccountId20Like} arg
     * @param {Callback<[Array<PalletProxyProxyDefinition>, bigint]> =} callback
     **/
    proxies: GenericStorageQuery<
      Rv,
      (arg: AccountId20Like) => [Array<PalletProxyProxyDefinition>, bigint],
      AccountId20
    >;

    /**
     * The announcements made by the proxy (key).
     *
     * @param {AccountId20Like} arg
     * @param {Callback<[Array<PalletProxyAnnouncement>, bigint]> =} callback
     **/
    announcements: GenericStorageQuery<
      Rv,
      (arg: AccountId20Like) => [Array<PalletProxyAnnouncement>, bigint],
      AccountId20
    >;

    /**
     * Generic pallet storage query
     **/
    [storage: string]: GenericStorageQuery<Rv>;
  };
  /**
   * Pallet `MaintenanceMode`'s storage queries
   **/
  maintenanceMode: {
    /**
     * Whether the site is in maintenance mode
     *
     * @param {Callback<boolean> =} callback
     **/
    maintenanceMode: GenericStorageQuery<Rv, () => boolean>;

    /**
     * Generic pallet storage query
     **/
    [storage: string]: GenericStorageQuery<Rv>;
  };
  /**
   * Pallet `Identity`'s storage queries
   **/
  identity: {
    /**
     * Information that is pertinent to identify the entity behind an account. First item is the
     * registration, second is the account's primary username.
     *
     * TWOX-NOTE: OK ― `AccountId` is a secure hash.
     *
     * @param {AccountId20Like} arg
     * @param {Callback<[PalletIdentityRegistration, Bytes | undefined] | undefined> =} callback
     **/
    identityOf: GenericStorageQuery<
      Rv,
      (arg: AccountId20Like) => [PalletIdentityRegistration, Bytes | undefined] | undefined,
      AccountId20
    >;

    /**
     * The super-identity of an alternative "sub" identity together with its name, within that
     * context. If the account is not some other account's sub-identity, then just `None`.
     *
     * @param {AccountId20Like} arg
     * @param {Callback<[AccountId20, Data] | undefined> =} callback
     **/
    superOf: GenericStorageQuery<Rv, (arg: AccountId20Like) => [AccountId20, Data] | undefined, AccountId20>;

    /**
     * Alternative "sub" identities of this account.
     *
     * The first item is the deposit, the second is a vector of the accounts.
     *
     * TWOX-NOTE: OK ― `AccountId` is a secure hash.
     *
     * @param {AccountId20Like} arg
     * @param {Callback<[bigint, Array<AccountId20>]> =} callback
     **/
    subsOf: GenericStorageQuery<Rv, (arg: AccountId20Like) => [bigint, Array<AccountId20>], AccountId20>;

    /**
     * The set of registrars. Not expected to get very big as can only be added through a
     * special origin (likely a council motion).
     *
     * The index into this can be cast to `RegistrarIndex` to get a valid value.
     *
     * @param {Callback<Array<PalletIdentityRegistrarInfo | undefined>> =} callback
     **/
    registrars: GenericStorageQuery<Rv, () => Array<PalletIdentityRegistrarInfo | undefined>>;

    /**
     * A map of the accounts who are authorized to grant usernames.
     *
     * @param {AccountId20Like} arg
     * @param {Callback<PalletIdentityAuthorityProperties | undefined> =} callback
     **/
    usernameAuthorities: GenericStorageQuery<
      Rv,
      (arg: AccountId20Like) => PalletIdentityAuthorityProperties | undefined,
      AccountId20
    >;

    /**
     * Reverse lookup from `username` to the `AccountId` that has registered it. The value should
     * be a key in the `IdentityOf` map, but it may not if the user has cleared their identity.
     *
     * Multiple usernames may map to the same `AccountId`, but `IdentityOf` will only map to one
     * primary username.
     *
     * @param {BytesLike} arg
     * @param {Callback<AccountId20 | undefined> =} callback
     **/
    accountOfUsername: GenericStorageQuery<Rv, (arg: BytesLike) => AccountId20 | undefined, Bytes>;

    /**
     * Usernames that an authority has granted, but that the account controller has not confirmed
     * that they want it. Used primarily in cases where the `AccountId` cannot provide a signature
     * because they are a pure proxy, multisig, etc. In order to confirm it, they should call
     * [`Call::accept_username`].
     *
     * First tuple item is the account and second is the acceptance deadline.
     *
     * @param {BytesLike} arg
     * @param {Callback<[AccountId20, number] | undefined> =} callback
     **/
    pendingUsernames: GenericStorageQuery<Rv, (arg: BytesLike) => [AccountId20, number] | undefined, Bytes>;

    /**
     * Generic pallet storage query
     **/
    [storage: string]: GenericStorageQuery<Rv>;
  };
  /**
   * Pallet `Migrations`'s storage queries
   **/
  migrations: {
    /**
     * True if all required migrations have completed
     *
     * @param {Callback<boolean> =} callback
     **/
    fullyUpgraded: GenericStorageQuery<Rv, () => boolean>;

    /**
     * MigrationState tracks the progress of a migration.
     * Maps name (Vec<u8>) -> whether or not migration has been completed (bool)
     *
     * @param {BytesLike} arg
     * @param {Callback<boolean> =} callback
     **/
    migrationState: GenericStorageQuery<Rv, (arg: BytesLike) => boolean, Bytes>;

    /**
     * Temporary value that is set to true at the beginning of the block during which the execution
     * of xcm messages must be paused.
     *
     * @param {Callback<boolean> =} callback
     **/
    shouldPauseXcm: GenericStorageQuery<Rv, () => boolean>;

    /**
     * Generic pallet storage query
     **/
    [storage: string]: GenericStorageQuery<Rv>;
  };
  /**
   * Pallet `Multisig`'s storage queries
   **/
  multisig: {
    /**
     * The set of open multisig operations.
     *
     * @param {[AccountId20Like, FixedBytes<32>]} arg
     * @param {Callback<PalletMultisigMultisig | undefined> =} callback
     **/
    multisigs: GenericStorageQuery<
      Rv,
      (arg: [AccountId20Like, FixedBytes<32>]) => PalletMultisigMultisig | undefined,
      [AccountId20, FixedBytes<32>]
    >;

    /**
     * Generic pallet storage query
     **/
    [storage: string]: GenericStorageQuery<Rv>;
  };
  /**
   * Pallet `MoonbeamLazyMigrations`'s storage queries
   **/
  moonbeamLazyMigrations: {
    /**
     * The total number of suicided contracts that were removed
     *
     * @param {Callback<number> =} callback
     **/
    suicidedContractsRemoved: GenericStorageQuery<Rv, () => number>;

    /**
     *
     * @param {Callback<[PalletMoonbeamLazyMigrationsStateMigrationStatus, bigint]> =} callback
     **/
    stateMigrationStatusValue: GenericStorageQuery<
      Rv,
      () => [PalletMoonbeamLazyMigrationsStateMigrationStatus, bigint]
    >;

    /**
     * Generic pallet storage query
     **/
    [storage: string]: GenericStorageQuery<Rv>;
  };
  /**
   * Pallet `Parameters`'s storage queries
   **/
  parameters: {
    /**
     * Stored parameters.
     *
     * @param {MoonbeamRuntimeRuntimeParamsRuntimeParametersKey} arg
     * @param {Callback<MoonbeamRuntimeRuntimeParamsRuntimeParametersValue | undefined> =} callback
     **/
    parameters: GenericStorageQuery<
      Rv,
      (
        arg: MoonbeamRuntimeRuntimeParamsRuntimeParametersKey,
      ) => MoonbeamRuntimeRuntimeParamsRuntimeParametersValue | undefined,
      MoonbeamRuntimeRuntimeParamsRuntimeParametersKey
    >;

    /**
     * Generic pallet storage query
     **/
    [storage: string]: GenericStorageQuery<Rv>;
  };
  /**
   * Pallet `EthereumChainId`'s storage queries
   **/
  ethereumChainId: {
    /**
     * The EVM chain ID.
     *
     * @param {Callback<bigint> =} callback
     **/
    chainId: GenericStorageQuery<Rv, () => bigint>;

    /**
     * Generic pallet storage query
     **/
    [storage: string]: GenericStorageQuery<Rv>;
  };
  /**
   * Pallet `EVM`'s storage queries
   **/
  evm: {
    /**
     *
     * @param {H160} arg
     * @param {Callback<Bytes> =} callback
     **/
    accountCodes: GenericStorageQuery<Rv, (arg: H160) => Bytes, H160>;

    /**
     *
     * @param {H160} arg
     * @param {Callback<PalletEvmCodeMetadata | undefined> =} callback
     **/
    accountCodesMetadata: GenericStorageQuery<Rv, (arg: H160) => PalletEvmCodeMetadata | undefined, H160>;

    /**
     *
     * @param {[H160, H256]} arg
     * @param {Callback<H256> =} callback
     **/
    accountStorages: GenericStorageQuery<Rv, (arg: [H160, H256]) => H256, [H160, H256]>;

    /**
     *
     * @param {H160} arg
     * @param {Callback<[] | undefined> =} callback
     **/
    suicided: GenericStorageQuery<Rv, (arg: H160) => [] | undefined, H160>;

    /**
     * Generic pallet storage query
     **/
    [storage: string]: GenericStorageQuery<Rv>;
  };
  /**
   * Pallet `Ethereum`'s storage queries
   **/
  ethereum: {
    /**
     * Current building block's transactions and receipts.
     *
     * @param {Callback<Array<[EthereumTransactionTransactionV2, FpRpcTransactionStatus, EthereumReceiptReceiptV3]>> =} callback
     **/
    pending: GenericStorageQuery<
      Rv,
      () => Array<[EthereumTransactionTransactionV2, FpRpcTransactionStatus, EthereumReceiptReceiptV3]>
    >;

    /**
     * The current Ethereum block.
     *
     * @param {Callback<EthereumBlock | undefined> =} callback
     **/
    currentBlock: GenericStorageQuery<Rv, () => EthereumBlock | undefined>;

    /**
     * The current Ethereum receipts.
     *
     * @param {Callback<Array<EthereumReceiptReceiptV3> | undefined> =} callback
     **/
    currentReceipts: GenericStorageQuery<Rv, () => Array<EthereumReceiptReceiptV3> | undefined>;

    /**
     * The current transaction statuses.
     *
     * @param {Callback<Array<FpRpcTransactionStatus> | undefined> =} callback
     **/
    currentTransactionStatuses: GenericStorageQuery<Rv, () => Array<FpRpcTransactionStatus> | undefined>;

    /**
     *
     * @param {U256} arg
     * @param {Callback<H256> =} callback
     **/
    blockHash: GenericStorageQuery<Rv, (arg: U256) => H256, U256>;

    /**
     * Generic pallet storage query
     **/
    [storage: string]: GenericStorageQuery<Rv>;
  };
  /**
   * Pallet `Scheduler`'s storage queries
   **/
  scheduler: {
    /**
     *
     * @param {Callback<number | undefined> =} callback
     **/
    incompleteSince: GenericStorageQuery<Rv, () => number | undefined>;

    /**
     * Items to be executed, indexed by the block number that they should be executed on.
     *
     * @param {number} arg
     * @param {Callback<Array<PalletSchedulerScheduled | undefined>> =} callback
     **/
    agenda: GenericStorageQuery<Rv, (arg: number) => Array<PalletSchedulerScheduled | undefined>, number>;

    /**
     * Retry configurations for items to be executed, indexed by task address.
     *
     * @param {[number, number]} arg
     * @param {Callback<PalletSchedulerRetryConfig | undefined> =} callback
     **/
    retries: GenericStorageQuery<
      Rv,
      (arg: [number, number]) => PalletSchedulerRetryConfig | undefined,
      [number, number]
    >;

    /**
     * Lookup from a name to the block number and index of the task.
     *
     * For v3 -> v4 the previously unbounded identities are Blake2-256 hashed to form the v4
     * identities.
     *
     * @param {FixedBytes<32>} arg
     * @param {Callback<[number, number] | undefined> =} callback
     **/
    lookup: GenericStorageQuery<Rv, (arg: FixedBytes<32>) => [number, number] | undefined, FixedBytes<32>>;

    /**
     * Generic pallet storage query
     **/
    [storage: string]: GenericStorageQuery<Rv>;
  };
  /**
   * Pallet `Preimage`'s storage queries
   **/
  preimage: {
    /**
     * The request status of a given hash.
     *
     * @param {H256} arg
     * @param {Callback<PalletPreimageOldRequestStatus | undefined> =} callback
     **/
    statusFor: GenericStorageQuery<Rv, (arg: H256) => PalletPreimageOldRequestStatus | undefined, H256>;

    /**
     * The request status of a given hash.
     *
     * @param {H256} arg
     * @param {Callback<PalletPreimageRequestStatus | undefined> =} callback
     **/
    requestStatusFor: GenericStorageQuery<Rv, (arg: H256) => PalletPreimageRequestStatus | undefined, H256>;

    /**
     *
     * @param {[H256, number]} arg
     * @param {Callback<Bytes | undefined> =} callback
     **/
    preimageFor: GenericStorageQuery<Rv, (arg: [H256, number]) => Bytes | undefined, [H256, number]>;

    /**
     * Generic pallet storage query
     **/
    [storage: string]: GenericStorageQuery<Rv>;
  };
  /**
   * Pallet `ConvictionVoting`'s storage queries
   **/
  convictionVoting: {
    /**
     * All voting for a particular voter in a particular voting class. We store the balance for the
     * number of votes that we have recorded.
     *
     * @param {[AccountId20Like, number]} arg
     * @param {Callback<PalletConvictionVotingVoteVoting> =} callback
     **/
    votingFor: GenericStorageQuery<
      Rv,
      (arg: [AccountId20Like, number]) => PalletConvictionVotingVoteVoting,
      [AccountId20, number]
    >;

    /**
     * The voting classes which have a non-zero lock requirement and the lock amounts which they
     * require. The actual amount locked on behalf of this pallet should always be the maximum of
     * this list.
     *
     * @param {AccountId20Like} arg
     * @param {Callback<Array<[number, bigint]>> =} callback
     **/
    classLocksFor: GenericStorageQuery<Rv, (arg: AccountId20Like) => Array<[number, bigint]>, AccountId20>;

    /**
     * Generic pallet storage query
     **/
    [storage: string]: GenericStorageQuery<Rv>;
  };
  /**
   * Pallet `Referenda`'s storage queries
   **/
  referenda: {
    /**
     * The next free referendum index, aka the number of referenda started so far.
     *
     * @param {Callback<number> =} callback
     **/
    referendumCount: GenericStorageQuery<Rv, () => number>;

    /**
     * Information concerning any given referendum.
     *
     * @param {number} arg
     * @param {Callback<PalletReferendaReferendumInfo | undefined> =} callback
     **/
    referendumInfoFor: GenericStorageQuery<Rv, (arg: number) => PalletReferendaReferendumInfo | undefined, number>;

    /**
     * The sorted list of referenda ready to be decided but not yet being decided, ordered by
     * conviction-weighted approvals.
     *
     * This should be empty if `DecidingCount` is less than `TrackInfo::max_deciding`.
     *
     * @param {number} arg
     * @param {Callback<Array<[number, bigint]>> =} callback
     **/
    trackQueue: GenericStorageQuery<Rv, (arg: number) => Array<[number, bigint]>, number>;

    /**
     * The number of referenda being decided currently.
     *
     * @param {number} arg
     * @param {Callback<number> =} callback
     **/
    decidingCount: GenericStorageQuery<Rv, (arg: number) => number, number>;

    /**
     * The metadata is a general information concerning the referendum.
     * The `Hash` refers to the preimage of the `Preimages` provider which can be a JSON
     * dump or IPFS hash of a JSON file.
     *
     * Consider a garbage collection for a metadata of finished referendums to `unrequest` (remove)
     * large preimages.
     *
     * @param {number} arg
     * @param {Callback<H256 | undefined> =} callback
     **/
    metadataOf: GenericStorageQuery<Rv, (arg: number) => H256 | undefined, number>;

    /**
     * Generic pallet storage query
     **/
    [storage: string]: GenericStorageQuery<Rv>;
  };
  /**
   * Pallet `Whitelist`'s storage queries
   **/
  whitelist: {
    /**
     *
     * @param {H256} arg
     * @param {Callback<[] | undefined> =} callback
     **/
    whitelistedCall: GenericStorageQuery<Rv, (arg: H256) => [] | undefined, H256>;

    /**
     * Generic pallet storage query
     **/
    [storage: string]: GenericStorageQuery<Rv>;
  };
  /**
   * Pallet `TreasuryCouncilCollective`'s storage queries
   **/
  treasuryCouncilCollective: {
    /**
     * The hashes of the active proposals.
     *
     * @param {Callback<Array<H256>> =} callback
     **/
    proposals: GenericStorageQuery<Rv, () => Array<H256>>;

    /**
     * Actual proposal for a given hash, if it's current.
     *
     * @param {H256} arg
     * @param {Callback<MoonbeamRuntimeRuntimeCall | undefined> =} callback
     **/
    proposalOf: GenericStorageQuery<Rv, (arg: H256) => MoonbeamRuntimeRuntimeCall | undefined, H256>;

    /**
     * Votes on a given proposal, if it is ongoing.
     *
     * @param {H256} arg
     * @param {Callback<PalletCollectiveVotes | undefined> =} callback
     **/
    voting: GenericStorageQuery<Rv, (arg: H256) => PalletCollectiveVotes | undefined, H256>;

    /**
     * Proposals so far.
     *
     * @param {Callback<number> =} callback
     **/
    proposalCount: GenericStorageQuery<Rv, () => number>;

    /**
     * The current members of the collective. This is stored sorted (just by value).
     *
     * @param {Callback<Array<AccountId20>> =} callback
     **/
    members: GenericStorageQuery<Rv, () => Array<AccountId20>>;

    /**
     * The prime member that helps determine the default vote behavior in case of abstentions.
     *
     * @param {Callback<AccountId20 | undefined> =} callback
     **/
    prime: GenericStorageQuery<Rv, () => AccountId20 | undefined>;

    /**
     * Generic pallet storage query
     **/
    [storage: string]: GenericStorageQuery<Rv>;
  };
  /**
   * Pallet `OpenTechCommitteeCollective`'s storage queries
   **/
  openTechCommitteeCollective: {
    /**
     * The hashes of the active proposals.
     *
     * @param {Callback<Array<H256>> =} callback
     **/
    proposals: GenericStorageQuery<Rv, () => Array<H256>>;

    /**
     * Actual proposal for a given hash, if it's current.
     *
     * @param {H256} arg
     * @param {Callback<MoonbeamRuntimeRuntimeCall | undefined> =} callback
     **/
    proposalOf: GenericStorageQuery<Rv, (arg: H256) => MoonbeamRuntimeRuntimeCall | undefined, H256>;

    /**
     * Votes on a given proposal, if it is ongoing.
     *
     * @param {H256} arg
     * @param {Callback<PalletCollectiveVotes | undefined> =} callback
     **/
    voting: GenericStorageQuery<Rv, (arg: H256) => PalletCollectiveVotes | undefined, H256>;

    /**
     * Proposals so far.
     *
     * @param {Callback<number> =} callback
     **/
    proposalCount: GenericStorageQuery<Rv, () => number>;

    /**
     * The current members of the collective. This is stored sorted (just by value).
     *
     * @param {Callback<Array<AccountId20>> =} callback
     **/
    members: GenericStorageQuery<Rv, () => Array<AccountId20>>;

    /**
     * The prime member that helps determine the default vote behavior in case of abstentions.
     *
     * @param {Callback<AccountId20 | undefined> =} callback
     **/
    prime: GenericStorageQuery<Rv, () => AccountId20 | undefined>;

    /**
     * Generic pallet storage query
     **/
    [storage: string]: GenericStorageQuery<Rv>;
  };
  /**
   * Pallet `Treasury`'s storage queries
   **/
  treasury: {
    /**
     * Number of proposals that have been made.
     *
     * @param {Callback<number> =} callback
     **/
    proposalCount: GenericStorageQuery<Rv, () => number>;

    /**
     * Proposals that have been made.
     *
     * @param {number} arg
     * @param {Callback<PalletTreasuryProposal | undefined> =} callback
     **/
    proposals: GenericStorageQuery<Rv, (arg: number) => PalletTreasuryProposal | undefined, number>;

    /**
     * The amount which has been reported as inactive to Currency.
     *
     * @param {Callback<bigint> =} callback
     **/
    deactivated: GenericStorageQuery<Rv, () => bigint>;

    /**
     * Proposal indices that have been approved but not yet awarded.
     *
     * @param {Callback<Array<number>> =} callback
     **/
    approvals: GenericStorageQuery<Rv, () => Array<number>>;

    /**
     * The count of spends that have been made.
     *
     * @param {Callback<number> =} callback
     **/
    spendCount: GenericStorageQuery<Rv, () => number>;

    /**
     * Spends that have been approved and being processed.
     *
     * @param {number} arg
     * @param {Callback<PalletTreasurySpendStatus | undefined> =} callback
     **/
    spends: GenericStorageQuery<Rv, (arg: number) => PalletTreasurySpendStatus | undefined, number>;

    /**
     * Generic pallet storage query
     **/
    [storage: string]: GenericStorageQuery<Rv>;
  };
  /**
   * Pallet `CrowdloanRewards`'s storage queries
   **/
  crowdloanRewards: {
    /**
     *
     * @param {AccountId20Like} arg
     * @param {Callback<PalletCrowdloanRewardsRewardInfo | undefined> =} callback
     **/
    accountsPayable: GenericStorageQuery<
      Rv,
      (arg: AccountId20Like) => PalletCrowdloanRewardsRewardInfo | undefined,
      AccountId20
    >;

    /**
     *
     * @param {FixedBytes<32>} arg
     * @param {Callback<[] | undefined> =} callback
     **/
    claimedRelayChainIds: GenericStorageQuery<Rv, (arg: FixedBytes<32>) => [] | undefined, FixedBytes<32>>;

    /**
     *
     * @param {FixedBytes<32>} arg
     * @param {Callback<PalletCrowdloanRewardsRewardInfo | undefined> =} callback
     **/
    unassociatedContributions: GenericStorageQuery<
      Rv,
      (arg: FixedBytes<32>) => PalletCrowdloanRewardsRewardInfo | undefined,
      FixedBytes<32>
    >;

    /**
     *
     * @param {Callback<boolean> =} callback
     **/
    initialized: GenericStorageQuery<Rv, () => boolean>;

    /**
     * Vesting block height at the initialization of the pallet
     *
     * @param {Callback<number> =} callback
     **/
    initRelayBlock: GenericStorageQuery<Rv, () => number>;

    /**
     * Vesting block height at the initialization of the pallet
     *
     * @param {Callback<number> =} callback
     **/
    endRelayBlock: GenericStorageQuery<Rv, () => number>;

    /**
     * Total initialized amount so far. We store this to make pallet funds == contributors reward
     * check easier and more efficient
     *
     * @param {Callback<bigint> =} callback
     **/
    initializedRewardAmount: GenericStorageQuery<Rv, () => bigint>;

    /**
     * Total number of contributors to aid hinting benchmarking
     *
     * @param {Callback<number> =} callback
     **/
    totalContributors: GenericStorageQuery<Rv, () => number>;

    /**
     * Generic pallet storage query
     **/
    [storage: string]: GenericStorageQuery<Rv>;
  };
  /**
   * Pallet `XcmpQueue`'s storage queries
   **/
  xcmpQueue: {
    /**
     * The suspended inbound XCMP channels. All others are not suspended.
     *
     * This is a `StorageValue` instead of a `StorageMap` since we expect multiple reads per block
     * to different keys with a one byte payload. The access to `BoundedBTreeSet` will be cached
     * within the block and therefore only included once in the proof size.
     *
     * NOTE: The PoV benchmarking cannot know this and will over-estimate, but the actual proof
     * will be smaller.
     *
     * @param {Callback<Array<PolkadotParachainPrimitivesPrimitivesId>> =} callback
     **/
    inboundXcmpSuspended: GenericStorageQuery<Rv, () => Array<PolkadotParachainPrimitivesPrimitivesId>>;

    /**
     * The non-empty XCMP channels in order of becoming non-empty, and the index of the first
     * and last outbound message. If the two indices are equal, then it indicates an empty
     * queue and there must be a non-`Ok` `OutboundStatus`. We assume queues grow no greater
     * than 65535 items. Queue indices for normal messages begin at one; zero is reserved in
     * case of the need to send a high-priority signal message this block.
     * The bool is true if there is a signal message waiting to be sent.
     *
     * @param {Callback<Array<CumulusPalletXcmpQueueOutboundChannelDetails>> =} callback
     **/
    outboundXcmpStatus: GenericStorageQuery<Rv, () => Array<CumulusPalletXcmpQueueOutboundChannelDetails>>;

    /**
     * The messages outbound in a given XCMP channel.
     *
     * @param {[PolkadotParachainPrimitivesPrimitivesId, number]} arg
     * @param {Callback<Bytes> =} callback
     **/
    outboundXcmpMessages: GenericStorageQuery<
      Rv,
      (arg: [PolkadotParachainPrimitivesPrimitivesId, number]) => Bytes,
      [PolkadotParachainPrimitivesPrimitivesId, number]
    >;

    /**
     * Any signal messages waiting to be sent.
     *
     * @param {PolkadotParachainPrimitivesPrimitivesId} arg
     * @param {Callback<Bytes> =} callback
     **/
    signalMessages: GenericStorageQuery<
      Rv,
      (arg: PolkadotParachainPrimitivesPrimitivesId) => Bytes,
      PolkadotParachainPrimitivesPrimitivesId
    >;

    /**
     * The configuration which controls the dynamics of the outbound queue.
     *
     * @param {Callback<CumulusPalletXcmpQueueQueueConfigData> =} callback
     **/
    queueConfig: GenericStorageQuery<Rv, () => CumulusPalletXcmpQueueQueueConfigData>;

    /**
     * Whether or not the XCMP queue is suspended from executing incoming XCMs or not.
     *
     * @param {Callback<boolean> =} callback
     **/
    queueSuspended: GenericStorageQuery<Rv, () => boolean>;

    /**
     * The factor to multiply the base delivery fee by.
     *
     * @param {PolkadotParachainPrimitivesPrimitivesId} arg
     * @param {Callback<FixedU128> =} callback
     **/
    deliveryFeeFactor: GenericStorageQuery<
      Rv,
      (arg: PolkadotParachainPrimitivesPrimitivesId) => FixedU128,
      PolkadotParachainPrimitivesPrimitivesId
    >;

    /**
     * Generic pallet storage query
     **/
    [storage: string]: GenericStorageQuery<Rv>;
  };
  /**
   * Pallet `PolkadotXcm`'s storage queries
   **/
  polkadotXcm: {
    /**
     * The latest available query index.
     *
     * @param {Callback<bigint> =} callback
     **/
    queryCounter: GenericStorageQuery<Rv, () => bigint>;

    /**
     * The ongoing queries.
     *
     * @param {bigint} arg
     * @param {Callback<PalletXcmQueryStatus | undefined> =} callback
     **/
    queries: GenericStorageQuery<Rv, (arg: bigint) => PalletXcmQueryStatus | undefined, bigint>;

    /**
     * The existing asset traps.
     *
     * Key is the blake2 256 hash of (origin, versioned `Assets`) pair. Value is the number of
     * times this pair has been trapped (usually just 1 if it exists at all).
     *
     * @param {H256} arg
     * @param {Callback<number> =} callback
     **/
    assetTraps: GenericStorageQuery<Rv, (arg: H256) => number, H256>;

    /**
     * Default version to encode XCM when latest version of destination is unknown. If `None`,
     * then the destinations whose XCM version is unknown are considered unreachable.
     *
     * @param {Callback<number | undefined> =} callback
     **/
    safeXcmVersion: GenericStorageQuery<Rv, () => number | undefined>;

    /**
     * The Latest versions that we know various locations support.
     *
     * @param {[number, XcmVersionedLocation]} arg
     * @param {Callback<number | undefined> =} callback
     **/
    supportedVersion: GenericStorageQuery<
      Rv,
      (arg: [number, XcmVersionedLocation]) => number | undefined,
      [number, XcmVersionedLocation]
    >;

    /**
     * All locations that we have requested version notifications from.
     *
     * @param {[number, XcmVersionedLocation]} arg
     * @param {Callback<bigint | undefined> =} callback
     **/
    versionNotifiers: GenericStorageQuery<
      Rv,
      (arg: [number, XcmVersionedLocation]) => bigint | undefined,
      [number, XcmVersionedLocation]
    >;

    /**
     * The target locations that are subscribed to our version changes, as well as the most recent
     * of our versions we informed them of.
     *
     * @param {[number, XcmVersionedLocation]} arg
     * @param {Callback<[bigint, SpWeightsWeightV2Weight, number] | undefined> =} callback
     **/
    versionNotifyTargets: GenericStorageQuery<
      Rv,
      (arg: [number, XcmVersionedLocation]) => [bigint, SpWeightsWeightV2Weight, number] | undefined,
      [number, XcmVersionedLocation]
    >;

    /**
     * Destinations whose latest XCM version we would like to know. Duplicates not allowed, and
     * the `u32` counter is the number of times that a send to the destination has been attempted,
     * which is used as a prioritization.
     *
     * @param {Callback<Array<[XcmVersionedLocation, number]>> =} callback
     **/
    versionDiscoveryQueue: GenericStorageQuery<Rv, () => Array<[XcmVersionedLocation, number]>>;

    /**
     * The current migration's stage, if any.
     *
     * @param {Callback<PalletXcmVersionMigrationStage | undefined> =} callback
     **/
    currentMigration: GenericStorageQuery<Rv, () => PalletXcmVersionMigrationStage | undefined>;

    /**
     * Fungible assets which we know are locked on a remote chain.
     *
     * @param {[number, AccountId20Like, XcmVersionedAssetId]} arg
     * @param {Callback<PalletXcmRemoteLockedFungibleRecord | undefined> =} callback
     **/
    remoteLockedFungibles: GenericStorageQuery<
      Rv,
      (arg: [number, AccountId20Like, XcmVersionedAssetId]) => PalletXcmRemoteLockedFungibleRecord | undefined,
      [number, AccountId20, XcmVersionedAssetId]
    >;

    /**
     * Fungible assets which we know are locked on this chain.
     *
     * @param {AccountId20Like} arg
     * @param {Callback<Array<[bigint, XcmVersionedLocation]> | undefined> =} callback
     **/
    lockedFungibles: GenericStorageQuery<
      Rv,
      (arg: AccountId20Like) => Array<[bigint, XcmVersionedLocation]> | undefined,
      AccountId20
    >;

    /**
     * Global suspension state of the XCM executor.
     *
     * @param {Callback<boolean> =} callback
     **/
    xcmExecutionSuspended: GenericStorageQuery<Rv, () => boolean>;

    /**
     * Whether or not incoming XCMs (both executed locally and received) should be recorded.
     * Only one XCM program will be recorded at a time.
     * This is meant to be used in runtime APIs, and it's advised it stays false
     * for all other use cases, so as to not degrade regular performance.
     *
     * Only relevant if this pallet is being used as the [`xcm_executor::traits::RecordXcm`]
     * implementation in the XCM executor configuration.
     *
     * @param {Callback<boolean> =} callback
     **/
    shouldRecordXcm: GenericStorageQuery<Rv, () => boolean>;

    /**
     * If [`ShouldRecordXcm`] is set to true, then the last XCM program executed locally
     * will be stored here.
     * Runtime APIs can fetch the XCM that was executed by accessing this value.
     *
     * Only relevant if this pallet is being used as the [`xcm_executor::traits::RecordXcm`]
     * implementation in the XCM executor configuration.
     *
     * @param {Callback<StagingXcmV4Xcm | undefined> =} callback
     **/
    recordedXcm: GenericStorageQuery<Rv, () => StagingXcmV4Xcm | undefined>;

    /**
     * Generic pallet storage query
     **/
    [storage: string]: GenericStorageQuery<Rv>;
  };
  /**
   * Pallet `Assets`'s storage queries
   **/
  assets: {
    /**
     * Details of an asset.
     *
     * @param {bigint} arg
     * @param {Callback<PalletAssetsAssetDetails | undefined> =} callback
     **/
    asset: GenericStorageQuery<Rv, (arg: bigint) => PalletAssetsAssetDetails | undefined, bigint>;

    /**
     * The holdings of a specific account for a specific asset.
     *
     * @param {[bigint, AccountId20Like]} arg
     * @param {Callback<PalletAssetsAssetAccount | undefined> =} callback
     **/
    account: GenericStorageQuery<
      Rv,
      (arg: [bigint, AccountId20Like]) => PalletAssetsAssetAccount | undefined,
      [bigint, AccountId20]
    >;

    /**
     * Approved balance transfers. First balance is the amount approved for transfer. Second
     * is the amount of `T::Currency` reserved for storing this.
     * First key is the asset ID, second key is the owner and third key is the delegate.
     *
     * @param {[bigint, AccountId20Like, AccountId20Like]} arg
     * @param {Callback<PalletAssetsApproval | undefined> =} callback
     **/
    approvals: GenericStorageQuery<
      Rv,
      (arg: [bigint, AccountId20Like, AccountId20Like]) => PalletAssetsApproval | undefined,
      [bigint, AccountId20, AccountId20]
    >;

    /**
     * Metadata of an asset.
     *
     * @param {bigint} arg
     * @param {Callback<PalletAssetsAssetMetadata> =} callback
     **/
    metadata: GenericStorageQuery<Rv, (arg: bigint) => PalletAssetsAssetMetadata, bigint>;

    /**
     * The asset ID enforced for the next asset creation, if any present. Otherwise, this storage
     * item has no effect.
     *
     * This can be useful for setting up constraints for IDs of the new assets. For example, by
     * providing an initial [`NextAssetId`] and using the [`crate::AutoIncAssetId`] callback, an
     * auto-increment model can be applied to all new asset IDs.
     *
     * The initial next asset ID can be set using the [`GenesisConfig`] or the
     * [SetNextAssetId](`migration::next_asset_id::SetNextAssetId`) migration.
     *
     * @param {Callback<bigint | undefined> =} callback
     **/
    nextAssetId: GenericStorageQuery<Rv, () => bigint | undefined>;

    /**
     * Generic pallet storage query
     **/
    [storage: string]: GenericStorageQuery<Rv>;
  };
  /**
   * Pallet `AssetManager`'s storage queries
   **/
  assetManager: {
    /**
     * Mapping from an asset id to asset type.
     * This is mostly used when receiving transaction specifying an asset directly,
     * like transferring an asset from this chain to another.
     *
     * @param {bigint} arg
     * @param {Callback<MoonbeamRuntimeXcmConfigAssetType | undefined> =} callback
     **/
    assetIdType: GenericStorageQuery<Rv, (arg: bigint) => MoonbeamRuntimeXcmConfigAssetType | undefined, bigint>;

    /**
     * Reverse mapping of AssetIdType. Mapping from an asset type to an asset id.
     * This is mostly used when receiving a multilocation XCM message to retrieve
     * the corresponding asset in which tokens should me minted.
     *
     * @param {MoonbeamRuntimeXcmConfigAssetType} arg
     * @param {Callback<bigint | undefined> =} callback
     **/
    assetTypeId: GenericStorageQuery<
      Rv,
      (arg: MoonbeamRuntimeXcmConfigAssetType) => bigint | undefined,
      MoonbeamRuntimeXcmConfigAssetType
    >;

    /**
     * Generic pallet storage query
     **/
    [storage: string]: GenericStorageQuery<Rv>;
  };
  /**
   * Pallet `XcmTransactor`'s storage queries
   **/
  xcmTransactor: {
    /**
     * Since we are using pallet-utility for account derivation (through AsDerivative),
     * we need to provide an index for the account derivation. This storage item stores the index
     * assigned for a given local account. These indices are usable as derivative in the relay chain
     *
     * @param {number} arg
     * @param {Callback<AccountId20 | undefined> =} callback
     **/
    indexToAccount: GenericStorageQuery<Rv, (arg: number) => AccountId20 | undefined, number>;

    /**
     * Stores the transact info of a Location. This defines how much extra weight we need to
     * add when we want to transact in the destination chain and maximum amount of weight allowed
     * by the destination chain
     *
     * @param {StagingXcmV4Location} arg
     * @param {Callback<PalletXcmTransactorRemoteTransactInfoWithMaxWeight | undefined> =} callback
     **/
    transactInfoWithWeightLimit: GenericStorageQuery<
      Rv,
      (arg: StagingXcmV4Location) => PalletXcmTransactorRemoteTransactInfoWithMaxWeight | undefined,
      StagingXcmV4Location
    >;

    /**
     * Stores the fee per second for an asset in its reserve chain. This allows us to convert
     * from weight to fee
     *
     * @param {StagingXcmV4Location} arg
     * @param {Callback<bigint | undefined> =} callback
     **/
    destinationAssetFeePerSecond: GenericStorageQuery<
      Rv,
      (arg: StagingXcmV4Location) => bigint | undefined,
      StagingXcmV4Location
    >;

    /**
     * Stores the indices of relay chain pallets
     *
     * @param {Callback<PalletXcmTransactorRelayIndicesRelayChainIndices> =} callback
     **/
    relayIndices: GenericStorageQuery<Rv, () => PalletXcmTransactorRelayIndicesRelayChainIndices>;

    /**
     * Generic pallet storage query
     **/
    [storage: string]: GenericStorageQuery<Rv>;
  };
  /**
   * Pallet `EthereumXcm`'s storage queries
   **/
  ethereumXcm: {
    /**
     * Global nonce used for building Ethereum transaction payload.
     *
     * @param {Callback<U256> =} callback
     **/
    nonce: GenericStorageQuery<Rv, () => U256>;

    /**
     * Whether or not Ethereum-XCM is suspended from executing
     *
     * @param {Callback<boolean> =} callback
     **/
    ethereumXcmSuspended: GenericStorageQuery<Rv, () => boolean>;

    /**
     * Generic pallet storage query
     **/
    [storage: string]: GenericStorageQuery<Rv>;
  };
  /**
   * Pallet `MessageQueue`'s storage queries
   **/
  messageQueue: {
    /**
     * The index of the first and last (non-empty) pages.
     *
     * @param {CumulusPrimitivesCoreAggregateMessageOrigin} arg
     * @param {Callback<PalletMessageQueueBookState> =} callback
     **/
    bookStateFor: GenericStorageQuery<
      Rv,
      (arg: CumulusPrimitivesCoreAggregateMessageOrigin) => PalletMessageQueueBookState,
      CumulusPrimitivesCoreAggregateMessageOrigin
    >;

    /**
     * The origin at which we should begin servicing.
     *
     * @param {Callback<CumulusPrimitivesCoreAggregateMessageOrigin | undefined> =} callback
     **/
    serviceHead: GenericStorageQuery<Rv, () => CumulusPrimitivesCoreAggregateMessageOrigin | undefined>;

    /**
     * The map of page indices to pages.
     *
     * @param {[CumulusPrimitivesCoreAggregateMessageOrigin, number]} arg
     * @param {Callback<PalletMessageQueuePage | undefined> =} callback
     **/
    pages: GenericStorageQuery<
      Rv,
      (arg: [CumulusPrimitivesCoreAggregateMessageOrigin, number]) => PalletMessageQueuePage | undefined,
      [CumulusPrimitivesCoreAggregateMessageOrigin, number]
    >;

    /**
     * Generic pallet storage query
     **/
    [storage: string]: GenericStorageQuery<Rv>;
  };
  /**
   * Pallet `EvmForeignAssets`'s storage queries
   **/
  evmForeignAssets: {
    /**
     * Mapping from an asset id to a Foreign asset type.
     * This is mostly used when receiving transaction specifying an asset directly,
     * like transferring an asset from this chain to another.
     *
     * @param {bigint} arg
     * @param {Callback<StagingXcmV4Location | undefined> =} callback
     **/
    assetsById: GenericStorageQuery<Rv, (arg: bigint) => StagingXcmV4Location | undefined, bigint>;

    /**
     * Counter for the related counted storage map
     *
     * @param {Callback<number> =} callback
     **/
    counterForAssetsById: GenericStorageQuery<Rv, () => number>;

    /**
     * Reverse mapping of AssetsById. Mapping from a foreign asset to an asset id.
     * This is mostly used when receiving a multilocation XCM message to retrieve
     * the corresponding asset in which tokens should me minted.
     *
     * @param {StagingXcmV4Location} arg
     * @param {Callback<[bigint, PalletMoonbeamForeignAssetsAssetStatus] | undefined> =} callback
     **/
    assetsByLocation: GenericStorageQuery<
      Rv,
      (arg: StagingXcmV4Location) => [bigint, PalletMoonbeamForeignAssetsAssetStatus] | undefined,
      StagingXcmV4Location
    >;

    /**
     * Generic pallet storage query
     **/
    [storage: string]: GenericStorageQuery<Rv>;
  };
  /**
   * Pallet `XcmWeightTrader`'s storage queries
   **/
  xcmWeightTrader: {
    /**
     * Stores all supported assets per XCM Location.
     * The u128 is the asset price relative to native asset with 18 decimals
     * The boolean specify if the support for this asset is active
     *
     * @param {StagingXcmV4Location} arg
     * @param {Callback<[boolean, bigint] | undefined> =} callback
     **/
    supportedAssets: GenericStorageQuery<
      Rv,
      (arg: StagingXcmV4Location) => [boolean, bigint] | undefined,
      StagingXcmV4Location
    >;

    /**
     * Generic pallet storage query
     **/
    [storage: string]: GenericStorageQuery<Rv>;
  };
  /**
   * Pallet `EmergencyParaXcm`'s storage queries
   **/
  emergencyParaXcm: {
    /**
     * Whether incoming XCM is enabled or paused
     *
     * @param {Callback<PalletEmergencyParaXcmXcmMode> =} callback
     **/
    mode: GenericStorageQuery<Rv, () => PalletEmergencyParaXcmXcmMode>;

    /**
     * Generic pallet storage query
     **/
    [storage: string]: GenericStorageQuery<Rv>;
  };
  /**
   * Pallet `RelayStorageRoots`'s storage queries
   **/
  relayStorageRoots: {
    /**
     * Map of relay block number to relay storage root
     *
     * @param {number} arg
     * @param {Callback<H256 | undefined> =} callback
     **/
    relayStorageRoot: GenericStorageQuery<Rv, (arg: number) => H256 | undefined, number>;

    /**
     * List of all the keys in `RelayStorageRoot`.
     * Used to remove the oldest key without having to iterate over all of them.
     *
     * @param {Callback<Array<number>> =} callback
     **/
    relayStorageRootKeys: GenericStorageQuery<Rv, () => Array<number>>;

    /**
     * Generic pallet storage query
     **/
    [storage: string]: GenericStorageQuery<Rv>;
  };
  /**
   * Pallet `Randomness`'s storage queries
   **/
  randomness: {
    /**
     * Randomness requests not yet fulfilled or purged
     *
     * @param {bigint} arg
     * @param {Callback<PalletRandomnessRequestState | undefined> =} callback
     **/
    requests: GenericStorageQuery<Rv, (arg: bigint) => PalletRandomnessRequestState | undefined, bigint>;

    /**
     * Number of randomness requests made so far, used to generate the next request's uid
     *
     * @param {Callback<bigint> =} callback
     **/
    requestCount: GenericStorageQuery<Rv, () => bigint>;

    /**
     * Current local per-block VRF randomness
     * Set in `on_initialize`
     *
     * @param {Callback<H256 | undefined> =} callback
     **/
    localVrfOutput: GenericStorageQuery<Rv, () => H256 | undefined>;

    /**
     * Relay epoch
     *
     * @param {Callback<bigint> =} callback
     **/
    relayEpoch: GenericStorageQuery<Rv, () => bigint>;

    /**
     * Ensures the mandatory inherent was included in the block
     *
     * @param {Callback<[] | undefined> =} callback
     **/
    inherentIncluded: GenericStorageQuery<Rv, () => [] | undefined>;

    /**
     * Records whether this is the first block (genesis or runtime upgrade)
     *
     * @param {Callback<[] | undefined> =} callback
     **/
    notFirstBlock: GenericStorageQuery<Rv, () => [] | undefined>;

    /**
     * Snapshot of randomness to fulfill all requests that are for the same raw randomness
     * Removed once $value.request_count == 0
     *
     * @param {PalletRandomnessRequestType} arg
     * @param {Callback<PalletRandomnessRandomnessResult | undefined> =} callback
     **/
    randomnessResults: GenericStorageQuery<
      Rv,
      (arg: PalletRandomnessRequestType) => PalletRandomnessRandomnessResult | undefined,
      PalletRandomnessRequestType
    >;

    /**
     * Previous local per-block VRF randomness
     * Set in `on_finalize` of last block
     *
     * @param {Callback<H256> =} callback
     **/
    previousLocalVrfOutput: GenericStorageQuery<Rv, () => H256>;

    /**
     * Generic pallet storage query
     **/
    [storage: string]: GenericStorageQuery<Rv>;
  };
}
