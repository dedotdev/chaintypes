// Generated by dedot cli

import type { GenericChainEvents, GenericPalletEvent, RpcVersion } from 'dedot/types';
import type {
  DispatchInfo,
  DispatchError,
  AccountId32,
  H256,
  Result,
  Perbill,
  FixedBytes,
  Bytes,
  Perquintill,
} from 'dedot/codecs';
import type {
  SpConsensusGrandpaAppPublic,
  FrameSupportTokensMiscBalanceStatus,
  PalletImOnlineSr25519AppSr25519Public,
  SpStakingExposure,
  PalletStakingRewardDestination,
  PalletStakingValidatorPrefs,
  PalletStakingForcing,
  PalletConvictionVotingVoteAccountVote,
  FrameSupportPreimagesBounded,
  PalletConvictionVotingTally,
  PalletRankedCollectiveVoteRecord,
  PalletRankedCollectiveTally,
  FrameSupportDispatchPostDispatchInfo,
  SpRuntimeDispatchErrorWithPostInfo,
  VaraRuntimeProxyType,
  PalletMultisigTimepoint,
  PalletElectionProviderMultiPhaseElectionCompute,
  SpNposElectionsElectionScore,
  PalletElectionProviderMultiPhasePhase,
  PalletNominationPoolsPoolState,
  PalletNominationPoolsCommissionChangeRate,
  PalletNominationPoolsCommissionClaimPermission,
  GprimitivesMessageId,
  GprimitivesActorId,
  GearCommonEventMessageEntry,
  GearCoreMessageUserUserMessage,
  GearCommonEventReason,
  GearCommonEventDispatchStatus,
  GearCommonGasProviderNodeGasNodeId,
  GearCommonEventReasonMessageWaitedRuntimeReason,
  GearCommonEventReasonMessageWokenRuntimeReason,
  GprimitivesCodeId,
  GearCommonEventCodeChangeKind,
  GearCommonEventProgramChangeKind,
  PalletGearVoucherInternalVoucherId,
  PalletGearEthBridgePrimitivesEthMessage,
} from './types.js';

export interface ChainEvents<Rv extends RpcVersion> extends GenericChainEvents<Rv> {
  /**
   * Pallet `System`'s events
   **/
  system: {
    /**
     * An extrinsic completed successfully.
     **/
    ExtrinsicSuccess: GenericPalletEvent<Rv, 'System', 'ExtrinsicSuccess', { dispatchInfo: DispatchInfo }>;

    /**
     * An extrinsic failed.
     **/
    ExtrinsicFailed: GenericPalletEvent<
      Rv,
      'System',
      'ExtrinsicFailed',
      { dispatchError: DispatchError; dispatchInfo: DispatchInfo }
    >;

    /**
     * `:code` was updated.
     **/
    CodeUpdated: GenericPalletEvent<Rv, 'System', 'CodeUpdated', null>;

    /**
     * A new account was created.
     **/
    NewAccount: GenericPalletEvent<Rv, 'System', 'NewAccount', { account: AccountId32 }>;

    /**
     * An account was reaped.
     **/
    KilledAccount: GenericPalletEvent<Rv, 'System', 'KilledAccount', { account: AccountId32 }>;

    /**
     * On on-chain remark happened.
     **/
    Remarked: GenericPalletEvent<Rv, 'System', 'Remarked', { sender: AccountId32; hash: H256 }>;

    /**
     * An upgrade was authorized.
     **/
    UpgradeAuthorized: GenericPalletEvent<Rv, 'System', 'UpgradeAuthorized', { codeHash: H256; checkVersion: boolean }>;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Grandpa`'s events
   **/
  grandpa: {
    /**
     * New authority set has been applied.
     **/
    NewAuthorities: GenericPalletEvent<
      Rv,
      'Grandpa',
      'NewAuthorities',
      { authoritySet: Array<[SpConsensusGrandpaAppPublic, bigint]> }
    >;

    /**
     * Current authority set has been paused.
     **/
    Paused: GenericPalletEvent<Rv, 'Grandpa', 'Paused', null>;

    /**
     * Current authority set has been resumed.
     **/
    Resumed: GenericPalletEvent<Rv, 'Grandpa', 'Resumed', null>;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Balances`'s events
   **/
  balances: {
    /**
     * An account was created with some free balance.
     **/
    Endowed: GenericPalletEvent<Rv, 'Balances', 'Endowed', { account: AccountId32; freeBalance: bigint }>;

    /**
     * An account was removed whose balance was non-zero but below ExistentialDeposit,
     * resulting in an outright loss.
     **/
    DustLost: GenericPalletEvent<Rv, 'Balances', 'DustLost', { account: AccountId32; amount: bigint }>;

    /**
     * Transfer succeeded.
     **/
    Transfer: GenericPalletEvent<Rv, 'Balances', 'Transfer', { from: AccountId32; to: AccountId32; amount: bigint }>;

    /**
     * A balance was set by root.
     **/
    BalanceSet: GenericPalletEvent<Rv, 'Balances', 'BalanceSet', { who: AccountId32; free: bigint }>;

    /**
     * Some balance was reserved (moved from free to reserved).
     **/
    Reserved: GenericPalletEvent<Rv, 'Balances', 'Reserved', { who: AccountId32; amount: bigint }>;

    /**
     * Some balance was unreserved (moved from reserved to free).
     **/
    Unreserved: GenericPalletEvent<Rv, 'Balances', 'Unreserved', { who: AccountId32; amount: bigint }>;

    /**
     * Some balance was moved from the reserve of the first account to the second account.
     * Final argument indicates the destination balance type.
     **/
    ReserveRepatriated: GenericPalletEvent<
      Rv,
      'Balances',
      'ReserveRepatriated',
      { from: AccountId32; to: AccountId32; amount: bigint; destinationStatus: FrameSupportTokensMiscBalanceStatus }
    >;

    /**
     * Some amount was deposited (e.g. for transaction fees).
     **/
    Deposit: GenericPalletEvent<Rv, 'Balances', 'Deposit', { who: AccountId32; amount: bigint }>;

    /**
     * Some amount was withdrawn from the account (e.g. for transaction fees).
     **/
    Withdraw: GenericPalletEvent<Rv, 'Balances', 'Withdraw', { who: AccountId32; amount: bigint }>;

    /**
     * Some amount was removed from the account (e.g. for misbehavior).
     **/
    Slashed: GenericPalletEvent<Rv, 'Balances', 'Slashed', { who: AccountId32; amount: bigint }>;

    /**
     * Some amount was minted into an account.
     **/
    Minted: GenericPalletEvent<Rv, 'Balances', 'Minted', { who: AccountId32; amount: bigint }>;

    /**
     * Some amount was burned from an account.
     **/
    Burned: GenericPalletEvent<Rv, 'Balances', 'Burned', { who: AccountId32; amount: bigint }>;

    /**
     * Some amount was suspended from an account (it can be restored later).
     **/
    Suspended: GenericPalletEvent<Rv, 'Balances', 'Suspended', { who: AccountId32; amount: bigint }>;

    /**
     * Some amount was restored into an account.
     **/
    Restored: GenericPalletEvent<Rv, 'Balances', 'Restored', { who: AccountId32; amount: bigint }>;

    /**
     * An account was upgraded.
     **/
    Upgraded: GenericPalletEvent<Rv, 'Balances', 'Upgraded', { who: AccountId32 }>;

    /**
     * Total issuance was increased by `amount`, creating a credit to be balanced.
     **/
    Issued: GenericPalletEvent<Rv, 'Balances', 'Issued', { amount: bigint }>;

    /**
     * Total issuance was decreased by `amount`, creating a debt to be balanced.
     **/
    Rescinded: GenericPalletEvent<Rv, 'Balances', 'Rescinded', { amount: bigint }>;

    /**
     * Some balance was locked.
     **/
    Locked: GenericPalletEvent<Rv, 'Balances', 'Locked', { who: AccountId32; amount: bigint }>;

    /**
     * Some balance was unlocked.
     **/
    Unlocked: GenericPalletEvent<Rv, 'Balances', 'Unlocked', { who: AccountId32; amount: bigint }>;

    /**
     * Some balance was frozen.
     **/
    Frozen: GenericPalletEvent<Rv, 'Balances', 'Frozen', { who: AccountId32; amount: bigint }>;

    /**
     * Some balance was thawed.
     **/
    Thawed: GenericPalletEvent<Rv, 'Balances', 'Thawed', { who: AccountId32; amount: bigint }>;

    /**
     * The `TotalIssuance` was forcefully changed.
     **/
    TotalIssuanceForced: GenericPalletEvent<Rv, 'Balances', 'TotalIssuanceForced', { old: bigint; new: bigint }>;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `TransactionPayment`'s events
   **/
  transactionPayment: {
    /**
     * A transaction fee `actual_fee`, of which `tip` was added to the minimum inclusion fee,
     * has been paid by `who`.
     **/
    TransactionFeePaid: GenericPalletEvent<
      Rv,
      'TransactionPayment',
      'TransactionFeePaid',
      { who: AccountId32; actualFee: bigint; tip: bigint }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Session`'s events
   **/
  session: {
    /**
     * New session has happened. Note that the argument is the session index, not the
     * block number as the type might suggest.
     **/
    NewSession: GenericPalletEvent<Rv, 'Session', 'NewSession', { sessionIndex: number }>;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Utility`'s events
   **/
  utility: {
    /**
     * Batch of dispatches did not complete fully. Index of first failing dispatch given, as
     * well as the error.
     **/
    BatchInterrupted: GenericPalletEvent<Rv, 'Utility', 'BatchInterrupted', { index: number; error: DispatchError }>;

    /**
     * Batch of dispatches completed fully with no error.
     **/
    BatchCompleted: GenericPalletEvent<Rv, 'Utility', 'BatchCompleted', null>;

    /**
     * Batch of dispatches completed but has errors.
     **/
    BatchCompletedWithErrors: GenericPalletEvent<Rv, 'Utility', 'BatchCompletedWithErrors', null>;

    /**
     * A single item within a Batch of dispatches has completed with no error.
     **/
    ItemCompleted: GenericPalletEvent<Rv, 'Utility', 'ItemCompleted', null>;

    /**
     * A single item within a Batch of dispatches has completed with error.
     **/
    ItemFailed: GenericPalletEvent<Rv, 'Utility', 'ItemFailed', { error: DispatchError }>;

    /**
     * A call was dispatched.
     **/
    DispatchedAs: GenericPalletEvent<Rv, 'Utility', 'DispatchedAs', { result: Result<[], DispatchError> }>;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Vesting`'s events
   **/
  vesting: {
    /**
     * The amount vested has been updated. This could indicate a change in funds available.
     * The balance given is the amount which is left unvested (and thus locked).
     **/
    VestingUpdated: GenericPalletEvent<Rv, 'Vesting', 'VestingUpdated', { account: AccountId32; unvested: bigint }>;

    /**
     * An \[account\] has become fully vested.
     **/
    VestingCompleted: GenericPalletEvent<Rv, 'Vesting', 'VestingCompleted', { account: AccountId32 }>;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `BagsList`'s events
   **/
  bagsList: {
    /**
     * Moved an account from one bag to another.
     **/
    Rebagged: GenericPalletEvent<Rv, 'BagsList', 'Rebagged', { who: AccountId32; from: bigint; to: bigint }>;

    /**
     * Updated the score of some account to the given amount.
     **/
    ScoreUpdated: GenericPalletEvent<Rv, 'BagsList', 'ScoreUpdated', { who: AccountId32; newScore: bigint }>;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `ImOnline`'s events
   **/
  imOnline: {
    /**
     * A new heartbeat was received from `AuthorityId`.
     **/
    HeartbeatReceived: GenericPalletEvent<
      Rv,
      'ImOnline',
      'HeartbeatReceived',
      { authorityId: PalletImOnlineSr25519AppSr25519Public }
    >;

    /**
     * At the end of the session, no offence was committed.
     **/
    AllGood: GenericPalletEvent<Rv, 'ImOnline', 'AllGood', null>;

    /**
     * At the end of the session, at least one validator was found to be offline.
     **/
    SomeOffline: GenericPalletEvent<
      Rv,
      'ImOnline',
      'SomeOffline',
      { offline: Array<[AccountId32, SpStakingExposure]> }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Staking`'s events
   **/
  staking: {
    /**
     * The era payout has been set; the first balance is the validator-payout; the second is
     * the remainder from the maximum amount of reward.
     **/
    EraPaid: GenericPalletEvent<
      Rv,
      'Staking',
      'EraPaid',
      { eraIndex: number; validatorPayout: bigint; remainder: bigint }
    >;

    /**
     * The nominator has been rewarded by this amount to this destination.
     **/
    Rewarded: GenericPalletEvent<
      Rv,
      'Staking',
      'Rewarded',
      { stash: AccountId32; dest: PalletStakingRewardDestination; amount: bigint }
    >;

    /**
     * A staker (validator or nominator) has been slashed by the given amount.
     **/
    Slashed: GenericPalletEvent<Rv, 'Staking', 'Slashed', { staker: AccountId32; amount: bigint }>;

    /**
     * A slash for the given validator, for the given percentage of their stake, at the given
     * era as been reported.
     **/
    SlashReported: GenericPalletEvent<
      Rv,
      'Staking',
      'SlashReported',
      { validator: AccountId32; fraction: Perbill; slashEra: number }
    >;

    /**
     * An old slashing report from a prior era was discarded because it could
     * not be processed.
     **/
    OldSlashingReportDiscarded: GenericPalletEvent<
      Rv,
      'Staking',
      'OldSlashingReportDiscarded',
      { sessionIndex: number }
    >;

    /**
     * A new set of stakers was elected.
     **/
    StakersElected: GenericPalletEvent<Rv, 'Staking', 'StakersElected', null>;

    /**
     * An account has bonded this amount. \[stash, amount\]
     *
     * NOTE: This event is only emitted when funds are bonded via a dispatchable. Notably,
     * it will not be emitted for staking rewards when they are added to stake.
     **/
    Bonded: GenericPalletEvent<Rv, 'Staking', 'Bonded', { stash: AccountId32; amount: bigint }>;

    /**
     * An account has unbonded this amount.
     **/
    Unbonded: GenericPalletEvent<Rv, 'Staking', 'Unbonded', { stash: AccountId32; amount: bigint }>;

    /**
     * An account has called `withdraw_unbonded` and removed unbonding chunks worth `Balance`
     * from the unlocking queue.
     **/
    Withdrawn: GenericPalletEvent<Rv, 'Staking', 'Withdrawn', { stash: AccountId32; amount: bigint }>;

    /**
     * A nominator has been kicked from a validator.
     **/
    Kicked: GenericPalletEvent<Rv, 'Staking', 'Kicked', { nominator: AccountId32; stash: AccountId32 }>;

    /**
     * The election failed. No new era is planned.
     **/
    StakingElectionFailed: GenericPalletEvent<Rv, 'Staking', 'StakingElectionFailed', null>;

    /**
     * An account has stopped participating as either a validator or nominator.
     **/
    Chilled: GenericPalletEvent<Rv, 'Staking', 'Chilled', { stash: AccountId32 }>;

    /**
     * The stakers' rewards are getting paid.
     **/
    PayoutStarted: GenericPalletEvent<
      Rv,
      'Staking',
      'PayoutStarted',
      { eraIndex: number; validatorStash: AccountId32 }
    >;

    /**
     * A validator has set their preferences.
     **/
    ValidatorPrefsSet: GenericPalletEvent<
      Rv,
      'Staking',
      'ValidatorPrefsSet',
      { stash: AccountId32; prefs: PalletStakingValidatorPrefs }
    >;

    /**
     * Voters size limit reached.
     **/
    SnapshotVotersSizeExceeded: GenericPalletEvent<Rv, 'Staking', 'SnapshotVotersSizeExceeded', { size: number }>;

    /**
     * Targets size limit reached.
     **/
    SnapshotTargetsSizeExceeded: GenericPalletEvent<Rv, 'Staking', 'SnapshotTargetsSizeExceeded', { size: number }>;

    /**
     * A new force era mode was set.
     **/
    ForceEra: GenericPalletEvent<Rv, 'Staking', 'ForceEra', { mode: PalletStakingForcing }>;

    /**
     * Report of a controller batch deprecation.
     **/
    ControllerBatchDeprecated: GenericPalletEvent<Rv, 'Staking', 'ControllerBatchDeprecated', { failures: number }>;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Treasury`'s events
   **/
  treasury: {
    /**
     * We have ended a spend period and will now allocate funds.
     **/
    Spending: GenericPalletEvent<Rv, 'Treasury', 'Spending', { budgetRemaining: bigint }>;

    /**
     * Some funds have been allocated.
     **/
    Awarded: GenericPalletEvent<
      Rv,
      'Treasury',
      'Awarded',
      { proposalIndex: number; award: bigint; account: AccountId32 }
    >;

    /**
     * Some of our funds have been burnt.
     **/
    Burnt: GenericPalletEvent<Rv, 'Treasury', 'Burnt', { burntFunds: bigint }>;

    /**
     * Spending has finished; this is the amount that rolls over until next spend.
     **/
    Rollover: GenericPalletEvent<Rv, 'Treasury', 'Rollover', { rolloverBalance: bigint }>;

    /**
     * Some funds have been deposited.
     **/
    Deposit: GenericPalletEvent<Rv, 'Treasury', 'Deposit', { value: bigint }>;

    /**
     * A new spend proposal has been approved.
     **/
    SpendApproved: GenericPalletEvent<
      Rv,
      'Treasury',
      'SpendApproved',
      { proposalIndex: number; amount: bigint; beneficiary: AccountId32 }
    >;

    /**
     * The inactive funds of the pallet have been updated.
     **/
    UpdatedInactive: GenericPalletEvent<
      Rv,
      'Treasury',
      'UpdatedInactive',
      { reactivated: bigint; deactivated: bigint }
    >;

    /**
     * A new asset spend proposal has been approved.
     **/
    AssetSpendApproved: GenericPalletEvent<
      Rv,
      'Treasury',
      'AssetSpendApproved',
      { index: number; assetKind: []; amount: bigint; beneficiary: AccountId32; validFrom: number; expireAt: number }
    >;

    /**
     * An approved spend was voided.
     **/
    AssetSpendVoided: GenericPalletEvent<Rv, 'Treasury', 'AssetSpendVoided', { index: number }>;

    /**
     * A payment happened.
     **/
    Paid: GenericPalletEvent<Rv, 'Treasury', 'Paid', { index: number; paymentId: [] }>;

    /**
     * A payment failed and can be retried.
     **/
    PaymentFailed: GenericPalletEvent<Rv, 'Treasury', 'PaymentFailed', { index: number; paymentId: [] }>;

    /**
     * A spend was processed and removed from the storage. It might have been successfully
     * paid or it may have expired.
     **/
    SpendProcessed: GenericPalletEvent<Rv, 'Treasury', 'SpendProcessed', { index: number }>;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `ConvictionVoting`'s events
   **/
  convictionVoting: {
    /**
     * An account has delegated their vote to another account. \[who, target\]
     **/
    Delegated: GenericPalletEvent<Rv, 'ConvictionVoting', 'Delegated', [AccountId32, AccountId32]>;

    /**
     * An \[account\] has cancelled a previous delegation operation.
     **/
    Undelegated: GenericPalletEvent<Rv, 'ConvictionVoting', 'Undelegated', AccountId32>;

    /**
     * An account that has voted
     **/
    Voted: GenericPalletEvent<
      Rv,
      'ConvictionVoting',
      'Voted',
      { who: AccountId32; vote: PalletConvictionVotingVoteAccountVote }
    >;

    /**
     * A vote that been removed
     **/
    VoteRemoved: GenericPalletEvent<
      Rv,
      'ConvictionVoting',
      'VoteRemoved',
      { who: AccountId32; vote: PalletConvictionVotingVoteAccountVote }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Referenda`'s events
   **/
  referenda: {
    /**
     * A referendum has been submitted.
     **/
    Submitted: GenericPalletEvent<
      Rv,
      'Referenda',
      'Submitted',
      {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * The track (and by extension proposal dispatch origin) of this referendum.
         **/
        track: number;

        /**
         * The proposal for the referendum.
         **/
        proposal: FrameSupportPreimagesBounded;
      }
    >;

    /**
     * The decision deposit has been placed.
     **/
    DecisionDepositPlaced: GenericPalletEvent<
      Rv,
      'Referenda',
      'DecisionDepositPlaced',
      {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * The account who placed the deposit.
         **/
        who: AccountId32;

        /**
         * The amount placed by the account.
         **/
        amount: bigint;
      }
    >;

    /**
     * The decision deposit has been refunded.
     **/
    DecisionDepositRefunded: GenericPalletEvent<
      Rv,
      'Referenda',
      'DecisionDepositRefunded',
      {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * The account who placed the deposit.
         **/
        who: AccountId32;

        /**
         * The amount placed by the account.
         **/
        amount: bigint;
      }
    >;

    /**
     * A deposit has been slashed.
     **/
    DepositSlashed: GenericPalletEvent<
      Rv,
      'Referenda',
      'DepositSlashed',
      {
        /**
         * The account who placed the deposit.
         **/
        who: AccountId32;

        /**
         * The amount placed by the account.
         **/
        amount: bigint;
      }
    >;

    /**
     * A referendum has moved into the deciding phase.
     **/
    DecisionStarted: GenericPalletEvent<
      Rv,
      'Referenda',
      'DecisionStarted',
      {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * The track (and by extension proposal dispatch origin) of this referendum.
         **/
        track: number;

        /**
         * The proposal for the referendum.
         **/
        proposal: FrameSupportPreimagesBounded;

        /**
         * The current tally of votes in this referendum.
         **/
        tally: PalletConvictionVotingTally;
      }
    >;
    ConfirmStarted: GenericPalletEvent<
      Rv,
      'Referenda',
      'ConfirmStarted',
      {
        /**
         * Index of the referendum.
         **/
        index: number;
      }
    >;
    ConfirmAborted: GenericPalletEvent<
      Rv,
      'Referenda',
      'ConfirmAborted',
      {
        /**
         * Index of the referendum.
         **/
        index: number;
      }
    >;

    /**
     * A referendum has ended its confirmation phase and is ready for approval.
     **/
    Confirmed: GenericPalletEvent<
      Rv,
      'Referenda',
      'Confirmed',
      {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * The final tally of votes in this referendum.
         **/
        tally: PalletConvictionVotingTally;
      }
    >;

    /**
     * A referendum has been approved and its proposal has been scheduled.
     **/
    Approved: GenericPalletEvent<
      Rv,
      'Referenda',
      'Approved',
      {
        /**
         * Index of the referendum.
         **/
        index: number;
      }
    >;

    /**
     * A proposal has been rejected by referendum.
     **/
    Rejected: GenericPalletEvent<
      Rv,
      'Referenda',
      'Rejected',
      {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * The final tally of votes in this referendum.
         **/
        tally: PalletConvictionVotingTally;
      }
    >;

    /**
     * A referendum has been timed out without being decided.
     **/
    TimedOut: GenericPalletEvent<
      Rv,
      'Referenda',
      'TimedOut',
      {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * The final tally of votes in this referendum.
         **/
        tally: PalletConvictionVotingTally;
      }
    >;

    /**
     * A referendum has been cancelled.
     **/
    Cancelled: GenericPalletEvent<
      Rv,
      'Referenda',
      'Cancelled',
      {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * The final tally of votes in this referendum.
         **/
        tally: PalletConvictionVotingTally;
      }
    >;

    /**
     * A referendum has been killed.
     **/
    Killed: GenericPalletEvent<
      Rv,
      'Referenda',
      'Killed',
      {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * The final tally of votes in this referendum.
         **/
        tally: PalletConvictionVotingTally;
      }
    >;

    /**
     * The submission deposit has been refunded.
     **/
    SubmissionDepositRefunded: GenericPalletEvent<
      Rv,
      'Referenda',
      'SubmissionDepositRefunded',
      {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * The account who placed the deposit.
         **/
        who: AccountId32;

        /**
         * The amount placed by the account.
         **/
        amount: bigint;
      }
    >;

    /**
     * Metadata for a referendum has been set.
     **/
    MetadataSet: GenericPalletEvent<
      Rv,
      'Referenda',
      'MetadataSet',
      {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * Preimage hash.
         **/
        hash: H256;
      }
    >;

    /**
     * Metadata for a referendum has been cleared.
     **/
    MetadataCleared: GenericPalletEvent<
      Rv,
      'Referenda',
      'MetadataCleared',
      {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * Preimage hash.
         **/
        hash: H256;
      }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `FellowshipCollective`'s events
   **/
  fellowshipCollective: {
    /**
     * A member `who` has been added.
     **/
    MemberAdded: GenericPalletEvent<Rv, 'FellowshipCollective', 'MemberAdded', { who: AccountId32 }>;

    /**
     * The member `who`se rank has been changed to the given `rank`.
     **/
    RankChanged: GenericPalletEvent<Rv, 'FellowshipCollective', 'RankChanged', { who: AccountId32; rank: number }>;

    /**
     * The member `who` of given `rank` has been removed from the collective.
     **/
    MemberRemoved: GenericPalletEvent<Rv, 'FellowshipCollective', 'MemberRemoved', { who: AccountId32; rank: number }>;

    /**
     * The member `who` has voted for the `poll` with the given `vote` leading to an updated
     * `tally`.
     **/
    Voted: GenericPalletEvent<
      Rv,
      'FellowshipCollective',
      'Voted',
      { who: AccountId32; poll: number; vote: PalletRankedCollectiveVoteRecord; tally: PalletRankedCollectiveTally }
    >;

    /**
     * The member `who` had their `AccountId` changed to `new_who`.
     **/
    MemberExchanged: GenericPalletEvent<
      Rv,
      'FellowshipCollective',
      'MemberExchanged',
      { who: AccountId32; newWho: AccountId32 }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `FellowshipReferenda`'s events
   **/
  fellowshipReferenda: {
    /**
     * A referendum has been submitted.
     **/
    Submitted: GenericPalletEvent<
      Rv,
      'FellowshipReferenda',
      'Submitted',
      {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * The track (and by extension proposal dispatch origin) of this referendum.
         **/
        track: number;

        /**
         * The proposal for the referendum.
         **/
        proposal: FrameSupportPreimagesBounded;
      }
    >;

    /**
     * The decision deposit has been placed.
     **/
    DecisionDepositPlaced: GenericPalletEvent<
      Rv,
      'FellowshipReferenda',
      'DecisionDepositPlaced',
      {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * The account who placed the deposit.
         **/
        who: AccountId32;

        /**
         * The amount placed by the account.
         **/
        amount: bigint;
      }
    >;

    /**
     * The decision deposit has been refunded.
     **/
    DecisionDepositRefunded: GenericPalletEvent<
      Rv,
      'FellowshipReferenda',
      'DecisionDepositRefunded',
      {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * The account who placed the deposit.
         **/
        who: AccountId32;

        /**
         * The amount placed by the account.
         **/
        amount: bigint;
      }
    >;

    /**
     * A deposit has been slashed.
     **/
    DepositSlashed: GenericPalletEvent<
      Rv,
      'FellowshipReferenda',
      'DepositSlashed',
      {
        /**
         * The account who placed the deposit.
         **/
        who: AccountId32;

        /**
         * The amount placed by the account.
         **/
        amount: bigint;
      }
    >;

    /**
     * A referendum has moved into the deciding phase.
     **/
    DecisionStarted: GenericPalletEvent<
      Rv,
      'FellowshipReferenda',
      'DecisionStarted',
      {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * The track (and by extension proposal dispatch origin) of this referendum.
         **/
        track: number;

        /**
         * The proposal for the referendum.
         **/
        proposal: FrameSupportPreimagesBounded;

        /**
         * The current tally of votes in this referendum.
         **/
        tally: PalletRankedCollectiveTally;
      }
    >;
    ConfirmStarted: GenericPalletEvent<
      Rv,
      'FellowshipReferenda',
      'ConfirmStarted',
      {
        /**
         * Index of the referendum.
         **/
        index: number;
      }
    >;
    ConfirmAborted: GenericPalletEvent<
      Rv,
      'FellowshipReferenda',
      'ConfirmAborted',
      {
        /**
         * Index of the referendum.
         **/
        index: number;
      }
    >;

    /**
     * A referendum has ended its confirmation phase and is ready for approval.
     **/
    Confirmed: GenericPalletEvent<
      Rv,
      'FellowshipReferenda',
      'Confirmed',
      {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * The final tally of votes in this referendum.
         **/
        tally: PalletRankedCollectiveTally;
      }
    >;

    /**
     * A referendum has been approved and its proposal has been scheduled.
     **/
    Approved: GenericPalletEvent<
      Rv,
      'FellowshipReferenda',
      'Approved',
      {
        /**
         * Index of the referendum.
         **/
        index: number;
      }
    >;

    /**
     * A proposal has been rejected by referendum.
     **/
    Rejected: GenericPalletEvent<
      Rv,
      'FellowshipReferenda',
      'Rejected',
      {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * The final tally of votes in this referendum.
         **/
        tally: PalletRankedCollectiveTally;
      }
    >;

    /**
     * A referendum has been timed out without being decided.
     **/
    TimedOut: GenericPalletEvent<
      Rv,
      'FellowshipReferenda',
      'TimedOut',
      {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * The final tally of votes in this referendum.
         **/
        tally: PalletRankedCollectiveTally;
      }
    >;

    /**
     * A referendum has been cancelled.
     **/
    Cancelled: GenericPalletEvent<
      Rv,
      'FellowshipReferenda',
      'Cancelled',
      {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * The final tally of votes in this referendum.
         **/
        tally: PalletRankedCollectiveTally;
      }
    >;

    /**
     * A referendum has been killed.
     **/
    Killed: GenericPalletEvent<
      Rv,
      'FellowshipReferenda',
      'Killed',
      {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * The final tally of votes in this referendum.
         **/
        tally: PalletRankedCollectiveTally;
      }
    >;

    /**
     * The submission deposit has been refunded.
     **/
    SubmissionDepositRefunded: GenericPalletEvent<
      Rv,
      'FellowshipReferenda',
      'SubmissionDepositRefunded',
      {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * The account who placed the deposit.
         **/
        who: AccountId32;

        /**
         * The amount placed by the account.
         **/
        amount: bigint;
      }
    >;

    /**
     * Metadata for a referendum has been set.
     **/
    MetadataSet: GenericPalletEvent<
      Rv,
      'FellowshipReferenda',
      'MetadataSet',
      {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * Preimage hash.
         **/
        hash: H256;
      }
    >;

    /**
     * Metadata for a referendum has been cleared.
     **/
    MetadataCleared: GenericPalletEvent<
      Rv,
      'FellowshipReferenda',
      'MetadataCleared',
      {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * Preimage hash.
         **/
        hash: H256;
      }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Whitelist`'s events
   **/
  whitelist: {
    CallWhitelisted: GenericPalletEvent<Rv, 'Whitelist', 'CallWhitelisted', { callHash: H256 }>;
    WhitelistedCallRemoved: GenericPalletEvent<Rv, 'Whitelist', 'WhitelistedCallRemoved', { callHash: H256 }>;
    WhitelistedCallDispatched: GenericPalletEvent<
      Rv,
      'Whitelist',
      'WhitelistedCallDispatched',
      { callHash: H256; result: Result<FrameSupportDispatchPostDispatchInfo, SpRuntimeDispatchErrorWithPostInfo> }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Scheduler`'s events
   **/
  scheduler: {
    /**
     * Scheduled some task.
     **/
    Scheduled: GenericPalletEvent<Rv, 'Scheduler', 'Scheduled', { when: number; index: number }>;

    /**
     * Canceled some task.
     **/
    Canceled: GenericPalletEvent<Rv, 'Scheduler', 'Canceled', { when: number; index: number }>;

    /**
     * Dispatched some task.
     **/
    Dispatched: GenericPalletEvent<
      Rv,
      'Scheduler',
      'Dispatched',
      { task: [number, number]; id?: FixedBytes<32> | undefined; result: Result<[], DispatchError> }
    >;

    /**
     * Set a retry configuration for some task.
     **/
    RetrySet: GenericPalletEvent<
      Rv,
      'Scheduler',
      'RetrySet',
      { task: [number, number]; id?: FixedBytes<32> | undefined; period: number; retries: number }
    >;

    /**
     * Cancel a retry configuration for some task.
     **/
    RetryCancelled: GenericPalletEvent<
      Rv,
      'Scheduler',
      'RetryCancelled',
      { task: [number, number]; id?: FixedBytes<32> | undefined }
    >;

    /**
     * The call for the provided hash was not found so the task has been aborted.
     **/
    CallUnavailable: GenericPalletEvent<
      Rv,
      'Scheduler',
      'CallUnavailable',
      { task: [number, number]; id?: FixedBytes<32> | undefined }
    >;

    /**
     * The given task was unable to be renewed since the agenda is full at that block.
     **/
    PeriodicFailed: GenericPalletEvent<
      Rv,
      'Scheduler',
      'PeriodicFailed',
      { task: [number, number]; id?: FixedBytes<32> | undefined }
    >;

    /**
     * The given task was unable to be retried since the agenda is full at that block or there
     * was not enough weight to reschedule it.
     **/
    RetryFailed: GenericPalletEvent<
      Rv,
      'Scheduler',
      'RetryFailed',
      { task: [number, number]; id?: FixedBytes<32> | undefined }
    >;

    /**
     * The given task can never be executed since it is overweight.
     **/
    PermanentlyOverweight: GenericPalletEvent<
      Rv,
      'Scheduler',
      'PermanentlyOverweight',
      { task: [number, number]; id?: FixedBytes<32> | undefined }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Preimage`'s events
   **/
  preimage: {
    /**
     * A preimage has been noted.
     **/
    Noted: GenericPalletEvent<Rv, 'Preimage', 'Noted', { hash: H256 }>;

    /**
     * A preimage has been requested.
     **/
    Requested: GenericPalletEvent<Rv, 'Preimage', 'Requested', { hash: H256 }>;

    /**
     * A preimage has ben cleared.
     **/
    Cleared: GenericPalletEvent<Rv, 'Preimage', 'Cleared', { hash: H256 }>;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Identity`'s events
   **/
  identity: {
    /**
     * A name was set or reset (which will remove all judgements).
     **/
    IdentitySet: GenericPalletEvent<Rv, 'Identity', 'IdentitySet', { who: AccountId32 }>;

    /**
     * A name was cleared, and the given balance returned.
     **/
    IdentityCleared: GenericPalletEvent<Rv, 'Identity', 'IdentityCleared', { who: AccountId32; deposit: bigint }>;

    /**
     * A name was removed and the given balance slashed.
     **/
    IdentityKilled: GenericPalletEvent<Rv, 'Identity', 'IdentityKilled', { who: AccountId32; deposit: bigint }>;

    /**
     * A judgement was asked from a registrar.
     **/
    JudgementRequested: GenericPalletEvent<
      Rv,
      'Identity',
      'JudgementRequested',
      { who: AccountId32; registrarIndex: number }
    >;

    /**
     * A judgement request was retracted.
     **/
    JudgementUnrequested: GenericPalletEvent<
      Rv,
      'Identity',
      'JudgementUnrequested',
      { who: AccountId32; registrarIndex: number }
    >;

    /**
     * A judgement was given by a registrar.
     **/
    JudgementGiven: GenericPalletEvent<
      Rv,
      'Identity',
      'JudgementGiven',
      { target: AccountId32; registrarIndex: number }
    >;

    /**
     * A registrar was added.
     **/
    RegistrarAdded: GenericPalletEvent<Rv, 'Identity', 'RegistrarAdded', { registrarIndex: number }>;

    /**
     * A sub-identity was added to an identity and the deposit paid.
     **/
    SubIdentityAdded: GenericPalletEvent<
      Rv,
      'Identity',
      'SubIdentityAdded',
      { sub: AccountId32; main: AccountId32; deposit: bigint }
    >;

    /**
     * A sub-identity was removed from an identity and the deposit freed.
     **/
    SubIdentityRemoved: GenericPalletEvent<
      Rv,
      'Identity',
      'SubIdentityRemoved',
      { sub: AccountId32; main: AccountId32; deposit: bigint }
    >;

    /**
     * A sub-identity was cleared, and the given deposit repatriated from the
     * main identity account to the sub-identity account.
     **/
    SubIdentityRevoked: GenericPalletEvent<
      Rv,
      'Identity',
      'SubIdentityRevoked',
      { sub: AccountId32; main: AccountId32; deposit: bigint }
    >;

    /**
     * A username authority was added.
     **/
    AuthorityAdded: GenericPalletEvent<Rv, 'Identity', 'AuthorityAdded', { authority: AccountId32 }>;

    /**
     * A username authority was removed.
     **/
    AuthorityRemoved: GenericPalletEvent<Rv, 'Identity', 'AuthorityRemoved', { authority: AccountId32 }>;

    /**
     * A username was set for `who`.
     **/
    UsernameSet: GenericPalletEvent<Rv, 'Identity', 'UsernameSet', { who: AccountId32; username: Bytes }>;

    /**
     * A username was queued, but `who` must accept it prior to `expiration`.
     **/
    UsernameQueued: GenericPalletEvent<
      Rv,
      'Identity',
      'UsernameQueued',
      { who: AccountId32; username: Bytes; expiration: number }
    >;

    /**
     * A queued username passed its expiration without being claimed and was removed.
     **/
    PreapprovalExpired: GenericPalletEvent<Rv, 'Identity', 'PreapprovalExpired', { whose: AccountId32 }>;

    /**
     * A username was set as a primary and can be looked up from `who`.
     **/
    PrimaryUsernameSet: GenericPalletEvent<Rv, 'Identity', 'PrimaryUsernameSet', { who: AccountId32; username: Bytes }>;

    /**
     * A dangling username (as in, a username corresponding to an account that has removed its
     * identity) has been removed.
     **/
    DanglingUsernameRemoved: GenericPalletEvent<
      Rv,
      'Identity',
      'DanglingUsernameRemoved',
      { who: AccountId32; username: Bytes }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Proxy`'s events
   **/
  proxy: {
    /**
     * A proxy was executed correctly, with the given.
     **/
    ProxyExecuted: GenericPalletEvent<Rv, 'Proxy', 'ProxyExecuted', { result: Result<[], DispatchError> }>;

    /**
     * A pure account has been created by new proxy with given
     * disambiguation index and proxy type.
     **/
    PureCreated: GenericPalletEvent<
      Rv,
      'Proxy',
      'PureCreated',
      { pure: AccountId32; who: AccountId32; proxyType: VaraRuntimeProxyType; disambiguationIndex: number }
    >;

    /**
     * An announcement was placed to make a call in the future.
     **/
    Announced: GenericPalletEvent<Rv, 'Proxy', 'Announced', { real: AccountId32; proxy: AccountId32; callHash: H256 }>;

    /**
     * A proxy was added.
     **/
    ProxyAdded: GenericPalletEvent<
      Rv,
      'Proxy',
      'ProxyAdded',
      { delegator: AccountId32; delegatee: AccountId32; proxyType: VaraRuntimeProxyType; delay: number }
    >;

    /**
     * A proxy was removed.
     **/
    ProxyRemoved: GenericPalletEvent<
      Rv,
      'Proxy',
      'ProxyRemoved',
      { delegator: AccountId32; delegatee: AccountId32; proxyType: VaraRuntimeProxyType; delay: number }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Multisig`'s events
   **/
  multisig: {
    /**
     * A new multisig operation has begun.
     **/
    NewMultisig: GenericPalletEvent<
      Rv,
      'Multisig',
      'NewMultisig',
      { approving: AccountId32; multisig: AccountId32; callHash: FixedBytes<32> }
    >;

    /**
     * A multisig operation has been approved by someone.
     **/
    MultisigApproval: GenericPalletEvent<
      Rv,
      'Multisig',
      'MultisigApproval',
      { approving: AccountId32; timepoint: PalletMultisigTimepoint; multisig: AccountId32; callHash: FixedBytes<32> }
    >;

    /**
     * A multisig operation has been executed.
     **/
    MultisigExecuted: GenericPalletEvent<
      Rv,
      'Multisig',
      'MultisigExecuted',
      {
        approving: AccountId32;
        timepoint: PalletMultisigTimepoint;
        multisig: AccountId32;
        callHash: FixedBytes<32>;
        result: Result<[], DispatchError>;
      }
    >;

    /**
     * A multisig operation has been cancelled.
     **/
    MultisigCancelled: GenericPalletEvent<
      Rv,
      'Multisig',
      'MultisigCancelled',
      { cancelling: AccountId32; timepoint: PalletMultisigTimepoint; multisig: AccountId32; callHash: FixedBytes<32> }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `ElectionProviderMultiPhase`'s events
   **/
  electionProviderMultiPhase: {
    /**
     * A solution was stored with the given compute.
     *
     * The `origin` indicates the origin of the solution. If `origin` is `Some(AccountId)`,
     * the stored solution was submitted in the signed phase by a miner with the `AccountId`.
     * Otherwise, the solution was stored either during the unsigned phase or by
     * `T::ForceOrigin`. The `bool` is `true` when a previous solution was ejected to make
     * room for this one.
     **/
    SolutionStored: GenericPalletEvent<
      Rv,
      'ElectionProviderMultiPhase',
      'SolutionStored',
      {
        compute: PalletElectionProviderMultiPhaseElectionCompute;
        origin?: AccountId32 | undefined;
        prevEjected: boolean;
      }
    >;

    /**
     * The election has been finalized, with the given computation and score.
     **/
    ElectionFinalized: GenericPalletEvent<
      Rv,
      'ElectionProviderMultiPhase',
      'ElectionFinalized',
      { compute: PalletElectionProviderMultiPhaseElectionCompute; score: SpNposElectionsElectionScore }
    >;

    /**
     * An election failed.
     *
     * Not much can be said about which computes failed in the process.
     **/
    ElectionFailed: GenericPalletEvent<Rv, 'ElectionProviderMultiPhase', 'ElectionFailed', null>;

    /**
     * An account has been rewarded for their signed submission being finalized.
     **/
    Rewarded: GenericPalletEvent<Rv, 'ElectionProviderMultiPhase', 'Rewarded', { account: AccountId32; value: bigint }>;

    /**
     * An account has been slashed for submitting an invalid signed submission.
     **/
    Slashed: GenericPalletEvent<Rv, 'ElectionProviderMultiPhase', 'Slashed', { account: AccountId32; value: bigint }>;

    /**
     * There was a phase transition in a given round.
     **/
    PhaseTransitioned: GenericPalletEvent<
      Rv,
      'ElectionProviderMultiPhase',
      'PhaseTransitioned',
      { from: PalletElectionProviderMultiPhasePhase; to: PalletElectionProviderMultiPhasePhase; round: number }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Offences`'s events
   **/
  offences: {
    /**
     * There is an offence reported of the given `kind` happened at the `session_index` and
     * (kind-specific) time slot. This event is not deposited for duplicate slashes.
     * \[kind, timeslot\].
     **/
    Offence: GenericPalletEvent<Rv, 'Offences', 'Offence', { kind: FixedBytes<16>; timeslot: Bytes }>;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Bounties`'s events
   **/
  bounties: {
    /**
     * New bounty proposal.
     **/
    BountyProposed: GenericPalletEvent<Rv, 'Bounties', 'BountyProposed', { index: number }>;

    /**
     * A bounty proposal was rejected; funds were slashed.
     **/
    BountyRejected: GenericPalletEvent<Rv, 'Bounties', 'BountyRejected', { index: number; bond: bigint }>;

    /**
     * A bounty proposal is funded and became active.
     **/
    BountyBecameActive: GenericPalletEvent<Rv, 'Bounties', 'BountyBecameActive', { index: number }>;

    /**
     * A bounty is awarded to a beneficiary.
     **/
    BountyAwarded: GenericPalletEvent<Rv, 'Bounties', 'BountyAwarded', { index: number; beneficiary: AccountId32 }>;

    /**
     * A bounty is claimed by beneficiary.
     **/
    BountyClaimed: GenericPalletEvent<
      Rv,
      'Bounties',
      'BountyClaimed',
      { index: number; payout: bigint; beneficiary: AccountId32 }
    >;

    /**
     * A bounty is cancelled.
     **/
    BountyCanceled: GenericPalletEvent<Rv, 'Bounties', 'BountyCanceled', { index: number }>;

    /**
     * A bounty expiry is extended.
     **/
    BountyExtended: GenericPalletEvent<Rv, 'Bounties', 'BountyExtended', { index: number }>;

    /**
     * A bounty is approved.
     **/
    BountyApproved: GenericPalletEvent<Rv, 'Bounties', 'BountyApproved', { index: number }>;

    /**
     * A bounty curator is proposed.
     **/
    CuratorProposed: GenericPalletEvent<Rv, 'Bounties', 'CuratorProposed', { bountyId: number; curator: AccountId32 }>;

    /**
     * A bounty curator is unassigned.
     **/
    CuratorUnassigned: GenericPalletEvent<Rv, 'Bounties', 'CuratorUnassigned', { bountyId: number }>;

    /**
     * A bounty curator is accepted.
     **/
    CuratorAccepted: GenericPalletEvent<Rv, 'Bounties', 'CuratorAccepted', { bountyId: number; curator: AccountId32 }>;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `ChildBounties`'s events
   **/
  childBounties: {
    /**
     * A child-bounty is added.
     **/
    Added: GenericPalletEvent<Rv, 'ChildBounties', 'Added', { index: number; childIndex: number }>;

    /**
     * A child-bounty is awarded to a beneficiary.
     **/
    Awarded: GenericPalletEvent<
      Rv,
      'ChildBounties',
      'Awarded',
      { index: number; childIndex: number; beneficiary: AccountId32 }
    >;

    /**
     * A child-bounty is claimed by beneficiary.
     **/
    Claimed: GenericPalletEvent<
      Rv,
      'ChildBounties',
      'Claimed',
      { index: number; childIndex: number; payout: bigint; beneficiary: AccountId32 }
    >;

    /**
     * A child-bounty is cancelled.
     **/
    Canceled: GenericPalletEvent<Rv, 'ChildBounties', 'Canceled', { index: number; childIndex: number }>;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `NominationPools`'s events
   **/
  nominationPools: {
    /**
     * A pool has been created.
     **/
    Created: GenericPalletEvent<Rv, 'NominationPools', 'Created', { depositor: AccountId32; poolId: number }>;

    /**
     * A member has became bonded in a pool.
     **/
    Bonded: GenericPalletEvent<
      Rv,
      'NominationPools',
      'Bonded',
      { member: AccountId32; poolId: number; bonded: bigint; joined: boolean }
    >;

    /**
     * A payout has been made to a member.
     **/
    PaidOut: GenericPalletEvent<
      Rv,
      'NominationPools',
      'PaidOut',
      { member: AccountId32; poolId: number; payout: bigint }
    >;

    /**
     * A member has unbonded from their pool.
     *
     * - `balance` is the corresponding balance of the number of points that has been
     * requested to be unbonded (the argument of the `unbond` transaction) from the bonded
     * pool.
     * - `points` is the number of points that are issued as a result of `balance` being
     * dissolved into the corresponding unbonding pool.
     * - `era` is the era in which the balance will be unbonded.
     * In the absence of slashing, these values will match. In the presence of slashing, the
     * number of points that are issued in the unbonding pool will be less than the amount
     * requested to be unbonded.
     **/
    Unbonded: GenericPalletEvent<
      Rv,
      'NominationPools',
      'Unbonded',
      { member: AccountId32; poolId: number; balance: bigint; points: bigint; era: number }
    >;

    /**
     * A member has withdrawn from their pool.
     *
     * The given number of `points` have been dissolved in return of `balance`.
     *
     * Similar to `Unbonded` event, in the absence of slashing, the ratio of point to balance
     * will be 1.
     **/
    Withdrawn: GenericPalletEvent<
      Rv,
      'NominationPools',
      'Withdrawn',
      { member: AccountId32; poolId: number; balance: bigint; points: bigint }
    >;

    /**
     * A pool has been destroyed.
     **/
    Destroyed: GenericPalletEvent<Rv, 'NominationPools', 'Destroyed', { poolId: number }>;

    /**
     * The state of a pool has changed
     **/
    StateChanged: GenericPalletEvent<
      Rv,
      'NominationPools',
      'StateChanged',
      { poolId: number; newState: PalletNominationPoolsPoolState }
    >;

    /**
     * A member has been removed from a pool.
     *
     * The removal can be voluntary (withdrawn all unbonded funds) or involuntary (kicked).
     * Any funds that are still delegated (i.e. dangling delegation) are released and are
     * represented by `released_balance`.
     **/
    MemberRemoved: GenericPalletEvent<
      Rv,
      'NominationPools',
      'MemberRemoved',
      { poolId: number; member: AccountId32; releasedBalance: bigint }
    >;

    /**
     * The roles of a pool have been updated to the given new roles. Note that the depositor
     * can never change.
     **/
    RolesUpdated: GenericPalletEvent<
      Rv,
      'NominationPools',
      'RolesUpdated',
      { root?: AccountId32 | undefined; bouncer?: AccountId32 | undefined; nominator?: AccountId32 | undefined }
    >;

    /**
     * The active balance of pool `pool_id` has been slashed to `balance`.
     **/
    PoolSlashed: GenericPalletEvent<Rv, 'NominationPools', 'PoolSlashed', { poolId: number; balance: bigint }>;

    /**
     * The unbond pool at `era` of pool `pool_id` has been slashed to `balance`.
     **/
    UnbondingPoolSlashed: GenericPalletEvent<
      Rv,
      'NominationPools',
      'UnbondingPoolSlashed',
      { poolId: number; era: number; balance: bigint }
    >;

    /**
     * A pool's commission setting has been changed.
     **/
    PoolCommissionUpdated: GenericPalletEvent<
      Rv,
      'NominationPools',
      'PoolCommissionUpdated',
      { poolId: number; current?: [Perbill, AccountId32] | undefined }
    >;

    /**
     * A pool's maximum commission setting has been changed.
     **/
    PoolMaxCommissionUpdated: GenericPalletEvent<
      Rv,
      'NominationPools',
      'PoolMaxCommissionUpdated',
      { poolId: number; maxCommission: Perbill }
    >;

    /**
     * A pool's commission `change_rate` has been changed.
     **/
    PoolCommissionChangeRateUpdated: GenericPalletEvent<
      Rv,
      'NominationPools',
      'PoolCommissionChangeRateUpdated',
      { poolId: number; changeRate: PalletNominationPoolsCommissionChangeRate }
    >;

    /**
     * Pool commission claim permission has been updated.
     **/
    PoolCommissionClaimPermissionUpdated: GenericPalletEvent<
      Rv,
      'NominationPools',
      'PoolCommissionClaimPermissionUpdated',
      { poolId: number; permission?: PalletNominationPoolsCommissionClaimPermission | undefined }
    >;

    /**
     * Pool commission has been claimed.
     **/
    PoolCommissionClaimed: GenericPalletEvent<
      Rv,
      'NominationPools',
      'PoolCommissionClaimed',
      { poolId: number; commission: bigint }
    >;

    /**
     * Topped up deficit in frozen ED of the reward pool.
     **/
    MinBalanceDeficitAdjusted: GenericPalletEvent<
      Rv,
      'NominationPools',
      'MinBalanceDeficitAdjusted',
      { poolId: number; amount: bigint }
    >;

    /**
     * Claimed excess frozen ED of af the reward pool.
     **/
    MinBalanceExcessAdjusted: GenericPalletEvent<
      Rv,
      'NominationPools',
      'MinBalanceExcessAdjusted',
      { poolId: number; amount: bigint }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Gear`'s events
   **/
  gear: {
    /**
     * User sends message to program, which was successfully
     * added to the Gear message queue.
     **/
    MessageQueued: GenericPalletEvent<
      Rv,
      'Gear',
      'MessageQueued',
      {
        /**
         * Generated id of the message.
         **/
        id: GprimitivesMessageId;

        /**
         * Account id of the source of the message.
         **/
        source: AccountId32;

        /**
         * Program id, who is the message's destination.
         **/
        destination: GprimitivesActorId;

        /**
         * Entry point for processing of the message.
         * On the sending stage, the processing function
         * of the program is always known.
         **/
        entry: GearCommonEventMessageEntry;
      }
    >;

    /**
     * Somebody sent a message to the user.
     **/
    UserMessageSent: GenericPalletEvent<
      Rv,
      'Gear',
      'UserMessageSent',
      {
        /**
         * Message sent.
         **/
        message: GearCoreMessageUserUserMessage;

        /**
         * Block number of expiration from `Mailbox`.
         *
         * Equals `Some(_)` with block number when message
         * will be removed from `Mailbox` due to some
         * reasons (see #642, #646 and #1010).
         *
         * Equals `None` if message wasn't inserted to
         * `Mailbox` and appears as only `Event`.
         **/
        expiration?: number | undefined;
      }
    >;

    /**
     * Message marked as "read" and removes it from `Mailbox`.
     * This event only affects messages that were
     * already inserted in `Mailbox`.
     **/
    UserMessageRead: GenericPalletEvent<
      Rv,
      'Gear',
      'UserMessageRead',
      {
        /**
         * Id of the message read.
         **/
        id: GprimitivesMessageId;

        /**
         * The reason for the reading (removal from `Mailbox`).
         *
         * NOTE: See more docs about reasons at `gear_common::event`.
         **/
        reason: GearCommonEventReason;
      }
    >;

    /**
     * The result of processing the messages within the block.
     **/
    MessagesDispatched: GenericPalletEvent<
      Rv,
      'Gear',
      'MessagesDispatched',
      {
        /**
         * Total amount of messages removed from message queue.
         **/
        total: number;

        /**
         * Execution statuses of the messages, which were already known
         * by `Event::MessageQueued` (sent from user to program).
         **/
        statuses: Array<[GprimitivesMessageId, GearCommonEventDispatchStatus]>;

        /**
         * Ids of programs, which state changed during queue processing.
         **/
        stateChanges: Array<GprimitivesActorId>;
      }
    >;

    /**
     * Messages execution delayed (waited) and successfully
     * added to gear waitlist.
     **/
    MessageWaited: GenericPalletEvent<
      Rv,
      'Gear',
      'MessageWaited',
      {
        /**
         * Id of the message waited.
         **/
        id: GprimitivesMessageId;

        /**
         * Origin message id, which started messaging chain with programs,
         * where currently waited message was created.
         *
         * Used to identify by the user that this message associated
         * with him and the concrete initial message.
         **/
        origin?: GearCommonGasProviderNodeGasNodeId | undefined;

        /**
         * The reason of the waiting (addition to `Waitlist`).
         *
         * NOTE: See more docs about reasons at `gear_common::event`.
         **/
        reason: GearCommonEventReasonMessageWaitedRuntimeReason;

        /**
         * Block number of expiration from `Waitlist`.
         *
         * Equals block number when message will be removed from `Waitlist`
         * due to some reasons (see #642, #646 and #1010).
         **/
        expiration: number;
      }
    >;

    /**
     * Message is ready to continue its execution
     * and was removed from `Waitlist`.
     **/
    MessageWoken: GenericPalletEvent<
      Rv,
      'Gear',
      'MessageWoken',
      {
        /**
         * Id of the message woken.
         **/
        id: GprimitivesMessageId;

        /**
         * The reason of the waking (removal from `Waitlist`).
         *
         * NOTE: See more docs about reasons at `gear_common::event`.
         **/
        reason: GearCommonEventReasonMessageWokenRuntimeReason;
      }
    >;

    /**
     * Any data related to program codes changed.
     **/
    CodeChanged: GenericPalletEvent<
      Rv,
      'Gear',
      'CodeChanged',
      {
        /**
         * Id of the code affected.
         **/
        id: GprimitivesCodeId;

        /**
         * Change applied on code with current id.
         *
         * NOTE: See more docs about change kinds at `gear_common::event`.
         **/
        change: GearCommonEventCodeChangeKind;
      }
    >;

    /**
     * Any data related to programs changed.
     **/
    ProgramChanged: GenericPalletEvent<
      Rv,
      'Gear',
      'ProgramChanged',
      {
        /**
         * Id of the program affected.
         **/
        id: GprimitivesActorId;

        /**
         * Change applied on program with current id.
         *
         * NOTE: See more docs about change kinds at `gear_common::event`.
         **/
        change: GearCommonEventProgramChangeKind;
      }
    >;

    /**
     * The pseudo-inherent extrinsic that runs queue processing rolled back or not executed.
     **/
    QueueNotProcessed: GenericPalletEvent<Rv, 'Gear', 'QueueNotProcessed', null>;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `StakingRewards`'s events
   **/
  stakingRewards: {
    /**
     * Deposited to the pool.
     **/
    Deposited: GenericPalletEvent<Rv, 'StakingRewards', 'Deposited', { amount: bigint }>;

    /**
     * Transferred from the pool to an external account.
     **/
    Withdrawn: GenericPalletEvent<Rv, 'StakingRewards', 'Withdrawn', { amount: bigint }>;

    /**
     * Burned from the pool.
     **/
    Burned: GenericPalletEvent<Rv, 'StakingRewards', 'Burned', { amount: bigint }>;

    /**
     * Minted to the pool.
     **/
    Minted: GenericPalletEvent<Rv, 'StakingRewards', 'Minted', { amount: bigint }>;

    /**
     * Target inflation changed.
     **/
    TargetInflationChanged: GenericPalletEvent<Rv, 'StakingRewards', 'TargetInflationChanged', { value: Perquintill }>;

    /**
     * Ideal staking ratio changed.
     **/
    IdealStakingRatioChanged: GenericPalletEvent<
      Rv,
      'StakingRewards',
      'IdealStakingRatioChanged',
      { value: Perquintill }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `GearVoucher`'s events
   **/
  gearVoucher: {
    /**
     * Voucher has been issued.
     **/
    VoucherIssued: GenericPalletEvent<
      Rv,
      'GearVoucher',
      'VoucherIssued',
      {
        /**
         * Account id of owner and manager of the voucher.
         **/
        owner: AccountId32;

        /**
         * Account id of user eligible to use the voucher.
         **/
        spender: AccountId32;

        /**
         * Voucher identifier.
         **/
        voucherId: PalletGearVoucherInternalVoucherId;
      }
    >;

    /**
     * Voucher has been revoked by owner.
     *
     * NOTE: currently means only "refunded".
     **/
    VoucherRevoked: GenericPalletEvent<
      Rv,
      'GearVoucher',
      'VoucherRevoked',
      {
        /**
         * Account id of the user whose voucher was revoked.
         **/
        spender: AccountId32;

        /**
         * Voucher identifier.
         **/
        voucherId: PalletGearVoucherInternalVoucherId;
      }
    >;

    /**
     * Voucher has been updated.
     **/
    VoucherUpdated: GenericPalletEvent<
      Rv,
      'GearVoucher',
      'VoucherUpdated',
      {
        /**
         * Account id of user whose voucher was updated.
         **/
        spender: AccountId32;

        /**
         * Voucher identifier.
         **/
        voucherId: PalletGearVoucherInternalVoucherId;

        /**
         * Optional field defining was the owner changed during update.
         **/
        newOwner?: AccountId32 | undefined;
      }
    >;

    /**
     * Voucher has been declined (set to expired state).
     **/
    VoucherDeclined: GenericPalletEvent<
      Rv,
      'GearVoucher',
      'VoucherDeclined',
      {
        /**
         * Account id of user who declined its own voucher.
         **/
        spender: AccountId32;

        /**
         * Voucher identifier.
         **/
        voucherId: PalletGearVoucherInternalVoucherId;
      }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `GearEthBridge`'s events
   **/
  gearEthBridge: {
    /**
     * Grandpa validator's keys set was hashed and set in storage at
     * first block of the last session in the era.
     **/
    AuthoritySetHashChanged: GenericPalletEvent<Rv, 'GearEthBridge', 'AuthoritySetHashChanged', H256>;

    /**
     * Authority set hash was reset.
     *
     * Related to bridge clearing on initialization of the second block in a new era.
     **/
    AuthoritySetReset: GenericPalletEvent<Rv, 'GearEthBridge', 'AuthoritySetReset', null>;

    /**
     * Optimistically, single-time called event defining that pallet
     * got initialized and started processing session changes,
     * as well as putting initial zeroed queue merkle root.
     **/
    BridgeInitialized: GenericPalletEvent<Rv, 'GearEthBridge', 'BridgeInitialized', null>;

    /**
     * Bridge was paused and temporary doesn't process any incoming requests.
     **/
    BridgePaused: GenericPalletEvent<Rv, 'GearEthBridge', 'BridgePaused', null>;

    /**
     * Bridge was unpaused and from now on processes any incoming requests.
     **/
    BridgeUnpaused: GenericPalletEvent<Rv, 'GearEthBridge', 'BridgeUnpaused', null>;

    /**
     * A new message was queued for bridging.
     **/
    MessageQueued: GenericPalletEvent<
      Rv,
      'GearEthBridge',
      'MessageQueued',
      {
        /**
         * Enqueued message.
         **/
        message: PalletGearEthBridgePrimitivesEthMessage;

        /**
         * Hash of the enqueued message.
         **/
        hash: H256;
      }
    >;

    /**
     * Merkle root of the queue changed: new messages queued within the block.
     **/
    QueueMerkleRootChanged: GenericPalletEvent<
      Rv,
      'GearEthBridge',
      'QueueMerkleRootChanged',
      {
        /**
         * Queue identifier.
         **/
        queueId: bigint;

        /**
         * Merkle root of the queue.
         **/
        root: H256;
      }
    >;

    /**
     * Queue has been overflowed and now requires reset.
     **/
    QueueOverflowed: GenericPalletEvent<Rv, 'GearEthBridge', 'QueueOverflowed', null>;

    /**
     * Queue was reset.
     *
     * Related to bridge clearing on initialization of the second block in a new era.
     **/
    QueueReset: GenericPalletEvent<Rv, 'GearEthBridge', 'QueueReset', null>;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
}
