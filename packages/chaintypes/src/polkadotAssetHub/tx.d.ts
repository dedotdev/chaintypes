// Generated by dedot cli

import type {
  GenericChainTx,
  GenericTxCall,
  ISubmittableExtrinsic,
  ISubmittableResult,
  IRuntimeTxCall,
  RpcVersion,
  RpcV2,
  ISubmittableExtrinsicLegacy,
  TransactionEvent,
} from 'dedot/types';
import type { MultiAddressLike, Extrinsic, BytesLike, H256, AccountId32Like, FixedBytes } from 'dedot/codecs';
import type {
  AssetHubPolkadotRuntimeRuntimeCallLike,
  SpRuntimeMultiSignature,
  FrameSystemEventRecord,
  CumulusPrimitivesParachainInherentParachainInherentData,
  PalletBalancesAdjustmentDirection,
  PalletVestingVestingInfo,
  AssetHubPolkadotRuntimeSessionKeys,
  XcmVersionedLocation,
  XcmVersionedXcm,
  XcmVersionedAssets,
  SpWeightsWeightV2Weight,
  StagingXcmV4Location,
  XcmV3WeightLimit,
  StagingXcmExecutorAssetTransferTransferType,
  XcmVersionedAssetId,
  CumulusPrimitivesCoreAggregateMessageOrigin,
  AssetHubPolkadotRuntimeOriginCaller,
  PalletMultisigTimepoint,
  AssetHubPolkadotRuntimeProxyType,
  PalletUniquesDestroyWitness,
  PalletNftsCollectionConfig,
  PalletNftsDestroyWitness,
  PalletNftsMintWitness,
  PalletNftsItemConfig,
  PalletNftsBitFlags,
  PalletNftsAttributeNamespace,
  PalletNftsCancelAttributesApprovalWitness,
  PalletNftsMintSettings,
  PalletNftsItemTip,
  PalletNftsPriceWithDirection,
  PalletNftsPreSignedMint,
  PalletNftsPreSignedAttributes,
  StagingXcmV3MultilocationMultiLocation,
} from './types';

export type ChainSubmittableExtrinsic<
  Rv extends RpcVersion,
  T extends IRuntimeTxCall = AssetHubPolkadotRuntimeRuntimeCallLike,
> = Extrinsic<MultiAddressLike, T, SpRuntimeMultiSignature, any[]> &
  (Rv extends RpcV2
    ? ISubmittableExtrinsic<ISubmittableResult<FrameSystemEventRecord, TransactionEvent>>
    : ISubmittableExtrinsicLegacy<ISubmittableResult<FrameSystemEventRecord, TransactionEvent>>);

export type TxCall<Rv extends RpcVersion> = (...args: any[]) => ChainSubmittableExtrinsic<Rv>;

export interface ChainTx<Rv extends RpcVersion> extends GenericChainTx<Rv, TxCall<Rv>> {
  /**
   * Pallet `System`'s transaction calls
   **/
  system: {
    /**
     * See [`Pallet::remark`].
     *
     * @param {BytesLike} remark
     **/
    remark: GenericTxCall<
      Rv,
      (remark: BytesLike) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'System';
          palletCall: {
            name: 'Remark';
            params: { remark: BytesLike };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_heap_pages`].
     *
     * @param {bigint} pages
     **/
    setHeapPages: GenericTxCall<
      Rv,
      (pages: bigint) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'System';
          palletCall: {
            name: 'SetHeapPages';
            params: { pages: bigint };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_code`].
     *
     * @param {BytesLike} code
     **/
    setCode: GenericTxCall<
      Rv,
      (code: BytesLike) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'System';
          palletCall: {
            name: 'SetCode';
            params: { code: BytesLike };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_code_without_checks`].
     *
     * @param {BytesLike} code
     **/
    setCodeWithoutChecks: GenericTxCall<
      Rv,
      (code: BytesLike) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'System';
          palletCall: {
            name: 'SetCodeWithoutChecks';
            params: { code: BytesLike };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_storage`].
     *
     * @param {Array<[BytesLike, BytesLike]>} items
     **/
    setStorage: GenericTxCall<
      Rv,
      (items: Array<[BytesLike, BytesLike]>) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'System';
          palletCall: {
            name: 'SetStorage';
            params: { items: Array<[BytesLike, BytesLike]> };
          };
        }
      >
    >;

    /**
     * See [`Pallet::kill_storage`].
     *
     * @param {Array<BytesLike>} keys
     **/
    killStorage: GenericTxCall<
      Rv,
      (keys: Array<BytesLike>) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'System';
          palletCall: {
            name: 'KillStorage';
            params: { keys: Array<BytesLike> };
          };
        }
      >
    >;

    /**
     * See [`Pallet::kill_prefix`].
     *
     * @param {BytesLike} prefix
     * @param {number} subkeys
     **/
    killPrefix: GenericTxCall<
      Rv,
      (
        prefix: BytesLike,
        subkeys: number,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'System';
          palletCall: {
            name: 'KillPrefix';
            params: { prefix: BytesLike; subkeys: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::remark_with_event`].
     *
     * @param {BytesLike} remark
     **/
    remarkWithEvent: GenericTxCall<
      Rv,
      (remark: BytesLike) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'System';
          palletCall: {
            name: 'RemarkWithEvent';
            params: { remark: BytesLike };
          };
        }
      >
    >;

    /**
     * See [`Pallet::authorize_upgrade`].
     *
     * @param {H256} codeHash
     **/
    authorizeUpgrade: GenericTxCall<
      Rv,
      (codeHash: H256) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'System';
          palletCall: {
            name: 'AuthorizeUpgrade';
            params: { codeHash: H256 };
          };
        }
      >
    >;

    /**
     * See [`Pallet::authorize_upgrade_without_checks`].
     *
     * @param {H256} codeHash
     **/
    authorizeUpgradeWithoutChecks: GenericTxCall<
      Rv,
      (codeHash: H256) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'System';
          palletCall: {
            name: 'AuthorizeUpgradeWithoutChecks';
            params: { codeHash: H256 };
          };
        }
      >
    >;

    /**
     * See [`Pallet::apply_authorized_upgrade`].
     *
     * @param {BytesLike} code
     **/
    applyAuthorizedUpgrade: GenericTxCall<
      Rv,
      (code: BytesLike) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'System';
          palletCall: {
            name: 'ApplyAuthorizedUpgrade';
            params: { code: BytesLike };
          };
        }
      >
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>;
  };
  /**
   * Pallet `ParachainSystem`'s transaction calls
   **/
  parachainSystem: {
    /**
     * See [`Pallet::set_validation_data`].
     *
     * @param {CumulusPrimitivesParachainInherentParachainInherentData} data
     **/
    setValidationData: GenericTxCall<
      Rv,
      (data: CumulusPrimitivesParachainInherentParachainInherentData) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'ParachainSystem';
          palletCall: {
            name: 'SetValidationData';
            params: { data: CumulusPrimitivesParachainInherentParachainInherentData };
          };
        }
      >
    >;

    /**
     * See [`Pallet::sudo_send_upward_message`].
     *
     * @param {BytesLike} message
     **/
    sudoSendUpwardMessage: GenericTxCall<
      Rv,
      (message: BytesLike) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'ParachainSystem';
          palletCall: {
            name: 'SudoSendUpwardMessage';
            params: { message: BytesLike };
          };
        }
      >
    >;

    /**
     * See [`Pallet::authorize_upgrade`].
     *
     * @param {H256} codeHash
     * @param {boolean} checkVersion
     **/
    authorizeUpgrade: GenericTxCall<
      Rv,
      (
        codeHash: H256,
        checkVersion: boolean,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'ParachainSystem';
          palletCall: {
            name: 'AuthorizeUpgrade';
            params: { codeHash: H256; checkVersion: boolean };
          };
        }
      >
    >;

    /**
     * See [`Pallet::enact_authorized_upgrade`].
     *
     * @param {BytesLike} code
     **/
    enactAuthorizedUpgrade: GenericTxCall<
      Rv,
      (code: BytesLike) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'ParachainSystem';
          palletCall: {
            name: 'EnactAuthorizedUpgrade';
            params: { code: BytesLike };
          };
        }
      >
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>;
  };
  /**
   * Pallet `Timestamp`'s transaction calls
   **/
  timestamp: {
    /**
     * See [`Pallet::set`].
     *
     * @param {bigint} now
     **/
    set: GenericTxCall<
      Rv,
      (now: bigint) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Timestamp';
          palletCall: {
            name: 'Set';
            params: { now: bigint };
          };
        }
      >
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>;
  };
  /**
   * Pallet `ParachainInfo`'s transaction calls
   **/
  parachainInfo: {
    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>;
  };
  /**
   * Pallet `Balances`'s transaction calls
   **/
  balances: {
    /**
     * See [`Pallet::transfer_allow_death`].
     *
     * @param {MultiAddressLike} dest
     * @param {bigint} value
     **/
    transferAllowDeath: GenericTxCall<
      Rv,
      (
        dest: MultiAddressLike,
        value: bigint,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Balances';
          palletCall: {
            name: 'TransferAllowDeath';
            params: { dest: MultiAddressLike; value: bigint };
          };
        }
      >
    >;

    /**
     * See [`Pallet::force_transfer`].
     *
     * @param {MultiAddressLike} source
     * @param {MultiAddressLike} dest
     * @param {bigint} value
     **/
    forceTransfer: GenericTxCall<
      Rv,
      (
        source: MultiAddressLike,
        dest: MultiAddressLike,
        value: bigint,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Balances';
          palletCall: {
            name: 'ForceTransfer';
            params: { source: MultiAddressLike; dest: MultiAddressLike; value: bigint };
          };
        }
      >
    >;

    /**
     * See [`Pallet::transfer_keep_alive`].
     *
     * @param {MultiAddressLike} dest
     * @param {bigint} value
     **/
    transferKeepAlive: GenericTxCall<
      Rv,
      (
        dest: MultiAddressLike,
        value: bigint,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Balances';
          palletCall: {
            name: 'TransferKeepAlive';
            params: { dest: MultiAddressLike; value: bigint };
          };
        }
      >
    >;

    /**
     * See [`Pallet::transfer_all`].
     *
     * @param {MultiAddressLike} dest
     * @param {boolean} keepAlive
     **/
    transferAll: GenericTxCall<
      Rv,
      (
        dest: MultiAddressLike,
        keepAlive: boolean,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Balances';
          palletCall: {
            name: 'TransferAll';
            params: { dest: MultiAddressLike; keepAlive: boolean };
          };
        }
      >
    >;

    /**
     * See [`Pallet::force_unreserve`].
     *
     * @param {MultiAddressLike} who
     * @param {bigint} amount
     **/
    forceUnreserve: GenericTxCall<
      Rv,
      (
        who: MultiAddressLike,
        amount: bigint,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Balances';
          palletCall: {
            name: 'ForceUnreserve';
            params: { who: MultiAddressLike; amount: bigint };
          };
        }
      >
    >;

    /**
     * See [`Pallet::upgrade_accounts`].
     *
     * @param {Array<AccountId32Like>} who
     **/
    upgradeAccounts: GenericTxCall<
      Rv,
      (who: Array<AccountId32Like>) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Balances';
          palletCall: {
            name: 'UpgradeAccounts';
            params: { who: Array<AccountId32Like> };
          };
        }
      >
    >;

    /**
     * See [`Pallet::force_set_balance`].
     *
     * @param {MultiAddressLike} who
     * @param {bigint} newFree
     **/
    forceSetBalance: GenericTxCall<
      Rv,
      (
        who: MultiAddressLike,
        newFree: bigint,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Balances';
          palletCall: {
            name: 'ForceSetBalance';
            params: { who: MultiAddressLike; newFree: bigint };
          };
        }
      >
    >;

    /**
     * See [`Pallet::force_adjust_total_issuance`].
     *
     * @param {PalletBalancesAdjustmentDirection} direction
     * @param {bigint} delta
     **/
    forceAdjustTotalIssuance: GenericTxCall<
      Rv,
      (
        direction: PalletBalancesAdjustmentDirection,
        delta: bigint,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Balances';
          palletCall: {
            name: 'ForceAdjustTotalIssuance';
            params: { direction: PalletBalancesAdjustmentDirection; delta: bigint };
          };
        }
      >
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>;
  };
  /**
   * Pallet `Vesting`'s transaction calls
   **/
  vesting: {
    /**
     * See [`Pallet::vest`].
     *
     **/
    vest: GenericTxCall<
      Rv,
      () => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Vesting';
          palletCall: {
            name: 'Vest';
          };
        }
      >
    >;

    /**
     * See [`Pallet::vest_other`].
     *
     * @param {MultiAddressLike} target
     **/
    vestOther: GenericTxCall<
      Rv,
      (target: MultiAddressLike) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Vesting';
          palletCall: {
            name: 'VestOther';
            params: { target: MultiAddressLike };
          };
        }
      >
    >;

    /**
     * See [`Pallet::vested_transfer`].
     *
     * @param {MultiAddressLike} target
     * @param {PalletVestingVestingInfo} schedule
     **/
    vestedTransfer: GenericTxCall<
      Rv,
      (
        target: MultiAddressLike,
        schedule: PalletVestingVestingInfo,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Vesting';
          palletCall: {
            name: 'VestedTransfer';
            params: { target: MultiAddressLike; schedule: PalletVestingVestingInfo };
          };
        }
      >
    >;

    /**
     * See [`Pallet::force_vested_transfer`].
     *
     * @param {MultiAddressLike} source
     * @param {MultiAddressLike} target
     * @param {PalletVestingVestingInfo} schedule
     **/
    forceVestedTransfer: GenericTxCall<
      Rv,
      (
        source: MultiAddressLike,
        target: MultiAddressLike,
        schedule: PalletVestingVestingInfo,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Vesting';
          palletCall: {
            name: 'ForceVestedTransfer';
            params: { source: MultiAddressLike; target: MultiAddressLike; schedule: PalletVestingVestingInfo };
          };
        }
      >
    >;

    /**
     * See [`Pallet::merge_schedules`].
     *
     * @param {number} schedule1Index
     * @param {number} schedule2Index
     **/
    mergeSchedules: GenericTxCall<
      Rv,
      (
        schedule1Index: number,
        schedule2Index: number,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Vesting';
          palletCall: {
            name: 'MergeSchedules';
            params: { schedule1Index: number; schedule2Index: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::force_remove_vesting_schedule`].
     *
     * @param {MultiAddressLike} target
     * @param {number} scheduleIndex
     **/
    forceRemoveVestingSchedule: GenericTxCall<
      Rv,
      (
        target: MultiAddressLike,
        scheduleIndex: number,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Vesting';
          palletCall: {
            name: 'ForceRemoveVestingSchedule';
            params: { target: MultiAddressLike; scheduleIndex: number };
          };
        }
      >
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>;
  };
  /**
   * Pallet `CollatorSelection`'s transaction calls
   **/
  collatorSelection: {
    /**
     * See [`Pallet::set_invulnerables`].
     *
     * @param {Array<AccountId32Like>} new_
     **/
    setInvulnerables: GenericTxCall<
      Rv,
      (new_: Array<AccountId32Like>) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'CollatorSelection';
          palletCall: {
            name: 'SetInvulnerables';
            params: { new: Array<AccountId32Like> };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_desired_candidates`].
     *
     * @param {number} max
     **/
    setDesiredCandidates: GenericTxCall<
      Rv,
      (max: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'CollatorSelection';
          palletCall: {
            name: 'SetDesiredCandidates';
            params: { max: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_candidacy_bond`].
     *
     * @param {bigint} bond
     **/
    setCandidacyBond: GenericTxCall<
      Rv,
      (bond: bigint) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'CollatorSelection';
          palletCall: {
            name: 'SetCandidacyBond';
            params: { bond: bigint };
          };
        }
      >
    >;

    /**
     * See [`Pallet::register_as_candidate`].
     *
     **/
    registerAsCandidate: GenericTxCall<
      Rv,
      () => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'CollatorSelection';
          palletCall: {
            name: 'RegisterAsCandidate';
          };
        }
      >
    >;

    /**
     * See [`Pallet::leave_intent`].
     *
     **/
    leaveIntent: GenericTxCall<
      Rv,
      () => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'CollatorSelection';
          palletCall: {
            name: 'LeaveIntent';
          };
        }
      >
    >;

    /**
     * See [`Pallet::add_invulnerable`].
     *
     * @param {AccountId32Like} who
     **/
    addInvulnerable: GenericTxCall<
      Rv,
      (who: AccountId32Like) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'CollatorSelection';
          palletCall: {
            name: 'AddInvulnerable';
            params: { who: AccountId32Like };
          };
        }
      >
    >;

    /**
     * See [`Pallet::remove_invulnerable`].
     *
     * @param {AccountId32Like} who
     **/
    removeInvulnerable: GenericTxCall<
      Rv,
      (who: AccountId32Like) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'CollatorSelection';
          palletCall: {
            name: 'RemoveInvulnerable';
            params: { who: AccountId32Like };
          };
        }
      >
    >;

    /**
     * See [`Pallet::update_bond`].
     *
     * @param {bigint} newDeposit
     **/
    updateBond: GenericTxCall<
      Rv,
      (newDeposit: bigint) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'CollatorSelection';
          palletCall: {
            name: 'UpdateBond';
            params: { newDeposit: bigint };
          };
        }
      >
    >;

    /**
     * See [`Pallet::take_candidate_slot`].
     *
     * @param {bigint} deposit
     * @param {AccountId32Like} target
     **/
    takeCandidateSlot: GenericTxCall<
      Rv,
      (
        deposit: bigint,
        target: AccountId32Like,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'CollatorSelection';
          palletCall: {
            name: 'TakeCandidateSlot';
            params: { deposit: bigint; target: AccountId32Like };
          };
        }
      >
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>;
  };
  /**
   * Pallet `Session`'s transaction calls
   **/
  session: {
    /**
     * See [`Pallet::set_keys`].
     *
     * @param {AssetHubPolkadotRuntimeSessionKeys} keys
     * @param {BytesLike} proof
     **/
    setKeys: GenericTxCall<
      Rv,
      (
        keys: AssetHubPolkadotRuntimeSessionKeys,
        proof: BytesLike,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Session';
          palletCall: {
            name: 'SetKeys';
            params: { keys: AssetHubPolkadotRuntimeSessionKeys; proof: BytesLike };
          };
        }
      >
    >;

    /**
     * See [`Pallet::purge_keys`].
     *
     **/
    purgeKeys: GenericTxCall<
      Rv,
      () => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Session';
          palletCall: {
            name: 'PurgeKeys';
          };
        }
      >
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>;
  };
  /**
   * Pallet `XcmpQueue`'s transaction calls
   **/
  xcmpQueue: {
    /**
     * See [`Pallet::suspend_xcm_execution`].
     *
     **/
    suspendXcmExecution: GenericTxCall<
      Rv,
      () => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'XcmpQueue';
          palletCall: {
            name: 'SuspendXcmExecution';
          };
        }
      >
    >;

    /**
     * See [`Pallet::resume_xcm_execution`].
     *
     **/
    resumeXcmExecution: GenericTxCall<
      Rv,
      () => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'XcmpQueue';
          palletCall: {
            name: 'ResumeXcmExecution';
          };
        }
      >
    >;

    /**
     * See [`Pallet::update_suspend_threshold`].
     *
     * @param {number} new_
     **/
    updateSuspendThreshold: GenericTxCall<
      Rv,
      (new_: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'XcmpQueue';
          palletCall: {
            name: 'UpdateSuspendThreshold';
            params: { new: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::update_drop_threshold`].
     *
     * @param {number} new_
     **/
    updateDropThreshold: GenericTxCall<
      Rv,
      (new_: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'XcmpQueue';
          palletCall: {
            name: 'UpdateDropThreshold';
            params: { new: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::update_resume_threshold`].
     *
     * @param {number} new_
     **/
    updateResumeThreshold: GenericTxCall<
      Rv,
      (new_: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'XcmpQueue';
          palletCall: {
            name: 'UpdateResumeThreshold';
            params: { new: number };
          };
        }
      >
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>;
  };
  /**
   * Pallet `PolkadotXcm`'s transaction calls
   **/
  polkadotXcm: {
    /**
     * See [`Pallet::send`].
     *
     * @param {XcmVersionedLocation} dest
     * @param {XcmVersionedXcm} message
     **/
    send: GenericTxCall<
      Rv,
      (
        dest: XcmVersionedLocation,
        message: XcmVersionedXcm,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'PolkadotXcm';
          palletCall: {
            name: 'Send';
            params: { dest: XcmVersionedLocation; message: XcmVersionedXcm };
          };
        }
      >
    >;

    /**
     * See [`Pallet::teleport_assets`].
     *
     * @param {XcmVersionedLocation} dest
     * @param {XcmVersionedLocation} beneficiary
     * @param {XcmVersionedAssets} assets
     * @param {number} feeAssetItem
     **/
    teleportAssets: GenericTxCall<
      Rv,
      (
        dest: XcmVersionedLocation,
        beneficiary: XcmVersionedLocation,
        assets: XcmVersionedAssets,
        feeAssetItem: number,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'PolkadotXcm';
          palletCall: {
            name: 'TeleportAssets';
            params: {
              dest: XcmVersionedLocation;
              beneficiary: XcmVersionedLocation;
              assets: XcmVersionedAssets;
              feeAssetItem: number;
            };
          };
        }
      >
    >;

    /**
     * See [`Pallet::reserve_transfer_assets`].
     *
     * @param {XcmVersionedLocation} dest
     * @param {XcmVersionedLocation} beneficiary
     * @param {XcmVersionedAssets} assets
     * @param {number} feeAssetItem
     **/
    reserveTransferAssets: GenericTxCall<
      Rv,
      (
        dest: XcmVersionedLocation,
        beneficiary: XcmVersionedLocation,
        assets: XcmVersionedAssets,
        feeAssetItem: number,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'PolkadotXcm';
          palletCall: {
            name: 'ReserveTransferAssets';
            params: {
              dest: XcmVersionedLocation;
              beneficiary: XcmVersionedLocation;
              assets: XcmVersionedAssets;
              feeAssetItem: number;
            };
          };
        }
      >
    >;

    /**
     * See [`Pallet::execute`].
     *
     * @param {XcmVersionedXcm} message
     * @param {SpWeightsWeightV2Weight} maxWeight
     **/
    execute: GenericTxCall<
      Rv,
      (
        message: XcmVersionedXcm,
        maxWeight: SpWeightsWeightV2Weight,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'PolkadotXcm';
          palletCall: {
            name: 'Execute';
            params: { message: XcmVersionedXcm; maxWeight: SpWeightsWeightV2Weight };
          };
        }
      >
    >;

    /**
     * See [`Pallet::force_xcm_version`].
     *
     * @param {StagingXcmV4Location} location
     * @param {number} version
     **/
    forceXcmVersion: GenericTxCall<
      Rv,
      (
        location: StagingXcmV4Location,
        version: number,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'PolkadotXcm';
          palletCall: {
            name: 'ForceXcmVersion';
            params: { location: StagingXcmV4Location; version: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::force_default_xcm_version`].
     *
     * @param {number | undefined} maybeXcmVersion
     **/
    forceDefaultXcmVersion: GenericTxCall<
      Rv,
      (maybeXcmVersion: number | undefined) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'PolkadotXcm';
          palletCall: {
            name: 'ForceDefaultXcmVersion';
            params: { maybeXcmVersion: number | undefined };
          };
        }
      >
    >;

    /**
     * See [`Pallet::force_subscribe_version_notify`].
     *
     * @param {XcmVersionedLocation} location
     **/
    forceSubscribeVersionNotify: GenericTxCall<
      Rv,
      (location: XcmVersionedLocation) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'PolkadotXcm';
          palletCall: {
            name: 'ForceSubscribeVersionNotify';
            params: { location: XcmVersionedLocation };
          };
        }
      >
    >;

    /**
     * See [`Pallet::force_unsubscribe_version_notify`].
     *
     * @param {XcmVersionedLocation} location
     **/
    forceUnsubscribeVersionNotify: GenericTxCall<
      Rv,
      (location: XcmVersionedLocation) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'PolkadotXcm';
          palletCall: {
            name: 'ForceUnsubscribeVersionNotify';
            params: { location: XcmVersionedLocation };
          };
        }
      >
    >;

    /**
     * See [`Pallet::limited_reserve_transfer_assets`].
     *
     * @param {XcmVersionedLocation} dest
     * @param {XcmVersionedLocation} beneficiary
     * @param {XcmVersionedAssets} assets
     * @param {number} feeAssetItem
     * @param {XcmV3WeightLimit} weightLimit
     **/
    limitedReserveTransferAssets: GenericTxCall<
      Rv,
      (
        dest: XcmVersionedLocation,
        beneficiary: XcmVersionedLocation,
        assets: XcmVersionedAssets,
        feeAssetItem: number,
        weightLimit: XcmV3WeightLimit,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'PolkadotXcm';
          palletCall: {
            name: 'LimitedReserveTransferAssets';
            params: {
              dest: XcmVersionedLocation;
              beneficiary: XcmVersionedLocation;
              assets: XcmVersionedAssets;
              feeAssetItem: number;
              weightLimit: XcmV3WeightLimit;
            };
          };
        }
      >
    >;

    /**
     * See [`Pallet::limited_teleport_assets`].
     *
     * @param {XcmVersionedLocation} dest
     * @param {XcmVersionedLocation} beneficiary
     * @param {XcmVersionedAssets} assets
     * @param {number} feeAssetItem
     * @param {XcmV3WeightLimit} weightLimit
     **/
    limitedTeleportAssets: GenericTxCall<
      Rv,
      (
        dest: XcmVersionedLocation,
        beneficiary: XcmVersionedLocation,
        assets: XcmVersionedAssets,
        feeAssetItem: number,
        weightLimit: XcmV3WeightLimit,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'PolkadotXcm';
          palletCall: {
            name: 'LimitedTeleportAssets';
            params: {
              dest: XcmVersionedLocation;
              beneficiary: XcmVersionedLocation;
              assets: XcmVersionedAssets;
              feeAssetItem: number;
              weightLimit: XcmV3WeightLimit;
            };
          };
        }
      >
    >;

    /**
     * See [`Pallet::force_suspension`].
     *
     * @param {boolean} suspended
     **/
    forceSuspension: GenericTxCall<
      Rv,
      (suspended: boolean) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'PolkadotXcm';
          palletCall: {
            name: 'ForceSuspension';
            params: { suspended: boolean };
          };
        }
      >
    >;

    /**
     * See [`Pallet::transfer_assets`].
     *
     * @param {XcmVersionedLocation} dest
     * @param {XcmVersionedLocation} beneficiary
     * @param {XcmVersionedAssets} assets
     * @param {number} feeAssetItem
     * @param {XcmV3WeightLimit} weightLimit
     **/
    transferAssets: GenericTxCall<
      Rv,
      (
        dest: XcmVersionedLocation,
        beneficiary: XcmVersionedLocation,
        assets: XcmVersionedAssets,
        feeAssetItem: number,
        weightLimit: XcmV3WeightLimit,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'PolkadotXcm';
          palletCall: {
            name: 'TransferAssets';
            params: {
              dest: XcmVersionedLocation;
              beneficiary: XcmVersionedLocation;
              assets: XcmVersionedAssets;
              feeAssetItem: number;
              weightLimit: XcmV3WeightLimit;
            };
          };
        }
      >
    >;

    /**
     * See [`Pallet::claim_assets`].
     *
     * @param {XcmVersionedAssets} assets
     * @param {XcmVersionedLocation} beneficiary
     **/
    claimAssets: GenericTxCall<
      Rv,
      (
        assets: XcmVersionedAssets,
        beneficiary: XcmVersionedLocation,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'PolkadotXcm';
          palletCall: {
            name: 'ClaimAssets';
            params: { assets: XcmVersionedAssets; beneficiary: XcmVersionedLocation };
          };
        }
      >
    >;

    /**
     * See [`Pallet::transfer_assets_using_type_and_then`].
     *
     * @param {XcmVersionedLocation} dest
     * @param {XcmVersionedAssets} assets
     * @param {StagingXcmExecutorAssetTransferTransferType} assetsTransferType
     * @param {XcmVersionedAssetId} remoteFeesId
     * @param {StagingXcmExecutorAssetTransferTransferType} feesTransferType
     * @param {XcmVersionedXcm} customXcmOnDest
     * @param {XcmV3WeightLimit} weightLimit
     **/
    transferAssetsUsingTypeAndThen: GenericTxCall<
      Rv,
      (
        dest: XcmVersionedLocation,
        assets: XcmVersionedAssets,
        assetsTransferType: StagingXcmExecutorAssetTransferTransferType,
        remoteFeesId: XcmVersionedAssetId,
        feesTransferType: StagingXcmExecutorAssetTransferTransferType,
        customXcmOnDest: XcmVersionedXcm,
        weightLimit: XcmV3WeightLimit,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'PolkadotXcm';
          palletCall: {
            name: 'TransferAssetsUsingTypeAndThen';
            params: {
              dest: XcmVersionedLocation;
              assets: XcmVersionedAssets;
              assetsTransferType: StagingXcmExecutorAssetTransferTransferType;
              remoteFeesId: XcmVersionedAssetId;
              feesTransferType: StagingXcmExecutorAssetTransferTransferType;
              customXcmOnDest: XcmVersionedXcm;
              weightLimit: XcmV3WeightLimit;
            };
          };
        }
      >
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>;
  };
  /**
   * Pallet `CumulusXcm`'s transaction calls
   **/
  cumulusXcm: {
    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>;
  };
  /**
   * Pallet `ToKusamaXcmRouter`'s transaction calls
   **/
  toKusamaXcmRouter: {
    /**
     * See [`Pallet::report_bridge_status`].
     *
     * @param {H256} bridgeId
     * @param {boolean} isCongested
     **/
    reportBridgeStatus: GenericTxCall<
      Rv,
      (
        bridgeId: H256,
        isCongested: boolean,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'ToKusamaXcmRouter';
          palletCall: {
            name: 'ReportBridgeStatus';
            params: { bridgeId: H256; isCongested: boolean };
          };
        }
      >
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>;
  };
  /**
   * Pallet `MessageQueue`'s transaction calls
   **/
  messageQueue: {
    /**
     * See [`Pallet::reap_page`].
     *
     * @param {CumulusPrimitivesCoreAggregateMessageOrigin} messageOrigin
     * @param {number} pageIndex
     **/
    reapPage: GenericTxCall<
      Rv,
      (
        messageOrigin: CumulusPrimitivesCoreAggregateMessageOrigin,
        pageIndex: number,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'MessageQueue';
          palletCall: {
            name: 'ReapPage';
            params: { messageOrigin: CumulusPrimitivesCoreAggregateMessageOrigin; pageIndex: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::execute_overweight`].
     *
     * @param {CumulusPrimitivesCoreAggregateMessageOrigin} messageOrigin
     * @param {number} page
     * @param {number} index
     * @param {SpWeightsWeightV2Weight} weightLimit
     **/
    executeOverweight: GenericTxCall<
      Rv,
      (
        messageOrigin: CumulusPrimitivesCoreAggregateMessageOrigin,
        page: number,
        index: number,
        weightLimit: SpWeightsWeightV2Weight,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'MessageQueue';
          palletCall: {
            name: 'ExecuteOverweight';
            params: {
              messageOrigin: CumulusPrimitivesCoreAggregateMessageOrigin;
              page: number;
              index: number;
              weightLimit: SpWeightsWeightV2Weight;
            };
          };
        }
      >
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>;
  };
  /**
   * Pallet `Utility`'s transaction calls
   **/
  utility: {
    /**
     * See [`Pallet::batch`].
     *
     * @param {Array<AssetHubPolkadotRuntimeRuntimeCallLike>} calls
     **/
    batch: GenericTxCall<
      Rv,
      (calls: Array<AssetHubPolkadotRuntimeRuntimeCallLike>) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Utility';
          palletCall: {
            name: 'Batch';
            params: { calls: Array<AssetHubPolkadotRuntimeRuntimeCallLike> };
          };
        }
      >
    >;

    /**
     * See [`Pallet::as_derivative`].
     *
     * @param {number} index
     * @param {AssetHubPolkadotRuntimeRuntimeCallLike} call
     **/
    asDerivative: GenericTxCall<
      Rv,
      (
        index: number,
        call: AssetHubPolkadotRuntimeRuntimeCallLike,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Utility';
          palletCall: {
            name: 'AsDerivative';
            params: { index: number; call: AssetHubPolkadotRuntimeRuntimeCallLike };
          };
        }
      >
    >;

    /**
     * See [`Pallet::batch_all`].
     *
     * @param {Array<AssetHubPolkadotRuntimeRuntimeCallLike>} calls
     **/
    batchAll: GenericTxCall<
      Rv,
      (calls: Array<AssetHubPolkadotRuntimeRuntimeCallLike>) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Utility';
          palletCall: {
            name: 'BatchAll';
            params: { calls: Array<AssetHubPolkadotRuntimeRuntimeCallLike> };
          };
        }
      >
    >;

    /**
     * See [`Pallet::dispatch_as`].
     *
     * @param {AssetHubPolkadotRuntimeOriginCaller} asOrigin
     * @param {AssetHubPolkadotRuntimeRuntimeCallLike} call
     **/
    dispatchAs: GenericTxCall<
      Rv,
      (
        asOrigin: AssetHubPolkadotRuntimeOriginCaller,
        call: AssetHubPolkadotRuntimeRuntimeCallLike,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Utility';
          palletCall: {
            name: 'DispatchAs';
            params: { asOrigin: AssetHubPolkadotRuntimeOriginCaller; call: AssetHubPolkadotRuntimeRuntimeCallLike };
          };
        }
      >
    >;

    /**
     * See [`Pallet::force_batch`].
     *
     * @param {Array<AssetHubPolkadotRuntimeRuntimeCallLike>} calls
     **/
    forceBatch: GenericTxCall<
      Rv,
      (calls: Array<AssetHubPolkadotRuntimeRuntimeCallLike>) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Utility';
          palletCall: {
            name: 'ForceBatch';
            params: { calls: Array<AssetHubPolkadotRuntimeRuntimeCallLike> };
          };
        }
      >
    >;

    /**
     * See [`Pallet::with_weight`].
     *
     * @param {AssetHubPolkadotRuntimeRuntimeCallLike} call
     * @param {SpWeightsWeightV2Weight} weight
     **/
    withWeight: GenericTxCall<
      Rv,
      (
        call: AssetHubPolkadotRuntimeRuntimeCallLike,
        weight: SpWeightsWeightV2Weight,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Utility';
          palletCall: {
            name: 'WithWeight';
            params: { call: AssetHubPolkadotRuntimeRuntimeCallLike; weight: SpWeightsWeightV2Weight };
          };
        }
      >
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>;
  };
  /**
   * Pallet `Multisig`'s transaction calls
   **/
  multisig: {
    /**
     * See [`Pallet::as_multi_threshold_1`].
     *
     * @param {Array<AccountId32Like>} otherSignatories
     * @param {AssetHubPolkadotRuntimeRuntimeCallLike} call
     **/
    asMultiThreshold1: GenericTxCall<
      Rv,
      (
        otherSignatories: Array<AccountId32Like>,
        call: AssetHubPolkadotRuntimeRuntimeCallLike,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Multisig';
          palletCall: {
            name: 'AsMultiThreshold1';
            params: { otherSignatories: Array<AccountId32Like>; call: AssetHubPolkadotRuntimeRuntimeCallLike };
          };
        }
      >
    >;

    /**
     * See [`Pallet::as_multi`].
     *
     * @param {number} threshold
     * @param {Array<AccountId32Like>} otherSignatories
     * @param {PalletMultisigTimepoint | undefined} maybeTimepoint
     * @param {AssetHubPolkadotRuntimeRuntimeCallLike} call
     * @param {SpWeightsWeightV2Weight} maxWeight
     **/
    asMulti: GenericTxCall<
      Rv,
      (
        threshold: number,
        otherSignatories: Array<AccountId32Like>,
        maybeTimepoint: PalletMultisigTimepoint | undefined,
        call: AssetHubPolkadotRuntimeRuntimeCallLike,
        maxWeight: SpWeightsWeightV2Weight,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Multisig';
          palletCall: {
            name: 'AsMulti';
            params: {
              threshold: number;
              otherSignatories: Array<AccountId32Like>;
              maybeTimepoint: PalletMultisigTimepoint | undefined;
              call: AssetHubPolkadotRuntimeRuntimeCallLike;
              maxWeight: SpWeightsWeightV2Weight;
            };
          };
        }
      >
    >;

    /**
     * See [`Pallet::approve_as_multi`].
     *
     * @param {number} threshold
     * @param {Array<AccountId32Like>} otherSignatories
     * @param {PalletMultisigTimepoint | undefined} maybeTimepoint
     * @param {FixedBytes<32>} callHash
     * @param {SpWeightsWeightV2Weight} maxWeight
     **/
    approveAsMulti: GenericTxCall<
      Rv,
      (
        threshold: number,
        otherSignatories: Array<AccountId32Like>,
        maybeTimepoint: PalletMultisigTimepoint | undefined,
        callHash: FixedBytes<32>,
        maxWeight: SpWeightsWeightV2Weight,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Multisig';
          palletCall: {
            name: 'ApproveAsMulti';
            params: {
              threshold: number;
              otherSignatories: Array<AccountId32Like>;
              maybeTimepoint: PalletMultisigTimepoint | undefined;
              callHash: FixedBytes<32>;
              maxWeight: SpWeightsWeightV2Weight;
            };
          };
        }
      >
    >;

    /**
     * See [`Pallet::cancel_as_multi`].
     *
     * @param {number} threshold
     * @param {Array<AccountId32Like>} otherSignatories
     * @param {PalletMultisigTimepoint} timepoint
     * @param {FixedBytes<32>} callHash
     **/
    cancelAsMulti: GenericTxCall<
      Rv,
      (
        threshold: number,
        otherSignatories: Array<AccountId32Like>,
        timepoint: PalletMultisigTimepoint,
        callHash: FixedBytes<32>,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Multisig';
          palletCall: {
            name: 'CancelAsMulti';
            params: {
              threshold: number;
              otherSignatories: Array<AccountId32Like>;
              timepoint: PalletMultisigTimepoint;
              callHash: FixedBytes<32>;
            };
          };
        }
      >
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>;
  };
  /**
   * Pallet `Proxy`'s transaction calls
   **/
  proxy: {
    /**
     * See [`Pallet::proxy`].
     *
     * @param {MultiAddressLike} real
     * @param {AssetHubPolkadotRuntimeProxyType | undefined} forceProxyType
     * @param {AssetHubPolkadotRuntimeRuntimeCallLike} call
     **/
    proxy: GenericTxCall<
      Rv,
      (
        real: MultiAddressLike,
        forceProxyType: AssetHubPolkadotRuntimeProxyType | undefined,
        call: AssetHubPolkadotRuntimeRuntimeCallLike,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Proxy';
          palletCall: {
            name: 'Proxy';
            params: {
              real: MultiAddressLike;
              forceProxyType: AssetHubPolkadotRuntimeProxyType | undefined;
              call: AssetHubPolkadotRuntimeRuntimeCallLike;
            };
          };
        }
      >
    >;

    /**
     * See [`Pallet::add_proxy`].
     *
     * @param {MultiAddressLike} delegate
     * @param {AssetHubPolkadotRuntimeProxyType} proxyType
     * @param {number} delay
     **/
    addProxy: GenericTxCall<
      Rv,
      (
        delegate: MultiAddressLike,
        proxyType: AssetHubPolkadotRuntimeProxyType,
        delay: number,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Proxy';
          palletCall: {
            name: 'AddProxy';
            params: { delegate: MultiAddressLike; proxyType: AssetHubPolkadotRuntimeProxyType; delay: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::remove_proxy`].
     *
     * @param {MultiAddressLike} delegate
     * @param {AssetHubPolkadotRuntimeProxyType} proxyType
     * @param {number} delay
     **/
    removeProxy: GenericTxCall<
      Rv,
      (
        delegate: MultiAddressLike,
        proxyType: AssetHubPolkadotRuntimeProxyType,
        delay: number,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Proxy';
          palletCall: {
            name: 'RemoveProxy';
            params: { delegate: MultiAddressLike; proxyType: AssetHubPolkadotRuntimeProxyType; delay: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::remove_proxies`].
     *
     **/
    removeProxies: GenericTxCall<
      Rv,
      () => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Proxy';
          palletCall: {
            name: 'RemoveProxies';
          };
        }
      >
    >;

    /**
     * See [`Pallet::create_pure`].
     *
     * @param {AssetHubPolkadotRuntimeProxyType} proxyType
     * @param {number} delay
     * @param {number} index
     **/
    createPure: GenericTxCall<
      Rv,
      (
        proxyType: AssetHubPolkadotRuntimeProxyType,
        delay: number,
        index: number,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Proxy';
          palletCall: {
            name: 'CreatePure';
            params: { proxyType: AssetHubPolkadotRuntimeProxyType; delay: number; index: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::kill_pure`].
     *
     * @param {MultiAddressLike} spawner
     * @param {AssetHubPolkadotRuntimeProxyType} proxyType
     * @param {number} index
     * @param {number} height
     * @param {number} extIndex
     **/
    killPure: GenericTxCall<
      Rv,
      (
        spawner: MultiAddressLike,
        proxyType: AssetHubPolkadotRuntimeProxyType,
        index: number,
        height: number,
        extIndex: number,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Proxy';
          palletCall: {
            name: 'KillPure';
            params: {
              spawner: MultiAddressLike;
              proxyType: AssetHubPolkadotRuntimeProxyType;
              index: number;
              height: number;
              extIndex: number;
            };
          };
        }
      >
    >;

    /**
     * See [`Pallet::announce`].
     *
     * @param {MultiAddressLike} real
     * @param {H256} callHash
     **/
    announce: GenericTxCall<
      Rv,
      (
        real: MultiAddressLike,
        callHash: H256,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Proxy';
          palletCall: {
            name: 'Announce';
            params: { real: MultiAddressLike; callHash: H256 };
          };
        }
      >
    >;

    /**
     * See [`Pallet::remove_announcement`].
     *
     * @param {MultiAddressLike} real
     * @param {H256} callHash
     **/
    removeAnnouncement: GenericTxCall<
      Rv,
      (
        real: MultiAddressLike,
        callHash: H256,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Proxy';
          palletCall: {
            name: 'RemoveAnnouncement';
            params: { real: MultiAddressLike; callHash: H256 };
          };
        }
      >
    >;

    /**
     * See [`Pallet::reject_announcement`].
     *
     * @param {MultiAddressLike} delegate
     * @param {H256} callHash
     **/
    rejectAnnouncement: GenericTxCall<
      Rv,
      (
        delegate: MultiAddressLike,
        callHash: H256,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Proxy';
          palletCall: {
            name: 'RejectAnnouncement';
            params: { delegate: MultiAddressLike; callHash: H256 };
          };
        }
      >
    >;

    /**
     * See [`Pallet::proxy_announced`].
     *
     * @param {MultiAddressLike} delegate
     * @param {MultiAddressLike} real
     * @param {AssetHubPolkadotRuntimeProxyType | undefined} forceProxyType
     * @param {AssetHubPolkadotRuntimeRuntimeCallLike} call
     **/
    proxyAnnounced: GenericTxCall<
      Rv,
      (
        delegate: MultiAddressLike,
        real: MultiAddressLike,
        forceProxyType: AssetHubPolkadotRuntimeProxyType | undefined,
        call: AssetHubPolkadotRuntimeRuntimeCallLike,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Proxy';
          palletCall: {
            name: 'ProxyAnnounced';
            params: {
              delegate: MultiAddressLike;
              real: MultiAddressLike;
              forceProxyType: AssetHubPolkadotRuntimeProxyType | undefined;
              call: AssetHubPolkadotRuntimeRuntimeCallLike;
            };
          };
        }
      >
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>;
  };
  /**
   * Pallet `Assets`'s transaction calls
   **/
  assets: {
    /**
     * See [`Pallet::create`].
     *
     * @param {number} id
     * @param {MultiAddressLike} admin
     * @param {bigint} minBalance
     **/
    create: GenericTxCall<
      Rv,
      (
        id: number,
        admin: MultiAddressLike,
        minBalance: bigint,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Assets';
          palletCall: {
            name: 'Create';
            params: { id: number; admin: MultiAddressLike; minBalance: bigint };
          };
        }
      >
    >;

    /**
     * See [`Pallet::force_create`].
     *
     * @param {number} id
     * @param {MultiAddressLike} owner
     * @param {boolean} isSufficient
     * @param {bigint} minBalance
     **/
    forceCreate: GenericTxCall<
      Rv,
      (
        id: number,
        owner: MultiAddressLike,
        isSufficient: boolean,
        minBalance: bigint,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Assets';
          palletCall: {
            name: 'ForceCreate';
            params: { id: number; owner: MultiAddressLike; isSufficient: boolean; minBalance: bigint };
          };
        }
      >
    >;

    /**
     * See [`Pallet::start_destroy`].
     *
     * @param {number} id
     **/
    startDestroy: GenericTxCall<
      Rv,
      (id: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Assets';
          palletCall: {
            name: 'StartDestroy';
            params: { id: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::destroy_accounts`].
     *
     * @param {number} id
     **/
    destroyAccounts: GenericTxCall<
      Rv,
      (id: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Assets';
          palletCall: {
            name: 'DestroyAccounts';
            params: { id: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::destroy_approvals`].
     *
     * @param {number} id
     **/
    destroyApprovals: GenericTxCall<
      Rv,
      (id: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Assets';
          palletCall: {
            name: 'DestroyApprovals';
            params: { id: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::finish_destroy`].
     *
     * @param {number} id
     **/
    finishDestroy: GenericTxCall<
      Rv,
      (id: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Assets';
          palletCall: {
            name: 'FinishDestroy';
            params: { id: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::mint`].
     *
     * @param {number} id
     * @param {MultiAddressLike} beneficiary
     * @param {bigint} amount
     **/
    mint: GenericTxCall<
      Rv,
      (
        id: number,
        beneficiary: MultiAddressLike,
        amount: bigint,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Assets';
          palletCall: {
            name: 'Mint';
            params: { id: number; beneficiary: MultiAddressLike; amount: bigint };
          };
        }
      >
    >;

    /**
     * See [`Pallet::burn`].
     *
     * @param {number} id
     * @param {MultiAddressLike} who
     * @param {bigint} amount
     **/
    burn: GenericTxCall<
      Rv,
      (
        id: number,
        who: MultiAddressLike,
        amount: bigint,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Assets';
          palletCall: {
            name: 'Burn';
            params: { id: number; who: MultiAddressLike; amount: bigint };
          };
        }
      >
    >;

    /**
     * See [`Pallet::transfer`].
     *
     * @param {number} id
     * @param {MultiAddressLike} target
     * @param {bigint} amount
     **/
    transfer: GenericTxCall<
      Rv,
      (
        id: number,
        target: MultiAddressLike,
        amount: bigint,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Assets';
          palletCall: {
            name: 'Transfer';
            params: { id: number; target: MultiAddressLike; amount: bigint };
          };
        }
      >
    >;

    /**
     * See [`Pallet::transfer_keep_alive`].
     *
     * @param {number} id
     * @param {MultiAddressLike} target
     * @param {bigint} amount
     **/
    transferKeepAlive: GenericTxCall<
      Rv,
      (
        id: number,
        target: MultiAddressLike,
        amount: bigint,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Assets';
          palletCall: {
            name: 'TransferKeepAlive';
            params: { id: number; target: MultiAddressLike; amount: bigint };
          };
        }
      >
    >;

    /**
     * See [`Pallet::force_transfer`].
     *
     * @param {number} id
     * @param {MultiAddressLike} source
     * @param {MultiAddressLike} dest
     * @param {bigint} amount
     **/
    forceTransfer: GenericTxCall<
      Rv,
      (
        id: number,
        source: MultiAddressLike,
        dest: MultiAddressLike,
        amount: bigint,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Assets';
          palletCall: {
            name: 'ForceTransfer';
            params: { id: number; source: MultiAddressLike; dest: MultiAddressLike; amount: bigint };
          };
        }
      >
    >;

    /**
     * See [`Pallet::freeze`].
     *
     * @param {number} id
     * @param {MultiAddressLike} who
     **/
    freeze: GenericTxCall<
      Rv,
      (
        id: number,
        who: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Assets';
          palletCall: {
            name: 'Freeze';
            params: { id: number; who: MultiAddressLike };
          };
        }
      >
    >;

    /**
     * See [`Pallet::thaw`].
     *
     * @param {number} id
     * @param {MultiAddressLike} who
     **/
    thaw: GenericTxCall<
      Rv,
      (
        id: number,
        who: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Assets';
          palletCall: {
            name: 'Thaw';
            params: { id: number; who: MultiAddressLike };
          };
        }
      >
    >;

    /**
     * See [`Pallet::freeze_asset`].
     *
     * @param {number} id
     **/
    freezeAsset: GenericTxCall<
      Rv,
      (id: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Assets';
          palletCall: {
            name: 'FreezeAsset';
            params: { id: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::thaw_asset`].
     *
     * @param {number} id
     **/
    thawAsset: GenericTxCall<
      Rv,
      (id: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Assets';
          palletCall: {
            name: 'ThawAsset';
            params: { id: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::transfer_ownership`].
     *
     * @param {number} id
     * @param {MultiAddressLike} owner
     **/
    transferOwnership: GenericTxCall<
      Rv,
      (
        id: number,
        owner: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Assets';
          palletCall: {
            name: 'TransferOwnership';
            params: { id: number; owner: MultiAddressLike };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_team`].
     *
     * @param {number} id
     * @param {MultiAddressLike} issuer
     * @param {MultiAddressLike} admin
     * @param {MultiAddressLike} freezer
     **/
    setTeam: GenericTxCall<
      Rv,
      (
        id: number,
        issuer: MultiAddressLike,
        admin: MultiAddressLike,
        freezer: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Assets';
          palletCall: {
            name: 'SetTeam';
            params: { id: number; issuer: MultiAddressLike; admin: MultiAddressLike; freezer: MultiAddressLike };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_metadata`].
     *
     * @param {number} id
     * @param {BytesLike} name
     * @param {BytesLike} symbol
     * @param {number} decimals
     **/
    setMetadata: GenericTxCall<
      Rv,
      (
        id: number,
        name: BytesLike,
        symbol: BytesLike,
        decimals: number,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Assets';
          palletCall: {
            name: 'SetMetadata';
            params: { id: number; name: BytesLike; symbol: BytesLike; decimals: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::clear_metadata`].
     *
     * @param {number} id
     **/
    clearMetadata: GenericTxCall<
      Rv,
      (id: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Assets';
          palletCall: {
            name: 'ClearMetadata';
            params: { id: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::force_set_metadata`].
     *
     * @param {number} id
     * @param {BytesLike} name
     * @param {BytesLike} symbol
     * @param {number} decimals
     * @param {boolean} isFrozen
     **/
    forceSetMetadata: GenericTxCall<
      Rv,
      (
        id: number,
        name: BytesLike,
        symbol: BytesLike,
        decimals: number,
        isFrozen: boolean,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Assets';
          palletCall: {
            name: 'ForceSetMetadata';
            params: { id: number; name: BytesLike; symbol: BytesLike; decimals: number; isFrozen: boolean };
          };
        }
      >
    >;

    /**
     * See [`Pallet::force_clear_metadata`].
     *
     * @param {number} id
     **/
    forceClearMetadata: GenericTxCall<
      Rv,
      (id: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Assets';
          palletCall: {
            name: 'ForceClearMetadata';
            params: { id: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::force_asset_status`].
     *
     * @param {number} id
     * @param {MultiAddressLike} owner
     * @param {MultiAddressLike} issuer
     * @param {MultiAddressLike} admin
     * @param {MultiAddressLike} freezer
     * @param {bigint} minBalance
     * @param {boolean} isSufficient
     * @param {boolean} isFrozen
     **/
    forceAssetStatus: GenericTxCall<
      Rv,
      (
        id: number,
        owner: MultiAddressLike,
        issuer: MultiAddressLike,
        admin: MultiAddressLike,
        freezer: MultiAddressLike,
        minBalance: bigint,
        isSufficient: boolean,
        isFrozen: boolean,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Assets';
          palletCall: {
            name: 'ForceAssetStatus';
            params: {
              id: number;
              owner: MultiAddressLike;
              issuer: MultiAddressLike;
              admin: MultiAddressLike;
              freezer: MultiAddressLike;
              minBalance: bigint;
              isSufficient: boolean;
              isFrozen: boolean;
            };
          };
        }
      >
    >;

    /**
     * See [`Pallet::approve_transfer`].
     *
     * @param {number} id
     * @param {MultiAddressLike} delegate
     * @param {bigint} amount
     **/
    approveTransfer: GenericTxCall<
      Rv,
      (
        id: number,
        delegate: MultiAddressLike,
        amount: bigint,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Assets';
          palletCall: {
            name: 'ApproveTransfer';
            params: { id: number; delegate: MultiAddressLike; amount: bigint };
          };
        }
      >
    >;

    /**
     * See [`Pallet::cancel_approval`].
     *
     * @param {number} id
     * @param {MultiAddressLike} delegate
     **/
    cancelApproval: GenericTxCall<
      Rv,
      (
        id: number,
        delegate: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Assets';
          palletCall: {
            name: 'CancelApproval';
            params: { id: number; delegate: MultiAddressLike };
          };
        }
      >
    >;

    /**
     * See [`Pallet::force_cancel_approval`].
     *
     * @param {number} id
     * @param {MultiAddressLike} owner
     * @param {MultiAddressLike} delegate
     **/
    forceCancelApproval: GenericTxCall<
      Rv,
      (
        id: number,
        owner: MultiAddressLike,
        delegate: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Assets';
          palletCall: {
            name: 'ForceCancelApproval';
            params: { id: number; owner: MultiAddressLike; delegate: MultiAddressLike };
          };
        }
      >
    >;

    /**
     * See [`Pallet::transfer_approved`].
     *
     * @param {number} id
     * @param {MultiAddressLike} owner
     * @param {MultiAddressLike} destination
     * @param {bigint} amount
     **/
    transferApproved: GenericTxCall<
      Rv,
      (
        id: number,
        owner: MultiAddressLike,
        destination: MultiAddressLike,
        amount: bigint,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Assets';
          palletCall: {
            name: 'TransferApproved';
            params: { id: number; owner: MultiAddressLike; destination: MultiAddressLike; amount: bigint };
          };
        }
      >
    >;

    /**
     * See [`Pallet::touch`].
     *
     * @param {number} id
     **/
    touch: GenericTxCall<
      Rv,
      (id: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Assets';
          palletCall: {
            name: 'Touch';
            params: { id: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::refund`].
     *
     * @param {number} id
     * @param {boolean} allowBurn
     **/
    refund: GenericTxCall<
      Rv,
      (
        id: number,
        allowBurn: boolean,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Assets';
          palletCall: {
            name: 'Refund';
            params: { id: number; allowBurn: boolean };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_min_balance`].
     *
     * @param {number} id
     * @param {bigint} minBalance
     **/
    setMinBalance: GenericTxCall<
      Rv,
      (
        id: number,
        minBalance: bigint,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Assets';
          palletCall: {
            name: 'SetMinBalance';
            params: { id: number; minBalance: bigint };
          };
        }
      >
    >;

    /**
     * See [`Pallet::touch_other`].
     *
     * @param {number} id
     * @param {MultiAddressLike} who
     **/
    touchOther: GenericTxCall<
      Rv,
      (
        id: number,
        who: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Assets';
          palletCall: {
            name: 'TouchOther';
            params: { id: number; who: MultiAddressLike };
          };
        }
      >
    >;

    /**
     * See [`Pallet::refund_other`].
     *
     * @param {number} id
     * @param {MultiAddressLike} who
     **/
    refundOther: GenericTxCall<
      Rv,
      (
        id: number,
        who: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Assets';
          palletCall: {
            name: 'RefundOther';
            params: { id: number; who: MultiAddressLike };
          };
        }
      >
    >;

    /**
     * See [`Pallet::block`].
     *
     * @param {number} id
     * @param {MultiAddressLike} who
     **/
    block: GenericTxCall<
      Rv,
      (
        id: number,
        who: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Assets';
          palletCall: {
            name: 'Block';
            params: { id: number; who: MultiAddressLike };
          };
        }
      >
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>;
  };
  /**
   * Pallet `Uniques`'s transaction calls
   **/
  uniques: {
    /**
     * See [`Pallet::create`].
     *
     * @param {number} collection
     * @param {MultiAddressLike} admin
     **/
    create: GenericTxCall<
      Rv,
      (
        collection: number,
        admin: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Uniques';
          palletCall: {
            name: 'Create';
            params: { collection: number; admin: MultiAddressLike };
          };
        }
      >
    >;

    /**
     * See [`Pallet::force_create`].
     *
     * @param {number} collection
     * @param {MultiAddressLike} owner
     * @param {boolean} freeHolding
     **/
    forceCreate: GenericTxCall<
      Rv,
      (
        collection: number,
        owner: MultiAddressLike,
        freeHolding: boolean,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Uniques';
          palletCall: {
            name: 'ForceCreate';
            params: { collection: number; owner: MultiAddressLike; freeHolding: boolean };
          };
        }
      >
    >;

    /**
     * See [`Pallet::destroy`].
     *
     * @param {number} collection
     * @param {PalletUniquesDestroyWitness} witness
     **/
    destroy: GenericTxCall<
      Rv,
      (
        collection: number,
        witness: PalletUniquesDestroyWitness,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Uniques';
          palletCall: {
            name: 'Destroy';
            params: { collection: number; witness: PalletUniquesDestroyWitness };
          };
        }
      >
    >;

    /**
     * See [`Pallet::mint`].
     *
     * @param {number} collection
     * @param {number} item
     * @param {MultiAddressLike} owner
     **/
    mint: GenericTxCall<
      Rv,
      (
        collection: number,
        item: number,
        owner: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Uniques';
          palletCall: {
            name: 'Mint';
            params: { collection: number; item: number; owner: MultiAddressLike };
          };
        }
      >
    >;

    /**
     * See [`Pallet::burn`].
     *
     * @param {number} collection
     * @param {number} item
     * @param {MultiAddressLike | undefined} checkOwner
     **/
    burn: GenericTxCall<
      Rv,
      (
        collection: number,
        item: number,
        checkOwner: MultiAddressLike | undefined,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Uniques';
          palletCall: {
            name: 'Burn';
            params: { collection: number; item: number; checkOwner: MultiAddressLike | undefined };
          };
        }
      >
    >;

    /**
     * See [`Pallet::transfer`].
     *
     * @param {number} collection
     * @param {number} item
     * @param {MultiAddressLike} dest
     **/
    transfer: GenericTxCall<
      Rv,
      (
        collection: number,
        item: number,
        dest: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Uniques';
          palletCall: {
            name: 'Transfer';
            params: { collection: number; item: number; dest: MultiAddressLike };
          };
        }
      >
    >;

    /**
     * See [`Pallet::redeposit`].
     *
     * @param {number} collection
     * @param {Array<number>} items
     **/
    redeposit: GenericTxCall<
      Rv,
      (
        collection: number,
        items: Array<number>,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Uniques';
          palletCall: {
            name: 'Redeposit';
            params: { collection: number; items: Array<number> };
          };
        }
      >
    >;

    /**
     * See [`Pallet::freeze`].
     *
     * @param {number} collection
     * @param {number} item
     **/
    freeze: GenericTxCall<
      Rv,
      (
        collection: number,
        item: number,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Uniques';
          palletCall: {
            name: 'Freeze';
            params: { collection: number; item: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::thaw`].
     *
     * @param {number} collection
     * @param {number} item
     **/
    thaw: GenericTxCall<
      Rv,
      (
        collection: number,
        item: number,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Uniques';
          palletCall: {
            name: 'Thaw';
            params: { collection: number; item: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::freeze_collection`].
     *
     * @param {number} collection
     **/
    freezeCollection: GenericTxCall<
      Rv,
      (collection: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Uniques';
          palletCall: {
            name: 'FreezeCollection';
            params: { collection: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::thaw_collection`].
     *
     * @param {number} collection
     **/
    thawCollection: GenericTxCall<
      Rv,
      (collection: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Uniques';
          palletCall: {
            name: 'ThawCollection';
            params: { collection: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::transfer_ownership`].
     *
     * @param {number} collection
     * @param {MultiAddressLike} newOwner
     **/
    transferOwnership: GenericTxCall<
      Rv,
      (
        collection: number,
        newOwner: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Uniques';
          palletCall: {
            name: 'TransferOwnership';
            params: { collection: number; newOwner: MultiAddressLike };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_team`].
     *
     * @param {number} collection
     * @param {MultiAddressLike} issuer
     * @param {MultiAddressLike} admin
     * @param {MultiAddressLike} freezer
     **/
    setTeam: GenericTxCall<
      Rv,
      (
        collection: number,
        issuer: MultiAddressLike,
        admin: MultiAddressLike,
        freezer: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Uniques';
          palletCall: {
            name: 'SetTeam';
            params: {
              collection: number;
              issuer: MultiAddressLike;
              admin: MultiAddressLike;
              freezer: MultiAddressLike;
            };
          };
        }
      >
    >;

    /**
     * See [`Pallet::approve_transfer`].
     *
     * @param {number} collection
     * @param {number} item
     * @param {MultiAddressLike} delegate
     **/
    approveTransfer: GenericTxCall<
      Rv,
      (
        collection: number,
        item: number,
        delegate: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Uniques';
          palletCall: {
            name: 'ApproveTransfer';
            params: { collection: number; item: number; delegate: MultiAddressLike };
          };
        }
      >
    >;

    /**
     * See [`Pallet::cancel_approval`].
     *
     * @param {number} collection
     * @param {number} item
     * @param {MultiAddressLike | undefined} maybeCheckDelegate
     **/
    cancelApproval: GenericTxCall<
      Rv,
      (
        collection: number,
        item: number,
        maybeCheckDelegate: MultiAddressLike | undefined,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Uniques';
          palletCall: {
            name: 'CancelApproval';
            params: { collection: number; item: number; maybeCheckDelegate: MultiAddressLike | undefined };
          };
        }
      >
    >;

    /**
     * See [`Pallet::force_item_status`].
     *
     * @param {number} collection
     * @param {MultiAddressLike} owner
     * @param {MultiAddressLike} issuer
     * @param {MultiAddressLike} admin
     * @param {MultiAddressLike} freezer
     * @param {boolean} freeHolding
     * @param {boolean} isFrozen
     **/
    forceItemStatus: GenericTxCall<
      Rv,
      (
        collection: number,
        owner: MultiAddressLike,
        issuer: MultiAddressLike,
        admin: MultiAddressLike,
        freezer: MultiAddressLike,
        freeHolding: boolean,
        isFrozen: boolean,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Uniques';
          palletCall: {
            name: 'ForceItemStatus';
            params: {
              collection: number;
              owner: MultiAddressLike;
              issuer: MultiAddressLike;
              admin: MultiAddressLike;
              freezer: MultiAddressLike;
              freeHolding: boolean;
              isFrozen: boolean;
            };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_attribute`].
     *
     * @param {number} collection
     * @param {number | undefined} maybeItem
     * @param {BytesLike} key
     * @param {BytesLike} value
     **/
    setAttribute: GenericTxCall<
      Rv,
      (
        collection: number,
        maybeItem: number | undefined,
        key: BytesLike,
        value: BytesLike,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Uniques';
          palletCall: {
            name: 'SetAttribute';
            params: { collection: number; maybeItem: number | undefined; key: BytesLike; value: BytesLike };
          };
        }
      >
    >;

    /**
     * See [`Pallet::clear_attribute`].
     *
     * @param {number} collection
     * @param {number | undefined} maybeItem
     * @param {BytesLike} key
     **/
    clearAttribute: GenericTxCall<
      Rv,
      (
        collection: number,
        maybeItem: number | undefined,
        key: BytesLike,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Uniques';
          palletCall: {
            name: 'ClearAttribute';
            params: { collection: number; maybeItem: number | undefined; key: BytesLike };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_metadata`].
     *
     * @param {number} collection
     * @param {number} item
     * @param {BytesLike} data
     * @param {boolean} isFrozen
     **/
    setMetadata: GenericTxCall<
      Rv,
      (
        collection: number,
        item: number,
        data: BytesLike,
        isFrozen: boolean,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Uniques';
          palletCall: {
            name: 'SetMetadata';
            params: { collection: number; item: number; data: BytesLike; isFrozen: boolean };
          };
        }
      >
    >;

    /**
     * See [`Pallet::clear_metadata`].
     *
     * @param {number} collection
     * @param {number} item
     **/
    clearMetadata: GenericTxCall<
      Rv,
      (
        collection: number,
        item: number,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Uniques';
          palletCall: {
            name: 'ClearMetadata';
            params: { collection: number; item: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_collection_metadata`].
     *
     * @param {number} collection
     * @param {BytesLike} data
     * @param {boolean} isFrozen
     **/
    setCollectionMetadata: GenericTxCall<
      Rv,
      (
        collection: number,
        data: BytesLike,
        isFrozen: boolean,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Uniques';
          palletCall: {
            name: 'SetCollectionMetadata';
            params: { collection: number; data: BytesLike; isFrozen: boolean };
          };
        }
      >
    >;

    /**
     * See [`Pallet::clear_collection_metadata`].
     *
     * @param {number} collection
     **/
    clearCollectionMetadata: GenericTxCall<
      Rv,
      (collection: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Uniques';
          palletCall: {
            name: 'ClearCollectionMetadata';
            params: { collection: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_accept_ownership`].
     *
     * @param {number | undefined} maybeCollection
     **/
    setAcceptOwnership: GenericTxCall<
      Rv,
      (maybeCollection: number | undefined) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Uniques';
          palletCall: {
            name: 'SetAcceptOwnership';
            params: { maybeCollection: number | undefined };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_collection_max_supply`].
     *
     * @param {number} collection
     * @param {number} maxSupply
     **/
    setCollectionMaxSupply: GenericTxCall<
      Rv,
      (
        collection: number,
        maxSupply: number,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Uniques';
          palletCall: {
            name: 'SetCollectionMaxSupply';
            params: { collection: number; maxSupply: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_price`].
     *
     * @param {number} collection
     * @param {number} item
     * @param {bigint | undefined} price
     * @param {MultiAddressLike | undefined} whitelistedBuyer
     **/
    setPrice: GenericTxCall<
      Rv,
      (
        collection: number,
        item: number,
        price: bigint | undefined,
        whitelistedBuyer: MultiAddressLike | undefined,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Uniques';
          palletCall: {
            name: 'SetPrice';
            params: {
              collection: number;
              item: number;
              price: bigint | undefined;
              whitelistedBuyer: MultiAddressLike | undefined;
            };
          };
        }
      >
    >;

    /**
     * See [`Pallet::buy_item`].
     *
     * @param {number} collection
     * @param {number} item
     * @param {bigint} bidPrice
     **/
    buyItem: GenericTxCall<
      Rv,
      (
        collection: number,
        item: number,
        bidPrice: bigint,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Uniques';
          palletCall: {
            name: 'BuyItem';
            params: { collection: number; item: number; bidPrice: bigint };
          };
        }
      >
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>;
  };
  /**
   * Pallet `Nfts`'s transaction calls
   **/
  nfts: {
    /**
     * See [`Pallet::create`].
     *
     * @param {MultiAddressLike} admin
     * @param {PalletNftsCollectionConfig} config
     **/
    create: GenericTxCall<
      Rv,
      (
        admin: MultiAddressLike,
        config: PalletNftsCollectionConfig,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Nfts';
          palletCall: {
            name: 'Create';
            params: { admin: MultiAddressLike; config: PalletNftsCollectionConfig };
          };
        }
      >
    >;

    /**
     * See [`Pallet::force_create`].
     *
     * @param {MultiAddressLike} owner
     * @param {PalletNftsCollectionConfig} config
     **/
    forceCreate: GenericTxCall<
      Rv,
      (
        owner: MultiAddressLike,
        config: PalletNftsCollectionConfig,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Nfts';
          palletCall: {
            name: 'ForceCreate';
            params: { owner: MultiAddressLike; config: PalletNftsCollectionConfig };
          };
        }
      >
    >;

    /**
     * See [`Pallet::destroy`].
     *
     * @param {number} collection
     * @param {PalletNftsDestroyWitness} witness
     **/
    destroy: GenericTxCall<
      Rv,
      (
        collection: number,
        witness: PalletNftsDestroyWitness,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Nfts';
          palletCall: {
            name: 'Destroy';
            params: { collection: number; witness: PalletNftsDestroyWitness };
          };
        }
      >
    >;

    /**
     * See [`Pallet::mint`].
     *
     * @param {number} collection
     * @param {number} item
     * @param {MultiAddressLike} mintTo
     * @param {PalletNftsMintWitness | undefined} witnessData
     **/
    mint: GenericTxCall<
      Rv,
      (
        collection: number,
        item: number,
        mintTo: MultiAddressLike,
        witnessData: PalletNftsMintWitness | undefined,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Nfts';
          palletCall: {
            name: 'Mint';
            params: {
              collection: number;
              item: number;
              mintTo: MultiAddressLike;
              witnessData: PalletNftsMintWitness | undefined;
            };
          };
        }
      >
    >;

    /**
     * See [`Pallet::force_mint`].
     *
     * @param {number} collection
     * @param {number} item
     * @param {MultiAddressLike} mintTo
     * @param {PalletNftsItemConfig} itemConfig
     **/
    forceMint: GenericTxCall<
      Rv,
      (
        collection: number,
        item: number,
        mintTo: MultiAddressLike,
        itemConfig: PalletNftsItemConfig,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Nfts';
          palletCall: {
            name: 'ForceMint';
            params: { collection: number; item: number; mintTo: MultiAddressLike; itemConfig: PalletNftsItemConfig };
          };
        }
      >
    >;

    /**
     * See [`Pallet::burn`].
     *
     * @param {number} collection
     * @param {number} item
     **/
    burn: GenericTxCall<
      Rv,
      (
        collection: number,
        item: number,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Nfts';
          palletCall: {
            name: 'Burn';
            params: { collection: number; item: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::transfer`].
     *
     * @param {number} collection
     * @param {number} item
     * @param {MultiAddressLike} dest
     **/
    transfer: GenericTxCall<
      Rv,
      (
        collection: number,
        item: number,
        dest: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Nfts';
          palletCall: {
            name: 'Transfer';
            params: { collection: number; item: number; dest: MultiAddressLike };
          };
        }
      >
    >;

    /**
     * See [`Pallet::redeposit`].
     *
     * @param {number} collection
     * @param {Array<number>} items
     **/
    redeposit: GenericTxCall<
      Rv,
      (
        collection: number,
        items: Array<number>,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Nfts';
          palletCall: {
            name: 'Redeposit';
            params: { collection: number; items: Array<number> };
          };
        }
      >
    >;

    /**
     * See [`Pallet::lock_item_transfer`].
     *
     * @param {number} collection
     * @param {number} item
     **/
    lockItemTransfer: GenericTxCall<
      Rv,
      (
        collection: number,
        item: number,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Nfts';
          palletCall: {
            name: 'LockItemTransfer';
            params: { collection: number; item: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::unlock_item_transfer`].
     *
     * @param {number} collection
     * @param {number} item
     **/
    unlockItemTransfer: GenericTxCall<
      Rv,
      (
        collection: number,
        item: number,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Nfts';
          palletCall: {
            name: 'UnlockItemTransfer';
            params: { collection: number; item: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::lock_collection`].
     *
     * @param {number} collection
     * @param {PalletNftsBitFlags} lockSettings
     **/
    lockCollection: GenericTxCall<
      Rv,
      (
        collection: number,
        lockSettings: PalletNftsBitFlags,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Nfts';
          palletCall: {
            name: 'LockCollection';
            params: { collection: number; lockSettings: PalletNftsBitFlags };
          };
        }
      >
    >;

    /**
     * See [`Pallet::transfer_ownership`].
     *
     * @param {number} collection
     * @param {MultiAddressLike} newOwner
     **/
    transferOwnership: GenericTxCall<
      Rv,
      (
        collection: number,
        newOwner: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Nfts';
          palletCall: {
            name: 'TransferOwnership';
            params: { collection: number; newOwner: MultiAddressLike };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_team`].
     *
     * @param {number} collection
     * @param {MultiAddressLike | undefined} issuer
     * @param {MultiAddressLike | undefined} admin
     * @param {MultiAddressLike | undefined} freezer
     **/
    setTeam: GenericTxCall<
      Rv,
      (
        collection: number,
        issuer: MultiAddressLike | undefined,
        admin: MultiAddressLike | undefined,
        freezer: MultiAddressLike | undefined,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Nfts';
          palletCall: {
            name: 'SetTeam';
            params: {
              collection: number;
              issuer: MultiAddressLike | undefined;
              admin: MultiAddressLike | undefined;
              freezer: MultiAddressLike | undefined;
            };
          };
        }
      >
    >;

    /**
     * See [`Pallet::force_collection_owner`].
     *
     * @param {number} collection
     * @param {MultiAddressLike} owner
     **/
    forceCollectionOwner: GenericTxCall<
      Rv,
      (
        collection: number,
        owner: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Nfts';
          palletCall: {
            name: 'ForceCollectionOwner';
            params: { collection: number; owner: MultiAddressLike };
          };
        }
      >
    >;

    /**
     * See [`Pallet::force_collection_config`].
     *
     * @param {number} collection
     * @param {PalletNftsCollectionConfig} config
     **/
    forceCollectionConfig: GenericTxCall<
      Rv,
      (
        collection: number,
        config: PalletNftsCollectionConfig,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Nfts';
          palletCall: {
            name: 'ForceCollectionConfig';
            params: { collection: number; config: PalletNftsCollectionConfig };
          };
        }
      >
    >;

    /**
     * See [`Pallet::approve_transfer`].
     *
     * @param {number} collection
     * @param {number} item
     * @param {MultiAddressLike} delegate
     * @param {number | undefined} maybeDeadline
     **/
    approveTransfer: GenericTxCall<
      Rv,
      (
        collection: number,
        item: number,
        delegate: MultiAddressLike,
        maybeDeadline: number | undefined,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Nfts';
          palletCall: {
            name: 'ApproveTransfer';
            params: { collection: number; item: number; delegate: MultiAddressLike; maybeDeadline: number | undefined };
          };
        }
      >
    >;

    /**
     * See [`Pallet::cancel_approval`].
     *
     * @param {number} collection
     * @param {number} item
     * @param {MultiAddressLike} delegate
     **/
    cancelApproval: GenericTxCall<
      Rv,
      (
        collection: number,
        item: number,
        delegate: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Nfts';
          palletCall: {
            name: 'CancelApproval';
            params: { collection: number; item: number; delegate: MultiAddressLike };
          };
        }
      >
    >;

    /**
     * See [`Pallet::clear_all_transfer_approvals`].
     *
     * @param {number} collection
     * @param {number} item
     **/
    clearAllTransferApprovals: GenericTxCall<
      Rv,
      (
        collection: number,
        item: number,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Nfts';
          palletCall: {
            name: 'ClearAllTransferApprovals';
            params: { collection: number; item: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::lock_item_properties`].
     *
     * @param {number} collection
     * @param {number} item
     * @param {boolean} lockMetadata
     * @param {boolean} lockAttributes
     **/
    lockItemProperties: GenericTxCall<
      Rv,
      (
        collection: number,
        item: number,
        lockMetadata: boolean,
        lockAttributes: boolean,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Nfts';
          palletCall: {
            name: 'LockItemProperties';
            params: { collection: number; item: number; lockMetadata: boolean; lockAttributes: boolean };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_attribute`].
     *
     * @param {number} collection
     * @param {number | undefined} maybeItem
     * @param {PalletNftsAttributeNamespace} namespace
     * @param {BytesLike} key
     * @param {BytesLike} value
     **/
    setAttribute: GenericTxCall<
      Rv,
      (
        collection: number,
        maybeItem: number | undefined,
        namespace: PalletNftsAttributeNamespace,
        key: BytesLike,
        value: BytesLike,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Nfts';
          palletCall: {
            name: 'SetAttribute';
            params: {
              collection: number;
              maybeItem: number | undefined;
              namespace: PalletNftsAttributeNamespace;
              key: BytesLike;
              value: BytesLike;
            };
          };
        }
      >
    >;

    /**
     * See [`Pallet::force_set_attribute`].
     *
     * @param {AccountId32Like | undefined} setAs
     * @param {number} collection
     * @param {number | undefined} maybeItem
     * @param {PalletNftsAttributeNamespace} namespace
     * @param {BytesLike} key
     * @param {BytesLike} value
     **/
    forceSetAttribute: GenericTxCall<
      Rv,
      (
        setAs: AccountId32Like | undefined,
        collection: number,
        maybeItem: number | undefined,
        namespace: PalletNftsAttributeNamespace,
        key: BytesLike,
        value: BytesLike,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Nfts';
          palletCall: {
            name: 'ForceSetAttribute';
            params: {
              setAs: AccountId32Like | undefined;
              collection: number;
              maybeItem: number | undefined;
              namespace: PalletNftsAttributeNamespace;
              key: BytesLike;
              value: BytesLike;
            };
          };
        }
      >
    >;

    /**
     * See [`Pallet::clear_attribute`].
     *
     * @param {number} collection
     * @param {number | undefined} maybeItem
     * @param {PalletNftsAttributeNamespace} namespace
     * @param {BytesLike} key
     **/
    clearAttribute: GenericTxCall<
      Rv,
      (
        collection: number,
        maybeItem: number | undefined,
        namespace: PalletNftsAttributeNamespace,
        key: BytesLike,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Nfts';
          palletCall: {
            name: 'ClearAttribute';
            params: {
              collection: number;
              maybeItem: number | undefined;
              namespace: PalletNftsAttributeNamespace;
              key: BytesLike;
            };
          };
        }
      >
    >;

    /**
     * See [`Pallet::approve_item_attributes`].
     *
     * @param {number} collection
     * @param {number} item
     * @param {MultiAddressLike} delegate
     **/
    approveItemAttributes: GenericTxCall<
      Rv,
      (
        collection: number,
        item: number,
        delegate: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Nfts';
          palletCall: {
            name: 'ApproveItemAttributes';
            params: { collection: number; item: number; delegate: MultiAddressLike };
          };
        }
      >
    >;

    /**
     * See [`Pallet::cancel_item_attributes_approval`].
     *
     * @param {number} collection
     * @param {number} item
     * @param {MultiAddressLike} delegate
     * @param {PalletNftsCancelAttributesApprovalWitness} witness
     **/
    cancelItemAttributesApproval: GenericTxCall<
      Rv,
      (
        collection: number,
        item: number,
        delegate: MultiAddressLike,
        witness: PalletNftsCancelAttributesApprovalWitness,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Nfts';
          palletCall: {
            name: 'CancelItemAttributesApproval';
            params: {
              collection: number;
              item: number;
              delegate: MultiAddressLike;
              witness: PalletNftsCancelAttributesApprovalWitness;
            };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_metadata`].
     *
     * @param {number} collection
     * @param {number} item
     * @param {BytesLike} data
     **/
    setMetadata: GenericTxCall<
      Rv,
      (
        collection: number,
        item: number,
        data: BytesLike,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Nfts';
          palletCall: {
            name: 'SetMetadata';
            params: { collection: number; item: number; data: BytesLike };
          };
        }
      >
    >;

    /**
     * See [`Pallet::clear_metadata`].
     *
     * @param {number} collection
     * @param {number} item
     **/
    clearMetadata: GenericTxCall<
      Rv,
      (
        collection: number,
        item: number,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Nfts';
          palletCall: {
            name: 'ClearMetadata';
            params: { collection: number; item: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_collection_metadata`].
     *
     * @param {number} collection
     * @param {BytesLike} data
     **/
    setCollectionMetadata: GenericTxCall<
      Rv,
      (
        collection: number,
        data: BytesLike,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Nfts';
          palletCall: {
            name: 'SetCollectionMetadata';
            params: { collection: number; data: BytesLike };
          };
        }
      >
    >;

    /**
     * See [`Pallet::clear_collection_metadata`].
     *
     * @param {number} collection
     **/
    clearCollectionMetadata: GenericTxCall<
      Rv,
      (collection: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Nfts';
          palletCall: {
            name: 'ClearCollectionMetadata';
            params: { collection: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_accept_ownership`].
     *
     * @param {number | undefined} maybeCollection
     **/
    setAcceptOwnership: GenericTxCall<
      Rv,
      (maybeCollection: number | undefined) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Nfts';
          palletCall: {
            name: 'SetAcceptOwnership';
            params: { maybeCollection: number | undefined };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_collection_max_supply`].
     *
     * @param {number} collection
     * @param {number} maxSupply
     **/
    setCollectionMaxSupply: GenericTxCall<
      Rv,
      (
        collection: number,
        maxSupply: number,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Nfts';
          palletCall: {
            name: 'SetCollectionMaxSupply';
            params: { collection: number; maxSupply: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::update_mint_settings`].
     *
     * @param {number} collection
     * @param {PalletNftsMintSettings} mintSettings
     **/
    updateMintSettings: GenericTxCall<
      Rv,
      (
        collection: number,
        mintSettings: PalletNftsMintSettings,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Nfts';
          palletCall: {
            name: 'UpdateMintSettings';
            params: { collection: number; mintSettings: PalletNftsMintSettings };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_price`].
     *
     * @param {number} collection
     * @param {number} item
     * @param {bigint | undefined} price
     * @param {MultiAddressLike | undefined} whitelistedBuyer
     **/
    setPrice: GenericTxCall<
      Rv,
      (
        collection: number,
        item: number,
        price: bigint | undefined,
        whitelistedBuyer: MultiAddressLike | undefined,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Nfts';
          palletCall: {
            name: 'SetPrice';
            params: {
              collection: number;
              item: number;
              price: bigint | undefined;
              whitelistedBuyer: MultiAddressLike | undefined;
            };
          };
        }
      >
    >;

    /**
     * See [`Pallet::buy_item`].
     *
     * @param {number} collection
     * @param {number} item
     * @param {bigint} bidPrice
     **/
    buyItem: GenericTxCall<
      Rv,
      (
        collection: number,
        item: number,
        bidPrice: bigint,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Nfts';
          palletCall: {
            name: 'BuyItem';
            params: { collection: number; item: number; bidPrice: bigint };
          };
        }
      >
    >;

    /**
     * See [`Pallet::pay_tips`].
     *
     * @param {Array<PalletNftsItemTip>} tips
     **/
    payTips: GenericTxCall<
      Rv,
      (tips: Array<PalletNftsItemTip>) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Nfts';
          palletCall: {
            name: 'PayTips';
            params: { tips: Array<PalletNftsItemTip> };
          };
        }
      >
    >;

    /**
     * See [`Pallet::create_swap`].
     *
     * @param {number} offeredCollection
     * @param {number} offeredItem
     * @param {number} desiredCollection
     * @param {number | undefined} maybeDesiredItem
     * @param {PalletNftsPriceWithDirection | undefined} maybePrice
     * @param {number} duration
     **/
    createSwap: GenericTxCall<
      Rv,
      (
        offeredCollection: number,
        offeredItem: number,
        desiredCollection: number,
        maybeDesiredItem: number | undefined,
        maybePrice: PalletNftsPriceWithDirection | undefined,
        duration: number,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Nfts';
          palletCall: {
            name: 'CreateSwap';
            params: {
              offeredCollection: number;
              offeredItem: number;
              desiredCollection: number;
              maybeDesiredItem: number | undefined;
              maybePrice: PalletNftsPriceWithDirection | undefined;
              duration: number;
            };
          };
        }
      >
    >;

    /**
     * See [`Pallet::cancel_swap`].
     *
     * @param {number} offeredCollection
     * @param {number} offeredItem
     **/
    cancelSwap: GenericTxCall<
      Rv,
      (
        offeredCollection: number,
        offeredItem: number,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Nfts';
          palletCall: {
            name: 'CancelSwap';
            params: { offeredCollection: number; offeredItem: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::claim_swap`].
     *
     * @param {number} sendCollection
     * @param {number} sendItem
     * @param {number} receiveCollection
     * @param {number} receiveItem
     * @param {PalletNftsPriceWithDirection | undefined} witnessPrice
     **/
    claimSwap: GenericTxCall<
      Rv,
      (
        sendCollection: number,
        sendItem: number,
        receiveCollection: number,
        receiveItem: number,
        witnessPrice: PalletNftsPriceWithDirection | undefined,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Nfts';
          palletCall: {
            name: 'ClaimSwap';
            params: {
              sendCollection: number;
              sendItem: number;
              receiveCollection: number;
              receiveItem: number;
              witnessPrice: PalletNftsPriceWithDirection | undefined;
            };
          };
        }
      >
    >;

    /**
     * See [`Pallet::mint_pre_signed`].
     *
     * @param {PalletNftsPreSignedMint} mintData
     * @param {SpRuntimeMultiSignature} signature
     * @param {AccountId32Like} signer
     **/
    mintPreSigned: GenericTxCall<
      Rv,
      (
        mintData: PalletNftsPreSignedMint,
        signature: SpRuntimeMultiSignature,
        signer: AccountId32Like,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Nfts';
          palletCall: {
            name: 'MintPreSigned';
            params: { mintData: PalletNftsPreSignedMint; signature: SpRuntimeMultiSignature; signer: AccountId32Like };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_attributes_pre_signed`].
     *
     * @param {PalletNftsPreSignedAttributes} data
     * @param {SpRuntimeMultiSignature} signature
     * @param {AccountId32Like} signer
     **/
    setAttributesPreSigned: GenericTxCall<
      Rv,
      (
        data: PalletNftsPreSignedAttributes,
        signature: SpRuntimeMultiSignature,
        signer: AccountId32Like,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Nfts';
          palletCall: {
            name: 'SetAttributesPreSigned';
            params: {
              data: PalletNftsPreSignedAttributes;
              signature: SpRuntimeMultiSignature;
              signer: AccountId32Like;
            };
          };
        }
      >
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>;
  };
  /**
   * Pallet `ForeignAssets`'s transaction calls
   **/
  foreignAssets: {
    /**
     * See [`Pallet::create`].
     *
     * @param {StagingXcmV3MultilocationMultiLocation} id
     * @param {MultiAddressLike} admin
     * @param {bigint} minBalance
     **/
    create: GenericTxCall<
      Rv,
      (
        id: StagingXcmV3MultilocationMultiLocation,
        admin: MultiAddressLike,
        minBalance: bigint,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'ForeignAssets';
          palletCall: {
            name: 'Create';
            params: { id: StagingXcmV3MultilocationMultiLocation; admin: MultiAddressLike; minBalance: bigint };
          };
        }
      >
    >;

    /**
     * See [`Pallet::force_create`].
     *
     * @param {StagingXcmV3MultilocationMultiLocation} id
     * @param {MultiAddressLike} owner
     * @param {boolean} isSufficient
     * @param {bigint} minBalance
     **/
    forceCreate: GenericTxCall<
      Rv,
      (
        id: StagingXcmV3MultilocationMultiLocation,
        owner: MultiAddressLike,
        isSufficient: boolean,
        minBalance: bigint,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'ForeignAssets';
          palletCall: {
            name: 'ForceCreate';
            params: {
              id: StagingXcmV3MultilocationMultiLocation;
              owner: MultiAddressLike;
              isSufficient: boolean;
              minBalance: bigint;
            };
          };
        }
      >
    >;

    /**
     * See [`Pallet::start_destroy`].
     *
     * @param {StagingXcmV3MultilocationMultiLocation} id
     **/
    startDestroy: GenericTxCall<
      Rv,
      (id: StagingXcmV3MultilocationMultiLocation) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'ForeignAssets';
          palletCall: {
            name: 'StartDestroy';
            params: { id: StagingXcmV3MultilocationMultiLocation };
          };
        }
      >
    >;

    /**
     * See [`Pallet::destroy_accounts`].
     *
     * @param {StagingXcmV3MultilocationMultiLocation} id
     **/
    destroyAccounts: GenericTxCall<
      Rv,
      (id: StagingXcmV3MultilocationMultiLocation) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'ForeignAssets';
          palletCall: {
            name: 'DestroyAccounts';
            params: { id: StagingXcmV3MultilocationMultiLocation };
          };
        }
      >
    >;

    /**
     * See [`Pallet::destroy_approvals`].
     *
     * @param {StagingXcmV3MultilocationMultiLocation} id
     **/
    destroyApprovals: GenericTxCall<
      Rv,
      (id: StagingXcmV3MultilocationMultiLocation) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'ForeignAssets';
          palletCall: {
            name: 'DestroyApprovals';
            params: { id: StagingXcmV3MultilocationMultiLocation };
          };
        }
      >
    >;

    /**
     * See [`Pallet::finish_destroy`].
     *
     * @param {StagingXcmV3MultilocationMultiLocation} id
     **/
    finishDestroy: GenericTxCall<
      Rv,
      (id: StagingXcmV3MultilocationMultiLocation) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'ForeignAssets';
          palletCall: {
            name: 'FinishDestroy';
            params: { id: StagingXcmV3MultilocationMultiLocation };
          };
        }
      >
    >;

    /**
     * See [`Pallet::mint`].
     *
     * @param {StagingXcmV3MultilocationMultiLocation} id
     * @param {MultiAddressLike} beneficiary
     * @param {bigint} amount
     **/
    mint: GenericTxCall<
      Rv,
      (
        id: StagingXcmV3MultilocationMultiLocation,
        beneficiary: MultiAddressLike,
        amount: bigint,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'ForeignAssets';
          palletCall: {
            name: 'Mint';
            params: { id: StagingXcmV3MultilocationMultiLocation; beneficiary: MultiAddressLike; amount: bigint };
          };
        }
      >
    >;

    /**
     * See [`Pallet::burn`].
     *
     * @param {StagingXcmV3MultilocationMultiLocation} id
     * @param {MultiAddressLike} who
     * @param {bigint} amount
     **/
    burn: GenericTxCall<
      Rv,
      (
        id: StagingXcmV3MultilocationMultiLocation,
        who: MultiAddressLike,
        amount: bigint,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'ForeignAssets';
          palletCall: {
            name: 'Burn';
            params: { id: StagingXcmV3MultilocationMultiLocation; who: MultiAddressLike; amount: bigint };
          };
        }
      >
    >;

    /**
     * See [`Pallet::transfer`].
     *
     * @param {StagingXcmV3MultilocationMultiLocation} id
     * @param {MultiAddressLike} target
     * @param {bigint} amount
     **/
    transfer: GenericTxCall<
      Rv,
      (
        id: StagingXcmV3MultilocationMultiLocation,
        target: MultiAddressLike,
        amount: bigint,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'ForeignAssets';
          palletCall: {
            name: 'Transfer';
            params: { id: StagingXcmV3MultilocationMultiLocation; target: MultiAddressLike; amount: bigint };
          };
        }
      >
    >;

    /**
     * See [`Pallet::transfer_keep_alive`].
     *
     * @param {StagingXcmV3MultilocationMultiLocation} id
     * @param {MultiAddressLike} target
     * @param {bigint} amount
     **/
    transferKeepAlive: GenericTxCall<
      Rv,
      (
        id: StagingXcmV3MultilocationMultiLocation,
        target: MultiAddressLike,
        amount: bigint,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'ForeignAssets';
          palletCall: {
            name: 'TransferKeepAlive';
            params: { id: StagingXcmV3MultilocationMultiLocation; target: MultiAddressLike; amount: bigint };
          };
        }
      >
    >;

    /**
     * See [`Pallet::force_transfer`].
     *
     * @param {StagingXcmV3MultilocationMultiLocation} id
     * @param {MultiAddressLike} source
     * @param {MultiAddressLike} dest
     * @param {bigint} amount
     **/
    forceTransfer: GenericTxCall<
      Rv,
      (
        id: StagingXcmV3MultilocationMultiLocation,
        source: MultiAddressLike,
        dest: MultiAddressLike,
        amount: bigint,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'ForeignAssets';
          palletCall: {
            name: 'ForceTransfer';
            params: {
              id: StagingXcmV3MultilocationMultiLocation;
              source: MultiAddressLike;
              dest: MultiAddressLike;
              amount: bigint;
            };
          };
        }
      >
    >;

    /**
     * See [`Pallet::freeze`].
     *
     * @param {StagingXcmV3MultilocationMultiLocation} id
     * @param {MultiAddressLike} who
     **/
    freeze: GenericTxCall<
      Rv,
      (
        id: StagingXcmV3MultilocationMultiLocation,
        who: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'ForeignAssets';
          palletCall: {
            name: 'Freeze';
            params: { id: StagingXcmV3MultilocationMultiLocation; who: MultiAddressLike };
          };
        }
      >
    >;

    /**
     * See [`Pallet::thaw`].
     *
     * @param {StagingXcmV3MultilocationMultiLocation} id
     * @param {MultiAddressLike} who
     **/
    thaw: GenericTxCall<
      Rv,
      (
        id: StagingXcmV3MultilocationMultiLocation,
        who: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'ForeignAssets';
          palletCall: {
            name: 'Thaw';
            params: { id: StagingXcmV3MultilocationMultiLocation; who: MultiAddressLike };
          };
        }
      >
    >;

    /**
     * See [`Pallet::freeze_asset`].
     *
     * @param {StagingXcmV3MultilocationMultiLocation} id
     **/
    freezeAsset: GenericTxCall<
      Rv,
      (id: StagingXcmV3MultilocationMultiLocation) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'ForeignAssets';
          palletCall: {
            name: 'FreezeAsset';
            params: { id: StagingXcmV3MultilocationMultiLocation };
          };
        }
      >
    >;

    /**
     * See [`Pallet::thaw_asset`].
     *
     * @param {StagingXcmV3MultilocationMultiLocation} id
     **/
    thawAsset: GenericTxCall<
      Rv,
      (id: StagingXcmV3MultilocationMultiLocation) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'ForeignAssets';
          palletCall: {
            name: 'ThawAsset';
            params: { id: StagingXcmV3MultilocationMultiLocation };
          };
        }
      >
    >;

    /**
     * See [`Pallet::transfer_ownership`].
     *
     * @param {StagingXcmV3MultilocationMultiLocation} id
     * @param {MultiAddressLike} owner
     **/
    transferOwnership: GenericTxCall<
      Rv,
      (
        id: StagingXcmV3MultilocationMultiLocation,
        owner: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'ForeignAssets';
          palletCall: {
            name: 'TransferOwnership';
            params: { id: StagingXcmV3MultilocationMultiLocation; owner: MultiAddressLike };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_team`].
     *
     * @param {StagingXcmV3MultilocationMultiLocation} id
     * @param {MultiAddressLike} issuer
     * @param {MultiAddressLike} admin
     * @param {MultiAddressLike} freezer
     **/
    setTeam: GenericTxCall<
      Rv,
      (
        id: StagingXcmV3MultilocationMultiLocation,
        issuer: MultiAddressLike,
        admin: MultiAddressLike,
        freezer: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'ForeignAssets';
          palletCall: {
            name: 'SetTeam';
            params: {
              id: StagingXcmV3MultilocationMultiLocation;
              issuer: MultiAddressLike;
              admin: MultiAddressLike;
              freezer: MultiAddressLike;
            };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_metadata`].
     *
     * @param {StagingXcmV3MultilocationMultiLocation} id
     * @param {BytesLike} name
     * @param {BytesLike} symbol
     * @param {number} decimals
     **/
    setMetadata: GenericTxCall<
      Rv,
      (
        id: StagingXcmV3MultilocationMultiLocation,
        name: BytesLike,
        symbol: BytesLike,
        decimals: number,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'ForeignAssets';
          palletCall: {
            name: 'SetMetadata';
            params: {
              id: StagingXcmV3MultilocationMultiLocation;
              name: BytesLike;
              symbol: BytesLike;
              decimals: number;
            };
          };
        }
      >
    >;

    /**
     * See [`Pallet::clear_metadata`].
     *
     * @param {StagingXcmV3MultilocationMultiLocation} id
     **/
    clearMetadata: GenericTxCall<
      Rv,
      (id: StagingXcmV3MultilocationMultiLocation) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'ForeignAssets';
          palletCall: {
            name: 'ClearMetadata';
            params: { id: StagingXcmV3MultilocationMultiLocation };
          };
        }
      >
    >;

    /**
     * See [`Pallet::force_set_metadata`].
     *
     * @param {StagingXcmV3MultilocationMultiLocation} id
     * @param {BytesLike} name
     * @param {BytesLike} symbol
     * @param {number} decimals
     * @param {boolean} isFrozen
     **/
    forceSetMetadata: GenericTxCall<
      Rv,
      (
        id: StagingXcmV3MultilocationMultiLocation,
        name: BytesLike,
        symbol: BytesLike,
        decimals: number,
        isFrozen: boolean,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'ForeignAssets';
          palletCall: {
            name: 'ForceSetMetadata';
            params: {
              id: StagingXcmV3MultilocationMultiLocation;
              name: BytesLike;
              symbol: BytesLike;
              decimals: number;
              isFrozen: boolean;
            };
          };
        }
      >
    >;

    /**
     * See [`Pallet::force_clear_metadata`].
     *
     * @param {StagingXcmV3MultilocationMultiLocation} id
     **/
    forceClearMetadata: GenericTxCall<
      Rv,
      (id: StagingXcmV3MultilocationMultiLocation) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'ForeignAssets';
          palletCall: {
            name: 'ForceClearMetadata';
            params: { id: StagingXcmV3MultilocationMultiLocation };
          };
        }
      >
    >;

    /**
     * See [`Pallet::force_asset_status`].
     *
     * @param {StagingXcmV3MultilocationMultiLocation} id
     * @param {MultiAddressLike} owner
     * @param {MultiAddressLike} issuer
     * @param {MultiAddressLike} admin
     * @param {MultiAddressLike} freezer
     * @param {bigint} minBalance
     * @param {boolean} isSufficient
     * @param {boolean} isFrozen
     **/
    forceAssetStatus: GenericTxCall<
      Rv,
      (
        id: StagingXcmV3MultilocationMultiLocation,
        owner: MultiAddressLike,
        issuer: MultiAddressLike,
        admin: MultiAddressLike,
        freezer: MultiAddressLike,
        minBalance: bigint,
        isSufficient: boolean,
        isFrozen: boolean,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'ForeignAssets';
          palletCall: {
            name: 'ForceAssetStatus';
            params: {
              id: StagingXcmV3MultilocationMultiLocation;
              owner: MultiAddressLike;
              issuer: MultiAddressLike;
              admin: MultiAddressLike;
              freezer: MultiAddressLike;
              minBalance: bigint;
              isSufficient: boolean;
              isFrozen: boolean;
            };
          };
        }
      >
    >;

    /**
     * See [`Pallet::approve_transfer`].
     *
     * @param {StagingXcmV3MultilocationMultiLocation} id
     * @param {MultiAddressLike} delegate
     * @param {bigint} amount
     **/
    approveTransfer: GenericTxCall<
      Rv,
      (
        id: StagingXcmV3MultilocationMultiLocation,
        delegate: MultiAddressLike,
        amount: bigint,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'ForeignAssets';
          palletCall: {
            name: 'ApproveTransfer';
            params: { id: StagingXcmV3MultilocationMultiLocation; delegate: MultiAddressLike; amount: bigint };
          };
        }
      >
    >;

    /**
     * See [`Pallet::cancel_approval`].
     *
     * @param {StagingXcmV3MultilocationMultiLocation} id
     * @param {MultiAddressLike} delegate
     **/
    cancelApproval: GenericTxCall<
      Rv,
      (
        id: StagingXcmV3MultilocationMultiLocation,
        delegate: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'ForeignAssets';
          palletCall: {
            name: 'CancelApproval';
            params: { id: StagingXcmV3MultilocationMultiLocation; delegate: MultiAddressLike };
          };
        }
      >
    >;

    /**
     * See [`Pallet::force_cancel_approval`].
     *
     * @param {StagingXcmV3MultilocationMultiLocation} id
     * @param {MultiAddressLike} owner
     * @param {MultiAddressLike} delegate
     **/
    forceCancelApproval: GenericTxCall<
      Rv,
      (
        id: StagingXcmV3MultilocationMultiLocation,
        owner: MultiAddressLike,
        delegate: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'ForeignAssets';
          palletCall: {
            name: 'ForceCancelApproval';
            params: { id: StagingXcmV3MultilocationMultiLocation; owner: MultiAddressLike; delegate: MultiAddressLike };
          };
        }
      >
    >;

    /**
     * See [`Pallet::transfer_approved`].
     *
     * @param {StagingXcmV3MultilocationMultiLocation} id
     * @param {MultiAddressLike} owner
     * @param {MultiAddressLike} destination
     * @param {bigint} amount
     **/
    transferApproved: GenericTxCall<
      Rv,
      (
        id: StagingXcmV3MultilocationMultiLocation,
        owner: MultiAddressLike,
        destination: MultiAddressLike,
        amount: bigint,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'ForeignAssets';
          palletCall: {
            name: 'TransferApproved';
            params: {
              id: StagingXcmV3MultilocationMultiLocation;
              owner: MultiAddressLike;
              destination: MultiAddressLike;
              amount: bigint;
            };
          };
        }
      >
    >;

    /**
     * See [`Pallet::touch`].
     *
     * @param {StagingXcmV3MultilocationMultiLocation} id
     **/
    touch: GenericTxCall<
      Rv,
      (id: StagingXcmV3MultilocationMultiLocation) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'ForeignAssets';
          palletCall: {
            name: 'Touch';
            params: { id: StagingXcmV3MultilocationMultiLocation };
          };
        }
      >
    >;

    /**
     * See [`Pallet::refund`].
     *
     * @param {StagingXcmV3MultilocationMultiLocation} id
     * @param {boolean} allowBurn
     **/
    refund: GenericTxCall<
      Rv,
      (
        id: StagingXcmV3MultilocationMultiLocation,
        allowBurn: boolean,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'ForeignAssets';
          palletCall: {
            name: 'Refund';
            params: { id: StagingXcmV3MultilocationMultiLocation; allowBurn: boolean };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_min_balance`].
     *
     * @param {StagingXcmV3MultilocationMultiLocation} id
     * @param {bigint} minBalance
     **/
    setMinBalance: GenericTxCall<
      Rv,
      (
        id: StagingXcmV3MultilocationMultiLocation,
        minBalance: bigint,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'ForeignAssets';
          palletCall: {
            name: 'SetMinBalance';
            params: { id: StagingXcmV3MultilocationMultiLocation; minBalance: bigint };
          };
        }
      >
    >;

    /**
     * See [`Pallet::touch_other`].
     *
     * @param {StagingXcmV3MultilocationMultiLocation} id
     * @param {MultiAddressLike} who
     **/
    touchOther: GenericTxCall<
      Rv,
      (
        id: StagingXcmV3MultilocationMultiLocation,
        who: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'ForeignAssets';
          palletCall: {
            name: 'TouchOther';
            params: { id: StagingXcmV3MultilocationMultiLocation; who: MultiAddressLike };
          };
        }
      >
    >;

    /**
     * See [`Pallet::refund_other`].
     *
     * @param {StagingXcmV3MultilocationMultiLocation} id
     * @param {MultiAddressLike} who
     **/
    refundOther: GenericTxCall<
      Rv,
      (
        id: StagingXcmV3MultilocationMultiLocation,
        who: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'ForeignAssets';
          palletCall: {
            name: 'RefundOther';
            params: { id: StagingXcmV3MultilocationMultiLocation; who: MultiAddressLike };
          };
        }
      >
    >;

    /**
     * See [`Pallet::block`].
     *
     * @param {StagingXcmV3MultilocationMultiLocation} id
     * @param {MultiAddressLike} who
     **/
    block: GenericTxCall<
      Rv,
      (
        id: StagingXcmV3MultilocationMultiLocation,
        who: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'ForeignAssets';
          palletCall: {
            name: 'Block';
            params: { id: StagingXcmV3MultilocationMultiLocation; who: MultiAddressLike };
          };
        }
      >
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>;
  };
  /**
   * Pallet `PoolAssets`'s transaction calls
   **/
  poolAssets: {
    /**
     * See [`Pallet::create`].
     *
     * @param {number} id
     * @param {MultiAddressLike} admin
     * @param {bigint} minBalance
     **/
    create: GenericTxCall<
      Rv,
      (
        id: number,
        admin: MultiAddressLike,
        minBalance: bigint,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'PoolAssets';
          palletCall: {
            name: 'Create';
            params: { id: number; admin: MultiAddressLike; minBalance: bigint };
          };
        }
      >
    >;

    /**
     * See [`Pallet::force_create`].
     *
     * @param {number} id
     * @param {MultiAddressLike} owner
     * @param {boolean} isSufficient
     * @param {bigint} minBalance
     **/
    forceCreate: GenericTxCall<
      Rv,
      (
        id: number,
        owner: MultiAddressLike,
        isSufficient: boolean,
        minBalance: bigint,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'PoolAssets';
          palletCall: {
            name: 'ForceCreate';
            params: { id: number; owner: MultiAddressLike; isSufficient: boolean; minBalance: bigint };
          };
        }
      >
    >;

    /**
     * See [`Pallet::start_destroy`].
     *
     * @param {number} id
     **/
    startDestroy: GenericTxCall<
      Rv,
      (id: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'PoolAssets';
          palletCall: {
            name: 'StartDestroy';
            params: { id: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::destroy_accounts`].
     *
     * @param {number} id
     **/
    destroyAccounts: GenericTxCall<
      Rv,
      (id: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'PoolAssets';
          palletCall: {
            name: 'DestroyAccounts';
            params: { id: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::destroy_approvals`].
     *
     * @param {number} id
     **/
    destroyApprovals: GenericTxCall<
      Rv,
      (id: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'PoolAssets';
          palletCall: {
            name: 'DestroyApprovals';
            params: { id: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::finish_destroy`].
     *
     * @param {number} id
     **/
    finishDestroy: GenericTxCall<
      Rv,
      (id: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'PoolAssets';
          palletCall: {
            name: 'FinishDestroy';
            params: { id: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::mint`].
     *
     * @param {number} id
     * @param {MultiAddressLike} beneficiary
     * @param {bigint} amount
     **/
    mint: GenericTxCall<
      Rv,
      (
        id: number,
        beneficiary: MultiAddressLike,
        amount: bigint,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'PoolAssets';
          palletCall: {
            name: 'Mint';
            params: { id: number; beneficiary: MultiAddressLike; amount: bigint };
          };
        }
      >
    >;

    /**
     * See [`Pallet::burn`].
     *
     * @param {number} id
     * @param {MultiAddressLike} who
     * @param {bigint} amount
     **/
    burn: GenericTxCall<
      Rv,
      (
        id: number,
        who: MultiAddressLike,
        amount: bigint,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'PoolAssets';
          palletCall: {
            name: 'Burn';
            params: { id: number; who: MultiAddressLike; amount: bigint };
          };
        }
      >
    >;

    /**
     * See [`Pallet::transfer`].
     *
     * @param {number} id
     * @param {MultiAddressLike} target
     * @param {bigint} amount
     **/
    transfer: GenericTxCall<
      Rv,
      (
        id: number,
        target: MultiAddressLike,
        amount: bigint,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'PoolAssets';
          palletCall: {
            name: 'Transfer';
            params: { id: number; target: MultiAddressLike; amount: bigint };
          };
        }
      >
    >;

    /**
     * See [`Pallet::transfer_keep_alive`].
     *
     * @param {number} id
     * @param {MultiAddressLike} target
     * @param {bigint} amount
     **/
    transferKeepAlive: GenericTxCall<
      Rv,
      (
        id: number,
        target: MultiAddressLike,
        amount: bigint,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'PoolAssets';
          palletCall: {
            name: 'TransferKeepAlive';
            params: { id: number; target: MultiAddressLike; amount: bigint };
          };
        }
      >
    >;

    /**
     * See [`Pallet::force_transfer`].
     *
     * @param {number} id
     * @param {MultiAddressLike} source
     * @param {MultiAddressLike} dest
     * @param {bigint} amount
     **/
    forceTransfer: GenericTxCall<
      Rv,
      (
        id: number,
        source: MultiAddressLike,
        dest: MultiAddressLike,
        amount: bigint,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'PoolAssets';
          palletCall: {
            name: 'ForceTransfer';
            params: { id: number; source: MultiAddressLike; dest: MultiAddressLike; amount: bigint };
          };
        }
      >
    >;

    /**
     * See [`Pallet::freeze`].
     *
     * @param {number} id
     * @param {MultiAddressLike} who
     **/
    freeze: GenericTxCall<
      Rv,
      (
        id: number,
        who: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'PoolAssets';
          palletCall: {
            name: 'Freeze';
            params: { id: number; who: MultiAddressLike };
          };
        }
      >
    >;

    /**
     * See [`Pallet::thaw`].
     *
     * @param {number} id
     * @param {MultiAddressLike} who
     **/
    thaw: GenericTxCall<
      Rv,
      (
        id: number,
        who: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'PoolAssets';
          palletCall: {
            name: 'Thaw';
            params: { id: number; who: MultiAddressLike };
          };
        }
      >
    >;

    /**
     * See [`Pallet::freeze_asset`].
     *
     * @param {number} id
     **/
    freezeAsset: GenericTxCall<
      Rv,
      (id: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'PoolAssets';
          palletCall: {
            name: 'FreezeAsset';
            params: { id: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::thaw_asset`].
     *
     * @param {number} id
     **/
    thawAsset: GenericTxCall<
      Rv,
      (id: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'PoolAssets';
          palletCall: {
            name: 'ThawAsset';
            params: { id: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::transfer_ownership`].
     *
     * @param {number} id
     * @param {MultiAddressLike} owner
     **/
    transferOwnership: GenericTxCall<
      Rv,
      (
        id: number,
        owner: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'PoolAssets';
          palletCall: {
            name: 'TransferOwnership';
            params: { id: number; owner: MultiAddressLike };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_team`].
     *
     * @param {number} id
     * @param {MultiAddressLike} issuer
     * @param {MultiAddressLike} admin
     * @param {MultiAddressLike} freezer
     **/
    setTeam: GenericTxCall<
      Rv,
      (
        id: number,
        issuer: MultiAddressLike,
        admin: MultiAddressLike,
        freezer: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'PoolAssets';
          palletCall: {
            name: 'SetTeam';
            params: { id: number; issuer: MultiAddressLike; admin: MultiAddressLike; freezer: MultiAddressLike };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_metadata`].
     *
     * @param {number} id
     * @param {BytesLike} name
     * @param {BytesLike} symbol
     * @param {number} decimals
     **/
    setMetadata: GenericTxCall<
      Rv,
      (
        id: number,
        name: BytesLike,
        symbol: BytesLike,
        decimals: number,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'PoolAssets';
          palletCall: {
            name: 'SetMetadata';
            params: { id: number; name: BytesLike; symbol: BytesLike; decimals: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::clear_metadata`].
     *
     * @param {number} id
     **/
    clearMetadata: GenericTxCall<
      Rv,
      (id: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'PoolAssets';
          palletCall: {
            name: 'ClearMetadata';
            params: { id: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::force_set_metadata`].
     *
     * @param {number} id
     * @param {BytesLike} name
     * @param {BytesLike} symbol
     * @param {number} decimals
     * @param {boolean} isFrozen
     **/
    forceSetMetadata: GenericTxCall<
      Rv,
      (
        id: number,
        name: BytesLike,
        symbol: BytesLike,
        decimals: number,
        isFrozen: boolean,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'PoolAssets';
          palletCall: {
            name: 'ForceSetMetadata';
            params: { id: number; name: BytesLike; symbol: BytesLike; decimals: number; isFrozen: boolean };
          };
        }
      >
    >;

    /**
     * See [`Pallet::force_clear_metadata`].
     *
     * @param {number} id
     **/
    forceClearMetadata: GenericTxCall<
      Rv,
      (id: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'PoolAssets';
          palletCall: {
            name: 'ForceClearMetadata';
            params: { id: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::force_asset_status`].
     *
     * @param {number} id
     * @param {MultiAddressLike} owner
     * @param {MultiAddressLike} issuer
     * @param {MultiAddressLike} admin
     * @param {MultiAddressLike} freezer
     * @param {bigint} minBalance
     * @param {boolean} isSufficient
     * @param {boolean} isFrozen
     **/
    forceAssetStatus: GenericTxCall<
      Rv,
      (
        id: number,
        owner: MultiAddressLike,
        issuer: MultiAddressLike,
        admin: MultiAddressLike,
        freezer: MultiAddressLike,
        minBalance: bigint,
        isSufficient: boolean,
        isFrozen: boolean,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'PoolAssets';
          palletCall: {
            name: 'ForceAssetStatus';
            params: {
              id: number;
              owner: MultiAddressLike;
              issuer: MultiAddressLike;
              admin: MultiAddressLike;
              freezer: MultiAddressLike;
              minBalance: bigint;
              isSufficient: boolean;
              isFrozen: boolean;
            };
          };
        }
      >
    >;

    /**
     * See [`Pallet::approve_transfer`].
     *
     * @param {number} id
     * @param {MultiAddressLike} delegate
     * @param {bigint} amount
     **/
    approveTransfer: GenericTxCall<
      Rv,
      (
        id: number,
        delegate: MultiAddressLike,
        amount: bigint,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'PoolAssets';
          palletCall: {
            name: 'ApproveTransfer';
            params: { id: number; delegate: MultiAddressLike; amount: bigint };
          };
        }
      >
    >;

    /**
     * See [`Pallet::cancel_approval`].
     *
     * @param {number} id
     * @param {MultiAddressLike} delegate
     **/
    cancelApproval: GenericTxCall<
      Rv,
      (
        id: number,
        delegate: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'PoolAssets';
          palletCall: {
            name: 'CancelApproval';
            params: { id: number; delegate: MultiAddressLike };
          };
        }
      >
    >;

    /**
     * See [`Pallet::force_cancel_approval`].
     *
     * @param {number} id
     * @param {MultiAddressLike} owner
     * @param {MultiAddressLike} delegate
     **/
    forceCancelApproval: GenericTxCall<
      Rv,
      (
        id: number,
        owner: MultiAddressLike,
        delegate: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'PoolAssets';
          palletCall: {
            name: 'ForceCancelApproval';
            params: { id: number; owner: MultiAddressLike; delegate: MultiAddressLike };
          };
        }
      >
    >;

    /**
     * See [`Pallet::transfer_approved`].
     *
     * @param {number} id
     * @param {MultiAddressLike} owner
     * @param {MultiAddressLike} destination
     * @param {bigint} amount
     **/
    transferApproved: GenericTxCall<
      Rv,
      (
        id: number,
        owner: MultiAddressLike,
        destination: MultiAddressLike,
        amount: bigint,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'PoolAssets';
          palletCall: {
            name: 'TransferApproved';
            params: { id: number; owner: MultiAddressLike; destination: MultiAddressLike; amount: bigint };
          };
        }
      >
    >;

    /**
     * See [`Pallet::touch`].
     *
     * @param {number} id
     **/
    touch: GenericTxCall<
      Rv,
      (id: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'PoolAssets';
          palletCall: {
            name: 'Touch';
            params: { id: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::refund`].
     *
     * @param {number} id
     * @param {boolean} allowBurn
     **/
    refund: GenericTxCall<
      Rv,
      (
        id: number,
        allowBurn: boolean,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'PoolAssets';
          palletCall: {
            name: 'Refund';
            params: { id: number; allowBurn: boolean };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_min_balance`].
     *
     * @param {number} id
     * @param {bigint} minBalance
     **/
    setMinBalance: GenericTxCall<
      Rv,
      (
        id: number,
        minBalance: bigint,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'PoolAssets';
          palletCall: {
            name: 'SetMinBalance';
            params: { id: number; minBalance: bigint };
          };
        }
      >
    >;

    /**
     * See [`Pallet::touch_other`].
     *
     * @param {number} id
     * @param {MultiAddressLike} who
     **/
    touchOther: GenericTxCall<
      Rv,
      (
        id: number,
        who: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'PoolAssets';
          palletCall: {
            name: 'TouchOther';
            params: { id: number; who: MultiAddressLike };
          };
        }
      >
    >;

    /**
     * See [`Pallet::refund_other`].
     *
     * @param {number} id
     * @param {MultiAddressLike} who
     **/
    refundOther: GenericTxCall<
      Rv,
      (
        id: number,
        who: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'PoolAssets';
          palletCall: {
            name: 'RefundOther';
            params: { id: number; who: MultiAddressLike };
          };
        }
      >
    >;

    /**
     * See [`Pallet::block`].
     *
     * @param {number} id
     * @param {MultiAddressLike} who
     **/
    block: GenericTxCall<
      Rv,
      (
        id: number,
        who: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'PoolAssets';
          palletCall: {
            name: 'Block';
            params: { id: number; who: MultiAddressLike };
          };
        }
      >
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>;
  };
  /**
   * Pallet `AssetConversion`'s transaction calls
   **/
  assetConversion: {
    /**
     * See [`Pallet::create_pool`].
     *
     * @param {StagingXcmV3MultilocationMultiLocation} asset1
     * @param {StagingXcmV3MultilocationMultiLocation} asset2
     **/
    createPool: GenericTxCall<
      Rv,
      (
        asset1: StagingXcmV3MultilocationMultiLocation,
        asset2: StagingXcmV3MultilocationMultiLocation,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'AssetConversion';
          palletCall: {
            name: 'CreatePool';
            params: { asset1: StagingXcmV3MultilocationMultiLocation; asset2: StagingXcmV3MultilocationMultiLocation };
          };
        }
      >
    >;

    /**
     * See [`Pallet::add_liquidity`].
     *
     * @param {StagingXcmV3MultilocationMultiLocation} asset1
     * @param {StagingXcmV3MultilocationMultiLocation} asset2
     * @param {bigint} amount1Desired
     * @param {bigint} amount2Desired
     * @param {bigint} amount1Min
     * @param {bigint} amount2Min
     * @param {AccountId32Like} mintTo
     **/
    addLiquidity: GenericTxCall<
      Rv,
      (
        asset1: StagingXcmV3MultilocationMultiLocation,
        asset2: StagingXcmV3MultilocationMultiLocation,
        amount1Desired: bigint,
        amount2Desired: bigint,
        amount1Min: bigint,
        amount2Min: bigint,
        mintTo: AccountId32Like,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'AssetConversion';
          palletCall: {
            name: 'AddLiquidity';
            params: {
              asset1: StagingXcmV3MultilocationMultiLocation;
              asset2: StagingXcmV3MultilocationMultiLocation;
              amount1Desired: bigint;
              amount2Desired: bigint;
              amount1Min: bigint;
              amount2Min: bigint;
              mintTo: AccountId32Like;
            };
          };
        }
      >
    >;

    /**
     * See [`Pallet::remove_liquidity`].
     *
     * @param {StagingXcmV3MultilocationMultiLocation} asset1
     * @param {StagingXcmV3MultilocationMultiLocation} asset2
     * @param {bigint} lpTokenBurn
     * @param {bigint} amount1MinReceive
     * @param {bigint} amount2MinReceive
     * @param {AccountId32Like} withdrawTo
     **/
    removeLiquidity: GenericTxCall<
      Rv,
      (
        asset1: StagingXcmV3MultilocationMultiLocation,
        asset2: StagingXcmV3MultilocationMultiLocation,
        lpTokenBurn: bigint,
        amount1MinReceive: bigint,
        amount2MinReceive: bigint,
        withdrawTo: AccountId32Like,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'AssetConversion';
          palletCall: {
            name: 'RemoveLiquidity';
            params: {
              asset1: StagingXcmV3MultilocationMultiLocation;
              asset2: StagingXcmV3MultilocationMultiLocation;
              lpTokenBurn: bigint;
              amount1MinReceive: bigint;
              amount2MinReceive: bigint;
              withdrawTo: AccountId32Like;
            };
          };
        }
      >
    >;

    /**
     * See [`Pallet::swap_exact_tokens_for_tokens`].
     *
     * @param {Array<StagingXcmV3MultilocationMultiLocation>} path
     * @param {bigint} amountIn
     * @param {bigint} amountOutMin
     * @param {AccountId32Like} sendTo
     * @param {boolean} keepAlive
     **/
    swapExactTokensForTokens: GenericTxCall<
      Rv,
      (
        path: Array<StagingXcmV3MultilocationMultiLocation>,
        amountIn: bigint,
        amountOutMin: bigint,
        sendTo: AccountId32Like,
        keepAlive: boolean,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'AssetConversion';
          palletCall: {
            name: 'SwapExactTokensForTokens';
            params: {
              path: Array<StagingXcmV3MultilocationMultiLocation>;
              amountIn: bigint;
              amountOutMin: bigint;
              sendTo: AccountId32Like;
              keepAlive: boolean;
            };
          };
        }
      >
    >;

    /**
     * See [`Pallet::swap_tokens_for_exact_tokens`].
     *
     * @param {Array<StagingXcmV3MultilocationMultiLocation>} path
     * @param {bigint} amountOut
     * @param {bigint} amountInMax
     * @param {AccountId32Like} sendTo
     * @param {boolean} keepAlive
     **/
    swapTokensForExactTokens: GenericTxCall<
      Rv,
      (
        path: Array<StagingXcmV3MultilocationMultiLocation>,
        amountOut: bigint,
        amountInMax: bigint,
        sendTo: AccountId32Like,
        keepAlive: boolean,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'AssetConversion';
          palletCall: {
            name: 'SwapTokensForExactTokens';
            params: {
              path: Array<StagingXcmV3MultilocationMultiLocation>;
              amountOut: bigint;
              amountInMax: bigint;
              sendTo: AccountId32Like;
              keepAlive: boolean;
            };
          };
        }
      >
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>;
  };
}
