// Generated by dedot cli

import type {
  Phase,
  H256,
  DispatchInfo,
  DispatchError,
  AccountId32,
  Result,
  Bytes,
  FixedBytes,
  BytesLike,
  AccountId32Like,
  FixedU128,
  H160,
  U256,
  FixedArray,
  Data,
  Perquintill,
  Perbill,
  FixedI64,
  Era,
} from 'dedot/codecs';

export type FrameSystemAccountInfo = {
  nonce: number;
  consumers: number;
  providers: number;
  sufficients: number;
  data: PalletBalancesAccountData;
};

export type PalletBalancesAccountData = {
  free: bigint;
  reserved: bigint;
  frozen: bigint;
  flags: PalletBalancesExtraFlags;
};

export type PalletBalancesExtraFlags = bigint;

export type FrameSupportDispatchPerDispatchClass = {
  normal: SpWeightsWeightV2Weight;
  operational: SpWeightsWeightV2Weight;
  mandatory: SpWeightsWeightV2Weight;
};

export type SpWeightsWeightV2Weight = { refTime: bigint; proofSize: bigint };

export type FrameSystemEventRecord = { phase: Phase; event: BasiliskRuntimeRuntimeEvent; topics: Array<H256> };

export type BasiliskRuntimeRuntimeEvent =
  | { pallet: 'System'; palletEvent: FrameSystemEvent }
  | { pallet: 'Balances'; palletEvent: PalletBalancesEvent }
  | { pallet: 'TransactionPayment'; palletEvent: PalletTransactionPaymentEvent }
  | { pallet: 'MultiTransactionPayment'; palletEvent: PalletTransactionMultiPaymentEvent }
  | { pallet: 'Treasury'; palletEvent: PalletTreasuryEvent }
  | { pallet: 'Utility'; palletEvent: PalletUtilityEvent }
  | { pallet: 'Democracy'; palletEvent: PalletDemocracyEvent }
  | { pallet: 'TechnicalCommittee'; palletEvent: PalletCollectiveEvent }
  | { pallet: 'Vesting'; palletEvent: OrmlVestingModuleEvent }
  | { pallet: 'Proxy'; palletEvent: PalletProxyEvent }
  | { pallet: 'CollatorSelection'; palletEvent: PalletCollatorSelectionEvent }
  | { pallet: 'Session'; palletEvent: PalletSessionEvent }
  | { pallet: 'Preimage'; palletEvent: PalletPreimageEvent }
  | { pallet: 'Uniques'; palletEvent: PalletUniquesEvent }
  | { pallet: 'Identity'; palletEvent: PalletIdentityEvent }
  | { pallet: 'Multisig'; palletEvent: PalletMultisigEvent }
  | { pallet: 'StateTrieMigration'; palletEvent: PalletStateTrieMigrationEvent }
  | { pallet: 'ConvictionVoting'; palletEvent: PalletConvictionVotingEvent }
  | { pallet: 'Referenda'; palletEvent: PalletReferendaEvent }
  | { pallet: 'Whitelist'; palletEvent: PalletWhitelistEvent }
  | { pallet: 'RelayChainInfo'; palletEvent: PalletRelaychainInfoEvent }
  | { pallet: 'Scheduler'; palletEvent: PalletSchedulerEvent }
  | { pallet: 'ParachainSystem'; palletEvent: CumulusPalletParachainSystemEvent }
  | { pallet: 'PolkadotXcm'; palletEvent: PalletXcmEvent }
  | { pallet: 'CumulusXcm'; palletEvent: CumulusPalletXcmEvent }
  | { pallet: 'XcmpQueue'; palletEvent: CumulusPalletXcmpQueueEvent }
  | { pallet: 'MessageQueue'; palletEvent: PalletMessageQueueEvent }
  | { pallet: 'AssetRegistry'; palletEvent: PalletAssetRegistryEvent }
  | { pallet: 'Xyk'; palletEvent: PalletXykEvent }
  | { pallet: 'Duster'; palletEvent: PalletDusterEvent }
  | { pallet: 'Lbp'; palletEvent: PalletLbpEvent }
  | { pallet: 'Nft'; palletEvent: PalletNftEvent }
  | { pallet: 'Marketplace'; palletEvent: PalletMarketplaceEvent }
  | { pallet: 'TransactionPause'; palletEvent: PalletTransactionPauseEvent }
  | { pallet: 'Router'; palletEvent: PalletRouteExecutorEvent }
  | { pallet: 'XykLiquidityMining'; palletEvent: PalletXykLiquidityMiningEvent }
  | { pallet: 'XykWarehouseLM'; palletEvent: PalletLiquidityMiningEvent }
  | { pallet: 'CollatorRewards'; palletEvent: PalletCollatorRewardsEvent }
  | { pallet: 'Broadcast'; palletEvent: PalletBroadcastEvent }
  | { pallet: 'EmaOracle'; palletEvent: PalletEmaOracleEvent }
  | { pallet: 'Currencies'; palletEvent: PalletCurrenciesModuleEvent }
  | { pallet: 'Tokens'; palletEvent: OrmlTokensModuleEvent }
  | { pallet: 'OrmlXcm'; palletEvent: OrmlXcmModuleEvent }
  | { pallet: 'XTokens'; palletEvent: OrmlXtokensModuleEvent }
  | { pallet: 'UnknownTokens'; palletEvent: OrmlUnknownTokensModuleEvent };

/**
 * Event for the System pallet.
 **/
export type FrameSystemEvent =
  /**
   * An extrinsic completed successfully.
   **/
  | { name: 'ExtrinsicSuccess'; data: { dispatchInfo: DispatchInfo } }
  /**
   * An extrinsic failed.
   **/
  | { name: 'ExtrinsicFailed'; data: { dispatchError: DispatchError; dispatchInfo: DispatchInfo } }
  /**
   * `:code` was updated.
   **/
  | { name: 'CodeUpdated' }
  /**
   * A new account was created.
   **/
  | { name: 'NewAccount'; data: { account: AccountId32 } }
  /**
   * An account was reaped.
   **/
  | { name: 'KilledAccount'; data: { account: AccountId32 } }
  /**
   * On on-chain remark happened.
   **/
  | { name: 'Remarked'; data: { sender: AccountId32; hash: H256 } }
  /**
   * An upgrade was authorized.
   **/
  | { name: 'UpgradeAuthorized'; data: { codeHash: H256; checkVersion: boolean } };

export type FrameSupportDispatchDispatchClass = 'Normal' | 'Operational' | 'Mandatory';

export type FrameSupportDispatchPays = 'Yes' | 'No';

/**
 * The `Event` enum of this pallet
 **/
export type PalletBalancesEvent =
  /**
   * An account was created with some free balance.
   **/
  | { name: 'Endowed'; data: { account: AccountId32; freeBalance: bigint } }
  /**
   * An account was removed whose balance was non-zero but below ExistentialDeposit,
   * resulting in an outright loss.
   **/
  | { name: 'DustLost'; data: { account: AccountId32; amount: bigint } }
  /**
   * Transfer succeeded.
   **/
  | { name: 'Transfer'; data: { from: AccountId32; to: AccountId32; amount: bigint } }
  /**
   * A balance was set by root.
   **/
  | { name: 'BalanceSet'; data: { who: AccountId32; free: bigint } }
  /**
   * Some balance was reserved (moved from free to reserved).
   **/
  | { name: 'Reserved'; data: { who: AccountId32; amount: bigint } }
  /**
   * Some balance was unreserved (moved from reserved to free).
   **/
  | { name: 'Unreserved'; data: { who: AccountId32; amount: bigint } }
  /**
   * Some balance was moved from the reserve of the first account to the second account.
   * Final argument indicates the destination balance type.
   **/
  | {
      name: 'ReserveRepatriated';
      data: {
        from: AccountId32;
        to: AccountId32;
        amount: bigint;
        destinationStatus: FrameSupportTokensMiscBalanceStatus;
      };
    }
  /**
   * Some amount was deposited (e.g. for transaction fees).
   **/
  | { name: 'Deposit'; data: { who: AccountId32; amount: bigint } }
  /**
   * Some amount was withdrawn from the account (e.g. for transaction fees).
   **/
  | { name: 'Withdraw'; data: { who: AccountId32; amount: bigint } }
  /**
   * Some amount was removed from the account (e.g. for misbehavior).
   **/
  | { name: 'Slashed'; data: { who: AccountId32; amount: bigint } }
  /**
   * Some amount was minted into an account.
   **/
  | { name: 'Minted'; data: { who: AccountId32; amount: bigint } }
  /**
   * Some amount was burned from an account.
   **/
  | { name: 'Burned'; data: { who: AccountId32; amount: bigint } }
  /**
   * Some amount was suspended from an account (it can be restored later).
   **/
  | { name: 'Suspended'; data: { who: AccountId32; amount: bigint } }
  /**
   * Some amount was restored into an account.
   **/
  | { name: 'Restored'; data: { who: AccountId32; amount: bigint } }
  /**
   * An account was upgraded.
   **/
  | { name: 'Upgraded'; data: { who: AccountId32 } }
  /**
   * Total issuance was increased by `amount`, creating a credit to be balanced.
   **/
  | { name: 'Issued'; data: { amount: bigint } }
  /**
   * Total issuance was decreased by `amount`, creating a debt to be balanced.
   **/
  | { name: 'Rescinded'; data: { amount: bigint } }
  /**
   * Some balance was locked.
   **/
  | { name: 'Locked'; data: { who: AccountId32; amount: bigint } }
  /**
   * Some balance was unlocked.
   **/
  | { name: 'Unlocked'; data: { who: AccountId32; amount: bigint } }
  /**
   * Some balance was frozen.
   **/
  | { name: 'Frozen'; data: { who: AccountId32; amount: bigint } }
  /**
   * Some balance was thawed.
   **/
  | { name: 'Thawed'; data: { who: AccountId32; amount: bigint } }
  /**
   * The `TotalIssuance` was forcefully changed.
   **/
  | { name: 'TotalIssuanceForced'; data: { old: bigint; new: bigint } };

export type FrameSupportTokensMiscBalanceStatus = 'Free' | 'Reserved';

/**
 * The `Event` enum of this pallet
 **/
export type PalletTransactionPaymentEvent =
  /**
   * A transaction fee `actual_fee`, of which `tip` was added to the minimum inclusion fee,
   * has been paid by `who`.
   **/
  { name: 'TransactionFeePaid'; data: { who: AccountId32; actualFee: bigint; tip: bigint } };

/**
 * The `Event` enum of this pallet
 **/
export type PalletTransactionMultiPaymentEvent =
  /**
   * CurrencySet
   * [who, currency]
   **/
  | { name: 'CurrencySet'; data: { accountId: AccountId32; assetId: number } }
  /**
   * New accepted currency added
   * [currency]
   **/
  | { name: 'CurrencyAdded'; data: { assetId: number } }
  /**
   * Accepted currency removed
   * [currency]
   **/
  | { name: 'CurrencyRemoved'; data: { assetId: number } }
  /**
   * Transaction fee paid in non-native currency
   * [Account, Currency, Native fee amount, Non-native fee amount, Destination account]
   **/
  | {
      name: 'FeeWithdrawn';
      data: {
        accountId: AccountId32;
        assetId: number;
        nativeFeeAmount: bigint;
        nonNativeFeeAmount: bigint;
        destinationAccountId: AccountId32;
      };
    };

/**
 * The `Event` enum of this pallet
 **/
export type PalletTreasuryEvent =
  /**
   * We have ended a spend period and will now allocate funds.
   **/
  | { name: 'Spending'; data: { budgetRemaining: bigint } }
  /**
   * Some funds have been allocated.
   **/
  | { name: 'Awarded'; data: { proposalIndex: number; award: bigint; account: AccountId32 } }
  /**
   * Some of our funds have been burnt.
   **/
  | { name: 'Burnt'; data: { burntFunds: bigint } }
  /**
   * Spending has finished; this is the amount that rolls over until next spend.
   **/
  | { name: 'Rollover'; data: { rolloverBalance: bigint } }
  /**
   * Some funds have been deposited.
   **/
  | { name: 'Deposit'; data: { value: bigint } }
  /**
   * A new spend proposal has been approved.
   **/
  | { name: 'SpendApproved'; data: { proposalIndex: number; amount: bigint; beneficiary: AccountId32 } }
  /**
   * The inactive funds of the pallet have been updated.
   **/
  | { name: 'UpdatedInactive'; data: { reactivated: bigint; deactivated: bigint } }
  /**
   * A new asset spend proposal has been approved.
   **/
  | {
      name: 'AssetSpendApproved';
      data: {
        index: number;
        assetKind: [];
        amount: bigint;
        beneficiary: AccountId32;
        validFrom: number;
        expireAt: number;
      };
    }
  /**
   * An approved spend was voided.
   **/
  | { name: 'AssetSpendVoided'; data: { index: number } }
  /**
   * A payment happened.
   **/
  | { name: 'Paid'; data: { index: number; paymentId: [] } }
  /**
   * A payment failed and can be retried.
   **/
  | { name: 'PaymentFailed'; data: { index: number; paymentId: [] } }
  /**
   * A spend was processed and removed from the storage. It might have been successfully
   * paid or it may have expired.
   **/
  | { name: 'SpendProcessed'; data: { index: number } };

/**
 * The `Event` enum of this pallet
 **/
export type PalletUtilityEvent =
  /**
   * Batch of dispatches did not complete fully. Index of first failing dispatch given, as
   * well as the error.
   **/
  | { name: 'BatchInterrupted'; data: { index: number; error: DispatchError } }
  /**
   * Batch of dispatches completed fully with no error.
   **/
  | { name: 'BatchCompleted' }
  /**
   * Batch of dispatches completed but has errors.
   **/
  | { name: 'BatchCompletedWithErrors' }
  /**
   * A single item within a Batch of dispatches has completed with no error.
   **/
  | { name: 'ItemCompleted' }
  /**
   * A single item within a Batch of dispatches has completed with error.
   **/
  | { name: 'ItemFailed'; data: { error: DispatchError } }
  /**
   * A call was dispatched.
   **/
  | { name: 'DispatchedAs'; data: { result: Result<[], DispatchError> } };

/**
 * The `Event` enum of this pallet
 **/
export type PalletDemocracyEvent =
  /**
   * A motion has been proposed by a public account.
   **/
  | { name: 'Proposed'; data: { proposalIndex: number; deposit: bigint } }
  /**
   * A public proposal has been tabled for referendum vote.
   **/
  | { name: 'Tabled'; data: { proposalIndex: number; deposit: bigint } }
  /**
   * An external proposal has been tabled.
   **/
  | { name: 'ExternalTabled' }
  /**
   * A referendum has begun.
   **/
  | { name: 'Started'; data: { refIndex: number; threshold: PalletDemocracyVoteThreshold } }
  /**
   * A proposal has been approved by referendum.
   **/
  | { name: 'Passed'; data: { refIndex: number } }
  /**
   * A proposal has been rejected by referendum.
   **/
  | { name: 'NotPassed'; data: { refIndex: number } }
  /**
   * A referendum has been cancelled.
   **/
  | { name: 'Cancelled'; data: { refIndex: number } }
  /**
   * An account has delegated their vote to another account.
   **/
  | { name: 'Delegated'; data: { who: AccountId32; target: AccountId32 } }
  /**
   * An account has cancelled a previous delegation operation.
   **/
  | { name: 'Undelegated'; data: { account: AccountId32 } }
  /**
   * An external proposal has been vetoed.
   **/
  | { name: 'Vetoed'; data: { who: AccountId32; proposalHash: H256; until: number } }
  /**
   * A proposal_hash has been blacklisted permanently.
   **/
  | { name: 'Blacklisted'; data: { proposalHash: H256 } }
  /**
   * An account has voted in a referendum
   **/
  | { name: 'Voted'; data: { voter: AccountId32; refIndex: number; vote: PalletDemocracyVoteAccountVote } }
  /**
   * An account has seconded a proposal
   **/
  | { name: 'Seconded'; data: { seconder: AccountId32; propIndex: number } }
  /**
   * A proposal got canceled.
   **/
  | { name: 'ProposalCanceled'; data: { propIndex: number } }
  /**
   * Metadata for a proposal or a referendum has been set.
   **/
  | {
      name: 'MetadataSet';
      data: {
        /**
         * Metadata owner.
         **/
        owner: PalletDemocracyMetadataOwner;

        /**
         * Preimage hash.
         **/
        hash: H256;
      };
    }
  /**
   * Metadata for a proposal or a referendum has been cleared.
   **/
  | {
      name: 'MetadataCleared';
      data: {
        /**
         * Metadata owner.
         **/
        owner: PalletDemocracyMetadataOwner;

        /**
         * Preimage hash.
         **/
        hash: H256;
      };
    }
  /**
   * Metadata has been transferred to new owner.
   **/
  | {
      name: 'MetadataTransferred';
      data: {
        /**
         * Previous metadata owner.
         **/
        prevOwner: PalletDemocracyMetadataOwner;

        /**
         * New metadata owner.
         **/
        owner: PalletDemocracyMetadataOwner;

        /**
         * Preimage hash.
         **/
        hash: H256;
      };
    };

export type PalletDemocracyVoteThreshold = 'SuperMajorityApprove' | 'SuperMajorityAgainst' | 'SimpleMajority';

export type PalletDemocracyVoteAccountVote =
  | { type: 'Standard'; value: { vote: PalletDemocracyVote; balance: bigint } }
  | { type: 'Split'; value: { aye: bigint; nay: bigint } };

export type PalletDemocracyVote = number;

export type PalletDemocracyMetadataOwner =
  | { type: 'External' }
  | { type: 'Proposal'; value: number }
  | { type: 'Referendum'; value: number };

/**
 * The `Event` enum of this pallet
 **/
export type PalletCollectiveEvent =
  /**
   * A motion (given hash) has been proposed (by given account) with a threshold (given
   * `MemberCount`).
   **/
  | { name: 'Proposed'; data: { account: AccountId32; proposalIndex: number; proposalHash: H256; threshold: number } }
  /**
   * A motion (given hash) has been voted on by given account, leaving
   * a tally (yes votes and no votes given respectively as `MemberCount`).
   **/
  | { name: 'Voted'; data: { account: AccountId32; proposalHash: H256; voted: boolean; yes: number; no: number } }
  /**
   * A motion was approved by the required threshold.
   **/
  | { name: 'Approved'; data: { proposalHash: H256 } }
  /**
   * A motion was not approved by the required threshold.
   **/
  | { name: 'Disapproved'; data: { proposalHash: H256 } }
  /**
   * A motion was executed; result will be `Ok` if it returned without error.
   **/
  | { name: 'Executed'; data: { proposalHash: H256; result: Result<[], DispatchError> } }
  /**
   * A single member did some action; result will be `Ok` if it returned without error.
   **/
  | { name: 'MemberExecuted'; data: { proposalHash: H256; result: Result<[], DispatchError> } }
  /**
   * A proposal was closed because its threshold was reached or after its duration was up.
   **/
  | { name: 'Closed'; data: { proposalHash: H256; yes: number; no: number } };

/**
 * The `Event` enum of this pallet
 **/
export type OrmlVestingModuleEvent =
  /**
   * Added new vesting schedule.
   **/
  | {
      name: 'VestingScheduleAdded';
      data: { from: AccountId32; to: AccountId32; vestingSchedule: OrmlVestingVestingSchedule };
    }
  /**
   * Claimed vesting.
   **/
  | { name: 'Claimed'; data: { who: AccountId32; amount: bigint } }
  /**
   * Updated vesting schedules.
   **/
  | { name: 'VestingSchedulesUpdated'; data: { who: AccountId32 } };

export type OrmlVestingVestingSchedule = { start: number; period: number; periodCount: number; perPeriod: bigint };

/**
 * The `Event` enum of this pallet
 **/
export type PalletProxyEvent =
  /**
   * A proxy was executed correctly, with the given.
   **/
  | { name: 'ProxyExecuted'; data: { result: Result<[], DispatchError> } }
  /**
   * A pure account has been created by new proxy with given
   * disambiguation index and proxy type.
   **/
  | {
      name: 'PureCreated';
      data: {
        pure: AccountId32;
        who: AccountId32;
        proxyType: BasiliskRuntimeSystemProxyType;
        disambiguationIndex: number;
      };
    }
  /**
   * An announcement was placed to make a call in the future.
   **/
  | { name: 'Announced'; data: { real: AccountId32; proxy: AccountId32; callHash: H256 } }
  /**
   * A proxy was added.
   **/
  | {
      name: 'ProxyAdded';
      data: {
        delegator: AccountId32;
        delegatee: AccountId32;
        proxyType: BasiliskRuntimeSystemProxyType;
        delay: number;
      };
    }
  /**
   * A proxy was removed.
   **/
  | {
      name: 'ProxyRemoved';
      data: {
        delegator: AccountId32;
        delegatee: AccountId32;
        proxyType: BasiliskRuntimeSystemProxyType;
        delay: number;
      };
    };

export type BasiliskRuntimeSystemProxyType = 'Any' | 'CancelProxy' | 'Governance' | 'Exchange' | 'Transfer';

/**
 * The `Event` enum of this pallet
 **/
export type PalletCollatorSelectionEvent =
  /**
   * New Invulnerables were set.
   **/
  | { name: 'NewInvulnerables'; data: { invulnerables: Array<AccountId32> } }
  /**
   * A new Invulnerable was added.
   **/
  | { name: 'InvulnerableAdded'; data: { accountId: AccountId32 } }
  /**
   * An Invulnerable was removed.
   **/
  | { name: 'InvulnerableRemoved'; data: { accountId: AccountId32 } }
  /**
   * The number of desired candidates was set.
   **/
  | { name: 'NewDesiredCandidates'; data: { desiredCandidates: number } }
  /**
   * The candidacy bond was set.
   **/
  | { name: 'NewCandidacyBond'; data: { bondAmount: bigint } }
  /**
   * A new candidate joined.
   **/
  | { name: 'CandidateAdded'; data: { accountId: AccountId32; deposit: bigint } }
  /**
   * Bond of a candidate updated.
   **/
  | { name: 'CandidateBondUpdated'; data: { accountId: AccountId32; deposit: bigint } }
  /**
   * A candidate was removed.
   **/
  | { name: 'CandidateRemoved'; data: { accountId: AccountId32 } }
  /**
   * An account was replaced in the candidate list by another one.
   **/
  | { name: 'CandidateReplaced'; data: { old: AccountId32; new: AccountId32; deposit: bigint } }
  /**
   * An account was unable to be added to the Invulnerables because they did not have keys
   * registered. Other Invulnerables may have been set.
   **/
  | { name: 'InvalidInvulnerableSkipped'; data: { accountId: AccountId32 } };

/**
 * The `Event` enum of this pallet
 **/
export type PalletSessionEvent =
  /**
   * New session has happened. Note that the argument is the session index, not the
   * block number as the type might suggest.
   **/
  { name: 'NewSession'; data: { sessionIndex: number } };

/**
 * The `Event` enum of this pallet
 **/
export type PalletPreimageEvent =
  /**
   * A preimage has been noted.
   **/
  | { name: 'Noted'; data: { hash: H256 } }
  /**
   * A preimage has been requested.
   **/
  | { name: 'Requested'; data: { hash: H256 } }
  /**
   * A preimage has ben cleared.
   **/
  | { name: 'Cleared'; data: { hash: H256 } };

/**
 * The `Event` enum of this pallet
 **/
export type PalletUniquesEvent =
  /**
   * A `collection` was created.
   **/
  | { name: 'Created'; data: { collection: bigint; creator: AccountId32; owner: AccountId32 } }
  /**
   * A `collection` was force-created.
   **/
  | { name: 'ForceCreated'; data: { collection: bigint; owner: AccountId32 } }
  /**
   * A `collection` was destroyed.
   **/
  | { name: 'Destroyed'; data: { collection: bigint } }
  /**
   * An `item` was issued.
   **/
  | { name: 'Issued'; data: { collection: bigint; item: bigint; owner: AccountId32 } }
  /**
   * An `item` was transferred.
   **/
  | { name: 'Transferred'; data: { collection: bigint; item: bigint; from: AccountId32; to: AccountId32 } }
  /**
   * An `item` was destroyed.
   **/
  | { name: 'Burned'; data: { collection: bigint; item: bigint; owner: AccountId32 } }
  /**
   * Some `item` was frozen.
   **/
  | { name: 'Frozen'; data: { collection: bigint; item: bigint } }
  /**
   * Some `item` was thawed.
   **/
  | { name: 'Thawed'; data: { collection: bigint; item: bigint } }
  /**
   * Some `collection` was frozen.
   **/
  | { name: 'CollectionFrozen'; data: { collection: bigint } }
  /**
   * Some `collection` was thawed.
   **/
  | { name: 'CollectionThawed'; data: { collection: bigint } }
  /**
   * The owner changed.
   **/
  | { name: 'OwnerChanged'; data: { collection: bigint; newOwner: AccountId32 } }
  /**
   * The management team changed.
   **/
  | { name: 'TeamChanged'; data: { collection: bigint; issuer: AccountId32; admin: AccountId32; freezer: AccountId32 } }
  /**
   * An `item` of a `collection` has been approved by the `owner` for transfer by
   * a `delegate`.
   **/
  | { name: 'ApprovedTransfer'; data: { collection: bigint; item: bigint; owner: AccountId32; delegate: AccountId32 } }
  /**
   * An approval for a `delegate` account to transfer the `item` of an item
   * `collection` was cancelled by its `owner`.
   **/
  | { name: 'ApprovalCancelled'; data: { collection: bigint; item: bigint; owner: AccountId32; delegate: AccountId32 } }
  /**
   * A `collection` has had its attributes changed by the `Force` origin.
   **/
  | { name: 'ItemStatusChanged'; data: { collection: bigint } }
  /**
   * New metadata has been set for a `collection`.
   **/
  | { name: 'CollectionMetadataSet'; data: { collection: bigint; data: Bytes; isFrozen: boolean } }
  /**
   * Metadata has been cleared for a `collection`.
   **/
  | { name: 'CollectionMetadataCleared'; data: { collection: bigint } }
  /**
   * New metadata has been set for an item.
   **/
  | { name: 'MetadataSet'; data: { collection: bigint; item: bigint; data: Bytes; isFrozen: boolean } }
  /**
   * Metadata has been cleared for an item.
   **/
  | { name: 'MetadataCleared'; data: { collection: bigint; item: bigint } }
  /**
   * Metadata has been cleared for an item.
   **/
  | { name: 'Redeposited'; data: { collection: bigint; successfulItems: Array<bigint> } }
  /**
   * New attribute metadata has been set for a `collection` or `item`.
   **/
  | { name: 'AttributeSet'; data: { collection: bigint; maybeItem?: bigint | undefined; key: Bytes; value: Bytes } }
  /**
   * Attribute metadata has been cleared for a `collection` or `item`.
   **/
  | { name: 'AttributeCleared'; data: { collection: bigint; maybeItem?: bigint | undefined; key: Bytes } }
  /**
   * Ownership acceptance has changed for an account.
   **/
  | { name: 'OwnershipAcceptanceChanged'; data: { who: AccountId32; maybeCollection?: bigint | undefined } }
  /**
   * Max supply has been set for a collection.
   **/
  | { name: 'CollectionMaxSupplySet'; data: { collection: bigint; maxSupply: number } }
  /**
   * The price was set for the instance.
   **/
  | {
      name: 'ItemPriceSet';
      data: { collection: bigint; item: bigint; price: bigint; whitelistedBuyer?: AccountId32 | undefined };
    }
  /**
   * The price for the instance was removed.
   **/
  | { name: 'ItemPriceRemoved'; data: { collection: bigint; item: bigint } }
  /**
   * An item was bought.
   **/
  | {
      name: 'ItemBought';
      data: { collection: bigint; item: bigint; price: bigint; seller: AccountId32; buyer: AccountId32 };
    };

/**
 * The `Event` enum of this pallet
 **/
export type PalletIdentityEvent =
  /**
   * A name was set or reset (which will remove all judgements).
   **/
  | { name: 'IdentitySet'; data: { who: AccountId32 } }
  /**
   * A name was cleared, and the given balance returned.
   **/
  | { name: 'IdentityCleared'; data: { who: AccountId32; deposit: bigint } }
  /**
   * A name was removed and the given balance slashed.
   **/
  | { name: 'IdentityKilled'; data: { who: AccountId32; deposit: bigint } }
  /**
   * A judgement was asked from a registrar.
   **/
  | { name: 'JudgementRequested'; data: { who: AccountId32; registrarIndex: number } }
  /**
   * A judgement request was retracted.
   **/
  | { name: 'JudgementUnrequested'; data: { who: AccountId32; registrarIndex: number } }
  /**
   * A judgement was given by a registrar.
   **/
  | { name: 'JudgementGiven'; data: { target: AccountId32; registrarIndex: number } }
  /**
   * A registrar was added.
   **/
  | { name: 'RegistrarAdded'; data: { registrarIndex: number } }
  /**
   * A sub-identity was added to an identity and the deposit paid.
   **/
  | { name: 'SubIdentityAdded'; data: { sub: AccountId32; main: AccountId32; deposit: bigint } }
  /**
   * A sub-identity was removed from an identity and the deposit freed.
   **/
  | { name: 'SubIdentityRemoved'; data: { sub: AccountId32; main: AccountId32; deposit: bigint } }
  /**
   * A sub-identity was cleared, and the given deposit repatriated from the
   * main identity account to the sub-identity account.
   **/
  | { name: 'SubIdentityRevoked'; data: { sub: AccountId32; main: AccountId32; deposit: bigint } }
  /**
   * A username authority was added.
   **/
  | { name: 'AuthorityAdded'; data: { authority: AccountId32 } }
  /**
   * A username authority was removed.
   **/
  | { name: 'AuthorityRemoved'; data: { authority: AccountId32 } }
  /**
   * A username was set for `who`.
   **/
  | { name: 'UsernameSet'; data: { who: AccountId32; username: Bytes } }
  /**
   * A username was queued, but `who` must accept it prior to `expiration`.
   **/
  | { name: 'UsernameQueued'; data: { who: AccountId32; username: Bytes; expiration: number } }
  /**
   * A queued username passed its expiration without being claimed and was removed.
   **/
  | { name: 'PreapprovalExpired'; data: { whose: AccountId32 } }
  /**
   * A username was set as a primary and can be looked up from `who`.
   **/
  | { name: 'PrimaryUsernameSet'; data: { who: AccountId32; username: Bytes } }
  /**
   * A dangling username (as in, a username corresponding to an account that has removed its
   * identity) has been removed.
   **/
  | { name: 'DanglingUsernameRemoved'; data: { who: AccountId32; username: Bytes } };

/**
 * The `Event` enum of this pallet
 **/
export type PalletMultisigEvent =
  /**
   * A new multisig operation has begun.
   **/
  | { name: 'NewMultisig'; data: { approving: AccountId32; multisig: AccountId32; callHash: FixedBytes<32> } }
  /**
   * A multisig operation has been approved by someone.
   **/
  | {
      name: 'MultisigApproval';
      data: {
        approving: AccountId32;
        timepoint: PalletMultisigTimepoint;
        multisig: AccountId32;
        callHash: FixedBytes<32>;
      };
    }
  /**
   * A multisig operation has been executed.
   **/
  | {
      name: 'MultisigExecuted';
      data: {
        approving: AccountId32;
        timepoint: PalletMultisigTimepoint;
        multisig: AccountId32;
        callHash: FixedBytes<32>;
        result: Result<[], DispatchError>;
      };
    }
  /**
   * A multisig operation has been cancelled.
   **/
  | {
      name: 'MultisigCancelled';
      data: {
        cancelling: AccountId32;
        timepoint: PalletMultisigTimepoint;
        multisig: AccountId32;
        callHash: FixedBytes<32>;
      };
    };

export type PalletMultisigTimepoint = { height: number; index: number };

/**
 * Inner events of this pallet.
 **/
export type PalletStateTrieMigrationEvent =
  /**
   * Given number of `(top, child)` keys were migrated respectively, with the given
   * `compute`.
   **/
  | { name: 'Migrated'; data: { top: number; child: number; compute: PalletStateTrieMigrationMigrationCompute } }
  /**
   * Some account got slashed by the given amount.
   **/
  | { name: 'Slashed'; data: { who: AccountId32; amount: bigint } }
  /**
   * The auto migration task finished.
   **/
  | { name: 'AutoMigrationFinished' }
  /**
   * Migration got halted due to an error or miss-configuration.
   **/
  | { name: 'Halted'; data: { error: PalletStateTrieMigrationError } };

export type PalletStateTrieMigrationMigrationCompute = 'Signed' | 'Auto';

/**
 * The `Error` enum of this pallet.
 **/
export type PalletStateTrieMigrationError =
  /**
   * Max signed limits not respected.
   **/
  | 'MaxSignedLimits'
  /**
   * A key was longer than the configured maximum.
   *
   * This means that the migration halted at the current [`Progress`] and
   * can be resumed with a larger [`crate::Config::MaxKeyLen`] value.
   * Retrying with the same [`crate::Config::MaxKeyLen`] value will not work.
   * The value should only be increased to avoid a storage migration for the currently
   * stored [`crate::Progress::LastKey`].
   **/
  | 'KeyTooLong'
  /**
   * submitter does not have enough funds.
   **/
  | 'NotEnoughFunds'
  /**
   * Bad witness data provided.
   **/
  | 'BadWitness'
  /**
   * Signed migration is not allowed because the maximum limit is not set yet.
   **/
  | 'SignedMigrationNotAllowed'
  /**
   * Bad child root provided.
   **/
  | 'BadChildRoot';

/**
 * The `Event` enum of this pallet
 **/
export type PalletConvictionVotingEvent =
  /**
   * An account has delegated their vote to another account. \[who, target\]
   **/
  | { name: 'Delegated'; data: [AccountId32, AccountId32] }
  /**
   * An \[account\] has cancelled a previous delegation operation.
   **/
  | { name: 'Undelegated'; data: AccountId32 }
  /**
   * An account that has voted
   **/
  | { name: 'Voted'; data: { who: AccountId32; vote: PalletConvictionVotingVoteAccountVote } }
  /**
   * A vote that been removed
   **/
  | { name: 'VoteRemoved'; data: { who: AccountId32; vote: PalletConvictionVotingVoteAccountVote } };

export type PalletConvictionVotingVoteAccountVote =
  | { type: 'Standard'; value: { vote: PalletConvictionVotingVote; balance: bigint } }
  | { type: 'Split'; value: { aye: bigint; nay: bigint } }
  | { type: 'SplitAbstain'; value: { aye: bigint; nay: bigint; abstain: bigint } };

export type PalletConvictionVotingVote = number;

/**
 * The `Event` enum of this pallet
 **/
export type PalletReferendaEvent =
  /**
   * A referendum has been submitted.
   **/
  | {
      name: 'Submitted';
      data: {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * The track (and by extension proposal dispatch origin) of this referendum.
         **/
        track: number;

        /**
         * The proposal for the referendum.
         **/
        proposal: FrameSupportPreimagesBounded;
      };
    }
  /**
   * The decision deposit has been placed.
   **/
  | {
      name: 'DecisionDepositPlaced';
      data: {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * The account who placed the deposit.
         **/
        who: AccountId32;

        /**
         * The amount placed by the account.
         **/
        amount: bigint;
      };
    }
  /**
   * The decision deposit has been refunded.
   **/
  | {
      name: 'DecisionDepositRefunded';
      data: {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * The account who placed the deposit.
         **/
        who: AccountId32;

        /**
         * The amount placed by the account.
         **/
        amount: bigint;
      };
    }
  /**
   * A deposit has been slashed.
   **/
  | {
      name: 'DepositSlashed';
      data: {
        /**
         * The account who placed the deposit.
         **/
        who: AccountId32;

        /**
         * The amount placed by the account.
         **/
        amount: bigint;
      };
    }
  /**
   * A referendum has moved into the deciding phase.
   **/
  | {
      name: 'DecisionStarted';
      data: {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * The track (and by extension proposal dispatch origin) of this referendum.
         **/
        track: number;

        /**
         * The proposal for the referendum.
         **/
        proposal: FrameSupportPreimagesBounded;

        /**
         * The current tally of votes in this referendum.
         **/
        tally: PalletConvictionVotingTally;
      };
    }
  | {
      name: 'ConfirmStarted';
      data: {
        /**
         * Index of the referendum.
         **/
        index: number;
      };
    }
  | {
      name: 'ConfirmAborted';
      data: {
        /**
         * Index of the referendum.
         **/
        index: number;
      };
    }
  /**
   * A referendum has ended its confirmation phase and is ready for approval.
   **/
  | {
      name: 'Confirmed';
      data: {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * The final tally of votes in this referendum.
         **/
        tally: PalletConvictionVotingTally;
      };
    }
  /**
   * A referendum has been approved and its proposal has been scheduled.
   **/
  | {
      name: 'Approved';
      data: {
        /**
         * Index of the referendum.
         **/
        index: number;
      };
    }
  /**
   * A proposal has been rejected by referendum.
   **/
  | {
      name: 'Rejected';
      data: {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * The final tally of votes in this referendum.
         **/
        tally: PalletConvictionVotingTally;
      };
    }
  /**
   * A referendum has been timed out without being decided.
   **/
  | {
      name: 'TimedOut';
      data: {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * The final tally of votes in this referendum.
         **/
        tally: PalletConvictionVotingTally;
      };
    }
  /**
   * A referendum has been cancelled.
   **/
  | {
      name: 'Cancelled';
      data: {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * The final tally of votes in this referendum.
         **/
        tally: PalletConvictionVotingTally;
      };
    }
  /**
   * A referendum has been killed.
   **/
  | {
      name: 'Killed';
      data: {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * The final tally of votes in this referendum.
         **/
        tally: PalletConvictionVotingTally;
      };
    }
  /**
   * The submission deposit has been refunded.
   **/
  | {
      name: 'SubmissionDepositRefunded';
      data: {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * The account who placed the deposit.
         **/
        who: AccountId32;

        /**
         * The amount placed by the account.
         **/
        amount: bigint;
      };
    }
  /**
   * Metadata for a referendum has been set.
   **/
  | {
      name: 'MetadataSet';
      data: {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * Preimage hash.
         **/
        hash: H256;
      };
    }
  /**
   * Metadata for a referendum has been cleared.
   **/
  | {
      name: 'MetadataCleared';
      data: {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * Preimage hash.
         **/
        hash: H256;
      };
    };

export type FrameSupportPreimagesBounded =
  | { type: 'Legacy'; value: { hash: H256 } }
  | { type: 'Inline'; value: Bytes }
  | { type: 'Lookup'; value: { hash: H256; len: number } };

export type BasiliskRuntimeRuntimeCall =
  | { pallet: 'System'; palletCall: FrameSystemCall }
  | { pallet: 'Timestamp'; palletCall: PalletTimestampCall }
  | { pallet: 'Balances'; palletCall: PalletBalancesCall }
  | { pallet: 'MultiTransactionPayment'; palletCall: PalletTransactionMultiPaymentCall }
  | { pallet: 'Treasury'; palletCall: PalletTreasuryCall }
  | { pallet: 'Utility'; palletCall: PalletUtilityCall }
  | { pallet: 'Democracy'; palletCall: PalletDemocracyCall }
  | { pallet: 'TechnicalCommittee'; palletCall: PalletCollectiveCall }
  | { pallet: 'Vesting'; palletCall: OrmlVestingModuleCall }
  | { pallet: 'Proxy'; palletCall: PalletProxyCall }
  | { pallet: 'CollatorSelection'; palletCall: PalletCollatorSelectionCall }
  | { pallet: 'Session'; palletCall: PalletSessionCall }
  | { pallet: 'Preimage'; palletCall: PalletPreimageCall }
  | { pallet: 'Uniques'; palletCall: PalletUniquesCall }
  | { pallet: 'Identity'; palletCall: PalletIdentityCall }
  | { pallet: 'Multisig'; palletCall: PalletMultisigCall }
  | { pallet: 'StateTrieMigration'; palletCall: PalletStateTrieMigrationCall }
  | { pallet: 'ConvictionVoting'; palletCall: PalletConvictionVotingCall }
  | { pallet: 'Referenda'; palletCall: PalletReferendaCall }
  | { pallet: 'Whitelist'; palletCall: PalletWhitelistCall }
  | { pallet: 'RelayChainInfo'; palletCall: PalletRelaychainInfoCall }
  | { pallet: 'Scheduler'; palletCall: PalletSchedulerCall }
  | { pallet: 'ParachainSystem'; palletCall: CumulusPalletParachainSystemCall }
  | { pallet: 'ParachainInfo'; palletCall: StagingParachainInfoCall }
  | { pallet: 'PolkadotXcm'; palletCall: PalletXcmCall }
  | { pallet: 'CumulusXcm'; palletCall: CumulusPalletXcmCall }
  | { pallet: 'MessageQueue'; palletCall: PalletMessageQueueCall }
  | { pallet: 'AssetRegistry'; palletCall: PalletAssetRegistryCall }
  | { pallet: 'Xyk'; palletCall: PalletXykCall }
  | { pallet: 'Duster'; palletCall: PalletDusterCall }
  | { pallet: 'Lbp'; palletCall: PalletLbpCall }
  | { pallet: 'Nft'; palletCall: PalletNftCall }
  | { pallet: 'Marketplace'; palletCall: PalletMarketplaceCall }
  | { pallet: 'TransactionPause'; palletCall: PalletTransactionPauseCall }
  | { pallet: 'Router'; palletCall: PalletRouteExecutorCall }
  | { pallet: 'XykLiquidityMining'; palletCall: PalletXykLiquidityMiningCall }
  | { pallet: 'XykWarehouseLM'; palletCall: PalletLiquidityMiningCall }
  | { pallet: 'Broadcast'; palletCall: PalletBroadcastCall }
  | { pallet: 'EmaOracle'; palletCall: PalletEmaOracleCall }
  | { pallet: 'Currencies'; palletCall: PalletCurrenciesModuleCall }
  | { pallet: 'Tokens'; palletCall: OrmlTokensModuleCall }
  | { pallet: 'OrmlXcm'; palletCall: OrmlXcmModuleCall }
  | { pallet: 'XTokens'; palletCall: OrmlXtokensModuleCall };

export type BasiliskRuntimeRuntimeCallLike =
  | { pallet: 'System'; palletCall: FrameSystemCallLike }
  | { pallet: 'Timestamp'; palletCall: PalletTimestampCallLike }
  | { pallet: 'Balances'; palletCall: PalletBalancesCallLike }
  | { pallet: 'MultiTransactionPayment'; palletCall: PalletTransactionMultiPaymentCallLike }
  | { pallet: 'Treasury'; palletCall: PalletTreasuryCallLike }
  | { pallet: 'Utility'; palletCall: PalletUtilityCallLike }
  | { pallet: 'Democracy'; palletCall: PalletDemocracyCallLike }
  | { pallet: 'TechnicalCommittee'; palletCall: PalletCollectiveCallLike }
  | { pallet: 'Vesting'; palletCall: OrmlVestingModuleCallLike }
  | { pallet: 'Proxy'; palletCall: PalletProxyCallLike }
  | { pallet: 'CollatorSelection'; palletCall: PalletCollatorSelectionCallLike }
  | { pallet: 'Session'; palletCall: PalletSessionCallLike }
  | { pallet: 'Preimage'; palletCall: PalletPreimageCallLike }
  | { pallet: 'Uniques'; palletCall: PalletUniquesCallLike }
  | { pallet: 'Identity'; palletCall: PalletIdentityCallLike }
  | { pallet: 'Multisig'; palletCall: PalletMultisigCallLike }
  | { pallet: 'StateTrieMigration'; palletCall: PalletStateTrieMigrationCallLike }
  | { pallet: 'ConvictionVoting'; palletCall: PalletConvictionVotingCallLike }
  | { pallet: 'Referenda'; palletCall: PalletReferendaCallLike }
  | { pallet: 'Whitelist'; palletCall: PalletWhitelistCallLike }
  | { pallet: 'RelayChainInfo'; palletCall: PalletRelaychainInfoCallLike }
  | { pallet: 'Scheduler'; palletCall: PalletSchedulerCallLike }
  | { pallet: 'ParachainSystem'; palletCall: CumulusPalletParachainSystemCallLike }
  | { pallet: 'ParachainInfo'; palletCall: StagingParachainInfoCallLike }
  | { pallet: 'PolkadotXcm'; palletCall: PalletXcmCallLike }
  | { pallet: 'CumulusXcm'; palletCall: CumulusPalletXcmCallLike }
  | { pallet: 'MessageQueue'; palletCall: PalletMessageQueueCallLike }
  | { pallet: 'AssetRegistry'; palletCall: PalletAssetRegistryCallLike }
  | { pallet: 'Xyk'; palletCall: PalletXykCallLike }
  | { pallet: 'Duster'; palletCall: PalletDusterCallLike }
  | { pallet: 'Lbp'; palletCall: PalletLbpCallLike }
  | { pallet: 'Nft'; palletCall: PalletNftCallLike }
  | { pallet: 'Marketplace'; palletCall: PalletMarketplaceCallLike }
  | { pallet: 'TransactionPause'; palletCall: PalletTransactionPauseCallLike }
  | { pallet: 'Router'; palletCall: PalletRouteExecutorCallLike }
  | { pallet: 'XykLiquidityMining'; palletCall: PalletXykLiquidityMiningCallLike }
  | { pallet: 'XykWarehouseLM'; palletCall: PalletLiquidityMiningCallLike }
  | { pallet: 'Broadcast'; palletCall: PalletBroadcastCallLike }
  | { pallet: 'EmaOracle'; palletCall: PalletEmaOracleCallLike }
  | { pallet: 'Currencies'; palletCall: PalletCurrenciesModuleCallLike }
  | { pallet: 'Tokens'; palletCall: OrmlTokensModuleCallLike }
  | { pallet: 'OrmlXcm'; palletCall: OrmlXcmModuleCallLike }
  | { pallet: 'XTokens'; palletCall: OrmlXtokensModuleCallLike };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type FrameSystemCall =
  /**
   * Make some on-chain remark.
   *
   * Can be executed by every `origin`.
   **/
  | { name: 'Remark'; params: { remark: Bytes } }
  /**
   * Set the number of pages in the WebAssembly environment's heap.
   **/
  | { name: 'SetHeapPages'; params: { pages: bigint } }
  /**
   * Set the new runtime code.
   **/
  | { name: 'SetCode'; params: { code: Bytes } }
  /**
   * Set the new runtime code without doing any checks of the given `code`.
   *
   * Note that runtime upgrades will not run if this is called with a not-increasing spec
   * version!
   **/
  | { name: 'SetCodeWithoutChecks'; params: { code: Bytes } }
  /**
   * Set some items of storage.
   **/
  | { name: 'SetStorage'; params: { items: Array<[Bytes, Bytes]> } }
  /**
   * Kill some items from storage.
   **/
  | { name: 'KillStorage'; params: { keys: Array<Bytes> } }
  /**
   * Kill all storage items with a key that starts with the given prefix.
   *
   * **NOTE:** We rely on the Root origin to provide us the number of subkeys under
   * the prefix we are removing to accurately calculate the weight of this function.
   **/
  | { name: 'KillPrefix'; params: { prefix: Bytes; subkeys: number } }
  /**
   * Make some on-chain remark and emit event.
   **/
  | { name: 'RemarkWithEvent'; params: { remark: Bytes } }
  /**
   * Authorize an upgrade to a given `code_hash` for the runtime. The runtime can be supplied
   * later.
   *
   * This call requires Root origin.
   **/
  | { name: 'AuthorizeUpgrade'; params: { codeHash: H256 } }
  /**
   * Authorize an upgrade to a given `code_hash` for the runtime. The runtime can be supplied
   * later.
   *
   * WARNING: This authorizes an upgrade that will take place without any safety checks, for
   * example that the spec name remains the same and that the version number increases. Not
   * recommended for normal use. Use `authorize_upgrade` instead.
   *
   * This call requires Root origin.
   **/
  | { name: 'AuthorizeUpgradeWithoutChecks'; params: { codeHash: H256 } }
  /**
   * Provide the preimage (runtime binary) `code` for an upgrade that has been authorized.
   *
   * If the authorization required a version check, this call will ensure the spec name
   * remains unchanged and that the spec version has increased.
   *
   * Depending on the runtime's `OnSetCode` configuration, this function may directly apply
   * the new `code` in the same block or attempt to schedule the upgrade.
   *
   * All origins are allowed.
   **/
  | { name: 'ApplyAuthorizedUpgrade'; params: { code: Bytes } };

export type FrameSystemCallLike =
  /**
   * Make some on-chain remark.
   *
   * Can be executed by every `origin`.
   **/
  | { name: 'Remark'; params: { remark: BytesLike } }
  /**
   * Set the number of pages in the WebAssembly environment's heap.
   **/
  | { name: 'SetHeapPages'; params: { pages: bigint } }
  /**
   * Set the new runtime code.
   **/
  | { name: 'SetCode'; params: { code: BytesLike } }
  /**
   * Set the new runtime code without doing any checks of the given `code`.
   *
   * Note that runtime upgrades will not run if this is called with a not-increasing spec
   * version!
   **/
  | { name: 'SetCodeWithoutChecks'; params: { code: BytesLike } }
  /**
   * Set some items of storage.
   **/
  | { name: 'SetStorage'; params: { items: Array<[BytesLike, BytesLike]> } }
  /**
   * Kill some items from storage.
   **/
  | { name: 'KillStorage'; params: { keys: Array<BytesLike> } }
  /**
   * Kill all storage items with a key that starts with the given prefix.
   *
   * **NOTE:** We rely on the Root origin to provide us the number of subkeys under
   * the prefix we are removing to accurately calculate the weight of this function.
   **/
  | { name: 'KillPrefix'; params: { prefix: BytesLike; subkeys: number } }
  /**
   * Make some on-chain remark and emit event.
   **/
  | { name: 'RemarkWithEvent'; params: { remark: BytesLike } }
  /**
   * Authorize an upgrade to a given `code_hash` for the runtime. The runtime can be supplied
   * later.
   *
   * This call requires Root origin.
   **/
  | { name: 'AuthorizeUpgrade'; params: { codeHash: H256 } }
  /**
   * Authorize an upgrade to a given `code_hash` for the runtime. The runtime can be supplied
   * later.
   *
   * WARNING: This authorizes an upgrade that will take place without any safety checks, for
   * example that the spec name remains the same and that the version number increases. Not
   * recommended for normal use. Use `authorize_upgrade` instead.
   *
   * This call requires Root origin.
   **/
  | { name: 'AuthorizeUpgradeWithoutChecks'; params: { codeHash: H256 } }
  /**
   * Provide the preimage (runtime binary) `code` for an upgrade that has been authorized.
   *
   * If the authorization required a version check, this call will ensure the spec name
   * remains unchanged and that the spec version has increased.
   *
   * Depending on the runtime's `OnSetCode` configuration, this function may directly apply
   * the new `code` in the same block or attempt to schedule the upgrade.
   *
   * All origins are allowed.
   **/
  | { name: 'ApplyAuthorizedUpgrade'; params: { code: BytesLike } };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletTimestampCall =
  /**
   * Set the current time.
   *
   * This call should be invoked exactly once per block. It will panic at the finalization
   * phase, if this call hasn't been invoked by that time.
   *
   * The timestamp should be greater than the previous one by the amount specified by
   * [`Config::MinimumPeriod`].
   *
   * The dispatch origin for this call must be _None_.
   *
   * This dispatch class is _Mandatory_ to ensure it gets executed in the block. Be aware
   * that changing the complexity of this call could result exhausting the resources in a
   * block to execute any other calls.
   *
   * ## Complexity
   * - `O(1)` (Note that implementations of `OnTimestampSet` must also be `O(1)`)
   * - 1 storage read and 1 storage mutation (codec `O(1)` because of `DidUpdate::take` in
   * `on_finalize`)
   * - 1 event handler `on_timestamp_set`. Must be `O(1)`.
   **/
  { name: 'Set'; params: { now: bigint } };

export type PalletTimestampCallLike =
  /**
   * Set the current time.
   *
   * This call should be invoked exactly once per block. It will panic at the finalization
   * phase, if this call hasn't been invoked by that time.
   *
   * The timestamp should be greater than the previous one by the amount specified by
   * [`Config::MinimumPeriod`].
   *
   * The dispatch origin for this call must be _None_.
   *
   * This dispatch class is _Mandatory_ to ensure it gets executed in the block. Be aware
   * that changing the complexity of this call could result exhausting the resources in a
   * block to execute any other calls.
   *
   * ## Complexity
   * - `O(1)` (Note that implementations of `OnTimestampSet` must also be `O(1)`)
   * - 1 storage read and 1 storage mutation (codec `O(1)` because of `DidUpdate::take` in
   * `on_finalize`)
   * - 1 event handler `on_timestamp_set`. Must be `O(1)`.
   **/
  { name: 'Set'; params: { now: bigint } };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletBalancesCall =
  /**
   * Transfer some liquid free balance to another account.
   *
   * `transfer_allow_death` will set the `FreeBalance` of the sender and receiver.
   * If the sender's account is below the existential deposit as a result
   * of the transfer, the account will be reaped.
   *
   * The dispatch origin for this call must be `Signed` by the transactor.
   **/
  | { name: 'TransferAllowDeath'; params: { dest: AccountId32; value: bigint } }
  /**
   * Exactly as `transfer_allow_death`, except the origin must be root and the source account
   * may be specified.
   **/
  | { name: 'ForceTransfer'; params: { source: AccountId32; dest: AccountId32; value: bigint } }
  /**
   * Same as the [`transfer_allow_death`] call, but with a check that the transfer will not
   * kill the origin account.
   *
   * 99% of the time you want [`transfer_allow_death`] instead.
   *
   * [`transfer_allow_death`]: struct.Pallet.html#method.transfer
   **/
  | { name: 'TransferKeepAlive'; params: { dest: AccountId32; value: bigint } }
  /**
   * Transfer the entire transferable balance from the caller account.
   *
   * NOTE: This function only attempts to transfer _transferable_ balances. This means that
   * any locked, reserved, or existential deposits (when `keep_alive` is `true`), will not be
   * transferred by this function. To ensure that this function results in a killed account,
   * you might need to prepare the account by removing any reference counters, storage
   * deposits, etc...
   *
   * The dispatch origin of this call must be Signed.
   *
   * - `dest`: The recipient of the transfer.
   * - `keep_alive`: A boolean to determine if the `transfer_all` operation should send all
   * of the funds the account has, causing the sender account to be killed (false), or
   * transfer everything except at least the existential deposit, which will guarantee to
   * keep the sender account alive (true).
   **/
  | { name: 'TransferAll'; params: { dest: AccountId32; keepAlive: boolean } }
  /**
   * Unreserve some balance from a user by force.
   *
   * Can only be called by ROOT.
   **/
  | { name: 'ForceUnreserve'; params: { who: AccountId32; amount: bigint } }
  /**
   * Upgrade a specified account.
   *
   * - `origin`: Must be `Signed`.
   * - `who`: The account to be upgraded.
   *
   * This will waive the transaction fee if at least all but 10% of the accounts needed to
   * be upgraded. (We let some not have to be upgraded just in order to allow for the
   * possibility of churn).
   **/
  | { name: 'UpgradeAccounts'; params: { who: Array<AccountId32> } }
  /**
   * Set the regular balance of a given account.
   *
   * The dispatch origin for this call is `root`.
   **/
  | { name: 'ForceSetBalance'; params: { who: AccountId32; newFree: bigint } }
  /**
   * Adjust the total issuance in a saturating way.
   *
   * Can only be called by root and always needs a positive `delta`.
   *
   * # Example
   **/
  | { name: 'ForceAdjustTotalIssuance'; params: { direction: PalletBalancesAdjustmentDirection; delta: bigint } }
  /**
   * Burn the specified liquid free balance from the origin account.
   *
   * If the origin's account ends up below the existential deposit as a result
   * of the burn and `keep_alive` is false, the account will be reaped.
   *
   * Unlike sending funds to a _burn_ address, which merely makes the funds inaccessible,
   * this `burn` operation will reduce total issuance by the amount _burned_.
   **/
  | { name: 'Burn'; params: { value: bigint; keepAlive: boolean } };

export type PalletBalancesCallLike =
  /**
   * Transfer some liquid free balance to another account.
   *
   * `transfer_allow_death` will set the `FreeBalance` of the sender and receiver.
   * If the sender's account is below the existential deposit as a result
   * of the transfer, the account will be reaped.
   *
   * The dispatch origin for this call must be `Signed` by the transactor.
   **/
  | { name: 'TransferAllowDeath'; params: { dest: AccountId32Like; value: bigint } }
  /**
   * Exactly as `transfer_allow_death`, except the origin must be root and the source account
   * may be specified.
   **/
  | { name: 'ForceTransfer'; params: { source: AccountId32Like; dest: AccountId32Like; value: bigint } }
  /**
   * Same as the [`transfer_allow_death`] call, but with a check that the transfer will not
   * kill the origin account.
   *
   * 99% of the time you want [`transfer_allow_death`] instead.
   *
   * [`transfer_allow_death`]: struct.Pallet.html#method.transfer
   **/
  | { name: 'TransferKeepAlive'; params: { dest: AccountId32Like; value: bigint } }
  /**
   * Transfer the entire transferable balance from the caller account.
   *
   * NOTE: This function only attempts to transfer _transferable_ balances. This means that
   * any locked, reserved, or existential deposits (when `keep_alive` is `true`), will not be
   * transferred by this function. To ensure that this function results in a killed account,
   * you might need to prepare the account by removing any reference counters, storage
   * deposits, etc...
   *
   * The dispatch origin of this call must be Signed.
   *
   * - `dest`: The recipient of the transfer.
   * - `keep_alive`: A boolean to determine if the `transfer_all` operation should send all
   * of the funds the account has, causing the sender account to be killed (false), or
   * transfer everything except at least the existential deposit, which will guarantee to
   * keep the sender account alive (true).
   **/
  | { name: 'TransferAll'; params: { dest: AccountId32Like; keepAlive: boolean } }
  /**
   * Unreserve some balance from a user by force.
   *
   * Can only be called by ROOT.
   **/
  | { name: 'ForceUnreserve'; params: { who: AccountId32Like; amount: bigint } }
  /**
   * Upgrade a specified account.
   *
   * - `origin`: Must be `Signed`.
   * - `who`: The account to be upgraded.
   *
   * This will waive the transaction fee if at least all but 10% of the accounts needed to
   * be upgraded. (We let some not have to be upgraded just in order to allow for the
   * possibility of churn).
   **/
  | { name: 'UpgradeAccounts'; params: { who: Array<AccountId32Like> } }
  /**
   * Set the regular balance of a given account.
   *
   * The dispatch origin for this call is `root`.
   **/
  | { name: 'ForceSetBalance'; params: { who: AccountId32Like; newFree: bigint } }
  /**
   * Adjust the total issuance in a saturating way.
   *
   * Can only be called by root and always needs a positive `delta`.
   *
   * # Example
   **/
  | { name: 'ForceAdjustTotalIssuance'; params: { direction: PalletBalancesAdjustmentDirection; delta: bigint } }
  /**
   * Burn the specified liquid free balance from the origin account.
   *
   * If the origin's account ends up below the existential deposit as a result
   * of the burn and `keep_alive` is false, the account will be reaped.
   *
   * Unlike sending funds to a _burn_ address, which merely makes the funds inaccessible,
   * this `burn` operation will reduce total issuance by the amount _burned_.
   **/
  | { name: 'Burn'; params: { value: bigint; keepAlive: boolean } };

export type PalletBalancesAdjustmentDirection = 'Increase' | 'Decrease';

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletTransactionMultiPaymentCall =
  /**
   * Set selected currency for given account.
   *
   * This allows to set a currency for an account in which all transaction fees will be paid.
   * Account balance cannot be zero.
   *
   * In case of sufficient asset, the chosen currency must be in the list of accepted currencies
   * In case of insufficient asset, the chosen currency must have a XYK pool with DOT
   *
   * When currency is set, fixed fee is withdrawn from the account to pay for the currency change
   *
   * EVM accounts are now allowed to change thier payment currency.
   *
   * Emits `CurrencySet` event when successful.
   **/
  | { name: 'SetCurrency'; params: { currency: number } }
  /**
   * Add a currency to the list of accepted currencies.
   *
   * Only member can perform this action.
   *
   * Currency must not be already accepted. Core asset id cannot be explicitly added.
   *
   * Emits `CurrencyAdded` event when successful.
   **/
  | { name: 'AddCurrency'; params: { currency: number; price: FixedU128 } }
  /**
   * Remove currency from the list of supported currencies
   * Only selected members can perform this action
   *
   * Core asset cannot be removed.
   *
   * Emits `CurrencyRemoved` when successful.
   **/
  | { name: 'RemoveCurrency'; params: { currency: number } }
  /**
   * Reset currency of the specified account to HDX.
   * If the account is EVM account, the payment currency is reset to WETH.
   * Only selected members can perform this action.
   *
   * Emits `CurrencySet` when successful.
   **/
  | { name: 'ResetPaymentCurrency'; params: { accountId: AccountId32 } }
  /**
   * Dispatch EVM permit.
   * The main purpose of this function is to allow EVM accounts to pay for the transaction fee in non-native currency
   * by allowing them to self-dispatch pre-signed permit.
   * The EVM fee is paid in the currency set for the account.
   **/
  | {
      name: 'DispatchPermit';
      params: {
        from: H160;
        to: H160;
        value: U256;
        data: Bytes;
        gasLimit: bigint;
        deadline: U256;
        v: number;
        r: H256;
        s: H256;
      };
    };

export type PalletTransactionMultiPaymentCallLike =
  /**
   * Set selected currency for given account.
   *
   * This allows to set a currency for an account in which all transaction fees will be paid.
   * Account balance cannot be zero.
   *
   * In case of sufficient asset, the chosen currency must be in the list of accepted currencies
   * In case of insufficient asset, the chosen currency must have a XYK pool with DOT
   *
   * When currency is set, fixed fee is withdrawn from the account to pay for the currency change
   *
   * EVM accounts are now allowed to change thier payment currency.
   *
   * Emits `CurrencySet` event when successful.
   **/
  | { name: 'SetCurrency'; params: { currency: number } }
  /**
   * Add a currency to the list of accepted currencies.
   *
   * Only member can perform this action.
   *
   * Currency must not be already accepted. Core asset id cannot be explicitly added.
   *
   * Emits `CurrencyAdded` event when successful.
   **/
  | { name: 'AddCurrency'; params: { currency: number; price: FixedU128 } }
  /**
   * Remove currency from the list of supported currencies
   * Only selected members can perform this action
   *
   * Core asset cannot be removed.
   *
   * Emits `CurrencyRemoved` when successful.
   **/
  | { name: 'RemoveCurrency'; params: { currency: number } }
  /**
   * Reset currency of the specified account to HDX.
   * If the account is EVM account, the payment currency is reset to WETH.
   * Only selected members can perform this action.
   *
   * Emits `CurrencySet` when successful.
   **/
  | { name: 'ResetPaymentCurrency'; params: { accountId: AccountId32Like } }
  /**
   * Dispatch EVM permit.
   * The main purpose of this function is to allow EVM accounts to pay for the transaction fee in non-native currency
   * by allowing them to self-dispatch pre-signed permit.
   * The EVM fee is paid in the currency set for the account.
   **/
  | {
      name: 'DispatchPermit';
      params: {
        from: H160;
        to: H160;
        value: U256;
        data: BytesLike;
        gasLimit: bigint;
        deadline: U256;
        v: number;
        r: H256;
        s: H256;
      };
    };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletTreasuryCall =
  /**
   * Propose and approve a spend of treasury funds.
   *
   * ## Dispatch Origin
   *
   * Must be [`Config::SpendOrigin`] with the `Success` value being at least `amount`.
   *
   * ### Details
   * NOTE: For record-keeping purposes, the proposer is deemed to be equivalent to the
   * beneficiary.
   *
   * ### Parameters
   * - `amount`: The amount to be transferred from the treasury to the `beneficiary`.
   * - `beneficiary`: The destination account for the transfer.
   *
   * ## Events
   *
   * Emits [`Event::SpendApproved`] if successful.
   **/
  | { name: 'SpendLocal'; params: { amount: bigint; beneficiary: AccountId32 } }
  /**
   * Force a previously approved proposal to be removed from the approval queue.
   *
   * ## Dispatch Origin
   *
   * Must be [`Config::RejectOrigin`].
   *
   * ## Details
   *
   * The original deposit will no longer be returned.
   *
   * ### Parameters
   * - `proposal_id`: The index of a proposal
   *
   * ### Complexity
   * - O(A) where `A` is the number of approvals
   *
   * ### Errors
   * - [`Error::ProposalNotApproved`]: The `proposal_id` supplied was not found in the
   * approval queue, i.e., the proposal has not been approved. This could also mean the
   * proposal does not exist altogether, thus there is no way it would have been approved
   * in the first place.
   **/
  | { name: 'RemoveApproval'; params: { proposalId: number } }
  /**
   * Propose and approve a spend of treasury funds.
   *
   * ## Dispatch Origin
   *
   * Must be [`Config::SpendOrigin`] with the `Success` value being at least
   * `amount` of `asset_kind` in the native asset. The amount of `asset_kind` is converted
   * for assertion using the [`Config::BalanceConverter`].
   *
   * ## Details
   *
   * Create an approved spend for transferring a specific `amount` of `asset_kind` to a
   * designated beneficiary. The spend must be claimed using the `payout` dispatchable within
   * the [`Config::PayoutPeriod`].
   *
   * ### Parameters
   * - `asset_kind`: An indicator of the specific asset class to be spent.
   * - `amount`: The amount to be transferred from the treasury to the `beneficiary`.
   * - `beneficiary`: The beneficiary of the spend.
   * - `valid_from`: The block number from which the spend can be claimed. It can refer to
   * the past if the resulting spend has not yet expired according to the
   * [`Config::PayoutPeriod`]. If `None`, the spend can be claimed immediately after
   * approval.
   *
   * ## Events
   *
   * Emits [`Event::AssetSpendApproved`] if successful.
   **/
  | {
      name: 'Spend';
      params: { assetKind: []; amount: bigint; beneficiary: AccountId32; validFrom?: number | undefined };
    }
  /**
   * Claim a spend.
   *
   * ## Dispatch Origin
   *
   * Must be signed
   *
   * ## Details
   *
   * Spends must be claimed within some temporal bounds. A spend may be claimed within one
   * [`Config::PayoutPeriod`] from the `valid_from` block.
   * In case of a payout failure, the spend status must be updated with the `check_status`
   * dispatchable before retrying with the current function.
   *
   * ### Parameters
   * - `index`: The spend index.
   *
   * ## Events
   *
   * Emits [`Event::Paid`] if successful.
   **/
  | { name: 'Payout'; params: { index: number } }
  /**
   * Check the status of the spend and remove it from the storage if processed.
   *
   * ## Dispatch Origin
   *
   * Must be signed.
   *
   * ## Details
   *
   * The status check is a prerequisite for retrying a failed payout.
   * If a spend has either succeeded or expired, it is removed from the storage by this
   * function. In such instances, transaction fees are refunded.
   *
   * ### Parameters
   * - `index`: The spend index.
   *
   * ## Events
   *
   * Emits [`Event::PaymentFailed`] if the spend payout has failed.
   * Emits [`Event::SpendProcessed`] if the spend payout has succeed.
   **/
  | { name: 'CheckStatus'; params: { index: number } }
  /**
   * Void previously approved spend.
   *
   * ## Dispatch Origin
   *
   * Must be [`Config::RejectOrigin`].
   *
   * ## Details
   *
   * A spend void is only possible if the payout has not been attempted yet.
   *
   * ### Parameters
   * - `index`: The spend index.
   *
   * ## Events
   *
   * Emits [`Event::AssetSpendVoided`] if successful.
   **/
  | { name: 'VoidSpend'; params: { index: number } };

export type PalletTreasuryCallLike =
  /**
   * Propose and approve a spend of treasury funds.
   *
   * ## Dispatch Origin
   *
   * Must be [`Config::SpendOrigin`] with the `Success` value being at least `amount`.
   *
   * ### Details
   * NOTE: For record-keeping purposes, the proposer is deemed to be equivalent to the
   * beneficiary.
   *
   * ### Parameters
   * - `amount`: The amount to be transferred from the treasury to the `beneficiary`.
   * - `beneficiary`: The destination account for the transfer.
   *
   * ## Events
   *
   * Emits [`Event::SpendApproved`] if successful.
   **/
  | { name: 'SpendLocal'; params: { amount: bigint; beneficiary: AccountId32Like } }
  /**
   * Force a previously approved proposal to be removed from the approval queue.
   *
   * ## Dispatch Origin
   *
   * Must be [`Config::RejectOrigin`].
   *
   * ## Details
   *
   * The original deposit will no longer be returned.
   *
   * ### Parameters
   * - `proposal_id`: The index of a proposal
   *
   * ### Complexity
   * - O(A) where `A` is the number of approvals
   *
   * ### Errors
   * - [`Error::ProposalNotApproved`]: The `proposal_id` supplied was not found in the
   * approval queue, i.e., the proposal has not been approved. This could also mean the
   * proposal does not exist altogether, thus there is no way it would have been approved
   * in the first place.
   **/
  | { name: 'RemoveApproval'; params: { proposalId: number } }
  /**
   * Propose and approve a spend of treasury funds.
   *
   * ## Dispatch Origin
   *
   * Must be [`Config::SpendOrigin`] with the `Success` value being at least
   * `amount` of `asset_kind` in the native asset. The amount of `asset_kind` is converted
   * for assertion using the [`Config::BalanceConverter`].
   *
   * ## Details
   *
   * Create an approved spend for transferring a specific `amount` of `asset_kind` to a
   * designated beneficiary. The spend must be claimed using the `payout` dispatchable within
   * the [`Config::PayoutPeriod`].
   *
   * ### Parameters
   * - `asset_kind`: An indicator of the specific asset class to be spent.
   * - `amount`: The amount to be transferred from the treasury to the `beneficiary`.
   * - `beneficiary`: The beneficiary of the spend.
   * - `valid_from`: The block number from which the spend can be claimed. It can refer to
   * the past if the resulting spend has not yet expired according to the
   * [`Config::PayoutPeriod`]. If `None`, the spend can be claimed immediately after
   * approval.
   *
   * ## Events
   *
   * Emits [`Event::AssetSpendApproved`] if successful.
   **/
  | {
      name: 'Spend';
      params: { assetKind: []; amount: bigint; beneficiary: AccountId32Like; validFrom?: number | undefined };
    }
  /**
   * Claim a spend.
   *
   * ## Dispatch Origin
   *
   * Must be signed
   *
   * ## Details
   *
   * Spends must be claimed within some temporal bounds. A spend may be claimed within one
   * [`Config::PayoutPeriod`] from the `valid_from` block.
   * In case of a payout failure, the spend status must be updated with the `check_status`
   * dispatchable before retrying with the current function.
   *
   * ### Parameters
   * - `index`: The spend index.
   *
   * ## Events
   *
   * Emits [`Event::Paid`] if successful.
   **/
  | { name: 'Payout'; params: { index: number } }
  /**
   * Check the status of the spend and remove it from the storage if processed.
   *
   * ## Dispatch Origin
   *
   * Must be signed.
   *
   * ## Details
   *
   * The status check is a prerequisite for retrying a failed payout.
   * If a spend has either succeeded or expired, it is removed from the storage by this
   * function. In such instances, transaction fees are refunded.
   *
   * ### Parameters
   * - `index`: The spend index.
   *
   * ## Events
   *
   * Emits [`Event::PaymentFailed`] if the spend payout has failed.
   * Emits [`Event::SpendProcessed`] if the spend payout has succeed.
   **/
  | { name: 'CheckStatus'; params: { index: number } }
  /**
   * Void previously approved spend.
   *
   * ## Dispatch Origin
   *
   * Must be [`Config::RejectOrigin`].
   *
   * ## Details
   *
   * A spend void is only possible if the payout has not been attempted yet.
   *
   * ### Parameters
   * - `index`: The spend index.
   *
   * ## Events
   *
   * Emits [`Event::AssetSpendVoided`] if successful.
   **/
  | { name: 'VoidSpend'; params: { index: number } };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletUtilityCall =
  /**
   * Send a batch of dispatch calls.
   *
   * May be called from any origin except `None`.
   *
   * - `calls`: The calls to be dispatched from the same origin. The number of call must not
   * exceed the constant: `batched_calls_limit` (available in constant metadata).
   *
   * If origin is root then the calls are dispatched without checking origin filter. (This
   * includes bypassing `frame_system::Config::BaseCallFilter`).
   *
   * ## Complexity
   * - O(C) where C is the number of calls to be batched.
   *
   * This will return `Ok` in all circumstances. To determine the success of the batch, an
   * event is deposited. If a call failed and the batch was interrupted, then the
   * `BatchInterrupted` event is deposited, along with the number of successful calls made
   * and the error of the failed call. If all were successful, then the `BatchCompleted`
   * event is deposited.
   **/
  | { name: 'Batch'; params: { calls: Array<BasiliskRuntimeRuntimeCall> } }
  /**
   * Send a call through an indexed pseudonym of the sender.
   *
   * Filter from origin are passed along. The call will be dispatched with an origin which
   * use the same filter as the origin of this call.
   *
   * NOTE: If you need to ensure that any account-based filtering is not honored (i.e.
   * because you expect `proxy` to have been used prior in the call stack and you do not want
   * the call restrictions to apply to any sub-accounts), then use `as_multi_threshold_1`
   * in the Multisig pallet instead.
   *
   * NOTE: Prior to version *12, this was called `as_limited_sub`.
   *
   * The dispatch origin for this call must be _Signed_.
   **/
  | { name: 'AsDerivative'; params: { index: number; call: BasiliskRuntimeRuntimeCall } }
  /**
   * Send a batch of dispatch calls and atomically execute them.
   * The whole transaction will rollback and fail if any of the calls failed.
   *
   * May be called from any origin except `None`.
   *
   * - `calls`: The calls to be dispatched from the same origin. The number of call must not
   * exceed the constant: `batched_calls_limit` (available in constant metadata).
   *
   * If origin is root then the calls are dispatched without checking origin filter. (This
   * includes bypassing `frame_system::Config::BaseCallFilter`).
   *
   * ## Complexity
   * - O(C) where C is the number of calls to be batched.
   **/
  | { name: 'BatchAll'; params: { calls: Array<BasiliskRuntimeRuntimeCall> } }
  /**
   * Dispatches a function call with a provided origin.
   *
   * The dispatch origin for this call must be _Root_.
   *
   * ## Complexity
   * - O(1).
   **/
  | { name: 'DispatchAs'; params: { asOrigin: BasiliskRuntimeOriginCaller; call: BasiliskRuntimeRuntimeCall } }
  /**
   * Send a batch of dispatch calls.
   * Unlike `batch`, it allows errors and won't interrupt.
   *
   * May be called from any origin except `None`.
   *
   * - `calls`: The calls to be dispatched from the same origin. The number of call must not
   * exceed the constant: `batched_calls_limit` (available in constant metadata).
   *
   * If origin is root then the calls are dispatch without checking origin filter. (This
   * includes bypassing `frame_system::Config::BaseCallFilter`).
   *
   * ## Complexity
   * - O(C) where C is the number of calls to be batched.
   **/
  | { name: 'ForceBatch'; params: { calls: Array<BasiliskRuntimeRuntimeCall> } }
  /**
   * Dispatch a function call with a specified weight.
   *
   * This function does not check the weight of the call, and instead allows the
   * Root origin to specify the weight of the call.
   *
   * The dispatch origin for this call must be _Root_.
   **/
  | { name: 'WithWeight'; params: { call: BasiliskRuntimeRuntimeCall; weight: SpWeightsWeightV2Weight } };

export type PalletUtilityCallLike =
  /**
   * Send a batch of dispatch calls.
   *
   * May be called from any origin except `None`.
   *
   * - `calls`: The calls to be dispatched from the same origin. The number of call must not
   * exceed the constant: `batched_calls_limit` (available in constant metadata).
   *
   * If origin is root then the calls are dispatched without checking origin filter. (This
   * includes bypassing `frame_system::Config::BaseCallFilter`).
   *
   * ## Complexity
   * - O(C) where C is the number of calls to be batched.
   *
   * This will return `Ok` in all circumstances. To determine the success of the batch, an
   * event is deposited. If a call failed and the batch was interrupted, then the
   * `BatchInterrupted` event is deposited, along with the number of successful calls made
   * and the error of the failed call. If all were successful, then the `BatchCompleted`
   * event is deposited.
   **/
  | { name: 'Batch'; params: { calls: Array<BasiliskRuntimeRuntimeCallLike> } }
  /**
   * Send a call through an indexed pseudonym of the sender.
   *
   * Filter from origin are passed along. The call will be dispatched with an origin which
   * use the same filter as the origin of this call.
   *
   * NOTE: If you need to ensure that any account-based filtering is not honored (i.e.
   * because you expect `proxy` to have been used prior in the call stack and you do not want
   * the call restrictions to apply to any sub-accounts), then use `as_multi_threshold_1`
   * in the Multisig pallet instead.
   *
   * NOTE: Prior to version *12, this was called `as_limited_sub`.
   *
   * The dispatch origin for this call must be _Signed_.
   **/
  | { name: 'AsDerivative'; params: { index: number; call: BasiliskRuntimeRuntimeCallLike } }
  /**
   * Send a batch of dispatch calls and atomically execute them.
   * The whole transaction will rollback and fail if any of the calls failed.
   *
   * May be called from any origin except `None`.
   *
   * - `calls`: The calls to be dispatched from the same origin. The number of call must not
   * exceed the constant: `batched_calls_limit` (available in constant metadata).
   *
   * If origin is root then the calls are dispatched without checking origin filter. (This
   * includes bypassing `frame_system::Config::BaseCallFilter`).
   *
   * ## Complexity
   * - O(C) where C is the number of calls to be batched.
   **/
  | { name: 'BatchAll'; params: { calls: Array<BasiliskRuntimeRuntimeCallLike> } }
  /**
   * Dispatches a function call with a provided origin.
   *
   * The dispatch origin for this call must be _Root_.
   *
   * ## Complexity
   * - O(1).
   **/
  | { name: 'DispatchAs'; params: { asOrigin: BasiliskRuntimeOriginCaller; call: BasiliskRuntimeRuntimeCallLike } }
  /**
   * Send a batch of dispatch calls.
   * Unlike `batch`, it allows errors and won't interrupt.
   *
   * May be called from any origin except `None`.
   *
   * - `calls`: The calls to be dispatched from the same origin. The number of call must not
   * exceed the constant: `batched_calls_limit` (available in constant metadata).
   *
   * If origin is root then the calls are dispatch without checking origin filter. (This
   * includes bypassing `frame_system::Config::BaseCallFilter`).
   *
   * ## Complexity
   * - O(C) where C is the number of calls to be batched.
   **/
  | { name: 'ForceBatch'; params: { calls: Array<BasiliskRuntimeRuntimeCallLike> } }
  /**
   * Dispatch a function call with a specified weight.
   *
   * This function does not check the weight of the call, and instead allows the
   * Root origin to specify the weight of the call.
   *
   * The dispatch origin for this call must be _Root_.
   **/
  | { name: 'WithWeight'; params: { call: BasiliskRuntimeRuntimeCallLike; weight: SpWeightsWeightV2Weight } };

export type BasiliskRuntimeOriginCaller =
  | { type: 'System'; value: FrameSupportDispatchRawOrigin }
  | { type: 'TechnicalCommittee'; value: PalletCollectiveRawOrigin }
  | { type: 'Origins'; value: BasiliskRuntimeGovernanceOriginsPalletCustomOriginsOrigin }
  | { type: 'PolkadotXcm'; value: PalletXcmOrigin }
  | { type: 'CumulusXcm'; value: CumulusPalletXcmOrigin }
  | { type: 'Void'; value: SpCoreVoid };

export type FrameSupportDispatchRawOrigin =
  | { type: 'Root' }
  | { type: 'Signed'; value: AccountId32 }
  | { type: 'None' };

export type PalletCollectiveRawOrigin =
  | { type: 'Members'; value: [number, number] }
  | { type: 'Member'; value: AccountId32 }
  | { type: 'Phantom' };

export type BasiliskRuntimeGovernanceOriginsPalletCustomOriginsOrigin =
  | 'WhitelistedCaller'
  | 'ReferendumCanceller'
  | 'ReferendumKiller'
  | 'GeneralAdmin'
  | 'Treasurer'
  | 'Spender'
  | 'Tipper';

export type PalletXcmOrigin =
  | { type: 'Xcm'; value: StagingXcmV4Location }
  | { type: 'Response'; value: StagingXcmV4Location };

export type StagingXcmV4Location = { parents: number; interior: StagingXcmV4Junctions };

export type StagingXcmV4Junctions =
  | { type: 'Here' }
  | { type: 'X1'; value: FixedArray<StagingXcmV4Junction, 1> }
  | { type: 'X2'; value: FixedArray<StagingXcmV4Junction, 2> }
  | { type: 'X3'; value: FixedArray<StagingXcmV4Junction, 3> }
  | { type: 'X4'; value: FixedArray<StagingXcmV4Junction, 4> }
  | { type: 'X5'; value: FixedArray<StagingXcmV4Junction, 5> }
  | { type: 'X6'; value: FixedArray<StagingXcmV4Junction, 6> }
  | { type: 'X7'; value: FixedArray<StagingXcmV4Junction, 7> }
  | { type: 'X8'; value: FixedArray<StagingXcmV4Junction, 8> };

export type StagingXcmV4Junction =
  | { type: 'Parachain'; value: number }
  | { type: 'AccountId32'; value: { network?: StagingXcmV4JunctionNetworkId | undefined; id: FixedBytes<32> } }
  | { type: 'AccountIndex64'; value: { network?: StagingXcmV4JunctionNetworkId | undefined; index: bigint } }
  | { type: 'AccountKey20'; value: { network?: StagingXcmV4JunctionNetworkId | undefined; key: FixedBytes<20> } }
  | { type: 'PalletInstance'; value: number }
  | { type: 'GeneralIndex'; value: bigint }
  | { type: 'GeneralKey'; value: { length: number; data: FixedBytes<32> } }
  | { type: 'OnlyChild' }
  | { type: 'Plurality'; value: { id: XcmV3JunctionBodyId; part: XcmV3JunctionBodyPart } }
  | { type: 'GlobalConsensus'; value: StagingXcmV4JunctionNetworkId };

export type StagingXcmV4JunctionNetworkId =
  | { type: 'ByGenesis'; value: FixedBytes<32> }
  | { type: 'ByFork'; value: { blockNumber: bigint; blockHash: FixedBytes<32> } }
  | { type: 'Polkadot' }
  | { type: 'Kusama' }
  | { type: 'Westend' }
  | { type: 'Rococo' }
  | { type: 'Wococo' }
  | { type: 'Ethereum'; value: { chainId: bigint } }
  | { type: 'BitcoinCore' }
  | { type: 'BitcoinCash' }
  | { type: 'PolkadotBulletin' };

export type XcmV3JunctionBodyId =
  | { type: 'Unit' }
  | { type: 'Moniker'; value: FixedBytes<4> }
  | { type: 'Index'; value: number }
  | { type: 'Executive' }
  | { type: 'Technical' }
  | { type: 'Legislative' }
  | { type: 'Judicial' }
  | { type: 'Defense' }
  | { type: 'Administration' }
  | { type: 'Treasury' };

export type XcmV3JunctionBodyPart =
  | { type: 'Voice' }
  | { type: 'Members'; value: { count: number } }
  | { type: 'Fraction'; value: { nom: number; denom: number } }
  | { type: 'AtLeastProportion'; value: { nom: number; denom: number } }
  | { type: 'MoreThanProportion'; value: { nom: number; denom: number } };

export type CumulusPalletXcmOrigin =
  | { type: 'Relay' }
  | { type: 'SiblingParachain'; value: PolkadotParachainPrimitivesPrimitivesId };

export type PolkadotParachainPrimitivesPrimitivesId = number;

export type SpCoreVoid = null;

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletDemocracyCall =
  /**
   * Propose a sensitive action to be taken.
   *
   * The dispatch origin of this call must be _Signed_ and the sender must
   * have funds to cover the deposit.
   *
   * - `proposal_hash`: The hash of the proposal preimage.
   * - `value`: The amount of deposit (must be at least `MinimumDeposit`).
   *
   * Emits `Proposed`.
   **/
  | { name: 'Propose'; params: { proposal: FrameSupportPreimagesBounded; value: bigint } }
  /**
   * Signals agreement with a particular proposal.
   *
   * The dispatch origin of this call must be _Signed_ and the sender
   * must have funds to cover the deposit, equal to the original deposit.
   *
   * - `proposal`: The index of the proposal to second.
   **/
  | { name: 'Second'; params: { proposal: number } }
  /**
   * Vote in a referendum. If `vote.is_aye()`, the vote is to enact the proposal;
   * otherwise it is a vote to keep the status quo.
   *
   * The dispatch origin of this call must be _Signed_.
   *
   * - `ref_index`: The index of the referendum to vote for.
   * - `vote`: The vote configuration.
   **/
  | { name: 'Vote'; params: { refIndex: number; vote: PalletDemocracyVoteAccountVote } }
  /**
   * Schedule an emergency cancellation of a referendum. Cannot happen twice to the same
   * referendum.
   *
   * The dispatch origin of this call must be `CancellationOrigin`.
   *
   * -`ref_index`: The index of the referendum to cancel.
   *
   * Weight: `O(1)`.
   **/
  | { name: 'EmergencyCancel'; params: { refIndex: number } }
  /**
   * Schedule a referendum to be tabled once it is legal to schedule an external
   * referendum.
   *
   * The dispatch origin of this call must be `ExternalOrigin`.
   *
   * - `proposal_hash`: The preimage hash of the proposal.
   **/
  | { name: 'ExternalPropose'; params: { proposal: FrameSupportPreimagesBounded } }
  /**
   * Schedule a majority-carries referendum to be tabled next once it is legal to schedule
   * an external referendum.
   *
   * The dispatch of this call must be `ExternalMajorityOrigin`.
   *
   * - `proposal_hash`: The preimage hash of the proposal.
   *
   * Unlike `external_propose`, blacklisting has no effect on this and it may replace a
   * pre-scheduled `external_propose` call.
   *
   * Weight: `O(1)`
   **/
  | { name: 'ExternalProposeMajority'; params: { proposal: FrameSupportPreimagesBounded } }
  /**
   * Schedule a negative-turnout-bias referendum to be tabled next once it is legal to
   * schedule an external referendum.
   *
   * The dispatch of this call must be `ExternalDefaultOrigin`.
   *
   * - `proposal_hash`: The preimage hash of the proposal.
   *
   * Unlike `external_propose`, blacklisting has no effect on this and it may replace a
   * pre-scheduled `external_propose` call.
   *
   * Weight: `O(1)`
   **/
  | { name: 'ExternalProposeDefault'; params: { proposal: FrameSupportPreimagesBounded } }
  /**
   * Schedule the currently externally-proposed majority-carries referendum to be tabled
   * immediately. If there is no externally-proposed referendum currently, or if there is one
   * but it is not a majority-carries referendum then it fails.
   *
   * The dispatch of this call must be `FastTrackOrigin`.
   *
   * - `proposal_hash`: The hash of the current external proposal.
   * - `voting_period`: The period that is allowed for voting on this proposal. Increased to
   * Must be always greater than zero.
   * For `FastTrackOrigin` must be equal or greater than `FastTrackVotingPeriod`.
   * - `delay`: The number of block after voting has ended in approval and this should be
   * enacted. This doesn't have a minimum amount.
   *
   * Emits `Started`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'FastTrack'; params: { proposalHash: H256; votingPeriod: number; delay: number } }
  /**
   * Veto and blacklist the external proposal hash.
   *
   * The dispatch origin of this call must be `VetoOrigin`.
   *
   * - `proposal_hash`: The preimage hash of the proposal to veto and blacklist.
   *
   * Emits `Vetoed`.
   *
   * Weight: `O(V + log(V))` where V is number of `existing vetoers`
   **/
  | { name: 'VetoExternal'; params: { proposalHash: H256 } }
  /**
   * Remove a referendum.
   *
   * The dispatch origin of this call must be _Root_.
   *
   * - `ref_index`: The index of the referendum to cancel.
   *
   * # Weight: `O(1)`.
   **/
  | { name: 'CancelReferendum'; params: { refIndex: number } }
  /**
   * Delegate the voting power (with some given conviction) of the sending account.
   *
   * The balance delegated is locked for as long as it's delegated, and thereafter for the
   * time appropriate for the conviction's lock period.
   *
   * The dispatch origin of this call must be _Signed_, and the signing account must either:
   * - be delegating already; or
   * - have no voting activity (if there is, then it will need to be removed/consolidated
   * through `reap_vote` or `unvote`).
   *
   * - `to`: The account whose voting the `target` account's voting power will follow.
   * - `conviction`: The conviction that will be attached to the delegated votes. When the
   * account is undelegated, the funds will be locked for the corresponding period.
   * - `balance`: The amount of the account's balance to be used in delegating. This must not
   * be more than the account's current balance.
   *
   * Emits `Delegated`.
   *
   * Weight: `O(R)` where R is the number of referendums the voter delegating to has
   * voted on. Weight is charged as if maximum votes.
   **/
  | { name: 'Delegate'; params: { to: AccountId32; conviction: PalletDemocracyConviction; balance: bigint } }
  /**
   * Undelegate the voting power of the sending account.
   *
   * Tokens may be unlocked following once an amount of time consistent with the lock period
   * of the conviction with which the delegation was issued.
   *
   * The dispatch origin of this call must be _Signed_ and the signing account must be
   * currently delegating.
   *
   * Emits `Undelegated`.
   *
   * Weight: `O(R)` where R is the number of referendums the voter delegating to has
   * voted on. Weight is charged as if maximum votes.
   **/
  | { name: 'Undelegate' }
  /**
   * Clears all public proposals.
   *
   * The dispatch origin of this call must be _Root_.
   *
   * Weight: `O(1)`.
   **/
  | { name: 'ClearPublicProposals' }
  /**
   * Unlock tokens that have an expired lock.
   *
   * The dispatch origin of this call must be _Signed_.
   *
   * - `target`: The account to remove the lock on.
   *
   * Weight: `O(R)` with R number of vote of target.
   **/
  | { name: 'Unlock'; params: { target: AccountId32 } }
  /**
   * Remove a vote for a referendum.
   *
   * If:
   * - the referendum was cancelled, or
   * - the referendum is ongoing, or
   * - the referendum has ended such that
   * - the vote of the account was in opposition to the result; or
   * - there was no conviction to the account's vote; or
   * - the account made a split vote
   * ...then the vote is removed cleanly and a following call to `unlock` may result in more
   * funds being available.
   *
   * If, however, the referendum has ended and:
   * - it finished corresponding to the vote of the account, and
   * - the account made a standard vote with conviction, and
   * - the lock period of the conviction is not over
   * ...then the lock will be aggregated into the overall account's lock, which may involve
   * *overlocking* (where the two locks are combined into a single lock that is the maximum
   * of both the amount locked and the time is it locked for).
   *
   * The dispatch origin of this call must be _Signed_, and the signer must have a vote
   * registered for referendum `index`.
   *
   * - `index`: The index of referendum of the vote to be removed.
   *
   * Weight: `O(R + log R)` where R is the number of referenda that `target` has voted on.
   * Weight is calculated for the maximum number of vote.
   **/
  | { name: 'RemoveVote'; params: { index: number } }
  /**
   * Remove a vote for a referendum.
   *
   * If the `target` is equal to the signer, then this function is exactly equivalent to
   * `remove_vote`. If not equal to the signer, then the vote must have expired,
   * either because the referendum was cancelled, because the voter lost the referendum or
   * because the conviction period is over.
   *
   * The dispatch origin of this call must be _Signed_.
   *
   * - `target`: The account of the vote to be removed; this account must have voted for
   * referendum `index`.
   * - `index`: The index of referendum of the vote to be removed.
   *
   * Weight: `O(R + log R)` where R is the number of referenda that `target` has voted on.
   * Weight is calculated for the maximum number of vote.
   **/
  | { name: 'RemoveOtherVote'; params: { target: AccountId32; index: number } }
  /**
   * Permanently place a proposal into the blacklist. This prevents it from ever being
   * proposed again.
   *
   * If called on a queued public or external proposal, then this will result in it being
   * removed. If the `ref_index` supplied is an active referendum with the proposal hash,
   * then it will be cancelled.
   *
   * The dispatch origin of this call must be `BlacklistOrigin`.
   *
   * - `proposal_hash`: The proposal hash to blacklist permanently.
   * - `ref_index`: An ongoing referendum whose hash is `proposal_hash`, which will be
   * cancelled.
   *
   * Weight: `O(p)` (though as this is an high-privilege dispatch, we assume it has a
   * reasonable value).
   **/
  | { name: 'Blacklist'; params: { proposalHash: H256; maybeRefIndex?: number | undefined } }
  /**
   * Remove a proposal.
   *
   * The dispatch origin of this call must be `CancelProposalOrigin`.
   *
   * - `prop_index`: The index of the proposal to cancel.
   *
   * Weight: `O(p)` where `p = PublicProps::<T>::decode_len()`
   **/
  | { name: 'CancelProposal'; params: { propIndex: number } }
  /**
   * Set or clear a metadata of a proposal or a referendum.
   *
   * Parameters:
   * - `origin`: Must correspond to the `MetadataOwner`.
   * - `ExternalOrigin` for an external proposal with the `SuperMajorityApprove`
   * threshold.
   * - `ExternalDefaultOrigin` for an external proposal with the `SuperMajorityAgainst`
   * threshold.
   * - `ExternalMajorityOrigin` for an external proposal with the `SimpleMajority`
   * threshold.
   * - `Signed` by a creator for a public proposal.
   * - `Signed` to clear a metadata for a finished referendum.
   * - `Root` to set a metadata for an ongoing referendum.
   * - `owner`: an identifier of a metadata owner.
   * - `maybe_hash`: The hash of an on-chain stored preimage. `None` to clear a metadata.
   **/
  | { name: 'SetMetadata'; params: { owner: PalletDemocracyMetadataOwner; maybeHash?: H256 | undefined } };

export type PalletDemocracyCallLike =
  /**
   * Propose a sensitive action to be taken.
   *
   * The dispatch origin of this call must be _Signed_ and the sender must
   * have funds to cover the deposit.
   *
   * - `proposal_hash`: The hash of the proposal preimage.
   * - `value`: The amount of deposit (must be at least `MinimumDeposit`).
   *
   * Emits `Proposed`.
   **/
  | { name: 'Propose'; params: { proposal: FrameSupportPreimagesBounded; value: bigint } }
  /**
   * Signals agreement with a particular proposal.
   *
   * The dispatch origin of this call must be _Signed_ and the sender
   * must have funds to cover the deposit, equal to the original deposit.
   *
   * - `proposal`: The index of the proposal to second.
   **/
  | { name: 'Second'; params: { proposal: number } }
  /**
   * Vote in a referendum. If `vote.is_aye()`, the vote is to enact the proposal;
   * otherwise it is a vote to keep the status quo.
   *
   * The dispatch origin of this call must be _Signed_.
   *
   * - `ref_index`: The index of the referendum to vote for.
   * - `vote`: The vote configuration.
   **/
  | { name: 'Vote'; params: { refIndex: number; vote: PalletDemocracyVoteAccountVote } }
  /**
   * Schedule an emergency cancellation of a referendum. Cannot happen twice to the same
   * referendum.
   *
   * The dispatch origin of this call must be `CancellationOrigin`.
   *
   * -`ref_index`: The index of the referendum to cancel.
   *
   * Weight: `O(1)`.
   **/
  | { name: 'EmergencyCancel'; params: { refIndex: number } }
  /**
   * Schedule a referendum to be tabled once it is legal to schedule an external
   * referendum.
   *
   * The dispatch origin of this call must be `ExternalOrigin`.
   *
   * - `proposal_hash`: The preimage hash of the proposal.
   **/
  | { name: 'ExternalPropose'; params: { proposal: FrameSupportPreimagesBounded } }
  /**
   * Schedule a majority-carries referendum to be tabled next once it is legal to schedule
   * an external referendum.
   *
   * The dispatch of this call must be `ExternalMajorityOrigin`.
   *
   * - `proposal_hash`: The preimage hash of the proposal.
   *
   * Unlike `external_propose`, blacklisting has no effect on this and it may replace a
   * pre-scheduled `external_propose` call.
   *
   * Weight: `O(1)`
   **/
  | { name: 'ExternalProposeMajority'; params: { proposal: FrameSupportPreimagesBounded } }
  /**
   * Schedule a negative-turnout-bias referendum to be tabled next once it is legal to
   * schedule an external referendum.
   *
   * The dispatch of this call must be `ExternalDefaultOrigin`.
   *
   * - `proposal_hash`: The preimage hash of the proposal.
   *
   * Unlike `external_propose`, blacklisting has no effect on this and it may replace a
   * pre-scheduled `external_propose` call.
   *
   * Weight: `O(1)`
   **/
  | { name: 'ExternalProposeDefault'; params: { proposal: FrameSupportPreimagesBounded } }
  /**
   * Schedule the currently externally-proposed majority-carries referendum to be tabled
   * immediately. If there is no externally-proposed referendum currently, or if there is one
   * but it is not a majority-carries referendum then it fails.
   *
   * The dispatch of this call must be `FastTrackOrigin`.
   *
   * - `proposal_hash`: The hash of the current external proposal.
   * - `voting_period`: The period that is allowed for voting on this proposal. Increased to
   * Must be always greater than zero.
   * For `FastTrackOrigin` must be equal or greater than `FastTrackVotingPeriod`.
   * - `delay`: The number of block after voting has ended in approval and this should be
   * enacted. This doesn't have a minimum amount.
   *
   * Emits `Started`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'FastTrack'; params: { proposalHash: H256; votingPeriod: number; delay: number } }
  /**
   * Veto and blacklist the external proposal hash.
   *
   * The dispatch origin of this call must be `VetoOrigin`.
   *
   * - `proposal_hash`: The preimage hash of the proposal to veto and blacklist.
   *
   * Emits `Vetoed`.
   *
   * Weight: `O(V + log(V))` where V is number of `existing vetoers`
   **/
  | { name: 'VetoExternal'; params: { proposalHash: H256 } }
  /**
   * Remove a referendum.
   *
   * The dispatch origin of this call must be _Root_.
   *
   * - `ref_index`: The index of the referendum to cancel.
   *
   * # Weight: `O(1)`.
   **/
  | { name: 'CancelReferendum'; params: { refIndex: number } }
  /**
   * Delegate the voting power (with some given conviction) of the sending account.
   *
   * The balance delegated is locked for as long as it's delegated, and thereafter for the
   * time appropriate for the conviction's lock period.
   *
   * The dispatch origin of this call must be _Signed_, and the signing account must either:
   * - be delegating already; or
   * - have no voting activity (if there is, then it will need to be removed/consolidated
   * through `reap_vote` or `unvote`).
   *
   * - `to`: The account whose voting the `target` account's voting power will follow.
   * - `conviction`: The conviction that will be attached to the delegated votes. When the
   * account is undelegated, the funds will be locked for the corresponding period.
   * - `balance`: The amount of the account's balance to be used in delegating. This must not
   * be more than the account's current balance.
   *
   * Emits `Delegated`.
   *
   * Weight: `O(R)` where R is the number of referendums the voter delegating to has
   * voted on. Weight is charged as if maximum votes.
   **/
  | { name: 'Delegate'; params: { to: AccountId32Like; conviction: PalletDemocracyConviction; balance: bigint } }
  /**
   * Undelegate the voting power of the sending account.
   *
   * Tokens may be unlocked following once an amount of time consistent with the lock period
   * of the conviction with which the delegation was issued.
   *
   * The dispatch origin of this call must be _Signed_ and the signing account must be
   * currently delegating.
   *
   * Emits `Undelegated`.
   *
   * Weight: `O(R)` where R is the number of referendums the voter delegating to has
   * voted on. Weight is charged as if maximum votes.
   **/
  | { name: 'Undelegate' }
  /**
   * Clears all public proposals.
   *
   * The dispatch origin of this call must be _Root_.
   *
   * Weight: `O(1)`.
   **/
  | { name: 'ClearPublicProposals' }
  /**
   * Unlock tokens that have an expired lock.
   *
   * The dispatch origin of this call must be _Signed_.
   *
   * - `target`: The account to remove the lock on.
   *
   * Weight: `O(R)` with R number of vote of target.
   **/
  | { name: 'Unlock'; params: { target: AccountId32Like } }
  /**
   * Remove a vote for a referendum.
   *
   * If:
   * - the referendum was cancelled, or
   * - the referendum is ongoing, or
   * - the referendum has ended such that
   * - the vote of the account was in opposition to the result; or
   * - there was no conviction to the account's vote; or
   * - the account made a split vote
   * ...then the vote is removed cleanly and a following call to `unlock` may result in more
   * funds being available.
   *
   * If, however, the referendum has ended and:
   * - it finished corresponding to the vote of the account, and
   * - the account made a standard vote with conviction, and
   * - the lock period of the conviction is not over
   * ...then the lock will be aggregated into the overall account's lock, which may involve
   * *overlocking* (where the two locks are combined into a single lock that is the maximum
   * of both the amount locked and the time is it locked for).
   *
   * The dispatch origin of this call must be _Signed_, and the signer must have a vote
   * registered for referendum `index`.
   *
   * - `index`: The index of referendum of the vote to be removed.
   *
   * Weight: `O(R + log R)` where R is the number of referenda that `target` has voted on.
   * Weight is calculated for the maximum number of vote.
   **/
  | { name: 'RemoveVote'; params: { index: number } }
  /**
   * Remove a vote for a referendum.
   *
   * If the `target` is equal to the signer, then this function is exactly equivalent to
   * `remove_vote`. If not equal to the signer, then the vote must have expired,
   * either because the referendum was cancelled, because the voter lost the referendum or
   * because the conviction period is over.
   *
   * The dispatch origin of this call must be _Signed_.
   *
   * - `target`: The account of the vote to be removed; this account must have voted for
   * referendum `index`.
   * - `index`: The index of referendum of the vote to be removed.
   *
   * Weight: `O(R + log R)` where R is the number of referenda that `target` has voted on.
   * Weight is calculated for the maximum number of vote.
   **/
  | { name: 'RemoveOtherVote'; params: { target: AccountId32Like; index: number } }
  /**
   * Permanently place a proposal into the blacklist. This prevents it from ever being
   * proposed again.
   *
   * If called on a queued public or external proposal, then this will result in it being
   * removed. If the `ref_index` supplied is an active referendum with the proposal hash,
   * then it will be cancelled.
   *
   * The dispatch origin of this call must be `BlacklistOrigin`.
   *
   * - `proposal_hash`: The proposal hash to blacklist permanently.
   * - `ref_index`: An ongoing referendum whose hash is `proposal_hash`, which will be
   * cancelled.
   *
   * Weight: `O(p)` (though as this is an high-privilege dispatch, we assume it has a
   * reasonable value).
   **/
  | { name: 'Blacklist'; params: { proposalHash: H256; maybeRefIndex?: number | undefined } }
  /**
   * Remove a proposal.
   *
   * The dispatch origin of this call must be `CancelProposalOrigin`.
   *
   * - `prop_index`: The index of the proposal to cancel.
   *
   * Weight: `O(p)` where `p = PublicProps::<T>::decode_len()`
   **/
  | { name: 'CancelProposal'; params: { propIndex: number } }
  /**
   * Set or clear a metadata of a proposal or a referendum.
   *
   * Parameters:
   * - `origin`: Must correspond to the `MetadataOwner`.
   * - `ExternalOrigin` for an external proposal with the `SuperMajorityApprove`
   * threshold.
   * - `ExternalDefaultOrigin` for an external proposal with the `SuperMajorityAgainst`
   * threshold.
   * - `ExternalMajorityOrigin` for an external proposal with the `SimpleMajority`
   * threshold.
   * - `Signed` by a creator for a public proposal.
   * - `Signed` to clear a metadata for a finished referendum.
   * - `Root` to set a metadata for an ongoing referendum.
   * - `owner`: an identifier of a metadata owner.
   * - `maybe_hash`: The hash of an on-chain stored preimage. `None` to clear a metadata.
   **/
  | { name: 'SetMetadata'; params: { owner: PalletDemocracyMetadataOwner; maybeHash?: H256 | undefined } };

export type PalletDemocracyConviction =
  | 'None'
  | 'Locked1x'
  | 'Locked2x'
  | 'Locked3x'
  | 'Locked4x'
  | 'Locked5x'
  | 'Locked6x';

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletCollectiveCall =
  /**
   * Set the collective's membership.
   *
   * - `new_members`: The new member list. Be nice to the chain and provide it sorted.
   * - `prime`: The prime member whose vote sets the default.
   * - `old_count`: The upper bound for the previous number of members in storage. Used for
   * weight estimation.
   *
   * The dispatch of this call must be `SetMembersOrigin`.
   *
   * NOTE: Does not enforce the expected `MaxMembers` limit on the amount of members, but
   * the weight estimations rely on it to estimate dispatchable weight.
   *
   * # WARNING:
   *
   * The `pallet-collective` can also be managed by logic outside of the pallet through the
   * implementation of the trait [`ChangeMembers`].
   * Any call to `set_members` must be careful that the member set doesn't get out of sync
   * with other logic managing the member set.
   *
   * ## Complexity:
   * - `O(MP + N)` where:
   * - `M` old-members-count (code- and governance-bounded)
   * - `N` new-members-count (code- and governance-bounded)
   * - `P` proposals-count (code-bounded)
   **/
  | {
      name: 'SetMembers';
      params: { newMembers: Array<AccountId32>; prime?: AccountId32 | undefined; oldCount: number };
    }
  /**
   * Dispatch a proposal from a member using the `Member` origin.
   *
   * Origin must be a member of the collective.
   *
   * ## Complexity:
   * - `O(B + M + P)` where:
   * - `B` is `proposal` size in bytes (length-fee-bounded)
   * - `M` members-count (code-bounded)
   * - `P` complexity of dispatching `proposal`
   **/
  | { name: 'Execute'; params: { proposal: BasiliskRuntimeRuntimeCall; lengthBound: number } }
  /**
   * Add a new proposal to either be voted on or executed directly.
   *
   * Requires the sender to be member.
   *
   * `threshold` determines whether `proposal` is executed directly (`threshold < 2`)
   * or put up for voting.
   *
   * ## Complexity
   * - `O(B + M + P1)` or `O(B + M + P2)` where:
   * - `B` is `proposal` size in bytes (length-fee-bounded)
   * - `M` is members-count (code- and governance-bounded)
   * - branching is influenced by `threshold` where:
   * - `P1` is proposal execution complexity (`threshold < 2`)
   * - `P2` is proposals-count (code-bounded) (`threshold >= 2`)
   **/
  | { name: 'Propose'; params: { threshold: number; proposal: BasiliskRuntimeRuntimeCall; lengthBound: number } }
  /**
   * Add an aye or nay vote for the sender to the given proposal.
   *
   * Requires the sender to be a member.
   *
   * Transaction fees will be waived if the member is voting on any particular proposal
   * for the first time and the call is successful. Subsequent vote changes will charge a
   * fee.
   * ## Complexity
   * - `O(M)` where `M` is members-count (code- and governance-bounded)
   **/
  | { name: 'Vote'; params: { proposal: H256; index: number; approve: boolean } }
  /**
   * Disapprove a proposal, close, and remove it from the system, regardless of its current
   * state.
   *
   * Must be called by the Root origin.
   *
   * Parameters:
   * * `proposal_hash`: The hash of the proposal that should be disapproved.
   *
   * ## Complexity
   * O(P) where P is the number of max proposals
   **/
  | { name: 'DisapproveProposal'; params: { proposalHash: H256 } }
  /**
   * Close a vote that is either approved, disapproved or whose voting period has ended.
   *
   * May be called by any signed account in order to finish voting and close the proposal.
   *
   * If called before the end of the voting period it will only close the vote if it is
   * has enough votes to be approved or disapproved.
   *
   * If called after the end of the voting period abstentions are counted as rejections
   * unless there is a prime member set and the prime member cast an approval.
   *
   * If the close operation completes successfully with disapproval, the transaction fee will
   * be waived. Otherwise execution of the approved operation will be charged to the caller.
   *
   * + `proposal_weight_bound`: The maximum amount of weight consumed by executing the closed
   * proposal.
   * + `length_bound`: The upper bound for the length of the proposal in storage. Checked via
   * `storage::read` so it is `size_of::<u32>() == 4` larger than the pure length.
   *
   * ## Complexity
   * - `O(B + M + P1 + P2)` where:
   * - `B` is `proposal` size in bytes (length-fee-bounded)
   * - `M` is members-count (code- and governance-bounded)
   * - `P1` is the complexity of `proposal` preimage.
   * - `P2` is proposal-count (code-bounded)
   **/
  | {
      name: 'Close';
      params: { proposalHash: H256; index: number; proposalWeightBound: SpWeightsWeightV2Weight; lengthBound: number };
    };

export type PalletCollectiveCallLike =
  /**
   * Set the collective's membership.
   *
   * - `new_members`: The new member list. Be nice to the chain and provide it sorted.
   * - `prime`: The prime member whose vote sets the default.
   * - `old_count`: The upper bound for the previous number of members in storage. Used for
   * weight estimation.
   *
   * The dispatch of this call must be `SetMembersOrigin`.
   *
   * NOTE: Does not enforce the expected `MaxMembers` limit on the amount of members, but
   * the weight estimations rely on it to estimate dispatchable weight.
   *
   * # WARNING:
   *
   * The `pallet-collective` can also be managed by logic outside of the pallet through the
   * implementation of the trait [`ChangeMembers`].
   * Any call to `set_members` must be careful that the member set doesn't get out of sync
   * with other logic managing the member set.
   *
   * ## Complexity:
   * - `O(MP + N)` where:
   * - `M` old-members-count (code- and governance-bounded)
   * - `N` new-members-count (code- and governance-bounded)
   * - `P` proposals-count (code-bounded)
   **/
  | {
      name: 'SetMembers';
      params: { newMembers: Array<AccountId32Like>; prime?: AccountId32Like | undefined; oldCount: number };
    }
  /**
   * Dispatch a proposal from a member using the `Member` origin.
   *
   * Origin must be a member of the collective.
   *
   * ## Complexity:
   * - `O(B + M + P)` where:
   * - `B` is `proposal` size in bytes (length-fee-bounded)
   * - `M` members-count (code-bounded)
   * - `P` complexity of dispatching `proposal`
   **/
  | { name: 'Execute'; params: { proposal: BasiliskRuntimeRuntimeCallLike; lengthBound: number } }
  /**
   * Add a new proposal to either be voted on or executed directly.
   *
   * Requires the sender to be member.
   *
   * `threshold` determines whether `proposal` is executed directly (`threshold < 2`)
   * or put up for voting.
   *
   * ## Complexity
   * - `O(B + M + P1)` or `O(B + M + P2)` where:
   * - `B` is `proposal` size in bytes (length-fee-bounded)
   * - `M` is members-count (code- and governance-bounded)
   * - branching is influenced by `threshold` where:
   * - `P1` is proposal execution complexity (`threshold < 2`)
   * - `P2` is proposals-count (code-bounded) (`threshold >= 2`)
   **/
  | { name: 'Propose'; params: { threshold: number; proposal: BasiliskRuntimeRuntimeCallLike; lengthBound: number } }
  /**
   * Add an aye or nay vote for the sender to the given proposal.
   *
   * Requires the sender to be a member.
   *
   * Transaction fees will be waived if the member is voting on any particular proposal
   * for the first time and the call is successful. Subsequent vote changes will charge a
   * fee.
   * ## Complexity
   * - `O(M)` where `M` is members-count (code- and governance-bounded)
   **/
  | { name: 'Vote'; params: { proposal: H256; index: number; approve: boolean } }
  /**
   * Disapprove a proposal, close, and remove it from the system, regardless of its current
   * state.
   *
   * Must be called by the Root origin.
   *
   * Parameters:
   * * `proposal_hash`: The hash of the proposal that should be disapproved.
   *
   * ## Complexity
   * O(P) where P is the number of max proposals
   **/
  | { name: 'DisapproveProposal'; params: { proposalHash: H256 } }
  /**
   * Close a vote that is either approved, disapproved or whose voting period has ended.
   *
   * May be called by any signed account in order to finish voting and close the proposal.
   *
   * If called before the end of the voting period it will only close the vote if it is
   * has enough votes to be approved or disapproved.
   *
   * If called after the end of the voting period abstentions are counted as rejections
   * unless there is a prime member set and the prime member cast an approval.
   *
   * If the close operation completes successfully with disapproval, the transaction fee will
   * be waived. Otherwise execution of the approved operation will be charged to the caller.
   *
   * + `proposal_weight_bound`: The maximum amount of weight consumed by executing the closed
   * proposal.
   * + `length_bound`: The upper bound for the length of the proposal in storage. Checked via
   * `storage::read` so it is `size_of::<u32>() == 4` larger than the pure length.
   *
   * ## Complexity
   * - `O(B + M + P1 + P2)` where:
   * - `B` is `proposal` size in bytes (length-fee-bounded)
   * - `M` is members-count (code- and governance-bounded)
   * - `P1` is the complexity of `proposal` preimage.
   * - `P2` is proposal-count (code-bounded)
   **/
  | {
      name: 'Close';
      params: { proposalHash: H256; index: number; proposalWeightBound: SpWeightsWeightV2Weight; lengthBound: number };
    };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type OrmlVestingModuleCall =
  | { name: 'Claim' }
  | { name: 'VestedTransfer'; params: { dest: AccountId32; schedule: OrmlVestingVestingSchedule } }
  | {
      name: 'UpdateVestingSchedules';
      params: { who: AccountId32; vestingSchedules: Array<OrmlVestingVestingSchedule> };
    }
  | { name: 'ClaimFor'; params: { dest: AccountId32 } };

export type OrmlVestingModuleCallLike =
  | { name: 'Claim' }
  | { name: 'VestedTransfer'; params: { dest: AccountId32Like; schedule: OrmlVestingVestingSchedule } }
  | {
      name: 'UpdateVestingSchedules';
      params: { who: AccountId32Like; vestingSchedules: Array<OrmlVestingVestingSchedule> };
    }
  | { name: 'ClaimFor'; params: { dest: AccountId32Like } };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletProxyCall =
  /**
   * Dispatch the given `call` from an account that the sender is authorised for through
   * `add_proxy`.
   *
   * The dispatch origin for this call must be _Signed_.
   *
   * Parameters:
   * - `real`: The account that the proxy will make a call on behalf of.
   * - `force_proxy_type`: Specify the exact proxy type to be used and checked for this call.
   * - `call`: The call to be made by the `real` account.
   **/
  | {
      name: 'Proxy';
      params: {
        real: AccountId32;
        forceProxyType?: BasiliskRuntimeSystemProxyType | undefined;
        call: BasiliskRuntimeRuntimeCall;
      };
    }
  /**
   * Register a proxy account for the sender that is able to make calls on its behalf.
   *
   * The dispatch origin for this call must be _Signed_.
   *
   * Parameters:
   * - `proxy`: The account that the `caller` would like to make a proxy.
   * - `proxy_type`: The permissions allowed for this proxy account.
   * - `delay`: The announcement period required of the initial proxy. Will generally be
   * zero.
   **/
  | { name: 'AddProxy'; params: { delegate: AccountId32; proxyType: BasiliskRuntimeSystemProxyType; delay: number } }
  /**
   * Unregister a proxy account for the sender.
   *
   * The dispatch origin for this call must be _Signed_.
   *
   * Parameters:
   * - `proxy`: The account that the `caller` would like to remove as a proxy.
   * - `proxy_type`: The permissions currently enabled for the removed proxy account.
   **/
  | { name: 'RemoveProxy'; params: { delegate: AccountId32; proxyType: BasiliskRuntimeSystemProxyType; delay: number } }
  /**
   * Unregister all proxy accounts for the sender.
   *
   * The dispatch origin for this call must be _Signed_.
   *
   * WARNING: This may be called on accounts created by `pure`, however if done, then
   * the unreserved fees will be inaccessible. **All access to this account will be lost.**
   **/
  | { name: 'RemoveProxies' }
  /**
   * Spawn a fresh new account that is guaranteed to be otherwise inaccessible, and
   * initialize it with a proxy of `proxy_type` for `origin` sender.
   *
   * Requires a `Signed` origin.
   *
   * - `proxy_type`: The type of the proxy that the sender will be registered as over the
   * new account. This will almost always be the most permissive `ProxyType` possible to
   * allow for maximum flexibility.
   * - `index`: A disambiguation index, in case this is called multiple times in the same
   * transaction (e.g. with `utility::batch`). Unless you're using `batch` you probably just
   * want to use `0`.
   * - `delay`: The announcement period required of the initial proxy. Will generally be
   * zero.
   *
   * Fails with `Duplicate` if this has already been called in this transaction, from the
   * same sender, with the same parameters.
   *
   * Fails if there are insufficient funds to pay for deposit.
   **/
  | { name: 'CreatePure'; params: { proxyType: BasiliskRuntimeSystemProxyType; delay: number; index: number } }
  /**
   * Removes a previously spawned pure proxy.
   *
   * WARNING: **All access to this account will be lost.** Any funds held in it will be
   * inaccessible.
   *
   * Requires a `Signed` origin, and the sender account must have been created by a call to
   * `pure` with corresponding parameters.
   *
   * - `spawner`: The account that originally called `pure` to create this account.
   * - `index`: The disambiguation index originally passed to `pure`. Probably `0`.
   * - `proxy_type`: The proxy type originally passed to `pure`.
   * - `height`: The height of the chain when the call to `pure` was processed.
   * - `ext_index`: The extrinsic index in which the call to `pure` was processed.
   *
   * Fails with `NoPermission` in case the caller is not a previously created pure
   * account whose `pure` call has corresponding parameters.
   **/
  | {
      name: 'KillPure';
      params: {
        spawner: AccountId32;
        proxyType: BasiliskRuntimeSystemProxyType;
        index: number;
        height: number;
        extIndex: number;
      };
    }
  /**
   * Publish the hash of a proxy-call that will be made in the future.
   *
   * This must be called some number of blocks before the corresponding `proxy` is attempted
   * if the delay associated with the proxy relationship is greater than zero.
   *
   * No more than `MaxPending` announcements may be made at any one time.
   *
   * This will take a deposit of `AnnouncementDepositFactor` as well as
   * `AnnouncementDepositBase` if there are no other pending announcements.
   *
   * The dispatch origin for this call must be _Signed_ and a proxy of `real`.
   *
   * Parameters:
   * - `real`: The account that the proxy will make a call on behalf of.
   * - `call_hash`: The hash of the call to be made by the `real` account.
   **/
  | { name: 'Announce'; params: { real: AccountId32; callHash: H256 } }
  /**
   * Remove a given announcement.
   *
   * May be called by a proxy account to remove a call they previously announced and return
   * the deposit.
   *
   * The dispatch origin for this call must be _Signed_.
   *
   * Parameters:
   * - `real`: The account that the proxy will make a call on behalf of.
   * - `call_hash`: The hash of the call to be made by the `real` account.
   **/
  | { name: 'RemoveAnnouncement'; params: { real: AccountId32; callHash: H256 } }
  /**
   * Remove the given announcement of a delegate.
   *
   * May be called by a target (proxied) account to remove a call that one of their delegates
   * (`delegate`) has announced they want to execute. The deposit is returned.
   *
   * The dispatch origin for this call must be _Signed_.
   *
   * Parameters:
   * - `delegate`: The account that previously announced the call.
   * - `call_hash`: The hash of the call to be made.
   **/
  | { name: 'RejectAnnouncement'; params: { delegate: AccountId32; callHash: H256 } }
  /**
   * Dispatch the given `call` from an account that the sender is authorized for through
   * `add_proxy`.
   *
   * Removes any corresponding announcement(s).
   *
   * The dispatch origin for this call must be _Signed_.
   *
   * Parameters:
   * - `real`: The account that the proxy will make a call on behalf of.
   * - `force_proxy_type`: Specify the exact proxy type to be used and checked for this call.
   * - `call`: The call to be made by the `real` account.
   **/
  | {
      name: 'ProxyAnnounced';
      params: {
        delegate: AccountId32;
        real: AccountId32;
        forceProxyType?: BasiliskRuntimeSystemProxyType | undefined;
        call: BasiliskRuntimeRuntimeCall;
      };
    };

export type PalletProxyCallLike =
  /**
   * Dispatch the given `call` from an account that the sender is authorised for through
   * `add_proxy`.
   *
   * The dispatch origin for this call must be _Signed_.
   *
   * Parameters:
   * - `real`: The account that the proxy will make a call on behalf of.
   * - `force_proxy_type`: Specify the exact proxy type to be used and checked for this call.
   * - `call`: The call to be made by the `real` account.
   **/
  | {
      name: 'Proxy';
      params: {
        real: AccountId32Like;
        forceProxyType?: BasiliskRuntimeSystemProxyType | undefined;
        call: BasiliskRuntimeRuntimeCallLike;
      };
    }
  /**
   * Register a proxy account for the sender that is able to make calls on its behalf.
   *
   * The dispatch origin for this call must be _Signed_.
   *
   * Parameters:
   * - `proxy`: The account that the `caller` would like to make a proxy.
   * - `proxy_type`: The permissions allowed for this proxy account.
   * - `delay`: The announcement period required of the initial proxy. Will generally be
   * zero.
   **/
  | {
      name: 'AddProxy';
      params: { delegate: AccountId32Like; proxyType: BasiliskRuntimeSystemProxyType; delay: number };
    }
  /**
   * Unregister a proxy account for the sender.
   *
   * The dispatch origin for this call must be _Signed_.
   *
   * Parameters:
   * - `proxy`: The account that the `caller` would like to remove as a proxy.
   * - `proxy_type`: The permissions currently enabled for the removed proxy account.
   **/
  | {
      name: 'RemoveProxy';
      params: { delegate: AccountId32Like; proxyType: BasiliskRuntimeSystemProxyType; delay: number };
    }
  /**
   * Unregister all proxy accounts for the sender.
   *
   * The dispatch origin for this call must be _Signed_.
   *
   * WARNING: This may be called on accounts created by `pure`, however if done, then
   * the unreserved fees will be inaccessible. **All access to this account will be lost.**
   **/
  | { name: 'RemoveProxies' }
  /**
   * Spawn a fresh new account that is guaranteed to be otherwise inaccessible, and
   * initialize it with a proxy of `proxy_type` for `origin` sender.
   *
   * Requires a `Signed` origin.
   *
   * - `proxy_type`: The type of the proxy that the sender will be registered as over the
   * new account. This will almost always be the most permissive `ProxyType` possible to
   * allow for maximum flexibility.
   * - `index`: A disambiguation index, in case this is called multiple times in the same
   * transaction (e.g. with `utility::batch`). Unless you're using `batch` you probably just
   * want to use `0`.
   * - `delay`: The announcement period required of the initial proxy. Will generally be
   * zero.
   *
   * Fails with `Duplicate` if this has already been called in this transaction, from the
   * same sender, with the same parameters.
   *
   * Fails if there are insufficient funds to pay for deposit.
   **/
  | { name: 'CreatePure'; params: { proxyType: BasiliskRuntimeSystemProxyType; delay: number; index: number } }
  /**
   * Removes a previously spawned pure proxy.
   *
   * WARNING: **All access to this account will be lost.** Any funds held in it will be
   * inaccessible.
   *
   * Requires a `Signed` origin, and the sender account must have been created by a call to
   * `pure` with corresponding parameters.
   *
   * - `spawner`: The account that originally called `pure` to create this account.
   * - `index`: The disambiguation index originally passed to `pure`. Probably `0`.
   * - `proxy_type`: The proxy type originally passed to `pure`.
   * - `height`: The height of the chain when the call to `pure` was processed.
   * - `ext_index`: The extrinsic index in which the call to `pure` was processed.
   *
   * Fails with `NoPermission` in case the caller is not a previously created pure
   * account whose `pure` call has corresponding parameters.
   **/
  | {
      name: 'KillPure';
      params: {
        spawner: AccountId32Like;
        proxyType: BasiliskRuntimeSystemProxyType;
        index: number;
        height: number;
        extIndex: number;
      };
    }
  /**
   * Publish the hash of a proxy-call that will be made in the future.
   *
   * This must be called some number of blocks before the corresponding `proxy` is attempted
   * if the delay associated with the proxy relationship is greater than zero.
   *
   * No more than `MaxPending` announcements may be made at any one time.
   *
   * This will take a deposit of `AnnouncementDepositFactor` as well as
   * `AnnouncementDepositBase` if there are no other pending announcements.
   *
   * The dispatch origin for this call must be _Signed_ and a proxy of `real`.
   *
   * Parameters:
   * - `real`: The account that the proxy will make a call on behalf of.
   * - `call_hash`: The hash of the call to be made by the `real` account.
   **/
  | { name: 'Announce'; params: { real: AccountId32Like; callHash: H256 } }
  /**
   * Remove a given announcement.
   *
   * May be called by a proxy account to remove a call they previously announced and return
   * the deposit.
   *
   * The dispatch origin for this call must be _Signed_.
   *
   * Parameters:
   * - `real`: The account that the proxy will make a call on behalf of.
   * - `call_hash`: The hash of the call to be made by the `real` account.
   **/
  | { name: 'RemoveAnnouncement'; params: { real: AccountId32Like; callHash: H256 } }
  /**
   * Remove the given announcement of a delegate.
   *
   * May be called by a target (proxied) account to remove a call that one of their delegates
   * (`delegate`) has announced they want to execute. The deposit is returned.
   *
   * The dispatch origin for this call must be _Signed_.
   *
   * Parameters:
   * - `delegate`: The account that previously announced the call.
   * - `call_hash`: The hash of the call to be made.
   **/
  | { name: 'RejectAnnouncement'; params: { delegate: AccountId32Like; callHash: H256 } }
  /**
   * Dispatch the given `call` from an account that the sender is authorized for through
   * `add_proxy`.
   *
   * Removes any corresponding announcement(s).
   *
   * The dispatch origin for this call must be _Signed_.
   *
   * Parameters:
   * - `real`: The account that the proxy will make a call on behalf of.
   * - `force_proxy_type`: Specify the exact proxy type to be used and checked for this call.
   * - `call`: The call to be made by the `real` account.
   **/
  | {
      name: 'ProxyAnnounced';
      params: {
        delegate: AccountId32Like;
        real: AccountId32Like;
        forceProxyType?: BasiliskRuntimeSystemProxyType | undefined;
        call: BasiliskRuntimeRuntimeCallLike;
      };
    };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletCollatorSelectionCall =
  /**
   * Set the list of invulnerable (fixed) collators. These collators must do some
   * preparation, namely to have registered session keys.
   *
   * The call will remove any accounts that have not registered keys from the set. That is,
   * it is non-atomic; the caller accepts all `AccountId`s passed in `new` _individually_ as
   * acceptable Invulnerables, and is not proposing a _set_ of new Invulnerables.
   *
   * This call does not maintain mutual exclusivity of `Invulnerables` and `Candidates`. It
   * is recommended to use a batch of `add_invulnerable` and `remove_invulnerable` instead. A
   * `batch_all` can also be used to enforce atomicity. If any candidates are included in
   * `new`, they should be removed with `remove_invulnerable_candidate` after execution.
   *
   * Must be called by the `UpdateOrigin`.
   **/
  | { name: 'SetInvulnerables'; params: { new: Array<AccountId32> } }
  /**
   * Set the ideal number of non-invulnerable collators. If lowering this number, then the
   * number of running collators could be higher than this figure. Aside from that edge case,
   * there should be no other way to have more candidates than the desired number.
   *
   * The origin for this call must be the `UpdateOrigin`.
   **/
  | { name: 'SetDesiredCandidates'; params: { max: number } }
  /**
   * Set the candidacy bond amount.
   *
   * If the candidacy bond is increased by this call, all current candidates which have a
   * deposit lower than the new bond will be kicked from the list and get their deposits
   * back.
   *
   * The origin for this call must be the `UpdateOrigin`.
   **/
  | { name: 'SetCandidacyBond'; params: { bond: bigint } }
  /**
   * Register this account as a collator candidate. The account must (a) already have
   * registered session keys and (b) be able to reserve the `CandidacyBond`.
   *
   * This call is not available to `Invulnerable` collators.
   **/
  | { name: 'RegisterAsCandidate' }
  /**
   * Deregister `origin` as a collator candidate. Note that the collator can only leave on
   * session change. The `CandidacyBond` will be unreserved immediately.
   *
   * This call will fail if the total number of candidates would drop below
   * `MinEligibleCollators`.
   **/
  | { name: 'LeaveIntent' }
  /**
   * Add a new account `who` to the list of `Invulnerables` collators. `who` must have
   * registered session keys. If `who` is a candidate, they will be removed.
   *
   * The origin for this call must be the `UpdateOrigin`.
   **/
  | { name: 'AddInvulnerable'; params: { who: AccountId32 } }
  /**
   * Remove an account `who` from the list of `Invulnerables` collators. `Invulnerables` must
   * be sorted.
   *
   * The origin for this call must be the `UpdateOrigin`.
   **/
  | { name: 'RemoveInvulnerable'; params: { who: AccountId32 } }
  /**
   * Update the candidacy bond of collator candidate `origin` to a new amount `new_deposit`.
   *
   * Setting a `new_deposit` that is lower than the current deposit while `origin` is
   * occupying a top-`DesiredCandidates` slot is not allowed.
   *
   * This call will fail if `origin` is not a collator candidate, the updated bond is lower
   * than the minimum candidacy bond, and/or the amount cannot be reserved.
   **/
  | { name: 'UpdateBond'; params: { newDeposit: bigint } }
  /**
   * The caller `origin` replaces a candidate `target` in the collator candidate list by
   * reserving `deposit`. The amount `deposit` reserved by the caller must be greater than
   * the existing bond of the target it is trying to replace.
   *
   * This call will fail if the caller is already a collator candidate or invulnerable, the
   * caller does not have registered session keys, the target is not a collator candidate,
   * and/or the `deposit` amount cannot be reserved.
   **/
  | { name: 'TakeCandidateSlot'; params: { deposit: bigint; target: AccountId32 } };

export type PalletCollatorSelectionCallLike =
  /**
   * Set the list of invulnerable (fixed) collators. These collators must do some
   * preparation, namely to have registered session keys.
   *
   * The call will remove any accounts that have not registered keys from the set. That is,
   * it is non-atomic; the caller accepts all `AccountId`s passed in `new` _individually_ as
   * acceptable Invulnerables, and is not proposing a _set_ of new Invulnerables.
   *
   * This call does not maintain mutual exclusivity of `Invulnerables` and `Candidates`. It
   * is recommended to use a batch of `add_invulnerable` and `remove_invulnerable` instead. A
   * `batch_all` can also be used to enforce atomicity. If any candidates are included in
   * `new`, they should be removed with `remove_invulnerable_candidate` after execution.
   *
   * Must be called by the `UpdateOrigin`.
   **/
  | { name: 'SetInvulnerables'; params: { new: Array<AccountId32Like> } }
  /**
   * Set the ideal number of non-invulnerable collators. If lowering this number, then the
   * number of running collators could be higher than this figure. Aside from that edge case,
   * there should be no other way to have more candidates than the desired number.
   *
   * The origin for this call must be the `UpdateOrigin`.
   **/
  | { name: 'SetDesiredCandidates'; params: { max: number } }
  /**
   * Set the candidacy bond amount.
   *
   * If the candidacy bond is increased by this call, all current candidates which have a
   * deposit lower than the new bond will be kicked from the list and get their deposits
   * back.
   *
   * The origin for this call must be the `UpdateOrigin`.
   **/
  | { name: 'SetCandidacyBond'; params: { bond: bigint } }
  /**
   * Register this account as a collator candidate. The account must (a) already have
   * registered session keys and (b) be able to reserve the `CandidacyBond`.
   *
   * This call is not available to `Invulnerable` collators.
   **/
  | { name: 'RegisterAsCandidate' }
  /**
   * Deregister `origin` as a collator candidate. Note that the collator can only leave on
   * session change. The `CandidacyBond` will be unreserved immediately.
   *
   * This call will fail if the total number of candidates would drop below
   * `MinEligibleCollators`.
   **/
  | { name: 'LeaveIntent' }
  /**
   * Add a new account `who` to the list of `Invulnerables` collators. `who` must have
   * registered session keys. If `who` is a candidate, they will be removed.
   *
   * The origin for this call must be the `UpdateOrigin`.
   **/
  | { name: 'AddInvulnerable'; params: { who: AccountId32Like } }
  /**
   * Remove an account `who` from the list of `Invulnerables` collators. `Invulnerables` must
   * be sorted.
   *
   * The origin for this call must be the `UpdateOrigin`.
   **/
  | { name: 'RemoveInvulnerable'; params: { who: AccountId32Like } }
  /**
   * Update the candidacy bond of collator candidate `origin` to a new amount `new_deposit`.
   *
   * Setting a `new_deposit` that is lower than the current deposit while `origin` is
   * occupying a top-`DesiredCandidates` slot is not allowed.
   *
   * This call will fail if `origin` is not a collator candidate, the updated bond is lower
   * than the minimum candidacy bond, and/or the amount cannot be reserved.
   **/
  | { name: 'UpdateBond'; params: { newDeposit: bigint } }
  /**
   * The caller `origin` replaces a candidate `target` in the collator candidate list by
   * reserving `deposit`. The amount `deposit` reserved by the caller must be greater than
   * the existing bond of the target it is trying to replace.
   *
   * This call will fail if the caller is already a collator candidate or invulnerable, the
   * caller does not have registered session keys, the target is not a collator candidate,
   * and/or the `deposit` amount cannot be reserved.
   **/
  | { name: 'TakeCandidateSlot'; params: { deposit: bigint; target: AccountId32Like } };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletSessionCall =
  /**
   * Sets the session key(s) of the function caller to `keys`.
   * Allows an account to set its session key prior to becoming a validator.
   * This doesn't take effect until the next session.
   *
   * The dispatch origin of this function must be signed.
   *
   * ## Complexity
   * - `O(1)`. Actual cost depends on the number of length of `T::Keys::key_ids()` which is
   * fixed.
   **/
  | { name: 'SetKeys'; params: { keys: BasiliskRuntimeOpaqueSessionKeys; proof: Bytes } }
  /**
   * Removes any session key(s) of the function caller.
   *
   * This doesn't take effect until the next session.
   *
   * The dispatch origin of this function must be Signed and the account must be either be
   * convertible to a validator ID using the chain's typical addressing system (this usually
   * means being a controller account) or directly convertible into a validator ID (which
   * usually means being a stash account).
   *
   * ## Complexity
   * - `O(1)` in number of key types. Actual cost depends on the number of length of
   * `T::Keys::key_ids()` which is fixed.
   **/
  | { name: 'PurgeKeys' };

export type PalletSessionCallLike =
  /**
   * Sets the session key(s) of the function caller to `keys`.
   * Allows an account to set its session key prior to becoming a validator.
   * This doesn't take effect until the next session.
   *
   * The dispatch origin of this function must be signed.
   *
   * ## Complexity
   * - `O(1)`. Actual cost depends on the number of length of `T::Keys::key_ids()` which is
   * fixed.
   **/
  | { name: 'SetKeys'; params: { keys: BasiliskRuntimeOpaqueSessionKeys; proof: BytesLike } }
  /**
   * Removes any session key(s) of the function caller.
   *
   * This doesn't take effect until the next session.
   *
   * The dispatch origin of this function must be Signed and the account must be either be
   * convertible to a validator ID using the chain's typical addressing system (this usually
   * means being a controller account) or directly convertible into a validator ID (which
   * usually means being a stash account).
   *
   * ## Complexity
   * - `O(1)` in number of key types. Actual cost depends on the number of length of
   * `T::Keys::key_ids()` which is fixed.
   **/
  | { name: 'PurgeKeys' };

export type BasiliskRuntimeOpaqueSessionKeys = { aura: SpConsensusAuraSr25519AppSr25519Public };

export type SpConsensusAuraSr25519AppSr25519Public = FixedBytes<32>;

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletPreimageCall =
  /**
   * Register a preimage on-chain.
   *
   * If the preimage was previously requested, no fees or deposits are taken for providing
   * the preimage. Otherwise, a deposit is taken proportional to the size of the preimage.
   **/
  | { name: 'NotePreimage'; params: { bytes: Bytes } }
  /**
   * Clear an unrequested preimage from the runtime storage.
   *
   * If `len` is provided, then it will be a much cheaper operation.
   *
   * - `hash`: The hash of the preimage to be removed from the store.
   * - `len`: The length of the preimage of `hash`.
   **/
  | { name: 'UnnotePreimage'; params: { hash: H256 } }
  /**
   * Request a preimage be uploaded to the chain without paying any fees or deposits.
   *
   * If the preimage requests has already been provided on-chain, we unreserve any deposit
   * a user may have paid, and take the control of the preimage out of their hands.
   **/
  | { name: 'RequestPreimage'; params: { hash: H256 } }
  /**
   * Clear a previously made request for a preimage.
   *
   * NOTE: THIS MUST NOT BE CALLED ON `hash` MORE TIMES THAN `request_preimage`.
   **/
  | { name: 'UnrequestPreimage'; params: { hash: H256 } }
  /**
   * Ensure that the a bulk of pre-images is upgraded.
   *
   * The caller pays no fee if at least 90% of pre-images were successfully updated.
   **/
  | { name: 'EnsureUpdated'; params: { hashes: Array<H256> } };

export type PalletPreimageCallLike =
  /**
   * Register a preimage on-chain.
   *
   * If the preimage was previously requested, no fees or deposits are taken for providing
   * the preimage. Otherwise, a deposit is taken proportional to the size of the preimage.
   **/
  | { name: 'NotePreimage'; params: { bytes: BytesLike } }
  /**
   * Clear an unrequested preimage from the runtime storage.
   *
   * If `len` is provided, then it will be a much cheaper operation.
   *
   * - `hash`: The hash of the preimage to be removed from the store.
   * - `len`: The length of the preimage of `hash`.
   **/
  | { name: 'UnnotePreimage'; params: { hash: H256 } }
  /**
   * Request a preimage be uploaded to the chain without paying any fees or deposits.
   *
   * If the preimage requests has already been provided on-chain, we unreserve any deposit
   * a user may have paid, and take the control of the preimage out of their hands.
   **/
  | { name: 'RequestPreimage'; params: { hash: H256 } }
  /**
   * Clear a previously made request for a preimage.
   *
   * NOTE: THIS MUST NOT BE CALLED ON `hash` MORE TIMES THAN `request_preimage`.
   **/
  | { name: 'UnrequestPreimage'; params: { hash: H256 } }
  /**
   * Ensure that the a bulk of pre-images is upgraded.
   *
   * The caller pays no fee if at least 90% of pre-images were successfully updated.
   **/
  | { name: 'EnsureUpdated'; params: { hashes: Array<H256> } };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletUniquesCall =
  /**
   * Issue a new collection of non-fungible items from a public origin.
   *
   * This new collection has no items initially and its owner is the origin.
   *
   * The origin must conform to the configured `CreateOrigin` and have sufficient funds free.
   *
   * `ItemDeposit` funds of sender are reserved.
   *
   * Parameters:
   * - `collection`: The identifier of the new collection. This must not be currently in use.
   * - `admin`: The admin of this collection. The admin is the initial address of each
   * member of the collection's admin team.
   *
   * Emits `Created` event when successful.
   *
   * Weight: `O(1)`
   **/
  | { name: 'Create'; params: { collection: bigint; admin: AccountId32 } }
  /**
   * Issue a new collection of non-fungible items from a privileged origin.
   *
   * This new collection has no items initially.
   *
   * The origin must conform to `ForceOrigin`.
   *
   * Unlike `create`, no funds are reserved.
   *
   * - `collection`: The identifier of the new item. This must not be currently in use.
   * - `owner`: The owner of this collection of items. The owner has full superuser
   * permissions
   * over this item, but may later change and configure the permissions using
   * `transfer_ownership` and `set_team`.
   *
   * Emits `ForceCreated` event when successful.
   *
   * Weight: `O(1)`
   **/
  | { name: 'ForceCreate'; params: { collection: bigint; owner: AccountId32; freeHolding: boolean } }
  /**
   * Destroy a collection of fungible items.
   *
   * The origin must conform to `ForceOrigin` or must be `Signed` and the sender must be the
   * owner of the `collection`.
   *
   * - `collection`: The identifier of the collection to be destroyed.
   * - `witness`: Information on the items minted in the collection. This must be
   * correct.
   *
   * Emits `Destroyed` event when successful.
   *
   * Weight: `O(n + m)` where:
   * - `n = witness.items`
   * - `m = witness.item_metadatas`
   * - `a = witness.attributes`
   **/
  | { name: 'Destroy'; params: { collection: bigint; witness: PalletUniquesDestroyWitness } }
  /**
   * Mint an item of a particular collection.
   *
   * The origin must be Signed and the sender must be the Issuer of the `collection`.
   *
   * - `collection`: The collection of the item to be minted.
   * - `item`: The item value of the item to be minted.
   * - `beneficiary`: The initial owner of the minted item.
   *
   * Emits `Issued` event when successful.
   *
   * Weight: `O(1)`
   **/
  | { name: 'Mint'; params: { collection: bigint; item: bigint; owner: AccountId32 } }
  /**
   * Destroy a single item.
   *
   * Origin must be Signed and the signing account must be either:
   * - the Admin of the `collection`;
   * - the Owner of the `item`;
   *
   * - `collection`: The collection of the item to be burned.
   * - `item`: The item of the item to be burned.
   * - `check_owner`: If `Some` then the operation will fail with `WrongOwner` unless the
   * item is owned by this value.
   *
   * Emits `Burned` with the actual amount burned.
   *
   * Weight: `O(1)`
   * Modes: `check_owner.is_some()`.
   **/
  | { name: 'Burn'; params: { collection: bigint; item: bigint; checkOwner?: AccountId32 | undefined } }
  /**
   * Move an item from the sender account to another.
   *
   * This resets the approved account of the item.
   *
   * Origin must be Signed and the signing account must be either:
   * - the Admin of the `collection`;
   * - the Owner of the `item`;
   * - the approved delegate for the `item` (in this case, the approval is reset).
   *
   * Arguments:
   * - `collection`: The collection of the item to be transferred.
   * - `item`: The item of the item to be transferred.
   * - `dest`: The account to receive ownership of the item.
   *
   * Emits `Transferred`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'Transfer'; params: { collection: bigint; item: bigint; dest: AccountId32 } }
  /**
   * Reevaluate the deposits on some items.
   *
   * Origin must be Signed and the sender should be the Owner of the `collection`.
   *
   * - `collection`: The collection to be frozen.
   * - `items`: The items of the collection whose deposits will be reevaluated.
   *
   * NOTE: This exists as a best-effort function. Any items which are unknown or
   * in the case that the owner account does not have reservable funds to pay for a
   * deposit increase are ignored. Generally the owner isn't going to call this on items
   * whose existing deposit is less than the refreshed deposit as it would only cost them,
   * so it's of little consequence.
   *
   * It will still return an error in the case that the collection is unknown of the signer
   * is not permitted to call it.
   *
   * Weight: `O(items.len())`
   **/
  | { name: 'Redeposit'; params: { collection: bigint; items: Array<bigint> } }
  /**
   * Disallow further unprivileged transfer of an item.
   *
   * Origin must be Signed and the sender should be the Freezer of the `collection`.
   *
   * - `collection`: The collection of the item to be frozen.
   * - `item`: The item of the item to be frozen.
   *
   * Emits `Frozen`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'Freeze'; params: { collection: bigint; item: bigint } }
  /**
   * Re-allow unprivileged transfer of an item.
   *
   * Origin must be Signed and the sender should be the Freezer of the `collection`.
   *
   * - `collection`: The collection of the item to be thawed.
   * - `item`: The item of the item to be thawed.
   *
   * Emits `Thawed`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'Thaw'; params: { collection: bigint; item: bigint } }
  /**
   * Disallow further unprivileged transfers for a whole collection.
   *
   * Origin must be Signed and the sender should be the Freezer of the `collection`.
   *
   * - `collection`: The collection to be frozen.
   *
   * Emits `CollectionFrozen`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'FreezeCollection'; params: { collection: bigint } }
  /**
   * Re-allow unprivileged transfers for a whole collection.
   *
   * Origin must be Signed and the sender should be the Admin of the `collection`.
   *
   * - `collection`: The collection to be thawed.
   *
   * Emits `CollectionThawed`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'ThawCollection'; params: { collection: bigint } }
  /**
   * Change the Owner of a collection.
   *
   * Origin must be Signed and the sender should be the Owner of the `collection`.
   *
   * - `collection`: The collection whose owner should be changed.
   * - `owner`: The new Owner of this collection. They must have called
   * `set_accept_ownership` with `collection` in order for this operation to succeed.
   *
   * Emits `OwnerChanged`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'TransferOwnership'; params: { collection: bigint; newOwner: AccountId32 } }
  /**
   * Change the Issuer, Admin and Freezer of a collection.
   *
   * Origin must be Signed and the sender should be the Owner of the `collection`.
   *
   * - `collection`: The collection whose team should be changed.
   * - `issuer`: The new Issuer of this collection.
   * - `admin`: The new Admin of this collection.
   * - `freezer`: The new Freezer of this collection.
   *
   * Emits `TeamChanged`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'SetTeam'; params: { collection: bigint; issuer: AccountId32; admin: AccountId32; freezer: AccountId32 } }
  /**
   * Approve an item to be transferred by a delegated third-party account.
   *
   * The origin must conform to `ForceOrigin` or must be `Signed` and the sender must be
   * either the owner of the `item` or the admin of the collection.
   *
   * - `collection`: The collection of the item to be approved for delegated transfer.
   * - `item`: The item of the item to be approved for delegated transfer.
   * - `delegate`: The account to delegate permission to transfer the item.
   *
   * Important NOTE: The `approved` account gets reset after each transfer.
   *
   * Emits `ApprovedTransfer` on success.
   *
   * Weight: `O(1)`
   **/
  | { name: 'ApproveTransfer'; params: { collection: bigint; item: bigint; delegate: AccountId32 } }
  /**
   * Cancel the prior approval for the transfer of an item by a delegate.
   *
   * Origin must be either:
   * - the `Force` origin;
   * - `Signed` with the signer being the Admin of the `collection`;
   * - `Signed` with the signer being the Owner of the `item`;
   *
   * Arguments:
   * - `collection`: The collection of the item of whose approval will be cancelled.
   * - `item`: The item of the item of whose approval will be cancelled.
   * - `maybe_check_delegate`: If `Some` will ensure that the given account is the one to
   * which permission of transfer is delegated.
   *
   * Emits `ApprovalCancelled` on success.
   *
   * Weight: `O(1)`
   **/
  | {
      name: 'CancelApproval';
      params: { collection: bigint; item: bigint; maybeCheckDelegate?: AccountId32 | undefined };
    }
  /**
   * Alter the attributes of a given item.
   *
   * Origin must be `ForceOrigin`.
   *
   * - `collection`: The identifier of the item.
   * - `owner`: The new Owner of this item.
   * - `issuer`: The new Issuer of this item.
   * - `admin`: The new Admin of this item.
   * - `freezer`: The new Freezer of this item.
   * - `free_holding`: Whether a deposit is taken for holding an item of this collection.
   * - `is_frozen`: Whether this collection is frozen except for permissioned/admin
   * instructions.
   *
   * Emits `ItemStatusChanged` with the identity of the item.
   *
   * Weight: `O(1)`
   **/
  | {
      name: 'ForceItemStatus';
      params: {
        collection: bigint;
        owner: AccountId32;
        issuer: AccountId32;
        admin: AccountId32;
        freezer: AccountId32;
        freeHolding: boolean;
        isFrozen: boolean;
      };
    }
  /**
   * Set an attribute for a collection or item.
   *
   * Origin must be either `ForceOrigin` or Signed and the sender should be the Owner of the
   * `collection`.
   *
   * If the origin is Signed, then funds of signer are reserved according to the formula:
   * `MetadataDepositBase + DepositPerByte * (key.len + value.len)` taking into
   * account any already reserved funds.
   *
   * - `collection`: The identifier of the collection whose item's metadata to set.
   * - `maybe_item`: The identifier of the item whose metadata to set.
   * - `key`: The key of the attribute.
   * - `value`: The value to which to set the attribute.
   *
   * Emits `AttributeSet`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'SetAttribute'; params: { collection: bigint; maybeItem?: bigint | undefined; key: Bytes; value: Bytes } }
  /**
   * Clear an attribute for a collection or item.
   *
   * Origin must be either `ForceOrigin` or Signed and the sender should be the Owner of the
   * `collection`.
   *
   * Any deposit is freed for the collection's owner.
   *
   * - `collection`: The identifier of the collection whose item's metadata to clear.
   * - `maybe_item`: The identifier of the item whose metadata to clear.
   * - `key`: The key of the attribute.
   *
   * Emits `AttributeCleared`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'ClearAttribute'; params: { collection: bigint; maybeItem?: bigint | undefined; key: Bytes } }
  /**
   * Set the metadata for an item.
   *
   * Origin must be either `ForceOrigin` or Signed and the sender should be the Owner of the
   * `collection`.
   *
   * If the origin is Signed, then funds of signer are reserved according to the formula:
   * `MetadataDepositBase + DepositPerByte * data.len` taking into
   * account any already reserved funds.
   *
   * - `collection`: The identifier of the collection whose item's metadata to set.
   * - `item`: The identifier of the item whose metadata to set.
   * - `data`: The general information of this item. Limited in length by `StringLimit`.
   * - `is_frozen`: Whether the metadata should be frozen against further changes.
   *
   * Emits `MetadataSet`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'SetMetadata'; params: { collection: bigint; item: bigint; data: Bytes; isFrozen: boolean } }
  /**
   * Clear the metadata for an item.
   *
   * Origin must be either `ForceOrigin` or Signed and the sender should be the Owner of the
   * `item`.
   *
   * Any deposit is freed for the collection's owner.
   *
   * - `collection`: The identifier of the collection whose item's metadata to clear.
   * - `item`: The identifier of the item whose metadata to clear.
   *
   * Emits `MetadataCleared`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'ClearMetadata'; params: { collection: bigint; item: bigint } }
  /**
   * Set the metadata for a collection.
   *
   * Origin must be either `ForceOrigin` or `Signed` and the sender should be the Owner of
   * the `collection`.
   *
   * If the origin is `Signed`, then funds of signer are reserved according to the formula:
   * `MetadataDepositBase + DepositPerByte * data.len` taking into
   * account any already reserved funds.
   *
   * - `collection`: The identifier of the item whose metadata to update.
   * - `data`: The general information of this item. Limited in length by `StringLimit`.
   * - `is_frozen`: Whether the metadata should be frozen against further changes.
   *
   * Emits `CollectionMetadataSet`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'SetCollectionMetadata'; params: { collection: bigint; data: Bytes; isFrozen: boolean } }
  /**
   * Clear the metadata for a collection.
   *
   * Origin must be either `ForceOrigin` or `Signed` and the sender should be the Owner of
   * the `collection`.
   *
   * Any deposit is freed for the collection's owner.
   *
   * - `collection`: The identifier of the collection whose metadata to clear.
   *
   * Emits `CollectionMetadataCleared`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'ClearCollectionMetadata'; params: { collection: bigint } }
  /**
   * Set (or reset) the acceptance of ownership for a particular account.
   *
   * Origin must be `Signed` and if `maybe_collection` is `Some`, then the signer must have a
   * provider reference.
   *
   * - `maybe_collection`: The identifier of the collection whose ownership the signer is
   * willing to accept, or if `None`, an indication that the signer is willing to accept no
   * ownership transferal.
   *
   * Emits `OwnershipAcceptanceChanged`.
   **/
  | { name: 'SetAcceptOwnership'; params: { maybeCollection?: bigint | undefined } }
  /**
   * Set the maximum amount of items a collection could have.
   *
   * Origin must be either `ForceOrigin` or `Signed` and the sender should be the Owner of
   * the `collection`.
   *
   * Note: This function can only succeed once per collection.
   *
   * - `collection`: The identifier of the collection to change.
   * - `max_supply`: The maximum amount of items a collection could have.
   *
   * Emits `CollectionMaxSupplySet` event when successful.
   **/
  | { name: 'SetCollectionMaxSupply'; params: { collection: bigint; maxSupply: number } }
  /**
   * Set (or reset) the price for an item.
   *
   * Origin must be Signed and must be the owner of the asset `item`.
   *
   * - `collection`: The collection of the item.
   * - `item`: The item to set the price for.
   * - `price`: The price for the item. Pass `None`, to reset the price.
   * - `buyer`: Restricts the buy operation to a specific account.
   *
   * Emits `ItemPriceSet` on success if the price is not `None`.
   * Emits `ItemPriceRemoved` on success if the price is `None`.
   **/
  | {
      name: 'SetPrice';
      params: {
        collection: bigint;
        item: bigint;
        price?: bigint | undefined;
        whitelistedBuyer?: AccountId32 | undefined;
      };
    }
  /**
   * Allows to buy an item if it's up for sale.
   *
   * Origin must be Signed and must not be the owner of the `item`.
   *
   * - `collection`: The collection of the item.
   * - `item`: The item the sender wants to buy.
   * - `bid_price`: The price the sender is willing to pay.
   *
   * Emits `ItemBought` on success.
   **/
  | { name: 'BuyItem'; params: { collection: bigint; item: bigint; bidPrice: bigint } };

export type PalletUniquesCallLike =
  /**
   * Issue a new collection of non-fungible items from a public origin.
   *
   * This new collection has no items initially and its owner is the origin.
   *
   * The origin must conform to the configured `CreateOrigin` and have sufficient funds free.
   *
   * `ItemDeposit` funds of sender are reserved.
   *
   * Parameters:
   * - `collection`: The identifier of the new collection. This must not be currently in use.
   * - `admin`: The admin of this collection. The admin is the initial address of each
   * member of the collection's admin team.
   *
   * Emits `Created` event when successful.
   *
   * Weight: `O(1)`
   **/
  | { name: 'Create'; params: { collection: bigint; admin: AccountId32Like } }
  /**
   * Issue a new collection of non-fungible items from a privileged origin.
   *
   * This new collection has no items initially.
   *
   * The origin must conform to `ForceOrigin`.
   *
   * Unlike `create`, no funds are reserved.
   *
   * - `collection`: The identifier of the new item. This must not be currently in use.
   * - `owner`: The owner of this collection of items. The owner has full superuser
   * permissions
   * over this item, but may later change and configure the permissions using
   * `transfer_ownership` and `set_team`.
   *
   * Emits `ForceCreated` event when successful.
   *
   * Weight: `O(1)`
   **/
  | { name: 'ForceCreate'; params: { collection: bigint; owner: AccountId32Like; freeHolding: boolean } }
  /**
   * Destroy a collection of fungible items.
   *
   * The origin must conform to `ForceOrigin` or must be `Signed` and the sender must be the
   * owner of the `collection`.
   *
   * - `collection`: The identifier of the collection to be destroyed.
   * - `witness`: Information on the items minted in the collection. This must be
   * correct.
   *
   * Emits `Destroyed` event when successful.
   *
   * Weight: `O(n + m)` where:
   * - `n = witness.items`
   * - `m = witness.item_metadatas`
   * - `a = witness.attributes`
   **/
  | { name: 'Destroy'; params: { collection: bigint; witness: PalletUniquesDestroyWitness } }
  /**
   * Mint an item of a particular collection.
   *
   * The origin must be Signed and the sender must be the Issuer of the `collection`.
   *
   * - `collection`: The collection of the item to be minted.
   * - `item`: The item value of the item to be minted.
   * - `beneficiary`: The initial owner of the minted item.
   *
   * Emits `Issued` event when successful.
   *
   * Weight: `O(1)`
   **/
  | { name: 'Mint'; params: { collection: bigint; item: bigint; owner: AccountId32Like } }
  /**
   * Destroy a single item.
   *
   * Origin must be Signed and the signing account must be either:
   * - the Admin of the `collection`;
   * - the Owner of the `item`;
   *
   * - `collection`: The collection of the item to be burned.
   * - `item`: The item of the item to be burned.
   * - `check_owner`: If `Some` then the operation will fail with `WrongOwner` unless the
   * item is owned by this value.
   *
   * Emits `Burned` with the actual amount burned.
   *
   * Weight: `O(1)`
   * Modes: `check_owner.is_some()`.
   **/
  | { name: 'Burn'; params: { collection: bigint; item: bigint; checkOwner?: AccountId32Like | undefined } }
  /**
   * Move an item from the sender account to another.
   *
   * This resets the approved account of the item.
   *
   * Origin must be Signed and the signing account must be either:
   * - the Admin of the `collection`;
   * - the Owner of the `item`;
   * - the approved delegate for the `item` (in this case, the approval is reset).
   *
   * Arguments:
   * - `collection`: The collection of the item to be transferred.
   * - `item`: The item of the item to be transferred.
   * - `dest`: The account to receive ownership of the item.
   *
   * Emits `Transferred`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'Transfer'; params: { collection: bigint; item: bigint; dest: AccountId32Like } }
  /**
   * Reevaluate the deposits on some items.
   *
   * Origin must be Signed and the sender should be the Owner of the `collection`.
   *
   * - `collection`: The collection to be frozen.
   * - `items`: The items of the collection whose deposits will be reevaluated.
   *
   * NOTE: This exists as a best-effort function. Any items which are unknown or
   * in the case that the owner account does not have reservable funds to pay for a
   * deposit increase are ignored. Generally the owner isn't going to call this on items
   * whose existing deposit is less than the refreshed deposit as it would only cost them,
   * so it's of little consequence.
   *
   * It will still return an error in the case that the collection is unknown of the signer
   * is not permitted to call it.
   *
   * Weight: `O(items.len())`
   **/
  | { name: 'Redeposit'; params: { collection: bigint; items: Array<bigint> } }
  /**
   * Disallow further unprivileged transfer of an item.
   *
   * Origin must be Signed and the sender should be the Freezer of the `collection`.
   *
   * - `collection`: The collection of the item to be frozen.
   * - `item`: The item of the item to be frozen.
   *
   * Emits `Frozen`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'Freeze'; params: { collection: bigint; item: bigint } }
  /**
   * Re-allow unprivileged transfer of an item.
   *
   * Origin must be Signed and the sender should be the Freezer of the `collection`.
   *
   * - `collection`: The collection of the item to be thawed.
   * - `item`: The item of the item to be thawed.
   *
   * Emits `Thawed`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'Thaw'; params: { collection: bigint; item: bigint } }
  /**
   * Disallow further unprivileged transfers for a whole collection.
   *
   * Origin must be Signed and the sender should be the Freezer of the `collection`.
   *
   * - `collection`: The collection to be frozen.
   *
   * Emits `CollectionFrozen`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'FreezeCollection'; params: { collection: bigint } }
  /**
   * Re-allow unprivileged transfers for a whole collection.
   *
   * Origin must be Signed and the sender should be the Admin of the `collection`.
   *
   * - `collection`: The collection to be thawed.
   *
   * Emits `CollectionThawed`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'ThawCollection'; params: { collection: bigint } }
  /**
   * Change the Owner of a collection.
   *
   * Origin must be Signed and the sender should be the Owner of the `collection`.
   *
   * - `collection`: The collection whose owner should be changed.
   * - `owner`: The new Owner of this collection. They must have called
   * `set_accept_ownership` with `collection` in order for this operation to succeed.
   *
   * Emits `OwnerChanged`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'TransferOwnership'; params: { collection: bigint; newOwner: AccountId32Like } }
  /**
   * Change the Issuer, Admin and Freezer of a collection.
   *
   * Origin must be Signed and the sender should be the Owner of the `collection`.
   *
   * - `collection`: The collection whose team should be changed.
   * - `issuer`: The new Issuer of this collection.
   * - `admin`: The new Admin of this collection.
   * - `freezer`: The new Freezer of this collection.
   *
   * Emits `TeamChanged`.
   *
   * Weight: `O(1)`
   **/
  | {
      name: 'SetTeam';
      params: { collection: bigint; issuer: AccountId32Like; admin: AccountId32Like; freezer: AccountId32Like };
    }
  /**
   * Approve an item to be transferred by a delegated third-party account.
   *
   * The origin must conform to `ForceOrigin` or must be `Signed` and the sender must be
   * either the owner of the `item` or the admin of the collection.
   *
   * - `collection`: The collection of the item to be approved for delegated transfer.
   * - `item`: The item of the item to be approved for delegated transfer.
   * - `delegate`: The account to delegate permission to transfer the item.
   *
   * Important NOTE: The `approved` account gets reset after each transfer.
   *
   * Emits `ApprovedTransfer` on success.
   *
   * Weight: `O(1)`
   **/
  | { name: 'ApproveTransfer'; params: { collection: bigint; item: bigint; delegate: AccountId32Like } }
  /**
   * Cancel the prior approval for the transfer of an item by a delegate.
   *
   * Origin must be either:
   * - the `Force` origin;
   * - `Signed` with the signer being the Admin of the `collection`;
   * - `Signed` with the signer being the Owner of the `item`;
   *
   * Arguments:
   * - `collection`: The collection of the item of whose approval will be cancelled.
   * - `item`: The item of the item of whose approval will be cancelled.
   * - `maybe_check_delegate`: If `Some` will ensure that the given account is the one to
   * which permission of transfer is delegated.
   *
   * Emits `ApprovalCancelled` on success.
   *
   * Weight: `O(1)`
   **/
  | {
      name: 'CancelApproval';
      params: { collection: bigint; item: bigint; maybeCheckDelegate?: AccountId32Like | undefined };
    }
  /**
   * Alter the attributes of a given item.
   *
   * Origin must be `ForceOrigin`.
   *
   * - `collection`: The identifier of the item.
   * - `owner`: The new Owner of this item.
   * - `issuer`: The new Issuer of this item.
   * - `admin`: The new Admin of this item.
   * - `freezer`: The new Freezer of this item.
   * - `free_holding`: Whether a deposit is taken for holding an item of this collection.
   * - `is_frozen`: Whether this collection is frozen except for permissioned/admin
   * instructions.
   *
   * Emits `ItemStatusChanged` with the identity of the item.
   *
   * Weight: `O(1)`
   **/
  | {
      name: 'ForceItemStatus';
      params: {
        collection: bigint;
        owner: AccountId32Like;
        issuer: AccountId32Like;
        admin: AccountId32Like;
        freezer: AccountId32Like;
        freeHolding: boolean;
        isFrozen: boolean;
      };
    }
  /**
   * Set an attribute for a collection or item.
   *
   * Origin must be either `ForceOrigin` or Signed and the sender should be the Owner of the
   * `collection`.
   *
   * If the origin is Signed, then funds of signer are reserved according to the formula:
   * `MetadataDepositBase + DepositPerByte * (key.len + value.len)` taking into
   * account any already reserved funds.
   *
   * - `collection`: The identifier of the collection whose item's metadata to set.
   * - `maybe_item`: The identifier of the item whose metadata to set.
   * - `key`: The key of the attribute.
   * - `value`: The value to which to set the attribute.
   *
   * Emits `AttributeSet`.
   *
   * Weight: `O(1)`
   **/
  | {
      name: 'SetAttribute';
      params: { collection: bigint; maybeItem?: bigint | undefined; key: BytesLike; value: BytesLike };
    }
  /**
   * Clear an attribute for a collection or item.
   *
   * Origin must be either `ForceOrigin` or Signed and the sender should be the Owner of the
   * `collection`.
   *
   * Any deposit is freed for the collection's owner.
   *
   * - `collection`: The identifier of the collection whose item's metadata to clear.
   * - `maybe_item`: The identifier of the item whose metadata to clear.
   * - `key`: The key of the attribute.
   *
   * Emits `AttributeCleared`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'ClearAttribute'; params: { collection: bigint; maybeItem?: bigint | undefined; key: BytesLike } }
  /**
   * Set the metadata for an item.
   *
   * Origin must be either `ForceOrigin` or Signed and the sender should be the Owner of the
   * `collection`.
   *
   * If the origin is Signed, then funds of signer are reserved according to the formula:
   * `MetadataDepositBase + DepositPerByte * data.len` taking into
   * account any already reserved funds.
   *
   * - `collection`: The identifier of the collection whose item's metadata to set.
   * - `item`: The identifier of the item whose metadata to set.
   * - `data`: The general information of this item. Limited in length by `StringLimit`.
   * - `is_frozen`: Whether the metadata should be frozen against further changes.
   *
   * Emits `MetadataSet`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'SetMetadata'; params: { collection: bigint; item: bigint; data: BytesLike; isFrozen: boolean } }
  /**
   * Clear the metadata for an item.
   *
   * Origin must be either `ForceOrigin` or Signed and the sender should be the Owner of the
   * `item`.
   *
   * Any deposit is freed for the collection's owner.
   *
   * - `collection`: The identifier of the collection whose item's metadata to clear.
   * - `item`: The identifier of the item whose metadata to clear.
   *
   * Emits `MetadataCleared`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'ClearMetadata'; params: { collection: bigint; item: bigint } }
  /**
   * Set the metadata for a collection.
   *
   * Origin must be either `ForceOrigin` or `Signed` and the sender should be the Owner of
   * the `collection`.
   *
   * If the origin is `Signed`, then funds of signer are reserved according to the formula:
   * `MetadataDepositBase + DepositPerByte * data.len` taking into
   * account any already reserved funds.
   *
   * - `collection`: The identifier of the item whose metadata to update.
   * - `data`: The general information of this item. Limited in length by `StringLimit`.
   * - `is_frozen`: Whether the metadata should be frozen against further changes.
   *
   * Emits `CollectionMetadataSet`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'SetCollectionMetadata'; params: { collection: bigint; data: BytesLike; isFrozen: boolean } }
  /**
   * Clear the metadata for a collection.
   *
   * Origin must be either `ForceOrigin` or `Signed` and the sender should be the Owner of
   * the `collection`.
   *
   * Any deposit is freed for the collection's owner.
   *
   * - `collection`: The identifier of the collection whose metadata to clear.
   *
   * Emits `CollectionMetadataCleared`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'ClearCollectionMetadata'; params: { collection: bigint } }
  /**
   * Set (or reset) the acceptance of ownership for a particular account.
   *
   * Origin must be `Signed` and if `maybe_collection` is `Some`, then the signer must have a
   * provider reference.
   *
   * - `maybe_collection`: The identifier of the collection whose ownership the signer is
   * willing to accept, or if `None`, an indication that the signer is willing to accept no
   * ownership transferal.
   *
   * Emits `OwnershipAcceptanceChanged`.
   **/
  | { name: 'SetAcceptOwnership'; params: { maybeCollection?: bigint | undefined } }
  /**
   * Set the maximum amount of items a collection could have.
   *
   * Origin must be either `ForceOrigin` or `Signed` and the sender should be the Owner of
   * the `collection`.
   *
   * Note: This function can only succeed once per collection.
   *
   * - `collection`: The identifier of the collection to change.
   * - `max_supply`: The maximum amount of items a collection could have.
   *
   * Emits `CollectionMaxSupplySet` event when successful.
   **/
  | { name: 'SetCollectionMaxSupply'; params: { collection: bigint; maxSupply: number } }
  /**
   * Set (or reset) the price for an item.
   *
   * Origin must be Signed and must be the owner of the asset `item`.
   *
   * - `collection`: The collection of the item.
   * - `item`: The item to set the price for.
   * - `price`: The price for the item. Pass `None`, to reset the price.
   * - `buyer`: Restricts the buy operation to a specific account.
   *
   * Emits `ItemPriceSet` on success if the price is not `None`.
   * Emits `ItemPriceRemoved` on success if the price is `None`.
   **/
  | {
      name: 'SetPrice';
      params: {
        collection: bigint;
        item: bigint;
        price?: bigint | undefined;
        whitelistedBuyer?: AccountId32Like | undefined;
      };
    }
  /**
   * Allows to buy an item if it's up for sale.
   *
   * Origin must be Signed and must not be the owner of the `item`.
   *
   * - `collection`: The collection of the item.
   * - `item`: The item the sender wants to buy.
   * - `bid_price`: The price the sender is willing to pay.
   *
   * Emits `ItemBought` on success.
   **/
  | { name: 'BuyItem'; params: { collection: bigint; item: bigint; bidPrice: bigint } };

export type PalletUniquesDestroyWitness = { items: number; itemMetadatas: number; attributes: number };

/**
 * Identity pallet declaration.
 **/
export type PalletIdentityCall =
  /**
   * Add a registrar to the system.
   *
   * The dispatch origin for this call must be `T::RegistrarOrigin`.
   *
   * - `account`: the account of the registrar.
   *
   * Emits `RegistrarAdded` if successful.
   **/
  | { name: 'AddRegistrar'; params: { account: AccountId32 } }
  /**
   * Set an account's identity information and reserve the appropriate deposit.
   *
   * If the account already has identity information, the deposit is taken as part payment
   * for the new deposit.
   *
   * The dispatch origin for this call must be _Signed_.
   *
   * - `info`: The identity information.
   *
   * Emits `IdentitySet` if successful.
   **/
  | { name: 'SetIdentity'; params: { info: PalletIdentityLegacyIdentityInfo } }
  /**
   * Set the sub-accounts of the sender.
   *
   * Payment: Any aggregate balance reserved by previous `set_subs` calls will be returned
   * and an amount `SubAccountDeposit` will be reserved for each item in `subs`.
   *
   * The dispatch origin for this call must be _Signed_ and the sender must have a registered
   * identity.
   *
   * - `subs`: The identity's (new) sub-accounts.
   **/
  | { name: 'SetSubs'; params: { subs: Array<[AccountId32, Data]> } }
  /**
   * Clear an account's identity info and all sub-accounts and return all deposits.
   *
   * Payment: All reserved balances on the account are returned.
   *
   * The dispatch origin for this call must be _Signed_ and the sender must have a registered
   * identity.
   *
   * Emits `IdentityCleared` if successful.
   **/
  | { name: 'ClearIdentity' }
  /**
   * Request a judgement from a registrar.
   *
   * Payment: At most `max_fee` will be reserved for payment to the registrar if judgement
   * given.
   *
   * The dispatch origin for this call must be _Signed_ and the sender must have a
   * registered identity.
   *
   * - `reg_index`: The index of the registrar whose judgement is requested.
   * - `max_fee`: The maximum fee that may be paid. This should just be auto-populated as:
   *
   * ```nocompile
   * Registrars::<T>::get().get(reg_index).unwrap().fee
   * ```
   *
   * Emits `JudgementRequested` if successful.
   **/
  | { name: 'RequestJudgement'; params: { regIndex: number; maxFee: bigint } }
  /**
   * Cancel a previous request.
   *
   * Payment: A previously reserved deposit is returned on success.
   *
   * The dispatch origin for this call must be _Signed_ and the sender must have a
   * registered identity.
   *
   * - `reg_index`: The index of the registrar whose judgement is no longer requested.
   *
   * Emits `JudgementUnrequested` if successful.
   **/
  | { name: 'CancelRequest'; params: { regIndex: number } }
  /**
   * Set the fee required for a judgement to be requested from a registrar.
   *
   * The dispatch origin for this call must be _Signed_ and the sender must be the account
   * of the registrar whose index is `index`.
   *
   * - `index`: the index of the registrar whose fee is to be set.
   * - `fee`: the new fee.
   **/
  | { name: 'SetFee'; params: { index: number; fee: bigint } }
  /**
   * Change the account associated with a registrar.
   *
   * The dispatch origin for this call must be _Signed_ and the sender must be the account
   * of the registrar whose index is `index`.
   *
   * - `index`: the index of the registrar whose fee is to be set.
   * - `new`: the new account ID.
   **/
  | { name: 'SetAccountId'; params: { index: number; new: AccountId32 } }
  /**
   * Set the field information for a registrar.
   *
   * The dispatch origin for this call must be _Signed_ and the sender must be the account
   * of the registrar whose index is `index`.
   *
   * - `index`: the index of the registrar whose fee is to be set.
   * - `fields`: the fields that the registrar concerns themselves with.
   **/
  | { name: 'SetFields'; params: { index: number; fields: bigint } }
  /**
   * Provide a judgement for an account's identity.
   *
   * The dispatch origin for this call must be _Signed_ and the sender must be the account
   * of the registrar whose index is `reg_index`.
   *
   * - `reg_index`: the index of the registrar whose judgement is being made.
   * - `target`: the account whose identity the judgement is upon. This must be an account
   * with a registered identity.
   * - `judgement`: the judgement of the registrar of index `reg_index` about `target`.
   * - `identity`: The hash of the [`IdentityInformationProvider`] for that the judgement is
   * provided.
   *
   * Note: Judgements do not apply to a username.
   *
   * Emits `JudgementGiven` if successful.
   **/
  | {
      name: 'ProvideJudgement';
      params: { regIndex: number; target: AccountId32; judgement: PalletIdentityJudgement; identity: H256 };
    }
  /**
   * Remove an account's identity and sub-account information and slash the deposits.
   *
   * Payment: Reserved balances from `set_subs` and `set_identity` are slashed and handled by
   * `Slash`. Verification request deposits are not returned; they should be cancelled
   * manually using `cancel_request`.
   *
   * The dispatch origin for this call must match `T::ForceOrigin`.
   *
   * - `target`: the account whose identity the judgement is upon. This must be an account
   * with a registered identity.
   *
   * Emits `IdentityKilled` if successful.
   **/
  | { name: 'KillIdentity'; params: { target: AccountId32 } }
  /**
   * Add the given account to the sender's subs.
   *
   * Payment: Balance reserved by a previous `set_subs` call for one sub will be repatriated
   * to the sender.
   *
   * The dispatch origin for this call must be _Signed_ and the sender must have a registered
   * sub identity of `sub`.
   **/
  | { name: 'AddSub'; params: { sub: AccountId32; data: Data } }
  /**
   * Alter the associated name of the given sub-account.
   *
   * The dispatch origin for this call must be _Signed_ and the sender must have a registered
   * sub identity of `sub`.
   **/
  | { name: 'RenameSub'; params: { sub: AccountId32; data: Data } }
  /**
   * Remove the given account from the sender's subs.
   *
   * Payment: Balance reserved by a previous `set_subs` call for one sub will be repatriated
   * to the sender.
   *
   * The dispatch origin for this call must be _Signed_ and the sender must have a registered
   * sub identity of `sub`.
   **/
  | { name: 'RemoveSub'; params: { sub: AccountId32 } }
  /**
   * Remove the sender as a sub-account.
   *
   * Payment: Balance reserved by a previous `set_subs` call for one sub will be repatriated
   * to the sender (*not* the original depositor).
   *
   * The dispatch origin for this call must be _Signed_ and the sender must have a registered
   * super-identity.
   *
   * NOTE: This should not normally be used, but is provided in the case that the non-
   * controller of an account is maliciously registered as a sub-account.
   **/
  | { name: 'QuitSub' }
  /**
   * Add an `AccountId` with permission to grant usernames with a given `suffix` appended.
   *
   * The authority can grant up to `allocation` usernames. To top up their allocation, they
   * should just issue (or request via governance) a new `add_username_authority` call.
   **/
  | { name: 'AddUsernameAuthority'; params: { authority: AccountId32; suffix: Bytes; allocation: number } }
  /**
   * Remove `authority` from the username authorities.
   **/
  | { name: 'RemoveUsernameAuthority'; params: { authority: AccountId32 } }
  /**
   * Set the username for `who`. Must be called by a username authority.
   *
   * The authority must have an `allocation`. Users can either pre-sign their usernames or
   * accept them later.
   *
   * Usernames must:
   * - Only contain lowercase ASCII characters or digits.
   * - When combined with the suffix of the issuing authority be _less than_ the
   * `MaxUsernameLength`.
   **/
  | {
      name: 'SetUsernameFor';
      params: { who: AccountId32; username: Bytes; signature?: SpRuntimeMultiSignature | undefined };
    }
  /**
   * Accept a given username that an `authority` granted. The call must include the full
   * username, as in `username.suffix`.
   **/
  | { name: 'AcceptUsername'; params: { username: Bytes } }
  /**
   * Remove an expired username approval. The username was approved by an authority but never
   * accepted by the user and must now be beyond its expiration. The call must include the
   * full username, as in `username.suffix`.
   **/
  | { name: 'RemoveExpiredApproval'; params: { username: Bytes } }
  /**
   * Set a given username as the primary. The username should include the suffix.
   **/
  | { name: 'SetPrimaryUsername'; params: { username: Bytes } }
  /**
   * Remove a username that corresponds to an account with no identity. Exists when a user
   * gets a username but then calls `clear_identity`.
   **/
  | { name: 'RemoveDanglingUsername'; params: { username: Bytes } };

export type PalletIdentityCallLike =
  /**
   * Add a registrar to the system.
   *
   * The dispatch origin for this call must be `T::RegistrarOrigin`.
   *
   * - `account`: the account of the registrar.
   *
   * Emits `RegistrarAdded` if successful.
   **/
  | { name: 'AddRegistrar'; params: { account: AccountId32Like } }
  /**
   * Set an account's identity information and reserve the appropriate deposit.
   *
   * If the account already has identity information, the deposit is taken as part payment
   * for the new deposit.
   *
   * The dispatch origin for this call must be _Signed_.
   *
   * - `info`: The identity information.
   *
   * Emits `IdentitySet` if successful.
   **/
  | { name: 'SetIdentity'; params: { info: PalletIdentityLegacyIdentityInfo } }
  /**
   * Set the sub-accounts of the sender.
   *
   * Payment: Any aggregate balance reserved by previous `set_subs` calls will be returned
   * and an amount `SubAccountDeposit` will be reserved for each item in `subs`.
   *
   * The dispatch origin for this call must be _Signed_ and the sender must have a registered
   * identity.
   *
   * - `subs`: The identity's (new) sub-accounts.
   **/
  | { name: 'SetSubs'; params: { subs: Array<[AccountId32Like, Data]> } }
  /**
   * Clear an account's identity info and all sub-accounts and return all deposits.
   *
   * Payment: All reserved balances on the account are returned.
   *
   * The dispatch origin for this call must be _Signed_ and the sender must have a registered
   * identity.
   *
   * Emits `IdentityCleared` if successful.
   **/
  | { name: 'ClearIdentity' }
  /**
   * Request a judgement from a registrar.
   *
   * Payment: At most `max_fee` will be reserved for payment to the registrar if judgement
   * given.
   *
   * The dispatch origin for this call must be _Signed_ and the sender must have a
   * registered identity.
   *
   * - `reg_index`: The index of the registrar whose judgement is requested.
   * - `max_fee`: The maximum fee that may be paid. This should just be auto-populated as:
   *
   * ```nocompile
   * Registrars::<T>::get().get(reg_index).unwrap().fee
   * ```
   *
   * Emits `JudgementRequested` if successful.
   **/
  | { name: 'RequestJudgement'; params: { regIndex: number; maxFee: bigint } }
  /**
   * Cancel a previous request.
   *
   * Payment: A previously reserved deposit is returned on success.
   *
   * The dispatch origin for this call must be _Signed_ and the sender must have a
   * registered identity.
   *
   * - `reg_index`: The index of the registrar whose judgement is no longer requested.
   *
   * Emits `JudgementUnrequested` if successful.
   **/
  | { name: 'CancelRequest'; params: { regIndex: number } }
  /**
   * Set the fee required for a judgement to be requested from a registrar.
   *
   * The dispatch origin for this call must be _Signed_ and the sender must be the account
   * of the registrar whose index is `index`.
   *
   * - `index`: the index of the registrar whose fee is to be set.
   * - `fee`: the new fee.
   **/
  | { name: 'SetFee'; params: { index: number; fee: bigint } }
  /**
   * Change the account associated with a registrar.
   *
   * The dispatch origin for this call must be _Signed_ and the sender must be the account
   * of the registrar whose index is `index`.
   *
   * - `index`: the index of the registrar whose fee is to be set.
   * - `new`: the new account ID.
   **/
  | { name: 'SetAccountId'; params: { index: number; new: AccountId32Like } }
  /**
   * Set the field information for a registrar.
   *
   * The dispatch origin for this call must be _Signed_ and the sender must be the account
   * of the registrar whose index is `index`.
   *
   * - `index`: the index of the registrar whose fee is to be set.
   * - `fields`: the fields that the registrar concerns themselves with.
   **/
  | { name: 'SetFields'; params: { index: number; fields: bigint } }
  /**
   * Provide a judgement for an account's identity.
   *
   * The dispatch origin for this call must be _Signed_ and the sender must be the account
   * of the registrar whose index is `reg_index`.
   *
   * - `reg_index`: the index of the registrar whose judgement is being made.
   * - `target`: the account whose identity the judgement is upon. This must be an account
   * with a registered identity.
   * - `judgement`: the judgement of the registrar of index `reg_index` about `target`.
   * - `identity`: The hash of the [`IdentityInformationProvider`] for that the judgement is
   * provided.
   *
   * Note: Judgements do not apply to a username.
   *
   * Emits `JudgementGiven` if successful.
   **/
  | {
      name: 'ProvideJudgement';
      params: { regIndex: number; target: AccountId32Like; judgement: PalletIdentityJudgement; identity: H256 };
    }
  /**
   * Remove an account's identity and sub-account information and slash the deposits.
   *
   * Payment: Reserved balances from `set_subs` and `set_identity` are slashed and handled by
   * `Slash`. Verification request deposits are not returned; they should be cancelled
   * manually using `cancel_request`.
   *
   * The dispatch origin for this call must match `T::ForceOrigin`.
   *
   * - `target`: the account whose identity the judgement is upon. This must be an account
   * with a registered identity.
   *
   * Emits `IdentityKilled` if successful.
   **/
  | { name: 'KillIdentity'; params: { target: AccountId32Like } }
  /**
   * Add the given account to the sender's subs.
   *
   * Payment: Balance reserved by a previous `set_subs` call for one sub will be repatriated
   * to the sender.
   *
   * The dispatch origin for this call must be _Signed_ and the sender must have a registered
   * sub identity of `sub`.
   **/
  | { name: 'AddSub'; params: { sub: AccountId32Like; data: Data } }
  /**
   * Alter the associated name of the given sub-account.
   *
   * The dispatch origin for this call must be _Signed_ and the sender must have a registered
   * sub identity of `sub`.
   **/
  | { name: 'RenameSub'; params: { sub: AccountId32Like; data: Data } }
  /**
   * Remove the given account from the sender's subs.
   *
   * Payment: Balance reserved by a previous `set_subs` call for one sub will be repatriated
   * to the sender.
   *
   * The dispatch origin for this call must be _Signed_ and the sender must have a registered
   * sub identity of `sub`.
   **/
  | { name: 'RemoveSub'; params: { sub: AccountId32Like } }
  /**
   * Remove the sender as a sub-account.
   *
   * Payment: Balance reserved by a previous `set_subs` call for one sub will be repatriated
   * to the sender (*not* the original depositor).
   *
   * The dispatch origin for this call must be _Signed_ and the sender must have a registered
   * super-identity.
   *
   * NOTE: This should not normally be used, but is provided in the case that the non-
   * controller of an account is maliciously registered as a sub-account.
   **/
  | { name: 'QuitSub' }
  /**
   * Add an `AccountId` with permission to grant usernames with a given `suffix` appended.
   *
   * The authority can grant up to `allocation` usernames. To top up their allocation, they
   * should just issue (or request via governance) a new `add_username_authority` call.
   **/
  | { name: 'AddUsernameAuthority'; params: { authority: AccountId32Like; suffix: BytesLike; allocation: number } }
  /**
   * Remove `authority` from the username authorities.
   **/
  | { name: 'RemoveUsernameAuthority'; params: { authority: AccountId32Like } }
  /**
   * Set the username for `who`. Must be called by a username authority.
   *
   * The authority must have an `allocation`. Users can either pre-sign their usernames or
   * accept them later.
   *
   * Usernames must:
   * - Only contain lowercase ASCII characters or digits.
   * - When combined with the suffix of the issuing authority be _less than_ the
   * `MaxUsernameLength`.
   **/
  | {
      name: 'SetUsernameFor';
      params: { who: AccountId32Like; username: BytesLike; signature?: SpRuntimeMultiSignature | undefined };
    }
  /**
   * Accept a given username that an `authority` granted. The call must include the full
   * username, as in `username.suffix`.
   **/
  | { name: 'AcceptUsername'; params: { username: BytesLike } }
  /**
   * Remove an expired username approval. The username was approved by an authority but never
   * accepted by the user and must now be beyond its expiration. The call must include the
   * full username, as in `username.suffix`.
   **/
  | { name: 'RemoveExpiredApproval'; params: { username: BytesLike } }
  /**
   * Set a given username as the primary. The username should include the suffix.
   **/
  | { name: 'SetPrimaryUsername'; params: { username: BytesLike } }
  /**
   * Remove a username that corresponds to an account with no identity. Exists when a user
   * gets a username but then calls `clear_identity`.
   **/
  | { name: 'RemoveDanglingUsername'; params: { username: BytesLike } };

export type PalletIdentityLegacyIdentityInfo = {
  additional: Array<[Data, Data]>;
  display: Data;
  legal: Data;
  web: Data;
  riot: Data;
  email: Data;
  pgpFingerprint?: FixedBytes<20> | undefined;
  image: Data;
  twitter: Data;
};

export type PalletIdentityJudgement =
  | { type: 'Unknown' }
  | { type: 'FeePaid'; value: bigint }
  | { type: 'Reasonable' }
  | { type: 'KnownGood' }
  | { type: 'OutOfDate' }
  | { type: 'LowQuality' }
  | { type: 'Erroneous' };

export type SpRuntimeMultiSignature =
  | { type: 'Ed25519'; value: FixedBytes<64> }
  | { type: 'Sr25519'; value: FixedBytes<64> }
  | { type: 'Ecdsa'; value: FixedBytes<65> };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletMultisigCall =
  /**
   * Immediately dispatch a multi-signature call using a single approval from the caller.
   *
   * The dispatch origin for this call must be _Signed_.
   *
   * - `other_signatories`: The accounts (other than the sender) who are part of the
   * multi-signature, but do not participate in the approval process.
   * - `call`: The call to be executed.
   *
   * Result is equivalent to the dispatched result.
   *
   * ## Complexity
   * O(Z + C) where Z is the length of the call and C its execution weight.
   **/
  | { name: 'AsMultiThreshold1'; params: { otherSignatories: Array<AccountId32>; call: BasiliskRuntimeRuntimeCall } }
  /**
   * Register approval for a dispatch to be made from a deterministic composite account if
   * approved by a total of `threshold - 1` of `other_signatories`.
   *
   * If there are enough, then dispatch the call.
   *
   * Payment: `DepositBase` will be reserved if this is the first approval, plus
   * `threshold` times `DepositFactor`. It is returned once this dispatch happens or
   * is cancelled.
   *
   * The dispatch origin for this call must be _Signed_.
   *
   * - `threshold`: The total number of approvals for this dispatch before it is executed.
   * - `other_signatories`: The accounts (other than the sender) who can approve this
   * dispatch. May not be empty.
   * - `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is
   * not the first approval, then it must be `Some`, with the timepoint (block number and
   * transaction index) of the first approval transaction.
   * - `call`: The call to be executed.
   *
   * NOTE: Unless this is the final approval, you will generally want to use
   * `approve_as_multi` instead, since it only requires a hash of the call.
   *
   * Result is equivalent to the dispatched result if `threshold` is exactly `1`. Otherwise
   * on success, result is `Ok` and the result from the interior call, if it was executed,
   * may be found in the deposited `MultisigExecuted` event.
   *
   * ## Complexity
   * - `O(S + Z + Call)`.
   * - Up to one balance-reserve or unreserve operation.
   * - One passthrough operation, one insert, both `O(S)` where `S` is the number of
   * signatories. `S` is capped by `MaxSignatories`, with weight being proportional.
   * - One call encode & hash, both of complexity `O(Z)` where `Z` is tx-len.
   * - One encode & hash, both of complexity `O(S)`.
   * - Up to one binary search and insert (`O(logS + S)`).
   * - I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove.
   * - One event.
   * - The weight of the `call`.
   * - Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit
   * taken for its lifetime of `DepositBase + threshold * DepositFactor`.
   **/
  | {
      name: 'AsMulti';
      params: {
        threshold: number;
        otherSignatories: Array<AccountId32>;
        maybeTimepoint?: PalletMultisigTimepoint | undefined;
        call: BasiliskRuntimeRuntimeCall;
        maxWeight: SpWeightsWeightV2Weight;
      };
    }
  /**
   * Register approval for a dispatch to be made from a deterministic composite account if
   * approved by a total of `threshold - 1` of `other_signatories`.
   *
   * Payment: `DepositBase` will be reserved if this is the first approval, plus
   * `threshold` times `DepositFactor`. It is returned once this dispatch happens or
   * is cancelled.
   *
   * The dispatch origin for this call must be _Signed_.
   *
   * - `threshold`: The total number of approvals for this dispatch before it is executed.
   * - `other_signatories`: The accounts (other than the sender) who can approve this
   * dispatch. May not be empty.
   * - `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is
   * not the first approval, then it must be `Some`, with the timepoint (block number and
   * transaction index) of the first approval transaction.
   * - `call_hash`: The hash of the call to be executed.
   *
   * NOTE: If this is the final approval, you will want to use `as_multi` instead.
   *
   * ## Complexity
   * - `O(S)`.
   * - Up to one balance-reserve or unreserve operation.
   * - One passthrough operation, one insert, both `O(S)` where `S` is the number of
   * signatories. `S` is capped by `MaxSignatories`, with weight being proportional.
   * - One encode & hash, both of complexity `O(S)`.
   * - Up to one binary search and insert (`O(logS + S)`).
   * - I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove.
   * - One event.
   * - Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit
   * taken for its lifetime of `DepositBase + threshold * DepositFactor`.
   **/
  | {
      name: 'ApproveAsMulti';
      params: {
        threshold: number;
        otherSignatories: Array<AccountId32>;
        maybeTimepoint?: PalletMultisigTimepoint | undefined;
        callHash: FixedBytes<32>;
        maxWeight: SpWeightsWeightV2Weight;
      };
    }
  /**
   * Cancel a pre-existing, on-going multisig transaction. Any deposit reserved previously
   * for this operation will be unreserved on success.
   *
   * The dispatch origin for this call must be _Signed_.
   *
   * - `threshold`: The total number of approvals for this dispatch before it is executed.
   * - `other_signatories`: The accounts (other than the sender) who can approve this
   * dispatch. May not be empty.
   * - `timepoint`: The timepoint (block number and transaction index) of the first approval
   * transaction for this dispatch.
   * - `call_hash`: The hash of the call to be executed.
   *
   * ## Complexity
   * - `O(S)`.
   * - Up to one balance-reserve or unreserve operation.
   * - One passthrough operation, one insert, both `O(S)` where `S` is the number of
   * signatories. `S` is capped by `MaxSignatories`, with weight being proportional.
   * - One encode & hash, both of complexity `O(S)`.
   * - One event.
   * - I/O: 1 read `O(S)`, one remove.
   * - Storage: removes one item.
   **/
  | {
      name: 'CancelAsMulti';
      params: {
        threshold: number;
        otherSignatories: Array<AccountId32>;
        timepoint: PalletMultisigTimepoint;
        callHash: FixedBytes<32>;
      };
    };

export type PalletMultisigCallLike =
  /**
   * Immediately dispatch a multi-signature call using a single approval from the caller.
   *
   * The dispatch origin for this call must be _Signed_.
   *
   * - `other_signatories`: The accounts (other than the sender) who are part of the
   * multi-signature, but do not participate in the approval process.
   * - `call`: The call to be executed.
   *
   * Result is equivalent to the dispatched result.
   *
   * ## Complexity
   * O(Z + C) where Z is the length of the call and C its execution weight.
   **/
  | {
      name: 'AsMultiThreshold1';
      params: { otherSignatories: Array<AccountId32Like>; call: BasiliskRuntimeRuntimeCallLike };
    }
  /**
   * Register approval for a dispatch to be made from a deterministic composite account if
   * approved by a total of `threshold - 1` of `other_signatories`.
   *
   * If there are enough, then dispatch the call.
   *
   * Payment: `DepositBase` will be reserved if this is the first approval, plus
   * `threshold` times `DepositFactor`. It is returned once this dispatch happens or
   * is cancelled.
   *
   * The dispatch origin for this call must be _Signed_.
   *
   * - `threshold`: The total number of approvals for this dispatch before it is executed.
   * - `other_signatories`: The accounts (other than the sender) who can approve this
   * dispatch. May not be empty.
   * - `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is
   * not the first approval, then it must be `Some`, with the timepoint (block number and
   * transaction index) of the first approval transaction.
   * - `call`: The call to be executed.
   *
   * NOTE: Unless this is the final approval, you will generally want to use
   * `approve_as_multi` instead, since it only requires a hash of the call.
   *
   * Result is equivalent to the dispatched result if `threshold` is exactly `1`. Otherwise
   * on success, result is `Ok` and the result from the interior call, if it was executed,
   * may be found in the deposited `MultisigExecuted` event.
   *
   * ## Complexity
   * - `O(S + Z + Call)`.
   * - Up to one balance-reserve or unreserve operation.
   * - One passthrough operation, one insert, both `O(S)` where `S` is the number of
   * signatories. `S` is capped by `MaxSignatories`, with weight being proportional.
   * - One call encode & hash, both of complexity `O(Z)` where `Z` is tx-len.
   * - One encode & hash, both of complexity `O(S)`.
   * - Up to one binary search and insert (`O(logS + S)`).
   * - I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove.
   * - One event.
   * - The weight of the `call`.
   * - Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit
   * taken for its lifetime of `DepositBase + threshold * DepositFactor`.
   **/
  | {
      name: 'AsMulti';
      params: {
        threshold: number;
        otherSignatories: Array<AccountId32Like>;
        maybeTimepoint?: PalletMultisigTimepoint | undefined;
        call: BasiliskRuntimeRuntimeCallLike;
        maxWeight: SpWeightsWeightV2Weight;
      };
    }
  /**
   * Register approval for a dispatch to be made from a deterministic composite account if
   * approved by a total of `threshold - 1` of `other_signatories`.
   *
   * Payment: `DepositBase` will be reserved if this is the first approval, plus
   * `threshold` times `DepositFactor`. It is returned once this dispatch happens or
   * is cancelled.
   *
   * The dispatch origin for this call must be _Signed_.
   *
   * - `threshold`: The total number of approvals for this dispatch before it is executed.
   * - `other_signatories`: The accounts (other than the sender) who can approve this
   * dispatch. May not be empty.
   * - `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is
   * not the first approval, then it must be `Some`, with the timepoint (block number and
   * transaction index) of the first approval transaction.
   * - `call_hash`: The hash of the call to be executed.
   *
   * NOTE: If this is the final approval, you will want to use `as_multi` instead.
   *
   * ## Complexity
   * - `O(S)`.
   * - Up to one balance-reserve or unreserve operation.
   * - One passthrough operation, one insert, both `O(S)` where `S` is the number of
   * signatories. `S` is capped by `MaxSignatories`, with weight being proportional.
   * - One encode & hash, both of complexity `O(S)`.
   * - Up to one binary search and insert (`O(logS + S)`).
   * - I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove.
   * - One event.
   * - Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit
   * taken for its lifetime of `DepositBase + threshold * DepositFactor`.
   **/
  | {
      name: 'ApproveAsMulti';
      params: {
        threshold: number;
        otherSignatories: Array<AccountId32Like>;
        maybeTimepoint?: PalletMultisigTimepoint | undefined;
        callHash: FixedBytes<32>;
        maxWeight: SpWeightsWeightV2Weight;
      };
    }
  /**
   * Cancel a pre-existing, on-going multisig transaction. Any deposit reserved previously
   * for this operation will be unreserved on success.
   *
   * The dispatch origin for this call must be _Signed_.
   *
   * - `threshold`: The total number of approvals for this dispatch before it is executed.
   * - `other_signatories`: The accounts (other than the sender) who can approve this
   * dispatch. May not be empty.
   * - `timepoint`: The timepoint (block number and transaction index) of the first approval
   * transaction for this dispatch.
   * - `call_hash`: The hash of the call to be executed.
   *
   * ## Complexity
   * - `O(S)`.
   * - Up to one balance-reserve or unreserve operation.
   * - One passthrough operation, one insert, both `O(S)` where `S` is the number of
   * signatories. `S` is capped by `MaxSignatories`, with weight being proportional.
   * - One encode & hash, both of complexity `O(S)`.
   * - One event.
   * - I/O: 1 read `O(S)`, one remove.
   * - Storage: removes one item.
   **/
  | {
      name: 'CancelAsMulti';
      params: {
        threshold: number;
        otherSignatories: Array<AccountId32Like>;
        timepoint: PalletMultisigTimepoint;
        callHash: FixedBytes<32>;
      };
    };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletStateTrieMigrationCall =
  /**
   * Control the automatic migration.
   *
   * The dispatch origin of this call must be [`Config::ControlOrigin`].
   **/
  | { name: 'ControlAutoMigration'; params: { maybeConfig?: PalletStateTrieMigrationMigrationLimits | undefined } }
  /**
   * Continue the migration for the given `limits`.
   *
   * The dispatch origin of this call can be any signed account.
   *
   * This transaction has NO MONETARY INCENTIVES. calling it will not reward anyone. Albeit,
   * Upon successful execution, the transaction fee is returned.
   *
   * The (potentially over-estimated) of the byte length of all the data read must be
   * provided for up-front fee-payment and weighing. In essence, the caller is guaranteeing
   * that executing the current `MigrationTask` with the given `limits` will not exceed
   * `real_size_upper` bytes of read data.
   *
   * The `witness_task` is merely a helper to prevent the caller from being slashed or
   * generally trigger a migration that they do not intend. This parameter is just a message
   * from caller, saying that they believed `witness_task` was the last state of the
   * migration, and they only wish for their transaction to do anything, if this assumption
   * holds. In case `witness_task` does not match, the transaction fails.
   *
   * Based on the documentation of [`MigrationTask::migrate_until_exhaustion`], the
   * recommended way of doing this is to pass a `limit` that only bounds `count`, as the
   * `size` limit can always be overwritten.
   **/
  | {
      name: 'ContinueMigrate';
      params: {
        limits: PalletStateTrieMigrationMigrationLimits;
        realSizeUpper: number;
        witnessTask: PalletStateTrieMigrationMigrationTask;
      };
    }
  /**
   * Migrate the list of top keys by iterating each of them one by one.
   *
   * This does not affect the global migration process tracker ([`MigrationProcess`]), and
   * should only be used in case any keys are leftover due to a bug.
   **/
  | { name: 'MigrateCustomTop'; params: { keys: Array<Bytes>; witnessSize: number } }
  /**
   * Migrate the list of child keys by iterating each of them one by one.
   *
   * All of the given child keys must be present under one `child_root`.
   *
   * This does not affect the global migration process tracker ([`MigrationProcess`]), and
   * should only be used in case any keys are leftover due to a bug.
   **/
  | { name: 'MigrateCustomChild'; params: { root: Bytes; childKeys: Array<Bytes>; totalSize: number } }
  /**
   * Set the maximum limit of the signed migration.
   **/
  | { name: 'SetSignedMaxLimits'; params: { limits: PalletStateTrieMigrationMigrationLimits } }
  /**
   * Forcefully set the progress the running migration.
   *
   * This is only useful in one case: the next key to migrate is too big to be migrated with
   * a signed account, in a parachain context, and we simply want to skip it. A reasonable
   * example of this would be `:code:`, which is both very expensive to migrate, and commonly
   * used, so probably it is already migrated.
   *
   * In case you mess things up, you can also, in principle, use this to reset the migration
   * process.
   **/
  | {
      name: 'ForceSetProgress';
      params: { progressTop: PalletStateTrieMigrationProgress; progressChild: PalletStateTrieMigrationProgress };
    };

export type PalletStateTrieMigrationCallLike =
  /**
   * Control the automatic migration.
   *
   * The dispatch origin of this call must be [`Config::ControlOrigin`].
   **/
  | { name: 'ControlAutoMigration'; params: { maybeConfig?: PalletStateTrieMigrationMigrationLimits | undefined } }
  /**
   * Continue the migration for the given `limits`.
   *
   * The dispatch origin of this call can be any signed account.
   *
   * This transaction has NO MONETARY INCENTIVES. calling it will not reward anyone. Albeit,
   * Upon successful execution, the transaction fee is returned.
   *
   * The (potentially over-estimated) of the byte length of all the data read must be
   * provided for up-front fee-payment and weighing. In essence, the caller is guaranteeing
   * that executing the current `MigrationTask` with the given `limits` will not exceed
   * `real_size_upper` bytes of read data.
   *
   * The `witness_task` is merely a helper to prevent the caller from being slashed or
   * generally trigger a migration that they do not intend. This parameter is just a message
   * from caller, saying that they believed `witness_task` was the last state of the
   * migration, and they only wish for their transaction to do anything, if this assumption
   * holds. In case `witness_task` does not match, the transaction fails.
   *
   * Based on the documentation of [`MigrationTask::migrate_until_exhaustion`], the
   * recommended way of doing this is to pass a `limit` that only bounds `count`, as the
   * `size` limit can always be overwritten.
   **/
  | {
      name: 'ContinueMigrate';
      params: {
        limits: PalletStateTrieMigrationMigrationLimits;
        realSizeUpper: number;
        witnessTask: PalletStateTrieMigrationMigrationTask;
      };
    }
  /**
   * Migrate the list of top keys by iterating each of them one by one.
   *
   * This does not affect the global migration process tracker ([`MigrationProcess`]), and
   * should only be used in case any keys are leftover due to a bug.
   **/
  | { name: 'MigrateCustomTop'; params: { keys: Array<BytesLike>; witnessSize: number } }
  /**
   * Migrate the list of child keys by iterating each of them one by one.
   *
   * All of the given child keys must be present under one `child_root`.
   *
   * This does not affect the global migration process tracker ([`MigrationProcess`]), and
   * should only be used in case any keys are leftover due to a bug.
   **/
  | { name: 'MigrateCustomChild'; params: { root: BytesLike; childKeys: Array<BytesLike>; totalSize: number } }
  /**
   * Set the maximum limit of the signed migration.
   **/
  | { name: 'SetSignedMaxLimits'; params: { limits: PalletStateTrieMigrationMigrationLimits } }
  /**
   * Forcefully set the progress the running migration.
   *
   * This is only useful in one case: the next key to migrate is too big to be migrated with
   * a signed account, in a parachain context, and we simply want to skip it. A reasonable
   * example of this would be `:code:`, which is both very expensive to migrate, and commonly
   * used, so probably it is already migrated.
   *
   * In case you mess things up, you can also, in principle, use this to reset the migration
   * process.
   **/
  | {
      name: 'ForceSetProgress';
      params: { progressTop: PalletStateTrieMigrationProgress; progressChild: PalletStateTrieMigrationProgress };
    };

export type PalletStateTrieMigrationMigrationLimits = { size: number; item: number };

export type PalletStateTrieMigrationMigrationTask = {
  progressTop: PalletStateTrieMigrationProgress;
  progressChild: PalletStateTrieMigrationProgress;
  size: number;
  topItems: number;
  childItems: number;
};

export type PalletStateTrieMigrationProgress =
  | { type: 'ToStart' }
  | { type: 'LastKey'; value: Bytes }
  | { type: 'Complete' };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletConvictionVotingCall =
  /**
   * Vote in a poll. If `vote.is_aye()`, the vote is to enact the proposal;
   * otherwise it is a vote to keep the status quo.
   *
   * The dispatch origin of this call must be _Signed_.
   *
   * - `poll_index`: The index of the poll to vote for.
   * - `vote`: The vote configuration.
   *
   * Weight: `O(R)` where R is the number of polls the voter has voted on.
   **/
  | { name: 'Vote'; params: { pollIndex: number; vote: PalletConvictionVotingVoteAccountVote } }
  /**
   * Delegate the voting power (with some given conviction) of the sending account for a
   * particular class of polls.
   *
   * The balance delegated is locked for as long as it's delegated, and thereafter for the
   * time appropriate for the conviction's lock period.
   *
   * The dispatch origin of this call must be _Signed_, and the signing account must either:
   * - be delegating already; or
   * - have no voting activity (if there is, then it will need to be removed through
   * `remove_vote`).
   *
   * - `to`: The account whose voting the `target` account's voting power will follow.
   * - `class`: The class of polls to delegate. To delegate multiple classes, multiple calls
   * to this function are required.
   * - `conviction`: The conviction that will be attached to the delegated votes. When the
   * account is undelegated, the funds will be locked for the corresponding period.
   * - `balance`: The amount of the account's balance to be used in delegating. This must not
   * be more than the account's current balance.
   *
   * Emits `Delegated`.
   *
   * Weight: `O(R)` where R is the number of polls the voter delegating to has
   * voted on. Weight is initially charged as if maximum votes, but is refunded later.
   **/
  | {
      name: 'Delegate';
      params: { class: number; to: AccountId32; conviction: PalletConvictionVotingConviction; balance: bigint };
    }
  /**
   * Undelegate the voting power of the sending account for a particular class of polls.
   *
   * Tokens may be unlocked following once an amount of time consistent with the lock period
   * of the conviction with which the delegation was issued has passed.
   *
   * The dispatch origin of this call must be _Signed_ and the signing account must be
   * currently delegating.
   *
   * - `class`: The class of polls to remove the delegation from.
   *
   * Emits `Undelegated`.
   *
   * Weight: `O(R)` where R is the number of polls the voter delegating to has
   * voted on. Weight is initially charged as if maximum votes, but is refunded later.
   **/
  | { name: 'Undelegate'; params: { class: number } }
  /**
   * Remove the lock caused by prior voting/delegating which has expired within a particular
   * class.
   *
   * The dispatch origin of this call must be _Signed_.
   *
   * - `class`: The class of polls to unlock.
   * - `target`: The account to remove the lock on.
   *
   * Weight: `O(R)` with R number of vote of target.
   **/
  | { name: 'Unlock'; params: { class: number; target: AccountId32 } }
  /**
   * Remove a vote for a poll.
   *
   * If:
   * - the poll was cancelled, or
   * - the poll is ongoing, or
   * - the poll has ended such that
   * - the vote of the account was in opposition to the result; or
   * - there was no conviction to the account's vote; or
   * - the account made a split vote
   * ...then the vote is removed cleanly and a following call to `unlock` may result in more
   * funds being available.
   *
   * If, however, the poll has ended and:
   * - it finished corresponding to the vote of the account, and
   * - the account made a standard vote with conviction, and
   * - the lock period of the conviction is not over
   * ...then the lock will be aggregated into the overall account's lock, which may involve
   * *overlocking* (where the two locks are combined into a single lock that is the maximum
   * of both the amount locked and the time is it locked for).
   *
   * The dispatch origin of this call must be _Signed_, and the signer must have a vote
   * registered for poll `index`.
   *
   * - `index`: The index of poll of the vote to be removed.
   * - `class`: Optional parameter, if given it indicates the class of the poll. For polls
   * which have finished or are cancelled, this must be `Some`.
   *
   * Weight: `O(R + log R)` where R is the number of polls that `target` has voted on.
   * Weight is calculated for the maximum number of vote.
   **/
  | { name: 'RemoveVote'; params: { class?: number | undefined; index: number } }
  /**
   * Remove a vote for a poll.
   *
   * If the `target` is equal to the signer, then this function is exactly equivalent to
   * `remove_vote`. If not equal to the signer, then the vote must have expired,
   * either because the poll was cancelled, because the voter lost the poll or
   * because the conviction period is over.
   *
   * The dispatch origin of this call must be _Signed_.
   *
   * - `target`: The account of the vote to be removed; this account must have voted for poll
   * `index`.
   * - `index`: The index of poll of the vote to be removed.
   * - `class`: The class of the poll.
   *
   * Weight: `O(R + log R)` where R is the number of polls that `target` has voted on.
   * Weight is calculated for the maximum number of vote.
   **/
  | { name: 'RemoveOtherVote'; params: { target: AccountId32; class: number; index: number } };

export type PalletConvictionVotingCallLike =
  /**
   * Vote in a poll. If `vote.is_aye()`, the vote is to enact the proposal;
   * otherwise it is a vote to keep the status quo.
   *
   * The dispatch origin of this call must be _Signed_.
   *
   * - `poll_index`: The index of the poll to vote for.
   * - `vote`: The vote configuration.
   *
   * Weight: `O(R)` where R is the number of polls the voter has voted on.
   **/
  | { name: 'Vote'; params: { pollIndex: number; vote: PalletConvictionVotingVoteAccountVote } }
  /**
   * Delegate the voting power (with some given conviction) of the sending account for a
   * particular class of polls.
   *
   * The balance delegated is locked for as long as it's delegated, and thereafter for the
   * time appropriate for the conviction's lock period.
   *
   * The dispatch origin of this call must be _Signed_, and the signing account must either:
   * - be delegating already; or
   * - have no voting activity (if there is, then it will need to be removed through
   * `remove_vote`).
   *
   * - `to`: The account whose voting the `target` account's voting power will follow.
   * - `class`: The class of polls to delegate. To delegate multiple classes, multiple calls
   * to this function are required.
   * - `conviction`: The conviction that will be attached to the delegated votes. When the
   * account is undelegated, the funds will be locked for the corresponding period.
   * - `balance`: The amount of the account's balance to be used in delegating. This must not
   * be more than the account's current balance.
   *
   * Emits `Delegated`.
   *
   * Weight: `O(R)` where R is the number of polls the voter delegating to has
   * voted on. Weight is initially charged as if maximum votes, but is refunded later.
   **/
  | {
      name: 'Delegate';
      params: { class: number; to: AccountId32Like; conviction: PalletConvictionVotingConviction; balance: bigint };
    }
  /**
   * Undelegate the voting power of the sending account for a particular class of polls.
   *
   * Tokens may be unlocked following once an amount of time consistent with the lock period
   * of the conviction with which the delegation was issued has passed.
   *
   * The dispatch origin of this call must be _Signed_ and the signing account must be
   * currently delegating.
   *
   * - `class`: The class of polls to remove the delegation from.
   *
   * Emits `Undelegated`.
   *
   * Weight: `O(R)` where R is the number of polls the voter delegating to has
   * voted on. Weight is initially charged as if maximum votes, but is refunded later.
   **/
  | { name: 'Undelegate'; params: { class: number } }
  /**
   * Remove the lock caused by prior voting/delegating which has expired within a particular
   * class.
   *
   * The dispatch origin of this call must be _Signed_.
   *
   * - `class`: The class of polls to unlock.
   * - `target`: The account to remove the lock on.
   *
   * Weight: `O(R)` with R number of vote of target.
   **/
  | { name: 'Unlock'; params: { class: number; target: AccountId32Like } }
  /**
   * Remove a vote for a poll.
   *
   * If:
   * - the poll was cancelled, or
   * - the poll is ongoing, or
   * - the poll has ended such that
   * - the vote of the account was in opposition to the result; or
   * - there was no conviction to the account's vote; or
   * - the account made a split vote
   * ...then the vote is removed cleanly and a following call to `unlock` may result in more
   * funds being available.
   *
   * If, however, the poll has ended and:
   * - it finished corresponding to the vote of the account, and
   * - the account made a standard vote with conviction, and
   * - the lock period of the conviction is not over
   * ...then the lock will be aggregated into the overall account's lock, which may involve
   * *overlocking* (where the two locks are combined into a single lock that is the maximum
   * of both the amount locked and the time is it locked for).
   *
   * The dispatch origin of this call must be _Signed_, and the signer must have a vote
   * registered for poll `index`.
   *
   * - `index`: The index of poll of the vote to be removed.
   * - `class`: Optional parameter, if given it indicates the class of the poll. For polls
   * which have finished or are cancelled, this must be `Some`.
   *
   * Weight: `O(R + log R)` where R is the number of polls that `target` has voted on.
   * Weight is calculated for the maximum number of vote.
   **/
  | { name: 'RemoveVote'; params: { class?: number | undefined; index: number } }
  /**
   * Remove a vote for a poll.
   *
   * If the `target` is equal to the signer, then this function is exactly equivalent to
   * `remove_vote`. If not equal to the signer, then the vote must have expired,
   * either because the poll was cancelled, because the voter lost the poll or
   * because the conviction period is over.
   *
   * The dispatch origin of this call must be _Signed_.
   *
   * - `target`: The account of the vote to be removed; this account must have voted for poll
   * `index`.
   * - `index`: The index of poll of the vote to be removed.
   * - `class`: The class of the poll.
   *
   * Weight: `O(R + log R)` where R is the number of polls that `target` has voted on.
   * Weight is calculated for the maximum number of vote.
   **/
  | { name: 'RemoveOtherVote'; params: { target: AccountId32Like; class: number; index: number } };

export type PalletConvictionVotingConviction =
  | 'None'
  | 'Locked1x'
  | 'Locked2x'
  | 'Locked3x'
  | 'Locked4x'
  | 'Locked5x'
  | 'Locked6x';

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletReferendaCall =
  /**
   * Propose a referendum on a privileged action.
   *
   * - `origin`: must be `SubmitOrigin` and the account must have `SubmissionDeposit` funds
   * available.
   * - `proposal_origin`: The origin from which the proposal should be executed.
   * - `proposal`: The proposal.
   * - `enactment_moment`: The moment that the proposal should be enacted.
   *
   * Emits `Submitted`.
   **/
  | {
      name: 'Submit';
      params: {
        proposalOrigin: BasiliskRuntimeOriginCaller;
        proposal: FrameSupportPreimagesBounded;
        enactmentMoment: FrameSupportScheduleDispatchTime;
      };
    }
  /**
   * Post the Decision Deposit for a referendum.
   *
   * - `origin`: must be `Signed` and the account must have funds available for the
   * referendum's track's Decision Deposit.
   * - `index`: The index of the submitted referendum whose Decision Deposit is yet to be
   * posted.
   *
   * Emits `DecisionDepositPlaced`.
   **/
  | { name: 'PlaceDecisionDeposit'; params: { index: number } }
  /**
   * Refund the Decision Deposit for a closed referendum back to the depositor.
   *
   * - `origin`: must be `Signed` or `Root`.
   * - `index`: The index of a closed referendum whose Decision Deposit has not yet been
   * refunded.
   *
   * Emits `DecisionDepositRefunded`.
   **/
  | { name: 'RefundDecisionDeposit'; params: { index: number } }
  /**
   * Cancel an ongoing referendum.
   *
   * - `origin`: must be the `CancelOrigin`.
   * - `index`: The index of the referendum to be cancelled.
   *
   * Emits `Cancelled`.
   **/
  | { name: 'Cancel'; params: { index: number } }
  /**
   * Cancel an ongoing referendum and slash the deposits.
   *
   * - `origin`: must be the `KillOrigin`.
   * - `index`: The index of the referendum to be cancelled.
   *
   * Emits `Killed` and `DepositSlashed`.
   **/
  | { name: 'Kill'; params: { index: number } }
  /**
   * Advance a referendum onto its next logical state. Only used internally.
   *
   * - `origin`: must be `Root`.
   * - `index`: the referendum to be advanced.
   **/
  | { name: 'NudgeReferendum'; params: { index: number } }
  /**
   * Advance a track onto its next logical state. Only used internally.
   *
   * - `origin`: must be `Root`.
   * - `track`: the track to be advanced.
   *
   * Action item for when there is now one fewer referendum in the deciding phase and the
   * `DecidingCount` is not yet updated. This means that we should either:
   * - begin deciding another referendum (and leave `DecidingCount` alone); or
   * - decrement `DecidingCount`.
   **/
  | { name: 'OneFewerDeciding'; params: { track: number } }
  /**
   * Refund the Submission Deposit for a closed referendum back to the depositor.
   *
   * - `origin`: must be `Signed` or `Root`.
   * - `index`: The index of a closed referendum whose Submission Deposit has not yet been
   * refunded.
   *
   * Emits `SubmissionDepositRefunded`.
   **/
  | { name: 'RefundSubmissionDeposit'; params: { index: number } }
  /**
   * Set or clear metadata of a referendum.
   *
   * Parameters:
   * - `origin`: Must be `Signed` by a creator of a referendum or by anyone to clear a
   * metadata of a finished referendum.
   * - `index`: The index of a referendum to set or clear metadata for.
   * - `maybe_hash`: The hash of an on-chain stored preimage. `None` to clear a metadata.
   **/
  | { name: 'SetMetadata'; params: { index: number; maybeHash?: H256 | undefined } };

export type PalletReferendaCallLike =
  /**
   * Propose a referendum on a privileged action.
   *
   * - `origin`: must be `SubmitOrigin` and the account must have `SubmissionDeposit` funds
   * available.
   * - `proposal_origin`: The origin from which the proposal should be executed.
   * - `proposal`: The proposal.
   * - `enactment_moment`: The moment that the proposal should be enacted.
   *
   * Emits `Submitted`.
   **/
  | {
      name: 'Submit';
      params: {
        proposalOrigin: BasiliskRuntimeOriginCaller;
        proposal: FrameSupportPreimagesBounded;
        enactmentMoment: FrameSupportScheduleDispatchTime;
      };
    }
  /**
   * Post the Decision Deposit for a referendum.
   *
   * - `origin`: must be `Signed` and the account must have funds available for the
   * referendum's track's Decision Deposit.
   * - `index`: The index of the submitted referendum whose Decision Deposit is yet to be
   * posted.
   *
   * Emits `DecisionDepositPlaced`.
   **/
  | { name: 'PlaceDecisionDeposit'; params: { index: number } }
  /**
   * Refund the Decision Deposit for a closed referendum back to the depositor.
   *
   * - `origin`: must be `Signed` or `Root`.
   * - `index`: The index of a closed referendum whose Decision Deposit has not yet been
   * refunded.
   *
   * Emits `DecisionDepositRefunded`.
   **/
  | { name: 'RefundDecisionDeposit'; params: { index: number } }
  /**
   * Cancel an ongoing referendum.
   *
   * - `origin`: must be the `CancelOrigin`.
   * - `index`: The index of the referendum to be cancelled.
   *
   * Emits `Cancelled`.
   **/
  | { name: 'Cancel'; params: { index: number } }
  /**
   * Cancel an ongoing referendum and slash the deposits.
   *
   * - `origin`: must be the `KillOrigin`.
   * - `index`: The index of the referendum to be cancelled.
   *
   * Emits `Killed` and `DepositSlashed`.
   **/
  | { name: 'Kill'; params: { index: number } }
  /**
   * Advance a referendum onto its next logical state. Only used internally.
   *
   * - `origin`: must be `Root`.
   * - `index`: the referendum to be advanced.
   **/
  | { name: 'NudgeReferendum'; params: { index: number } }
  /**
   * Advance a track onto its next logical state. Only used internally.
   *
   * - `origin`: must be `Root`.
   * - `track`: the track to be advanced.
   *
   * Action item for when there is now one fewer referendum in the deciding phase and the
   * `DecidingCount` is not yet updated. This means that we should either:
   * - begin deciding another referendum (and leave `DecidingCount` alone); or
   * - decrement `DecidingCount`.
   **/
  | { name: 'OneFewerDeciding'; params: { track: number } }
  /**
   * Refund the Submission Deposit for a closed referendum back to the depositor.
   *
   * - `origin`: must be `Signed` or `Root`.
   * - `index`: The index of a closed referendum whose Submission Deposit has not yet been
   * refunded.
   *
   * Emits `SubmissionDepositRefunded`.
   **/
  | { name: 'RefundSubmissionDeposit'; params: { index: number } }
  /**
   * Set or clear metadata of a referendum.
   *
   * Parameters:
   * - `origin`: Must be `Signed` by a creator of a referendum or by anyone to clear a
   * metadata of a finished referendum.
   * - `index`: The index of a referendum to set or clear metadata for.
   * - `maybe_hash`: The hash of an on-chain stored preimage. `None` to clear a metadata.
   **/
  | { name: 'SetMetadata'; params: { index: number; maybeHash?: H256 | undefined } };

export type FrameSupportScheduleDispatchTime = { type: 'At'; value: number } | { type: 'After'; value: number };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletWhitelistCall =
  | { name: 'WhitelistCall'; params: { callHash: H256 } }
  | { name: 'RemoveWhitelistedCall'; params: { callHash: H256 } }
  | {
      name: 'DispatchWhitelistedCall';
      params: { callHash: H256; callEncodedLen: number; callWeightWitness: SpWeightsWeightV2Weight };
    }
  | { name: 'DispatchWhitelistedCallWithPreimage'; params: { call: BasiliskRuntimeRuntimeCall } };

export type PalletWhitelistCallLike =
  | { name: 'WhitelistCall'; params: { callHash: H256 } }
  | { name: 'RemoveWhitelistedCall'; params: { callHash: H256 } }
  | {
      name: 'DispatchWhitelistedCall';
      params: { callHash: H256; callEncodedLen: number; callWeightWitness: SpWeightsWeightV2Weight };
    }
  | { name: 'DispatchWhitelistedCallWithPreimage'; params: { call: BasiliskRuntimeRuntimeCallLike } };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletRelaychainInfoCall = null;

export type PalletRelaychainInfoCallLike = null;

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletSchedulerCall =
  /**
   * Anonymously schedule a task.
   **/
  | {
      name: 'Schedule';
      params: {
        when: number;
        maybePeriodic?: [number, number] | undefined;
        priority: number;
        call: BasiliskRuntimeRuntimeCall;
      };
    }
  /**
   * Cancel an anonymously scheduled task.
   **/
  | { name: 'Cancel'; params: { when: number; index: number } }
  /**
   * Schedule a named task.
   **/
  | {
      name: 'ScheduleNamed';
      params: {
        id: FixedBytes<32>;
        when: number;
        maybePeriodic?: [number, number] | undefined;
        priority: number;
        call: BasiliskRuntimeRuntimeCall;
      };
    }
  /**
   * Cancel a named scheduled task.
   **/
  | { name: 'CancelNamed'; params: { id: FixedBytes<32> } }
  /**
   * Anonymously schedule a task after a delay.
   **/
  | {
      name: 'ScheduleAfter';
      params: {
        after: number;
        maybePeriodic?: [number, number] | undefined;
        priority: number;
        call: BasiliskRuntimeRuntimeCall;
      };
    }
  /**
   * Schedule a named task after a delay.
   **/
  | {
      name: 'ScheduleNamedAfter';
      params: {
        id: FixedBytes<32>;
        after: number;
        maybePeriodic?: [number, number] | undefined;
        priority: number;
        call: BasiliskRuntimeRuntimeCall;
      };
    }
  /**
   * Set a retry configuration for a task so that, in case its scheduled run fails, it will
   * be retried after `period` blocks, for a total amount of `retries` retries or until it
   * succeeds.
   *
   * Tasks which need to be scheduled for a retry are still subject to weight metering and
   * agenda space, same as a regular task. If a periodic task fails, it will be scheduled
   * normally while the task is retrying.
   *
   * Tasks scheduled as a result of a retry for a periodic task are unnamed, non-periodic
   * clones of the original task. Their retry configuration will be derived from the
   * original task's configuration, but will have a lower value for `remaining` than the
   * original `total_retries`.
   **/
  | { name: 'SetRetry'; params: { task: [number, number]; retries: number; period: number } }
  /**
   * Set a retry configuration for a named task so that, in case its scheduled run fails, it
   * will be retried after `period` blocks, for a total amount of `retries` retries or until
   * it succeeds.
   *
   * Tasks which need to be scheduled for a retry are still subject to weight metering and
   * agenda space, same as a regular task. If a periodic task fails, it will be scheduled
   * normally while the task is retrying.
   *
   * Tasks scheduled as a result of a retry for a periodic task are unnamed, non-periodic
   * clones of the original task. Their retry configuration will be derived from the
   * original task's configuration, but will have a lower value for `remaining` than the
   * original `total_retries`.
   **/
  | { name: 'SetRetryNamed'; params: { id: FixedBytes<32>; retries: number; period: number } }
  /**
   * Removes the retry configuration of a task.
   **/
  | { name: 'CancelRetry'; params: { task: [number, number] } }
  /**
   * Cancel the retry configuration of a named task.
   **/
  | { name: 'CancelRetryNamed'; params: { id: FixedBytes<32> } };

export type PalletSchedulerCallLike =
  /**
   * Anonymously schedule a task.
   **/
  | {
      name: 'Schedule';
      params: {
        when: number;
        maybePeriodic?: [number, number] | undefined;
        priority: number;
        call: BasiliskRuntimeRuntimeCallLike;
      };
    }
  /**
   * Cancel an anonymously scheduled task.
   **/
  | { name: 'Cancel'; params: { when: number; index: number } }
  /**
   * Schedule a named task.
   **/
  | {
      name: 'ScheduleNamed';
      params: {
        id: FixedBytes<32>;
        when: number;
        maybePeriodic?: [number, number] | undefined;
        priority: number;
        call: BasiliskRuntimeRuntimeCallLike;
      };
    }
  /**
   * Cancel a named scheduled task.
   **/
  | { name: 'CancelNamed'; params: { id: FixedBytes<32> } }
  /**
   * Anonymously schedule a task after a delay.
   **/
  | {
      name: 'ScheduleAfter';
      params: {
        after: number;
        maybePeriodic?: [number, number] | undefined;
        priority: number;
        call: BasiliskRuntimeRuntimeCallLike;
      };
    }
  /**
   * Schedule a named task after a delay.
   **/
  | {
      name: 'ScheduleNamedAfter';
      params: {
        id: FixedBytes<32>;
        after: number;
        maybePeriodic?: [number, number] | undefined;
        priority: number;
        call: BasiliskRuntimeRuntimeCallLike;
      };
    }
  /**
   * Set a retry configuration for a task so that, in case its scheduled run fails, it will
   * be retried after `period` blocks, for a total amount of `retries` retries or until it
   * succeeds.
   *
   * Tasks which need to be scheduled for a retry are still subject to weight metering and
   * agenda space, same as a regular task. If a periodic task fails, it will be scheduled
   * normally while the task is retrying.
   *
   * Tasks scheduled as a result of a retry for a periodic task are unnamed, non-periodic
   * clones of the original task. Their retry configuration will be derived from the
   * original task's configuration, but will have a lower value for `remaining` than the
   * original `total_retries`.
   **/
  | { name: 'SetRetry'; params: { task: [number, number]; retries: number; period: number } }
  /**
   * Set a retry configuration for a named task so that, in case its scheduled run fails, it
   * will be retried after `period` blocks, for a total amount of `retries` retries or until
   * it succeeds.
   *
   * Tasks which need to be scheduled for a retry are still subject to weight metering and
   * agenda space, same as a regular task. If a periodic task fails, it will be scheduled
   * normally while the task is retrying.
   *
   * Tasks scheduled as a result of a retry for a periodic task are unnamed, non-periodic
   * clones of the original task. Their retry configuration will be derived from the
   * original task's configuration, but will have a lower value for `remaining` than the
   * original `total_retries`.
   **/
  | { name: 'SetRetryNamed'; params: { id: FixedBytes<32>; retries: number; period: number } }
  /**
   * Removes the retry configuration of a task.
   **/
  | { name: 'CancelRetry'; params: { task: [number, number] } }
  /**
   * Cancel the retry configuration of a named task.
   **/
  | { name: 'CancelRetryNamed'; params: { id: FixedBytes<32> } };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type CumulusPalletParachainSystemCall =
  /**
   * Set the current validation data.
   *
   * This should be invoked exactly once per block. It will panic at the finalization
   * phase if the call was not invoked.
   *
   * The dispatch origin for this call must be `Inherent`
   *
   * As a side effect, this function upgrades the current validation function
   * if the appropriate time has come.
   **/
  | { name: 'SetValidationData'; params: { data: CumulusPrimitivesParachainInherentParachainInherentData } }
  | { name: 'SudoSendUpwardMessage'; params: { message: Bytes } };

export type CumulusPalletParachainSystemCallLike =
  /**
   * Set the current validation data.
   *
   * This should be invoked exactly once per block. It will panic at the finalization
   * phase if the call was not invoked.
   *
   * The dispatch origin for this call must be `Inherent`
   *
   * As a side effect, this function upgrades the current validation function
   * if the appropriate time has come.
   **/
  | { name: 'SetValidationData'; params: { data: CumulusPrimitivesParachainInherentParachainInherentData } }
  | { name: 'SudoSendUpwardMessage'; params: { message: BytesLike } };

export type CumulusPrimitivesParachainInherentParachainInherentData = {
  validationData: PolkadotPrimitivesV8PersistedValidationData;
  relayChainState: SpTrieStorageProof;
  downwardMessages: Array<PolkadotCorePrimitivesInboundDownwardMessage>;
  horizontalMessages: Array<[PolkadotParachainPrimitivesPrimitivesId, Array<PolkadotCorePrimitivesInboundHrmpMessage>]>;
};

export type PolkadotPrimitivesV8PersistedValidationData = {
  parentHead: PolkadotParachainPrimitivesPrimitivesHeadData;
  relayParentNumber: number;
  relayParentStorageRoot: H256;
  maxPovSize: number;
};

export type PolkadotParachainPrimitivesPrimitivesHeadData = Bytes;

export type SpTrieStorageProof = { trieNodes: Array<Bytes> };

export type PolkadotCorePrimitivesInboundDownwardMessage = { sentAt: number; msg: Bytes };

export type PolkadotCorePrimitivesInboundHrmpMessage = { sentAt: number; data: Bytes };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type StagingParachainInfoCall = null;

export type StagingParachainInfoCallLike = null;

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletXcmCall =
  | { name: 'Send'; params: { dest: XcmVersionedLocation; message: XcmVersionedXcm } }
  /**
   * Teleport some assets from the local chain to some destination chain.
   *
   * **This function is deprecated: Use `limited_teleport_assets` instead.**
   *
   * Fee payment on the destination side is made from the asset in the `assets` vector of
   * index `fee_asset_item`. The weight limit for fees is not provided and thus is unlimited,
   * with all fees taken as needed from the asset.
   *
   * - `origin`: Must be capable of withdrawing the `assets` and executing XCM.
   * - `dest`: Destination context for the assets. Will typically be `[Parent,
   * Parachain(..)]` to send from parachain to parachain, or `[Parachain(..)]` to send from
   * relay to parachain.
   * - `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will
   * generally be an `AccountId32` value.
   * - `assets`: The assets to be withdrawn. This should include the assets used to pay the
   * fee on the `dest` chain.
   * - `fee_asset_item`: The index into `assets` of the item which should be used to pay
   * fees.
   **/
  | {
      name: 'TeleportAssets';
      params: {
        dest: XcmVersionedLocation;
        beneficiary: XcmVersionedLocation;
        assets: XcmVersionedAssets;
        feeAssetItem: number;
      };
    }
  /**
   * Transfer some assets from the local chain to the destination chain through their local,
   * destination or remote reserve.
   *
   * `assets` must have same reserve location and may not be teleportable to `dest`.
   * - `assets` have local reserve: transfer assets to sovereign account of destination
   * chain and forward a notification XCM to `dest` to mint and deposit reserve-based
   * assets to `beneficiary`.
   * - `assets` have destination reserve: burn local assets and forward a notification to
   * `dest` chain to withdraw the reserve assets from this chain's sovereign account and
   * deposit them to `beneficiary`.
   * - `assets` have remote reserve: burn local assets, forward XCM to reserve chain to move
   * reserves from this chain's SA to `dest` chain's SA, and forward another XCM to `dest`
   * to mint and deposit reserve-based assets to `beneficiary`.
   *
   * **This function is deprecated: Use `limited_reserve_transfer_assets` instead.**
   *
   * Fee payment on the destination side is made from the asset in the `assets` vector of
   * index `fee_asset_item`. The weight limit for fees is not provided and thus is unlimited,
   * with all fees taken as needed from the asset.
   *
   * - `origin`: Must be capable of withdrawing the `assets` and executing XCM.
   * - `dest`: Destination context for the assets. Will typically be `[Parent,
   * Parachain(..)]` to send from parachain to parachain, or `[Parachain(..)]` to send from
   * relay to parachain.
   * - `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will
   * generally be an `AccountId32` value.
   * - `assets`: The assets to be withdrawn. This should include the assets used to pay the
   * fee on the `dest` (and possibly reserve) chains.
   * - `fee_asset_item`: The index into `assets` of the item which should be used to pay
   * fees.
   **/
  | {
      name: 'ReserveTransferAssets';
      params: {
        dest: XcmVersionedLocation;
        beneficiary: XcmVersionedLocation;
        assets: XcmVersionedAssets;
        feeAssetItem: number;
      };
    }
  /**
   * Execute an XCM message from a local, signed, origin.
   *
   * An event is deposited indicating whether `msg` could be executed completely or only
   * partially.
   *
   * No more than `max_weight` will be used in its attempted execution. If this is less than
   * the maximum amount of weight that the message could take to be executed, then no
   * execution attempt will be made.
   **/
  | { name: 'Execute'; params: { message: XcmVersionedXcm; maxWeight: SpWeightsWeightV2Weight } }
  /**
   * Extoll that a particular destination can be communicated with through a particular
   * version of XCM.
   *
   * - `origin`: Must be an origin specified by AdminOrigin.
   * - `location`: The destination that is being described.
   * - `xcm_version`: The latest version of XCM that `location` supports.
   **/
  | { name: 'ForceXcmVersion'; params: { location: StagingXcmV4Location; version: number } }
  /**
   * Set a safe XCM version (the version that XCM should be encoded with if the most recent
   * version a destination can accept is unknown).
   *
   * - `origin`: Must be an origin specified by AdminOrigin.
   * - `maybe_xcm_version`: The default XCM encoding version, or `None` to disable.
   **/
  | { name: 'ForceDefaultXcmVersion'; params: { maybeXcmVersion?: number | undefined } }
  /**
   * Ask a location to notify us regarding their XCM version and any changes to it.
   *
   * - `origin`: Must be an origin specified by AdminOrigin.
   * - `location`: The location to which we should subscribe for XCM version notifications.
   **/
  | { name: 'ForceSubscribeVersionNotify'; params: { location: XcmVersionedLocation } }
  /**
   * Require that a particular destination should no longer notify us regarding any XCM
   * version changes.
   *
   * - `origin`: Must be an origin specified by AdminOrigin.
   * - `location`: The location to which we are currently subscribed for XCM version
   * notifications which we no longer desire.
   **/
  | { name: 'ForceUnsubscribeVersionNotify'; params: { location: XcmVersionedLocation } }
  /**
   * Transfer some assets from the local chain to the destination chain through their local,
   * destination or remote reserve.
   *
   * `assets` must have same reserve location and may not be teleportable to `dest`.
   * - `assets` have local reserve: transfer assets to sovereign account of destination
   * chain and forward a notification XCM to `dest` to mint and deposit reserve-based
   * assets to `beneficiary`.
   * - `assets` have destination reserve: burn local assets and forward a notification to
   * `dest` chain to withdraw the reserve assets from this chain's sovereign account and
   * deposit them to `beneficiary`.
   * - `assets` have remote reserve: burn local assets, forward XCM to reserve chain to move
   * reserves from this chain's SA to `dest` chain's SA, and forward another XCM to `dest`
   * to mint and deposit reserve-based assets to `beneficiary`.
   *
   * Fee payment on the destination side is made from the asset in the `assets` vector of
   * index `fee_asset_item`, up to enough to pay for `weight_limit` of weight. If more weight
   * is needed than `weight_limit`, then the operation will fail and the sent assets may be
   * at risk.
   *
   * - `origin`: Must be capable of withdrawing the `assets` and executing XCM.
   * - `dest`: Destination context for the assets. Will typically be `[Parent,
   * Parachain(..)]` to send from parachain to parachain, or `[Parachain(..)]` to send from
   * relay to parachain.
   * - `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will
   * generally be an `AccountId32` value.
   * - `assets`: The assets to be withdrawn. This should include the assets used to pay the
   * fee on the `dest` (and possibly reserve) chains.
   * - `fee_asset_item`: The index into `assets` of the item which should be used to pay
   * fees.
   * - `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase.
   **/
  | {
      name: 'LimitedReserveTransferAssets';
      params: {
        dest: XcmVersionedLocation;
        beneficiary: XcmVersionedLocation;
        assets: XcmVersionedAssets;
        feeAssetItem: number;
        weightLimit: XcmV3WeightLimit;
      };
    }
  /**
   * Teleport some assets from the local chain to some destination chain.
   *
   * Fee payment on the destination side is made from the asset in the `assets` vector of
   * index `fee_asset_item`, up to enough to pay for `weight_limit` of weight. If more weight
   * is needed than `weight_limit`, then the operation will fail and the sent assets may be
   * at risk.
   *
   * - `origin`: Must be capable of withdrawing the `assets` and executing XCM.
   * - `dest`: Destination context for the assets. Will typically be `[Parent,
   * Parachain(..)]` to send from parachain to parachain, or `[Parachain(..)]` to send from
   * relay to parachain.
   * - `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will
   * generally be an `AccountId32` value.
   * - `assets`: The assets to be withdrawn. This should include the assets used to pay the
   * fee on the `dest` chain.
   * - `fee_asset_item`: The index into `assets` of the item which should be used to pay
   * fees.
   * - `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase.
   **/
  | {
      name: 'LimitedTeleportAssets';
      params: {
        dest: XcmVersionedLocation;
        beneficiary: XcmVersionedLocation;
        assets: XcmVersionedAssets;
        feeAssetItem: number;
        weightLimit: XcmV3WeightLimit;
      };
    }
  /**
   * Set or unset the global suspension state of the XCM executor.
   *
   * - `origin`: Must be an origin specified by AdminOrigin.
   * - `suspended`: `true` to suspend, `false` to resume.
   **/
  | { name: 'ForceSuspension'; params: { suspended: boolean } }
  /**
   * Transfer some assets from the local chain to the destination chain through their local,
   * destination or remote reserve, or through teleports.
   *
   * Fee payment on the destination side is made from the asset in the `assets` vector of
   * index `fee_asset_item` (hence referred to as `fees`), up to enough to pay for
   * `weight_limit` of weight. If more weight is needed than `weight_limit`, then the
   * operation will fail and the sent assets may be at risk.
   *
   * `assets` (excluding `fees`) must have same reserve location or otherwise be teleportable
   * to `dest`, no limitations imposed on `fees`.
   * - for local reserve: transfer assets to sovereign account of destination chain and
   * forward a notification XCM to `dest` to mint and deposit reserve-based assets to
   * `beneficiary`.
   * - for destination reserve: burn local assets and forward a notification to `dest` chain
   * to withdraw the reserve assets from this chain's sovereign account and deposit them
   * to `beneficiary`.
   * - for remote reserve: burn local assets, forward XCM to reserve chain to move reserves
   * from this chain's SA to `dest` chain's SA, and forward another XCM to `dest` to mint
   * and deposit reserve-based assets to `beneficiary`.
   * - for teleports: burn local assets and forward XCM to `dest` chain to mint/teleport
   * assets and deposit them to `beneficiary`.
   *
   * - `origin`: Must be capable of withdrawing the `assets` and executing XCM.
   * - `dest`: Destination context for the assets. Will typically be `X2(Parent,
   * Parachain(..))` to send from parachain to parachain, or `X1(Parachain(..))` to send
   * from relay to parachain.
   * - `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will
   * generally be an `AccountId32` value.
   * - `assets`: The assets to be withdrawn. This should include the assets used to pay the
   * fee on the `dest` (and possibly reserve) chains.
   * - `fee_asset_item`: The index into `assets` of the item which should be used to pay
   * fees.
   * - `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase.
   **/
  | {
      name: 'TransferAssets';
      params: {
        dest: XcmVersionedLocation;
        beneficiary: XcmVersionedLocation;
        assets: XcmVersionedAssets;
        feeAssetItem: number;
        weightLimit: XcmV3WeightLimit;
      };
    }
  /**
   * Claims assets trapped on this pallet because of leftover assets during XCM execution.
   *
   * - `origin`: Anyone can call this extrinsic.
   * - `assets`: The exact assets that were trapped. Use the version to specify what version
   * was the latest when they were trapped.
   * - `beneficiary`: The location/account where the claimed assets will be deposited.
   **/
  | { name: 'ClaimAssets'; params: { assets: XcmVersionedAssets; beneficiary: XcmVersionedLocation } }
  /**
   * Transfer assets from the local chain to the destination chain using explicit transfer
   * types for assets and fees.
   *
   * `assets` must have same reserve location or may be teleportable to `dest`. Caller must
   * provide the `assets_transfer_type` to be used for `assets`:
   * - `TransferType::LocalReserve`: transfer assets to sovereign account of destination
   * chain and forward a notification XCM to `dest` to mint and deposit reserve-based
   * assets to `beneficiary`.
   * - `TransferType::DestinationReserve`: burn local assets and forward a notification to
   * `dest` chain to withdraw the reserve assets from this chain's sovereign account and
   * deposit them to `beneficiary`.
   * - `TransferType::RemoteReserve(reserve)`: burn local assets, forward XCM to `reserve`
   * chain to move reserves from this chain's SA to `dest` chain's SA, and forward another
   * XCM to `dest` to mint and deposit reserve-based assets to `beneficiary`. Typically
   * the remote `reserve` is Asset Hub.
   * - `TransferType::Teleport`: burn local assets and forward XCM to `dest` chain to
   * mint/teleport assets and deposit them to `beneficiary`.
   *
   * On the destination chain, as well as any intermediary hops, `BuyExecution` is used to
   * buy execution using transferred `assets` identified by `remote_fees_id`.
   * Make sure enough of the specified `remote_fees_id` asset is included in the given list
   * of `assets`. `remote_fees_id` should be enough to pay for `weight_limit`. If more weight
   * is needed than `weight_limit`, then the operation will fail and the sent assets may be
   * at risk.
   *
   * `remote_fees_id` may use different transfer type than rest of `assets` and can be
   * specified through `fees_transfer_type`.
   *
   * The caller needs to specify what should happen to the transferred assets once they reach
   * the `dest` chain. This is done through the `custom_xcm_on_dest` parameter, which
   * contains the instructions to execute on `dest` as a final step.
   * This is usually as simple as:
   * `Xcm(vec![DepositAsset { assets: Wild(AllCounted(assets.len())), beneficiary }])`,
   * but could be something more exotic like sending the `assets` even further.
   *
   * - `origin`: Must be capable of withdrawing the `assets` and executing XCM.
   * - `dest`: Destination context for the assets. Will typically be `[Parent,
   * Parachain(..)]` to send from parachain to parachain, or `[Parachain(..)]` to send from
   * relay to parachain, or `(parents: 2, (GlobalConsensus(..), ..))` to send from
   * parachain across a bridge to another ecosystem destination.
   * - `assets`: The assets to be withdrawn. This should include the assets used to pay the
   * fee on the `dest` (and possibly reserve) chains.
   * - `assets_transfer_type`: The XCM `TransferType` used to transfer the `assets`.
   * - `remote_fees_id`: One of the included `assets` to be used to pay fees.
   * - `fees_transfer_type`: The XCM `TransferType` used to transfer the `fees` assets.
   * - `custom_xcm_on_dest`: The XCM to be executed on `dest` chain as the last step of the
   * transfer, which also determines what happens to the assets on the destination chain.
   * - `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase.
   **/
  | {
      name: 'TransferAssetsUsingTypeAndThen';
      params: {
        dest: XcmVersionedLocation;
        assets: XcmVersionedAssets;
        assetsTransferType: StagingXcmExecutorAssetTransferTransferType;
        remoteFeesId: XcmVersionedAssetId;
        feesTransferType: StagingXcmExecutorAssetTransferTransferType;
        customXcmOnDest: XcmVersionedXcm;
        weightLimit: XcmV3WeightLimit;
      };
    };

export type PalletXcmCallLike =
  | { name: 'Send'; params: { dest: XcmVersionedLocation; message: XcmVersionedXcm } }
  /**
   * Teleport some assets from the local chain to some destination chain.
   *
   * **This function is deprecated: Use `limited_teleport_assets` instead.**
   *
   * Fee payment on the destination side is made from the asset in the `assets` vector of
   * index `fee_asset_item`. The weight limit for fees is not provided and thus is unlimited,
   * with all fees taken as needed from the asset.
   *
   * - `origin`: Must be capable of withdrawing the `assets` and executing XCM.
   * - `dest`: Destination context for the assets. Will typically be `[Parent,
   * Parachain(..)]` to send from parachain to parachain, or `[Parachain(..)]` to send from
   * relay to parachain.
   * - `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will
   * generally be an `AccountId32` value.
   * - `assets`: The assets to be withdrawn. This should include the assets used to pay the
   * fee on the `dest` chain.
   * - `fee_asset_item`: The index into `assets` of the item which should be used to pay
   * fees.
   **/
  | {
      name: 'TeleportAssets';
      params: {
        dest: XcmVersionedLocation;
        beneficiary: XcmVersionedLocation;
        assets: XcmVersionedAssets;
        feeAssetItem: number;
      };
    }
  /**
   * Transfer some assets from the local chain to the destination chain through their local,
   * destination or remote reserve.
   *
   * `assets` must have same reserve location and may not be teleportable to `dest`.
   * - `assets` have local reserve: transfer assets to sovereign account of destination
   * chain and forward a notification XCM to `dest` to mint and deposit reserve-based
   * assets to `beneficiary`.
   * - `assets` have destination reserve: burn local assets and forward a notification to
   * `dest` chain to withdraw the reserve assets from this chain's sovereign account and
   * deposit them to `beneficiary`.
   * - `assets` have remote reserve: burn local assets, forward XCM to reserve chain to move
   * reserves from this chain's SA to `dest` chain's SA, and forward another XCM to `dest`
   * to mint and deposit reserve-based assets to `beneficiary`.
   *
   * **This function is deprecated: Use `limited_reserve_transfer_assets` instead.**
   *
   * Fee payment on the destination side is made from the asset in the `assets` vector of
   * index `fee_asset_item`. The weight limit for fees is not provided and thus is unlimited,
   * with all fees taken as needed from the asset.
   *
   * - `origin`: Must be capable of withdrawing the `assets` and executing XCM.
   * - `dest`: Destination context for the assets. Will typically be `[Parent,
   * Parachain(..)]` to send from parachain to parachain, or `[Parachain(..)]` to send from
   * relay to parachain.
   * - `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will
   * generally be an `AccountId32` value.
   * - `assets`: The assets to be withdrawn. This should include the assets used to pay the
   * fee on the `dest` (and possibly reserve) chains.
   * - `fee_asset_item`: The index into `assets` of the item which should be used to pay
   * fees.
   **/
  | {
      name: 'ReserveTransferAssets';
      params: {
        dest: XcmVersionedLocation;
        beneficiary: XcmVersionedLocation;
        assets: XcmVersionedAssets;
        feeAssetItem: number;
      };
    }
  /**
   * Execute an XCM message from a local, signed, origin.
   *
   * An event is deposited indicating whether `msg` could be executed completely or only
   * partially.
   *
   * No more than `max_weight` will be used in its attempted execution. If this is less than
   * the maximum amount of weight that the message could take to be executed, then no
   * execution attempt will be made.
   **/
  | { name: 'Execute'; params: { message: XcmVersionedXcm; maxWeight: SpWeightsWeightV2Weight } }
  /**
   * Extoll that a particular destination can be communicated with through a particular
   * version of XCM.
   *
   * - `origin`: Must be an origin specified by AdminOrigin.
   * - `location`: The destination that is being described.
   * - `xcm_version`: The latest version of XCM that `location` supports.
   **/
  | { name: 'ForceXcmVersion'; params: { location: StagingXcmV4Location; version: number } }
  /**
   * Set a safe XCM version (the version that XCM should be encoded with if the most recent
   * version a destination can accept is unknown).
   *
   * - `origin`: Must be an origin specified by AdminOrigin.
   * - `maybe_xcm_version`: The default XCM encoding version, or `None` to disable.
   **/
  | { name: 'ForceDefaultXcmVersion'; params: { maybeXcmVersion?: number | undefined } }
  /**
   * Ask a location to notify us regarding their XCM version and any changes to it.
   *
   * - `origin`: Must be an origin specified by AdminOrigin.
   * - `location`: The location to which we should subscribe for XCM version notifications.
   **/
  | { name: 'ForceSubscribeVersionNotify'; params: { location: XcmVersionedLocation } }
  /**
   * Require that a particular destination should no longer notify us regarding any XCM
   * version changes.
   *
   * - `origin`: Must be an origin specified by AdminOrigin.
   * - `location`: The location to which we are currently subscribed for XCM version
   * notifications which we no longer desire.
   **/
  | { name: 'ForceUnsubscribeVersionNotify'; params: { location: XcmVersionedLocation } }
  /**
   * Transfer some assets from the local chain to the destination chain through their local,
   * destination or remote reserve.
   *
   * `assets` must have same reserve location and may not be teleportable to `dest`.
   * - `assets` have local reserve: transfer assets to sovereign account of destination
   * chain and forward a notification XCM to `dest` to mint and deposit reserve-based
   * assets to `beneficiary`.
   * - `assets` have destination reserve: burn local assets and forward a notification to
   * `dest` chain to withdraw the reserve assets from this chain's sovereign account and
   * deposit them to `beneficiary`.
   * - `assets` have remote reserve: burn local assets, forward XCM to reserve chain to move
   * reserves from this chain's SA to `dest` chain's SA, and forward another XCM to `dest`
   * to mint and deposit reserve-based assets to `beneficiary`.
   *
   * Fee payment on the destination side is made from the asset in the `assets` vector of
   * index `fee_asset_item`, up to enough to pay for `weight_limit` of weight. If more weight
   * is needed than `weight_limit`, then the operation will fail and the sent assets may be
   * at risk.
   *
   * - `origin`: Must be capable of withdrawing the `assets` and executing XCM.
   * - `dest`: Destination context for the assets. Will typically be `[Parent,
   * Parachain(..)]` to send from parachain to parachain, or `[Parachain(..)]` to send from
   * relay to parachain.
   * - `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will
   * generally be an `AccountId32` value.
   * - `assets`: The assets to be withdrawn. This should include the assets used to pay the
   * fee on the `dest` (and possibly reserve) chains.
   * - `fee_asset_item`: The index into `assets` of the item which should be used to pay
   * fees.
   * - `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase.
   **/
  | {
      name: 'LimitedReserveTransferAssets';
      params: {
        dest: XcmVersionedLocation;
        beneficiary: XcmVersionedLocation;
        assets: XcmVersionedAssets;
        feeAssetItem: number;
        weightLimit: XcmV3WeightLimit;
      };
    }
  /**
   * Teleport some assets from the local chain to some destination chain.
   *
   * Fee payment on the destination side is made from the asset in the `assets` vector of
   * index `fee_asset_item`, up to enough to pay for `weight_limit` of weight. If more weight
   * is needed than `weight_limit`, then the operation will fail and the sent assets may be
   * at risk.
   *
   * - `origin`: Must be capable of withdrawing the `assets` and executing XCM.
   * - `dest`: Destination context for the assets. Will typically be `[Parent,
   * Parachain(..)]` to send from parachain to parachain, or `[Parachain(..)]` to send from
   * relay to parachain.
   * - `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will
   * generally be an `AccountId32` value.
   * - `assets`: The assets to be withdrawn. This should include the assets used to pay the
   * fee on the `dest` chain.
   * - `fee_asset_item`: The index into `assets` of the item which should be used to pay
   * fees.
   * - `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase.
   **/
  | {
      name: 'LimitedTeleportAssets';
      params: {
        dest: XcmVersionedLocation;
        beneficiary: XcmVersionedLocation;
        assets: XcmVersionedAssets;
        feeAssetItem: number;
        weightLimit: XcmV3WeightLimit;
      };
    }
  /**
   * Set or unset the global suspension state of the XCM executor.
   *
   * - `origin`: Must be an origin specified by AdminOrigin.
   * - `suspended`: `true` to suspend, `false` to resume.
   **/
  | { name: 'ForceSuspension'; params: { suspended: boolean } }
  /**
   * Transfer some assets from the local chain to the destination chain through their local,
   * destination or remote reserve, or through teleports.
   *
   * Fee payment on the destination side is made from the asset in the `assets` vector of
   * index `fee_asset_item` (hence referred to as `fees`), up to enough to pay for
   * `weight_limit` of weight. If more weight is needed than `weight_limit`, then the
   * operation will fail and the sent assets may be at risk.
   *
   * `assets` (excluding `fees`) must have same reserve location or otherwise be teleportable
   * to `dest`, no limitations imposed on `fees`.
   * - for local reserve: transfer assets to sovereign account of destination chain and
   * forward a notification XCM to `dest` to mint and deposit reserve-based assets to
   * `beneficiary`.
   * - for destination reserve: burn local assets and forward a notification to `dest` chain
   * to withdraw the reserve assets from this chain's sovereign account and deposit them
   * to `beneficiary`.
   * - for remote reserve: burn local assets, forward XCM to reserve chain to move reserves
   * from this chain's SA to `dest` chain's SA, and forward another XCM to `dest` to mint
   * and deposit reserve-based assets to `beneficiary`.
   * - for teleports: burn local assets and forward XCM to `dest` chain to mint/teleport
   * assets and deposit them to `beneficiary`.
   *
   * - `origin`: Must be capable of withdrawing the `assets` and executing XCM.
   * - `dest`: Destination context for the assets. Will typically be `X2(Parent,
   * Parachain(..))` to send from parachain to parachain, or `X1(Parachain(..))` to send
   * from relay to parachain.
   * - `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will
   * generally be an `AccountId32` value.
   * - `assets`: The assets to be withdrawn. This should include the assets used to pay the
   * fee on the `dest` (and possibly reserve) chains.
   * - `fee_asset_item`: The index into `assets` of the item which should be used to pay
   * fees.
   * - `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase.
   **/
  | {
      name: 'TransferAssets';
      params: {
        dest: XcmVersionedLocation;
        beneficiary: XcmVersionedLocation;
        assets: XcmVersionedAssets;
        feeAssetItem: number;
        weightLimit: XcmV3WeightLimit;
      };
    }
  /**
   * Claims assets trapped on this pallet because of leftover assets during XCM execution.
   *
   * - `origin`: Anyone can call this extrinsic.
   * - `assets`: The exact assets that were trapped. Use the version to specify what version
   * was the latest when they were trapped.
   * - `beneficiary`: The location/account where the claimed assets will be deposited.
   **/
  | { name: 'ClaimAssets'; params: { assets: XcmVersionedAssets; beneficiary: XcmVersionedLocation } }
  /**
   * Transfer assets from the local chain to the destination chain using explicit transfer
   * types for assets and fees.
   *
   * `assets` must have same reserve location or may be teleportable to `dest`. Caller must
   * provide the `assets_transfer_type` to be used for `assets`:
   * - `TransferType::LocalReserve`: transfer assets to sovereign account of destination
   * chain and forward a notification XCM to `dest` to mint and deposit reserve-based
   * assets to `beneficiary`.
   * - `TransferType::DestinationReserve`: burn local assets and forward a notification to
   * `dest` chain to withdraw the reserve assets from this chain's sovereign account and
   * deposit them to `beneficiary`.
   * - `TransferType::RemoteReserve(reserve)`: burn local assets, forward XCM to `reserve`
   * chain to move reserves from this chain's SA to `dest` chain's SA, and forward another
   * XCM to `dest` to mint and deposit reserve-based assets to `beneficiary`. Typically
   * the remote `reserve` is Asset Hub.
   * - `TransferType::Teleport`: burn local assets and forward XCM to `dest` chain to
   * mint/teleport assets and deposit them to `beneficiary`.
   *
   * On the destination chain, as well as any intermediary hops, `BuyExecution` is used to
   * buy execution using transferred `assets` identified by `remote_fees_id`.
   * Make sure enough of the specified `remote_fees_id` asset is included in the given list
   * of `assets`. `remote_fees_id` should be enough to pay for `weight_limit`. If more weight
   * is needed than `weight_limit`, then the operation will fail and the sent assets may be
   * at risk.
   *
   * `remote_fees_id` may use different transfer type than rest of `assets` and can be
   * specified through `fees_transfer_type`.
   *
   * The caller needs to specify what should happen to the transferred assets once they reach
   * the `dest` chain. This is done through the `custom_xcm_on_dest` parameter, which
   * contains the instructions to execute on `dest` as a final step.
   * This is usually as simple as:
   * `Xcm(vec![DepositAsset { assets: Wild(AllCounted(assets.len())), beneficiary }])`,
   * but could be something more exotic like sending the `assets` even further.
   *
   * - `origin`: Must be capable of withdrawing the `assets` and executing XCM.
   * - `dest`: Destination context for the assets. Will typically be `[Parent,
   * Parachain(..)]` to send from parachain to parachain, or `[Parachain(..)]` to send from
   * relay to parachain, or `(parents: 2, (GlobalConsensus(..), ..))` to send from
   * parachain across a bridge to another ecosystem destination.
   * - `assets`: The assets to be withdrawn. This should include the assets used to pay the
   * fee on the `dest` (and possibly reserve) chains.
   * - `assets_transfer_type`: The XCM `TransferType` used to transfer the `assets`.
   * - `remote_fees_id`: One of the included `assets` to be used to pay fees.
   * - `fees_transfer_type`: The XCM `TransferType` used to transfer the `fees` assets.
   * - `custom_xcm_on_dest`: The XCM to be executed on `dest` chain as the last step of the
   * transfer, which also determines what happens to the assets on the destination chain.
   * - `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase.
   **/
  | {
      name: 'TransferAssetsUsingTypeAndThen';
      params: {
        dest: XcmVersionedLocation;
        assets: XcmVersionedAssets;
        assetsTransferType: StagingXcmExecutorAssetTransferTransferType;
        remoteFeesId: XcmVersionedAssetId;
        feesTransferType: StagingXcmExecutorAssetTransferTransferType;
        customXcmOnDest: XcmVersionedXcm;
        weightLimit: XcmV3WeightLimit;
      };
    };

export type XcmVersionedLocation =
  | { type: 'V2'; value: XcmV2MultilocationMultiLocation }
  | { type: 'V3'; value: StagingXcmV3MultilocationMultiLocation }
  | { type: 'V4'; value: StagingXcmV4Location };

export type XcmV2MultilocationMultiLocation = { parents: number; interior: XcmV2MultilocationJunctions };

export type XcmV2MultilocationJunctions =
  | { type: 'Here' }
  | { type: 'X1'; value: XcmV2Junction }
  | { type: 'X2'; value: [XcmV2Junction, XcmV2Junction] }
  | { type: 'X3'; value: [XcmV2Junction, XcmV2Junction, XcmV2Junction] }
  | { type: 'X4'; value: [XcmV2Junction, XcmV2Junction, XcmV2Junction, XcmV2Junction] }
  | { type: 'X5'; value: [XcmV2Junction, XcmV2Junction, XcmV2Junction, XcmV2Junction, XcmV2Junction] }
  | { type: 'X6'; value: [XcmV2Junction, XcmV2Junction, XcmV2Junction, XcmV2Junction, XcmV2Junction, XcmV2Junction] }
  | {
      type: 'X7';
      value: [XcmV2Junction, XcmV2Junction, XcmV2Junction, XcmV2Junction, XcmV2Junction, XcmV2Junction, XcmV2Junction];
    }
  | {
      type: 'X8';
      value: [
        XcmV2Junction,
        XcmV2Junction,
        XcmV2Junction,
        XcmV2Junction,
        XcmV2Junction,
        XcmV2Junction,
        XcmV2Junction,
        XcmV2Junction,
      ];
    };

export type XcmV2Junction =
  | { type: 'Parachain'; value: number }
  | { type: 'AccountId32'; value: { network: XcmV2NetworkId; id: FixedBytes<32> } }
  | { type: 'AccountIndex64'; value: { network: XcmV2NetworkId; index: bigint } }
  | { type: 'AccountKey20'; value: { network: XcmV2NetworkId; key: FixedBytes<20> } }
  | { type: 'PalletInstance'; value: number }
  | { type: 'GeneralIndex'; value: bigint }
  | { type: 'GeneralKey'; value: Bytes }
  | { type: 'OnlyChild' }
  | { type: 'Plurality'; value: { id: XcmV2BodyId; part: XcmV2BodyPart } };

export type XcmV2NetworkId =
  | { type: 'Any' }
  | { type: 'Named'; value: Bytes }
  | { type: 'Polkadot' }
  | { type: 'Kusama' };

export type XcmV2BodyId =
  | { type: 'Unit' }
  | { type: 'Named'; value: Bytes }
  | { type: 'Index'; value: number }
  | { type: 'Executive' }
  | { type: 'Technical' }
  | { type: 'Legislative' }
  | { type: 'Judicial' }
  | { type: 'Defense' }
  | { type: 'Administration' }
  | { type: 'Treasury' };

export type XcmV2BodyPart =
  | { type: 'Voice' }
  | { type: 'Members'; value: { count: number } }
  | { type: 'Fraction'; value: { nom: number; denom: number } }
  | { type: 'AtLeastProportion'; value: { nom: number; denom: number } }
  | { type: 'MoreThanProportion'; value: { nom: number; denom: number } };

export type StagingXcmV3MultilocationMultiLocation = { parents: number; interior: XcmV3Junctions };

export type XcmV3Junctions =
  | { type: 'Here' }
  | { type: 'X1'; value: XcmV3Junction }
  | { type: 'X2'; value: [XcmV3Junction, XcmV3Junction] }
  | { type: 'X3'; value: [XcmV3Junction, XcmV3Junction, XcmV3Junction] }
  | { type: 'X4'; value: [XcmV3Junction, XcmV3Junction, XcmV3Junction, XcmV3Junction] }
  | { type: 'X5'; value: [XcmV3Junction, XcmV3Junction, XcmV3Junction, XcmV3Junction, XcmV3Junction] }
  | { type: 'X6'; value: [XcmV3Junction, XcmV3Junction, XcmV3Junction, XcmV3Junction, XcmV3Junction, XcmV3Junction] }
  | {
      type: 'X7';
      value: [XcmV3Junction, XcmV3Junction, XcmV3Junction, XcmV3Junction, XcmV3Junction, XcmV3Junction, XcmV3Junction];
    }
  | {
      type: 'X8';
      value: [
        XcmV3Junction,
        XcmV3Junction,
        XcmV3Junction,
        XcmV3Junction,
        XcmV3Junction,
        XcmV3Junction,
        XcmV3Junction,
        XcmV3Junction,
      ];
    };

export type XcmV3Junction =
  | { type: 'Parachain'; value: number }
  | { type: 'AccountId32'; value: { network?: XcmV3JunctionNetworkId | undefined; id: FixedBytes<32> } }
  | { type: 'AccountIndex64'; value: { network?: XcmV3JunctionNetworkId | undefined; index: bigint } }
  | { type: 'AccountKey20'; value: { network?: XcmV3JunctionNetworkId | undefined; key: FixedBytes<20> } }
  | { type: 'PalletInstance'; value: number }
  | { type: 'GeneralIndex'; value: bigint }
  | { type: 'GeneralKey'; value: { length: number; data: FixedBytes<32> } }
  | { type: 'OnlyChild' }
  | { type: 'Plurality'; value: { id: XcmV3JunctionBodyId; part: XcmV3JunctionBodyPart } }
  | { type: 'GlobalConsensus'; value: XcmV3JunctionNetworkId };

export type XcmV3JunctionNetworkId =
  | { type: 'ByGenesis'; value: FixedBytes<32> }
  | { type: 'ByFork'; value: { blockNumber: bigint; blockHash: FixedBytes<32> } }
  | { type: 'Polkadot' }
  | { type: 'Kusama' }
  | { type: 'Westend' }
  | { type: 'Rococo' }
  | { type: 'Wococo' }
  | { type: 'Ethereum'; value: { chainId: bigint } }
  | { type: 'BitcoinCore' }
  | { type: 'BitcoinCash' }
  | { type: 'PolkadotBulletin' };

export type XcmVersionedXcm =
  | { type: 'V2'; value: XcmV2Xcm }
  | { type: 'V3'; value: XcmV3Xcm }
  | { type: 'V4'; value: StagingXcmV4Xcm };

export type XcmV2Xcm = Array<XcmV2Instruction>;

export type XcmV2Instruction =
  | { type: 'WithdrawAsset'; value: XcmV2MultiassetMultiAssets }
  | { type: 'ReserveAssetDeposited'; value: XcmV2MultiassetMultiAssets }
  | { type: 'ReceiveTeleportedAsset'; value: XcmV2MultiassetMultiAssets }
  | { type: 'QueryResponse'; value: { queryId: bigint; response: XcmV2Response; maxWeight: bigint } }
  | {
      type: 'TransferAsset';
      value: { assets: XcmV2MultiassetMultiAssets; beneficiary: XcmV2MultilocationMultiLocation };
    }
  | {
      type: 'TransferReserveAsset';
      value: { assets: XcmV2MultiassetMultiAssets; dest: XcmV2MultilocationMultiLocation; xcm: XcmV2Xcm };
    }
  | { type: 'Transact'; value: { originType: XcmV2OriginKind; requireWeightAtMost: bigint; call: XcmDoubleEncoded } }
  | { type: 'HrmpNewChannelOpenRequest'; value: { sender: number; maxMessageSize: number; maxCapacity: number } }
  | { type: 'HrmpChannelAccepted'; value: { recipient: number } }
  | { type: 'HrmpChannelClosing'; value: { initiator: number; sender: number; recipient: number } }
  | { type: 'ClearOrigin' }
  | { type: 'DescendOrigin'; value: XcmV2MultilocationJunctions }
  | {
      type: 'ReportError';
      value: { queryId: bigint; dest: XcmV2MultilocationMultiLocation; maxResponseWeight: bigint };
    }
  | {
      type: 'DepositAsset';
      value: {
        assets: XcmV2MultiassetMultiAssetFilter;
        maxAssets: number;
        beneficiary: XcmV2MultilocationMultiLocation;
      };
    }
  | {
      type: 'DepositReserveAsset';
      value: {
        assets: XcmV2MultiassetMultiAssetFilter;
        maxAssets: number;
        dest: XcmV2MultilocationMultiLocation;
        xcm: XcmV2Xcm;
      };
    }
  | { type: 'ExchangeAsset'; value: { give: XcmV2MultiassetMultiAssetFilter; receive: XcmV2MultiassetMultiAssets } }
  | {
      type: 'InitiateReserveWithdraw';
      value: { assets: XcmV2MultiassetMultiAssetFilter; reserve: XcmV2MultilocationMultiLocation; xcm: XcmV2Xcm };
    }
  | {
      type: 'InitiateTeleport';
      value: { assets: XcmV2MultiassetMultiAssetFilter; dest: XcmV2MultilocationMultiLocation; xcm: XcmV2Xcm };
    }
  | {
      type: 'QueryHolding';
      value: {
        queryId: bigint;
        dest: XcmV2MultilocationMultiLocation;
        assets: XcmV2MultiassetMultiAssetFilter;
        maxResponseWeight: bigint;
      };
    }
  | { type: 'BuyExecution'; value: { fees: XcmV2MultiassetMultiAsset; weightLimit: XcmV2WeightLimit } }
  | { type: 'RefundSurplus' }
  | { type: 'SetErrorHandler'; value: XcmV2Xcm }
  | { type: 'SetAppendix'; value: XcmV2Xcm }
  | { type: 'ClearError' }
  | { type: 'ClaimAsset'; value: { assets: XcmV2MultiassetMultiAssets; ticket: XcmV2MultilocationMultiLocation } }
  | { type: 'Trap'; value: bigint }
  | { type: 'SubscribeVersion'; value: { queryId: bigint; maxResponseWeight: bigint } }
  | { type: 'UnsubscribeVersion' };

export type XcmV2MultiassetMultiAssets = Array<XcmV2MultiassetMultiAsset>;

export type XcmV2MultiassetMultiAsset = { id: XcmV2MultiassetAssetId; fun: XcmV2MultiassetFungibility };

export type XcmV2MultiassetAssetId =
  | { type: 'Concrete'; value: XcmV2MultilocationMultiLocation }
  | { type: 'Abstract'; value: Bytes };

export type XcmV2MultiassetFungibility =
  | { type: 'Fungible'; value: bigint }
  | { type: 'NonFungible'; value: XcmV2MultiassetAssetInstance };

export type XcmV2MultiassetAssetInstance =
  | { type: 'Undefined' }
  | { type: 'Index'; value: bigint }
  | { type: 'Array4'; value: FixedBytes<4> }
  | { type: 'Array8'; value: FixedBytes<8> }
  | { type: 'Array16'; value: FixedBytes<16> }
  | { type: 'Array32'; value: FixedBytes<32> }
  | { type: 'Blob'; value: Bytes };

export type XcmV2Response =
  | { type: 'Null' }
  | { type: 'Assets'; value: XcmV2MultiassetMultiAssets }
  | { type: 'ExecutionResult'; value?: [number, XcmV2TraitsError] | undefined }
  | { type: 'Version'; value: number };

export type XcmV2TraitsError =
  | { type: 'Overflow' }
  | { type: 'Unimplemented' }
  | { type: 'UntrustedReserveLocation' }
  | { type: 'UntrustedTeleportLocation' }
  | { type: 'MultiLocationFull' }
  | { type: 'MultiLocationNotInvertible' }
  | { type: 'BadOrigin' }
  | { type: 'InvalidLocation' }
  | { type: 'AssetNotFound' }
  | { type: 'FailedToTransactAsset' }
  | { type: 'NotWithdrawable' }
  | { type: 'LocationCannotHold' }
  | { type: 'ExceedsMaxMessageSize' }
  | { type: 'DestinationUnsupported' }
  | { type: 'Transport' }
  | { type: 'Unroutable' }
  | { type: 'UnknownClaim' }
  | { type: 'FailedToDecode' }
  | { type: 'MaxWeightInvalid' }
  | { type: 'NotHoldingFees' }
  | { type: 'TooExpensive' }
  | { type: 'Trap'; value: bigint }
  | { type: 'UnhandledXcmVersion' }
  | { type: 'WeightLimitReached'; value: bigint }
  | { type: 'Barrier' }
  | { type: 'WeightNotComputable' };

export type XcmV2OriginKind = 'Native' | 'SovereignAccount' | 'Superuser' | 'Xcm';

export type XcmDoubleEncoded = { encoded: Bytes };

export type XcmV2MultiassetMultiAssetFilter =
  | { type: 'Definite'; value: XcmV2MultiassetMultiAssets }
  | { type: 'Wild'; value: XcmV2MultiassetWildMultiAsset };

export type XcmV2MultiassetWildMultiAsset =
  | { type: 'All' }
  | { type: 'AllOf'; value: { id: XcmV2MultiassetAssetId; fun: XcmV2MultiassetWildFungibility } };

export type XcmV2MultiassetWildFungibility = 'Fungible' | 'NonFungible';

export type XcmV2WeightLimit = { type: 'Unlimited' } | { type: 'Limited'; value: bigint };

export type XcmV3Xcm = Array<XcmV3Instruction>;

export type XcmV3Instruction =
  | { type: 'WithdrawAsset'; value: XcmV3MultiassetMultiAssets }
  | { type: 'ReserveAssetDeposited'; value: XcmV3MultiassetMultiAssets }
  | { type: 'ReceiveTeleportedAsset'; value: XcmV3MultiassetMultiAssets }
  | {
      type: 'QueryResponse';
      value: {
        queryId: bigint;
        response: XcmV3Response;
        maxWeight: SpWeightsWeightV2Weight;
        querier?: StagingXcmV3MultilocationMultiLocation | undefined;
      };
    }
  | {
      type: 'TransferAsset';
      value: { assets: XcmV3MultiassetMultiAssets; beneficiary: StagingXcmV3MultilocationMultiLocation };
    }
  | {
      type: 'TransferReserveAsset';
      value: { assets: XcmV3MultiassetMultiAssets; dest: StagingXcmV3MultilocationMultiLocation; xcm: XcmV3Xcm };
    }
  | {
      type: 'Transact';
      value: { originKind: XcmV3OriginKind; requireWeightAtMost: SpWeightsWeightV2Weight; call: XcmDoubleEncoded };
    }
  | { type: 'HrmpNewChannelOpenRequest'; value: { sender: number; maxMessageSize: number; maxCapacity: number } }
  | { type: 'HrmpChannelAccepted'; value: { recipient: number } }
  | { type: 'HrmpChannelClosing'; value: { initiator: number; sender: number; recipient: number } }
  | { type: 'ClearOrigin' }
  | { type: 'DescendOrigin'; value: XcmV3Junctions }
  | { type: 'ReportError'; value: XcmV3QueryResponseInfo }
  | {
      type: 'DepositAsset';
      value: { assets: XcmV3MultiassetMultiAssetFilter; beneficiary: StagingXcmV3MultilocationMultiLocation };
    }
  | {
      type: 'DepositReserveAsset';
      value: { assets: XcmV3MultiassetMultiAssetFilter; dest: StagingXcmV3MultilocationMultiLocation; xcm: XcmV3Xcm };
    }
  | {
      type: 'ExchangeAsset';
      value: { give: XcmV3MultiassetMultiAssetFilter; want: XcmV3MultiassetMultiAssets; maximal: boolean };
    }
  | {
      type: 'InitiateReserveWithdraw';
      value: {
        assets: XcmV3MultiassetMultiAssetFilter;
        reserve: StagingXcmV3MultilocationMultiLocation;
        xcm: XcmV3Xcm;
      };
    }
  | {
      type: 'InitiateTeleport';
      value: { assets: XcmV3MultiassetMultiAssetFilter; dest: StagingXcmV3MultilocationMultiLocation; xcm: XcmV3Xcm };
    }
  | { type: 'ReportHolding'; value: { responseInfo: XcmV3QueryResponseInfo; assets: XcmV3MultiassetMultiAssetFilter } }
  | { type: 'BuyExecution'; value: { fees: XcmV3MultiassetMultiAsset; weightLimit: XcmV3WeightLimit } }
  | { type: 'RefundSurplus' }
  | { type: 'SetErrorHandler'; value: XcmV3Xcm }
  | { type: 'SetAppendix'; value: XcmV3Xcm }
  | { type: 'ClearError' }
  | {
      type: 'ClaimAsset';
      value: { assets: XcmV3MultiassetMultiAssets; ticket: StagingXcmV3MultilocationMultiLocation };
    }
  | { type: 'Trap'; value: bigint }
  | { type: 'SubscribeVersion'; value: { queryId: bigint; maxResponseWeight: SpWeightsWeightV2Weight } }
  | { type: 'UnsubscribeVersion' }
  | { type: 'BurnAsset'; value: XcmV3MultiassetMultiAssets }
  | { type: 'ExpectAsset'; value: XcmV3MultiassetMultiAssets }
  | { type: 'ExpectOrigin'; value?: StagingXcmV3MultilocationMultiLocation | undefined }
  | { type: 'ExpectError'; value?: [number, XcmV3TraitsError] | undefined }
  | { type: 'ExpectTransactStatus'; value: XcmV3MaybeErrorCode }
  | { type: 'QueryPallet'; value: { moduleName: Bytes; responseInfo: XcmV3QueryResponseInfo } }
  | {
      type: 'ExpectPallet';
      value: { index: number; name: Bytes; moduleName: Bytes; crateMajor: number; minCrateMinor: number };
    }
  | { type: 'ReportTransactStatus'; value: XcmV3QueryResponseInfo }
  | { type: 'ClearTransactStatus' }
  | { type: 'UniversalOrigin'; value: XcmV3Junction }
  | { type: 'ExportMessage'; value: { network: XcmV3JunctionNetworkId; destination: XcmV3Junctions; xcm: XcmV3Xcm } }
  | { type: 'LockAsset'; value: { asset: XcmV3MultiassetMultiAsset; unlocker: StagingXcmV3MultilocationMultiLocation } }
  | { type: 'UnlockAsset'; value: { asset: XcmV3MultiassetMultiAsset; target: StagingXcmV3MultilocationMultiLocation } }
  | {
      type: 'NoteUnlockable';
      value: { asset: XcmV3MultiassetMultiAsset; owner: StagingXcmV3MultilocationMultiLocation };
    }
  | {
      type: 'RequestUnlock';
      value: { asset: XcmV3MultiassetMultiAsset; locker: StagingXcmV3MultilocationMultiLocation };
    }
  | { type: 'SetFeesMode'; value: { jitWithdraw: boolean } }
  | { type: 'SetTopic'; value: FixedBytes<32> }
  | { type: 'ClearTopic' }
  | { type: 'AliasOrigin'; value: StagingXcmV3MultilocationMultiLocation }
  | {
      type: 'UnpaidExecution';
      value: { weightLimit: XcmV3WeightLimit; checkOrigin?: StagingXcmV3MultilocationMultiLocation | undefined };
    };

export type XcmV3MultiassetMultiAssets = Array<XcmV3MultiassetMultiAsset>;

export type XcmV3MultiassetMultiAsset = { id: XcmV3MultiassetAssetId; fun: XcmV3MultiassetFungibility };

export type XcmV3MultiassetAssetId =
  | { type: 'Concrete'; value: StagingXcmV3MultilocationMultiLocation }
  | { type: 'Abstract'; value: FixedBytes<32> };

export type XcmV3MultiassetFungibility =
  | { type: 'Fungible'; value: bigint }
  | { type: 'NonFungible'; value: XcmV3MultiassetAssetInstance };

export type XcmV3MultiassetAssetInstance =
  | { type: 'Undefined' }
  | { type: 'Index'; value: bigint }
  | { type: 'Array4'; value: FixedBytes<4> }
  | { type: 'Array8'; value: FixedBytes<8> }
  | { type: 'Array16'; value: FixedBytes<16> }
  | { type: 'Array32'; value: FixedBytes<32> };

export type XcmV3Response =
  | { type: 'Null' }
  | { type: 'Assets'; value: XcmV3MultiassetMultiAssets }
  | { type: 'ExecutionResult'; value?: [number, XcmV3TraitsError] | undefined }
  | { type: 'Version'; value: number }
  | { type: 'PalletsInfo'; value: Array<XcmV3PalletInfo> }
  | { type: 'DispatchResult'; value: XcmV3MaybeErrorCode };

export type XcmV3TraitsError =
  | { type: 'Overflow' }
  | { type: 'Unimplemented' }
  | { type: 'UntrustedReserveLocation' }
  | { type: 'UntrustedTeleportLocation' }
  | { type: 'LocationFull' }
  | { type: 'LocationNotInvertible' }
  | { type: 'BadOrigin' }
  | { type: 'InvalidLocation' }
  | { type: 'AssetNotFound' }
  | { type: 'FailedToTransactAsset' }
  | { type: 'NotWithdrawable' }
  | { type: 'LocationCannotHold' }
  | { type: 'ExceedsMaxMessageSize' }
  | { type: 'DestinationUnsupported' }
  | { type: 'Transport' }
  | { type: 'Unroutable' }
  | { type: 'UnknownClaim' }
  | { type: 'FailedToDecode' }
  | { type: 'MaxWeightInvalid' }
  | { type: 'NotHoldingFees' }
  | { type: 'TooExpensive' }
  | { type: 'Trap'; value: bigint }
  | { type: 'ExpectationFalse' }
  | { type: 'PalletNotFound' }
  | { type: 'NameMismatch' }
  | { type: 'VersionIncompatible' }
  | { type: 'HoldingWouldOverflow' }
  | { type: 'ExportError' }
  | { type: 'ReanchorFailed' }
  | { type: 'NoDeal' }
  | { type: 'FeesNotMet' }
  | { type: 'LockError' }
  | { type: 'NoPermission' }
  | { type: 'Unanchored' }
  | { type: 'NotDepositable' }
  | { type: 'UnhandledXcmVersion' }
  | { type: 'WeightLimitReached'; value: SpWeightsWeightV2Weight }
  | { type: 'Barrier' }
  | { type: 'WeightNotComputable' }
  | { type: 'ExceedsStackLimit' };

export type XcmV3PalletInfo = {
  index: number;
  name: Bytes;
  moduleName: Bytes;
  major: number;
  minor: number;
  patch: number;
};

export type XcmV3MaybeErrorCode =
  | { type: 'Success' }
  | { type: 'Error'; value: Bytes }
  | { type: 'TruncatedError'; value: Bytes };

export type XcmV3OriginKind = 'Native' | 'SovereignAccount' | 'Superuser' | 'Xcm';

export type XcmV3QueryResponseInfo = {
  destination: StagingXcmV3MultilocationMultiLocation;
  queryId: bigint;
  maxWeight: SpWeightsWeightV2Weight;
};

export type XcmV3MultiassetMultiAssetFilter =
  | { type: 'Definite'; value: XcmV3MultiassetMultiAssets }
  | { type: 'Wild'; value: XcmV3MultiassetWildMultiAsset };

export type XcmV3MultiassetWildMultiAsset =
  | { type: 'All' }
  | { type: 'AllOf'; value: { id: XcmV3MultiassetAssetId; fun: XcmV3MultiassetWildFungibility } }
  | { type: 'AllCounted'; value: number }
  | { type: 'AllOfCounted'; value: { id: XcmV3MultiassetAssetId; fun: XcmV3MultiassetWildFungibility; count: number } };

export type XcmV3MultiassetWildFungibility = 'Fungible' | 'NonFungible';

export type XcmV3WeightLimit = { type: 'Unlimited' } | { type: 'Limited'; value: SpWeightsWeightV2Weight };

export type StagingXcmV4Xcm = Array<StagingXcmV4Instruction>;

export type StagingXcmV4Instruction =
  | { type: 'WithdrawAsset'; value: StagingXcmV4AssetAssets }
  | { type: 'ReserveAssetDeposited'; value: StagingXcmV4AssetAssets }
  | { type: 'ReceiveTeleportedAsset'; value: StagingXcmV4AssetAssets }
  | {
      type: 'QueryResponse';
      value: {
        queryId: bigint;
        response: StagingXcmV4Response;
        maxWeight: SpWeightsWeightV2Weight;
        querier?: StagingXcmV4Location | undefined;
      };
    }
  | { type: 'TransferAsset'; value: { assets: StagingXcmV4AssetAssets; beneficiary: StagingXcmV4Location } }
  | {
      type: 'TransferReserveAsset';
      value: { assets: StagingXcmV4AssetAssets; dest: StagingXcmV4Location; xcm: StagingXcmV4Xcm };
    }
  | {
      type: 'Transact';
      value: { originKind: XcmV3OriginKind; requireWeightAtMost: SpWeightsWeightV2Weight; call: XcmDoubleEncoded };
    }
  | { type: 'HrmpNewChannelOpenRequest'; value: { sender: number; maxMessageSize: number; maxCapacity: number } }
  | { type: 'HrmpChannelAccepted'; value: { recipient: number } }
  | { type: 'HrmpChannelClosing'; value: { initiator: number; sender: number; recipient: number } }
  | { type: 'ClearOrigin' }
  | { type: 'DescendOrigin'; value: StagingXcmV4Junctions }
  | { type: 'ReportError'; value: StagingXcmV4QueryResponseInfo }
  | { type: 'DepositAsset'; value: { assets: StagingXcmV4AssetAssetFilter; beneficiary: StagingXcmV4Location } }
  | {
      type: 'DepositReserveAsset';
      value: { assets: StagingXcmV4AssetAssetFilter; dest: StagingXcmV4Location; xcm: StagingXcmV4Xcm };
    }
  | {
      type: 'ExchangeAsset';
      value: { give: StagingXcmV4AssetAssetFilter; want: StagingXcmV4AssetAssets; maximal: boolean };
    }
  | {
      type: 'InitiateReserveWithdraw';
      value: { assets: StagingXcmV4AssetAssetFilter; reserve: StagingXcmV4Location; xcm: StagingXcmV4Xcm };
    }
  | {
      type: 'InitiateTeleport';
      value: { assets: StagingXcmV4AssetAssetFilter; dest: StagingXcmV4Location; xcm: StagingXcmV4Xcm };
    }
  | {
      type: 'ReportHolding';
      value: { responseInfo: StagingXcmV4QueryResponseInfo; assets: StagingXcmV4AssetAssetFilter };
    }
  | { type: 'BuyExecution'; value: { fees: StagingXcmV4Asset; weightLimit: XcmV3WeightLimit } }
  | { type: 'RefundSurplus' }
  | { type: 'SetErrorHandler'; value: StagingXcmV4Xcm }
  | { type: 'SetAppendix'; value: StagingXcmV4Xcm }
  | { type: 'ClearError' }
  | { type: 'ClaimAsset'; value: { assets: StagingXcmV4AssetAssets; ticket: StagingXcmV4Location } }
  | { type: 'Trap'; value: bigint }
  | { type: 'SubscribeVersion'; value: { queryId: bigint; maxResponseWeight: SpWeightsWeightV2Weight } }
  | { type: 'UnsubscribeVersion' }
  | { type: 'BurnAsset'; value: StagingXcmV4AssetAssets }
  | { type: 'ExpectAsset'; value: StagingXcmV4AssetAssets }
  | { type: 'ExpectOrigin'; value?: StagingXcmV4Location | undefined }
  | { type: 'ExpectError'; value?: [number, XcmV3TraitsError] | undefined }
  | { type: 'ExpectTransactStatus'; value: XcmV3MaybeErrorCode }
  | { type: 'QueryPallet'; value: { moduleName: Bytes; responseInfo: StagingXcmV4QueryResponseInfo } }
  | {
      type: 'ExpectPallet';
      value: { index: number; name: Bytes; moduleName: Bytes; crateMajor: number; minCrateMinor: number };
    }
  | { type: 'ReportTransactStatus'; value: StagingXcmV4QueryResponseInfo }
  | { type: 'ClearTransactStatus' }
  | { type: 'UniversalOrigin'; value: StagingXcmV4Junction }
  | {
      type: 'ExportMessage';
      value: { network: StagingXcmV4JunctionNetworkId; destination: StagingXcmV4Junctions; xcm: StagingXcmV4Xcm };
    }
  | { type: 'LockAsset'; value: { asset: StagingXcmV4Asset; unlocker: StagingXcmV4Location } }
  | { type: 'UnlockAsset'; value: { asset: StagingXcmV4Asset; target: StagingXcmV4Location } }
  | { type: 'NoteUnlockable'; value: { asset: StagingXcmV4Asset; owner: StagingXcmV4Location } }
  | { type: 'RequestUnlock'; value: { asset: StagingXcmV4Asset; locker: StagingXcmV4Location } }
  | { type: 'SetFeesMode'; value: { jitWithdraw: boolean } }
  | { type: 'SetTopic'; value: FixedBytes<32> }
  | { type: 'ClearTopic' }
  | { type: 'AliasOrigin'; value: StagingXcmV4Location }
  | {
      type: 'UnpaidExecution';
      value: { weightLimit: XcmV3WeightLimit; checkOrigin?: StagingXcmV4Location | undefined };
    };

export type StagingXcmV4AssetAssets = Array<StagingXcmV4Asset>;

export type StagingXcmV4Asset = { id: StagingXcmV4AssetAssetId; fun: StagingXcmV4AssetFungibility };

export type StagingXcmV4AssetAssetId = StagingXcmV4Location;

export type StagingXcmV4AssetFungibility =
  | { type: 'Fungible'; value: bigint }
  | { type: 'NonFungible'; value: StagingXcmV4AssetAssetInstance };

export type StagingXcmV4AssetAssetInstance =
  | { type: 'Undefined' }
  | { type: 'Index'; value: bigint }
  | { type: 'Array4'; value: FixedBytes<4> }
  | { type: 'Array8'; value: FixedBytes<8> }
  | { type: 'Array16'; value: FixedBytes<16> }
  | { type: 'Array32'; value: FixedBytes<32> };

export type StagingXcmV4Response =
  | { type: 'Null' }
  | { type: 'Assets'; value: StagingXcmV4AssetAssets }
  | { type: 'ExecutionResult'; value?: [number, XcmV3TraitsError] | undefined }
  | { type: 'Version'; value: number }
  | { type: 'PalletsInfo'; value: Array<StagingXcmV4PalletInfo> }
  | { type: 'DispatchResult'; value: XcmV3MaybeErrorCode };

export type StagingXcmV4PalletInfo = {
  index: number;
  name: Bytes;
  moduleName: Bytes;
  major: number;
  minor: number;
  patch: number;
};

export type StagingXcmV4QueryResponseInfo = {
  destination: StagingXcmV4Location;
  queryId: bigint;
  maxWeight: SpWeightsWeightV2Weight;
};

export type StagingXcmV4AssetAssetFilter =
  | { type: 'Definite'; value: StagingXcmV4AssetAssets }
  | { type: 'Wild'; value: StagingXcmV4AssetWildAsset };

export type StagingXcmV4AssetWildAsset =
  | { type: 'All' }
  | { type: 'AllOf'; value: { id: StagingXcmV4AssetAssetId; fun: StagingXcmV4AssetWildFungibility } }
  | { type: 'AllCounted'; value: number }
  | {
      type: 'AllOfCounted';
      value: { id: StagingXcmV4AssetAssetId; fun: StagingXcmV4AssetWildFungibility; count: number };
    };

export type StagingXcmV4AssetWildFungibility = 'Fungible' | 'NonFungible';

export type XcmVersionedAssets =
  | { type: 'V2'; value: XcmV2MultiassetMultiAssets }
  | { type: 'V3'; value: XcmV3MultiassetMultiAssets }
  | { type: 'V4'; value: StagingXcmV4AssetAssets };

export type StagingXcmExecutorAssetTransferTransferType =
  | { type: 'Teleport' }
  | { type: 'LocalReserve' }
  | { type: 'DestinationReserve' }
  | { type: 'RemoteReserve'; value: XcmVersionedLocation };

export type XcmVersionedAssetId =
  | { type: 'V3'; value: XcmV3MultiassetAssetId }
  | { type: 'V4'; value: StagingXcmV4AssetAssetId };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type CumulusPalletXcmCall = null;

export type CumulusPalletXcmCallLike = null;

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletMessageQueueCall =
  /**
   * Remove a page which has no more messages remaining to be processed or is stale.
   **/
  | { name: 'ReapPage'; params: { messageOrigin: CumulusPrimitivesCoreAggregateMessageOrigin; pageIndex: number } }
  /**
   * Execute an overweight message.
   *
   * Temporary processing errors will be propagated whereas permanent errors are treated
   * as success condition.
   *
   * - `origin`: Must be `Signed`.
   * - `message_origin`: The origin from which the message to be executed arrived.
   * - `page`: The page in the queue in which the message to be executed is sitting.
   * - `index`: The index into the queue of the message to be executed.
   * - `weight_limit`: The maximum amount of weight allowed to be consumed in the execution
   * of the message.
   *
   * Benchmark complexity considerations: O(index + weight_limit).
   **/
  | {
      name: 'ExecuteOverweight';
      params: {
        messageOrigin: CumulusPrimitivesCoreAggregateMessageOrigin;
        page: number;
        index: number;
        weightLimit: SpWeightsWeightV2Weight;
      };
    };

export type PalletMessageQueueCallLike =
  /**
   * Remove a page which has no more messages remaining to be processed or is stale.
   **/
  | { name: 'ReapPage'; params: { messageOrigin: CumulusPrimitivesCoreAggregateMessageOrigin; pageIndex: number } }
  /**
   * Execute an overweight message.
   *
   * Temporary processing errors will be propagated whereas permanent errors are treated
   * as success condition.
   *
   * - `origin`: Must be `Signed`.
   * - `message_origin`: The origin from which the message to be executed arrived.
   * - `page`: The page in the queue in which the message to be executed is sitting.
   * - `index`: The index into the queue of the message to be executed.
   * - `weight_limit`: The maximum amount of weight allowed to be consumed in the execution
   * of the message.
   *
   * Benchmark complexity considerations: O(index + weight_limit).
   **/
  | {
      name: 'ExecuteOverweight';
      params: {
        messageOrigin: CumulusPrimitivesCoreAggregateMessageOrigin;
        page: number;
        index: number;
        weightLimit: SpWeightsWeightV2Weight;
      };
    };

export type CumulusPrimitivesCoreAggregateMessageOrigin =
  | { type: 'Here' }
  | { type: 'Parent' }
  | { type: 'Sibling'; value: PolkadotParachainPrimitivesPrimitivesId };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletAssetRegistryCall =
  /**
   * Register a new asset.
   *
   * Asset is identified by `name` and the name must not be used to register another asset.
   *
   * New asset is given `NextAssetId` - sequential asset id
   *
   * Adds mapping between `name` and assigned `asset_id` so asset id can be retrieved by name too (Note: this approach is used in AMM implementation (xyk))
   *
   * Emits 'Registered` event when successful.
   **/
  | {
      name: 'Register';
      params: {
        name: Bytes;
        assetType: PalletAssetRegistryAssetType;
        existentialDeposit: bigint;
        assetId?: number | undefined;
        metadata?: PalletAssetRegistryMetadata | undefined;
        location?: BasiliskRuntimeXcmAssetLocation | undefined;
        xcmRateLimit?: bigint | undefined;
      };
    }
  /**
   * Update registered asset.
   *
   * Updates also mapping between name and asset id if provided name is different than currently registered.
   *
   * Emits `Updated` event when successful.
   **/
  | {
      name: 'Update';
      params: {
        assetId: number;
        name: Bytes;
        assetType: PalletAssetRegistryAssetType;
        existentialDeposit?: bigint | undefined;
        xcmRateLimit?: bigint | undefined;
      };
    }
  /**
   * Set metadata for an asset.
   *
   * - `asset_id`: Asset identifier.
   * - `symbol`: The exchange symbol for this asset. Limited in length by `StringLimit`.
   * - `decimals`: The number of decimals this asset uses to represent one unit.
   *
   * Emits `MetadataSet` event when successful.
   **/
  | { name: 'SetMetadata'; params: { assetId: number; symbol: Bytes; decimals: number } }
  /**
   * Set asset native location.
   *
   * Adds mapping between native location and local asset id and vice versa.
   *
   * Mainly used in XCM.
   *
   * Emits `LocationSet` event when successful.
   **/
  | { name: 'SetLocation'; params: { assetId: number; location: BasiliskRuntimeXcmAssetLocation } };

export type PalletAssetRegistryCallLike =
  /**
   * Register a new asset.
   *
   * Asset is identified by `name` and the name must not be used to register another asset.
   *
   * New asset is given `NextAssetId` - sequential asset id
   *
   * Adds mapping between `name` and assigned `asset_id` so asset id can be retrieved by name too (Note: this approach is used in AMM implementation (xyk))
   *
   * Emits 'Registered` event when successful.
   **/
  | {
      name: 'Register';
      params: {
        name: BytesLike;
        assetType: PalletAssetRegistryAssetType;
        existentialDeposit: bigint;
        assetId?: number | undefined;
        metadata?: PalletAssetRegistryMetadata | undefined;
        location?: BasiliskRuntimeXcmAssetLocation | undefined;
        xcmRateLimit?: bigint | undefined;
      };
    }
  /**
   * Update registered asset.
   *
   * Updates also mapping between name and asset id if provided name is different than currently registered.
   *
   * Emits `Updated` event when successful.
   **/
  | {
      name: 'Update';
      params: {
        assetId: number;
        name: BytesLike;
        assetType: PalletAssetRegistryAssetType;
        existentialDeposit?: bigint | undefined;
        xcmRateLimit?: bigint | undefined;
      };
    }
  /**
   * Set metadata for an asset.
   *
   * - `asset_id`: Asset identifier.
   * - `symbol`: The exchange symbol for this asset. Limited in length by `StringLimit`.
   * - `decimals`: The number of decimals this asset uses to represent one unit.
   *
   * Emits `MetadataSet` event when successful.
   **/
  | { name: 'SetMetadata'; params: { assetId: number; symbol: BytesLike; decimals: number } }
  /**
   * Set asset native location.
   *
   * Adds mapping between native location and local asset id and vice versa.
   *
   * Mainly used in XCM.
   *
   * Emits `LocationSet` event when successful.
   **/
  | { name: 'SetLocation'; params: { assetId: number; location: BasiliskRuntimeXcmAssetLocation } };

export type PalletAssetRegistryAssetType =
  | { type: 'Token' }
  | { type: 'PoolShare'; value: [number, number] }
  | { type: 'Xyk' }
  | { type: 'StableSwap' }
  | { type: 'Bond' }
  | { type: 'External' }
  | { type: 'Erc20' };

export type PalletAssetRegistryMetadata = { symbol: Bytes; decimals: number };

export type BasiliskRuntimeXcmAssetLocation = StagingXcmV3MultilocationMultiLocation;

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletXykCall =
  /**
   * Create new pool for given asset pair.
   *
   * Registers new pool for given asset pair (`asset a` and `asset b`) in asset registry.
   * Asset registry creates new id or returns previously created one if such pool existed before.
   *
   * Pool is created with initial liquidity provided by `origin`.
   * Shares are issued with specified initial price and represents proportion of asset in the pool.
   *
   * Emits `PoolCreated` event when successful.
   **/
  | { name: 'CreatePool'; params: { assetA: number; amountA: bigint; assetB: number; amountB: bigint } }
  /**
   * Add liquidity to previously created asset pair pool.
   *
   * Shares are issued with current price.
   *
   * Emits `LiquidityAdded` event when successful.
   **/
  | { name: 'AddLiquidity'; params: { assetA: number; assetB: number; amountA: bigint; amountBMaxLimit: bigint } }
  /**
   * Remove liquidity from specific liquidity pool in the form of burning shares.
   *
   * If liquidity in the pool reaches 0, it is destroyed.
   *
   * Emits 'LiquidityRemoved' when successful.
   * Emits 'PoolDestroyed' when pool is destroyed.
   **/
  | { name: 'RemoveLiquidity'; params: { assetA: number; assetB: number; liquidityAmount: bigint } }
  /**
   * Trade asset in for asset out.
   *
   * Executes a swap of `asset_in` for `asset_out`. Price is determined by the liquidity pool.
   *
   * `max_limit` - minimum amount of `asset_out` / amount of asset_out to be obtained from the pool in exchange for `asset_in`.
   *
   * Emits `SellExecuted` when successful. Deprecated.
   * Emits `pallet_broadcast::Swapped` when successful.
   **/
  | { name: 'Sell'; params: { assetIn: number; assetOut: number; amount: bigint; maxLimit: bigint; discount: boolean } }
  /**
   * Trade asset in for asset out.
   *
   * Executes a swap of `asset_in` for `asset_out`. Price is determined by the liquidity pool.
   *
   * `max_limit` - maximum amount of `asset_in` to be sold in exchange for `asset_out`.
   * Emits `BuyExecuted` when successful. Deprecated.
   * Emits `pallet_broadcast::Swapped` when successful.
   **/
  | { name: 'Buy'; params: { assetOut: number; assetIn: number; amount: bigint; maxLimit: bigint; discount: boolean } };

export type PalletXykCallLike =
  /**
   * Create new pool for given asset pair.
   *
   * Registers new pool for given asset pair (`asset a` and `asset b`) in asset registry.
   * Asset registry creates new id or returns previously created one if such pool existed before.
   *
   * Pool is created with initial liquidity provided by `origin`.
   * Shares are issued with specified initial price and represents proportion of asset in the pool.
   *
   * Emits `PoolCreated` event when successful.
   **/
  | { name: 'CreatePool'; params: { assetA: number; amountA: bigint; assetB: number; amountB: bigint } }
  /**
   * Add liquidity to previously created asset pair pool.
   *
   * Shares are issued with current price.
   *
   * Emits `LiquidityAdded` event when successful.
   **/
  | { name: 'AddLiquidity'; params: { assetA: number; assetB: number; amountA: bigint; amountBMaxLimit: bigint } }
  /**
   * Remove liquidity from specific liquidity pool in the form of burning shares.
   *
   * If liquidity in the pool reaches 0, it is destroyed.
   *
   * Emits 'LiquidityRemoved' when successful.
   * Emits 'PoolDestroyed' when pool is destroyed.
   **/
  | { name: 'RemoveLiquidity'; params: { assetA: number; assetB: number; liquidityAmount: bigint } }
  /**
   * Trade asset in for asset out.
   *
   * Executes a swap of `asset_in` for `asset_out`. Price is determined by the liquidity pool.
   *
   * `max_limit` - minimum amount of `asset_out` / amount of asset_out to be obtained from the pool in exchange for `asset_in`.
   *
   * Emits `SellExecuted` when successful. Deprecated.
   * Emits `pallet_broadcast::Swapped` when successful.
   **/
  | { name: 'Sell'; params: { assetIn: number; assetOut: number; amount: bigint; maxLimit: bigint; discount: boolean } }
  /**
   * Trade asset in for asset out.
   *
   * Executes a swap of `asset_in` for `asset_out`. Price is determined by the liquidity pool.
   *
   * `max_limit` - maximum amount of `asset_in` to be sold in exchange for `asset_out`.
   * Emits `BuyExecuted` when successful. Deprecated.
   * Emits `pallet_broadcast::Swapped` when successful.
   **/
  | { name: 'Buy'; params: { assetOut: number; assetIn: number; amount: bigint; maxLimit: bigint; discount: boolean } };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletDusterCall =
  /**
   * Dust specified account.
   * IF account balance is < min. existential deposit of given currency, and account is allowed to
   * be dusted, the remaining balance is transferred to selected account (usually treasury).
   *
   * Caller is rewarded with chosen reward in native currency.
   **/
  | { name: 'DustAccount'; params: { account: AccountId32; currencyId: number } }
  /**
   * Add account to list of non-dustable account. Account whihc are excluded from udsting.
   * If such account should be dusted - `AccountBlacklisted` error is returned.
   * Only root can perform this action.
   **/
  | { name: 'AddNondustableAccount'; params: { account: AccountId32 } }
  /**
   * Remove account from list of non-dustable accounts. That means account can be dusted again.
   **/
  | { name: 'RemoveNondustableAccount'; params: { account: AccountId32 } };

export type PalletDusterCallLike =
  /**
   * Dust specified account.
   * IF account balance is < min. existential deposit of given currency, and account is allowed to
   * be dusted, the remaining balance is transferred to selected account (usually treasury).
   *
   * Caller is rewarded with chosen reward in native currency.
   **/
  | { name: 'DustAccount'; params: { account: AccountId32Like; currencyId: number } }
  /**
   * Add account to list of non-dustable account. Account whihc are excluded from udsting.
   * If such account should be dusted - `AccountBlacklisted` error is returned.
   * Only root can perform this action.
   **/
  | { name: 'AddNondustableAccount'; params: { account: AccountId32Like } }
  /**
   * Remove account from list of non-dustable accounts. That means account can be dusted again.
   **/
  | { name: 'RemoveNondustableAccount'; params: { account: AccountId32Like } };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletLbpCall =
  /**
   * Create a new liquidity bootstrapping pool for given asset pair.
   *
   * For any asset pair, only one pool can exist at a time.
   *
   * The dispatch origin for this call must be `T::CreatePoolOrigin`.
   * The pool is created with initial liquidity provided by the `pool_owner` who must have
   * sufficient funds free.
   *
   * The pool starts uninitialized and update_pool call should be called once created to set the start block.
   *
   * This function should be dispatched from governing entity `T::CreatePoolOrigin`
   *
   * Parameters:
   * - `pool_owner`: the future owner of the new pool.
   * - `asset_a`: { asset_id, amount } Asset ID and initial liquidity amount.
   * - `asset_b`: { asset_id, amount } Asset ID and initial liquidity amount.
   * - `initial_weight`: Initial weight of the asset_a. 1_000_000 corresponding to 1% and 100_000_000 to 100%
   * this should be higher than final weight
   * - `final_weight`: Final weight of the asset_a. 1_000_000 corresponding to 1% and 100_000_000 to 100%
   * this should be lower than initial weight
   * - `weight_curve`: The weight function used to update the LBP weights. Currently,
   * there is only one weight function implemented, the linear function.
   * - `fee`: The trading fee charged on every trade distributed to `fee_collector`.
   * - `fee_collector`: The account to which trading fees will be transferred.
   * - `repay_target`: The amount of tokens to repay to separate fee_collector account. Until this amount is
   * reached, fee will be increased to 20% and taken from the pool
   *
   * Emits `PoolCreated` event when successful.
   *
   * BEWARE: We are taking the fee from the accumulated asset. If the accumulated asset is sold to the pool,
   * the fee cost is transferred to the pool. If its bought from the pool the buyer bears the cost.
   * This increases the price of the sold asset on every trade. Make sure to only run this with
   * previously illiquid assets.
   **/
  | {
      name: 'CreatePool';
      params: {
        poolOwner: AccountId32;
        assetA: number;
        assetAAmount: bigint;
        assetB: number;
        assetBAmount: bigint;
        initialWeight: number;
        finalWeight: number;
        weightCurve: PalletLbpWeightCurveType;
        fee: [number, number];
        feeCollector: AccountId32;
        repayTarget: bigint;
      };
    }
  /**
   * Update pool data of a pool.
   *
   * The dispatch origin for this call must be signed by the pool owner.
   *
   * The pool can be updated only if the sale has not already started.
   *
   * At least one of the following optional parameters has to be specified.
   *
   * Parameters:
   * - `pool_id`: The identifier of the pool to be updated.
   * - `start`: The new starting time of the sale. This parameter is optional.
   * - `end`: The new ending time of the sale. This parameter is optional.
   * - `initial_weight`: The new initial weight. This parameter is optional.
   * - `final_weight`: The new final weight. This parameter is optional.
   * - `fee`: The new trading fee charged on every trade. This parameter is optional.
   * - `fee_collector`: The new receiver of trading fees. This parameter is optional.
   *
   * Emits `PoolUpdated` event when successful.
   **/
  | {
      name: 'UpdatePoolData';
      params: {
        poolId: AccountId32;
        poolOwner?: AccountId32 | undefined;
        start?: number | undefined;
        end?: number | undefined;
        initialWeight?: number | undefined;
        finalWeight?: number | undefined;
        fee?: [number, number] | undefined;
        feeCollector?: AccountId32 | undefined;
        repayTarget?: bigint | undefined;
      };
    }
  /**
   * Add liquidity to a pool.
   *
   * Assets to add has to match the pool assets. At least one amount has to be non-zero.
   *
   * The dispatch origin for this call must be signed by the pool owner.
   *
   * Parameters:
   * - `pool_id`: The identifier of the pool
   * - `amount_a`: The identifier of the asset and the amount to add.
   * - `amount_b`: The identifier of the second asset and the amount to add.
   *
   * Emits `LiquidityAdded` event when successful.
   **/
  | { name: 'AddLiquidity'; params: { amountA: [number, bigint]; amountB: [number, bigint] } }
  /**
   * Transfer all the liquidity from a pool back to the pool owner and destroy the pool.
   * The pool data are also removed from the storage.
   *
   * The pool can't be destroyed during the sale.
   *
   * The dispatch origin for this call must be signed by the pool owner.
   *
   * Parameters:
   * - `amount_a`: The identifier of the asset and the amount to add.
   *
   * Emits 'LiquidityRemoved' when successful.
   **/
  | { name: 'RemoveLiquidity'; params: { poolId: AccountId32 } }
  /**
   * Trade `asset_in` for `asset_out`.
   *
   * Executes a swap of `asset_in` for `asset_out`. Price is determined by the pool and is
   * affected by the amount and proportion of the pool assets and the weights.
   *
   * Trading `fee` is distributed to the `fee_collector`.
   *
   * Parameters:
   * - `asset_in`: The identifier of the asset being transferred from the account to the pool.
   * - `asset_out`: The identifier of the asset being transferred from the pool to the account.
   * - `amount`: The amount of `asset_in`
   * - `max_limit`: minimum amount of `asset_out` / amount of asset_out to be obtained from the pool in exchange for `asset_in`.
   *
   * Emits `SellExecuted` when successful. Deprecated.
   * Emits `pallet_broadcast::Swapped` when successful.
   **/
  | { name: 'Sell'; params: { assetIn: number; assetOut: number; amount: bigint; maxLimit: bigint } }
  /**
   * Trade `asset_in` for `asset_out`.
   *
   * Executes a swap of `asset_in` for `asset_out`. Price is determined by the pool and is
   * affected by the amount and the proportion of the pool assets and the weights.
   *
   * Trading `fee` is distributed to the `fee_collector`.
   *
   * Parameters:
   * - `asset_in`: The identifier of the asset being transferred from the account to the pool.
   * - `asset_out`: The identifier of the asset being transferred from the pool to the account.
   * - `amount`: The amount of `asset_out`.
   * - `max_limit`: maximum amount of `asset_in` to be sold in exchange for `asset_out`.
   *
   * Emits `BuyExecuted` when successful. Deprecated.
   * Emits `pallet_broadcast::Swapped` when successful.
   **/
  | { name: 'Buy'; params: { assetOut: number; assetIn: number; amount: bigint; maxLimit: bigint } };

export type PalletLbpCallLike =
  /**
   * Create a new liquidity bootstrapping pool for given asset pair.
   *
   * For any asset pair, only one pool can exist at a time.
   *
   * The dispatch origin for this call must be `T::CreatePoolOrigin`.
   * The pool is created with initial liquidity provided by the `pool_owner` who must have
   * sufficient funds free.
   *
   * The pool starts uninitialized and update_pool call should be called once created to set the start block.
   *
   * This function should be dispatched from governing entity `T::CreatePoolOrigin`
   *
   * Parameters:
   * - `pool_owner`: the future owner of the new pool.
   * - `asset_a`: { asset_id, amount } Asset ID and initial liquidity amount.
   * - `asset_b`: { asset_id, amount } Asset ID and initial liquidity amount.
   * - `initial_weight`: Initial weight of the asset_a. 1_000_000 corresponding to 1% and 100_000_000 to 100%
   * this should be higher than final weight
   * - `final_weight`: Final weight of the asset_a. 1_000_000 corresponding to 1% and 100_000_000 to 100%
   * this should be lower than initial weight
   * - `weight_curve`: The weight function used to update the LBP weights. Currently,
   * there is only one weight function implemented, the linear function.
   * - `fee`: The trading fee charged on every trade distributed to `fee_collector`.
   * - `fee_collector`: The account to which trading fees will be transferred.
   * - `repay_target`: The amount of tokens to repay to separate fee_collector account. Until this amount is
   * reached, fee will be increased to 20% and taken from the pool
   *
   * Emits `PoolCreated` event when successful.
   *
   * BEWARE: We are taking the fee from the accumulated asset. If the accumulated asset is sold to the pool,
   * the fee cost is transferred to the pool. If its bought from the pool the buyer bears the cost.
   * This increases the price of the sold asset on every trade. Make sure to only run this with
   * previously illiquid assets.
   **/
  | {
      name: 'CreatePool';
      params: {
        poolOwner: AccountId32Like;
        assetA: number;
        assetAAmount: bigint;
        assetB: number;
        assetBAmount: bigint;
        initialWeight: number;
        finalWeight: number;
        weightCurve: PalletLbpWeightCurveType;
        fee: [number, number];
        feeCollector: AccountId32Like;
        repayTarget: bigint;
      };
    }
  /**
   * Update pool data of a pool.
   *
   * The dispatch origin for this call must be signed by the pool owner.
   *
   * The pool can be updated only if the sale has not already started.
   *
   * At least one of the following optional parameters has to be specified.
   *
   * Parameters:
   * - `pool_id`: The identifier of the pool to be updated.
   * - `start`: The new starting time of the sale. This parameter is optional.
   * - `end`: The new ending time of the sale. This parameter is optional.
   * - `initial_weight`: The new initial weight. This parameter is optional.
   * - `final_weight`: The new final weight. This parameter is optional.
   * - `fee`: The new trading fee charged on every trade. This parameter is optional.
   * - `fee_collector`: The new receiver of trading fees. This parameter is optional.
   *
   * Emits `PoolUpdated` event when successful.
   **/
  | {
      name: 'UpdatePoolData';
      params: {
        poolId: AccountId32Like;
        poolOwner?: AccountId32Like | undefined;
        start?: number | undefined;
        end?: number | undefined;
        initialWeight?: number | undefined;
        finalWeight?: number | undefined;
        fee?: [number, number] | undefined;
        feeCollector?: AccountId32Like | undefined;
        repayTarget?: bigint | undefined;
      };
    }
  /**
   * Add liquidity to a pool.
   *
   * Assets to add has to match the pool assets. At least one amount has to be non-zero.
   *
   * The dispatch origin for this call must be signed by the pool owner.
   *
   * Parameters:
   * - `pool_id`: The identifier of the pool
   * - `amount_a`: The identifier of the asset and the amount to add.
   * - `amount_b`: The identifier of the second asset and the amount to add.
   *
   * Emits `LiquidityAdded` event when successful.
   **/
  | { name: 'AddLiquidity'; params: { amountA: [number, bigint]; amountB: [number, bigint] } }
  /**
   * Transfer all the liquidity from a pool back to the pool owner and destroy the pool.
   * The pool data are also removed from the storage.
   *
   * The pool can't be destroyed during the sale.
   *
   * The dispatch origin for this call must be signed by the pool owner.
   *
   * Parameters:
   * - `amount_a`: The identifier of the asset and the amount to add.
   *
   * Emits 'LiquidityRemoved' when successful.
   **/
  | { name: 'RemoveLiquidity'; params: { poolId: AccountId32Like } }
  /**
   * Trade `asset_in` for `asset_out`.
   *
   * Executes a swap of `asset_in` for `asset_out`. Price is determined by the pool and is
   * affected by the amount and proportion of the pool assets and the weights.
   *
   * Trading `fee` is distributed to the `fee_collector`.
   *
   * Parameters:
   * - `asset_in`: The identifier of the asset being transferred from the account to the pool.
   * - `asset_out`: The identifier of the asset being transferred from the pool to the account.
   * - `amount`: The amount of `asset_in`
   * - `max_limit`: minimum amount of `asset_out` / amount of asset_out to be obtained from the pool in exchange for `asset_in`.
   *
   * Emits `SellExecuted` when successful. Deprecated.
   * Emits `pallet_broadcast::Swapped` when successful.
   **/
  | { name: 'Sell'; params: { assetIn: number; assetOut: number; amount: bigint; maxLimit: bigint } }
  /**
   * Trade `asset_in` for `asset_out`.
   *
   * Executes a swap of `asset_in` for `asset_out`. Price is determined by the pool and is
   * affected by the amount and the proportion of the pool assets and the weights.
   *
   * Trading `fee` is distributed to the `fee_collector`.
   *
   * Parameters:
   * - `asset_in`: The identifier of the asset being transferred from the account to the pool.
   * - `asset_out`: The identifier of the asset being transferred from the pool to the account.
   * - `amount`: The amount of `asset_out`.
   * - `max_limit`: maximum amount of `asset_in` to be sold in exchange for `asset_out`.
   *
   * Emits `BuyExecuted` when successful. Deprecated.
   * Emits `pallet_broadcast::Swapped` when successful.
   **/
  | { name: 'Buy'; params: { assetOut: number; assetIn: number; amount: bigint; maxLimit: bigint } };

export type PalletLbpWeightCurveType = 'Linear';

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletNftCall =
  /**
   * Creates an NFT collection of the given collection type and sets its metadata.
   * The collection ID needs to be outside of the range of reserved IDs.
   * The creation of a collection needs to be enabled in the permissions
   * for the given collection type.
   *
   * Parameters:
   * - `origin`: The owner of the newly created collection.
   * - `collection_id`: Identifier of a collection.
   * - `collection_type`: The collection type determines its purpose and usage.
   * - `metadata`: Arbitrary data about a collection, e.g. IPFS hash or name.
   *
   * Emits CollectionCreated event
   **/
  | {
      name: 'CreateCollection';
      params: { collectionId: bigint; collectionType: PalletNftCollectionType; metadata: Bytes };
    }
  /**
   * Mints an NFT in the specified collection and sets its metadata.
   * Minting of new items needs to be enabled in the permissions
   * for the given collection type.
   *
   * Parameters:
   * - `origin`: The owner of the newly minted NFT.
   * - `collection_id`: The collection of the asset to be minted.
   * - `item_id`: The item of the asset to be minted.
   * - `metadata`: Arbitrary data about an item, e.g. IPFS hash or symbol.
   **/
  | { name: 'Mint'; params: { collectionId: bigint; itemId: bigint; metadata: Bytes } }
  /**
   * Transfers NFT from account A to account B.
   * Transfers need to be enabled in the permissions for the given collection type.
   *
   * Parameters:
   * - `origin`: The NFT owner
   * - `collection_id`: The collection of the asset to be transferred.
   * - `item_id`: The instance of the asset to be transferred.
   * - `dest`: The account to receive ownership of the asset.
   **/
  | { name: 'Transfer'; params: { collectionId: bigint; itemId: bigint; dest: AccountId32 } }
  /**
   * Removes a token from existence.
   * Burning needs to be enabled in the permissions for the given collection type.
   *
   * Parameters:
   * - `origin`: The NFT owner.
   * - `collection_id`: The collection of the asset to be burned.
   * - `item_id`: The instance of the asset to be burned.
   **/
  | { name: 'Burn'; params: { collectionId: bigint; itemId: bigint } }
  /**
   * Removes a collection from existence.
   * Destroying of collections need to be enabled in the permissions
   * for the given collection type.
   * Fails if the collection is not empty.
   *
   * Parameters:
   * - `origin`: The collection owner.
   * - `collection_id`: The identifier of the asset collection to be destroyed.
   **/
  | { name: 'DestroyCollection'; params: { collectionId: bigint } };

export type PalletNftCallLike =
  /**
   * Creates an NFT collection of the given collection type and sets its metadata.
   * The collection ID needs to be outside of the range of reserved IDs.
   * The creation of a collection needs to be enabled in the permissions
   * for the given collection type.
   *
   * Parameters:
   * - `origin`: The owner of the newly created collection.
   * - `collection_id`: Identifier of a collection.
   * - `collection_type`: The collection type determines its purpose and usage.
   * - `metadata`: Arbitrary data about a collection, e.g. IPFS hash or name.
   *
   * Emits CollectionCreated event
   **/
  | {
      name: 'CreateCollection';
      params: { collectionId: bigint; collectionType: PalletNftCollectionType; metadata: BytesLike };
    }
  /**
   * Mints an NFT in the specified collection and sets its metadata.
   * Minting of new items needs to be enabled in the permissions
   * for the given collection type.
   *
   * Parameters:
   * - `origin`: The owner of the newly minted NFT.
   * - `collection_id`: The collection of the asset to be minted.
   * - `item_id`: The item of the asset to be minted.
   * - `metadata`: Arbitrary data about an item, e.g. IPFS hash or symbol.
   **/
  | { name: 'Mint'; params: { collectionId: bigint; itemId: bigint; metadata: BytesLike } }
  /**
   * Transfers NFT from account A to account B.
   * Transfers need to be enabled in the permissions for the given collection type.
   *
   * Parameters:
   * - `origin`: The NFT owner
   * - `collection_id`: The collection of the asset to be transferred.
   * - `item_id`: The instance of the asset to be transferred.
   * - `dest`: The account to receive ownership of the asset.
   **/
  | { name: 'Transfer'; params: { collectionId: bigint; itemId: bigint; dest: AccountId32Like } }
  /**
   * Removes a token from existence.
   * Burning needs to be enabled in the permissions for the given collection type.
   *
   * Parameters:
   * - `origin`: The NFT owner.
   * - `collection_id`: The collection of the asset to be burned.
   * - `item_id`: The instance of the asset to be burned.
   **/
  | { name: 'Burn'; params: { collectionId: bigint; itemId: bigint } }
  /**
   * Removes a collection from existence.
   * Destroying of collections need to be enabled in the permissions
   * for the given collection type.
   * Fails if the collection is not empty.
   *
   * Parameters:
   * - `origin`: The collection owner.
   * - `collection_id`: The identifier of the asset collection to be destroyed.
   **/
  | { name: 'DestroyCollection'; params: { collectionId: bigint } };

export type PalletNftCollectionType = 'Marketplace' | 'LiquidityMining';

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletMarketplaceCall =
  /**
   * Pays a price to the current owner
   * Transfers NFT ownership to the buyer
   * Disables automatic sell of the NFT
   *
   * Parameters:
   * - `collection_id`: The identifier of a non-fungible token collection
   * - `item_id`: The item identifier of a collection
   **/
  | { name: 'Buy'; params: { collectionId: bigint; itemId: bigint } }
  /**
   * Set trading price and allow sell
   * Setting price to None disables auto sell
   *
   * Parameters:
   * - `collection_id`: The identifier of a non-fungible token collection
   * - `item_id`: The item identifier of a collection
   * - `new_price`: price the token will be listed for
   **/
  | { name: 'SetPrice'; params: { collectionId: bigint; itemId: bigint; newPrice?: bigint | undefined } }
  /**
   * Users can indicate what price they would be willing to pay for a token
   * Price can be lower than current listing price
   * Token doesn't have to be currently listed
   *
   * Parameters:
   * - `collection_id`: The identifier of a non-fungible token collection
   * - `item_id`: The item identifier of a collection
   * - `amount`: The amount user is willing to pay
   * - `expires`: The block until the current owner can accept the offer
   **/
  | { name: 'MakeOffer'; params: { collectionId: bigint; itemId: bigint; amount: bigint; expires: number } }
  /**
   * Reverse action to make_offer
   * Removes an offer and unreserves funds
   * Can be done by the offer maker or owner of the token
   *
   * Parameters:
   * - `collection_id`: The identifier of a non-fungible token collection
   * - `item_id`: The item identifier of a collection
   * - `maker`: User who made the offer
   **/
  | { name: 'WithdrawOffer'; params: { collectionId: bigint; itemId: bigint; maker: AccountId32 } }
  /**
   * Accept an offer and process the trade
   *
   * Parameters:
   * - `collection_id`: The identifier of a non-fungible token collection
   * - `item_id`: The item identifier of a collection
   * - `maker`: User who made the offer
   **/
  | { name: 'AcceptOffer'; params: { collectionId: bigint; itemId: bigint; maker: AccountId32 } }
  /**
   * Add royalty feature where a cut for author is provided
   * There is non-refundable reserve held for creating a royalty
   *
   * Parameters:
   * - `collection_id`: The collection of the asset to be minted.
   * - `item_id`: The item value of the asset to be minted.
   * - `author`: Receiver of the royalty
   * - `royalty`: Percentage reward from each trade for the author, represented in basis points
   **/
  | { name: 'AddRoyalty'; params: { collectionId: bigint; itemId: bigint; author: AccountId32; royalty: number } };

export type PalletMarketplaceCallLike =
  /**
   * Pays a price to the current owner
   * Transfers NFT ownership to the buyer
   * Disables automatic sell of the NFT
   *
   * Parameters:
   * - `collection_id`: The identifier of a non-fungible token collection
   * - `item_id`: The item identifier of a collection
   **/
  | { name: 'Buy'; params: { collectionId: bigint; itemId: bigint } }
  /**
   * Set trading price and allow sell
   * Setting price to None disables auto sell
   *
   * Parameters:
   * - `collection_id`: The identifier of a non-fungible token collection
   * - `item_id`: The item identifier of a collection
   * - `new_price`: price the token will be listed for
   **/
  | { name: 'SetPrice'; params: { collectionId: bigint; itemId: bigint; newPrice?: bigint | undefined } }
  /**
   * Users can indicate what price they would be willing to pay for a token
   * Price can be lower than current listing price
   * Token doesn't have to be currently listed
   *
   * Parameters:
   * - `collection_id`: The identifier of a non-fungible token collection
   * - `item_id`: The item identifier of a collection
   * - `amount`: The amount user is willing to pay
   * - `expires`: The block until the current owner can accept the offer
   **/
  | { name: 'MakeOffer'; params: { collectionId: bigint; itemId: bigint; amount: bigint; expires: number } }
  /**
   * Reverse action to make_offer
   * Removes an offer and unreserves funds
   * Can be done by the offer maker or owner of the token
   *
   * Parameters:
   * - `collection_id`: The identifier of a non-fungible token collection
   * - `item_id`: The item identifier of a collection
   * - `maker`: User who made the offer
   **/
  | { name: 'WithdrawOffer'; params: { collectionId: bigint; itemId: bigint; maker: AccountId32Like } }
  /**
   * Accept an offer and process the trade
   *
   * Parameters:
   * - `collection_id`: The identifier of a non-fungible token collection
   * - `item_id`: The item identifier of a collection
   * - `maker`: User who made the offer
   **/
  | { name: 'AcceptOffer'; params: { collectionId: bigint; itemId: bigint; maker: AccountId32Like } }
  /**
   * Add royalty feature where a cut for author is provided
   * There is non-refundable reserve held for creating a royalty
   *
   * Parameters:
   * - `collection_id`: The collection of the asset to be minted.
   * - `item_id`: The item value of the asset to be minted.
   * - `author`: Receiver of the royalty
   * - `royalty`: Percentage reward from each trade for the author, represented in basis points
   **/
  | { name: 'AddRoyalty'; params: { collectionId: bigint; itemId: bigint; author: AccountId32Like; royalty: number } };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletTransactionPauseCall =
  | { name: 'PauseTransaction'; params: { palletName: Bytes; functionName: Bytes } }
  | { name: 'UnpauseTransaction'; params: { palletName: Bytes; functionName: Bytes } };

export type PalletTransactionPauseCallLike =
  | { name: 'PauseTransaction'; params: { palletName: BytesLike; functionName: BytesLike } }
  | { name: 'UnpauseTransaction'; params: { palletName: BytesLike; functionName: BytesLike } };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletRouteExecutorCall =
  /**
   * Executes a sell with a series of trades specified in the route.
   * The price for each trade is determined by the corresponding AMM.
   *
   * - `origin`: The executor of the trade
   * - `asset_in`: The identifier of the asset to sell
   * - `asset_out`: The identifier of the asset to receive
   * - `amount_in`: The amount of `asset_in` to sell
   * - `min_amount_out`: The minimum amount of `asset_out` to receive.
   * - `route`: Series of [`Trade<AssetId>`] to be executed. A [`Trade<AssetId>`] specifies the asset pair (`asset_in`, `asset_out`) and the AMM (`pool`) in which the trade is executed.
   * If not specified, than the on-chain route is used.
   * If no on-chain is present, then omnipool route is used as default
   *
   * Emits `RouteExecuted` when successful.
   **/
  | {
      name: 'Sell';
      params: {
        assetIn: number;
        assetOut: number;
        amountIn: bigint;
        minAmountOut: bigint;
        route: Array<HydradxTraitsRouterTrade>;
      };
    }
  /**
   * Executes a buy with a series of trades specified in the route.
   * The price for each trade is determined by the corresponding AMM.
   *
   * - `origin`: The executor of the trade
   * - `asset_in`: The identifier of the asset to be swapped to buy `asset_out`
   * - `asset_out`: The identifier of the asset to buy
   * - `amount_out`: The amount of `asset_out` to buy
   * - `max_amount_in`: The max amount of `asset_in` to spend on the buy.
   * - `route`: Series of [`Trade<AssetId>`] to be executed. A [`Trade<AssetId>`] specifies the asset pair (`asset_in`, `asset_out`) and the AMM (`pool`) in which the trade is executed.
   * If not specified, than the on-chain route is used.
   * If no on-chain is present, then omnipool route is used as default
   *
   * Emits `RouteExecuted` when successful.
   **/
  | {
      name: 'Buy';
      params: {
        assetIn: number;
        assetOut: number;
        amountOut: bigint;
        maxAmountIn: bigint;
        route: Array<HydradxTraitsRouterTrade>;
      };
    }
  /**
   * Sets the on-chain route for a given asset pair.
   *
   * The new route is validated by being executed in a dry-run mode
   *
   * If there is no route explicitly set for an asset pair, then we use the omnipool route as default.
   *
   * When a new route is set, we compare it to the existing (or default) route.
   * The comparison happens by calculating sell amount_outs for the routes, but also for the inversed routes.
   *
   * The route is stored in an ordered manner, based on the oder of the ids in the asset pair.
   *
   * If the route is set successfully, then the fee is payed back.
   *
   * - `origin`: The origin of the route setter
   * - `asset_pair`: The identifier of the asset-pair for which the route is set
   * - `new_route`: Series of [`Trade<AssetId>`] to be executed. A [`Trade<AssetId>`] specifies the asset pair (`asset_in`, `asset_out`) and the AMM (`pool`) in which the trade is executed.
   *
   * Emits `RouteUpdated` when successful.
   *
   * Fails with `RouteUpdateIsNotSuccessful` error when failed to set the route
   *
   **/
  | { name: 'SetRoute'; params: { assetPair: HydradxTraitsRouterAssetPair; newRoute: Array<HydradxTraitsRouterTrade> } }
  /**
   * Force inserts the on-chain route for a given asset pair, so there is no any validation for the route
   *
   * Can only be called by T::ForceInsertOrigin
   *
   * The route is stored in an ordered manner, based on the oder of the ids in the asset pair.
   *
   * If the route is set successfully, then the fee is payed back.
   *
   * - `origin`: The origin of the route setter
   * - `asset_pair`: The identifier of the asset-pair for which the route is set
   * - `new_route`: Series of [`Trade<AssetId>`] to be executed. A [`Trade<AssetId>`] specifies the asset pair (`asset_in`, `asset_out`) and the AMM (`pool`) in which the trade is executed.
   *
   * Emits `RouteUpdated` when successful.
   *
   **/
  | {
      name: 'ForceInsertRoute';
      params: { assetPair: HydradxTraitsRouterAssetPair; newRoute: Array<HydradxTraitsRouterTrade> };
    }
  /**
   * Executes a sell with a series of trades specified in the route.
   * It sells all reducible user balance of `asset_in`
   * The price for each trade is determined by the corresponding AMM.
   *
   * - `origin`: The executor of the trade
   * - `asset_in`: The identifier of the asset to sell
   * - `asset_out`: The identifier of the asset to receive
   * - `min_amount_out`: The minimum amount of `asset_out` to receive.
   * - `route`: Series of [`Trade<AssetId>`] to be executed. A [`Trade<AssetId>`] specifies the asset pair (`asset_in`, `asset_out`) and the AMM (`pool`) in which the trade is executed.
   * If not specified, than the on-chain route is used.
   * If no on-chain is present, then omnipool route is used as default
   *
   * Emits `RouteExecuted` when successful.
   *
   **/
  | {
      name: 'SellAll';
      params: { assetIn: number; assetOut: number; minAmountOut: bigint; route: Array<HydradxTraitsRouterTrade> };
    };

export type PalletRouteExecutorCallLike =
  /**
   * Executes a sell with a series of trades specified in the route.
   * The price for each trade is determined by the corresponding AMM.
   *
   * - `origin`: The executor of the trade
   * - `asset_in`: The identifier of the asset to sell
   * - `asset_out`: The identifier of the asset to receive
   * - `amount_in`: The amount of `asset_in` to sell
   * - `min_amount_out`: The minimum amount of `asset_out` to receive.
   * - `route`: Series of [`Trade<AssetId>`] to be executed. A [`Trade<AssetId>`] specifies the asset pair (`asset_in`, `asset_out`) and the AMM (`pool`) in which the trade is executed.
   * If not specified, than the on-chain route is used.
   * If no on-chain is present, then omnipool route is used as default
   *
   * Emits `RouteExecuted` when successful.
   **/
  | {
      name: 'Sell';
      params: {
        assetIn: number;
        assetOut: number;
        amountIn: bigint;
        minAmountOut: bigint;
        route: Array<HydradxTraitsRouterTrade>;
      };
    }
  /**
   * Executes a buy with a series of trades specified in the route.
   * The price for each trade is determined by the corresponding AMM.
   *
   * - `origin`: The executor of the trade
   * - `asset_in`: The identifier of the asset to be swapped to buy `asset_out`
   * - `asset_out`: The identifier of the asset to buy
   * - `amount_out`: The amount of `asset_out` to buy
   * - `max_amount_in`: The max amount of `asset_in` to spend on the buy.
   * - `route`: Series of [`Trade<AssetId>`] to be executed. A [`Trade<AssetId>`] specifies the asset pair (`asset_in`, `asset_out`) and the AMM (`pool`) in which the trade is executed.
   * If not specified, than the on-chain route is used.
   * If no on-chain is present, then omnipool route is used as default
   *
   * Emits `RouteExecuted` when successful.
   **/
  | {
      name: 'Buy';
      params: {
        assetIn: number;
        assetOut: number;
        amountOut: bigint;
        maxAmountIn: bigint;
        route: Array<HydradxTraitsRouterTrade>;
      };
    }
  /**
   * Sets the on-chain route for a given asset pair.
   *
   * The new route is validated by being executed in a dry-run mode
   *
   * If there is no route explicitly set for an asset pair, then we use the omnipool route as default.
   *
   * When a new route is set, we compare it to the existing (or default) route.
   * The comparison happens by calculating sell amount_outs for the routes, but also for the inversed routes.
   *
   * The route is stored in an ordered manner, based on the oder of the ids in the asset pair.
   *
   * If the route is set successfully, then the fee is payed back.
   *
   * - `origin`: The origin of the route setter
   * - `asset_pair`: The identifier of the asset-pair for which the route is set
   * - `new_route`: Series of [`Trade<AssetId>`] to be executed. A [`Trade<AssetId>`] specifies the asset pair (`asset_in`, `asset_out`) and the AMM (`pool`) in which the trade is executed.
   *
   * Emits `RouteUpdated` when successful.
   *
   * Fails with `RouteUpdateIsNotSuccessful` error when failed to set the route
   *
   **/
  | { name: 'SetRoute'; params: { assetPair: HydradxTraitsRouterAssetPair; newRoute: Array<HydradxTraitsRouterTrade> } }
  /**
   * Force inserts the on-chain route for a given asset pair, so there is no any validation for the route
   *
   * Can only be called by T::ForceInsertOrigin
   *
   * The route is stored in an ordered manner, based on the oder of the ids in the asset pair.
   *
   * If the route is set successfully, then the fee is payed back.
   *
   * - `origin`: The origin of the route setter
   * - `asset_pair`: The identifier of the asset-pair for which the route is set
   * - `new_route`: Series of [`Trade<AssetId>`] to be executed. A [`Trade<AssetId>`] specifies the asset pair (`asset_in`, `asset_out`) and the AMM (`pool`) in which the trade is executed.
   *
   * Emits `RouteUpdated` when successful.
   *
   **/
  | {
      name: 'ForceInsertRoute';
      params: { assetPair: HydradxTraitsRouterAssetPair; newRoute: Array<HydradxTraitsRouterTrade> };
    }
  /**
   * Executes a sell with a series of trades specified in the route.
   * It sells all reducible user balance of `asset_in`
   * The price for each trade is determined by the corresponding AMM.
   *
   * - `origin`: The executor of the trade
   * - `asset_in`: The identifier of the asset to sell
   * - `asset_out`: The identifier of the asset to receive
   * - `min_amount_out`: The minimum amount of `asset_out` to receive.
   * - `route`: Series of [`Trade<AssetId>`] to be executed. A [`Trade<AssetId>`] specifies the asset pair (`asset_in`, `asset_out`) and the AMM (`pool`) in which the trade is executed.
   * If not specified, than the on-chain route is used.
   * If no on-chain is present, then omnipool route is used as default
   *
   * Emits `RouteExecuted` when successful.
   *
   **/
  | {
      name: 'SellAll';
      params: { assetIn: number; assetOut: number; minAmountOut: bigint; route: Array<HydradxTraitsRouterTrade> };
    };

export type HydradxTraitsRouterTrade = { pool: HydradxTraitsRouterPoolType; assetIn: number; assetOut: number };

export type HydradxTraitsRouterPoolType =
  | { type: 'Xyk' }
  | { type: 'Lbp' }
  | { type: 'Stableswap'; value: number }
  | { type: 'Omnipool' };

export type HydradxTraitsRouterAssetPair = { assetIn: number; assetOut: number };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletXykLiquidityMiningCall =
  /**
   * Create new liquidity mining program with provided parameters.
   *
   * `owner` account has to have at least `total_rewards` balance. This fund will be
   * transferred from `owner` to farm account.
   *
   * The dispatch origin for this call must be `T::CreateOrigin`.
   * !!!WARN: `T::CreateOrigin` has power over funds of `owner`'s account and it should be
   * configured to trusted origin e.g Sudo or Governance.
   *
   * Parameters:
   * - `origin`: global farm's owner.
   * - `total_rewards`: total rewards planned to distribute. This rewards will be
   * distributed between all yield farms in the global farm.
   * - `planned_yielding_periods`: planned number of periods to distribute `total_rewards`.
   * WARN: THIS IS NOT HARD DEADLINE. Not all rewards have to be distributed in
   * `planned_yielding_periods`. Rewards are distributed based on the situation in the yield
   * farms and can be distributed in a longer time frame but never in the shorter time frame.
   * - `blocks_per_period`: number of blocks in a single period. Min. number of blocks per
   * period is 1.
   * - `incentivized_asset`: asset to be incentivized in XYK pools. All yield farms added into
   * liq. mining program have to have `incentivized_asset` in their pair.
   * - `reward_currency`: payoff currency of rewards.
   * - `owner`: liq. mining program owner.
   * - `yield_per_period`: percentage return on `reward_currency` of all farms p.a.
   * - `min_deposit`: minimum amount which can be deposited to the farm
   * - `price_adjustment`:
   * Emits `GlobalFarmCreated` event when successful.
   **/
  | {
      name: 'CreateGlobalFarm';
      params: {
        totalRewards: bigint;
        plannedYieldingPeriods: number;
        blocksPerPeriod: number;
        incentivizedAsset: number;
        rewardCurrency: number;
        owner: AccountId32;
        yieldPerPeriod: Perquintill;
        minDeposit: bigint;
        priceAdjustment: FixedU128;
      };
    }
  /**
   * Update global farm's prices adjustment.
   *
   * Only farm's owner can perform this action.
   *
   * Parameters:
   * - `origin`: global farm's owner.
   * - `global_farm_id`: id of the global farm to update
   * - `price_adjustment`: new value for price adjustment
   *
   * Emits `GlobalFarmUpdated` event when successful.
   **/
  | { name: 'UpdateGlobalFarm'; params: { globalFarmId: number; priceAdjustment: FixedU128 } }
  /**
   * Terminate existing liq. mining program.
   *
   * Only farm owner can perform this action.
   *
   * WARN: To successfully terminate a farm, farm have to be empty(all yield farms in he global farm must be terminated).
   *
   * Parameters:
   * - `origin`: global farm's owner.
   * - `global_farm_id`: id of global farm to be terminated.
   *
   * Emits `GlobalFarmTerminated` event when successful.
   **/
  | { name: 'TerminateGlobalFarm'; params: { globalFarmId: number } }
  /**
   * Add yield farm for given `asset_pair` XYK pool.
   *
   * Only farm owner can perform this action.
   *
   * Only XYKs with `asset_pair` with `incentivized_asset` can be added into the farm. XYK
   * pool for `asset_pair` has to exist to successfully create yield farm.
   * Yield farm for same `asset_pair` can exist only once in the global farm.
   *
   * Parameters:
   * - `origin`: global farm's owner.
   * - `farm_id`: global farm id to which a yield farm will be added.
   * - `asset_pair`: asset pair identifying yield farm. Liq. mining will be allowed for this
   * `asset_pair` and one of the assets in the pair must be `incentivized_asset`.
   * - `multiplier`: yield farm multiplier.
   * - `loyalty_curve`: curve to calculate loyalty multiplier to distribute rewards to users
   * with time incentive. `None` means no loyalty multiplier.
   *
   * Emits `YieldFarmCreated` event when successful.
   **/
  | {
      name: 'CreateYieldFarm';
      params: {
        globalFarmId: number;
        assetPair: PalletXykAssetPair;
        multiplier: FixedU128;
        loyaltyCurve?: PalletLiquidityMiningLoyaltyCurve | undefined;
      };
    }
  /**
   * Update yield farm multiplier.
   *
   * Only farm owner can perform this action.
   *
   * Parameters:
   * - `origin`: global farm's owner.
   * - `global_farm_id`: global farm id in which yield farm will be updated.
   * - `asset_pair`: asset pair identifying yield farm in global farm.
   * - `multiplier`: new yield farm multiplier.
   *
   * Emits `YieldFarmUpdated` event when successful.
   **/
  | { name: 'UpdateYieldFarm'; params: { globalFarmId: number; assetPair: PalletXykAssetPair; multiplier: FixedU128 } }
  /**
   * Stop liq. miming for specific yield farm.
   *
   * This function claims rewards from `GlobalFarm` last time and stops yield farm
   * incentivization from a `GlobalFarm`. Users will be able to only withdraw
   * shares(with claiming) after calling this function.
   * `deposit_shares()` and `claim_rewards()` are not allowed on canceled yield farm.
   *
   * Only farm owner can perform this action.
   *
   * Parameters:
   * - `origin`: global farm's owner.
   * - `global_farm_id`: farm id in which yield farm will be canceled.
   * - `asset_pair`: asset pair identifying yield farm in the farm.
   *
   * Emits `YieldFarmStopped` event when successful.
   **/
  | { name: 'StopYieldFarm'; params: { globalFarmId: number; assetPair: PalletXykAssetPair } }
  /**
   * Resume yield farm for stopped yield farm.
   *
   * This function resume incentivization from `GlobalFarm` and restore full functionality
   * for yield farm. Users will be able to deposit, claim and withdraw again.
   *
   * WARN: Yield farm is NOT rewarded for time it was stopped.
   *
   * Only farm owner can perform this action.
   *
   * Parameters:
   * - `origin`: global farm's owner.
   * - `global_farm_id`: global farm id in which yield farm will be resumed.
   * - `yield_farm_id`: id of yield farm to be resumed.
   * - `asset_pair`: asset pair identifying yield farm in global farm.
   * - `multiplier`: yield farm multiplier in the farm.
   *
   * Emits `YieldFarmResumed` event when successful.
   **/
  | {
      name: 'ResumeYieldFarm';
      params: { globalFarmId: number; yieldFarmId: number; assetPair: PalletXykAssetPair; multiplier: FixedU128 };
    }
  /**
   * Remove yield farm
   *
   * This function marks a yield farm as ready to be removed from storage when it's empty. Users will
   * be able to only withdraw shares(without claiming rewards from yield farm). Unpaid rewards
   * will be transferred back to global farm and will be used to distribute to other yield farms.
   *
   * Yield farm must be stopped before calling this function.
   *
   * Only global farm's owner can perform this action. Yield farm stays in the storage until it's
   * empty(all farm entries are withdrawn). Last withdrawn from yield farm trigger removing from
   * the storage.
   *
   * Parameters:
   * - `origin`: global farm's owner.
   * - `global_farm_id`: farm id from which yield farm should be terminated.
   * - `yield_farm_id`: id of yield farm to be terminated.
   * - `asset_pair`: asset pair identifying yield farm in the global farm.
   *
   * Emits `YieldFarmTerminated` event when successful.
   **/
  | { name: 'TerminateYieldFarm'; params: { globalFarmId: number; yieldFarmId: number; assetPair: PalletXykAssetPair } }
  /**
   * Deposit LP shares to a liq. mining.
   *
   * This function transfers LP shares from `origin` to pallet's account and mint nft for
   * `origin` account. Minted nft represents deposit in the liq. mining.
   *
   * Parameters:
   * - `origin`: account depositing LP shares. This account has to have at least
   * `shares_amount` of LP shares.
   * - `global_farm_id`: id of global farm to which user wants to deposit LP shares.
   * - `yield_farm_id`: id of yield farm to deposit to.
   * - `asset_pair`: asset pair identifying LP shares user wants to deposit.
   * - `shares_amount`: amount of LP shares user wants to deposit.
   *
   * Emits `SharesDeposited` event when successful.
   **/
  | {
      name: 'DepositShares';
      params: { globalFarmId: number; yieldFarmId: number; assetPair: PalletXykAssetPair; sharesAmount: bigint };
    }
  /**
   * Redeposit already locked LP shares to another yield farm.
   *
   * This function create yield farm entry for existing deposit. LP shares are not transferred
   * and amount of LP shares is based on existing deposit.
   *
   * This function DOESN'T create new deposit.
   *
   * Parameters:
   * - `origin`: account depositing LP shares. This account have to have at least
   * - `global_farm_id`: global farm identifier.
   * - `yield_farm_id`: yield farm identifier redepositing to.
   * - `asset_pair`: asset pair identifying LP shares user want to deposit.
   * - `deposit_id`: identifier of the deposit.
   *
   * Emits `SharesRedeposited` event when successful.
   **/
  | {
      name: 'RedepositShares';
      params: { globalFarmId: number; yieldFarmId: number; assetPair: PalletXykAssetPair; depositId: bigint };
    }
  /**
   * Claim rewards from liq. mining for deposit represented by `nft_id`.
   *
   * This function calculate user rewards from liq. mining and transfer rewards to `origin`
   * account. Claiming in the same period is allowed only once.
   *
   * Parameters:
   * - `origin`: account owner of deposit(nft).
   * - `deposit_id`: nft id representing deposit in the yield farm.
   * - `yield_farm_id`: yield farm identifier to claim rewards from.
   *
   * Emits `RewardClaimed` event when successful.
   **/
  | { name: 'ClaimRewards'; params: { depositId: bigint; yieldFarmId: number } }
  /**
   * Withdraw LP shares from liq. mining with reward claiming if possible.
   *
   * List of possible cases of transfers of LP shares and claimed rewards:
   *
   * * yield farm is active(yield farm is not stopped) - claim and transfer rewards(if it
   * wasn't claimed in this period) and transfer LP shares.
   * * liq. mining is stopped - claim and transfer rewards(if it
   * wasn't claimed in this period) and transfer LP shares.
   * * yield farm was terminated - only LP shares will be transferred.
   * * farm was terminated - only LP shares will be transferred.
   *
   * User's unclaimable rewards will be transferred back to global farm's account.
   *
   * Parameters:
   * - `origin`: account owner of deposit(nft).
   * - `deposit_id`: nft id representing deposit in the yield farm.
   * - `yield_farm_id`: yield farm identifier to dithdraw shares from.
   * - `asset_pair`: asset pair identifying yield farm in global farm.
   *
   * Emits:
   * * `RewardClaimed` if claim happen
   * * `SharesWithdrawn` event when successful
   **/
  | { name: 'WithdrawShares'; params: { depositId: bigint; yieldFarmId: number; assetPair: PalletXykAssetPair } };

export type PalletXykLiquidityMiningCallLike =
  /**
   * Create new liquidity mining program with provided parameters.
   *
   * `owner` account has to have at least `total_rewards` balance. This fund will be
   * transferred from `owner` to farm account.
   *
   * The dispatch origin for this call must be `T::CreateOrigin`.
   * !!!WARN: `T::CreateOrigin` has power over funds of `owner`'s account and it should be
   * configured to trusted origin e.g Sudo or Governance.
   *
   * Parameters:
   * - `origin`: global farm's owner.
   * - `total_rewards`: total rewards planned to distribute. This rewards will be
   * distributed between all yield farms in the global farm.
   * - `planned_yielding_periods`: planned number of periods to distribute `total_rewards`.
   * WARN: THIS IS NOT HARD DEADLINE. Not all rewards have to be distributed in
   * `planned_yielding_periods`. Rewards are distributed based on the situation in the yield
   * farms and can be distributed in a longer time frame but never in the shorter time frame.
   * - `blocks_per_period`: number of blocks in a single period. Min. number of blocks per
   * period is 1.
   * - `incentivized_asset`: asset to be incentivized in XYK pools. All yield farms added into
   * liq. mining program have to have `incentivized_asset` in their pair.
   * - `reward_currency`: payoff currency of rewards.
   * - `owner`: liq. mining program owner.
   * - `yield_per_period`: percentage return on `reward_currency` of all farms p.a.
   * - `min_deposit`: minimum amount which can be deposited to the farm
   * - `price_adjustment`:
   * Emits `GlobalFarmCreated` event when successful.
   **/
  | {
      name: 'CreateGlobalFarm';
      params: {
        totalRewards: bigint;
        plannedYieldingPeriods: number;
        blocksPerPeriod: number;
        incentivizedAsset: number;
        rewardCurrency: number;
        owner: AccountId32Like;
        yieldPerPeriod: Perquintill;
        minDeposit: bigint;
        priceAdjustment: FixedU128;
      };
    }
  /**
   * Update global farm's prices adjustment.
   *
   * Only farm's owner can perform this action.
   *
   * Parameters:
   * - `origin`: global farm's owner.
   * - `global_farm_id`: id of the global farm to update
   * - `price_adjustment`: new value for price adjustment
   *
   * Emits `GlobalFarmUpdated` event when successful.
   **/
  | { name: 'UpdateGlobalFarm'; params: { globalFarmId: number; priceAdjustment: FixedU128 } }
  /**
   * Terminate existing liq. mining program.
   *
   * Only farm owner can perform this action.
   *
   * WARN: To successfully terminate a farm, farm have to be empty(all yield farms in he global farm must be terminated).
   *
   * Parameters:
   * - `origin`: global farm's owner.
   * - `global_farm_id`: id of global farm to be terminated.
   *
   * Emits `GlobalFarmTerminated` event when successful.
   **/
  | { name: 'TerminateGlobalFarm'; params: { globalFarmId: number } }
  /**
   * Add yield farm for given `asset_pair` XYK pool.
   *
   * Only farm owner can perform this action.
   *
   * Only XYKs with `asset_pair` with `incentivized_asset` can be added into the farm. XYK
   * pool for `asset_pair` has to exist to successfully create yield farm.
   * Yield farm for same `asset_pair` can exist only once in the global farm.
   *
   * Parameters:
   * - `origin`: global farm's owner.
   * - `farm_id`: global farm id to which a yield farm will be added.
   * - `asset_pair`: asset pair identifying yield farm. Liq. mining will be allowed for this
   * `asset_pair` and one of the assets in the pair must be `incentivized_asset`.
   * - `multiplier`: yield farm multiplier.
   * - `loyalty_curve`: curve to calculate loyalty multiplier to distribute rewards to users
   * with time incentive. `None` means no loyalty multiplier.
   *
   * Emits `YieldFarmCreated` event when successful.
   **/
  | {
      name: 'CreateYieldFarm';
      params: {
        globalFarmId: number;
        assetPair: PalletXykAssetPair;
        multiplier: FixedU128;
        loyaltyCurve?: PalletLiquidityMiningLoyaltyCurve | undefined;
      };
    }
  /**
   * Update yield farm multiplier.
   *
   * Only farm owner can perform this action.
   *
   * Parameters:
   * - `origin`: global farm's owner.
   * - `global_farm_id`: global farm id in which yield farm will be updated.
   * - `asset_pair`: asset pair identifying yield farm in global farm.
   * - `multiplier`: new yield farm multiplier.
   *
   * Emits `YieldFarmUpdated` event when successful.
   **/
  | { name: 'UpdateYieldFarm'; params: { globalFarmId: number; assetPair: PalletXykAssetPair; multiplier: FixedU128 } }
  /**
   * Stop liq. miming for specific yield farm.
   *
   * This function claims rewards from `GlobalFarm` last time and stops yield farm
   * incentivization from a `GlobalFarm`. Users will be able to only withdraw
   * shares(with claiming) after calling this function.
   * `deposit_shares()` and `claim_rewards()` are not allowed on canceled yield farm.
   *
   * Only farm owner can perform this action.
   *
   * Parameters:
   * - `origin`: global farm's owner.
   * - `global_farm_id`: farm id in which yield farm will be canceled.
   * - `asset_pair`: asset pair identifying yield farm in the farm.
   *
   * Emits `YieldFarmStopped` event when successful.
   **/
  | { name: 'StopYieldFarm'; params: { globalFarmId: number; assetPair: PalletXykAssetPair } }
  /**
   * Resume yield farm for stopped yield farm.
   *
   * This function resume incentivization from `GlobalFarm` and restore full functionality
   * for yield farm. Users will be able to deposit, claim and withdraw again.
   *
   * WARN: Yield farm is NOT rewarded for time it was stopped.
   *
   * Only farm owner can perform this action.
   *
   * Parameters:
   * - `origin`: global farm's owner.
   * - `global_farm_id`: global farm id in which yield farm will be resumed.
   * - `yield_farm_id`: id of yield farm to be resumed.
   * - `asset_pair`: asset pair identifying yield farm in global farm.
   * - `multiplier`: yield farm multiplier in the farm.
   *
   * Emits `YieldFarmResumed` event when successful.
   **/
  | {
      name: 'ResumeYieldFarm';
      params: { globalFarmId: number; yieldFarmId: number; assetPair: PalletXykAssetPair; multiplier: FixedU128 };
    }
  /**
   * Remove yield farm
   *
   * This function marks a yield farm as ready to be removed from storage when it's empty. Users will
   * be able to only withdraw shares(without claiming rewards from yield farm). Unpaid rewards
   * will be transferred back to global farm and will be used to distribute to other yield farms.
   *
   * Yield farm must be stopped before calling this function.
   *
   * Only global farm's owner can perform this action. Yield farm stays in the storage until it's
   * empty(all farm entries are withdrawn). Last withdrawn from yield farm trigger removing from
   * the storage.
   *
   * Parameters:
   * - `origin`: global farm's owner.
   * - `global_farm_id`: farm id from which yield farm should be terminated.
   * - `yield_farm_id`: id of yield farm to be terminated.
   * - `asset_pair`: asset pair identifying yield farm in the global farm.
   *
   * Emits `YieldFarmTerminated` event when successful.
   **/
  | { name: 'TerminateYieldFarm'; params: { globalFarmId: number; yieldFarmId: number; assetPair: PalletXykAssetPair } }
  /**
   * Deposit LP shares to a liq. mining.
   *
   * This function transfers LP shares from `origin` to pallet's account and mint nft for
   * `origin` account. Minted nft represents deposit in the liq. mining.
   *
   * Parameters:
   * - `origin`: account depositing LP shares. This account has to have at least
   * `shares_amount` of LP shares.
   * - `global_farm_id`: id of global farm to which user wants to deposit LP shares.
   * - `yield_farm_id`: id of yield farm to deposit to.
   * - `asset_pair`: asset pair identifying LP shares user wants to deposit.
   * - `shares_amount`: amount of LP shares user wants to deposit.
   *
   * Emits `SharesDeposited` event when successful.
   **/
  | {
      name: 'DepositShares';
      params: { globalFarmId: number; yieldFarmId: number; assetPair: PalletXykAssetPair; sharesAmount: bigint };
    }
  /**
   * Redeposit already locked LP shares to another yield farm.
   *
   * This function create yield farm entry for existing deposit. LP shares are not transferred
   * and amount of LP shares is based on existing deposit.
   *
   * This function DOESN'T create new deposit.
   *
   * Parameters:
   * - `origin`: account depositing LP shares. This account have to have at least
   * - `global_farm_id`: global farm identifier.
   * - `yield_farm_id`: yield farm identifier redepositing to.
   * - `asset_pair`: asset pair identifying LP shares user want to deposit.
   * - `deposit_id`: identifier of the deposit.
   *
   * Emits `SharesRedeposited` event when successful.
   **/
  | {
      name: 'RedepositShares';
      params: { globalFarmId: number; yieldFarmId: number; assetPair: PalletXykAssetPair; depositId: bigint };
    }
  /**
   * Claim rewards from liq. mining for deposit represented by `nft_id`.
   *
   * This function calculate user rewards from liq. mining and transfer rewards to `origin`
   * account. Claiming in the same period is allowed only once.
   *
   * Parameters:
   * - `origin`: account owner of deposit(nft).
   * - `deposit_id`: nft id representing deposit in the yield farm.
   * - `yield_farm_id`: yield farm identifier to claim rewards from.
   *
   * Emits `RewardClaimed` event when successful.
   **/
  | { name: 'ClaimRewards'; params: { depositId: bigint; yieldFarmId: number } }
  /**
   * Withdraw LP shares from liq. mining with reward claiming if possible.
   *
   * List of possible cases of transfers of LP shares and claimed rewards:
   *
   * * yield farm is active(yield farm is not stopped) - claim and transfer rewards(if it
   * wasn't claimed in this period) and transfer LP shares.
   * * liq. mining is stopped - claim and transfer rewards(if it
   * wasn't claimed in this period) and transfer LP shares.
   * * yield farm was terminated - only LP shares will be transferred.
   * * farm was terminated - only LP shares will be transferred.
   *
   * User's unclaimable rewards will be transferred back to global farm's account.
   *
   * Parameters:
   * - `origin`: account owner of deposit(nft).
   * - `deposit_id`: nft id representing deposit in the yield farm.
   * - `yield_farm_id`: yield farm identifier to dithdraw shares from.
   * - `asset_pair`: asset pair identifying yield farm in global farm.
   *
   * Emits:
   * * `RewardClaimed` if claim happen
   * * `SharesWithdrawn` event when successful
   **/
  | { name: 'WithdrawShares'; params: { depositId: bigint; yieldFarmId: number; assetPair: PalletXykAssetPair } };

export type PalletXykAssetPair = { assetIn: number; assetOut: number };

export type PalletLiquidityMiningLoyaltyCurve = { initialRewardPercentage: FixedU128; scaleCoef: number };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletLiquidityMiningCall = null;

export type PalletLiquidityMiningCallLike = null;

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletBroadcastCall = null;

export type PalletBroadcastCallLike = null;

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletEmaOracleCall =
  | { name: 'AddOracle'; params: { source: FixedBytes<8>; assets: [number, number] } }
  | { name: 'RemoveOracle'; params: { source: FixedBytes<8>; assets: [number, number] } };

export type PalletEmaOracleCallLike =
  | { name: 'AddOracle'; params: { source: FixedBytes<8>; assets: [number, number] } }
  | { name: 'RemoveOracle'; params: { source: FixedBytes<8>; assets: [number, number] } };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletCurrenciesModuleCall =
  /**
   * Transfer some balance to another account under `currency_id`.
   *
   * The dispatch origin for this call must be `Signed` by the
   * transactor.
   **/
  | { name: 'Transfer'; params: { dest: AccountId32; currencyId: number; amount: bigint } }
  /**
   * Transfer some native currency to another account.
   *
   * The dispatch origin for this call must be `Signed` by the
   * transactor.
   **/
  | { name: 'TransferNativeCurrency'; params: { dest: AccountId32; amount: bigint } }
  /**
   * update amount of account `who` under `currency_id`.
   *
   * The dispatch origin of this call must be _Root_.
   **/
  | { name: 'UpdateBalance'; params: { who: AccountId32; currencyId: number; amount: bigint } };

export type PalletCurrenciesModuleCallLike =
  /**
   * Transfer some balance to another account under `currency_id`.
   *
   * The dispatch origin for this call must be `Signed` by the
   * transactor.
   **/
  | { name: 'Transfer'; params: { dest: AccountId32Like; currencyId: number; amount: bigint } }
  /**
   * Transfer some native currency to another account.
   *
   * The dispatch origin for this call must be `Signed` by the
   * transactor.
   **/
  | { name: 'TransferNativeCurrency'; params: { dest: AccountId32Like; amount: bigint } }
  /**
   * update amount of account `who` under `currency_id`.
   *
   * The dispatch origin of this call must be _Root_.
   **/
  | { name: 'UpdateBalance'; params: { who: AccountId32Like; currencyId: number; amount: bigint } };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type OrmlTokensModuleCall =
  /**
   * Transfer some liquid free balance to another account.
   *
   * `transfer` will set the `FreeBalance` of the sender and receiver.
   * It will decrease the total issuance of the system by the
   * `TransferFee`. If the sender's account is below the existential
   * deposit as a result of the transfer, the account will be reaped.
   *
   * The dispatch origin for this call must be `Signed` by the
   * transactor.
   *
   * - `dest`: The recipient of the transfer.
   * - `currency_id`: currency type.
   * - `amount`: free balance amount to tranfer.
   **/
  | { name: 'Transfer'; params: { dest: AccountId32; currencyId: number; amount: bigint } }
  /**
   * Transfer all remaining balance to the given account.
   *
   * NOTE: This function only attempts to transfer _transferable_
   * balances. This means that any locked, reserved, or existential
   * deposits (when `keep_alive` is `true`), will not be transferred by
   * this function. To ensure that this function results in a killed
   * account, you might need to prepare the account by removing any
   * reference counters, storage deposits, etc...
   *
   * The dispatch origin for this call must be `Signed` by the
   * transactor.
   *
   * - `dest`: The recipient of the transfer.
   * - `currency_id`: currency type.
   * - `keep_alive`: A boolean to determine if the `transfer_all`
   * operation should send all of the funds the account has, causing
   * the sender account to be killed (false), or transfer everything
   * except at least the existential deposit, which will guarantee to
   * keep the sender account alive (true).
   **/
  | { name: 'TransferAll'; params: { dest: AccountId32; currencyId: number; keepAlive: boolean } }
  /**
   * Same as the [`transfer`] call, but with a check that the transfer
   * will not kill the origin account.
   *
   * 99% of the time you want [`transfer`] instead.
   *
   * The dispatch origin for this call must be `Signed` by the
   * transactor.
   *
   * - `dest`: The recipient of the transfer.
   * - `currency_id`: currency type.
   * - `amount`: free balance amount to tranfer.
   **/
  | { name: 'TransferKeepAlive'; params: { dest: AccountId32; currencyId: number; amount: bigint } }
  /**
   * Exactly as `transfer`, except the origin must be root and the source
   * account may be specified.
   *
   * The dispatch origin for this call must be _Root_.
   *
   * - `source`: The sender of the transfer.
   * - `dest`: The recipient of the transfer.
   * - `currency_id`: currency type.
   * - `amount`: free balance amount to tranfer.
   **/
  | { name: 'ForceTransfer'; params: { source: AccountId32; dest: AccountId32; currencyId: number; amount: bigint } }
  /**
   * Set the balances of a given account.
   *
   * This will alter `FreeBalance` and `ReservedBalance` in storage. it
   * will also decrease the total issuance of the system
   * (`TotalIssuance`). If the new free or reserved balance is below the
   * existential deposit, it will reap the `AccountInfo`.
   *
   * The dispatch origin for this call is `root`.
   **/
  | { name: 'SetBalance'; params: { who: AccountId32; currencyId: number; newFree: bigint; newReserved: bigint } };

export type OrmlTokensModuleCallLike =
  /**
   * Transfer some liquid free balance to another account.
   *
   * `transfer` will set the `FreeBalance` of the sender and receiver.
   * It will decrease the total issuance of the system by the
   * `TransferFee`. If the sender's account is below the existential
   * deposit as a result of the transfer, the account will be reaped.
   *
   * The dispatch origin for this call must be `Signed` by the
   * transactor.
   *
   * - `dest`: The recipient of the transfer.
   * - `currency_id`: currency type.
   * - `amount`: free balance amount to tranfer.
   **/
  | { name: 'Transfer'; params: { dest: AccountId32Like; currencyId: number; amount: bigint } }
  /**
   * Transfer all remaining balance to the given account.
   *
   * NOTE: This function only attempts to transfer _transferable_
   * balances. This means that any locked, reserved, or existential
   * deposits (when `keep_alive` is `true`), will not be transferred by
   * this function. To ensure that this function results in a killed
   * account, you might need to prepare the account by removing any
   * reference counters, storage deposits, etc...
   *
   * The dispatch origin for this call must be `Signed` by the
   * transactor.
   *
   * - `dest`: The recipient of the transfer.
   * - `currency_id`: currency type.
   * - `keep_alive`: A boolean to determine if the `transfer_all`
   * operation should send all of the funds the account has, causing
   * the sender account to be killed (false), or transfer everything
   * except at least the existential deposit, which will guarantee to
   * keep the sender account alive (true).
   **/
  | { name: 'TransferAll'; params: { dest: AccountId32Like; currencyId: number; keepAlive: boolean } }
  /**
   * Same as the [`transfer`] call, but with a check that the transfer
   * will not kill the origin account.
   *
   * 99% of the time you want [`transfer`] instead.
   *
   * The dispatch origin for this call must be `Signed` by the
   * transactor.
   *
   * - `dest`: The recipient of the transfer.
   * - `currency_id`: currency type.
   * - `amount`: free balance amount to tranfer.
   **/
  | { name: 'TransferKeepAlive'; params: { dest: AccountId32Like; currencyId: number; amount: bigint } }
  /**
   * Exactly as `transfer`, except the origin must be root and the source
   * account may be specified.
   *
   * The dispatch origin for this call must be _Root_.
   *
   * - `source`: The sender of the transfer.
   * - `dest`: The recipient of the transfer.
   * - `currency_id`: currency type.
   * - `amount`: free balance amount to tranfer.
   **/
  | {
      name: 'ForceTransfer';
      params: { source: AccountId32Like; dest: AccountId32Like; currencyId: number; amount: bigint };
    }
  /**
   * Set the balances of a given account.
   *
   * This will alter `FreeBalance` and `ReservedBalance` in storage. it
   * will also decrease the total issuance of the system
   * (`TotalIssuance`). If the new free or reserved balance is below the
   * existential deposit, it will reap the `AccountInfo`.
   *
   * The dispatch origin for this call is `root`.
   **/
  | { name: 'SetBalance'; params: { who: AccountId32Like; currencyId: number; newFree: bigint; newReserved: bigint } };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type OrmlXcmModuleCall =
  /**
   * Send an XCM message as parachain sovereign.
   **/
  { name: 'SendAsSovereign'; params: { dest: XcmVersionedLocation; message: XcmVersionedXcm } };

export type OrmlXcmModuleCallLike =
  /**
   * Send an XCM message as parachain sovereign.
   **/
  { name: 'SendAsSovereign'; params: { dest: XcmVersionedLocation; message: XcmVersionedXcm } };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type OrmlXtokensModuleCall =
  /**
   * Transfer native currencies.
   *
   * `dest_weight_limit` is the weight for XCM execution on the dest
   * chain, and it would be charged from the transferred assets. If set
   * below requirements, the execution may fail and assets wouldn't be
   * received.
   *
   * It's a no-op if any error on local XCM execution or message sending.
   * Note sending assets out per se doesn't guarantee they would be
   * received. Receiving depends on if the XCM message could be delivered
   * by the network, and if the receiving chain would handle
   * messages correctly.
   **/
  | {
      name: 'Transfer';
      params: { currencyId: number; amount: bigint; dest: XcmVersionedLocation; destWeightLimit: XcmV3WeightLimit };
    }
  /**
   * Transfer `Asset`.
   *
   * `dest_weight_limit` is the weight for XCM execution on the dest
   * chain, and it would be charged from the transferred assets. If set
   * below requirements, the execution may fail and assets wouldn't be
   * received.
   *
   * It's a no-op if any error on local XCM execution or message sending.
   * Note sending assets out per se doesn't guarantee they would be
   * received. Receiving depends on if the XCM message could be delivered
   * by the network, and if the receiving chain would handle
   * messages correctly.
   **/
  | {
      name: 'TransferMultiasset';
      params: { asset: XcmVersionedAsset; dest: XcmVersionedLocation; destWeightLimit: XcmV3WeightLimit };
    }
  /**
   * Transfer native currencies specifying the fee and amount as
   * separate.
   *
   * `dest_weight_limit` is the weight for XCM execution on the dest
   * chain, and it would be charged from the transferred assets. If set
   * below requirements, the execution may fail and assets wouldn't be
   * received.
   *
   * `fee` is the amount to be spent to pay for execution in destination
   * chain. Both fee and amount will be subtracted form the callers
   * balance.
   *
   * If `fee` is not high enough to cover for the execution costs in the
   * destination chain, then the assets will be trapped in the
   * destination chain
   *
   * It's a no-op if any error on local XCM execution or message sending.
   * Note sending assets out per se doesn't guarantee they would be
   * received. Receiving depends on if the XCM message could be delivered
   * by the network, and if the receiving chain would handle
   * messages correctly.
   **/
  | {
      name: 'TransferWithFee';
      params: {
        currencyId: number;
        amount: bigint;
        fee: bigint;
        dest: XcmVersionedLocation;
        destWeightLimit: XcmV3WeightLimit;
      };
    }
  /**
   * Transfer `Asset` specifying the fee and amount as separate.
   *
   * `dest_weight_limit` is the weight for XCM execution on the dest
   * chain, and it would be charged from the transferred assets. If set
   * below requirements, the execution may fail and assets wouldn't be
   * received.
   *
   * `fee` is the Asset to be spent to pay for execution in
   * destination chain. Both fee and amount will be subtracted form the
   * callers balance For now we only accept fee and asset having the same
   * `Location` id.
   *
   * If `fee` is not high enough to cover for the execution costs in the
   * destination chain, then the assets will be trapped in the
   * destination chain
   *
   * It's a no-op if any error on local XCM execution or message sending.
   * Note sending assets out per se doesn't guarantee they would be
   * received. Receiving depends on if the XCM message could be delivered
   * by the network, and if the receiving chain would handle
   * messages correctly.
   **/
  | {
      name: 'TransferMultiassetWithFee';
      params: {
        asset: XcmVersionedAsset;
        fee: XcmVersionedAsset;
        dest: XcmVersionedLocation;
        destWeightLimit: XcmV3WeightLimit;
      };
    }
  /**
   * Transfer several currencies specifying the item to be used as fee
   *
   * `dest_weight_limit` is the weight for XCM execution on the dest
   * chain, and it would be charged from the transferred assets. If set
   * below requirements, the execution may fail and assets wouldn't be
   * received.
   *
   * `fee_item` is index of the currencies tuple that we want to use for
   * payment
   *
   * It's a no-op if any error on local XCM execution or message sending.
   * Note sending assets out per se doesn't guarantee they would be
   * received. Receiving depends on if the XCM message could be delivered
   * by the network, and if the receiving chain would handle
   * messages correctly.
   **/
  | {
      name: 'TransferMulticurrencies';
      params: {
        currencies: Array<[number, bigint]>;
        feeItem: number;
        dest: XcmVersionedLocation;
        destWeightLimit: XcmV3WeightLimit;
      };
    }
  /**
   * Transfer several `Asset` specifying the item to be used as fee
   *
   * `dest_weight_limit` is the weight for XCM execution on the dest
   * chain, and it would be charged from the transferred assets. If set
   * below requirements, the execution may fail and assets wouldn't be
   * received.
   *
   * `fee_item` is index of the Assets that we want to use for
   * payment
   *
   * It's a no-op if any error on local XCM execution or message sending.
   * Note sending assets out per se doesn't guarantee they would be
   * received. Receiving depends on if the XCM message could be delivered
   * by the network, and if the receiving chain would handle
   * messages correctly.
   **/
  | {
      name: 'TransferMultiassets';
      params: {
        assets: XcmVersionedAssets;
        feeItem: number;
        dest: XcmVersionedLocation;
        destWeightLimit: XcmV3WeightLimit;
      };
    };

export type OrmlXtokensModuleCallLike =
  /**
   * Transfer native currencies.
   *
   * `dest_weight_limit` is the weight for XCM execution on the dest
   * chain, and it would be charged from the transferred assets. If set
   * below requirements, the execution may fail and assets wouldn't be
   * received.
   *
   * It's a no-op if any error on local XCM execution or message sending.
   * Note sending assets out per se doesn't guarantee they would be
   * received. Receiving depends on if the XCM message could be delivered
   * by the network, and if the receiving chain would handle
   * messages correctly.
   **/
  | {
      name: 'Transfer';
      params: { currencyId: number; amount: bigint; dest: XcmVersionedLocation; destWeightLimit: XcmV3WeightLimit };
    }
  /**
   * Transfer `Asset`.
   *
   * `dest_weight_limit` is the weight for XCM execution on the dest
   * chain, and it would be charged from the transferred assets. If set
   * below requirements, the execution may fail and assets wouldn't be
   * received.
   *
   * It's a no-op if any error on local XCM execution or message sending.
   * Note sending assets out per se doesn't guarantee they would be
   * received. Receiving depends on if the XCM message could be delivered
   * by the network, and if the receiving chain would handle
   * messages correctly.
   **/
  | {
      name: 'TransferMultiasset';
      params: { asset: XcmVersionedAsset; dest: XcmVersionedLocation; destWeightLimit: XcmV3WeightLimit };
    }
  /**
   * Transfer native currencies specifying the fee and amount as
   * separate.
   *
   * `dest_weight_limit` is the weight for XCM execution on the dest
   * chain, and it would be charged from the transferred assets. If set
   * below requirements, the execution may fail and assets wouldn't be
   * received.
   *
   * `fee` is the amount to be spent to pay for execution in destination
   * chain. Both fee and amount will be subtracted form the callers
   * balance.
   *
   * If `fee` is not high enough to cover for the execution costs in the
   * destination chain, then the assets will be trapped in the
   * destination chain
   *
   * It's a no-op if any error on local XCM execution or message sending.
   * Note sending assets out per se doesn't guarantee they would be
   * received. Receiving depends on if the XCM message could be delivered
   * by the network, and if the receiving chain would handle
   * messages correctly.
   **/
  | {
      name: 'TransferWithFee';
      params: {
        currencyId: number;
        amount: bigint;
        fee: bigint;
        dest: XcmVersionedLocation;
        destWeightLimit: XcmV3WeightLimit;
      };
    }
  /**
   * Transfer `Asset` specifying the fee and amount as separate.
   *
   * `dest_weight_limit` is the weight for XCM execution on the dest
   * chain, and it would be charged from the transferred assets. If set
   * below requirements, the execution may fail and assets wouldn't be
   * received.
   *
   * `fee` is the Asset to be spent to pay for execution in
   * destination chain. Both fee and amount will be subtracted form the
   * callers balance For now we only accept fee and asset having the same
   * `Location` id.
   *
   * If `fee` is not high enough to cover for the execution costs in the
   * destination chain, then the assets will be trapped in the
   * destination chain
   *
   * It's a no-op if any error on local XCM execution or message sending.
   * Note sending assets out per se doesn't guarantee they would be
   * received. Receiving depends on if the XCM message could be delivered
   * by the network, and if the receiving chain would handle
   * messages correctly.
   **/
  | {
      name: 'TransferMultiassetWithFee';
      params: {
        asset: XcmVersionedAsset;
        fee: XcmVersionedAsset;
        dest: XcmVersionedLocation;
        destWeightLimit: XcmV3WeightLimit;
      };
    }
  /**
   * Transfer several currencies specifying the item to be used as fee
   *
   * `dest_weight_limit` is the weight for XCM execution on the dest
   * chain, and it would be charged from the transferred assets. If set
   * below requirements, the execution may fail and assets wouldn't be
   * received.
   *
   * `fee_item` is index of the currencies tuple that we want to use for
   * payment
   *
   * It's a no-op if any error on local XCM execution or message sending.
   * Note sending assets out per se doesn't guarantee they would be
   * received. Receiving depends on if the XCM message could be delivered
   * by the network, and if the receiving chain would handle
   * messages correctly.
   **/
  | {
      name: 'TransferMulticurrencies';
      params: {
        currencies: Array<[number, bigint]>;
        feeItem: number;
        dest: XcmVersionedLocation;
        destWeightLimit: XcmV3WeightLimit;
      };
    }
  /**
   * Transfer several `Asset` specifying the item to be used as fee
   *
   * `dest_weight_limit` is the weight for XCM execution on the dest
   * chain, and it would be charged from the transferred assets. If set
   * below requirements, the execution may fail and assets wouldn't be
   * received.
   *
   * `fee_item` is index of the Assets that we want to use for
   * payment
   *
   * It's a no-op if any error on local XCM execution or message sending.
   * Note sending assets out per se doesn't guarantee they would be
   * received. Receiving depends on if the XCM message could be delivered
   * by the network, and if the receiving chain would handle
   * messages correctly.
   **/
  | {
      name: 'TransferMultiassets';
      params: {
        assets: XcmVersionedAssets;
        feeItem: number;
        dest: XcmVersionedLocation;
        destWeightLimit: XcmV3WeightLimit;
      };
    };

export type XcmVersionedAsset =
  | { type: 'V2'; value: XcmV2MultiassetMultiAsset }
  | { type: 'V3'; value: XcmV3MultiassetMultiAsset }
  | { type: 'V4'; value: StagingXcmV4Asset };

export type SpRuntimeBlakeTwo256 = {};

export type PalletConvictionVotingTally = { ayes: bigint; nays: bigint; support: bigint };

/**
 * The `Event` enum of this pallet
 **/
export type PalletWhitelistEvent =
  | { name: 'CallWhitelisted'; data: { callHash: H256 } }
  | { name: 'WhitelistedCallRemoved'; data: { callHash: H256 } }
  | {
      name: 'WhitelistedCallDispatched';
      data: {
        callHash: H256;
        result: Result<FrameSupportDispatchPostDispatchInfo, SpRuntimeDispatchErrorWithPostInfo>;
      };
    };

export type FrameSupportDispatchPostDispatchInfo = {
  actualWeight?: SpWeightsWeightV2Weight | undefined;
  paysFee: FrameSupportDispatchPays;
};

export type SpRuntimeDispatchErrorWithPostInfo = {
  postInfo: FrameSupportDispatchPostDispatchInfo;
  error: DispatchError;
};

/**
 * The `Event` enum of this pallet
 **/
export type PalletRelaychainInfoEvent =
  /**
   * Current block numbers
   * [ Parachain block number, Relaychain Block number ]
   **/
  { name: 'CurrentBlockNumbers'; data: { parachainBlockNumber: number; relaychainBlockNumber: number } };

/**
 * Events type.
 **/
export type PalletSchedulerEvent =
  /**
   * Scheduled some task.
   **/
  | { name: 'Scheduled'; data: { when: number; index: number } }
  /**
   * Canceled some task.
   **/
  | { name: 'Canceled'; data: { when: number; index: number } }
  /**
   * Dispatched some task.
   **/
  | {
      name: 'Dispatched';
      data: { task: [number, number]; id?: FixedBytes<32> | undefined; result: Result<[], DispatchError> };
    }
  /**
   * Set a retry configuration for some task.
   **/
  | {
      name: 'RetrySet';
      data: { task: [number, number]; id?: FixedBytes<32> | undefined; period: number; retries: number };
    }
  /**
   * Cancel a retry configuration for some task.
   **/
  | { name: 'RetryCancelled'; data: { task: [number, number]; id?: FixedBytes<32> | undefined } }
  /**
   * The call for the provided hash was not found so the task has been aborted.
   **/
  | { name: 'CallUnavailable'; data: { task: [number, number]; id?: FixedBytes<32> | undefined } }
  /**
   * The given task was unable to be renewed since the agenda is full at that block.
   **/
  | { name: 'PeriodicFailed'; data: { task: [number, number]; id?: FixedBytes<32> | undefined } }
  /**
   * The given task was unable to be retried since the agenda is full at that block or there
   * was not enough weight to reschedule it.
   **/
  | { name: 'RetryFailed'; data: { task: [number, number]; id?: FixedBytes<32> | undefined } }
  /**
   * The given task can never be executed since it is overweight.
   **/
  | { name: 'PermanentlyOverweight'; data: { task: [number, number]; id?: FixedBytes<32> | undefined } };

/**
 * The `Event` enum of this pallet
 **/
export type CumulusPalletParachainSystemEvent =
  /**
   * The validation function has been scheduled to apply.
   **/
  | { name: 'ValidationFunctionStored' }
  /**
   * The validation function was applied as of the contained relay chain block number.
   **/
  | { name: 'ValidationFunctionApplied'; data: { relayChainBlockNum: number } }
  /**
   * The relay-chain aborted the upgrade process.
   **/
  | { name: 'ValidationFunctionDiscarded' }
  /**
   * Some downward messages have been received and will be processed.
   **/
  | { name: 'DownwardMessagesReceived'; data: { count: number } }
  /**
   * Downward messages were processed using the given weight.
   **/
  | { name: 'DownwardMessagesProcessed'; data: { weightUsed: SpWeightsWeightV2Weight; dmqHead: H256 } }
  /**
   * An upward message was sent to the relay chain.
   **/
  | { name: 'UpwardMessageSent'; data: { messageHash?: FixedBytes<32> | undefined } };

/**
 * The `Event` enum of this pallet
 **/
export type PalletXcmEvent =
  /**
   * Execution of an XCM message was attempted.
   **/
  | { name: 'Attempted'; data: { outcome: StagingXcmV4TraitsOutcome } }
  /**
   * A XCM message was sent.
   **/
  | {
      name: 'Sent';
      data: {
        origin: StagingXcmV4Location;
        destination: StagingXcmV4Location;
        message: StagingXcmV4Xcm;
        messageId: FixedBytes<32>;
      };
    }
  /**
   * Query response received which does not match a registered query. This may be because a
   * matching query was never registered, it may be because it is a duplicate response, or
   * because the query timed out.
   **/
  | { name: 'UnexpectedResponse'; data: { origin: StagingXcmV4Location; queryId: bigint } }
  /**
   * Query response has been received and is ready for taking with `take_response`. There is
   * no registered notification call.
   **/
  | { name: 'ResponseReady'; data: { queryId: bigint; response: StagingXcmV4Response } }
  /**
   * Query response has been received and query is removed. The registered notification has
   * been dispatched and executed successfully.
   **/
  | { name: 'Notified'; data: { queryId: bigint; palletIndex: number; callIndex: number } }
  /**
   * Query response has been received and query is removed. The registered notification
   * could not be dispatched because the dispatch weight is greater than the maximum weight
   * originally budgeted by this runtime for the query result.
   **/
  | {
      name: 'NotifyOverweight';
      data: {
        queryId: bigint;
        palletIndex: number;
        callIndex: number;
        actualWeight: SpWeightsWeightV2Weight;
        maxBudgetedWeight: SpWeightsWeightV2Weight;
      };
    }
  /**
   * Query response has been received and query is removed. There was a general error with
   * dispatching the notification call.
   **/
  | { name: 'NotifyDispatchError'; data: { queryId: bigint; palletIndex: number; callIndex: number } }
  /**
   * Query response has been received and query is removed. The dispatch was unable to be
   * decoded into a `Call`; this might be due to dispatch function having a signature which
   * is not `(origin, QueryId, Response)`.
   **/
  | { name: 'NotifyDecodeFailed'; data: { queryId: bigint; palletIndex: number; callIndex: number } }
  /**
   * Expected query response has been received but the origin location of the response does
   * not match that expected. The query remains registered for a later, valid, response to
   * be received and acted upon.
   **/
  | {
      name: 'InvalidResponder';
      data: { origin: StagingXcmV4Location; queryId: bigint; expectedLocation?: StagingXcmV4Location | undefined };
    }
  /**
   * Expected query response has been received but the expected origin location placed in
   * storage by this runtime previously cannot be decoded. The query remains registered.
   *
   * This is unexpected (since a location placed in storage in a previously executing
   * runtime should be readable prior to query timeout) and dangerous since the possibly
   * valid response will be dropped. Manual governance intervention is probably going to be
   * needed.
   **/
  | { name: 'InvalidResponderVersion'; data: { origin: StagingXcmV4Location; queryId: bigint } }
  /**
   * Received query response has been read and removed.
   **/
  | { name: 'ResponseTaken'; data: { queryId: bigint } }
  /**
   * Some assets have been placed in an asset trap.
   **/
  | { name: 'AssetsTrapped'; data: { hash: H256; origin: StagingXcmV4Location; assets: XcmVersionedAssets } }
  /**
   * An XCM version change notification message has been attempted to be sent.
   *
   * The cost of sending it (borne by the chain) is included.
   **/
  | {
      name: 'VersionChangeNotified';
      data: {
        destination: StagingXcmV4Location;
        result: number;
        cost: StagingXcmV4AssetAssets;
        messageId: FixedBytes<32>;
      };
    }
  /**
   * The supported version of a location has been changed. This might be through an
   * automatic notification or a manual intervention.
   **/
  | { name: 'SupportedVersionChanged'; data: { location: StagingXcmV4Location; version: number } }
  /**
   * A given location which had a version change subscription was dropped owing to an error
   * sending the notification to it.
   **/
  | { name: 'NotifyTargetSendFail'; data: { location: StagingXcmV4Location; queryId: bigint; error: XcmV3TraitsError } }
  /**
   * A given location which had a version change subscription was dropped owing to an error
   * migrating the location to our new XCM format.
   **/
  | { name: 'NotifyTargetMigrationFail'; data: { location: XcmVersionedLocation; queryId: bigint } }
  /**
   * Expected query response has been received but the expected querier location placed in
   * storage by this runtime previously cannot be decoded. The query remains registered.
   *
   * This is unexpected (since a location placed in storage in a previously executing
   * runtime should be readable prior to query timeout) and dangerous since the possibly
   * valid response will be dropped. Manual governance intervention is probably going to be
   * needed.
   **/
  | { name: 'InvalidQuerierVersion'; data: { origin: StagingXcmV4Location; queryId: bigint } }
  /**
   * Expected query response has been received but the querier location of the response does
   * not match the expected. The query remains registered for a later, valid, response to
   * be received and acted upon.
   **/
  | {
      name: 'InvalidQuerier';
      data: {
        origin: StagingXcmV4Location;
        queryId: bigint;
        expectedQuerier: StagingXcmV4Location;
        maybeActualQuerier?: StagingXcmV4Location | undefined;
      };
    }
  /**
   * A remote has requested XCM version change notification from us and we have honored it.
   * A version information message is sent to them and its cost is included.
   **/
  | {
      name: 'VersionNotifyStarted';
      data: { destination: StagingXcmV4Location; cost: StagingXcmV4AssetAssets; messageId: FixedBytes<32> };
    }
  /**
   * We have requested that a remote chain send us XCM version change notifications.
   **/
  | {
      name: 'VersionNotifyRequested';
      data: { destination: StagingXcmV4Location; cost: StagingXcmV4AssetAssets; messageId: FixedBytes<32> };
    }
  /**
   * We have requested that a remote chain stops sending us XCM version change
   * notifications.
   **/
  | {
      name: 'VersionNotifyUnrequested';
      data: { destination: StagingXcmV4Location; cost: StagingXcmV4AssetAssets; messageId: FixedBytes<32> };
    }
  /**
   * Fees were paid from a location for an operation (often for using `SendXcm`).
   **/
  | { name: 'FeesPaid'; data: { paying: StagingXcmV4Location; fees: StagingXcmV4AssetAssets } }
  /**
   * Some assets have been claimed from an asset trap
   **/
  | { name: 'AssetsClaimed'; data: { hash: H256; origin: StagingXcmV4Location; assets: XcmVersionedAssets } }
  /**
   * A XCM version migration finished.
   **/
  | { name: 'VersionMigrationFinished'; data: { version: number } };

export type StagingXcmV4TraitsOutcome =
  | { type: 'Complete'; value: { used: SpWeightsWeightV2Weight } }
  | { type: 'Incomplete'; value: { used: SpWeightsWeightV2Weight; error: XcmV3TraitsError } }
  | { type: 'Error'; value: { error: XcmV3TraitsError } };

/**
 * The `Event` enum of this pallet
 **/
export type CumulusPalletXcmEvent =
  /**
   * Downward message is invalid XCM.
   * \[ id \]
   **/
  | { name: 'InvalidFormat'; data: FixedBytes<32> }
  /**
   * Downward message is unsupported version of XCM.
   * \[ id \]
   **/
  | { name: 'UnsupportedVersion'; data: FixedBytes<32> }
  /**
   * Downward message executed with the given outcome.
   * \[ id, outcome \]
   **/
  | { name: 'ExecutedDownward'; data: [FixedBytes<32>, StagingXcmV4TraitsOutcome] };

/**
 * The `Event` enum of this pallet
 **/
export type CumulusPalletXcmpQueueEvent =
  /**
   * An HRMP message was sent to a sibling parachain.
   **/
  { name: 'XcmpMessageSent'; data: { messageHash: FixedBytes<32> } };

/**
 * The `Event` enum of this pallet
 **/
export type PalletMessageQueueEvent =
  /**
   * Message discarded due to an error in the `MessageProcessor` (usually a format error).
   **/
  | {
      name: 'ProcessingFailed';
      data: {
        /**
         * The `blake2_256` hash of the message.
         **/
        id: H256;

        /**
         * The queue of the message.
         **/
        origin: CumulusPrimitivesCoreAggregateMessageOrigin;

        /**
         * The error that occurred.
         *
         * This error is pretty opaque. More fine-grained errors need to be emitted as events
         * by the `MessageProcessor`.
         **/
        error: FrameSupportMessagesProcessMessageError;
      };
    }
  /**
   * Message is processed.
   **/
  | {
      name: 'Processed';
      data: {
        /**
         * The `blake2_256` hash of the message.
         **/
        id: H256;

        /**
         * The queue of the message.
         **/
        origin: CumulusPrimitivesCoreAggregateMessageOrigin;

        /**
         * How much weight was used to process the message.
         **/
        weightUsed: SpWeightsWeightV2Weight;

        /**
         * Whether the message was processed.
         *
         * Note that this does not mean that the underlying `MessageProcessor` was internally
         * successful. It *solely* means that the MQ pallet will treat this as a success
         * condition and discard the message. Any internal error needs to be emitted as events
         * by the `MessageProcessor`.
         **/
        success: boolean;
      };
    }
  /**
   * Message placed in overweight queue.
   **/
  | {
      name: 'OverweightEnqueued';
      data: {
        /**
         * The `blake2_256` hash of the message.
         **/
        id: FixedBytes<32>;

        /**
         * The queue of the message.
         **/
        origin: CumulusPrimitivesCoreAggregateMessageOrigin;

        /**
         * The page of the message.
         **/
        pageIndex: number;

        /**
         * The index of the message within the page.
         **/
        messageIndex: number;
      };
    }
  /**
   * This page was reaped.
   **/
  | {
      name: 'PageReaped';
      data: {
        /**
         * The queue of the page.
         **/
        origin: CumulusPrimitivesCoreAggregateMessageOrigin;

        /**
         * The index of the page.
         **/
        index: number;
      };
    };

export type FrameSupportMessagesProcessMessageError =
  | { type: 'BadFormat' }
  | { type: 'Corrupt' }
  | { type: 'Unsupported' }
  | { type: 'Overweight'; value: SpWeightsWeightV2Weight }
  | { type: 'Yield' }
  | { type: 'StackLimitReached' };

/**
 * The `Event` enum of this pallet
 **/
export type PalletAssetRegistryEvent =
  /**
   * Asset was registered.
   **/
  | { name: 'Registered'; data: { assetId: number; assetName: Bytes; assetType: PalletAssetRegistryAssetType } }
  /**
   * Asset was updated.
   **/
  | {
      name: 'Updated';
      data: {
        assetId: number;
        assetName: Bytes;
        assetType: PalletAssetRegistryAssetType;
        existentialDeposit: bigint;
        xcmRateLimit?: bigint | undefined;
      };
    }
  /**
   * Metadata set for an asset.
   **/
  | { name: 'MetadataSet'; data: { assetId: number; symbol: Bytes; decimals: number } }
  /**
   * Native location set for an asset.
   **/
  | { name: 'LocationSet'; data: { assetId: number; location: BasiliskRuntimeXcmAssetLocation } };

/**
 * The `Event` enum of this pallet
 **/
export type PalletXykEvent =
  /**
   * New liquidity was provided to the pool.
   **/
  | {
      name: 'LiquidityAdded';
      data: { who: AccountId32; assetA: number; assetB: number; amountA: bigint; amountB: bigint };
    }
  /**
   * Liquidity was removed from the pool.
   **/
  | { name: 'LiquidityRemoved'; data: { who: AccountId32; assetA: number; assetB: number; shares: bigint } }
  /**
   * Pool was created.
   **/
  | {
      name: 'PoolCreated';
      data: {
        who: AccountId32;
        assetA: number;
        assetB: number;
        initialSharesAmount: bigint;
        shareToken: number;
        pool: AccountId32;
      };
    }
  /**
   * Pool was destroyed.
   **/
  | {
      name: 'PoolDestroyed';
      data: { who: AccountId32; assetA: number; assetB: number; shareToken: number; pool: AccountId32 };
    }
  /**
   * Asset sale executed.
   * Deprecated. Replaced by pallet_broadcast::Swapped
   **/
  | {
      name: 'SellExecuted';
      data: {
        who: AccountId32;
        assetIn: number;
        assetOut: number;
        amount: bigint;
        salePrice: bigint;
        feeAsset: number;
        feeAmount: bigint;
        pool: AccountId32;
      };
    }
  /**
   * Asset purchase executed.
   * Deprecated. Replaced by pallet_broadcast::Swapped
   **/
  | {
      name: 'BuyExecuted';
      data: {
        who: AccountId32;
        assetOut: number;
        assetIn: number;
        amount: bigint;
        buyPrice: bigint;
        feeAsset: number;
        feeAmount: bigint;
        pool: AccountId32;
      };
    };

/**
 * The `Event` enum of this pallet
 **/
export type PalletDusterEvent =
  /**
   * Account dusted.
   **/
  | { name: 'Dusted'; data: { who: AccountId32; amount: bigint } }
  /**
   * Account added to non-dustable list.
   **/
  | { name: 'Added'; data: { who: AccountId32 } }
  /**
   * Account removed from non-dustable list.
   **/
  | { name: 'Removed'; data: { who: AccountId32 } };

/**
 * The `Event` enum of this pallet
 **/
export type PalletLbpEvent =
  /**
   * Pool was created by the `CreatePool` origin.
   **/
  | { name: 'PoolCreated'; data: { pool: AccountId32; data: PalletLbpPool } }
  /**
   * Pool data were updated.
   **/
  | { name: 'PoolUpdated'; data: { pool: AccountId32; data: PalletLbpPool } }
  /**
   * New liquidity was provided to the pool.
   **/
  | {
      name: 'LiquidityAdded';
      data: { who: AccountId32; assetA: number; assetB: number; amountA: bigint; amountB: bigint };
    }
  /**
   * Liquidity was removed from the pool and the pool was destroyed.
   **/
  | {
      name: 'LiquidityRemoved';
      data: { who: AccountId32; assetA: number; assetB: number; amountA: bigint; amountB: bigint };
    }
  /**
   * Sale executed.
   * Deprecated. Replaced by pallet_broadcast::Swapped
   **/
  | {
      name: 'SellExecuted';
      data: {
        who: AccountId32;
        assetIn: number;
        assetOut: number;
        amount: bigint;
        salePrice: bigint;
        feeAsset: number;
        feeAmount: bigint;
      };
    }
  /**
   * Purchase executed.
   * Deprecated. Replaced by pallet_broadcast::Swapped
   **/
  | {
      name: 'BuyExecuted';
      data: {
        who: AccountId32;
        assetOut: number;
        assetIn: number;
        amount: bigint;
        buyPrice: bigint;
        feeAsset: number;
        feeAmount: bigint;
      };
    };

export type PalletLbpPool = {
  owner: AccountId32;
  start?: number | undefined;
  end?: number | undefined;
  assets: [number, number];
  initialWeight: number;
  finalWeight: number;
  weightCurve: PalletLbpWeightCurveType;
  fee: [number, number];
  feeCollector: AccountId32;
  repayTarget: bigint;
};

/**
 * The `Event` enum of this pallet
 **/
export type PalletNftEvent =
  /**
   * A collection was created
   **/
  | {
      name: 'CollectionCreated';
      data: { owner: AccountId32; collectionId: bigint; collectionType: PalletNftCollectionType; metadata: Bytes };
    }
  /**
   * An item was minted
   **/
  | { name: 'ItemMinted'; data: { owner: AccountId32; collectionId: bigint; itemId: bigint; metadata: Bytes } }
  /**
   * An item was transferred
   **/
  | { name: 'ItemTransferred'; data: { from: AccountId32; to: AccountId32; collectionId: bigint; itemId: bigint } }
  /**
   * An item was burned
   **/
  | { name: 'ItemBurned'; data: { owner: AccountId32; collectionId: bigint; itemId: bigint } }
  /**
   * A collection was destroyed
   **/
  | { name: 'CollectionDestroyed'; data: { owner: AccountId32; collectionId: bigint } };

/**
 * The `Event` enum of this pallet
 **/
export type PalletMarketplaceEvent =
  /**
   * The price for a token was updated
   **/
  | {
      name: 'TokenPriceUpdated';
      data: { who: AccountId32; collection: bigint; item: bigint; price?: bigint | undefined };
    }
  /**
   * Token was sold to a new owner
   **/
  | {
      name: 'TokenSold';
      data: { owner: AccountId32; buyer: AccountId32; collection: bigint; item: bigint; price: bigint };
    }
  /**
   * Offer was placed on a token
   **/
  | {
      name: 'OfferPlaced';
      data: { who: AccountId32; collection: bigint; item: bigint; amount: bigint; expires: number };
    }
  /**
   * Offer was withdrawn
   **/
  | { name: 'OfferWithdrawn'; data: { who: AccountId32; collection: bigint; item: bigint } }
  /**
   * Offer was accepted
   **/
  | {
      name: 'OfferAccepted';
      data: { who: AccountId32; collection: bigint; item: bigint; amount: bigint; maker: AccountId32 };
    }
  /**
   * Royalty hs been paid to the author
   **/
  | {
      name: 'RoyaltyPaid';
      data: { collection: bigint; item: bigint; author: AccountId32; royalty: number; royaltyAmount: bigint };
    }
  /**
   * Marketplace data has been added
   **/
  | { name: 'RoyaltyAdded'; data: { collection: bigint; item: bigint; author: AccountId32; royalty: number } };

/**
 * The `Event` enum of this pallet
 **/
export type PalletTransactionPauseEvent =
  /**
   * Paused transaction
   **/
  | { name: 'TransactionPaused'; data: { palletNameBytes: Bytes; functionNameBytes: Bytes } }
  /**
   * Unpaused transaction
   **/
  | { name: 'TransactionUnpaused'; data: { palletNameBytes: Bytes; functionNameBytes: Bytes } };

/**
 * The `Event` enum of this pallet
 **/
export type PalletRouteExecutorEvent =
  /**
   * The route with trades has been successfully executed
   **/
  | {
      name: 'Executed';
      data: { assetIn: number; assetOut: number; amountIn: bigint; amountOut: bigint; eventId: number };
    }
  /**
   * The route with trades has been successfully executed
   **/
  | { name: 'RouteUpdated'; data: { assetIds: Array<number> } };

/**
 * The `Event` enum of this pallet
 **/
export type PalletXykLiquidityMiningEvent =
  /**
   * New global farm was created.
   **/
  | {
      name: 'GlobalFarmCreated';
      data: {
        id: number;
        owner: AccountId32;
        totalRewards: bigint;
        rewardCurrency: number;
        yieldPerPeriod: Perquintill;
        plannedYieldingPeriods: number;
        blocksPerPeriod: number;
        incentivizedAsset: number;
        maxRewardPerPeriod: bigint;
        minDeposit: bigint;
        priceAdjustment: FixedU128;
      };
    }
  /**
   * Global farm's `price_adjustment` was updated.
   **/
  | { name: 'GlobalFarmUpdated'; data: { id: number; priceAdjustment: FixedU128 } }
  /**
   * New yield farm was added into the farm.
   **/
  | {
      name: 'YieldFarmCreated';
      data: {
        globalFarmId: number;
        yieldFarmId: number;
        multiplier: FixedU128;
        assetPair: PalletXykAssetPair;
        loyaltyCurve?: PalletLiquidityMiningLoyaltyCurve | undefined;
      };
    }
  /**
   * Global farm was terminated.
   **/
  | {
      name: 'GlobalFarmTerminated';
      data: { globalFarmId: number; who: AccountId32; rewardCurrency: number; undistributedRewards: bigint };
    }
  /**
   * New LP tokens was deposited.
   **/
  | {
      name: 'SharesDeposited';
      data: {
        globalFarmId: number;
        yieldFarmId: number;
        who: AccountId32;
        amount: bigint;
        lpToken: number;
        depositId: bigint;
      };
    }
  /**
   * LP token was redeposited for a new yield farm entry
   **/
  | {
      name: 'SharesRedeposited';
      data: {
        globalFarmId: number;
        yieldFarmId: number;
        who: AccountId32;
        amount: bigint;
        lpToken: number;
        depositId: bigint;
      };
    }
  /**
   * Rewards was claimed.
   **/
  | {
      name: 'RewardClaimed';
      data: {
        globalFarmId: number;
        yieldFarmId: number;
        who: AccountId32;
        claimed: bigint;
        rewardCurrency: number;
        depositId: bigint;
      };
    }
  /**
   * LP tokens was withdrawn.
   **/
  | {
      name: 'SharesWithdrawn';
      data: {
        globalFarmId: number;
        yieldFarmId: number;
        who: AccountId32;
        lpToken: number;
        amount: bigint;
        depositId: bigint;
      };
    }
  /**
   * Yield farm for asset pair was stopped.
   **/
  | {
      name: 'YieldFarmStopped';
      data: { globalFarmId: number; yieldFarmId: number; who: AccountId32; assetPair: PalletXykAssetPair };
    }
  /**
   * Yield farm for asset pair was resumed.
   **/
  | {
      name: 'YieldFarmResumed';
      data: {
        globalFarmId: number;
        yieldFarmId: number;
        who: AccountId32;
        assetPair: PalletXykAssetPair;
        multiplier: FixedU128;
      };
    }
  /**
   * Yield farm was terminated from global farm.
   **/
  | {
      name: 'YieldFarmTerminated';
      data: { globalFarmId: number; yieldFarmId: number; who: AccountId32; assetPair: PalletXykAssetPair };
    }
  /**
   * Yield farm multiplier was updated.
   **/
  | {
      name: 'YieldFarmUpdated';
      data: {
        globalFarmId: number;
        yieldFarmId: number;
        who: AccountId32;
        assetPair: PalletXykAssetPair;
        multiplier: FixedU128;
      };
    }
  /**
   * NFT representing deposit has been destroyed
   **/
  | { name: 'DepositDestroyed'; data: { who: AccountId32; depositId: bigint } };

/**
 * The `Event` enum of this pallet
 **/
export type PalletLiquidityMiningEvent =
  /**
   * Global farm accumulated reward per share was updated.
   **/
  | { name: 'GlobalFarmAccRPZUpdated'; data: { globalFarmId: number; accumulatedRpz: FixedU128; totalSharesZ: bigint } }
  /**
   * Yield farm accumulated reward per valued share was updated.
   **/
  | {
      name: 'YieldFarmAccRPVSUpdated';
      data: { globalFarmId: number; yieldFarmId: number; accumulatedRpvs: FixedU128; totalValuedShares: bigint };
    }
  /**
   * Global farm has no more rewards to distribute in the moment.
   **/
  | { name: 'AllRewardsDistributed'; data: { globalFarmId: number } };

/**
 * The `Event` enum of this pallet
 **/
export type PalletCollatorRewardsEvent =
  /**
   * Collator was rewarded.
   **/
  { name: 'CollatorRewarded'; data: { who: AccountId32; amount: bigint; currency: number } };

/**
 * The `Event` enum of this pallet
 **/
export type PalletBroadcastEvent =
  /**
   * Trade executed.
   **/
  {
    name: 'Swapped';
    data: {
      swapper: AccountId32;
      filler: AccountId32;
      fillerType: PalletBroadcastFiller;
      operation: PalletBroadcastTradeOperation;
      inputs: Array<PalletBroadcastAsset>;
      outputs: Array<PalletBroadcastAsset>;
      fees: Array<PalletBroadcastFee>;
      operationStack: Array<PalletBroadcastExecutionType>;
    };
  };

export type PalletBroadcastFiller =
  | { type: 'Omnipool' }
  | { type: 'Stableswap'; value: number }
  | { type: 'Xyk'; value: number }
  | { type: 'Lbp' }
  | { type: 'Otc'; value: number };

export type PalletBroadcastTradeOperation = 'ExactIn' | 'ExactOut' | 'Limit' | 'LiquidityAdd' | 'LiquidityRemove';

export type PalletBroadcastAsset = { asset: number; amount: bigint };

export type PalletBroadcastFee = { asset: number; amount: bigint; destination: PalletBroadcastDestination };

export type PalletBroadcastDestination = { type: 'Account'; value: AccountId32 } | { type: 'Burned' };

export type PalletBroadcastExecutionType =
  | { type: 'Router'; value: number }
  | { type: 'Dca'; value: [number, number] }
  | { type: 'Batch'; value: number }
  | { type: 'Omnipool'; value: number }
  | { type: 'XcmExchange'; value: number }
  | { type: 'Xcm'; value: [FixedBytes<32>, number] };

/**
 * The `Event` enum of this pallet
 **/
export type PalletEmaOracleEvent =
  /**
   * Oracle was added to the whitelist.
   **/
  | { name: 'AddedToWhitelist'; data: { source: FixedBytes<8>; assets: [number, number] } }
  /**
   * Oracle was removed from the whitelist.
   **/
  | { name: 'RemovedFromWhitelist'; data: { source: FixedBytes<8>; assets: [number, number] } };

/**
 * The `Event` enum of this pallet
 **/
export type PalletCurrenciesModuleEvent =
  /**
   * Currency transfer success.
   **/
  | { name: 'Transferred'; data: { currencyId: number; from: AccountId32; to: AccountId32; amount: bigint } }
  /**
   * Update balance success.
   **/
  | { name: 'BalanceUpdated'; data: { currencyId: number; who: AccountId32; amount: bigint } }
  /**
   * Deposit success.
   **/
  | { name: 'Deposited'; data: { currencyId: number; who: AccountId32; amount: bigint } }
  /**
   * Withdraw success.
   **/
  | { name: 'Withdrawn'; data: { currencyId: number; who: AccountId32; amount: bigint } };

/**
 * The `Event` enum of this pallet
 **/
export type OrmlTokensModuleEvent =
  /**
   * An account was created with some free balance.
   **/
  | { name: 'Endowed'; data: { currencyId: number; who: AccountId32; amount: bigint } }
  /**
   * An account was removed whose balance was non-zero but below
   * ExistentialDeposit, resulting in an outright loss.
   **/
  | { name: 'DustLost'; data: { currencyId: number; who: AccountId32; amount: bigint } }
  /**
   * Transfer succeeded.
   **/
  | { name: 'Transfer'; data: { currencyId: number; from: AccountId32; to: AccountId32; amount: bigint } }
  /**
   * Some balance was reserved (moved from free to reserved).
   **/
  | { name: 'Reserved'; data: { currencyId: number; who: AccountId32; amount: bigint } }
  /**
   * Some balance was unreserved (moved from reserved to free).
   **/
  | { name: 'Unreserved'; data: { currencyId: number; who: AccountId32; amount: bigint } }
  /**
   * Some reserved balance was repatriated (moved from reserved to
   * another account).
   **/
  | {
      name: 'ReserveRepatriated';
      data: {
        currencyId: number;
        from: AccountId32;
        to: AccountId32;
        amount: bigint;
        status: FrameSupportTokensMiscBalanceStatus;
      };
    }
  /**
   * A balance was set by root.
   **/
  | { name: 'BalanceSet'; data: { currencyId: number; who: AccountId32; free: bigint; reserved: bigint } }
  /**
   * The total issuance of an currency has been set
   **/
  | { name: 'TotalIssuanceSet'; data: { currencyId: number; amount: bigint } }
  /**
   * Some balances were withdrawn (e.g. pay for transaction fee)
   **/
  | { name: 'Withdrawn'; data: { currencyId: number; who: AccountId32; amount: bigint } }
  /**
   * Some balances were slashed (e.g. due to mis-behavior)
   **/
  | { name: 'Slashed'; data: { currencyId: number; who: AccountId32; freeAmount: bigint; reservedAmount: bigint } }
  /**
   * Deposited some balance into an account
   **/
  | { name: 'Deposited'; data: { currencyId: number; who: AccountId32; amount: bigint } }
  /**
   * Some funds are locked
   **/
  | { name: 'LockSet'; data: { lockId: FixedBytes<8>; currencyId: number; who: AccountId32; amount: bigint } }
  /**
   * Some locked funds were unlocked
   **/
  | { name: 'LockRemoved'; data: { lockId: FixedBytes<8>; currencyId: number; who: AccountId32 } }
  /**
   * Some free balance was locked.
   **/
  | { name: 'Locked'; data: { currencyId: number; who: AccountId32; amount: bigint } }
  /**
   * Some locked balance was freed.
   **/
  | { name: 'Unlocked'; data: { currencyId: number; who: AccountId32; amount: bigint } }
  | { name: 'Issued'; data: { currencyId: number; amount: bigint } }
  | { name: 'Rescinded'; data: { currencyId: number; amount: bigint } };

/**
 * The `Event` enum of this pallet
 **/
export type OrmlXcmModuleEvent =
  /**
   * XCM message sent. \[to, message\]
   **/
  { name: 'Sent'; data: { to: StagingXcmV4Location; message: StagingXcmV4Xcm } };

/**
 * The `Event` enum of this pallet
 **/
export type OrmlXtokensModuleEvent =
  /**
   * Transferred `Asset` with fee.
   **/
  {
    name: 'TransferredAssets';
    data: { sender: AccountId32; assets: StagingXcmV4AssetAssets; fee: StagingXcmV4Asset; dest: StagingXcmV4Location };
  };

/**
 * The `Event` enum of this pallet
 **/
export type OrmlUnknownTokensModuleEvent =
  /**
   * Deposit success.
   **/
  | { name: 'Deposited'; data: { asset: StagingXcmV4Asset; who: StagingXcmV4Location } }
  /**
   * Withdraw success.
   **/
  | { name: 'Withdrawn'; data: { asset: StagingXcmV4Asset; who: StagingXcmV4Location } };

export type FrameSystemLastRuntimeUpgradeInfo = { specVersion: number; specName: string };

export type FrameSystemCodeUpgradeAuthorization = { codeHash: H256; checkVersion: boolean };

export type FrameSystemLimitsBlockWeights = {
  baseBlock: SpWeightsWeightV2Weight;
  maxBlock: SpWeightsWeightV2Weight;
  perClass: FrameSupportDispatchPerDispatchClassWeightsPerClass;
};

export type FrameSupportDispatchPerDispatchClassWeightsPerClass = {
  normal: FrameSystemLimitsWeightsPerClass;
  operational: FrameSystemLimitsWeightsPerClass;
  mandatory: FrameSystemLimitsWeightsPerClass;
};

export type FrameSystemLimitsWeightsPerClass = {
  baseExtrinsic: SpWeightsWeightV2Weight;
  maxExtrinsic?: SpWeightsWeightV2Weight | undefined;
  maxTotal?: SpWeightsWeightV2Weight | undefined;
  reserved?: SpWeightsWeightV2Weight | undefined;
};

export type FrameSystemLimitsBlockLength = { max: FrameSupportDispatchPerDispatchClassU32 };

export type FrameSupportDispatchPerDispatchClassU32 = { normal: number; operational: number; mandatory: number };

export type SpWeightsRuntimeDbWeight = { read: bigint; write: bigint };

/**
 * Error for the System pallet
 **/
export type FrameSystemError =
  /**
   * The name of specification does not match between the current runtime
   * and the new runtime.
   **/
  | 'InvalidSpecName'
  /**
   * The specification version is not allowed to decrease between the current runtime
   * and the new runtime.
   **/
  | 'SpecVersionNeedsToIncrease'
  /**
   * Failed to extract the runtime version from the new runtime.
   *
   * Either calling `Core_version` or decoding `RuntimeVersion` failed.
   **/
  | 'FailedToExtractRuntimeVersion'
  /**
   * Suicide called when the account has non-default composite data.
   **/
  | 'NonDefaultComposite'
  /**
   * There is a non-zero reference count preventing the account from being purged.
   **/
  | 'NonZeroRefCount'
  /**
   * The origin filter prevent the call to be dispatched.
   **/
  | 'CallFiltered'
  /**
   * A multi-block migration is ongoing and prevents the current code from being replaced.
   **/
  | 'MultiBlockMigrationsOngoing'
  /**
   * No upgrade authorized.
   **/
  | 'NothingAuthorized'
  /**
   * The submitted code is not authorized.
   **/
  | 'Unauthorized';

export type PalletBalancesBalanceLock = { id: FixedBytes<8>; amount: bigint; reasons: PalletBalancesReasons };

export type PalletBalancesReasons = 'Fee' | 'Misc' | 'All';

export type PalletBalancesReserveData = { id: []; amount: bigint };

export type FrameSupportTokensMiscIdAmount = { id: BasiliskRuntimeRuntimeHoldReason; amount: bigint };

export type BasiliskRuntimeRuntimeHoldReason =
  | { type: 'Preimage'; value: PalletPreimageHoldReason }
  | { type: 'StateTrieMigration'; value: PalletStateTrieMigrationHoldReason };

export type PalletPreimageHoldReason = 'Preimage';

export type PalletStateTrieMigrationHoldReason = 'SlashForMigrate';

export type FrameSupportTokensMiscIdAmount002 = { id: []; amount: bigint };

/**
 * The `Error` enum of this pallet.
 **/
export type PalletBalancesError =
  /**
   * Vesting balance too high to send value.
   **/
  | 'VestingBalance'
  /**
   * Account liquidity restrictions prevent withdrawal.
   **/
  | 'LiquidityRestrictions'
  /**
   * Balance too low to send value.
   **/
  | 'InsufficientBalance'
  /**
   * Value too low to create account due to existential deposit.
   **/
  | 'ExistentialDeposit'
  /**
   * Transfer/payment would kill account.
   **/
  | 'Expendability'
  /**
   * A vesting schedule already exists for this account.
   **/
  | 'ExistingVestingSchedule'
  /**
   * Beneficiary account must pre-exist.
   **/
  | 'DeadAccount'
  /**
   * Number of named reserves exceed `MaxReserves`.
   **/
  | 'TooManyReserves'
  /**
   * Number of holds exceed `VariantCountOf<T::RuntimeHoldReason>`.
   **/
  | 'TooManyHolds'
  /**
   * Number of freezes exceed `MaxFreezes`.
   **/
  | 'TooManyFreezes'
  /**
   * The issuance cannot be modified since it is already deactivated.
   **/
  | 'IssuanceDeactivated'
  /**
   * The delta cannot be zero.
   **/
  | 'DeltaZero';

export type PalletTransactionPaymentReleases = 'V1Ancient' | 'V2';

/**
 * The `Error` enum of this pallet.
 **/
export type PalletTransactionMultiPaymentError =
  /**
   * Selected currency is not supported.
   **/
  | 'UnsupportedCurrency'
  /**
   * Account balance should be non-zero.
   **/
  | 'ZeroBalance'
  /**
   * Currency is already in the list of accepted currencies.
   **/
  | 'AlreadyAccepted'
  /**
   * It is not allowed to add Core Asset as accepted currency. Core asset is accepted by design.
   **/
  | 'CoreAssetNotAllowed'
  /**
   * Fallback price cannot be zero.
   **/
  | 'ZeroPrice'
  /**
   * Fallback price was not found.
   **/
  | 'FallbackPriceNotFound'
  /**
   * Math overflow
   **/
  | 'Overflow'
  /**
   * It is not allowed to change payment currency of an EVM account.
   **/
  | 'EvmAccountNotAllowed'
  /**
   * EVM permit expired.
   **/
  | 'EvmPermitExpired'
  /**
   * EVM permit is invalid.
   **/
  | 'EvmPermitInvalid'
  /**
   * EVM permit call failed.
   **/
  | 'EvmPermitCallExecutionError'
  /**
   * EVM permit call failed.
   **/
  | 'EvmPermitRunnerError';

export type PalletTreasuryProposal = { proposer: AccountId32; value: bigint; beneficiary: AccountId32; bond: bigint };

export type PalletTreasurySpendStatus = {
  assetKind: [];
  amount: bigint;
  beneficiary: AccountId32;
  validFrom: number;
  expireAt: number;
  status: PalletTreasuryPaymentState;
};

export type PalletTreasuryPaymentState =
  | { type: 'Pending' }
  | { type: 'Attempted'; value: { id: [] } }
  | { type: 'Failed' };

export type FrameSupportPalletId = FixedBytes<8>;

/**
 * Error for the treasury pallet.
 **/
export type PalletTreasuryError =
  /**
   * No proposal, bounty or spend at that index.
   **/
  | 'InvalidIndex'
  /**
   * Too many approvals in the queue.
   **/
  | 'TooManyApprovals'
  /**
   * The spend origin is valid but the amount it is allowed to spend is lower than the
   * amount to be spent.
   **/
  | 'InsufficientPermission'
  /**
   * Proposal has not been approved.
   **/
  | 'ProposalNotApproved'
  /**
   * The balance of the asset kind is not convertible to the balance of the native asset.
   **/
  | 'FailedToConvertBalance'
  /**
   * The spend has expired and cannot be claimed.
   **/
  | 'SpendExpired'
  /**
   * The spend is not yet eligible for payout.
   **/
  | 'EarlyPayout'
  /**
   * The payment has already been attempted.
   **/
  | 'AlreadyAttempted'
  /**
   * There was some issue with the mechanism of payment.
   **/
  | 'PayoutError'
  /**
   * The payout was not yet attempted/claimed.
   **/
  | 'NotAttempted'
  /**
   * The payment has neither failed nor succeeded yet.
   **/
  | 'Inconclusive';

/**
 * The `Error` enum of this pallet.
 **/
export type PalletUtilityError =
  /**
   * Too many calls batched.
   **/
  'TooManyCalls';

export type PalletDemocracyReferendumInfo =
  | { type: 'Ongoing'; value: PalletDemocracyReferendumStatus }
  | { type: 'Finished'; value: { approved: boolean; end: number } };

export type PalletDemocracyReferendumStatus = {
  end: number;
  proposal: FrameSupportPreimagesBounded;
  threshold: PalletDemocracyVoteThreshold;
  delay: number;
  tally: PalletDemocracyTally;
};

export type PalletDemocracyTally = { ayes: bigint; nays: bigint; turnout: bigint };

export type PalletDemocracyVoteVoting =
  | {
      type: 'Direct';
      value: {
        votes: Array<[number, PalletDemocracyVoteAccountVote]>;
        delegations: PalletDemocracyDelegations;
        prior: PalletDemocracyVotePriorLock;
      };
    }
  | {
      type: 'Delegating';
      value: {
        balance: bigint;
        target: AccountId32;
        conviction: PalletDemocracyConviction;
        delegations: PalletDemocracyDelegations;
        prior: PalletDemocracyVotePriorLock;
      };
    };

export type PalletDemocracyDelegations = { votes: bigint; capital: bigint };

export type PalletDemocracyVotePriorLock = [number, bigint];

/**
 * The `Error` enum of this pallet.
 **/
export type PalletDemocracyError =
  /**
   * Value too low
   **/
  | 'ValueLow'
  /**
   * Proposal does not exist
   **/
  | 'ProposalMissing'
  /**
   * Cannot cancel the same proposal twice
   **/
  | 'AlreadyCanceled'
  /**
   * Proposal already made
   **/
  | 'DuplicateProposal'
  /**
   * Proposal still blacklisted
   **/
  | 'ProposalBlacklisted'
  /**
   * Next external proposal not simple majority
   **/
  | 'NotSimpleMajority'
  /**
   * Invalid hash
   **/
  | 'InvalidHash'
  /**
   * No external proposal
   **/
  | 'NoProposal'
  /**
   * Identity may not veto a proposal twice
   **/
  | 'AlreadyVetoed'
  /**
   * Vote given for invalid referendum
   **/
  | 'ReferendumInvalid'
  /**
   * No proposals waiting
   **/
  | 'NoneWaiting'
  /**
   * The given account did not vote on the referendum.
   **/
  | 'NotVoter'
  /**
   * The actor has no permission to conduct the action.
   **/
  | 'NoPermission'
  /**
   * The account is already delegating.
   **/
  | 'AlreadyDelegating'
  /**
   * Too high a balance was provided that the account cannot afford.
   **/
  | 'InsufficientFunds'
  /**
   * The account is not currently delegating.
   **/
  | 'NotDelegating'
  /**
   * The account currently has votes attached to it and the operation cannot succeed until
   * these are removed, either through `unvote` or `reap_vote`.
   **/
  | 'VotesExist'
  /**
   * The instant referendum origin is currently disallowed.
   **/
  | 'InstantNotAllowed'
  /**
   * Delegation to oneself makes no sense.
   **/
  | 'Nonsense'
  /**
   * Invalid upper bound.
   **/
  | 'WrongUpperBound'
  /**
   * Maximum number of votes reached.
   **/
  | 'MaxVotesReached'
  /**
   * Maximum number of items reached.
   **/
  | 'TooMany'
  /**
   * Voting period too low
   **/
  | 'VotingPeriodLow'
  /**
   * The preimage does not exist.
   **/
  | 'PreimageNotExist';

export type PalletCollectiveVotes = {
  index: number;
  threshold: number;
  ayes: Array<AccountId32>;
  nays: Array<AccountId32>;
  end: number;
};

/**
 * The `Error` enum of this pallet.
 **/
export type PalletCollectiveError =
  /**
   * Account is not a member
   **/
  | 'NotMember'
  /**
   * Duplicate proposals not allowed
   **/
  | 'DuplicateProposal'
  /**
   * Proposal must exist
   **/
  | 'ProposalMissing'
  /**
   * Mismatched index
   **/
  | 'WrongIndex'
  /**
   * Duplicate vote ignored
   **/
  | 'DuplicateVote'
  /**
   * Members are already initialized!
   **/
  | 'AlreadyInitialized'
  /**
   * The close call was made too early, before the end of the voting.
   **/
  | 'TooEarly'
  /**
   * There can only be a maximum of `MaxProposals` active proposals.
   **/
  | 'TooManyProposals'
  /**
   * The given weight bound for the proposal was too low.
   **/
  | 'WrongProposalWeight'
  /**
   * The given length bound for the proposal was too low.
   **/
  | 'WrongProposalLength'
  /**
   * Prime account is not a member
   **/
  | 'PrimeAccountNotMember';

/**
 * The `Error` enum of this pallet.
 **/
export type OrmlVestingModuleError =
  /**
   * Vesting period is zero
   **/
  | 'ZeroVestingPeriod'
  /**
   * Number of vests is zero
   **/
  | 'ZeroVestingPeriodCount'
  /**
   * Insufficient amount of balance to lock
   **/
  | 'InsufficientBalanceToLock'
  /**
   * This account have too many vesting schedules
   **/
  | 'TooManyVestingSchedules'
  /**
   * The vested transfer amount is too low
   **/
  | 'AmountLow'
  /**
   * Failed because the maximum vesting schedules was exceeded
   **/
  | 'MaxVestingSchedulesExceeded';

export type PalletProxyProxyDefinition = {
  delegate: AccountId32;
  proxyType: BasiliskRuntimeSystemProxyType;
  delay: number;
};

export type PalletProxyAnnouncement = { real: AccountId32; callHash: H256; height: number };

/**
 * The `Error` enum of this pallet.
 **/
export type PalletProxyError =
  /**
   * There are too many proxies registered or too many announcements pending.
   **/
  | 'TooMany'
  /**
   * Proxy registration not found.
   **/
  | 'NotFound'
  /**
   * Sender is not a proxy of the account to be proxied.
   **/
  | 'NotProxy'
  /**
   * A call which is incompatible with the proxy type's filter was attempted.
   **/
  | 'Unproxyable'
  /**
   * Account is already a proxy.
   **/
  | 'Duplicate'
  /**
   * Call may not be made by proxy because it may escalate its privileges.
   **/
  | 'NoPermission'
  /**
   * Announcement, if made at all, was made too recently.
   **/
  | 'Unannounced'
  /**
   * Cannot add self as proxy.
   **/
  | 'NoSelfProxy';

export type PalletCollatorSelectionCandidateInfo = { who: AccountId32; deposit: bigint };

/**
 * The `Error` enum of this pallet.
 **/
export type PalletCollatorSelectionError =
  /**
   * The pallet has too many candidates.
   **/
  | 'TooManyCandidates'
  /**
   * Leaving would result in too few candidates.
   **/
  | 'TooFewEligibleCollators'
  /**
   * Account is already a candidate.
   **/
  | 'AlreadyCandidate'
  /**
   * Account is not a candidate.
   **/
  | 'NotCandidate'
  /**
   * There are too many Invulnerables.
   **/
  | 'TooManyInvulnerables'
  /**
   * Account is already an Invulnerable.
   **/
  | 'AlreadyInvulnerable'
  /**
   * Account is not an Invulnerable.
   **/
  | 'NotInvulnerable'
  /**
   * Account has no associated validator ID.
   **/
  | 'NoAssociatedValidatorId'
  /**
   * Validator ID is not yet registered.
   **/
  | 'ValidatorNotRegistered'
  /**
   * Could not insert in the candidate list.
   **/
  | 'InsertToCandidateListFailed'
  /**
   * Could not remove from the candidate list.
   **/
  | 'RemoveFromCandidateListFailed'
  /**
   * New deposit amount would be below the minimum candidacy bond.
   **/
  | 'DepositTooLow'
  /**
   * Could not update the candidate list.
   **/
  | 'UpdateCandidateListFailed'
  /**
   * Deposit amount is too low to take the target's slot in the candidate list.
   **/
  | 'InsufficientBond'
  /**
   * The target account to be replaced in the candidate list is not a candidate.
   **/
  | 'TargetIsNotCandidate'
  /**
   * The updated deposit amount is equal to the amount already reserved.
   **/
  | 'IdenticalDeposit'
  /**
   * Cannot lower candidacy bond while occupying a future collator slot in the list.
   **/
  | 'InvalidUnreserve';

export type SpCoreCryptoKeyTypeId = FixedBytes<4>;

/**
 * Error for the session pallet.
 **/
export type PalletSessionError =
  /**
   * Invalid ownership proof.
   **/
  | 'InvalidProof'
  /**
   * No associated validator ID for account.
   **/
  | 'NoAssociatedValidatorId'
  /**
   * Registered duplicate key.
   **/
  | 'DuplicatedKey'
  /**
   * No keys are associated with this account.
   **/
  | 'NoKeys'
  /**
   * Key setting account is not live, so it's impossible to associate keys.
   **/
  | 'NoAccount';

export type SpConsensusSlotsSlot = bigint;

export type PalletPreimageOldRequestStatus =
  | { type: 'Unrequested'; value: { deposit: [AccountId32, bigint]; len: number } }
  | {
      type: 'Requested';
      value: { deposit?: [AccountId32, bigint] | undefined; count: number; len?: number | undefined };
    };

export type PalletPreimageRequestStatus =
  | { type: 'Unrequested'; value: { ticket: [AccountId32, FrameSupportTokensFungibleHoldConsideration]; len: number } }
  | {
      type: 'Requested';
      value: {
        maybeTicket?: [AccountId32, FrameSupportTokensFungibleHoldConsideration] | undefined;
        count: number;
        maybeLen?: number | undefined;
      };
    };

export type FrameSupportTokensFungibleHoldConsideration = bigint;

/**
 * The `Error` enum of this pallet.
 **/
export type PalletPreimageError =
  /**
   * Preimage is too large to store on-chain.
   **/
  | 'TooBig'
  /**
   * Preimage has already been noted on-chain.
   **/
  | 'AlreadyNoted'
  /**
   * The user is not authorized to perform this action.
   **/
  | 'NotAuthorized'
  /**
   * The preimage cannot be removed since it has not yet been noted.
   **/
  | 'NotNoted'
  /**
   * A preimage may not be removed when there are outstanding requests.
   **/
  | 'Requested'
  /**
   * The preimage request cannot be removed since no outstanding requests exist.
   **/
  | 'NotRequested'
  /**
   * More than `MAX_HASH_UPGRADE_BULK_COUNT` hashes were requested to be upgraded at once.
   **/
  | 'TooMany'
  /**
   * Too few hashes were requested to be upgraded (i.e. zero).
   **/
  | 'TooFew';

export type PalletUniquesCollectionDetails = {
  owner: AccountId32;
  issuer: AccountId32;
  admin: AccountId32;
  freezer: AccountId32;
  totalDeposit: bigint;
  freeHolding: boolean;
  items: number;
  itemMetadatas: number;
  attributes: number;
  isFrozen: boolean;
};

export type PalletUniquesItemDetails = {
  owner: AccountId32;
  approved?: AccountId32 | undefined;
  isFrozen: boolean;
  deposit: bigint;
};

export type PalletUniquesCollectionMetadata = { deposit: bigint; data: Bytes; isFrozen: boolean };

export type PalletUniquesItemMetadata = { deposit: bigint; data: Bytes; isFrozen: boolean };

/**
 * The `Error` enum of this pallet.
 **/
export type PalletUniquesError =
  /**
   * The signing account has no permission to do the operation.
   **/
  | 'NoPermission'
  /**
   * The given item ID is unknown.
   **/
  | 'UnknownCollection'
  /**
   * The item ID has already been used for an item.
   **/
  | 'AlreadyExists'
  /**
   * The owner turned out to be different to what was expected.
   **/
  | 'WrongOwner'
  /**
   * Invalid witness data given.
   **/
  | 'BadWitness'
  /**
   * The item ID is already taken.
   **/
  | 'InUse'
  /**
   * The item or collection is frozen.
   **/
  | 'Frozen'
  /**
   * The delegate turned out to be different to what was expected.
   **/
  | 'WrongDelegate'
  /**
   * There is no delegate approved.
   **/
  | 'NoDelegate'
  /**
   * No approval exists that would allow the transfer.
   **/
  | 'Unapproved'
  /**
   * The named owner has not signed ownership of the collection is acceptable.
   **/
  | 'Unaccepted'
  /**
   * The item is locked.
   **/
  | 'Locked'
  /**
   * All items have been minted.
   **/
  | 'MaxSupplyReached'
  /**
   * The max supply has already been set.
   **/
  | 'MaxSupplyAlreadySet'
  /**
   * The provided max supply is less to the amount of items a collection already has.
   **/
  | 'MaxSupplyTooSmall'
  /**
   * The given item ID is unknown.
   **/
  | 'UnknownItem'
  /**
   * Item is not for sale.
   **/
  | 'NotForSale'
  /**
   * The provided bid is too low.
   **/
  | 'BidTooLow';

export type PalletIdentityRegistration = {
  judgements: Array<[number, PalletIdentityJudgement]>;
  deposit: bigint;
  info: PalletIdentityLegacyIdentityInfo;
};

export type PalletIdentityRegistrarInfo = { account: AccountId32; fee: bigint; fields: bigint };

export type PalletIdentityAuthorityProperties = { suffix: Bytes; allocation: number };

/**
 * The `Error` enum of this pallet.
 **/
export type PalletIdentityError =
  /**
   * Too many subs-accounts.
   **/
  | 'TooManySubAccounts'
  /**
   * Account isn't found.
   **/
  | 'NotFound'
  /**
   * Account isn't named.
   **/
  | 'NotNamed'
  /**
   * Empty index.
   **/
  | 'EmptyIndex'
  /**
   * Fee is changed.
   **/
  | 'FeeChanged'
  /**
   * No identity found.
   **/
  | 'NoIdentity'
  /**
   * Sticky judgement.
   **/
  | 'StickyJudgement'
  /**
   * Judgement given.
   **/
  | 'JudgementGiven'
  /**
   * Invalid judgement.
   **/
  | 'InvalidJudgement'
  /**
   * The index is invalid.
   **/
  | 'InvalidIndex'
  /**
   * The target is invalid.
   **/
  | 'InvalidTarget'
  /**
   * Maximum amount of registrars reached. Cannot add any more.
   **/
  | 'TooManyRegistrars'
  /**
   * Account ID is already named.
   **/
  | 'AlreadyClaimed'
  /**
   * Sender is not a sub-account.
   **/
  | 'NotSub'
  /**
   * Sub-account isn't owned by sender.
   **/
  | 'NotOwned'
  /**
   * The provided judgement was for a different identity.
   **/
  | 'JudgementForDifferentIdentity'
  /**
   * Error that occurs when there is an issue paying for judgement.
   **/
  | 'JudgementPaymentFailed'
  /**
   * The provided suffix is too long.
   **/
  | 'InvalidSuffix'
  /**
   * The sender does not have permission to issue a username.
   **/
  | 'NotUsernameAuthority'
  /**
   * The authority cannot allocate any more usernames.
   **/
  | 'NoAllocation'
  /**
   * The signature on a username was not valid.
   **/
  | 'InvalidSignature'
  /**
   * Setting this username requires a signature, but none was provided.
   **/
  | 'RequiresSignature'
  /**
   * The username does not meet the requirements.
   **/
  | 'InvalidUsername'
  /**
   * The username is already taken.
   **/
  | 'UsernameTaken'
  /**
   * The requested username does not exist.
   **/
  | 'NoUsername'
  /**
   * The username cannot be forcefully removed because it can still be accepted.
   **/
  | 'NotExpired';

export type PalletMultisigMultisig = {
  when: PalletMultisigTimepoint;
  deposit: bigint;
  depositor: AccountId32;
  approvals: Array<AccountId32>;
};

/**
 * The `Error` enum of this pallet.
 **/
export type PalletMultisigError =
  /**
   * Threshold must be 2 or greater.
   **/
  | 'MinimumThreshold'
  /**
   * Call is already approved by this signatory.
   **/
  | 'AlreadyApproved'
  /**
   * Call doesn't need any (more) approvals.
   **/
  | 'NoApprovalsNeeded'
  /**
   * There are too few signatories in the list.
   **/
  | 'TooFewSignatories'
  /**
   * There are too many signatories in the list.
   **/
  | 'TooManySignatories'
  /**
   * The signatories were provided out of order; they should be ordered.
   **/
  | 'SignatoriesOutOfOrder'
  /**
   * The sender was contained in the other signatories; it shouldn't be.
   **/
  | 'SenderInSignatories'
  /**
   * Multisig operation not found when attempting to cancel.
   **/
  | 'NotFound'
  /**
   * Only the account that originally created the multisig is able to cancel it.
   **/
  | 'NotOwner'
  /**
   * No timepoint was given, yet the multisig operation is already underway.
   **/
  | 'NoTimepoint'
  /**
   * A different timepoint was given to the multisig operation that is underway.
   **/
  | 'WrongTimepoint'
  /**
   * A timepoint was given, yet no multisig operation is underway.
   **/
  | 'UnexpectedTimepoint'
  /**
   * The maximum weight information provided was too low.
   **/
  | 'MaxWeightTooLow'
  /**
   * The data to be stored is already stored.
   **/
  | 'AlreadyStored';

export type PalletConvictionVotingVoteVoting =
  | { type: 'Casting'; value: PalletConvictionVotingVoteCasting }
  | { type: 'Delegating'; value: PalletConvictionVotingVoteDelegating };

export type PalletConvictionVotingVoteCasting = {
  votes: Array<[number, PalletConvictionVotingVoteAccountVote]>;
  delegations: PalletConvictionVotingDelegations;
  prior: PalletConvictionVotingVotePriorLock;
};

export type PalletConvictionVotingDelegations = { votes: bigint; capital: bigint };

export type PalletConvictionVotingVotePriorLock = [number, bigint];

export type PalletConvictionVotingVoteDelegating = {
  balance: bigint;
  target: AccountId32;
  conviction: PalletConvictionVotingConviction;
  delegations: PalletConvictionVotingDelegations;
  prior: PalletConvictionVotingVotePriorLock;
};

/**
 * The `Error` enum of this pallet.
 **/
export type PalletConvictionVotingError =
  /**
   * Poll is not ongoing.
   **/
  | 'NotOngoing'
  /**
   * The given account did not vote on the poll.
   **/
  | 'NotVoter'
  /**
   * The actor has no permission to conduct the action.
   **/
  | 'NoPermission'
  /**
   * The actor has no permission to conduct the action right now but will do in the future.
   **/
  | 'NoPermissionYet'
  /**
   * The account is already delegating.
   **/
  | 'AlreadyDelegating'
  /**
   * The account currently has votes attached to it and the operation cannot succeed until
   * these are removed through `remove_vote`.
   **/
  | 'AlreadyVoting'
  /**
   * Too high a balance was provided that the account cannot afford.
   **/
  | 'InsufficientFunds'
  /**
   * The account is not currently delegating.
   **/
  | 'NotDelegating'
  /**
   * Delegation to oneself makes no sense.
   **/
  | 'Nonsense'
  /**
   * Maximum number of votes reached.
   **/
  | 'MaxVotesReached'
  /**
   * The class must be supplied since it is not easily determinable from the state.
   **/
  | 'ClassNeeded'
  /**
   * The class ID supplied is invalid.
   **/
  | 'BadClass';

export type PalletReferendaReferendumInfo =
  | { type: 'Ongoing'; value: PalletReferendaReferendumStatus }
  | { type: 'Approved'; value: [number, PalletReferendaDeposit | undefined, PalletReferendaDeposit | undefined] }
  | { type: 'Rejected'; value: [number, PalletReferendaDeposit | undefined, PalletReferendaDeposit | undefined] }
  | { type: 'Cancelled'; value: [number, PalletReferendaDeposit | undefined, PalletReferendaDeposit | undefined] }
  | { type: 'TimedOut'; value: [number, PalletReferendaDeposit | undefined, PalletReferendaDeposit | undefined] }
  | { type: 'Killed'; value: number };

export type PalletReferendaReferendumStatus = {
  track: number;
  origin: BasiliskRuntimeOriginCaller;
  proposal: FrameSupportPreimagesBounded;
  enactment: FrameSupportScheduleDispatchTime;
  submitted: number;
  submissionDeposit: PalletReferendaDeposit;
  decisionDeposit?: PalletReferendaDeposit | undefined;
  deciding?: PalletReferendaDecidingStatus | undefined;
  tally: PalletConvictionVotingTally;
  inQueue: boolean;
  alarm?: [number, [number, number]] | undefined;
};

export type PalletReferendaDeposit = { who: AccountId32; amount: bigint };

export type PalletReferendaDecidingStatus = { since: number; confirming?: number | undefined };

export type PalletReferendaTrackInfo = {
  name: string;
  maxDeciding: number;
  decisionDeposit: bigint;
  preparePeriod: number;
  decisionPeriod: number;
  confirmPeriod: number;
  minEnactmentPeriod: number;
  minApproval: PalletReferendaCurve;
  minSupport: PalletReferendaCurve;
};

export type PalletReferendaCurve =
  | { type: 'LinearDecreasing'; value: { length: Perbill; floor: Perbill; ceil: Perbill } }
  | { type: 'SteppedDecreasing'; value: { begin: Perbill; end: Perbill; step: Perbill; period: Perbill } }
  | { type: 'Reciprocal'; value: { factor: FixedI64; xOffset: FixedI64; yOffset: FixedI64 } };

/**
 * The `Error` enum of this pallet.
 **/
export type PalletReferendaError =
  /**
   * Referendum is not ongoing.
   **/
  | 'NotOngoing'
  /**
   * Referendum's decision deposit is already paid.
   **/
  | 'HasDeposit'
  /**
   * The track identifier given was invalid.
   **/
  | 'BadTrack'
  /**
   * There are already a full complement of referenda in progress for this track.
   **/
  | 'Full'
  /**
   * The queue of the track is empty.
   **/
  | 'QueueEmpty'
  /**
   * The referendum index provided is invalid in this context.
   **/
  | 'BadReferendum'
  /**
   * There was nothing to do in the advancement.
   **/
  | 'NothingToDo'
  /**
   * No track exists for the proposal origin.
   **/
  | 'NoTrack'
  /**
   * Any deposit cannot be refunded until after the decision is over.
   **/
  | 'Unfinished'
  /**
   * The deposit refunder is not the depositor.
   **/
  | 'NoPermission'
  /**
   * The deposit cannot be refunded since none was made.
   **/
  | 'NoDeposit'
  /**
   * The referendum status is invalid for this operation.
   **/
  | 'BadStatus'
  /**
   * The preimage does not exist.
   **/
  | 'PreimageNotExist'
  /**
   * The preimage is stored with a different length than the one provided.
   **/
  | 'PreimageStoredWithDifferentLength';

/**
 * The `Error` enum of this pallet.
 **/
export type PalletWhitelistError =
  /**
   * The preimage of the call hash could not be loaded.
   **/
  | 'UnavailablePreImage'
  /**
   * The call could not be decoded.
   **/
  | 'UndecodableCall'
  /**
   * The weight of the decoded call was higher than the witness.
   **/
  | 'InvalidCallWeightWitness'
  /**
   * The call was not whitelisted.
   **/
  | 'CallIsNotWhitelisted'
  /**
   * The call was already whitelisted; No-Op.
   **/
  | 'CallAlreadyWhitelisted';

/**
 * The `Error` enum of this pallet.
 **/
export type PalletRelaychainInfoError = null;

export type PalletSchedulerScheduled = {
  maybeId?: FixedBytes<32> | undefined;
  priority: number;
  call: FrameSupportPreimagesBounded;
  maybePeriodic?: [number, number] | undefined;
  origin: BasiliskRuntimeOriginCaller;
};

export type PalletSchedulerRetryConfig = { totalRetries: number; remaining: number; period: number };

/**
 * The `Error` enum of this pallet.
 **/
export type PalletSchedulerError =
  /**
   * Failed to schedule a call
   **/
  | 'FailedToSchedule'
  /**
   * Cannot find the scheduled call.
   **/
  | 'NotFound'
  /**
   * Given target block number is in the past.
   **/
  | 'TargetBlockNumberInPast'
  /**
   * Reschedule failed because it does not change scheduled time.
   **/
  | 'RescheduleNoChange'
  /**
   * Attempt to use a non-named function on a named task.
   **/
  | 'Named';

export type CumulusPalletParachainSystemUnincludedSegmentAncestor = {
  usedBandwidth: CumulusPalletParachainSystemUnincludedSegmentUsedBandwidth;
  paraHeadHash?: H256 | undefined;
  consumedGoAheadSignal?: PolkadotPrimitivesV8UpgradeGoAhead | undefined;
};

export type CumulusPalletParachainSystemUnincludedSegmentUsedBandwidth = {
  umpMsgCount: number;
  umpTotalBytes: number;
  hrmpOutgoing: Array<
    [PolkadotParachainPrimitivesPrimitivesId, CumulusPalletParachainSystemUnincludedSegmentHrmpChannelUpdate]
  >;
};

export type CumulusPalletParachainSystemUnincludedSegmentHrmpChannelUpdate = { msgCount: number; totalBytes: number };

export type PolkadotPrimitivesV8UpgradeGoAhead = 'Abort' | 'GoAhead';

export type CumulusPalletParachainSystemUnincludedSegmentSegmentTracker = {
  usedBandwidth: CumulusPalletParachainSystemUnincludedSegmentUsedBandwidth;
  hrmpWatermark?: number | undefined;
  consumedGoAheadSignal?: PolkadotPrimitivesV8UpgradeGoAhead | undefined;
};

export type PolkadotPrimitivesV8UpgradeRestriction = 'Present';

export type CumulusPalletParachainSystemRelayStateSnapshotMessagingStateSnapshot = {
  dmqMqcHead: H256;
  relayDispatchQueueRemainingCapacity: CumulusPalletParachainSystemRelayStateSnapshotRelayDispatchQueueRemainingCapacity;
  ingressChannels: Array<[PolkadotParachainPrimitivesPrimitivesId, PolkadotPrimitivesV8AbridgedHrmpChannel]>;
  egressChannels: Array<[PolkadotParachainPrimitivesPrimitivesId, PolkadotPrimitivesV8AbridgedHrmpChannel]>;
};

export type CumulusPalletParachainSystemRelayStateSnapshotRelayDispatchQueueRemainingCapacity = {
  remainingCount: number;
  remainingSize: number;
};

export type PolkadotPrimitivesV8AbridgedHrmpChannel = {
  maxCapacity: number;
  maxTotalSize: number;
  maxMessageSize: number;
  msgCount: number;
  totalSize: number;
  mqcHead?: H256 | undefined;
};

export type PolkadotPrimitivesV8AbridgedHostConfiguration = {
  maxCodeSize: number;
  maxHeadDataSize: number;
  maxUpwardQueueCount: number;
  maxUpwardQueueSize: number;
  maxUpwardMessageSize: number;
  maxUpwardMessageNumPerCandidate: number;
  hrmpMaxMessageNumPerCandidate: number;
  validationUpgradeCooldown: number;
  validationUpgradeDelay: number;
  asyncBackingParams: PolkadotPrimitivesV8AsyncBackingAsyncBackingParams;
};

export type PolkadotPrimitivesV8AsyncBackingAsyncBackingParams = {
  maxCandidateDepth: number;
  allowedAncestryLen: number;
};

export type CumulusPrimitivesParachainInherentMessageQueueChain = H256;

export type PolkadotCorePrimitivesOutboundHrmpMessage = {
  recipient: PolkadotParachainPrimitivesPrimitivesId;
  data: Bytes;
};

/**
 * The `Error` enum of this pallet.
 **/
export type CumulusPalletParachainSystemError =
  /**
   * Attempt to upgrade validation function while existing upgrade pending.
   **/
  | 'OverlappingUpgrades'
  /**
   * Polkadot currently prohibits this parachain from upgrading its validation function.
   **/
  | 'ProhibitedByPolkadot'
  /**
   * The supplied validation function has compiled into a blob larger than Polkadot is
   * willing to run.
   **/
  | 'TooBig'
  /**
   * The inherent which supplies the validation data did not run this block.
   **/
  | 'ValidationDataNotAvailable'
  /**
   * The inherent which supplies the host configuration did not run this block.
   **/
  | 'HostConfigurationNotAvailable'
  /**
   * No validation function upgrade is currently scheduled.
   **/
  | 'NotScheduled'
  /**
   * No code upgrade has been authorized.
   **/
  | 'NothingAuthorized'
  /**
   * The given code upgrade has not been authorized.
   **/
  | 'Unauthorized';

export type PalletXcmQueryStatus =
  | {
      type: 'Pending';
      value: {
        responder: XcmVersionedLocation;
        maybeMatchQuerier?: XcmVersionedLocation | undefined;
        maybeNotify?: [number, number] | undefined;
        timeout: number;
      };
    }
  | { type: 'VersionNotifier'; value: { origin: XcmVersionedLocation; isActive: boolean } }
  | { type: 'Ready'; value: { response: XcmVersionedResponse; at: number } };

export type XcmVersionedResponse =
  | { type: 'V2'; value: XcmV2Response }
  | { type: 'V3'; value: XcmV3Response }
  | { type: 'V4'; value: StagingXcmV4Response };

export type PalletXcmVersionMigrationStage =
  | { type: 'MigrateSupportedVersion' }
  | { type: 'MigrateVersionNotifiers' }
  | { type: 'NotifyCurrentTargets'; value?: Bytes | undefined }
  | { type: 'MigrateAndNotifyOldTargets' };

export type PalletXcmRemoteLockedFungibleRecord = {
  amount: bigint;
  owner: XcmVersionedLocation;
  locker: XcmVersionedLocation;
  consumers: Array<[[], bigint]>;
};

/**
 * The `Error` enum of this pallet.
 **/
export type PalletXcmError =
  /**
   * The desired destination was unreachable, generally because there is a no way of routing
   * to it.
   **/
  | 'Unreachable'
  /**
   * There was some other issue (i.e. not to do with routing) in sending the message.
   * Perhaps a lack of space for buffering the message.
   **/
  | 'SendFailure'
  /**
   * The message execution fails the filter.
   **/
  | 'Filtered'
  /**
   * The message's weight could not be determined.
   **/
  | 'UnweighableMessage'
  /**
   * The destination `Location` provided cannot be inverted.
   **/
  | 'DestinationNotInvertible'
  /**
   * The assets to be sent are empty.
   **/
  | 'Empty'
  /**
   * Could not re-anchor the assets to declare the fees for the destination chain.
   **/
  | 'CannotReanchor'
  /**
   * Too many assets have been attempted for transfer.
   **/
  | 'TooManyAssets'
  /**
   * Origin is invalid for sending.
   **/
  | 'InvalidOrigin'
  /**
   * The version of the `Versioned` value used is not able to be interpreted.
   **/
  | 'BadVersion'
  /**
   * The given location could not be used (e.g. because it cannot be expressed in the
   * desired version of XCM).
   **/
  | 'BadLocation'
  /**
   * The referenced subscription could not be found.
   **/
  | 'NoSubscription'
  /**
   * The location is invalid since it already has a subscription from us.
   **/
  | 'AlreadySubscribed'
  /**
   * Could not check-out the assets for teleportation to the destination chain.
   **/
  | 'CannotCheckOutTeleport'
  /**
   * The owner does not own (all) of the asset that they wish to do the operation on.
   **/
  | 'LowBalance'
  /**
   * The asset owner has too many locks on the asset.
   **/
  | 'TooManyLocks'
  /**
   * The given account is not an identifiable sovereign account for any location.
   **/
  | 'AccountNotSovereign'
  /**
   * The operation required fees to be paid which the initiator could not meet.
   **/
  | 'FeesNotMet'
  /**
   * A remote lock with the corresponding data could not be found.
   **/
  | 'LockNotFound'
  /**
   * The unlock operation cannot succeed because there are still consumers of the lock.
   **/
  | 'InUse'
  /**
   * Invalid asset, reserve chain could not be determined for it.
   **/
  | 'InvalidAssetUnknownReserve'
  /**
   * Invalid asset, do not support remote asset reserves with different fees reserves.
   **/
  | 'InvalidAssetUnsupportedReserve'
  /**
   * Too many assets with different reserve locations have been attempted for transfer.
   **/
  | 'TooManyReserves'
  /**
   * Local XCM execution incomplete.
   **/
  | 'LocalExecutionIncomplete';

export type CumulusPalletXcmpQueueOutboundChannelDetails = {
  recipient: PolkadotParachainPrimitivesPrimitivesId;
  state: CumulusPalletXcmpQueueOutboundState;
  signalsExist: boolean;
  firstIndex: number;
  lastIndex: number;
};

export type CumulusPalletXcmpQueueOutboundState = 'Ok' | 'Suspended';

export type CumulusPalletXcmpQueueQueueConfigData = {
  suspendThreshold: number;
  dropThreshold: number;
  resumeThreshold: number;
};

/**
 * The `Error` enum of this pallet.
 **/
export type CumulusPalletXcmpQueueError =
  /**
   * Setting the queue config failed since one of its values was invalid.
   **/
  | 'BadQueueConfig'
  /**
   * The execution is already suspended.
   **/
  | 'AlreadySuspended'
  /**
   * The execution is already resumed.
   **/
  | 'AlreadyResumed'
  /**
   * There are too many active outbound channels.
   **/
  | 'TooManyActiveOutboundChannels'
  /**
   * The message is too big.
   **/
  | 'TooBig';

export type PalletMessageQueueBookState = {
  begin: number;
  end: number;
  count: number;
  readyNeighbours?: PalletMessageQueueNeighbours | undefined;
  messageCount: bigint;
  size: bigint;
};

export type PalletMessageQueueNeighbours = {
  prev: CumulusPrimitivesCoreAggregateMessageOrigin;
  next: CumulusPrimitivesCoreAggregateMessageOrigin;
};

export type PalletMessageQueuePage = {
  remaining: number;
  remainingSize: number;
  firstIndex: number;
  first: number;
  last: number;
  heap: Bytes;
};

/**
 * The `Error` enum of this pallet.
 **/
export type PalletMessageQueueError =
  /**
   * Page is not reapable because it has items remaining to be processed and is not old
   * enough.
   **/
  | 'NotReapable'
  /**
   * Page to be reaped does not exist.
   **/
  | 'NoPage'
  /**
   * The referenced message could not be found.
   **/
  | 'NoMessage'
  /**
   * The message was already processed and cannot be processed again.
   **/
  | 'AlreadyProcessed'
  /**
   * The message is queued for future execution.
   **/
  | 'Queued'
  /**
   * There is temporarily not enough weight to continue servicing messages.
   **/
  | 'InsufficientWeight'
  /**
   * This message is temporarily unprocessable.
   *
   * Such errors are expected, but not guaranteed, to resolve themselves eventually through
   * retrying.
   **/
  | 'TemporarilyUnprocessable'
  /**
   * The queue is paused and no message can be executed from it.
   *
   * This can change at any time and may resolve in the future by re-trying.
   **/
  | 'QueuePaused'
  /**
   * Another call is in progress and needs to finish before this call can happen.
   **/
  | 'RecursiveDisallowed';

export type PalletAssetRegistryAssetDetails = {
  name: Bytes;
  assetType: PalletAssetRegistryAssetType;
  existentialDeposit: bigint;
  xcmRateLimit?: bigint | undefined;
};

export type PalletAssetRegistryAssetMetadata = { symbol: Bytes; decimals: number };

/**
 * The `Error` enum of this pallet.
 **/
export type PalletAssetRegistryError =
  /**
   * Asset ID is not available. This only happens when it reaches the MAX value of given id type.
   **/
  | 'NoIdAvailable'
  /**
   * Invalid asset name or symbol.
   **/
  | 'AssetNotFound'
  /**
   * Invalid asset name or symbol.
   **/
  | 'TooLong'
  /**
   * Asset ID is not registered in the asset-registry.
   **/
  | 'AssetNotRegistered'
  /**
   * Asset is already registered.
   **/
  | 'AssetAlreadyRegistered'
  /**
   * Incorrect number of assets provided to create shared asset.
   **/
  | 'InvalidSharedAssetLen'
  /**
   * Cannot update asset location
   **/
  | 'CannotUpdateLocation'
  /**
   * Selected asset id is out of reserved range.
   **/
  | 'NotInReservedRange'
  /**
   * Location already registered with different asset
   **/
  | 'LocationAlreadyRegistered';

/**
 * The `Error` enum of this pallet.
 **/
export type PalletXykError =
  /**
   * It is not allowed to create a pool between same assets.
   **/
  | 'CannotCreatePoolWithSameAssets'
  /**
   * Liquidity has not reached the required minimum.
   **/
  | 'InsufficientLiquidity'
  /**
   * Amount is less than min trading limit.
   **/
  | 'InsufficientTradingAmount'
  /**
   * Liquidity is zero.
   **/
  | 'ZeroLiquidity'
  /**
   * It is not allowed to create a pool with zero initial price.
   * Not used, kept for backward compatibility
   **/
  | 'ZeroInitialPrice'
  /**
   * Overflow
   * Not used, kept for backward compatibility
   **/
  | 'CreatePoolAssetAmountInvalid'
  /**
   * Overflow
   **/
  | 'InvalidMintedLiquidity'
  /**
   * Overflow
   **/
  | 'InvalidLiquidityAmount'
  /**
   * Asset amount has exceeded given limit.
   **/
  | 'AssetAmountExceededLimit'
  /**
   * Asset amount has not reached given limit.
   **/
  | 'AssetAmountNotReachedLimit'
  /**
   * Asset balance is not sufficient.
   **/
  | 'InsufficientAssetBalance'
  /**
   * Not enough asset liquidity in the pool.
   **/
  | 'InsufficientPoolAssetBalance'
  /**
   * Not enough core asset liquidity in the pool.
   **/
  | 'InsufficientNativeCurrencyBalance'
  /**
   * Liquidity pool for given assets does not exist.
   **/
  | 'TokenPoolNotFound'
  /**
   * Liquidity pool for given assets already exists.
   **/
  | 'TokenPoolAlreadyExists'
  /**
   * Overflow
   **/
  | 'AddAssetAmountInvalid'
  /**
   * Overflow
   **/
  | 'RemoveAssetAmountInvalid'
  /**
   * Overflow
   **/
  | 'SellAssetAmountInvalid'
  /**
   * Overflow
   **/
  | 'BuyAssetAmountInvalid'
  /**
   * Overflow
   **/
  | 'FeeAmountInvalid'
  /**
   * Overflow
   **/
  | 'CannotApplyDiscount'
  /**
   * Max fraction of pool to buy in single transaction has been exceeded.
   **/
  | 'MaxOutRatioExceeded'
  /**
   * Max fraction of pool to sell in single transaction has been exceeded.
   **/
  | 'MaxInRatioExceeded'
  /**
   * Overflow
   **/
  | 'Overflow'
  /**
   * Pool cannot be created due to outside factors.
   **/
  | 'CannotCreatePool';

/**
 * The `Error` enum of this pallet.
 **/
export type PalletDusterError =
  /**
   * Account is excluded from dusting.
   **/
  | 'AccountBlacklisted'
  /**
   * Account is not present in the non-dustable list.
   **/
  | 'AccountNotBlacklisted'
  /**
   * The balance is zero.
   **/
  | 'ZeroBalance'
  /**
   * The balance is sufficient to keep account open.
   **/
  | 'BalanceSufficient'
  /**
   * Dust account is not set.
   **/
  | 'DustAccountNotSet'
  /**
   * Reserve account is not set.
   **/
  | 'ReserveAccountNotSet';

/**
 * The `Error` enum of this pallet.
 **/
export type PalletLbpError =
  /**
   * Pool assets can not be the same
   **/
  | 'CannotCreatePoolWithSameAssets'
  /**
   * Account is not a pool owner
   **/
  | 'NotOwner'
  /**
   * Sale already started
   **/
  | 'SaleStarted'
  /**
   * Sale is still in progress
   **/
  | 'SaleNotEnded'
  /**
   * Sale is not running
   **/
  | 'SaleIsNotRunning'
  /**
   * Sale duration is too long
   **/
  | 'MaxSaleDurationExceeded'
  /**
   * Liquidity being added should not be zero
   **/
  | 'CannotAddZeroLiquidity'
  /**
   * Asset balance too low
   **/
  | 'InsufficientAssetBalance'
  /**
   * Pool does not exist
   **/
  | 'PoolNotFound'
  /**
   * Pool has been already created
   **/
  | 'PoolAlreadyExists'
  /**
   * Invalid block range
   **/
  | 'InvalidBlockRange'
  /**
   * Calculation error
   **/
  | 'WeightCalculationError'
  /**
   * Weight set is out of range
   **/
  | 'InvalidWeight'
  /**
   * Can not perform a trade with zero amount
   **/
  | 'ZeroAmount'
  /**
   * Trade amount is too high
   **/
  | 'MaxInRatioExceeded'
  /**
   * Trade amount is too high
   **/
  | 'MaxOutRatioExceeded'
  /**
   * Invalid fee amount
   **/
  | 'FeeAmountInvalid'
  /**
   * Trading limit reached
   **/
  | 'TradingLimitReached'
  /**
   * An unexpected integer overflow occurred
   **/
  | 'Overflow'
  /**
   * Nothing to update
   **/
  | 'NothingToUpdate'
  /**
   * Liquidity has not reached the required minimum.
   **/
  | 'InsufficientLiquidity'
  /**
   * Amount is less than minimum trading limit.
   **/
  | 'InsufficientTradingAmount'
  /**
   * Not more than one fee collector per asset id
   **/
  | 'FeeCollectorWithAssetAlreadyUsed';

export type PalletNftCollectionInfo = { collectionType: PalletNftCollectionType; metadata: Bytes };

export type PalletNftItemInfo = { metadata: Bytes };

/**
 * The `Error` enum of this pallet.
 **/
export type PalletNftError =
  /**
   * Count of items overflown
   **/
  | 'NoAvailableItemId'
  /**
   * Count of collections overflown
   **/
  | 'NoAvailableCollectionId'
  /**
   * Collection still contains minted tokens
   **/
  | 'TokenCollectionNotEmpty'
  /**
   * Collection does not exist
   **/
  | 'CollectionUnknown'
  /**
   * Item does not exist
   **/
  | 'ItemUnknown'
  /**
   * Operation not permitted
   **/
  | 'NotPermitted'
  /**
   * ID reserved for runtime
   **/
  | 'IdReserved';

export type PalletMarketplaceOffer = { maker: AccountId32; amount: bigint; expires: number };

export type PalletMarketplaceRoyalty = { author: AccountId32; royalty: number };

/**
 * The `Error` enum of this pallet.
 **/
export type PalletMarketplaceError =
  /**
   * Account is not the owner of the token
   **/
  | 'NotTheTokenOwner'
  /**
   * Cannot buy a token from yourself
   **/
  | 'BuyFromSelf'
  /**
   * Token is currently not for sale
   **/
  | 'NotForSale'
  /**
   * Collection or item does not exist
   **/
  | 'CollectionOrItemUnknown'
  /**
   * Offer is lower than the minimum threshold
   **/
  | 'OfferTooLow'
  /**
   * No offer for this token found from the user
   **/
  | 'UnknownOffer'
  /**
   * Offer is no longer valid
   **/
  | 'OfferExpired'
  /**
   * User already made an offer for this token
   **/
  | 'AlreadyOffered'
  /**
   * User has to be offer maker or token owner to withdraw an offer
   **/
  | 'WithdrawNotAuthorized'
  /**
   * User has to be the token owner to accept an offer
   **/
  | 'AcceptNotAuthorized'
  /**
   * Royalty can be set only once
   **/
  | 'RoyaltyAlreadySet'
  /**
   * Royalty not in 0-9_999 range
   **/
  | 'NotInRange';

/**
 * The `Error` enum of this pallet.
 **/
export type PalletTransactionPauseError =
  /**
   * can not pause
   **/
  | 'CannotPause'
  /**
   * invalid character encoding
   **/
  | 'InvalidCharacter'
  /**
   * pallet name or function name is too long
   **/
  | 'NameTooLong';

export type PalletRouteExecutorSkipEd = 'Lock' | 'LockAndUnlock' | 'Unlock';

export type HydradxTraitsOracleOraclePeriod = 'LastBlock' | 'Short' | 'TenMinutes' | 'Hour' | 'Day' | 'Week';

/**
 * The `Error` enum of this pallet.
 **/
export type PalletRouteExecutorError =
  /**
   * The trading limit has been reached
   **/
  | 'TradingLimitReached'
  /**
   * The the max number of trades limit is reached
   **/
  | 'MaxTradesExceeded'
  /**
   * The AMM pool is not supported for executing trades
   **/
  | 'PoolNotSupported'
  /**
   * The user has not enough balance to execute the trade
   **/
  | 'InsufficientBalance'
  /**
   * The calculation of route trade amounts failed in the underlying AMM
   **/
  | 'RouteCalculationFailed'
  /**
   * The route is invalid
   **/
  | 'InvalidRoute'
  /**
   * The route update was not successful
   **/
  | 'RouteUpdateIsNotSuccessful'
  /**
   * Route contains assets that has no oracle data
   **/
  | 'RouteHasNoOracle'
  /**
   * The route execution failed in the underlying AMM
   **/
  | 'InvalidRouteExecution'
  /**
   * Trading same assets is not allowed.
   **/
  | 'NotAllowed';

/**
 * The `Error` enum of this pallet.
 **/
export type PalletXykLiquidityMiningError =
  /**
   * Nft pallet didn't return an owner.
   **/
  | 'CantFindDepositOwner'
  /**
   * Account balance of XYK pool shares is not sufficient.
   **/
  | 'InsufficientXykSharesBalance'
  /**
   * XYK pool does not exist
   **/
  | 'XykPoolDoesntExist'
  /**
   * Account is not deposit owner.
   **/
  | 'NotDepositOwner'
  /**
   * XYK did not return assets for given pool id
   **/
  | 'CantGetXykAssets'
  /**
   * Deposit data not found
   **/
  | 'DepositDataNotFound'
  /**
   * Calculated reward to claim is 0.
   **/
  | 'ZeroClaimedRewards'
  /**
   * Asset is not in the `AssetPair`.
   **/
  | 'AssetNotInAssetPair'
  /**
   * Provided `AssetPair` is not used by the deposit.
   **/
  | 'InvalidAssetPair';

export type PalletLiquidityMiningGlobalFarmData = {
  id: number;
  owner: AccountId32;
  updatedAt: number;
  totalSharesZ: bigint;
  accumulatedRpz: FixedU128;
  rewardCurrency: number;
  pendingRewards: bigint;
  accumulatedPaidRewards: bigint;
  yieldPerPeriod: Perquintill;
  plannedYieldingPeriods: number;
  blocksPerPeriod: number;
  incentivizedAsset: number;
  maxRewardPerPeriod: bigint;
  minDeposit: bigint;
  liveYieldFarmsCount: number;
  totalYieldFarmsCount: number;
  priceAdjustment: FixedU128;
  state: PalletLiquidityMiningFarmState;
};

export type PalletLiquidityMiningFarmState = 'Active' | 'Stopped' | 'Terminated';

export type PalletLiquidityMiningYieldFarmData = {
  id: number;
  updatedAt: number;
  totalShares: bigint;
  totalValuedShares: bigint;
  accumulatedRpvs: FixedU128;
  accumulatedRpz: FixedU128;
  loyaltyCurve?: PalletLiquidityMiningLoyaltyCurve | undefined;
  multiplier: FixedU128;
  state: PalletLiquidityMiningFarmState;
  entriesCount: bigint;
  leftToDistribute: bigint;
  totalStopped: number;
};

export type PalletLiquidityMiningDepositData = {
  shares: bigint;
  ammPoolId: AccountId32;
  yieldFarmEntries: Array<PalletLiquidityMiningYieldFarmEntry>;
};

export type PalletLiquidityMiningYieldFarmEntry = {
  globalFarmId: number;
  yieldFarmId: number;
  valuedShares: bigint;
  accumulatedRpvs: FixedU128;
  accumulatedClaimedRewards: bigint;
  enteredAt: number;
  updatedAt: number;
  stoppedAtCreation: number;
};

/**
 * The `Error` enum of this pallet.
 **/
export type PalletLiquidityMiningError =
  /**
   * Global farm does not exist.
   **/
  | { name: 'GlobalFarmNotFound' }
  /**
   * Yield farm does not exist.
   **/
  | { name: 'YieldFarmNotFound' }
  /**
   * Multiple claims in the same period is not allowed.
   **/
  | { name: 'DoubleClaimInPeriod' }
  /**
   * Liquidity mining is canceled.
   **/
  | { name: 'LiquidityMiningCanceled' }
  /**
   * Liquidity mining is not canceled.
   **/
  | { name: 'LiquidityMiningIsActive' }
  /**
   * Liquidity mining is in `active` or `terminated` state and action cannot be completed.
   **/
  | { name: 'LiquidityMiningIsNotStopped' }
  /**
   * LP shares amount is not valid.
   **/
  | { name: 'InvalidDepositAmount' }
  /**
   * Account is not allowed to perform action.
   **/
  | { name: 'Forbidden' }
  /**
   * Yield farm multiplier can't be 0.
   **/
  | { name: 'InvalidMultiplier' }
  /**
   * Yield farm with given `amm_pool_id` already exists in global farm.
   **/
  | { name: 'YieldFarmAlreadyExists' }
  /**
   * Loyalty curve's initial reward percentage is not valid. Valid range is: [0, 1).
   **/
  | { name: 'InvalidInitialRewardPercentage' }
  /**
   * One or more yield farms exist in global farm.
   **/
  | { name: 'GlobalFarmIsNotEmpty' }
  /**
   * Farm's `incentivized_asset` is missing in provided asset pair.
   **/
  | { name: 'MissingIncentivizedAsset' }
  /**
   * Reward currency balance is not sufficient.
   **/
  | { name: 'InsufficientRewardCurrencyBalance' }
  /**
   * Blocks per period can't be 0.
   **/
  | { name: 'InvalidBlocksPerPeriod' }
  /**
   * Yield per period can't be 0.
   **/
  | { name: 'InvalidYieldPerPeriod' }
  /**
   * Total rewards is less than `MinTotalFarmRewards`.
   **/
  | { name: 'InvalidTotalRewards' }
  /**
   * Planned yielding periods is less than `MinPlannedYieldingPeriods`.
   **/
  | { name: 'InvalidPlannedYieldingPeriods' }
  /**
   * Maximum number of locks reached for deposit.
   **/
  | { name: 'MaxEntriesPerDeposit' }
  /**
   * Trying to lock LP shares into already locked yield farm.
   **/
  | { name: 'DoubleLock' }
  /**
   * Yield farm entry doesn't exist for given deposit.
   **/
  | { name: 'YieldFarmEntryNotFound' }
  /**
   * Max number of yield farms in global farm was reached. Global farm can't accept new
   * yield farms until some yield farm is not removed from storage.
   **/
  | { name: 'GlobalFarmIsFull' }
  /**
   * Invalid min. deposit was set for global farm.
   **/
  | { name: 'InvalidMinDeposit' }
  /**
   * Price adjustment multiplier can't be 0.
   **/
  | { name: 'InvalidPriceAdjustment' }
  /**
   * Account creation from id failed.
   **/
  | { name: 'ErrorGetAccountId' }
  /**
   * Value of deposited shares amount in reward currency is bellow min. limit.
   **/
  | { name: 'IncorrectValuedShares' }
  /**
   * `reward_currency` is not registered in asset registry.
   **/
  | { name: 'RewardCurrencyNotRegistered' }
  /**
   * `incentivized_asset` is not registered in asset registry.
   **/
  | { name: 'IncentivizedAssetNotRegistered' }
  /**
   * Action cannot be completed because unexpected error has occurred. This should be reported
   * to protocol maintainers.
   **/
  | { name: 'InconsistentState'; data: PalletLiquidityMiningInconsistentStateError };

export type PalletLiquidityMiningInconsistentStateError =
  | 'YieldFarmNotFound'
  | 'GlobalFarmNotFound'
  | 'LiquidityIsNotActive'
  | 'GlobalFarmIsNotActive'
  | 'DepositNotFound'
  | 'InvalidPeriod'
  | 'NotEnoughRewardsInYieldFarm'
  | 'InvalidLiveYielFarmsCount'
  | 'InvalidTotalYieldFarmsCount'
  | 'InvalidYieldFarmEntriesCount'
  | 'InvalidTotalShares'
  | 'InvalidValuedShares'
  | 'InvalidTotalSharesZ'
  | 'InvalidPaidAccumulatedRewards'
  | 'InvalidFarmId'
  | 'InvalidLoyaltyMultiplier'
  | 'NoExistentialDepositForAsset';

/**
 * The `Error` enum of this pallet.
 **/
export type PalletCollatorRewardsError = null;

/**
 * The `Error` enum of this pallet.
 **/
export type PalletBroadcastError = null;

export type PalletEmaOracleOracleEntry = {
  price: HydraDxMathRatio;
  volume: HydradxTraitsOracleVolume;
  liquidity: HydradxTraitsOracleLiquidity;
  updatedAt: number;
};

export type HydraDxMathRatio = { n: bigint; d: bigint };

export type HydradxTraitsOracleVolume = { aIn: bigint; bOut: bigint; aOut: bigint; bIn: bigint };

export type HydradxTraitsOracleLiquidity = { a: bigint; b: bigint };

/**
 * The `Error` enum of this pallet.
 **/
export type PalletEmaOracleError = 'TooManyUniqueEntries' | 'OnTradeValueZero' | 'OracleNotFound';

/**
 * The `Error` enum of this pallet.
 **/
export type PalletCurrenciesModuleError =
  /**
   * Unable to convert the Amount type into Balance.
   **/
  | 'AmountIntoBalanceFailed'
  /**
   * Balance is too low.
   **/
  | 'BalanceTooLow'
  /**
   * Deposit result is not expected
   **/
  | 'DepositFailed'
  /**
   * Operation is not supported for this currency
   **/
  | 'NotSupported';

export type OrmlTokensBalanceLock = { id: FixedBytes<8>; amount: bigint };

export type OrmlTokensAccountData = { free: bigint; reserved: bigint; frozen: bigint };

export type OrmlTokensReserveData = { id: []; amount: bigint };

/**
 * The `Error` enum of this pallet.
 **/
export type OrmlTokensModuleError =
  /**
   * The balance is too low
   **/
  | 'BalanceTooLow'
  /**
   * Cannot convert Amount into Balance type
   **/
  | 'AmountIntoBalanceFailed'
  /**
   * Failed because liquidity restrictions due to locking
   **/
  | 'LiquidityRestrictions'
  /**
   * Failed because the maximum locks was exceeded
   **/
  | 'MaxLocksExceeded'
  /**
   * Transfer/payment would kill account
   **/
  | 'KeepAlive'
  /**
   * Value too low to create account due to existential deposit
   **/
  | 'ExistentialDeposit'
  /**
   * Beneficiary account must pre-exist
   **/
  | 'DeadAccount'
  | 'TooManyReserves';

/**
 * The `Error` enum of this pallet.
 **/
export type OrmlXcmModuleError =
  /**
   * The message and destination combination was not recognized as being
   * reachable.
   **/
  | 'Unreachable'
  /**
   * The message and destination was recognized as being reachable but
   * the operation could not be completed.
   **/
  | 'SendFailure'
  /**
   * The version of the `Versioned` value used is not able to be
   * interpreted.
   **/
  | 'BadVersion';

/**
 * The `Error` enum of this pallet.
 **/
export type OrmlXtokensModuleError =
  /**
   * Asset has no reserve location.
   **/
  | 'AssetHasNoReserve'
  /**
   * Not cross-chain transfer.
   **/
  | 'NotCrossChainTransfer'
  /**
   * Invalid transfer destination.
   **/
  | 'InvalidDest'
  /**
   * Currency is not cross-chain transferable.
   **/
  | 'NotCrossChainTransferableCurrency'
  /**
   * The message's weight could not be determined.
   **/
  | 'UnweighableMessage'
  /**
   * XCM execution failed.
   **/
  | 'XcmExecutionFailed'
  /**
   * Could not re-anchor the assets to declare the fees for the
   * destination chain.
   **/
  | 'CannotReanchor'
  /**
   * Could not get ancestry of asset reserve location.
   **/
  | 'InvalidAncestry'
  /**
   * The Asset is invalid.
   **/
  | 'InvalidAsset'
  /**
   * The destination `Location` provided cannot be inverted.
   **/
  | 'DestinationNotInvertible'
  /**
   * The version of the `Versioned` value used is not able to be
   * interpreted.
   **/
  | 'BadVersion'
  /**
   * We tried sending distinct asset and fee but they have different
   * reserve chains.
   **/
  | 'DistinctReserveForAssetAndFee'
  /**
   * The fee is zero.
   **/
  | 'ZeroFee'
  /**
   * The transfering asset amount is zero.
   **/
  | 'ZeroAmount'
  /**
   * The number of assets to be sent is over the maximum.
   **/
  | 'TooManyAssetsBeingSent'
  /**
   * The specified index does not exist in a Assets struct.
   **/
  | 'AssetIndexNonExistent'
  /**
   * Fee is not enough.
   **/
  | 'FeeNotEnough'
  /**
   * Not supported Location
   **/
  | 'NotSupportedLocation'
  /**
   * MinXcmFee not registered for certain reserve location
   **/
  | 'MinXcmFeeNotDefined'
  /**
   * Asset transfer is limited by RateLimiter.
   **/
  | 'RateLimited';

/**
 * The `Error` enum of this pallet.
 **/
export type OrmlUnknownTokensModuleError =
  /**
   * The balance is too low.
   **/
  | 'BalanceTooLow'
  /**
   * The operation will cause balance to overflow.
   **/
  | 'BalanceOverflow'
  /**
   * Unhandled asset.
   **/
  | 'UnhandledAsset';

export type FrameSystemExtensionsCheckSpecVersion = {};

export type FrameSystemExtensionsCheckTxVersion = {};

export type FrameSystemExtensionsCheckGenesis = {};

export type FrameSystemExtensionsCheckMortality = Era;

export type FrameSystemExtensionsCheckNonce = number;

export type FrameSystemExtensionsCheckWeight = {};

export type PalletTransactionPaymentChargeTransactionPayment = bigint;

export type BasiliskRuntimeRuntime = {};

export type BasiliskRuntimeRuntimeError =
  | { pallet: 'System'; palletError: FrameSystemError }
  | { pallet: 'Balances'; palletError: PalletBalancesError }
  | { pallet: 'MultiTransactionPayment'; palletError: PalletTransactionMultiPaymentError }
  | { pallet: 'Treasury'; palletError: PalletTreasuryError }
  | { pallet: 'Utility'; palletError: PalletUtilityError }
  | { pallet: 'Democracy'; palletError: PalletDemocracyError }
  | { pallet: 'TechnicalCommittee'; palletError: PalletCollectiveError }
  | { pallet: 'Vesting'; palletError: OrmlVestingModuleError }
  | { pallet: 'Proxy'; palletError: PalletProxyError }
  | { pallet: 'CollatorSelection'; palletError: PalletCollatorSelectionError }
  | { pallet: 'Session'; palletError: PalletSessionError }
  | { pallet: 'Preimage'; palletError: PalletPreimageError }
  | { pallet: 'Uniques'; palletError: PalletUniquesError }
  | { pallet: 'Identity'; palletError: PalletIdentityError }
  | { pallet: 'Multisig'; palletError: PalletMultisigError }
  | { pallet: 'StateTrieMigration'; palletError: PalletStateTrieMigrationError }
  | { pallet: 'ConvictionVoting'; palletError: PalletConvictionVotingError }
  | { pallet: 'Referenda'; palletError: PalletReferendaError }
  | { pallet: 'Whitelist'; palletError: PalletWhitelistError }
  | { pallet: 'RelayChainInfo'; palletError: PalletRelaychainInfoError }
  | { pallet: 'Scheduler'; palletError: PalletSchedulerError }
  | { pallet: 'ParachainSystem'; palletError: CumulusPalletParachainSystemError }
  | { pallet: 'PolkadotXcm'; palletError: PalletXcmError }
  | { pallet: 'XcmpQueue'; palletError: CumulusPalletXcmpQueueError }
  | { pallet: 'MessageQueue'; palletError: PalletMessageQueueError }
  | { pallet: 'AssetRegistry'; palletError: PalletAssetRegistryError }
  | { pallet: 'Xyk'; palletError: PalletXykError }
  | { pallet: 'Duster'; palletError: PalletDusterError }
  | { pallet: 'Lbp'; palletError: PalletLbpError }
  | { pallet: 'Nft'; palletError: PalletNftError }
  | { pallet: 'Marketplace'; palletError: PalletMarketplaceError }
  | { pallet: 'TransactionPause'; palletError: PalletTransactionPauseError }
  | { pallet: 'Router'; palletError: PalletRouteExecutorError }
  | { pallet: 'XykLiquidityMining'; palletError: PalletXykLiquidityMiningError }
  | { pallet: 'XykWarehouseLM'; palletError: PalletLiquidityMiningError }
  | { pallet: 'CollatorRewards'; palletError: PalletCollatorRewardsError }
  | { pallet: 'Broadcast'; palletError: PalletBroadcastError }
  | { pallet: 'EmaOracle'; palletError: PalletEmaOracleError }
  | { pallet: 'Currencies'; palletError: PalletCurrenciesModuleError }
  | { pallet: 'Tokens'; palletError: OrmlTokensModuleError }
  | { pallet: 'OrmlXcm'; palletError: OrmlXcmModuleError }
  | { pallet: 'XTokens'; palletError: OrmlXtokensModuleError }
  | { pallet: 'UnknownTokens'; palletError: OrmlUnknownTokensModuleError };
