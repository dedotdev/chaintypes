// Generated by dedot cli

import type {
  GenericChainTx,
  GenericTxCall,
  ISubmittableExtrinsic,
  ISubmittableResult,
  IRuntimeTxCall,
  RpcVersion,
  RpcV2,
  ISubmittableExtrinsicLegacy,
} from 'dedot/types';
import type {
  MultiAddressLike,
  Extrinsic,
  BytesLike,
  H256,
  FixedBytes,
  AccountId32Like,
  Percent,
  Perbill,
  EthereumAddressLike,
  Data,
  FixedU128,
} from 'dedot/codecs';
import type {
  PaseoRuntimeRuntimeCallLike,
  SpRuntimeMultiSignature,
  FrameSystemEventRecord,
  SpConsensusSlotsEquivocationProof,
  SpSessionMembershipProof,
  SpConsensusBabeDigestsNextConfigDescriptor,
  PalletBalancesAdjustmentDirection,
  PalletStakingRewardDestination,
  PalletStakingValidatorPrefs,
  PalletStakingPalletConfigOp,
  PalletStakingPalletConfigOpU32,
  PalletStakingPalletConfigOpPercent,
  PalletStakingPalletConfigOpPerbill,
  PalletStakingUnlockChunk,
  PaseoRuntimeSessionKeys,
  SpConsensusGrandpaEquivocationProof,
  PolkadotRuntimeCommonImplsVersionedLocatableAsset,
  XcmVersionedLocation,
  PalletConvictionVotingVoteAccountVote,
  PalletConvictionVotingConviction,
  PaseoRuntimeOriginCaller,
  FrameSupportPreimagesBounded,
  FrameSupportScheduleDispatchTime,
  SpWeightsWeightV2Weight,
  PolkadotRuntimeCommonClaimsEcdsaSignature,
  PolkadotRuntimeCommonClaimsStatementKind,
  PalletVestingVestingInfo,
  PalletIdentityLegacyIdentityInfo,
  PalletIdentityJudgement,
  PaseoRuntimeProxyType,
  PalletMultisigTimepoint,
  PalletElectionProviderMultiPhaseRawSolution,
  PalletElectionProviderMultiPhaseSolutionOrSnapshotSize,
  SpNposElectionsElectionScore,
  SpNposElectionsSupport,
  PalletNominationPoolsBondExtra,
  PalletNominationPoolsPoolState,
  PalletNominationPoolsConfigOp,
  PalletNominationPoolsConfigOpU32,
  PalletNominationPoolsConfigOpPerbill,
  PalletNominationPoolsConfigOp004,
  PalletNominationPoolsClaimPermission,
  PalletNominationPoolsCommissionChangeRate,
  PalletNominationPoolsCommissionClaimPermission,
  PolkadotPrimitivesV6AsyncBackingAsyncBackingParams,
  PolkadotPrimitivesV6ExecutorParams,
  PolkadotPrimitivesVstagingApprovalVotingParams,
  PolkadotPrimitivesV6InherentData,
  PolkadotParachainPrimitivesPrimitivesId,
  PolkadotParachainPrimitivesPrimitivesValidationCode,
  PolkadotParachainPrimitivesPrimitivesHeadData,
  PolkadotParachainPrimitivesPrimitivesValidationCodeHash,
  PolkadotPrimitivesV6PvfCheckStatement,
  PolkadotPrimitivesV6ValidatorAppSignature,
  PolkadotParachainPrimitivesPrimitivesHrmpChannelId,
  PolkadotPrimitivesV6SlashingDisputeProof,
  SpRuntimeMultiSigner,
  PalletStateTrieMigrationMigrationLimits,
  PalletStateTrieMigrationMigrationTask,
  PalletStateTrieMigrationProgress,
  XcmVersionedXcm,
  XcmVersionedAssets,
  StagingXcmV4Location,
  XcmV3WeightLimit,
  StagingXcmExecutorAssetTransferTransferType,
  XcmVersionedAssetId,
  PolkadotRuntimeParachainsInclusionAggregateMessageOrigin,
  SpConsensusBeefyEquivocationProof,
  PolkadotRuntimeParachainsParasParaGenesisArgs,
} from './types';

export type ChainSubmittableExtrinsic<
  Rv extends RpcVersion,
  T extends IRuntimeTxCall = PaseoRuntimeRuntimeCallLike,
> = Extrinsic<MultiAddressLike, T, SpRuntimeMultiSignature, any[]> &
  (Rv extends RpcV2
    ? ISubmittableExtrinsic<ISubmittableResult<FrameSystemEventRecord>>
    : ISubmittableExtrinsicLegacy<ISubmittableResult<FrameSystemEventRecord>>);

export type TxCall<Rv extends RpcVersion> = (...args: any[]) => ChainSubmittableExtrinsic<Rv>;

export interface ChainTx<Rv extends RpcVersion> extends GenericChainTx<Rv, TxCall<Rv>> {
  /**
   * Pallet `System`'s transaction calls
   **/
  system: {
    /**
     * See [`Pallet::remark`].
     *
     * @param {BytesLike} remark
     **/
    remark: GenericTxCall<
      Rv,
      (remark: BytesLike) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'System';
          palletCall: {
            name: 'Remark';
            params: { remark: BytesLike };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_heap_pages`].
     *
     * @param {bigint} pages
     **/
    setHeapPages: GenericTxCall<
      Rv,
      (pages: bigint) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'System';
          palletCall: {
            name: 'SetHeapPages';
            params: { pages: bigint };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_code`].
     *
     * @param {BytesLike} code
     **/
    setCode: GenericTxCall<
      Rv,
      (code: BytesLike) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'System';
          palletCall: {
            name: 'SetCode';
            params: { code: BytesLike };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_code_without_checks`].
     *
     * @param {BytesLike} code
     **/
    setCodeWithoutChecks: GenericTxCall<
      Rv,
      (code: BytesLike) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'System';
          palletCall: {
            name: 'SetCodeWithoutChecks';
            params: { code: BytesLike };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_storage`].
     *
     * @param {Array<[BytesLike, BytesLike]>} items
     **/
    setStorage: GenericTxCall<
      Rv,
      (items: Array<[BytesLike, BytesLike]>) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'System';
          palletCall: {
            name: 'SetStorage';
            params: { items: Array<[BytesLike, BytesLike]> };
          };
        }
      >
    >;

    /**
     * See [`Pallet::kill_storage`].
     *
     * @param {Array<BytesLike>} keys
     **/
    killStorage: GenericTxCall<
      Rv,
      (keys: Array<BytesLike>) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'System';
          palletCall: {
            name: 'KillStorage';
            params: { keys: Array<BytesLike> };
          };
        }
      >
    >;

    /**
     * See [`Pallet::kill_prefix`].
     *
     * @param {BytesLike} prefix
     * @param {number} subkeys
     **/
    killPrefix: GenericTxCall<
      Rv,
      (
        prefix: BytesLike,
        subkeys: number,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'System';
          palletCall: {
            name: 'KillPrefix';
            params: { prefix: BytesLike; subkeys: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::remark_with_event`].
     *
     * @param {BytesLike} remark
     **/
    remarkWithEvent: GenericTxCall<
      Rv,
      (remark: BytesLike) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'System';
          palletCall: {
            name: 'RemarkWithEvent';
            params: { remark: BytesLike };
          };
        }
      >
    >;

    /**
     * See [`Pallet::authorize_upgrade`].
     *
     * @param {H256} codeHash
     **/
    authorizeUpgrade: GenericTxCall<
      Rv,
      (codeHash: H256) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'System';
          palletCall: {
            name: 'AuthorizeUpgrade';
            params: { codeHash: H256 };
          };
        }
      >
    >;

    /**
     * See [`Pallet::authorize_upgrade_without_checks`].
     *
     * @param {H256} codeHash
     **/
    authorizeUpgradeWithoutChecks: GenericTxCall<
      Rv,
      (codeHash: H256) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'System';
          palletCall: {
            name: 'AuthorizeUpgradeWithoutChecks';
            params: { codeHash: H256 };
          };
        }
      >
    >;

    /**
     * See [`Pallet::apply_authorized_upgrade`].
     *
     * @param {BytesLike} code
     **/
    applyAuthorizedUpgrade: GenericTxCall<
      Rv,
      (code: BytesLike) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'System';
          palletCall: {
            name: 'ApplyAuthorizedUpgrade';
            params: { code: BytesLike };
          };
        }
      >
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>;
  };
  /**
   * Pallet `Scheduler`'s transaction calls
   **/
  scheduler: {
    /**
     * See [`Pallet::schedule`].
     *
     * @param {number} when
     * @param {[number, number] | undefined} maybePeriodic
     * @param {number} priority
     * @param {PaseoRuntimeRuntimeCallLike} call
     **/
    schedule: GenericTxCall<
      Rv,
      (
        when: number,
        maybePeriodic: [number, number] | undefined,
        priority: number,
        call: PaseoRuntimeRuntimeCallLike,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Scheduler';
          palletCall: {
            name: 'Schedule';
            params: {
              when: number;
              maybePeriodic: [number, number] | undefined;
              priority: number;
              call: PaseoRuntimeRuntimeCallLike;
            };
          };
        }
      >
    >;

    /**
     * See [`Pallet::cancel`].
     *
     * @param {number} when
     * @param {number} index
     **/
    cancel: GenericTxCall<
      Rv,
      (
        when: number,
        index: number,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Scheduler';
          palletCall: {
            name: 'Cancel';
            params: { when: number; index: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::schedule_named`].
     *
     * @param {FixedBytes<32>} id
     * @param {number} when
     * @param {[number, number] | undefined} maybePeriodic
     * @param {number} priority
     * @param {PaseoRuntimeRuntimeCallLike} call
     **/
    scheduleNamed: GenericTxCall<
      Rv,
      (
        id: FixedBytes<32>,
        when: number,
        maybePeriodic: [number, number] | undefined,
        priority: number,
        call: PaseoRuntimeRuntimeCallLike,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Scheduler';
          palletCall: {
            name: 'ScheduleNamed';
            params: {
              id: FixedBytes<32>;
              when: number;
              maybePeriodic: [number, number] | undefined;
              priority: number;
              call: PaseoRuntimeRuntimeCallLike;
            };
          };
        }
      >
    >;

    /**
     * See [`Pallet::cancel_named`].
     *
     * @param {FixedBytes<32>} id
     **/
    cancelNamed: GenericTxCall<
      Rv,
      (id: FixedBytes<32>) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Scheduler';
          palletCall: {
            name: 'CancelNamed';
            params: { id: FixedBytes<32> };
          };
        }
      >
    >;

    /**
     * See [`Pallet::schedule_after`].
     *
     * @param {number} after
     * @param {[number, number] | undefined} maybePeriodic
     * @param {number} priority
     * @param {PaseoRuntimeRuntimeCallLike} call
     **/
    scheduleAfter: GenericTxCall<
      Rv,
      (
        after: number,
        maybePeriodic: [number, number] | undefined,
        priority: number,
        call: PaseoRuntimeRuntimeCallLike,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Scheduler';
          palletCall: {
            name: 'ScheduleAfter';
            params: {
              after: number;
              maybePeriodic: [number, number] | undefined;
              priority: number;
              call: PaseoRuntimeRuntimeCallLike;
            };
          };
        }
      >
    >;

    /**
     * See [`Pallet::schedule_named_after`].
     *
     * @param {FixedBytes<32>} id
     * @param {number} after
     * @param {[number, number] | undefined} maybePeriodic
     * @param {number} priority
     * @param {PaseoRuntimeRuntimeCallLike} call
     **/
    scheduleNamedAfter: GenericTxCall<
      Rv,
      (
        id: FixedBytes<32>,
        after: number,
        maybePeriodic: [number, number] | undefined,
        priority: number,
        call: PaseoRuntimeRuntimeCallLike,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Scheduler';
          palletCall: {
            name: 'ScheduleNamedAfter';
            params: {
              id: FixedBytes<32>;
              after: number;
              maybePeriodic: [number, number] | undefined;
              priority: number;
              call: PaseoRuntimeRuntimeCallLike;
            };
          };
        }
      >
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>;
  };
  /**
   * Pallet `Preimage`'s transaction calls
   **/
  preimage: {
    /**
     * See [`Pallet::note_preimage`].
     *
     * @param {BytesLike} bytes
     **/
    notePreimage: GenericTxCall<
      Rv,
      (bytes: BytesLike) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Preimage';
          palletCall: {
            name: 'NotePreimage';
            params: { bytes: BytesLike };
          };
        }
      >
    >;

    /**
     * See [`Pallet::unnote_preimage`].
     *
     * @param {H256} hash
     **/
    unnotePreimage: GenericTxCall<
      Rv,
      (hash: H256) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Preimage';
          palletCall: {
            name: 'UnnotePreimage';
            params: { hash: H256 };
          };
        }
      >
    >;

    /**
     * See [`Pallet::request_preimage`].
     *
     * @param {H256} hash
     **/
    requestPreimage: GenericTxCall<
      Rv,
      (hash: H256) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Preimage';
          palletCall: {
            name: 'RequestPreimage';
            params: { hash: H256 };
          };
        }
      >
    >;

    /**
     * See [`Pallet::unrequest_preimage`].
     *
     * @param {H256} hash
     **/
    unrequestPreimage: GenericTxCall<
      Rv,
      (hash: H256) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Preimage';
          palletCall: {
            name: 'UnrequestPreimage';
            params: { hash: H256 };
          };
        }
      >
    >;

    /**
     * See [`Pallet::ensure_updated`].
     *
     * @param {Array<H256>} hashes
     **/
    ensureUpdated: GenericTxCall<
      Rv,
      (hashes: Array<H256>) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Preimage';
          palletCall: {
            name: 'EnsureUpdated';
            params: { hashes: Array<H256> };
          };
        }
      >
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>;
  };
  /**
   * Pallet `Babe`'s transaction calls
   **/
  babe: {
    /**
     * See [`Pallet::report_equivocation`].
     *
     * @param {SpConsensusSlotsEquivocationProof} equivocationProof
     * @param {SpSessionMembershipProof} keyOwnerProof
     **/
    reportEquivocation: GenericTxCall<
      Rv,
      (
        equivocationProof: SpConsensusSlotsEquivocationProof,
        keyOwnerProof: SpSessionMembershipProof,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Babe';
          palletCall: {
            name: 'ReportEquivocation';
            params: { equivocationProof: SpConsensusSlotsEquivocationProof; keyOwnerProof: SpSessionMembershipProof };
          };
        }
      >
    >;

    /**
     * See [`Pallet::report_equivocation_unsigned`].
     *
     * @param {SpConsensusSlotsEquivocationProof} equivocationProof
     * @param {SpSessionMembershipProof} keyOwnerProof
     **/
    reportEquivocationUnsigned: GenericTxCall<
      Rv,
      (
        equivocationProof: SpConsensusSlotsEquivocationProof,
        keyOwnerProof: SpSessionMembershipProof,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Babe';
          palletCall: {
            name: 'ReportEquivocationUnsigned';
            params: { equivocationProof: SpConsensusSlotsEquivocationProof; keyOwnerProof: SpSessionMembershipProof };
          };
        }
      >
    >;

    /**
     * See [`Pallet::plan_config_change`].
     *
     * @param {SpConsensusBabeDigestsNextConfigDescriptor} config
     **/
    planConfigChange: GenericTxCall<
      Rv,
      (config: SpConsensusBabeDigestsNextConfigDescriptor) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Babe';
          palletCall: {
            name: 'PlanConfigChange';
            params: { config: SpConsensusBabeDigestsNextConfigDescriptor };
          };
        }
      >
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>;
  };
  /**
   * Pallet `Timestamp`'s transaction calls
   **/
  timestamp: {
    /**
     * See [`Pallet::set`].
     *
     * @param {bigint} now
     **/
    set: GenericTxCall<
      Rv,
      (now: bigint) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Timestamp';
          palletCall: {
            name: 'Set';
            params: { now: bigint };
          };
        }
      >
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>;
  };
  /**
   * Pallet `Indices`'s transaction calls
   **/
  indices: {
    /**
     * See [`Pallet::claim`].
     *
     * @param {number} index
     **/
    claim: GenericTxCall<
      Rv,
      (index: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Indices';
          palletCall: {
            name: 'Claim';
            params: { index: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::transfer`].
     *
     * @param {MultiAddressLike} new_
     * @param {number} index
     **/
    transfer: GenericTxCall<
      Rv,
      (
        new_: MultiAddressLike,
        index: number,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Indices';
          palletCall: {
            name: 'Transfer';
            params: { new: MultiAddressLike; index: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::free`].
     *
     * @param {number} index
     **/
    free: GenericTxCall<
      Rv,
      (index: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Indices';
          palletCall: {
            name: 'Free';
            params: { index: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::force_transfer`].
     *
     * @param {MultiAddressLike} new_
     * @param {number} index
     * @param {boolean} freeze
     **/
    forceTransfer: GenericTxCall<
      Rv,
      (
        new_: MultiAddressLike,
        index: number,
        freeze: boolean,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Indices';
          palletCall: {
            name: 'ForceTransfer';
            params: { new: MultiAddressLike; index: number; freeze: boolean };
          };
        }
      >
    >;

    /**
     * See [`Pallet::freeze`].
     *
     * @param {number} index
     **/
    freeze: GenericTxCall<
      Rv,
      (index: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Indices';
          palletCall: {
            name: 'Freeze';
            params: { index: number };
          };
        }
      >
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>;
  };
  /**
   * Pallet `Balances`'s transaction calls
   **/
  balances: {
    /**
     * See [`Pallet::transfer_allow_death`].
     *
     * @param {MultiAddressLike} dest
     * @param {bigint} value
     **/
    transferAllowDeath: GenericTxCall<
      Rv,
      (
        dest: MultiAddressLike,
        value: bigint,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Balances';
          palletCall: {
            name: 'TransferAllowDeath';
            params: { dest: MultiAddressLike; value: bigint };
          };
        }
      >
    >;

    /**
     * See [`Pallet::force_transfer`].
     *
     * @param {MultiAddressLike} source
     * @param {MultiAddressLike} dest
     * @param {bigint} value
     **/
    forceTransfer: GenericTxCall<
      Rv,
      (
        source: MultiAddressLike,
        dest: MultiAddressLike,
        value: bigint,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Balances';
          palletCall: {
            name: 'ForceTransfer';
            params: { source: MultiAddressLike; dest: MultiAddressLike; value: bigint };
          };
        }
      >
    >;

    /**
     * See [`Pallet::transfer_keep_alive`].
     *
     * @param {MultiAddressLike} dest
     * @param {bigint} value
     **/
    transferKeepAlive: GenericTxCall<
      Rv,
      (
        dest: MultiAddressLike,
        value: bigint,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Balances';
          palletCall: {
            name: 'TransferKeepAlive';
            params: { dest: MultiAddressLike; value: bigint };
          };
        }
      >
    >;

    /**
     * See [`Pallet::transfer_all`].
     *
     * @param {MultiAddressLike} dest
     * @param {boolean} keepAlive
     **/
    transferAll: GenericTxCall<
      Rv,
      (
        dest: MultiAddressLike,
        keepAlive: boolean,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Balances';
          palletCall: {
            name: 'TransferAll';
            params: { dest: MultiAddressLike; keepAlive: boolean };
          };
        }
      >
    >;

    /**
     * See [`Pallet::force_unreserve`].
     *
     * @param {MultiAddressLike} who
     * @param {bigint} amount
     **/
    forceUnreserve: GenericTxCall<
      Rv,
      (
        who: MultiAddressLike,
        amount: bigint,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Balances';
          palletCall: {
            name: 'ForceUnreserve';
            params: { who: MultiAddressLike; amount: bigint };
          };
        }
      >
    >;

    /**
     * See [`Pallet::upgrade_accounts`].
     *
     * @param {Array<AccountId32Like>} who
     **/
    upgradeAccounts: GenericTxCall<
      Rv,
      (who: Array<AccountId32Like>) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Balances';
          palletCall: {
            name: 'UpgradeAccounts';
            params: { who: Array<AccountId32Like> };
          };
        }
      >
    >;

    /**
     * See [`Pallet::force_set_balance`].
     *
     * @param {MultiAddressLike} who
     * @param {bigint} newFree
     **/
    forceSetBalance: GenericTxCall<
      Rv,
      (
        who: MultiAddressLike,
        newFree: bigint,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Balances';
          palletCall: {
            name: 'ForceSetBalance';
            params: { who: MultiAddressLike; newFree: bigint };
          };
        }
      >
    >;

    /**
     * See [`Pallet::force_adjust_total_issuance`].
     *
     * @param {PalletBalancesAdjustmentDirection} direction
     * @param {bigint} delta
     **/
    forceAdjustTotalIssuance: GenericTxCall<
      Rv,
      (
        direction: PalletBalancesAdjustmentDirection,
        delta: bigint,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Balances';
          palletCall: {
            name: 'ForceAdjustTotalIssuance';
            params: { direction: PalletBalancesAdjustmentDirection; delta: bigint };
          };
        }
      >
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>;
  };
  /**
   * Pallet `Staking`'s transaction calls
   **/
  staking: {
    /**
     * See [`Pallet::bond`].
     *
     * @param {bigint} value
     * @param {PalletStakingRewardDestination} payee
     **/
    bond: GenericTxCall<
      Rv,
      (
        value: bigint,
        payee: PalletStakingRewardDestination,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Staking';
          palletCall: {
            name: 'Bond';
            params: { value: bigint; payee: PalletStakingRewardDestination };
          };
        }
      >
    >;

    /**
     * See [`Pallet::bond_extra`].
     *
     * @param {bigint} maxAdditional
     **/
    bondExtra: GenericTxCall<
      Rv,
      (maxAdditional: bigint) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Staking';
          palletCall: {
            name: 'BondExtra';
            params: { maxAdditional: bigint };
          };
        }
      >
    >;

    /**
     * See [`Pallet::unbond`].
     *
     * @param {bigint} value
     **/
    unbond: GenericTxCall<
      Rv,
      (value: bigint) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Staking';
          palletCall: {
            name: 'Unbond';
            params: { value: bigint };
          };
        }
      >
    >;

    /**
     * See [`Pallet::withdraw_unbonded`].
     *
     * @param {number} numSlashingSpans
     **/
    withdrawUnbonded: GenericTxCall<
      Rv,
      (numSlashingSpans: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Staking';
          palletCall: {
            name: 'WithdrawUnbonded';
            params: { numSlashingSpans: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::validate`].
     *
     * @param {PalletStakingValidatorPrefs} prefs
     **/
    validate: GenericTxCall<
      Rv,
      (prefs: PalletStakingValidatorPrefs) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Staking';
          palletCall: {
            name: 'Validate';
            params: { prefs: PalletStakingValidatorPrefs };
          };
        }
      >
    >;

    /**
     * See [`Pallet::nominate`].
     *
     * @param {Array<MultiAddressLike>} targets
     **/
    nominate: GenericTxCall<
      Rv,
      (targets: Array<MultiAddressLike>) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Staking';
          palletCall: {
            name: 'Nominate';
            params: { targets: Array<MultiAddressLike> };
          };
        }
      >
    >;

    /**
     * See [`Pallet::chill`].
     *
     **/
    chill: GenericTxCall<
      Rv,
      () => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Staking';
          palletCall: {
            name: 'Chill';
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_payee`].
     *
     * @param {PalletStakingRewardDestination} payee
     **/
    setPayee: GenericTxCall<
      Rv,
      (payee: PalletStakingRewardDestination) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Staking';
          palletCall: {
            name: 'SetPayee';
            params: { payee: PalletStakingRewardDestination };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_controller`].
     *
     **/
    setController: GenericTxCall<
      Rv,
      () => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Staking';
          palletCall: {
            name: 'SetController';
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_validator_count`].
     *
     * @param {number} new_
     **/
    setValidatorCount: GenericTxCall<
      Rv,
      (new_: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Staking';
          palletCall: {
            name: 'SetValidatorCount';
            params: { new: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::increase_validator_count`].
     *
     * @param {number} additional
     **/
    increaseValidatorCount: GenericTxCall<
      Rv,
      (additional: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Staking';
          palletCall: {
            name: 'IncreaseValidatorCount';
            params: { additional: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::scale_validator_count`].
     *
     * @param {Percent} factor
     **/
    scaleValidatorCount: GenericTxCall<
      Rv,
      (factor: Percent) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Staking';
          palletCall: {
            name: 'ScaleValidatorCount';
            params: { factor: Percent };
          };
        }
      >
    >;

    /**
     * See [`Pallet::force_no_eras`].
     *
     **/
    forceNoEras: GenericTxCall<
      Rv,
      () => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Staking';
          palletCall: {
            name: 'ForceNoEras';
          };
        }
      >
    >;

    /**
     * See [`Pallet::force_new_era`].
     *
     **/
    forceNewEra: GenericTxCall<
      Rv,
      () => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Staking';
          palletCall: {
            name: 'ForceNewEra';
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_invulnerables`].
     *
     * @param {Array<AccountId32Like>} invulnerables
     **/
    setInvulnerables: GenericTxCall<
      Rv,
      (invulnerables: Array<AccountId32Like>) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Staking';
          palletCall: {
            name: 'SetInvulnerables';
            params: { invulnerables: Array<AccountId32Like> };
          };
        }
      >
    >;

    /**
     * See [`Pallet::force_unstake`].
     *
     * @param {AccountId32Like} stash
     * @param {number} numSlashingSpans
     **/
    forceUnstake: GenericTxCall<
      Rv,
      (
        stash: AccountId32Like,
        numSlashingSpans: number,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Staking';
          palletCall: {
            name: 'ForceUnstake';
            params: { stash: AccountId32Like; numSlashingSpans: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::force_new_era_always`].
     *
     **/
    forceNewEraAlways: GenericTxCall<
      Rv,
      () => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Staking';
          palletCall: {
            name: 'ForceNewEraAlways';
          };
        }
      >
    >;

    /**
     * See [`Pallet::cancel_deferred_slash`].
     *
     * @param {number} era
     * @param {Array<number>} slashIndices
     **/
    cancelDeferredSlash: GenericTxCall<
      Rv,
      (
        era: number,
        slashIndices: Array<number>,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Staking';
          palletCall: {
            name: 'CancelDeferredSlash';
            params: { era: number; slashIndices: Array<number> };
          };
        }
      >
    >;

    /**
     * See [`Pallet::payout_stakers`].
     *
     * @param {AccountId32Like} validatorStash
     * @param {number} era
     **/
    payoutStakers: GenericTxCall<
      Rv,
      (
        validatorStash: AccountId32Like,
        era: number,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Staking';
          palletCall: {
            name: 'PayoutStakers';
            params: { validatorStash: AccountId32Like; era: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::rebond`].
     *
     * @param {bigint} value
     **/
    rebond: GenericTxCall<
      Rv,
      (value: bigint) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Staking';
          palletCall: {
            name: 'Rebond';
            params: { value: bigint };
          };
        }
      >
    >;

    /**
     * See [`Pallet::reap_stash`].
     *
     * @param {AccountId32Like} stash
     * @param {number} numSlashingSpans
     **/
    reapStash: GenericTxCall<
      Rv,
      (
        stash: AccountId32Like,
        numSlashingSpans: number,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Staking';
          palletCall: {
            name: 'ReapStash';
            params: { stash: AccountId32Like; numSlashingSpans: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::kick`].
     *
     * @param {Array<MultiAddressLike>} who
     **/
    kick: GenericTxCall<
      Rv,
      (who: Array<MultiAddressLike>) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Staking';
          palletCall: {
            name: 'Kick';
            params: { who: Array<MultiAddressLike> };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_staking_configs`].
     *
     * @param {PalletStakingPalletConfigOp} minNominatorBond
     * @param {PalletStakingPalletConfigOp} minValidatorBond
     * @param {PalletStakingPalletConfigOpU32} maxNominatorCount
     * @param {PalletStakingPalletConfigOpU32} maxValidatorCount
     * @param {PalletStakingPalletConfigOpPercent} chillThreshold
     * @param {PalletStakingPalletConfigOpPerbill} minCommission
     **/
    setStakingConfigs: GenericTxCall<
      Rv,
      (
        minNominatorBond: PalletStakingPalletConfigOp,
        minValidatorBond: PalletStakingPalletConfigOp,
        maxNominatorCount: PalletStakingPalletConfigOpU32,
        maxValidatorCount: PalletStakingPalletConfigOpU32,
        chillThreshold: PalletStakingPalletConfigOpPercent,
        minCommission: PalletStakingPalletConfigOpPerbill,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Staking';
          palletCall: {
            name: 'SetStakingConfigs';
            params: {
              minNominatorBond: PalletStakingPalletConfigOp;
              minValidatorBond: PalletStakingPalletConfigOp;
              maxNominatorCount: PalletStakingPalletConfigOpU32;
              maxValidatorCount: PalletStakingPalletConfigOpU32;
              chillThreshold: PalletStakingPalletConfigOpPercent;
              minCommission: PalletStakingPalletConfigOpPerbill;
            };
          };
        }
      >
    >;

    /**
     * See [`Pallet::chill_other`].
     *
     * @param {AccountId32Like} stash
     **/
    chillOther: GenericTxCall<
      Rv,
      (stash: AccountId32Like) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Staking';
          palletCall: {
            name: 'ChillOther';
            params: { stash: AccountId32Like };
          };
        }
      >
    >;

    /**
     * See [`Pallet::force_apply_min_commission`].
     *
     * @param {AccountId32Like} validatorStash
     **/
    forceApplyMinCommission: GenericTxCall<
      Rv,
      (validatorStash: AccountId32Like) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Staking';
          palletCall: {
            name: 'ForceApplyMinCommission';
            params: { validatorStash: AccountId32Like };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_min_commission`].
     *
     * @param {Perbill} new_
     **/
    setMinCommission: GenericTxCall<
      Rv,
      (new_: Perbill) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Staking';
          palletCall: {
            name: 'SetMinCommission';
            params: { new: Perbill };
          };
        }
      >
    >;

    /**
     * See [`Pallet::payout_stakers_by_page`].
     *
     * @param {AccountId32Like} validatorStash
     * @param {number} era
     * @param {number} page
     **/
    payoutStakersByPage: GenericTxCall<
      Rv,
      (
        validatorStash: AccountId32Like,
        era: number,
        page: number,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Staking';
          palletCall: {
            name: 'PayoutStakersByPage';
            params: { validatorStash: AccountId32Like; era: number; page: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::update_payee`].
     *
     * @param {AccountId32Like} controller
     **/
    updatePayee: GenericTxCall<
      Rv,
      (controller: AccountId32Like) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Staking';
          palletCall: {
            name: 'UpdatePayee';
            params: { controller: AccountId32Like };
          };
        }
      >
    >;

    /**
     * See [`Pallet::deprecate_controller_batch`].
     *
     * @param {Array<AccountId32Like>} controllers
     **/
    deprecateControllerBatch: GenericTxCall<
      Rv,
      (controllers: Array<AccountId32Like>) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Staking';
          palletCall: {
            name: 'DeprecateControllerBatch';
            params: { controllers: Array<AccountId32Like> };
          };
        }
      >
    >;

    /**
     * See [`Pallet::restore_ledger`].
     *
     * @param {AccountId32Like} stash
     * @param {AccountId32Like | undefined} maybeController
     * @param {bigint | undefined} maybeTotal
     * @param {Array<PalletStakingUnlockChunk> | undefined} maybeUnlocking
     **/
    restoreLedger: GenericTxCall<
      Rv,
      (
        stash: AccountId32Like,
        maybeController: AccountId32Like | undefined,
        maybeTotal: bigint | undefined,
        maybeUnlocking: Array<PalletStakingUnlockChunk> | undefined,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Staking';
          palletCall: {
            name: 'RestoreLedger';
            params: {
              stash: AccountId32Like;
              maybeController: AccountId32Like | undefined;
              maybeTotal: bigint | undefined;
              maybeUnlocking: Array<PalletStakingUnlockChunk> | undefined;
            };
          };
        }
      >
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>;
  };
  /**
   * Pallet `Session`'s transaction calls
   **/
  session: {
    /**
     * See [`Pallet::set_keys`].
     *
     * @param {PaseoRuntimeSessionKeys} keys
     * @param {BytesLike} proof
     **/
    setKeys: GenericTxCall<
      Rv,
      (
        keys: PaseoRuntimeSessionKeys,
        proof: BytesLike,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Session';
          palletCall: {
            name: 'SetKeys';
            params: { keys: PaseoRuntimeSessionKeys; proof: BytesLike };
          };
        }
      >
    >;

    /**
     * See [`Pallet::purge_keys`].
     *
     **/
    purgeKeys: GenericTxCall<
      Rv,
      () => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Session';
          palletCall: {
            name: 'PurgeKeys';
          };
        }
      >
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>;
  };
  /**
   * Pallet `Grandpa`'s transaction calls
   **/
  grandpa: {
    /**
     * See [`Pallet::report_equivocation`].
     *
     * @param {SpConsensusGrandpaEquivocationProof} equivocationProof
     * @param {SpSessionMembershipProof} keyOwnerProof
     **/
    reportEquivocation: GenericTxCall<
      Rv,
      (
        equivocationProof: SpConsensusGrandpaEquivocationProof,
        keyOwnerProof: SpSessionMembershipProof,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Grandpa';
          palletCall: {
            name: 'ReportEquivocation';
            params: { equivocationProof: SpConsensusGrandpaEquivocationProof; keyOwnerProof: SpSessionMembershipProof };
          };
        }
      >
    >;

    /**
     * See [`Pallet::report_equivocation_unsigned`].
     *
     * @param {SpConsensusGrandpaEquivocationProof} equivocationProof
     * @param {SpSessionMembershipProof} keyOwnerProof
     **/
    reportEquivocationUnsigned: GenericTxCall<
      Rv,
      (
        equivocationProof: SpConsensusGrandpaEquivocationProof,
        keyOwnerProof: SpSessionMembershipProof,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Grandpa';
          palletCall: {
            name: 'ReportEquivocationUnsigned';
            params: { equivocationProof: SpConsensusGrandpaEquivocationProof; keyOwnerProof: SpSessionMembershipProof };
          };
        }
      >
    >;

    /**
     * See [`Pallet::note_stalled`].
     *
     * @param {number} delay
     * @param {number} bestFinalizedBlockNumber
     **/
    noteStalled: GenericTxCall<
      Rv,
      (
        delay: number,
        bestFinalizedBlockNumber: number,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Grandpa';
          palletCall: {
            name: 'NoteStalled';
            params: { delay: number; bestFinalizedBlockNumber: number };
          };
        }
      >
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>;
  };
  /**
   * Pallet `Treasury`'s transaction calls
   **/
  treasury: {
    /**
     * See [`Pallet::propose_spend`].
     *
     * @param {bigint} value
     * @param {MultiAddressLike} beneficiary
     **/
    proposeSpend: GenericTxCall<
      Rv,
      (
        value: bigint,
        beneficiary: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Treasury';
          palletCall: {
            name: 'ProposeSpend';
            params: { value: bigint; beneficiary: MultiAddressLike };
          };
        }
      >
    >;

    /**
     * See [`Pallet::reject_proposal`].
     *
     * @param {number} proposalId
     **/
    rejectProposal: GenericTxCall<
      Rv,
      (proposalId: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Treasury';
          palletCall: {
            name: 'RejectProposal';
            params: { proposalId: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::approve_proposal`].
     *
     * @param {number} proposalId
     **/
    approveProposal: GenericTxCall<
      Rv,
      (proposalId: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Treasury';
          palletCall: {
            name: 'ApproveProposal';
            params: { proposalId: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::spend_local`].
     *
     * @param {bigint} amount
     * @param {MultiAddressLike} beneficiary
     **/
    spendLocal: GenericTxCall<
      Rv,
      (
        amount: bigint,
        beneficiary: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Treasury';
          palletCall: {
            name: 'SpendLocal';
            params: { amount: bigint; beneficiary: MultiAddressLike };
          };
        }
      >
    >;

    /**
     * See [`Pallet::remove_approval`].
     *
     * @param {number} proposalId
     **/
    removeApproval: GenericTxCall<
      Rv,
      (proposalId: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Treasury';
          palletCall: {
            name: 'RemoveApproval';
            params: { proposalId: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::spend`].
     *
     * @param {PolkadotRuntimeCommonImplsVersionedLocatableAsset} assetKind
     * @param {bigint} amount
     * @param {XcmVersionedLocation} beneficiary
     * @param {number | undefined} validFrom
     **/
    spend: GenericTxCall<
      Rv,
      (
        assetKind: PolkadotRuntimeCommonImplsVersionedLocatableAsset,
        amount: bigint,
        beneficiary: XcmVersionedLocation,
        validFrom: number | undefined,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Treasury';
          palletCall: {
            name: 'Spend';
            params: {
              assetKind: PolkadotRuntimeCommonImplsVersionedLocatableAsset;
              amount: bigint;
              beneficiary: XcmVersionedLocation;
              validFrom: number | undefined;
            };
          };
        }
      >
    >;

    /**
     * See [`Pallet::payout`].
     *
     * @param {number} index
     **/
    payout: GenericTxCall<
      Rv,
      (index: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Treasury';
          palletCall: {
            name: 'Payout';
            params: { index: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::check_status`].
     *
     * @param {number} index
     **/
    checkStatus: GenericTxCall<
      Rv,
      (index: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Treasury';
          palletCall: {
            name: 'CheckStatus';
            params: { index: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::void_spend`].
     *
     * @param {number} index
     **/
    voidSpend: GenericTxCall<
      Rv,
      (index: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Treasury';
          palletCall: {
            name: 'VoidSpend';
            params: { index: number };
          };
        }
      >
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>;
  };
  /**
   * Pallet `ConvictionVoting`'s transaction calls
   **/
  convictionVoting: {
    /**
     * See [`Pallet::vote`].
     *
     * @param {number} pollIndex
     * @param {PalletConvictionVotingVoteAccountVote} vote
     **/
    vote: GenericTxCall<
      Rv,
      (
        pollIndex: number,
        vote: PalletConvictionVotingVoteAccountVote,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'ConvictionVoting';
          palletCall: {
            name: 'Vote';
            params: { pollIndex: number; vote: PalletConvictionVotingVoteAccountVote };
          };
        }
      >
    >;

    /**
     * See [`Pallet::delegate`].
     *
     * @param {number} class_
     * @param {MultiAddressLike} to
     * @param {PalletConvictionVotingConviction} conviction
     * @param {bigint} balance
     **/
    delegate: GenericTxCall<
      Rv,
      (
        class_: number,
        to: MultiAddressLike,
        conviction: PalletConvictionVotingConviction,
        balance: bigint,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'ConvictionVoting';
          palletCall: {
            name: 'Delegate';
            params: {
              class: number;
              to: MultiAddressLike;
              conviction: PalletConvictionVotingConviction;
              balance: bigint;
            };
          };
        }
      >
    >;

    /**
     * See [`Pallet::undelegate`].
     *
     * @param {number} class_
     **/
    undelegate: GenericTxCall<
      Rv,
      (class_: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'ConvictionVoting';
          palletCall: {
            name: 'Undelegate';
            params: { class: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::unlock`].
     *
     * @param {number} class_
     * @param {MultiAddressLike} target
     **/
    unlock: GenericTxCall<
      Rv,
      (
        class_: number,
        target: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'ConvictionVoting';
          palletCall: {
            name: 'Unlock';
            params: { class: number; target: MultiAddressLike };
          };
        }
      >
    >;

    /**
     * See [`Pallet::remove_vote`].
     *
     * @param {number | undefined} class_
     * @param {number} index
     **/
    removeVote: GenericTxCall<
      Rv,
      (
        class_: number | undefined,
        index: number,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'ConvictionVoting';
          palletCall: {
            name: 'RemoveVote';
            params: { class: number | undefined; index: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::remove_other_vote`].
     *
     * @param {MultiAddressLike} target
     * @param {number} class_
     * @param {number} index
     **/
    removeOtherVote: GenericTxCall<
      Rv,
      (
        target: MultiAddressLike,
        class_: number,
        index: number,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'ConvictionVoting';
          palletCall: {
            name: 'RemoveOtherVote';
            params: { target: MultiAddressLike; class: number; index: number };
          };
        }
      >
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>;
  };
  /**
   * Pallet `Referenda`'s transaction calls
   **/
  referenda: {
    /**
     * See [`Pallet::submit`].
     *
     * @param {PaseoRuntimeOriginCaller} proposalOrigin
     * @param {FrameSupportPreimagesBounded} proposal
     * @param {FrameSupportScheduleDispatchTime} enactmentMoment
     **/
    submit: GenericTxCall<
      Rv,
      (
        proposalOrigin: PaseoRuntimeOriginCaller,
        proposal: FrameSupportPreimagesBounded,
        enactmentMoment: FrameSupportScheduleDispatchTime,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Referenda';
          palletCall: {
            name: 'Submit';
            params: {
              proposalOrigin: PaseoRuntimeOriginCaller;
              proposal: FrameSupportPreimagesBounded;
              enactmentMoment: FrameSupportScheduleDispatchTime;
            };
          };
        }
      >
    >;

    /**
     * See [`Pallet::place_decision_deposit`].
     *
     * @param {number} index
     **/
    placeDecisionDeposit: GenericTxCall<
      Rv,
      (index: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Referenda';
          palletCall: {
            name: 'PlaceDecisionDeposit';
            params: { index: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::refund_decision_deposit`].
     *
     * @param {number} index
     **/
    refundDecisionDeposit: GenericTxCall<
      Rv,
      (index: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Referenda';
          palletCall: {
            name: 'RefundDecisionDeposit';
            params: { index: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::cancel`].
     *
     * @param {number} index
     **/
    cancel: GenericTxCall<
      Rv,
      (index: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Referenda';
          palletCall: {
            name: 'Cancel';
            params: { index: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::kill`].
     *
     * @param {number} index
     **/
    kill: GenericTxCall<
      Rv,
      (index: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Referenda';
          palletCall: {
            name: 'Kill';
            params: { index: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::nudge_referendum`].
     *
     * @param {number} index
     **/
    nudgeReferendum: GenericTxCall<
      Rv,
      (index: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Referenda';
          palletCall: {
            name: 'NudgeReferendum';
            params: { index: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::one_fewer_deciding`].
     *
     * @param {number} track
     **/
    oneFewerDeciding: GenericTxCall<
      Rv,
      (track: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Referenda';
          palletCall: {
            name: 'OneFewerDeciding';
            params: { track: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::refund_submission_deposit`].
     *
     * @param {number} index
     **/
    refundSubmissionDeposit: GenericTxCall<
      Rv,
      (index: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Referenda';
          palletCall: {
            name: 'RefundSubmissionDeposit';
            params: { index: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_metadata`].
     *
     * @param {number} index
     * @param {H256 | undefined} maybeHash
     **/
    setMetadata: GenericTxCall<
      Rv,
      (
        index: number,
        maybeHash: H256 | undefined,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Referenda';
          palletCall: {
            name: 'SetMetadata';
            params: { index: number; maybeHash: H256 | undefined };
          };
        }
      >
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>;
  };
  /**
   * Pallet `Whitelist`'s transaction calls
   **/
  whitelist: {
    /**
     * See [`Pallet::whitelist_call`].
     *
     * @param {H256} callHash
     **/
    whitelistCall: GenericTxCall<
      Rv,
      (callHash: H256) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Whitelist';
          palletCall: {
            name: 'WhitelistCall';
            params: { callHash: H256 };
          };
        }
      >
    >;

    /**
     * See [`Pallet::remove_whitelisted_call`].
     *
     * @param {H256} callHash
     **/
    removeWhitelistedCall: GenericTxCall<
      Rv,
      (callHash: H256) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Whitelist';
          palletCall: {
            name: 'RemoveWhitelistedCall';
            params: { callHash: H256 };
          };
        }
      >
    >;

    /**
     * See [`Pallet::dispatch_whitelisted_call`].
     *
     * @param {H256} callHash
     * @param {number} callEncodedLen
     * @param {SpWeightsWeightV2Weight} callWeightWitness
     **/
    dispatchWhitelistedCall: GenericTxCall<
      Rv,
      (
        callHash: H256,
        callEncodedLen: number,
        callWeightWitness: SpWeightsWeightV2Weight,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Whitelist';
          palletCall: {
            name: 'DispatchWhitelistedCall';
            params: { callHash: H256; callEncodedLen: number; callWeightWitness: SpWeightsWeightV2Weight };
          };
        }
      >
    >;

    /**
     * See [`Pallet::dispatch_whitelisted_call_with_preimage`].
     *
     * @param {PaseoRuntimeRuntimeCallLike} call
     **/
    dispatchWhitelistedCallWithPreimage: GenericTxCall<
      Rv,
      (call: PaseoRuntimeRuntimeCallLike) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Whitelist';
          palletCall: {
            name: 'DispatchWhitelistedCallWithPreimage';
            params: { call: PaseoRuntimeRuntimeCallLike };
          };
        }
      >
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>;
  };
  /**
   * Pallet `Claims`'s transaction calls
   **/
  claims: {
    /**
     * See [`Pallet::claim`].
     *
     * @param {AccountId32Like} dest
     * @param {PolkadotRuntimeCommonClaimsEcdsaSignature} ethereumSignature
     **/
    claim: GenericTxCall<
      Rv,
      (
        dest: AccountId32Like,
        ethereumSignature: PolkadotRuntimeCommonClaimsEcdsaSignature,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Claims';
          palletCall: {
            name: 'Claim';
            params: { dest: AccountId32Like; ethereumSignature: PolkadotRuntimeCommonClaimsEcdsaSignature };
          };
        }
      >
    >;

    /**
     * See [`Pallet::mint_claim`].
     *
     * @param {EthereumAddressLike} who
     * @param {bigint} value
     * @param {[bigint, bigint, number] | undefined} vestingSchedule
     * @param {PolkadotRuntimeCommonClaimsStatementKind | undefined} statement
     **/
    mintClaim: GenericTxCall<
      Rv,
      (
        who: EthereumAddressLike,
        value: bigint,
        vestingSchedule: [bigint, bigint, number] | undefined,
        statement: PolkadotRuntimeCommonClaimsStatementKind | undefined,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Claims';
          palletCall: {
            name: 'MintClaim';
            params: {
              who: EthereumAddressLike;
              value: bigint;
              vestingSchedule: [bigint, bigint, number] | undefined;
              statement: PolkadotRuntimeCommonClaimsStatementKind | undefined;
            };
          };
        }
      >
    >;

    /**
     * See [`Pallet::claim_attest`].
     *
     * @param {AccountId32Like} dest
     * @param {PolkadotRuntimeCommonClaimsEcdsaSignature} ethereumSignature
     * @param {BytesLike} statement
     **/
    claimAttest: GenericTxCall<
      Rv,
      (
        dest: AccountId32Like,
        ethereumSignature: PolkadotRuntimeCommonClaimsEcdsaSignature,
        statement: BytesLike,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Claims';
          palletCall: {
            name: 'ClaimAttest';
            params: {
              dest: AccountId32Like;
              ethereumSignature: PolkadotRuntimeCommonClaimsEcdsaSignature;
              statement: BytesLike;
            };
          };
        }
      >
    >;

    /**
     * See [`Pallet::attest`].
     *
     * @param {BytesLike} statement
     **/
    attest: GenericTxCall<
      Rv,
      (statement: BytesLike) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Claims';
          palletCall: {
            name: 'Attest';
            params: { statement: BytesLike };
          };
        }
      >
    >;

    /**
     * See [`Pallet::move_claim`].
     *
     * @param {EthereumAddressLike} old
     * @param {EthereumAddressLike} new_
     * @param {AccountId32Like | undefined} maybePreclaim
     **/
    moveClaim: GenericTxCall<
      Rv,
      (
        old: EthereumAddressLike,
        new_: EthereumAddressLike,
        maybePreclaim: AccountId32Like | undefined,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Claims';
          palletCall: {
            name: 'MoveClaim';
            params: { old: EthereumAddressLike; new: EthereumAddressLike; maybePreclaim: AccountId32Like | undefined };
          };
        }
      >
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>;
  };
  /**
   * Pallet `Vesting`'s transaction calls
   **/
  vesting: {
    /**
     * See [`Pallet::vest`].
     *
     **/
    vest: GenericTxCall<
      Rv,
      () => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Vesting';
          palletCall: {
            name: 'Vest';
          };
        }
      >
    >;

    /**
     * See [`Pallet::vest_other`].
     *
     * @param {MultiAddressLike} target
     **/
    vestOther: GenericTxCall<
      Rv,
      (target: MultiAddressLike) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Vesting';
          palletCall: {
            name: 'VestOther';
            params: { target: MultiAddressLike };
          };
        }
      >
    >;

    /**
     * See [`Pallet::vested_transfer`].
     *
     * @param {MultiAddressLike} target
     * @param {PalletVestingVestingInfo} schedule
     **/
    vestedTransfer: GenericTxCall<
      Rv,
      (
        target: MultiAddressLike,
        schedule: PalletVestingVestingInfo,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Vesting';
          palletCall: {
            name: 'VestedTransfer';
            params: { target: MultiAddressLike; schedule: PalletVestingVestingInfo };
          };
        }
      >
    >;

    /**
     * See [`Pallet::force_vested_transfer`].
     *
     * @param {MultiAddressLike} source
     * @param {MultiAddressLike} target
     * @param {PalletVestingVestingInfo} schedule
     **/
    forceVestedTransfer: GenericTxCall<
      Rv,
      (
        source: MultiAddressLike,
        target: MultiAddressLike,
        schedule: PalletVestingVestingInfo,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Vesting';
          palletCall: {
            name: 'ForceVestedTransfer';
            params: { source: MultiAddressLike; target: MultiAddressLike; schedule: PalletVestingVestingInfo };
          };
        }
      >
    >;

    /**
     * See [`Pallet::merge_schedules`].
     *
     * @param {number} schedule1Index
     * @param {number} schedule2Index
     **/
    mergeSchedules: GenericTxCall<
      Rv,
      (
        schedule1Index: number,
        schedule2Index: number,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Vesting';
          palletCall: {
            name: 'MergeSchedules';
            params: { schedule1Index: number; schedule2Index: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::force_remove_vesting_schedule`].
     *
     * @param {MultiAddressLike} target
     * @param {number} scheduleIndex
     **/
    forceRemoveVestingSchedule: GenericTxCall<
      Rv,
      (
        target: MultiAddressLike,
        scheduleIndex: number,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Vesting';
          palletCall: {
            name: 'ForceRemoveVestingSchedule';
            params: { target: MultiAddressLike; scheduleIndex: number };
          };
        }
      >
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>;
  };
  /**
   * Pallet `Utility`'s transaction calls
   **/
  utility: {
    /**
     * See [`Pallet::batch`].
     *
     * @param {Array<PaseoRuntimeRuntimeCallLike>} calls
     **/
    batch: GenericTxCall<
      Rv,
      (calls: Array<PaseoRuntimeRuntimeCallLike>) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Utility';
          palletCall: {
            name: 'Batch';
            params: { calls: Array<PaseoRuntimeRuntimeCallLike> };
          };
        }
      >
    >;

    /**
     * See [`Pallet::as_derivative`].
     *
     * @param {number} index
     * @param {PaseoRuntimeRuntimeCallLike} call
     **/
    asDerivative: GenericTxCall<
      Rv,
      (
        index: number,
        call: PaseoRuntimeRuntimeCallLike,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Utility';
          palletCall: {
            name: 'AsDerivative';
            params: { index: number; call: PaseoRuntimeRuntimeCallLike };
          };
        }
      >
    >;

    /**
     * See [`Pallet::batch_all`].
     *
     * @param {Array<PaseoRuntimeRuntimeCallLike>} calls
     **/
    batchAll: GenericTxCall<
      Rv,
      (calls: Array<PaseoRuntimeRuntimeCallLike>) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Utility';
          palletCall: {
            name: 'BatchAll';
            params: { calls: Array<PaseoRuntimeRuntimeCallLike> };
          };
        }
      >
    >;

    /**
     * See [`Pallet::dispatch_as`].
     *
     * @param {PaseoRuntimeOriginCaller} asOrigin
     * @param {PaseoRuntimeRuntimeCallLike} call
     **/
    dispatchAs: GenericTxCall<
      Rv,
      (
        asOrigin: PaseoRuntimeOriginCaller,
        call: PaseoRuntimeRuntimeCallLike,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Utility';
          palletCall: {
            name: 'DispatchAs';
            params: { asOrigin: PaseoRuntimeOriginCaller; call: PaseoRuntimeRuntimeCallLike };
          };
        }
      >
    >;

    /**
     * See [`Pallet::force_batch`].
     *
     * @param {Array<PaseoRuntimeRuntimeCallLike>} calls
     **/
    forceBatch: GenericTxCall<
      Rv,
      (calls: Array<PaseoRuntimeRuntimeCallLike>) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Utility';
          palletCall: {
            name: 'ForceBatch';
            params: { calls: Array<PaseoRuntimeRuntimeCallLike> };
          };
        }
      >
    >;

    /**
     * See [`Pallet::with_weight`].
     *
     * @param {PaseoRuntimeRuntimeCallLike} call
     * @param {SpWeightsWeightV2Weight} weight
     **/
    withWeight: GenericTxCall<
      Rv,
      (
        call: PaseoRuntimeRuntimeCallLike,
        weight: SpWeightsWeightV2Weight,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Utility';
          palletCall: {
            name: 'WithWeight';
            params: { call: PaseoRuntimeRuntimeCallLike; weight: SpWeightsWeightV2Weight };
          };
        }
      >
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>;
  };
  /**
   * Pallet `Identity`'s transaction calls
   **/
  identity: {
    /**
     * See [`Pallet::add_registrar`].
     *
     * @param {MultiAddressLike} account
     **/
    addRegistrar: GenericTxCall<
      Rv,
      (account: MultiAddressLike) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Identity';
          palletCall: {
            name: 'AddRegistrar';
            params: { account: MultiAddressLike };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_identity`].
     *
     * @param {PalletIdentityLegacyIdentityInfo} info
     **/
    setIdentity: GenericTxCall<
      Rv,
      (info: PalletIdentityLegacyIdentityInfo) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Identity';
          palletCall: {
            name: 'SetIdentity';
            params: { info: PalletIdentityLegacyIdentityInfo };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_subs`].
     *
     * @param {Array<[AccountId32Like, Data]>} subs
     **/
    setSubs: GenericTxCall<
      Rv,
      (subs: Array<[AccountId32Like, Data]>) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Identity';
          palletCall: {
            name: 'SetSubs';
            params: { subs: Array<[AccountId32Like, Data]> };
          };
        }
      >
    >;

    /**
     * See [`Pallet::clear_identity`].
     *
     **/
    clearIdentity: GenericTxCall<
      Rv,
      () => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Identity';
          palletCall: {
            name: 'ClearIdentity';
          };
        }
      >
    >;

    /**
     * See [`Pallet::request_judgement`].
     *
     * @param {number} regIndex
     * @param {bigint} maxFee
     **/
    requestJudgement: GenericTxCall<
      Rv,
      (
        regIndex: number,
        maxFee: bigint,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Identity';
          palletCall: {
            name: 'RequestJudgement';
            params: { regIndex: number; maxFee: bigint };
          };
        }
      >
    >;

    /**
     * See [`Pallet::cancel_request`].
     *
     * @param {number} regIndex
     **/
    cancelRequest: GenericTxCall<
      Rv,
      (regIndex: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Identity';
          palletCall: {
            name: 'CancelRequest';
            params: { regIndex: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_fee`].
     *
     * @param {number} index
     * @param {bigint} fee
     **/
    setFee: GenericTxCall<
      Rv,
      (
        index: number,
        fee: bigint,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Identity';
          palletCall: {
            name: 'SetFee';
            params: { index: number; fee: bigint };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_account_id`].
     *
     * @param {number} index
     * @param {MultiAddressLike} new_
     **/
    setAccountId: GenericTxCall<
      Rv,
      (
        index: number,
        new_: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Identity';
          palletCall: {
            name: 'SetAccountId';
            params: { index: number; new: MultiAddressLike };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_fields`].
     *
     * @param {number} index
     * @param {bigint} fields
     **/
    setFields: GenericTxCall<
      Rv,
      (
        index: number,
        fields: bigint,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Identity';
          palletCall: {
            name: 'SetFields';
            params: { index: number; fields: bigint };
          };
        }
      >
    >;

    /**
     * See [`Pallet::provide_judgement`].
     *
     * @param {number} regIndex
     * @param {MultiAddressLike} target
     * @param {PalletIdentityJudgement} judgement
     * @param {H256} identity
     **/
    provideJudgement: GenericTxCall<
      Rv,
      (
        regIndex: number,
        target: MultiAddressLike,
        judgement: PalletIdentityJudgement,
        identity: H256,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Identity';
          palletCall: {
            name: 'ProvideJudgement';
            params: { regIndex: number; target: MultiAddressLike; judgement: PalletIdentityJudgement; identity: H256 };
          };
        }
      >
    >;

    /**
     * See [`Pallet::kill_identity`].
     *
     * @param {MultiAddressLike} target
     **/
    killIdentity: GenericTxCall<
      Rv,
      (target: MultiAddressLike) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Identity';
          palletCall: {
            name: 'KillIdentity';
            params: { target: MultiAddressLike };
          };
        }
      >
    >;

    /**
     * See [`Pallet::add_sub`].
     *
     * @param {MultiAddressLike} sub
     * @param {Data} data
     **/
    addSub: GenericTxCall<
      Rv,
      (
        sub: MultiAddressLike,
        data: Data,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Identity';
          palletCall: {
            name: 'AddSub';
            params: { sub: MultiAddressLike; data: Data };
          };
        }
      >
    >;

    /**
     * See [`Pallet::rename_sub`].
     *
     * @param {MultiAddressLike} sub
     * @param {Data} data
     **/
    renameSub: GenericTxCall<
      Rv,
      (
        sub: MultiAddressLike,
        data: Data,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Identity';
          palletCall: {
            name: 'RenameSub';
            params: { sub: MultiAddressLike; data: Data };
          };
        }
      >
    >;

    /**
     * See [`Pallet::remove_sub`].
     *
     * @param {MultiAddressLike} sub
     **/
    removeSub: GenericTxCall<
      Rv,
      (sub: MultiAddressLike) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Identity';
          palletCall: {
            name: 'RemoveSub';
            params: { sub: MultiAddressLike };
          };
        }
      >
    >;

    /**
     * See [`Pallet::quit_sub`].
     *
     **/
    quitSub: GenericTxCall<
      Rv,
      () => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Identity';
          palletCall: {
            name: 'QuitSub';
          };
        }
      >
    >;

    /**
     * See [`Pallet::add_username_authority`].
     *
     * @param {MultiAddressLike} authority
     * @param {BytesLike} suffix
     * @param {number} allocation
     **/
    addUsernameAuthority: GenericTxCall<
      Rv,
      (
        authority: MultiAddressLike,
        suffix: BytesLike,
        allocation: number,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Identity';
          palletCall: {
            name: 'AddUsernameAuthority';
            params: { authority: MultiAddressLike; suffix: BytesLike; allocation: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::remove_username_authority`].
     *
     * @param {MultiAddressLike} authority
     **/
    removeUsernameAuthority: GenericTxCall<
      Rv,
      (authority: MultiAddressLike) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Identity';
          palletCall: {
            name: 'RemoveUsernameAuthority';
            params: { authority: MultiAddressLike };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_username_for`].
     *
     * @param {MultiAddressLike} who
     * @param {BytesLike} username
     * @param {SpRuntimeMultiSignature | undefined} signature
     **/
    setUsernameFor: GenericTxCall<
      Rv,
      (
        who: MultiAddressLike,
        username: BytesLike,
        signature: SpRuntimeMultiSignature | undefined,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Identity';
          palletCall: {
            name: 'SetUsernameFor';
            params: { who: MultiAddressLike; username: BytesLike; signature: SpRuntimeMultiSignature | undefined };
          };
        }
      >
    >;

    /**
     * See [`Pallet::accept_username`].
     *
     * @param {BytesLike} username
     **/
    acceptUsername: GenericTxCall<
      Rv,
      (username: BytesLike) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Identity';
          palletCall: {
            name: 'AcceptUsername';
            params: { username: BytesLike };
          };
        }
      >
    >;

    /**
     * See [`Pallet::remove_expired_approval`].
     *
     * @param {BytesLike} username
     **/
    removeExpiredApproval: GenericTxCall<
      Rv,
      (username: BytesLike) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Identity';
          palletCall: {
            name: 'RemoveExpiredApproval';
            params: { username: BytesLike };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_primary_username`].
     *
     * @param {BytesLike} username
     **/
    setPrimaryUsername: GenericTxCall<
      Rv,
      (username: BytesLike) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Identity';
          palletCall: {
            name: 'SetPrimaryUsername';
            params: { username: BytesLike };
          };
        }
      >
    >;

    /**
     * See [`Pallet::remove_dangling_username`].
     *
     * @param {BytesLike} username
     **/
    removeDanglingUsername: GenericTxCall<
      Rv,
      (username: BytesLike) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Identity';
          palletCall: {
            name: 'RemoveDanglingUsername';
            params: { username: BytesLike };
          };
        }
      >
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>;
  };
  /**
   * Pallet `Proxy`'s transaction calls
   **/
  proxy: {
    /**
     * See [`Pallet::proxy`].
     *
     * @param {MultiAddressLike} real
     * @param {PaseoRuntimeProxyType | undefined} forceProxyType
     * @param {PaseoRuntimeRuntimeCallLike} call
     **/
    proxy: GenericTxCall<
      Rv,
      (
        real: MultiAddressLike,
        forceProxyType: PaseoRuntimeProxyType | undefined,
        call: PaseoRuntimeRuntimeCallLike,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Proxy';
          palletCall: {
            name: 'Proxy';
            params: {
              real: MultiAddressLike;
              forceProxyType: PaseoRuntimeProxyType | undefined;
              call: PaseoRuntimeRuntimeCallLike;
            };
          };
        }
      >
    >;

    /**
     * See [`Pallet::add_proxy`].
     *
     * @param {MultiAddressLike} delegate
     * @param {PaseoRuntimeProxyType} proxyType
     * @param {number} delay
     **/
    addProxy: GenericTxCall<
      Rv,
      (
        delegate: MultiAddressLike,
        proxyType: PaseoRuntimeProxyType,
        delay: number,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Proxy';
          palletCall: {
            name: 'AddProxy';
            params: { delegate: MultiAddressLike; proxyType: PaseoRuntimeProxyType; delay: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::remove_proxy`].
     *
     * @param {MultiAddressLike} delegate
     * @param {PaseoRuntimeProxyType} proxyType
     * @param {number} delay
     **/
    removeProxy: GenericTxCall<
      Rv,
      (
        delegate: MultiAddressLike,
        proxyType: PaseoRuntimeProxyType,
        delay: number,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Proxy';
          palletCall: {
            name: 'RemoveProxy';
            params: { delegate: MultiAddressLike; proxyType: PaseoRuntimeProxyType; delay: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::remove_proxies`].
     *
     **/
    removeProxies: GenericTxCall<
      Rv,
      () => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Proxy';
          palletCall: {
            name: 'RemoveProxies';
          };
        }
      >
    >;

    /**
     * See [`Pallet::create_pure`].
     *
     * @param {PaseoRuntimeProxyType} proxyType
     * @param {number} delay
     * @param {number} index
     **/
    createPure: GenericTxCall<
      Rv,
      (
        proxyType: PaseoRuntimeProxyType,
        delay: number,
        index: number,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Proxy';
          palletCall: {
            name: 'CreatePure';
            params: { proxyType: PaseoRuntimeProxyType; delay: number; index: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::kill_pure`].
     *
     * @param {MultiAddressLike} spawner
     * @param {PaseoRuntimeProxyType} proxyType
     * @param {number} index
     * @param {number} height
     * @param {number} extIndex
     **/
    killPure: GenericTxCall<
      Rv,
      (
        spawner: MultiAddressLike,
        proxyType: PaseoRuntimeProxyType,
        index: number,
        height: number,
        extIndex: number,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Proxy';
          palletCall: {
            name: 'KillPure';
            params: {
              spawner: MultiAddressLike;
              proxyType: PaseoRuntimeProxyType;
              index: number;
              height: number;
              extIndex: number;
            };
          };
        }
      >
    >;

    /**
     * See [`Pallet::announce`].
     *
     * @param {MultiAddressLike} real
     * @param {H256} callHash
     **/
    announce: GenericTxCall<
      Rv,
      (
        real: MultiAddressLike,
        callHash: H256,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Proxy';
          palletCall: {
            name: 'Announce';
            params: { real: MultiAddressLike; callHash: H256 };
          };
        }
      >
    >;

    /**
     * See [`Pallet::remove_announcement`].
     *
     * @param {MultiAddressLike} real
     * @param {H256} callHash
     **/
    removeAnnouncement: GenericTxCall<
      Rv,
      (
        real: MultiAddressLike,
        callHash: H256,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Proxy';
          palletCall: {
            name: 'RemoveAnnouncement';
            params: { real: MultiAddressLike; callHash: H256 };
          };
        }
      >
    >;

    /**
     * See [`Pallet::reject_announcement`].
     *
     * @param {MultiAddressLike} delegate
     * @param {H256} callHash
     **/
    rejectAnnouncement: GenericTxCall<
      Rv,
      (
        delegate: MultiAddressLike,
        callHash: H256,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Proxy';
          palletCall: {
            name: 'RejectAnnouncement';
            params: { delegate: MultiAddressLike; callHash: H256 };
          };
        }
      >
    >;

    /**
     * See [`Pallet::proxy_announced`].
     *
     * @param {MultiAddressLike} delegate
     * @param {MultiAddressLike} real
     * @param {PaseoRuntimeProxyType | undefined} forceProxyType
     * @param {PaseoRuntimeRuntimeCallLike} call
     **/
    proxyAnnounced: GenericTxCall<
      Rv,
      (
        delegate: MultiAddressLike,
        real: MultiAddressLike,
        forceProxyType: PaseoRuntimeProxyType | undefined,
        call: PaseoRuntimeRuntimeCallLike,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Proxy';
          palletCall: {
            name: 'ProxyAnnounced';
            params: {
              delegate: MultiAddressLike;
              real: MultiAddressLike;
              forceProxyType: PaseoRuntimeProxyType | undefined;
              call: PaseoRuntimeRuntimeCallLike;
            };
          };
        }
      >
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>;
  };
  /**
   * Pallet `Multisig`'s transaction calls
   **/
  multisig: {
    /**
     * See [`Pallet::as_multi_threshold_1`].
     *
     * @param {Array<AccountId32Like>} otherSignatories
     * @param {PaseoRuntimeRuntimeCallLike} call
     **/
    asMultiThreshold1: GenericTxCall<
      Rv,
      (
        otherSignatories: Array<AccountId32Like>,
        call: PaseoRuntimeRuntimeCallLike,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Multisig';
          palletCall: {
            name: 'AsMultiThreshold1';
            params: { otherSignatories: Array<AccountId32Like>; call: PaseoRuntimeRuntimeCallLike };
          };
        }
      >
    >;

    /**
     * See [`Pallet::as_multi`].
     *
     * @param {number} threshold
     * @param {Array<AccountId32Like>} otherSignatories
     * @param {PalletMultisigTimepoint | undefined} maybeTimepoint
     * @param {PaseoRuntimeRuntimeCallLike} call
     * @param {SpWeightsWeightV2Weight} maxWeight
     **/
    asMulti: GenericTxCall<
      Rv,
      (
        threshold: number,
        otherSignatories: Array<AccountId32Like>,
        maybeTimepoint: PalletMultisigTimepoint | undefined,
        call: PaseoRuntimeRuntimeCallLike,
        maxWeight: SpWeightsWeightV2Weight,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Multisig';
          palletCall: {
            name: 'AsMulti';
            params: {
              threshold: number;
              otherSignatories: Array<AccountId32Like>;
              maybeTimepoint: PalletMultisigTimepoint | undefined;
              call: PaseoRuntimeRuntimeCallLike;
              maxWeight: SpWeightsWeightV2Weight;
            };
          };
        }
      >
    >;

    /**
     * See [`Pallet::approve_as_multi`].
     *
     * @param {number} threshold
     * @param {Array<AccountId32Like>} otherSignatories
     * @param {PalletMultisigTimepoint | undefined} maybeTimepoint
     * @param {FixedBytes<32>} callHash
     * @param {SpWeightsWeightV2Weight} maxWeight
     **/
    approveAsMulti: GenericTxCall<
      Rv,
      (
        threshold: number,
        otherSignatories: Array<AccountId32Like>,
        maybeTimepoint: PalletMultisigTimepoint | undefined,
        callHash: FixedBytes<32>,
        maxWeight: SpWeightsWeightV2Weight,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Multisig';
          palletCall: {
            name: 'ApproveAsMulti';
            params: {
              threshold: number;
              otherSignatories: Array<AccountId32Like>;
              maybeTimepoint: PalletMultisigTimepoint | undefined;
              callHash: FixedBytes<32>;
              maxWeight: SpWeightsWeightV2Weight;
            };
          };
        }
      >
    >;

    /**
     * See [`Pallet::cancel_as_multi`].
     *
     * @param {number} threshold
     * @param {Array<AccountId32Like>} otherSignatories
     * @param {PalletMultisigTimepoint} timepoint
     * @param {FixedBytes<32>} callHash
     **/
    cancelAsMulti: GenericTxCall<
      Rv,
      (
        threshold: number,
        otherSignatories: Array<AccountId32Like>,
        timepoint: PalletMultisigTimepoint,
        callHash: FixedBytes<32>,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Multisig';
          palletCall: {
            name: 'CancelAsMulti';
            params: {
              threshold: number;
              otherSignatories: Array<AccountId32Like>;
              timepoint: PalletMultisigTimepoint;
              callHash: FixedBytes<32>;
            };
          };
        }
      >
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>;
  };
  /**
   * Pallet `Bounties`'s transaction calls
   **/
  bounties: {
    /**
     * See [`Pallet::propose_bounty`].
     *
     * @param {bigint} value
     * @param {BytesLike} description
     **/
    proposeBounty: GenericTxCall<
      Rv,
      (
        value: bigint,
        description: BytesLike,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Bounties';
          palletCall: {
            name: 'ProposeBounty';
            params: { value: bigint; description: BytesLike };
          };
        }
      >
    >;

    /**
     * See [`Pallet::approve_bounty`].
     *
     * @param {number} bountyId
     **/
    approveBounty: GenericTxCall<
      Rv,
      (bountyId: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Bounties';
          palletCall: {
            name: 'ApproveBounty';
            params: { bountyId: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::propose_curator`].
     *
     * @param {number} bountyId
     * @param {MultiAddressLike} curator
     * @param {bigint} fee
     **/
    proposeCurator: GenericTxCall<
      Rv,
      (
        bountyId: number,
        curator: MultiAddressLike,
        fee: bigint,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Bounties';
          palletCall: {
            name: 'ProposeCurator';
            params: { bountyId: number; curator: MultiAddressLike; fee: bigint };
          };
        }
      >
    >;

    /**
     * See [`Pallet::unassign_curator`].
     *
     * @param {number} bountyId
     **/
    unassignCurator: GenericTxCall<
      Rv,
      (bountyId: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Bounties';
          palletCall: {
            name: 'UnassignCurator';
            params: { bountyId: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::accept_curator`].
     *
     * @param {number} bountyId
     **/
    acceptCurator: GenericTxCall<
      Rv,
      (bountyId: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Bounties';
          palletCall: {
            name: 'AcceptCurator';
            params: { bountyId: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::award_bounty`].
     *
     * @param {number} bountyId
     * @param {MultiAddressLike} beneficiary
     **/
    awardBounty: GenericTxCall<
      Rv,
      (
        bountyId: number,
        beneficiary: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Bounties';
          palletCall: {
            name: 'AwardBounty';
            params: { bountyId: number; beneficiary: MultiAddressLike };
          };
        }
      >
    >;

    /**
     * See [`Pallet::claim_bounty`].
     *
     * @param {number} bountyId
     **/
    claimBounty: GenericTxCall<
      Rv,
      (bountyId: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Bounties';
          palletCall: {
            name: 'ClaimBounty';
            params: { bountyId: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::close_bounty`].
     *
     * @param {number} bountyId
     **/
    closeBounty: GenericTxCall<
      Rv,
      (bountyId: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Bounties';
          palletCall: {
            name: 'CloseBounty';
            params: { bountyId: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::extend_bounty_expiry`].
     *
     * @param {number} bountyId
     * @param {BytesLike} remark
     **/
    extendBountyExpiry: GenericTxCall<
      Rv,
      (
        bountyId: number,
        remark: BytesLike,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Bounties';
          palletCall: {
            name: 'ExtendBountyExpiry';
            params: { bountyId: number; remark: BytesLike };
          };
        }
      >
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>;
  };
  /**
   * Pallet `ChildBounties`'s transaction calls
   **/
  childBounties: {
    /**
     * See [`Pallet::add_child_bounty`].
     *
     * @param {number} parentBountyId
     * @param {bigint} value
     * @param {BytesLike} description
     **/
    addChildBounty: GenericTxCall<
      Rv,
      (
        parentBountyId: number,
        value: bigint,
        description: BytesLike,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'ChildBounties';
          palletCall: {
            name: 'AddChildBounty';
            params: { parentBountyId: number; value: bigint; description: BytesLike };
          };
        }
      >
    >;

    /**
     * See [`Pallet::propose_curator`].
     *
     * @param {number} parentBountyId
     * @param {number} childBountyId
     * @param {MultiAddressLike} curator
     * @param {bigint} fee
     **/
    proposeCurator: GenericTxCall<
      Rv,
      (
        parentBountyId: number,
        childBountyId: number,
        curator: MultiAddressLike,
        fee: bigint,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'ChildBounties';
          palletCall: {
            name: 'ProposeCurator';
            params: { parentBountyId: number; childBountyId: number; curator: MultiAddressLike; fee: bigint };
          };
        }
      >
    >;

    /**
     * See [`Pallet::accept_curator`].
     *
     * @param {number} parentBountyId
     * @param {number} childBountyId
     **/
    acceptCurator: GenericTxCall<
      Rv,
      (
        parentBountyId: number,
        childBountyId: number,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'ChildBounties';
          palletCall: {
            name: 'AcceptCurator';
            params: { parentBountyId: number; childBountyId: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::unassign_curator`].
     *
     * @param {number} parentBountyId
     * @param {number} childBountyId
     **/
    unassignCurator: GenericTxCall<
      Rv,
      (
        parentBountyId: number,
        childBountyId: number,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'ChildBounties';
          palletCall: {
            name: 'UnassignCurator';
            params: { parentBountyId: number; childBountyId: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::award_child_bounty`].
     *
     * @param {number} parentBountyId
     * @param {number} childBountyId
     * @param {MultiAddressLike} beneficiary
     **/
    awardChildBounty: GenericTxCall<
      Rv,
      (
        parentBountyId: number,
        childBountyId: number,
        beneficiary: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'ChildBounties';
          palletCall: {
            name: 'AwardChildBounty';
            params: { parentBountyId: number; childBountyId: number; beneficiary: MultiAddressLike };
          };
        }
      >
    >;

    /**
     * See [`Pallet::claim_child_bounty`].
     *
     * @param {number} parentBountyId
     * @param {number} childBountyId
     **/
    claimChildBounty: GenericTxCall<
      Rv,
      (
        parentBountyId: number,
        childBountyId: number,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'ChildBounties';
          palletCall: {
            name: 'ClaimChildBounty';
            params: { parentBountyId: number; childBountyId: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::close_child_bounty`].
     *
     * @param {number} parentBountyId
     * @param {number} childBountyId
     **/
    closeChildBounty: GenericTxCall<
      Rv,
      (
        parentBountyId: number,
        childBountyId: number,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'ChildBounties';
          palletCall: {
            name: 'CloseChildBounty';
            params: { parentBountyId: number; childBountyId: number };
          };
        }
      >
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>;
  };
  /**
   * Pallet `ElectionProviderMultiPhase`'s transaction calls
   **/
  electionProviderMultiPhase: {
    /**
     * See [`Pallet::submit_unsigned`].
     *
     * @param {PalletElectionProviderMultiPhaseRawSolution} rawSolution
     * @param {PalletElectionProviderMultiPhaseSolutionOrSnapshotSize} witness
     **/
    submitUnsigned: GenericTxCall<
      Rv,
      (
        rawSolution: PalletElectionProviderMultiPhaseRawSolution,
        witness: PalletElectionProviderMultiPhaseSolutionOrSnapshotSize,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'ElectionProviderMultiPhase';
          palletCall: {
            name: 'SubmitUnsigned';
            params: {
              rawSolution: PalletElectionProviderMultiPhaseRawSolution;
              witness: PalletElectionProviderMultiPhaseSolutionOrSnapshotSize;
            };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_minimum_untrusted_score`].
     *
     * @param {SpNposElectionsElectionScore | undefined} maybeNextScore
     **/
    setMinimumUntrustedScore: GenericTxCall<
      Rv,
      (maybeNextScore: SpNposElectionsElectionScore | undefined) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'ElectionProviderMultiPhase';
          palletCall: {
            name: 'SetMinimumUntrustedScore';
            params: { maybeNextScore: SpNposElectionsElectionScore | undefined };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_emergency_election_result`].
     *
     * @param {Array<[AccountId32Like, SpNposElectionsSupport]>} supports
     **/
    setEmergencyElectionResult: GenericTxCall<
      Rv,
      (supports: Array<[AccountId32Like, SpNposElectionsSupport]>) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'ElectionProviderMultiPhase';
          palletCall: {
            name: 'SetEmergencyElectionResult';
            params: { supports: Array<[AccountId32Like, SpNposElectionsSupport]> };
          };
        }
      >
    >;

    /**
     * See [`Pallet::submit`].
     *
     * @param {PalletElectionProviderMultiPhaseRawSolution} rawSolution
     **/
    submit: GenericTxCall<
      Rv,
      (rawSolution: PalletElectionProviderMultiPhaseRawSolution) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'ElectionProviderMultiPhase';
          palletCall: {
            name: 'Submit';
            params: { rawSolution: PalletElectionProviderMultiPhaseRawSolution };
          };
        }
      >
    >;

    /**
     * See [`Pallet::governance_fallback`].
     *
     * @param {number | undefined} maybeMaxVoters
     * @param {number | undefined} maybeMaxTargets
     **/
    governanceFallback: GenericTxCall<
      Rv,
      (
        maybeMaxVoters: number | undefined,
        maybeMaxTargets: number | undefined,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'ElectionProviderMultiPhase';
          palletCall: {
            name: 'GovernanceFallback';
            params: { maybeMaxVoters: number | undefined; maybeMaxTargets: number | undefined };
          };
        }
      >
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>;
  };
  /**
   * Pallet `VoterList`'s transaction calls
   **/
  voterList: {
    /**
     * See [`Pallet::rebag`].
     *
     * @param {MultiAddressLike} dislocated
     **/
    rebag: GenericTxCall<
      Rv,
      (dislocated: MultiAddressLike) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'VoterList';
          palletCall: {
            name: 'Rebag';
            params: { dislocated: MultiAddressLike };
          };
        }
      >
    >;

    /**
     * See [`Pallet::put_in_front_of`].
     *
     * @param {MultiAddressLike} lighter
     **/
    putInFrontOf: GenericTxCall<
      Rv,
      (lighter: MultiAddressLike) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'VoterList';
          palletCall: {
            name: 'PutInFrontOf';
            params: { lighter: MultiAddressLike };
          };
        }
      >
    >;

    /**
     * See [`Pallet::put_in_front_of_other`].
     *
     * @param {MultiAddressLike} heavier
     * @param {MultiAddressLike} lighter
     **/
    putInFrontOfOther: GenericTxCall<
      Rv,
      (
        heavier: MultiAddressLike,
        lighter: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'VoterList';
          palletCall: {
            name: 'PutInFrontOfOther';
            params: { heavier: MultiAddressLike; lighter: MultiAddressLike };
          };
        }
      >
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>;
  };
  /**
   * Pallet `NominationPools`'s transaction calls
   **/
  nominationPools: {
    /**
     * See [`Pallet::join`].
     *
     * @param {bigint} amount
     * @param {number} poolId
     **/
    join: GenericTxCall<
      Rv,
      (
        amount: bigint,
        poolId: number,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'NominationPools';
          palletCall: {
            name: 'Join';
            params: { amount: bigint; poolId: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::bond_extra`].
     *
     * @param {PalletNominationPoolsBondExtra} extra
     **/
    bondExtra: GenericTxCall<
      Rv,
      (extra: PalletNominationPoolsBondExtra) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'NominationPools';
          palletCall: {
            name: 'BondExtra';
            params: { extra: PalletNominationPoolsBondExtra };
          };
        }
      >
    >;

    /**
     * See [`Pallet::claim_payout`].
     *
     **/
    claimPayout: GenericTxCall<
      Rv,
      () => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'NominationPools';
          palletCall: {
            name: 'ClaimPayout';
          };
        }
      >
    >;

    /**
     * See [`Pallet::unbond`].
     *
     * @param {MultiAddressLike} memberAccount
     * @param {bigint} unbondingPoints
     **/
    unbond: GenericTxCall<
      Rv,
      (
        memberAccount: MultiAddressLike,
        unbondingPoints: bigint,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'NominationPools';
          palletCall: {
            name: 'Unbond';
            params: { memberAccount: MultiAddressLike; unbondingPoints: bigint };
          };
        }
      >
    >;

    /**
     * See [`Pallet::pool_withdraw_unbonded`].
     *
     * @param {number} poolId
     * @param {number} numSlashingSpans
     **/
    poolWithdrawUnbonded: GenericTxCall<
      Rv,
      (
        poolId: number,
        numSlashingSpans: number,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'NominationPools';
          palletCall: {
            name: 'PoolWithdrawUnbonded';
            params: { poolId: number; numSlashingSpans: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::withdraw_unbonded`].
     *
     * @param {MultiAddressLike} memberAccount
     * @param {number} numSlashingSpans
     **/
    withdrawUnbonded: GenericTxCall<
      Rv,
      (
        memberAccount: MultiAddressLike,
        numSlashingSpans: number,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'NominationPools';
          palletCall: {
            name: 'WithdrawUnbonded';
            params: { memberAccount: MultiAddressLike; numSlashingSpans: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::create`].
     *
     * @param {bigint} amount
     * @param {MultiAddressLike} root
     * @param {MultiAddressLike} nominator
     * @param {MultiAddressLike} bouncer
     **/
    create: GenericTxCall<
      Rv,
      (
        amount: bigint,
        root: MultiAddressLike,
        nominator: MultiAddressLike,
        bouncer: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'NominationPools';
          palletCall: {
            name: 'Create';
            params: { amount: bigint; root: MultiAddressLike; nominator: MultiAddressLike; bouncer: MultiAddressLike };
          };
        }
      >
    >;

    /**
     * See [`Pallet::create_with_pool_id`].
     *
     * @param {bigint} amount
     * @param {MultiAddressLike} root
     * @param {MultiAddressLike} nominator
     * @param {MultiAddressLike} bouncer
     * @param {number} poolId
     **/
    createWithPoolId: GenericTxCall<
      Rv,
      (
        amount: bigint,
        root: MultiAddressLike,
        nominator: MultiAddressLike,
        bouncer: MultiAddressLike,
        poolId: number,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'NominationPools';
          palletCall: {
            name: 'CreateWithPoolId';
            params: {
              amount: bigint;
              root: MultiAddressLike;
              nominator: MultiAddressLike;
              bouncer: MultiAddressLike;
              poolId: number;
            };
          };
        }
      >
    >;

    /**
     * See [`Pallet::nominate`].
     *
     * @param {number} poolId
     * @param {Array<AccountId32Like>} validators
     **/
    nominate: GenericTxCall<
      Rv,
      (
        poolId: number,
        validators: Array<AccountId32Like>,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'NominationPools';
          palletCall: {
            name: 'Nominate';
            params: { poolId: number; validators: Array<AccountId32Like> };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_state`].
     *
     * @param {number} poolId
     * @param {PalletNominationPoolsPoolState} state
     **/
    setState: GenericTxCall<
      Rv,
      (
        poolId: number,
        state: PalletNominationPoolsPoolState,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'NominationPools';
          palletCall: {
            name: 'SetState';
            params: { poolId: number; state: PalletNominationPoolsPoolState };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_metadata`].
     *
     * @param {number} poolId
     * @param {BytesLike} metadata
     **/
    setMetadata: GenericTxCall<
      Rv,
      (
        poolId: number,
        metadata: BytesLike,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'NominationPools';
          palletCall: {
            name: 'SetMetadata';
            params: { poolId: number; metadata: BytesLike };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_configs`].
     *
     * @param {PalletNominationPoolsConfigOp} minJoinBond
     * @param {PalletNominationPoolsConfigOp} minCreateBond
     * @param {PalletNominationPoolsConfigOpU32} maxPools
     * @param {PalletNominationPoolsConfigOpU32} maxMembers
     * @param {PalletNominationPoolsConfigOpU32} maxMembersPerPool
     * @param {PalletNominationPoolsConfigOpPerbill} globalMaxCommission
     **/
    setConfigs: GenericTxCall<
      Rv,
      (
        minJoinBond: PalletNominationPoolsConfigOp,
        minCreateBond: PalletNominationPoolsConfigOp,
        maxPools: PalletNominationPoolsConfigOpU32,
        maxMembers: PalletNominationPoolsConfigOpU32,
        maxMembersPerPool: PalletNominationPoolsConfigOpU32,
        globalMaxCommission: PalletNominationPoolsConfigOpPerbill,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'NominationPools';
          palletCall: {
            name: 'SetConfigs';
            params: {
              minJoinBond: PalletNominationPoolsConfigOp;
              minCreateBond: PalletNominationPoolsConfigOp;
              maxPools: PalletNominationPoolsConfigOpU32;
              maxMembers: PalletNominationPoolsConfigOpU32;
              maxMembersPerPool: PalletNominationPoolsConfigOpU32;
              globalMaxCommission: PalletNominationPoolsConfigOpPerbill;
            };
          };
        }
      >
    >;

    /**
     * See [`Pallet::update_roles`].
     *
     * @param {number} poolId
     * @param {PalletNominationPoolsConfigOp004} newRoot
     * @param {PalletNominationPoolsConfigOp004} newNominator
     * @param {PalletNominationPoolsConfigOp004} newBouncer
     **/
    updateRoles: GenericTxCall<
      Rv,
      (
        poolId: number,
        newRoot: PalletNominationPoolsConfigOp004,
        newNominator: PalletNominationPoolsConfigOp004,
        newBouncer: PalletNominationPoolsConfigOp004,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'NominationPools';
          palletCall: {
            name: 'UpdateRoles';
            params: {
              poolId: number;
              newRoot: PalletNominationPoolsConfigOp004;
              newNominator: PalletNominationPoolsConfigOp004;
              newBouncer: PalletNominationPoolsConfigOp004;
            };
          };
        }
      >
    >;

    /**
     * See [`Pallet::chill`].
     *
     * @param {number} poolId
     **/
    chill: GenericTxCall<
      Rv,
      (poolId: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'NominationPools';
          palletCall: {
            name: 'Chill';
            params: { poolId: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::bond_extra_other`].
     *
     * @param {MultiAddressLike} member
     * @param {PalletNominationPoolsBondExtra} extra
     **/
    bondExtraOther: GenericTxCall<
      Rv,
      (
        member: MultiAddressLike,
        extra: PalletNominationPoolsBondExtra,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'NominationPools';
          palletCall: {
            name: 'BondExtraOther';
            params: { member: MultiAddressLike; extra: PalletNominationPoolsBondExtra };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_claim_permission`].
     *
     * @param {PalletNominationPoolsClaimPermission} permission
     **/
    setClaimPermission: GenericTxCall<
      Rv,
      (permission: PalletNominationPoolsClaimPermission) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'NominationPools';
          palletCall: {
            name: 'SetClaimPermission';
            params: { permission: PalletNominationPoolsClaimPermission };
          };
        }
      >
    >;

    /**
     * See [`Pallet::claim_payout_other`].
     *
     * @param {AccountId32Like} other
     **/
    claimPayoutOther: GenericTxCall<
      Rv,
      (other: AccountId32Like) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'NominationPools';
          palletCall: {
            name: 'ClaimPayoutOther';
            params: { other: AccountId32Like };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_commission`].
     *
     * @param {number} poolId
     * @param {[Perbill, AccountId32Like] | undefined} newCommission
     **/
    setCommission: GenericTxCall<
      Rv,
      (
        poolId: number,
        newCommission: [Perbill, AccountId32Like] | undefined,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'NominationPools';
          palletCall: {
            name: 'SetCommission';
            params: { poolId: number; newCommission: [Perbill, AccountId32Like] | undefined };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_commission_max`].
     *
     * @param {number} poolId
     * @param {Perbill} maxCommission
     **/
    setCommissionMax: GenericTxCall<
      Rv,
      (
        poolId: number,
        maxCommission: Perbill,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'NominationPools';
          palletCall: {
            name: 'SetCommissionMax';
            params: { poolId: number; maxCommission: Perbill };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_commission_change_rate`].
     *
     * @param {number} poolId
     * @param {PalletNominationPoolsCommissionChangeRate} changeRate
     **/
    setCommissionChangeRate: GenericTxCall<
      Rv,
      (
        poolId: number,
        changeRate: PalletNominationPoolsCommissionChangeRate,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'NominationPools';
          palletCall: {
            name: 'SetCommissionChangeRate';
            params: { poolId: number; changeRate: PalletNominationPoolsCommissionChangeRate };
          };
        }
      >
    >;

    /**
     * See [`Pallet::claim_commission`].
     *
     * @param {number} poolId
     **/
    claimCommission: GenericTxCall<
      Rv,
      (poolId: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'NominationPools';
          palletCall: {
            name: 'ClaimCommission';
            params: { poolId: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::adjust_pool_deposit`].
     *
     * @param {number} poolId
     **/
    adjustPoolDeposit: GenericTxCall<
      Rv,
      (poolId: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'NominationPools';
          palletCall: {
            name: 'AdjustPoolDeposit';
            params: { poolId: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_commission_claim_permission`].
     *
     * @param {number} poolId
     * @param {PalletNominationPoolsCommissionClaimPermission | undefined} permission
     **/
    setCommissionClaimPermission: GenericTxCall<
      Rv,
      (
        poolId: number,
        permission: PalletNominationPoolsCommissionClaimPermission | undefined,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'NominationPools';
          palletCall: {
            name: 'SetCommissionClaimPermission';
            params: { poolId: number; permission: PalletNominationPoolsCommissionClaimPermission | undefined };
          };
        }
      >
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>;
  };
  /**
   * Pallet `FastUnstake`'s transaction calls
   **/
  fastUnstake: {
    /**
     * See [`Pallet::register_fast_unstake`].
     *
     **/
    registerFastUnstake: GenericTxCall<
      Rv,
      () => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'FastUnstake';
          palletCall: {
            name: 'RegisterFastUnstake';
          };
        }
      >
    >;

    /**
     * See [`Pallet::deregister`].
     *
     **/
    deregister: GenericTxCall<
      Rv,
      () => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'FastUnstake';
          palletCall: {
            name: 'Deregister';
          };
        }
      >
    >;

    /**
     * See [`Pallet::control`].
     *
     * @param {number} erasToCheck
     **/
    control: GenericTxCall<
      Rv,
      (erasToCheck: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'FastUnstake';
          palletCall: {
            name: 'Control';
            params: { erasToCheck: number };
          };
        }
      >
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>;
  };
  /**
   * Pallet `Configuration`'s transaction calls
   **/
  configuration: {
    /**
     * See [`Pallet::set_validation_upgrade_cooldown`].
     *
     * @param {number} new_
     **/
    setValidationUpgradeCooldown: GenericTxCall<
      Rv,
      (new_: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Configuration';
          palletCall: {
            name: 'SetValidationUpgradeCooldown';
            params: { new: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_validation_upgrade_delay`].
     *
     * @param {number} new_
     **/
    setValidationUpgradeDelay: GenericTxCall<
      Rv,
      (new_: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Configuration';
          palletCall: {
            name: 'SetValidationUpgradeDelay';
            params: { new: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_code_retention_period`].
     *
     * @param {number} new_
     **/
    setCodeRetentionPeriod: GenericTxCall<
      Rv,
      (new_: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Configuration';
          palletCall: {
            name: 'SetCodeRetentionPeriod';
            params: { new: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_max_code_size`].
     *
     * @param {number} new_
     **/
    setMaxCodeSize: GenericTxCall<
      Rv,
      (new_: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Configuration';
          palletCall: {
            name: 'SetMaxCodeSize';
            params: { new: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_max_pov_size`].
     *
     * @param {number} new_
     **/
    setMaxPovSize: GenericTxCall<
      Rv,
      (new_: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Configuration';
          palletCall: {
            name: 'SetMaxPovSize';
            params: { new: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_max_head_data_size`].
     *
     * @param {number} new_
     **/
    setMaxHeadDataSize: GenericTxCall<
      Rv,
      (new_: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Configuration';
          palletCall: {
            name: 'SetMaxHeadDataSize';
            params: { new: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_coretime_cores`].
     *
     * @param {number} new_
     **/
    setCoretimeCores: GenericTxCall<
      Rv,
      (new_: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Configuration';
          palletCall: {
            name: 'SetCoretimeCores';
            params: { new: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_on_demand_retries`].
     *
     * @param {number} new_
     **/
    setOnDemandRetries: GenericTxCall<
      Rv,
      (new_: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Configuration';
          palletCall: {
            name: 'SetOnDemandRetries';
            params: { new: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_group_rotation_frequency`].
     *
     * @param {number} new_
     **/
    setGroupRotationFrequency: GenericTxCall<
      Rv,
      (new_: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Configuration';
          palletCall: {
            name: 'SetGroupRotationFrequency';
            params: { new: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_paras_availability_period`].
     *
     * @param {number} new_
     **/
    setParasAvailabilityPeriod: GenericTxCall<
      Rv,
      (new_: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Configuration';
          palletCall: {
            name: 'SetParasAvailabilityPeriod';
            params: { new: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_scheduling_lookahead`].
     *
     * @param {number} new_
     **/
    setSchedulingLookahead: GenericTxCall<
      Rv,
      (new_: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Configuration';
          palletCall: {
            name: 'SetSchedulingLookahead';
            params: { new: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_max_validators_per_core`].
     *
     * @param {number | undefined} new_
     **/
    setMaxValidatorsPerCore: GenericTxCall<
      Rv,
      (new_: number | undefined) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Configuration';
          palletCall: {
            name: 'SetMaxValidatorsPerCore';
            params: { new: number | undefined };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_max_validators`].
     *
     * @param {number | undefined} new_
     **/
    setMaxValidators: GenericTxCall<
      Rv,
      (new_: number | undefined) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Configuration';
          palletCall: {
            name: 'SetMaxValidators';
            params: { new: number | undefined };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_dispute_period`].
     *
     * @param {number} new_
     **/
    setDisputePeriod: GenericTxCall<
      Rv,
      (new_: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Configuration';
          palletCall: {
            name: 'SetDisputePeriod';
            params: { new: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_dispute_post_conclusion_acceptance_period`].
     *
     * @param {number} new_
     **/
    setDisputePostConclusionAcceptancePeriod: GenericTxCall<
      Rv,
      (new_: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Configuration';
          palletCall: {
            name: 'SetDisputePostConclusionAcceptancePeriod';
            params: { new: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_no_show_slots`].
     *
     * @param {number} new_
     **/
    setNoShowSlots: GenericTxCall<
      Rv,
      (new_: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Configuration';
          palletCall: {
            name: 'SetNoShowSlots';
            params: { new: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_n_delay_tranches`].
     *
     * @param {number} new_
     **/
    setNDelayTranches: GenericTxCall<
      Rv,
      (new_: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Configuration';
          palletCall: {
            name: 'SetNDelayTranches';
            params: { new: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_zeroth_delay_tranche_width`].
     *
     * @param {number} new_
     **/
    setZerothDelayTrancheWidth: GenericTxCall<
      Rv,
      (new_: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Configuration';
          palletCall: {
            name: 'SetZerothDelayTrancheWidth';
            params: { new: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_needed_approvals`].
     *
     * @param {number} new_
     **/
    setNeededApprovals: GenericTxCall<
      Rv,
      (new_: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Configuration';
          palletCall: {
            name: 'SetNeededApprovals';
            params: { new: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_relay_vrf_modulo_samples`].
     *
     * @param {number} new_
     **/
    setRelayVrfModuloSamples: GenericTxCall<
      Rv,
      (new_: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Configuration';
          palletCall: {
            name: 'SetRelayVrfModuloSamples';
            params: { new: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_max_upward_queue_count`].
     *
     * @param {number} new_
     **/
    setMaxUpwardQueueCount: GenericTxCall<
      Rv,
      (new_: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Configuration';
          palletCall: {
            name: 'SetMaxUpwardQueueCount';
            params: { new: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_max_upward_queue_size`].
     *
     * @param {number} new_
     **/
    setMaxUpwardQueueSize: GenericTxCall<
      Rv,
      (new_: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Configuration';
          palletCall: {
            name: 'SetMaxUpwardQueueSize';
            params: { new: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_max_downward_message_size`].
     *
     * @param {number} new_
     **/
    setMaxDownwardMessageSize: GenericTxCall<
      Rv,
      (new_: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Configuration';
          palletCall: {
            name: 'SetMaxDownwardMessageSize';
            params: { new: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_max_upward_message_size`].
     *
     * @param {number} new_
     **/
    setMaxUpwardMessageSize: GenericTxCall<
      Rv,
      (new_: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Configuration';
          palletCall: {
            name: 'SetMaxUpwardMessageSize';
            params: { new: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_max_upward_message_num_per_candidate`].
     *
     * @param {number} new_
     **/
    setMaxUpwardMessageNumPerCandidate: GenericTxCall<
      Rv,
      (new_: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Configuration';
          palletCall: {
            name: 'SetMaxUpwardMessageNumPerCandidate';
            params: { new: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_hrmp_open_request_ttl`].
     *
     * @param {number} new_
     **/
    setHrmpOpenRequestTtl: GenericTxCall<
      Rv,
      (new_: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Configuration';
          palletCall: {
            name: 'SetHrmpOpenRequestTtl';
            params: { new: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_hrmp_sender_deposit`].
     *
     * @param {bigint} new_
     **/
    setHrmpSenderDeposit: GenericTxCall<
      Rv,
      (new_: bigint) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Configuration';
          palletCall: {
            name: 'SetHrmpSenderDeposit';
            params: { new: bigint };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_hrmp_recipient_deposit`].
     *
     * @param {bigint} new_
     **/
    setHrmpRecipientDeposit: GenericTxCall<
      Rv,
      (new_: bigint) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Configuration';
          palletCall: {
            name: 'SetHrmpRecipientDeposit';
            params: { new: bigint };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_hrmp_channel_max_capacity`].
     *
     * @param {number} new_
     **/
    setHrmpChannelMaxCapacity: GenericTxCall<
      Rv,
      (new_: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Configuration';
          palletCall: {
            name: 'SetHrmpChannelMaxCapacity';
            params: { new: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_hrmp_channel_max_total_size`].
     *
     * @param {number} new_
     **/
    setHrmpChannelMaxTotalSize: GenericTxCall<
      Rv,
      (new_: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Configuration';
          palletCall: {
            name: 'SetHrmpChannelMaxTotalSize';
            params: { new: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_hrmp_max_parachain_inbound_channels`].
     *
     * @param {number} new_
     **/
    setHrmpMaxParachainInboundChannels: GenericTxCall<
      Rv,
      (new_: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Configuration';
          palletCall: {
            name: 'SetHrmpMaxParachainInboundChannels';
            params: { new: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_hrmp_channel_max_message_size`].
     *
     * @param {number} new_
     **/
    setHrmpChannelMaxMessageSize: GenericTxCall<
      Rv,
      (new_: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Configuration';
          palletCall: {
            name: 'SetHrmpChannelMaxMessageSize';
            params: { new: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_hrmp_max_parachain_outbound_channels`].
     *
     * @param {number} new_
     **/
    setHrmpMaxParachainOutboundChannels: GenericTxCall<
      Rv,
      (new_: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Configuration';
          palletCall: {
            name: 'SetHrmpMaxParachainOutboundChannels';
            params: { new: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_hrmp_max_message_num_per_candidate`].
     *
     * @param {number} new_
     **/
    setHrmpMaxMessageNumPerCandidate: GenericTxCall<
      Rv,
      (new_: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Configuration';
          palletCall: {
            name: 'SetHrmpMaxMessageNumPerCandidate';
            params: { new: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_pvf_voting_ttl`].
     *
     * @param {number} new_
     **/
    setPvfVotingTtl: GenericTxCall<
      Rv,
      (new_: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Configuration';
          palletCall: {
            name: 'SetPvfVotingTtl';
            params: { new: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_minimum_validation_upgrade_delay`].
     *
     * @param {number} new_
     **/
    setMinimumValidationUpgradeDelay: GenericTxCall<
      Rv,
      (new_: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Configuration';
          palletCall: {
            name: 'SetMinimumValidationUpgradeDelay';
            params: { new: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_bypass_consistency_check`].
     *
     * @param {boolean} new_
     **/
    setBypassConsistencyCheck: GenericTxCall<
      Rv,
      (new_: boolean) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Configuration';
          palletCall: {
            name: 'SetBypassConsistencyCheck';
            params: { new: boolean };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_async_backing_params`].
     *
     * @param {PolkadotPrimitivesV6AsyncBackingAsyncBackingParams} new_
     **/
    setAsyncBackingParams: GenericTxCall<
      Rv,
      (new_: PolkadotPrimitivesV6AsyncBackingAsyncBackingParams) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Configuration';
          palletCall: {
            name: 'SetAsyncBackingParams';
            params: { new: PolkadotPrimitivesV6AsyncBackingAsyncBackingParams };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_executor_params`].
     *
     * @param {PolkadotPrimitivesV6ExecutorParams} new_
     **/
    setExecutorParams: GenericTxCall<
      Rv,
      (new_: PolkadotPrimitivesV6ExecutorParams) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Configuration';
          palletCall: {
            name: 'SetExecutorParams';
            params: { new: PolkadotPrimitivesV6ExecutorParams };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_on_demand_base_fee`].
     *
     * @param {bigint} new_
     **/
    setOnDemandBaseFee: GenericTxCall<
      Rv,
      (new_: bigint) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Configuration';
          palletCall: {
            name: 'SetOnDemandBaseFee';
            params: { new: bigint };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_on_demand_fee_variability`].
     *
     * @param {Perbill} new_
     **/
    setOnDemandFeeVariability: GenericTxCall<
      Rv,
      (new_: Perbill) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Configuration';
          palletCall: {
            name: 'SetOnDemandFeeVariability';
            params: { new: Perbill };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_on_demand_queue_max_size`].
     *
     * @param {number} new_
     **/
    setOnDemandQueueMaxSize: GenericTxCall<
      Rv,
      (new_: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Configuration';
          palletCall: {
            name: 'SetOnDemandQueueMaxSize';
            params: { new: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_on_demand_target_queue_utilization`].
     *
     * @param {Perbill} new_
     **/
    setOnDemandTargetQueueUtilization: GenericTxCall<
      Rv,
      (new_: Perbill) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Configuration';
          palletCall: {
            name: 'SetOnDemandTargetQueueUtilization';
            params: { new: Perbill };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_on_demand_ttl`].
     *
     * @param {number} new_
     **/
    setOnDemandTtl: GenericTxCall<
      Rv,
      (new_: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Configuration';
          palletCall: {
            name: 'SetOnDemandTtl';
            params: { new: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_minimum_backing_votes`].
     *
     * @param {number} new_
     **/
    setMinimumBackingVotes: GenericTxCall<
      Rv,
      (new_: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Configuration';
          palletCall: {
            name: 'SetMinimumBackingVotes';
            params: { new: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_node_feature`].
     *
     * @param {number} index
     * @param {boolean} value
     **/
    setNodeFeature: GenericTxCall<
      Rv,
      (
        index: number,
        value: boolean,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Configuration';
          palletCall: {
            name: 'SetNodeFeature';
            params: { index: number; value: boolean };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_approval_voting_params`].
     *
     * @param {PolkadotPrimitivesVstagingApprovalVotingParams} new_
     **/
    setApprovalVotingParams: GenericTxCall<
      Rv,
      (new_: PolkadotPrimitivesVstagingApprovalVotingParams) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Configuration';
          palletCall: {
            name: 'SetApprovalVotingParams';
            params: { new: PolkadotPrimitivesVstagingApprovalVotingParams };
          };
        }
      >
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>;
  };
  /**
   * Pallet `ParasShared`'s transaction calls
   **/
  parasShared: {
    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>;
  };
  /**
   * Pallet `ParaInclusion`'s transaction calls
   **/
  paraInclusion: {
    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>;
  };
  /**
   * Pallet `ParaInherent`'s transaction calls
   **/
  paraInherent: {
    /**
     * See [`Pallet::enter`].
     *
     * @param {PolkadotPrimitivesV6InherentData} data
     **/
    enter: GenericTxCall<
      Rv,
      (data: PolkadotPrimitivesV6InherentData) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'ParaInherent';
          palletCall: {
            name: 'Enter';
            params: { data: PolkadotPrimitivesV6InherentData };
          };
        }
      >
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>;
  };
  /**
   * Pallet `Paras`'s transaction calls
   **/
  paras: {
    /**
     * See [`Pallet::force_set_current_code`].
     *
     * @param {PolkadotParachainPrimitivesPrimitivesId} para
     * @param {PolkadotParachainPrimitivesPrimitivesValidationCode} newCode
     **/
    forceSetCurrentCode: GenericTxCall<
      Rv,
      (
        para: PolkadotParachainPrimitivesPrimitivesId,
        newCode: PolkadotParachainPrimitivesPrimitivesValidationCode,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Paras';
          palletCall: {
            name: 'ForceSetCurrentCode';
            params: {
              para: PolkadotParachainPrimitivesPrimitivesId;
              newCode: PolkadotParachainPrimitivesPrimitivesValidationCode;
            };
          };
        }
      >
    >;

    /**
     * See [`Pallet::force_set_current_head`].
     *
     * @param {PolkadotParachainPrimitivesPrimitivesId} para
     * @param {PolkadotParachainPrimitivesPrimitivesHeadData} newHead
     **/
    forceSetCurrentHead: GenericTxCall<
      Rv,
      (
        para: PolkadotParachainPrimitivesPrimitivesId,
        newHead: PolkadotParachainPrimitivesPrimitivesHeadData,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Paras';
          palletCall: {
            name: 'ForceSetCurrentHead';
            params: {
              para: PolkadotParachainPrimitivesPrimitivesId;
              newHead: PolkadotParachainPrimitivesPrimitivesHeadData;
            };
          };
        }
      >
    >;

    /**
     * See [`Pallet::force_schedule_code_upgrade`].
     *
     * @param {PolkadotParachainPrimitivesPrimitivesId} para
     * @param {PolkadotParachainPrimitivesPrimitivesValidationCode} newCode
     * @param {number} relayParentNumber
     **/
    forceScheduleCodeUpgrade: GenericTxCall<
      Rv,
      (
        para: PolkadotParachainPrimitivesPrimitivesId,
        newCode: PolkadotParachainPrimitivesPrimitivesValidationCode,
        relayParentNumber: number,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Paras';
          palletCall: {
            name: 'ForceScheduleCodeUpgrade';
            params: {
              para: PolkadotParachainPrimitivesPrimitivesId;
              newCode: PolkadotParachainPrimitivesPrimitivesValidationCode;
              relayParentNumber: number;
            };
          };
        }
      >
    >;

    /**
     * See [`Pallet::force_note_new_head`].
     *
     * @param {PolkadotParachainPrimitivesPrimitivesId} para
     * @param {PolkadotParachainPrimitivesPrimitivesHeadData} newHead
     **/
    forceNoteNewHead: GenericTxCall<
      Rv,
      (
        para: PolkadotParachainPrimitivesPrimitivesId,
        newHead: PolkadotParachainPrimitivesPrimitivesHeadData,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Paras';
          palletCall: {
            name: 'ForceNoteNewHead';
            params: {
              para: PolkadotParachainPrimitivesPrimitivesId;
              newHead: PolkadotParachainPrimitivesPrimitivesHeadData;
            };
          };
        }
      >
    >;

    /**
     * See [`Pallet::force_queue_action`].
     *
     * @param {PolkadotParachainPrimitivesPrimitivesId} para
     **/
    forceQueueAction: GenericTxCall<
      Rv,
      (para: PolkadotParachainPrimitivesPrimitivesId) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Paras';
          palletCall: {
            name: 'ForceQueueAction';
            params: { para: PolkadotParachainPrimitivesPrimitivesId };
          };
        }
      >
    >;

    /**
     * See [`Pallet::add_trusted_validation_code`].
     *
     * @param {PolkadotParachainPrimitivesPrimitivesValidationCode} validationCode
     **/
    addTrustedValidationCode: GenericTxCall<
      Rv,
      (validationCode: PolkadotParachainPrimitivesPrimitivesValidationCode) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Paras';
          palletCall: {
            name: 'AddTrustedValidationCode';
            params: { validationCode: PolkadotParachainPrimitivesPrimitivesValidationCode };
          };
        }
      >
    >;

    /**
     * See [`Pallet::poke_unused_validation_code`].
     *
     * @param {PolkadotParachainPrimitivesPrimitivesValidationCodeHash} validationCodeHash
     **/
    pokeUnusedValidationCode: GenericTxCall<
      Rv,
      (validationCodeHash: PolkadotParachainPrimitivesPrimitivesValidationCodeHash) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Paras';
          palletCall: {
            name: 'PokeUnusedValidationCode';
            params: { validationCodeHash: PolkadotParachainPrimitivesPrimitivesValidationCodeHash };
          };
        }
      >
    >;

    /**
     * See [`Pallet::include_pvf_check_statement`].
     *
     * @param {PolkadotPrimitivesV6PvfCheckStatement} stmt
     * @param {PolkadotPrimitivesV6ValidatorAppSignature} signature
     **/
    includePvfCheckStatement: GenericTxCall<
      Rv,
      (
        stmt: PolkadotPrimitivesV6PvfCheckStatement,
        signature: PolkadotPrimitivesV6ValidatorAppSignature,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Paras';
          palletCall: {
            name: 'IncludePvfCheckStatement';
            params: {
              stmt: PolkadotPrimitivesV6PvfCheckStatement;
              signature: PolkadotPrimitivesV6ValidatorAppSignature;
            };
          };
        }
      >
    >;

    /**
     * See [`Pallet::force_set_most_recent_context`].
     *
     * @param {PolkadotParachainPrimitivesPrimitivesId} para
     * @param {number} context
     **/
    forceSetMostRecentContext: GenericTxCall<
      Rv,
      (
        para: PolkadotParachainPrimitivesPrimitivesId,
        context: number,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Paras';
          palletCall: {
            name: 'ForceSetMostRecentContext';
            params: { para: PolkadotParachainPrimitivesPrimitivesId; context: number };
          };
        }
      >
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>;
  };
  /**
   * Pallet `Initializer`'s transaction calls
   **/
  initializer: {
    /**
     * See [`Pallet::force_approve`].
     *
     * @param {number} upTo
     **/
    forceApprove: GenericTxCall<
      Rv,
      (upTo: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Initializer';
          palletCall: {
            name: 'ForceApprove';
            params: { upTo: number };
          };
        }
      >
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>;
  };
  /**
   * Pallet `Hrmp`'s transaction calls
   **/
  hrmp: {
    /**
     * See [`Pallet::hrmp_init_open_channel`].
     *
     * @param {PolkadotParachainPrimitivesPrimitivesId} recipient
     * @param {number} proposedMaxCapacity
     * @param {number} proposedMaxMessageSize
     **/
    hrmpInitOpenChannel: GenericTxCall<
      Rv,
      (
        recipient: PolkadotParachainPrimitivesPrimitivesId,
        proposedMaxCapacity: number,
        proposedMaxMessageSize: number,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Hrmp';
          palletCall: {
            name: 'HrmpInitOpenChannel';
            params: {
              recipient: PolkadotParachainPrimitivesPrimitivesId;
              proposedMaxCapacity: number;
              proposedMaxMessageSize: number;
            };
          };
        }
      >
    >;

    /**
     * See [`Pallet::hrmp_accept_open_channel`].
     *
     * @param {PolkadotParachainPrimitivesPrimitivesId} sender
     **/
    hrmpAcceptOpenChannel: GenericTxCall<
      Rv,
      (sender: PolkadotParachainPrimitivesPrimitivesId) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Hrmp';
          palletCall: {
            name: 'HrmpAcceptOpenChannel';
            params: { sender: PolkadotParachainPrimitivesPrimitivesId };
          };
        }
      >
    >;

    /**
     * See [`Pallet::hrmp_close_channel`].
     *
     * @param {PolkadotParachainPrimitivesPrimitivesHrmpChannelId} channelId
     **/
    hrmpCloseChannel: GenericTxCall<
      Rv,
      (channelId: PolkadotParachainPrimitivesPrimitivesHrmpChannelId) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Hrmp';
          palletCall: {
            name: 'HrmpCloseChannel';
            params: { channelId: PolkadotParachainPrimitivesPrimitivesHrmpChannelId };
          };
        }
      >
    >;

    /**
     * See [`Pallet::force_clean_hrmp`].
     *
     * @param {PolkadotParachainPrimitivesPrimitivesId} para
     * @param {number} numInbound
     * @param {number} numOutbound
     **/
    forceCleanHrmp: GenericTxCall<
      Rv,
      (
        para: PolkadotParachainPrimitivesPrimitivesId,
        numInbound: number,
        numOutbound: number,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Hrmp';
          palletCall: {
            name: 'ForceCleanHrmp';
            params: { para: PolkadotParachainPrimitivesPrimitivesId; numInbound: number; numOutbound: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::force_process_hrmp_open`].
     *
     * @param {number} channels
     **/
    forceProcessHrmpOpen: GenericTxCall<
      Rv,
      (channels: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Hrmp';
          palletCall: {
            name: 'ForceProcessHrmpOpen';
            params: { channels: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::force_process_hrmp_close`].
     *
     * @param {number} channels
     **/
    forceProcessHrmpClose: GenericTxCall<
      Rv,
      (channels: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Hrmp';
          palletCall: {
            name: 'ForceProcessHrmpClose';
            params: { channels: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::hrmp_cancel_open_request`].
     *
     * @param {PolkadotParachainPrimitivesPrimitivesHrmpChannelId} channelId
     * @param {number} openRequests
     **/
    hrmpCancelOpenRequest: GenericTxCall<
      Rv,
      (
        channelId: PolkadotParachainPrimitivesPrimitivesHrmpChannelId,
        openRequests: number,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Hrmp';
          palletCall: {
            name: 'HrmpCancelOpenRequest';
            params: { channelId: PolkadotParachainPrimitivesPrimitivesHrmpChannelId; openRequests: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::force_open_hrmp_channel`].
     *
     * @param {PolkadotParachainPrimitivesPrimitivesId} sender
     * @param {PolkadotParachainPrimitivesPrimitivesId} recipient
     * @param {number} maxCapacity
     * @param {number} maxMessageSize
     **/
    forceOpenHrmpChannel: GenericTxCall<
      Rv,
      (
        sender: PolkadotParachainPrimitivesPrimitivesId,
        recipient: PolkadotParachainPrimitivesPrimitivesId,
        maxCapacity: number,
        maxMessageSize: number,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Hrmp';
          palletCall: {
            name: 'ForceOpenHrmpChannel';
            params: {
              sender: PolkadotParachainPrimitivesPrimitivesId;
              recipient: PolkadotParachainPrimitivesPrimitivesId;
              maxCapacity: number;
              maxMessageSize: number;
            };
          };
        }
      >
    >;

    /**
     * See [`Pallet::establish_system_channel`].
     *
     * @param {PolkadotParachainPrimitivesPrimitivesId} sender
     * @param {PolkadotParachainPrimitivesPrimitivesId} recipient
     **/
    establishSystemChannel: GenericTxCall<
      Rv,
      (
        sender: PolkadotParachainPrimitivesPrimitivesId,
        recipient: PolkadotParachainPrimitivesPrimitivesId,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Hrmp';
          palletCall: {
            name: 'EstablishSystemChannel';
            params: {
              sender: PolkadotParachainPrimitivesPrimitivesId;
              recipient: PolkadotParachainPrimitivesPrimitivesId;
            };
          };
        }
      >
    >;

    /**
     * See [`Pallet::poke_channel_deposits`].
     *
     * @param {PolkadotParachainPrimitivesPrimitivesId} sender
     * @param {PolkadotParachainPrimitivesPrimitivesId} recipient
     **/
    pokeChannelDeposits: GenericTxCall<
      Rv,
      (
        sender: PolkadotParachainPrimitivesPrimitivesId,
        recipient: PolkadotParachainPrimitivesPrimitivesId,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Hrmp';
          palletCall: {
            name: 'PokeChannelDeposits';
            params: {
              sender: PolkadotParachainPrimitivesPrimitivesId;
              recipient: PolkadotParachainPrimitivesPrimitivesId;
            };
          };
        }
      >
    >;

    /**
     * See [`Pallet::establish_channel_with_system`].
     *
     * @param {PolkadotParachainPrimitivesPrimitivesId} targetSystemChain
     **/
    establishChannelWithSystem: GenericTxCall<
      Rv,
      (targetSystemChain: PolkadotParachainPrimitivesPrimitivesId) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Hrmp';
          palletCall: {
            name: 'EstablishChannelWithSystem';
            params: { targetSystemChain: PolkadotParachainPrimitivesPrimitivesId };
          };
        }
      >
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>;
  };
  /**
   * Pallet `ParasDisputes`'s transaction calls
   **/
  parasDisputes: {
    /**
     * See [`Pallet::force_unfreeze`].
     *
     **/
    forceUnfreeze: GenericTxCall<
      Rv,
      () => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'ParasDisputes';
          palletCall: 'ForceUnfreeze';
        }
      >
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>;
  };
  /**
   * Pallet `ParasSlashing`'s transaction calls
   **/
  parasSlashing: {
    /**
     * See [`Pallet::report_dispute_lost_unsigned`].
     *
     * @param {PolkadotPrimitivesV6SlashingDisputeProof} disputeProof
     * @param {SpSessionMembershipProof} keyOwnerProof
     **/
    reportDisputeLostUnsigned: GenericTxCall<
      Rv,
      (
        disputeProof: PolkadotPrimitivesV6SlashingDisputeProof,
        keyOwnerProof: SpSessionMembershipProof,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'ParasSlashing';
          palletCall: {
            name: 'ReportDisputeLostUnsigned';
            params: { disputeProof: PolkadotPrimitivesV6SlashingDisputeProof; keyOwnerProof: SpSessionMembershipProof };
          };
        }
      >
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>;
  };
  /**
   * Pallet `Registrar`'s transaction calls
   **/
  registrar: {
    /**
     * See [`Pallet::register`].
     *
     * @param {PolkadotParachainPrimitivesPrimitivesId} id
     * @param {PolkadotParachainPrimitivesPrimitivesHeadData} genesisHead
     * @param {PolkadotParachainPrimitivesPrimitivesValidationCode} validationCode
     **/
    register: GenericTxCall<
      Rv,
      (
        id: PolkadotParachainPrimitivesPrimitivesId,
        genesisHead: PolkadotParachainPrimitivesPrimitivesHeadData,
        validationCode: PolkadotParachainPrimitivesPrimitivesValidationCode,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Registrar';
          palletCall: {
            name: 'Register';
            params: {
              id: PolkadotParachainPrimitivesPrimitivesId;
              genesisHead: PolkadotParachainPrimitivesPrimitivesHeadData;
              validationCode: PolkadotParachainPrimitivesPrimitivesValidationCode;
            };
          };
        }
      >
    >;

    /**
     * See [`Pallet::force_register`].
     *
     * @param {AccountId32Like} who
     * @param {bigint} deposit
     * @param {PolkadotParachainPrimitivesPrimitivesId} id
     * @param {PolkadotParachainPrimitivesPrimitivesHeadData} genesisHead
     * @param {PolkadotParachainPrimitivesPrimitivesValidationCode} validationCode
     **/
    forceRegister: GenericTxCall<
      Rv,
      (
        who: AccountId32Like,
        deposit: bigint,
        id: PolkadotParachainPrimitivesPrimitivesId,
        genesisHead: PolkadotParachainPrimitivesPrimitivesHeadData,
        validationCode: PolkadotParachainPrimitivesPrimitivesValidationCode,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Registrar';
          palletCall: {
            name: 'ForceRegister';
            params: {
              who: AccountId32Like;
              deposit: bigint;
              id: PolkadotParachainPrimitivesPrimitivesId;
              genesisHead: PolkadotParachainPrimitivesPrimitivesHeadData;
              validationCode: PolkadotParachainPrimitivesPrimitivesValidationCode;
            };
          };
        }
      >
    >;

    /**
     * See [`Pallet::deregister`].
     *
     * @param {PolkadotParachainPrimitivesPrimitivesId} id
     **/
    deregister: GenericTxCall<
      Rv,
      (id: PolkadotParachainPrimitivesPrimitivesId) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Registrar';
          palletCall: {
            name: 'Deregister';
            params: { id: PolkadotParachainPrimitivesPrimitivesId };
          };
        }
      >
    >;

    /**
     * See [`Pallet::swap`].
     *
     * @param {PolkadotParachainPrimitivesPrimitivesId} id
     * @param {PolkadotParachainPrimitivesPrimitivesId} other
     **/
    swap: GenericTxCall<
      Rv,
      (
        id: PolkadotParachainPrimitivesPrimitivesId,
        other: PolkadotParachainPrimitivesPrimitivesId,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Registrar';
          palletCall: {
            name: 'Swap';
            params: { id: PolkadotParachainPrimitivesPrimitivesId; other: PolkadotParachainPrimitivesPrimitivesId };
          };
        }
      >
    >;

    /**
     * See [`Pallet::remove_lock`].
     *
     * @param {PolkadotParachainPrimitivesPrimitivesId} para
     **/
    removeLock: GenericTxCall<
      Rv,
      (para: PolkadotParachainPrimitivesPrimitivesId) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Registrar';
          palletCall: {
            name: 'RemoveLock';
            params: { para: PolkadotParachainPrimitivesPrimitivesId };
          };
        }
      >
    >;

    /**
     * See [`Pallet::reserve`].
     *
     **/
    reserve: GenericTxCall<
      Rv,
      () => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Registrar';
          palletCall: {
            name: 'Reserve';
          };
        }
      >
    >;

    /**
     * See [`Pallet::add_lock`].
     *
     * @param {PolkadotParachainPrimitivesPrimitivesId} para
     **/
    addLock: GenericTxCall<
      Rv,
      (para: PolkadotParachainPrimitivesPrimitivesId) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Registrar';
          palletCall: {
            name: 'AddLock';
            params: { para: PolkadotParachainPrimitivesPrimitivesId };
          };
        }
      >
    >;

    /**
     * See [`Pallet::schedule_code_upgrade`].
     *
     * @param {PolkadotParachainPrimitivesPrimitivesId} para
     * @param {PolkadotParachainPrimitivesPrimitivesValidationCode} newCode
     **/
    scheduleCodeUpgrade: GenericTxCall<
      Rv,
      (
        para: PolkadotParachainPrimitivesPrimitivesId,
        newCode: PolkadotParachainPrimitivesPrimitivesValidationCode,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Registrar';
          palletCall: {
            name: 'ScheduleCodeUpgrade';
            params: {
              para: PolkadotParachainPrimitivesPrimitivesId;
              newCode: PolkadotParachainPrimitivesPrimitivesValidationCode;
            };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_current_head`].
     *
     * @param {PolkadotParachainPrimitivesPrimitivesId} para
     * @param {PolkadotParachainPrimitivesPrimitivesHeadData} newHead
     **/
    setCurrentHead: GenericTxCall<
      Rv,
      (
        para: PolkadotParachainPrimitivesPrimitivesId,
        newHead: PolkadotParachainPrimitivesPrimitivesHeadData,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Registrar';
          palletCall: {
            name: 'SetCurrentHead';
            params: {
              para: PolkadotParachainPrimitivesPrimitivesId;
              newHead: PolkadotParachainPrimitivesPrimitivesHeadData;
            };
          };
        }
      >
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>;
  };
  /**
   * Pallet `Slots`'s transaction calls
   **/
  slots: {
    /**
     * See [`Pallet::force_lease`].
     *
     * @param {PolkadotParachainPrimitivesPrimitivesId} para
     * @param {AccountId32Like} leaser
     * @param {bigint} amount
     * @param {number} periodBegin
     * @param {number} periodCount
     **/
    forceLease: GenericTxCall<
      Rv,
      (
        para: PolkadotParachainPrimitivesPrimitivesId,
        leaser: AccountId32Like,
        amount: bigint,
        periodBegin: number,
        periodCount: number,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Slots';
          palletCall: {
            name: 'ForceLease';
            params: {
              para: PolkadotParachainPrimitivesPrimitivesId;
              leaser: AccountId32Like;
              amount: bigint;
              periodBegin: number;
              periodCount: number;
            };
          };
        }
      >
    >;

    /**
     * See [`Pallet::clear_all_leases`].
     *
     * @param {PolkadotParachainPrimitivesPrimitivesId} para
     **/
    clearAllLeases: GenericTxCall<
      Rv,
      (para: PolkadotParachainPrimitivesPrimitivesId) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Slots';
          palletCall: {
            name: 'ClearAllLeases';
            params: { para: PolkadotParachainPrimitivesPrimitivesId };
          };
        }
      >
    >;

    /**
     * See [`Pallet::trigger_onboard`].
     *
     * @param {PolkadotParachainPrimitivesPrimitivesId} para
     **/
    triggerOnboard: GenericTxCall<
      Rv,
      (para: PolkadotParachainPrimitivesPrimitivesId) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Slots';
          palletCall: {
            name: 'TriggerOnboard';
            params: { para: PolkadotParachainPrimitivesPrimitivesId };
          };
        }
      >
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>;
  };
  /**
   * Pallet `Auctions`'s transaction calls
   **/
  auctions: {
    /**
     * See [`Pallet::new_auction`].
     *
     * @param {number} duration
     * @param {number} leasePeriodIndex
     **/
    newAuction: GenericTxCall<
      Rv,
      (
        duration: number,
        leasePeriodIndex: number,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Auctions';
          palletCall: {
            name: 'NewAuction';
            params: { duration: number; leasePeriodIndex: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::bid`].
     *
     * @param {PolkadotParachainPrimitivesPrimitivesId} para
     * @param {number} auctionIndex
     * @param {number} firstSlot
     * @param {number} lastSlot
     * @param {bigint} amount
     **/
    bid: GenericTxCall<
      Rv,
      (
        para: PolkadotParachainPrimitivesPrimitivesId,
        auctionIndex: number,
        firstSlot: number,
        lastSlot: number,
        amount: bigint,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Auctions';
          palletCall: {
            name: 'Bid';
            params: {
              para: PolkadotParachainPrimitivesPrimitivesId;
              auctionIndex: number;
              firstSlot: number;
              lastSlot: number;
              amount: bigint;
            };
          };
        }
      >
    >;

    /**
     * See [`Pallet::cancel_auction`].
     *
     **/
    cancelAuction: GenericTxCall<
      Rv,
      () => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Auctions';
          palletCall: {
            name: 'CancelAuction';
          };
        }
      >
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>;
  };
  /**
   * Pallet `Crowdloan`'s transaction calls
   **/
  crowdloan: {
    /**
     * See [`Pallet::create`].
     *
     * @param {PolkadotParachainPrimitivesPrimitivesId} index
     * @param {bigint} cap
     * @param {number} firstPeriod
     * @param {number} lastPeriod
     * @param {number} end
     * @param {SpRuntimeMultiSigner | undefined} verifier
     **/
    create: GenericTxCall<
      Rv,
      (
        index: PolkadotParachainPrimitivesPrimitivesId,
        cap: bigint,
        firstPeriod: number,
        lastPeriod: number,
        end: number,
        verifier: SpRuntimeMultiSigner | undefined,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Crowdloan';
          palletCall: {
            name: 'Create';
            params: {
              index: PolkadotParachainPrimitivesPrimitivesId;
              cap: bigint;
              firstPeriod: number;
              lastPeriod: number;
              end: number;
              verifier: SpRuntimeMultiSigner | undefined;
            };
          };
        }
      >
    >;

    /**
     * See [`Pallet::contribute`].
     *
     * @param {PolkadotParachainPrimitivesPrimitivesId} index
     * @param {bigint} value
     * @param {SpRuntimeMultiSignature | undefined} signature
     **/
    contribute: GenericTxCall<
      Rv,
      (
        index: PolkadotParachainPrimitivesPrimitivesId,
        value: bigint,
        signature: SpRuntimeMultiSignature | undefined,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Crowdloan';
          palletCall: {
            name: 'Contribute';
            params: {
              index: PolkadotParachainPrimitivesPrimitivesId;
              value: bigint;
              signature: SpRuntimeMultiSignature | undefined;
            };
          };
        }
      >
    >;

    /**
     * See [`Pallet::withdraw`].
     *
     * @param {AccountId32Like} who
     * @param {PolkadotParachainPrimitivesPrimitivesId} index
     **/
    withdraw: GenericTxCall<
      Rv,
      (
        who: AccountId32Like,
        index: PolkadotParachainPrimitivesPrimitivesId,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Crowdloan';
          palletCall: {
            name: 'Withdraw';
            params: { who: AccountId32Like; index: PolkadotParachainPrimitivesPrimitivesId };
          };
        }
      >
    >;

    /**
     * See [`Pallet::refund`].
     *
     * @param {PolkadotParachainPrimitivesPrimitivesId} index
     **/
    refund: GenericTxCall<
      Rv,
      (index: PolkadotParachainPrimitivesPrimitivesId) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Crowdloan';
          palletCall: {
            name: 'Refund';
            params: { index: PolkadotParachainPrimitivesPrimitivesId };
          };
        }
      >
    >;

    /**
     * See [`Pallet::dissolve`].
     *
     * @param {PolkadotParachainPrimitivesPrimitivesId} index
     **/
    dissolve: GenericTxCall<
      Rv,
      (index: PolkadotParachainPrimitivesPrimitivesId) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Crowdloan';
          palletCall: {
            name: 'Dissolve';
            params: { index: PolkadotParachainPrimitivesPrimitivesId };
          };
        }
      >
    >;

    /**
     * See [`Pallet::edit`].
     *
     * @param {PolkadotParachainPrimitivesPrimitivesId} index
     * @param {bigint} cap
     * @param {number} firstPeriod
     * @param {number} lastPeriod
     * @param {number} end
     * @param {SpRuntimeMultiSigner | undefined} verifier
     **/
    edit: GenericTxCall<
      Rv,
      (
        index: PolkadotParachainPrimitivesPrimitivesId,
        cap: bigint,
        firstPeriod: number,
        lastPeriod: number,
        end: number,
        verifier: SpRuntimeMultiSigner | undefined,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Crowdloan';
          palletCall: {
            name: 'Edit';
            params: {
              index: PolkadotParachainPrimitivesPrimitivesId;
              cap: bigint;
              firstPeriod: number;
              lastPeriod: number;
              end: number;
              verifier: SpRuntimeMultiSigner | undefined;
            };
          };
        }
      >
    >;

    /**
     * See [`Pallet::add_memo`].
     *
     * @param {PolkadotParachainPrimitivesPrimitivesId} index
     * @param {BytesLike} memo
     **/
    addMemo: GenericTxCall<
      Rv,
      (
        index: PolkadotParachainPrimitivesPrimitivesId,
        memo: BytesLike,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Crowdloan';
          palletCall: {
            name: 'AddMemo';
            params: { index: PolkadotParachainPrimitivesPrimitivesId; memo: BytesLike };
          };
        }
      >
    >;

    /**
     * See [`Pallet::poke`].
     *
     * @param {PolkadotParachainPrimitivesPrimitivesId} index
     **/
    poke: GenericTxCall<
      Rv,
      (index: PolkadotParachainPrimitivesPrimitivesId) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Crowdloan';
          palletCall: {
            name: 'Poke';
            params: { index: PolkadotParachainPrimitivesPrimitivesId };
          };
        }
      >
    >;

    /**
     * See [`Pallet::contribute_all`].
     *
     * @param {PolkadotParachainPrimitivesPrimitivesId} index
     * @param {SpRuntimeMultiSignature | undefined} signature
     **/
    contributeAll: GenericTxCall<
      Rv,
      (
        index: PolkadotParachainPrimitivesPrimitivesId,
        signature: SpRuntimeMultiSignature | undefined,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Crowdloan';
          palletCall: {
            name: 'ContributeAll';
            params: { index: PolkadotParachainPrimitivesPrimitivesId; signature: SpRuntimeMultiSignature | undefined };
          };
        }
      >
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>;
  };
  /**
   * Pallet `StateTrieMigration`'s transaction calls
   **/
  stateTrieMigration: {
    /**
     * See [`Pallet::control_auto_migration`].
     *
     * @param {PalletStateTrieMigrationMigrationLimits | undefined} maybeConfig
     **/
    controlAutoMigration: GenericTxCall<
      Rv,
      (maybeConfig: PalletStateTrieMigrationMigrationLimits | undefined) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'StateTrieMigration';
          palletCall: {
            name: 'ControlAutoMigration';
            params: { maybeConfig: PalletStateTrieMigrationMigrationLimits | undefined };
          };
        }
      >
    >;

    /**
     * See [`Pallet::continue_migrate`].
     *
     * @param {PalletStateTrieMigrationMigrationLimits} limits
     * @param {number} realSizeUpper
     * @param {PalletStateTrieMigrationMigrationTask} witnessTask
     **/
    continueMigrate: GenericTxCall<
      Rv,
      (
        limits: PalletStateTrieMigrationMigrationLimits,
        realSizeUpper: number,
        witnessTask: PalletStateTrieMigrationMigrationTask,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'StateTrieMigration';
          palletCall: {
            name: 'ContinueMigrate';
            params: {
              limits: PalletStateTrieMigrationMigrationLimits;
              realSizeUpper: number;
              witnessTask: PalletStateTrieMigrationMigrationTask;
            };
          };
        }
      >
    >;

    /**
     * See [`Pallet::migrate_custom_top`].
     *
     * @param {Array<BytesLike>} keys
     * @param {number} witnessSize
     **/
    migrateCustomTop: GenericTxCall<
      Rv,
      (
        keys: Array<BytesLike>,
        witnessSize: number,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'StateTrieMigration';
          palletCall: {
            name: 'MigrateCustomTop';
            params: { keys: Array<BytesLike>; witnessSize: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::migrate_custom_child`].
     *
     * @param {BytesLike} root
     * @param {Array<BytesLike>} childKeys
     * @param {number} totalSize
     **/
    migrateCustomChild: GenericTxCall<
      Rv,
      (
        root: BytesLike,
        childKeys: Array<BytesLike>,
        totalSize: number,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'StateTrieMigration';
          palletCall: {
            name: 'MigrateCustomChild';
            params: { root: BytesLike; childKeys: Array<BytesLike>; totalSize: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_signed_max_limits`].
     *
     * @param {PalletStateTrieMigrationMigrationLimits} limits
     **/
    setSignedMaxLimits: GenericTxCall<
      Rv,
      (limits: PalletStateTrieMigrationMigrationLimits) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'StateTrieMigration';
          palletCall: {
            name: 'SetSignedMaxLimits';
            params: { limits: PalletStateTrieMigrationMigrationLimits };
          };
        }
      >
    >;

    /**
     * See [`Pallet::force_set_progress`].
     *
     * @param {PalletStateTrieMigrationProgress} progressTop
     * @param {PalletStateTrieMigrationProgress} progressChild
     **/
    forceSetProgress: GenericTxCall<
      Rv,
      (
        progressTop: PalletStateTrieMigrationProgress,
        progressChild: PalletStateTrieMigrationProgress,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'StateTrieMigration';
          palletCall: {
            name: 'ForceSetProgress';
            params: { progressTop: PalletStateTrieMigrationProgress; progressChild: PalletStateTrieMigrationProgress };
          };
        }
      >
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>;
  };
  /**
   * Pallet `XcmPallet`'s transaction calls
   **/
  xcmPallet: {
    /**
     * See [`Pallet::send`].
     *
     * @param {XcmVersionedLocation} dest
     * @param {XcmVersionedXcm} message
     **/
    send: GenericTxCall<
      Rv,
      (
        dest: XcmVersionedLocation,
        message: XcmVersionedXcm,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'XcmPallet';
          palletCall: {
            name: 'Send';
            params: { dest: XcmVersionedLocation; message: XcmVersionedXcm };
          };
        }
      >
    >;

    /**
     * See [`Pallet::teleport_assets`].
     *
     * @param {XcmVersionedLocation} dest
     * @param {XcmVersionedLocation} beneficiary
     * @param {XcmVersionedAssets} assets
     * @param {number} feeAssetItem
     **/
    teleportAssets: GenericTxCall<
      Rv,
      (
        dest: XcmVersionedLocation,
        beneficiary: XcmVersionedLocation,
        assets: XcmVersionedAssets,
        feeAssetItem: number,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'XcmPallet';
          palletCall: {
            name: 'TeleportAssets';
            params: {
              dest: XcmVersionedLocation;
              beneficiary: XcmVersionedLocation;
              assets: XcmVersionedAssets;
              feeAssetItem: number;
            };
          };
        }
      >
    >;

    /**
     * See [`Pallet::reserve_transfer_assets`].
     *
     * @param {XcmVersionedLocation} dest
     * @param {XcmVersionedLocation} beneficiary
     * @param {XcmVersionedAssets} assets
     * @param {number} feeAssetItem
     **/
    reserveTransferAssets: GenericTxCall<
      Rv,
      (
        dest: XcmVersionedLocation,
        beneficiary: XcmVersionedLocation,
        assets: XcmVersionedAssets,
        feeAssetItem: number,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'XcmPallet';
          palletCall: {
            name: 'ReserveTransferAssets';
            params: {
              dest: XcmVersionedLocation;
              beneficiary: XcmVersionedLocation;
              assets: XcmVersionedAssets;
              feeAssetItem: number;
            };
          };
        }
      >
    >;

    /**
     * See [`Pallet::execute`].
     *
     * @param {XcmVersionedXcm} message
     * @param {SpWeightsWeightV2Weight} maxWeight
     **/
    execute: GenericTxCall<
      Rv,
      (
        message: XcmVersionedXcm,
        maxWeight: SpWeightsWeightV2Weight,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'XcmPallet';
          palletCall: {
            name: 'Execute';
            params: { message: XcmVersionedXcm; maxWeight: SpWeightsWeightV2Weight };
          };
        }
      >
    >;

    /**
     * See [`Pallet::force_xcm_version`].
     *
     * @param {StagingXcmV4Location} location
     * @param {number} version
     **/
    forceXcmVersion: GenericTxCall<
      Rv,
      (
        location: StagingXcmV4Location,
        version: number,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'XcmPallet';
          palletCall: {
            name: 'ForceXcmVersion';
            params: { location: StagingXcmV4Location; version: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::force_default_xcm_version`].
     *
     * @param {number | undefined} maybeXcmVersion
     **/
    forceDefaultXcmVersion: GenericTxCall<
      Rv,
      (maybeXcmVersion: number | undefined) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'XcmPallet';
          palletCall: {
            name: 'ForceDefaultXcmVersion';
            params: { maybeXcmVersion: number | undefined };
          };
        }
      >
    >;

    /**
     * See [`Pallet::force_subscribe_version_notify`].
     *
     * @param {XcmVersionedLocation} location
     **/
    forceSubscribeVersionNotify: GenericTxCall<
      Rv,
      (location: XcmVersionedLocation) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'XcmPallet';
          palletCall: {
            name: 'ForceSubscribeVersionNotify';
            params: { location: XcmVersionedLocation };
          };
        }
      >
    >;

    /**
     * See [`Pallet::force_unsubscribe_version_notify`].
     *
     * @param {XcmVersionedLocation} location
     **/
    forceUnsubscribeVersionNotify: GenericTxCall<
      Rv,
      (location: XcmVersionedLocation) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'XcmPallet';
          palletCall: {
            name: 'ForceUnsubscribeVersionNotify';
            params: { location: XcmVersionedLocation };
          };
        }
      >
    >;

    /**
     * See [`Pallet::limited_reserve_transfer_assets`].
     *
     * @param {XcmVersionedLocation} dest
     * @param {XcmVersionedLocation} beneficiary
     * @param {XcmVersionedAssets} assets
     * @param {number} feeAssetItem
     * @param {XcmV3WeightLimit} weightLimit
     **/
    limitedReserveTransferAssets: GenericTxCall<
      Rv,
      (
        dest: XcmVersionedLocation,
        beneficiary: XcmVersionedLocation,
        assets: XcmVersionedAssets,
        feeAssetItem: number,
        weightLimit: XcmV3WeightLimit,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'XcmPallet';
          palletCall: {
            name: 'LimitedReserveTransferAssets';
            params: {
              dest: XcmVersionedLocation;
              beneficiary: XcmVersionedLocation;
              assets: XcmVersionedAssets;
              feeAssetItem: number;
              weightLimit: XcmV3WeightLimit;
            };
          };
        }
      >
    >;

    /**
     * See [`Pallet::limited_teleport_assets`].
     *
     * @param {XcmVersionedLocation} dest
     * @param {XcmVersionedLocation} beneficiary
     * @param {XcmVersionedAssets} assets
     * @param {number} feeAssetItem
     * @param {XcmV3WeightLimit} weightLimit
     **/
    limitedTeleportAssets: GenericTxCall<
      Rv,
      (
        dest: XcmVersionedLocation,
        beneficiary: XcmVersionedLocation,
        assets: XcmVersionedAssets,
        feeAssetItem: number,
        weightLimit: XcmV3WeightLimit,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'XcmPallet';
          palletCall: {
            name: 'LimitedTeleportAssets';
            params: {
              dest: XcmVersionedLocation;
              beneficiary: XcmVersionedLocation;
              assets: XcmVersionedAssets;
              feeAssetItem: number;
              weightLimit: XcmV3WeightLimit;
            };
          };
        }
      >
    >;

    /**
     * See [`Pallet::force_suspension`].
     *
     * @param {boolean} suspended
     **/
    forceSuspension: GenericTxCall<
      Rv,
      (suspended: boolean) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'XcmPallet';
          palletCall: {
            name: 'ForceSuspension';
            params: { suspended: boolean };
          };
        }
      >
    >;

    /**
     * See [`Pallet::transfer_assets`].
     *
     * @param {XcmVersionedLocation} dest
     * @param {XcmVersionedLocation} beneficiary
     * @param {XcmVersionedAssets} assets
     * @param {number} feeAssetItem
     * @param {XcmV3WeightLimit} weightLimit
     **/
    transferAssets: GenericTxCall<
      Rv,
      (
        dest: XcmVersionedLocation,
        beneficiary: XcmVersionedLocation,
        assets: XcmVersionedAssets,
        feeAssetItem: number,
        weightLimit: XcmV3WeightLimit,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'XcmPallet';
          palletCall: {
            name: 'TransferAssets';
            params: {
              dest: XcmVersionedLocation;
              beneficiary: XcmVersionedLocation;
              assets: XcmVersionedAssets;
              feeAssetItem: number;
              weightLimit: XcmV3WeightLimit;
            };
          };
        }
      >
    >;

    /**
     * See [`Pallet::claim_assets`].
     *
     * @param {XcmVersionedAssets} assets
     * @param {XcmVersionedLocation} beneficiary
     **/
    claimAssets: GenericTxCall<
      Rv,
      (
        assets: XcmVersionedAssets,
        beneficiary: XcmVersionedLocation,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'XcmPallet';
          palletCall: {
            name: 'ClaimAssets';
            params: { assets: XcmVersionedAssets; beneficiary: XcmVersionedLocation };
          };
        }
      >
    >;

    /**
     * See [`Pallet::transfer_assets_using_type_and_then`].
     *
     * @param {XcmVersionedLocation} dest
     * @param {XcmVersionedAssets} assets
     * @param {StagingXcmExecutorAssetTransferTransferType} assetsTransferType
     * @param {XcmVersionedAssetId} remoteFeesId
     * @param {StagingXcmExecutorAssetTransferTransferType} feesTransferType
     * @param {XcmVersionedXcm} customXcmOnDest
     * @param {XcmV3WeightLimit} weightLimit
     **/
    transferAssetsUsingTypeAndThen: GenericTxCall<
      Rv,
      (
        dest: XcmVersionedLocation,
        assets: XcmVersionedAssets,
        assetsTransferType: StagingXcmExecutorAssetTransferTransferType,
        remoteFeesId: XcmVersionedAssetId,
        feesTransferType: StagingXcmExecutorAssetTransferTransferType,
        customXcmOnDest: XcmVersionedXcm,
        weightLimit: XcmV3WeightLimit,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'XcmPallet';
          palletCall: {
            name: 'TransferAssetsUsingTypeAndThen';
            params: {
              dest: XcmVersionedLocation;
              assets: XcmVersionedAssets;
              assetsTransferType: StagingXcmExecutorAssetTransferTransferType;
              remoteFeesId: XcmVersionedAssetId;
              feesTransferType: StagingXcmExecutorAssetTransferTransferType;
              customXcmOnDest: XcmVersionedXcm;
              weightLimit: XcmV3WeightLimit;
            };
          };
        }
      >
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>;
  };
  /**
   * Pallet `MessageQueue`'s transaction calls
   **/
  messageQueue: {
    /**
     * See [`Pallet::reap_page`].
     *
     * @param {PolkadotRuntimeParachainsInclusionAggregateMessageOrigin} messageOrigin
     * @param {number} pageIndex
     **/
    reapPage: GenericTxCall<
      Rv,
      (
        messageOrigin: PolkadotRuntimeParachainsInclusionAggregateMessageOrigin,
        pageIndex: number,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'MessageQueue';
          palletCall: {
            name: 'ReapPage';
            params: { messageOrigin: PolkadotRuntimeParachainsInclusionAggregateMessageOrigin; pageIndex: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::execute_overweight`].
     *
     * @param {PolkadotRuntimeParachainsInclusionAggregateMessageOrigin} messageOrigin
     * @param {number} page
     * @param {number} index
     * @param {SpWeightsWeightV2Weight} weightLimit
     **/
    executeOverweight: GenericTxCall<
      Rv,
      (
        messageOrigin: PolkadotRuntimeParachainsInclusionAggregateMessageOrigin,
        page: number,
        index: number,
        weightLimit: SpWeightsWeightV2Weight,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'MessageQueue';
          palletCall: {
            name: 'ExecuteOverweight';
            params: {
              messageOrigin: PolkadotRuntimeParachainsInclusionAggregateMessageOrigin;
              page: number;
              index: number;
              weightLimit: SpWeightsWeightV2Weight;
            };
          };
        }
      >
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>;
  };
  /**
   * Pallet `AssetRate`'s transaction calls
   **/
  assetRate: {
    /**
     * See [`Pallet::create`].
     *
     * @param {PolkadotRuntimeCommonImplsVersionedLocatableAsset} assetKind
     * @param {FixedU128} rate
     **/
    create: GenericTxCall<
      Rv,
      (
        assetKind: PolkadotRuntimeCommonImplsVersionedLocatableAsset,
        rate: FixedU128,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'AssetRate';
          palletCall: {
            name: 'Create';
            params: { assetKind: PolkadotRuntimeCommonImplsVersionedLocatableAsset; rate: FixedU128 };
          };
        }
      >
    >;

    /**
     * See [`Pallet::update`].
     *
     * @param {PolkadotRuntimeCommonImplsVersionedLocatableAsset} assetKind
     * @param {FixedU128} rate
     **/
    update: GenericTxCall<
      Rv,
      (
        assetKind: PolkadotRuntimeCommonImplsVersionedLocatableAsset,
        rate: FixedU128,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'AssetRate';
          palletCall: {
            name: 'Update';
            params: { assetKind: PolkadotRuntimeCommonImplsVersionedLocatableAsset; rate: FixedU128 };
          };
        }
      >
    >;

    /**
     * See [`Pallet::remove`].
     *
     * @param {PolkadotRuntimeCommonImplsVersionedLocatableAsset} assetKind
     **/
    remove: GenericTxCall<
      Rv,
      (assetKind: PolkadotRuntimeCommonImplsVersionedLocatableAsset) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'AssetRate';
          palletCall: {
            name: 'Remove';
            params: { assetKind: PolkadotRuntimeCommonImplsVersionedLocatableAsset };
          };
        }
      >
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>;
  };
  /**
   * Pallet `Beefy`'s transaction calls
   **/
  beefy: {
    /**
     * See [`Pallet::report_equivocation`].
     *
     * @param {SpConsensusBeefyEquivocationProof} equivocationProof
     * @param {SpSessionMembershipProof} keyOwnerProof
     **/
    reportEquivocation: GenericTxCall<
      Rv,
      (
        equivocationProof: SpConsensusBeefyEquivocationProof,
        keyOwnerProof: SpSessionMembershipProof,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Beefy';
          palletCall: {
            name: 'ReportEquivocation';
            params: { equivocationProof: SpConsensusBeefyEquivocationProof; keyOwnerProof: SpSessionMembershipProof };
          };
        }
      >
    >;

    /**
     * See [`Pallet::report_equivocation_unsigned`].
     *
     * @param {SpConsensusBeefyEquivocationProof} equivocationProof
     * @param {SpSessionMembershipProof} keyOwnerProof
     **/
    reportEquivocationUnsigned: GenericTxCall<
      Rv,
      (
        equivocationProof: SpConsensusBeefyEquivocationProof,
        keyOwnerProof: SpSessionMembershipProof,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Beefy';
          palletCall: {
            name: 'ReportEquivocationUnsigned';
            params: { equivocationProof: SpConsensusBeefyEquivocationProof; keyOwnerProof: SpSessionMembershipProof };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_new_genesis`].
     *
     * @param {number} delayInBlocks
     **/
    setNewGenesis: GenericTxCall<
      Rv,
      (delayInBlocks: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Beefy';
          palletCall: {
            name: 'SetNewGenesis';
            params: { delayInBlocks: number };
          };
        }
      >
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>;
  };
  /**
   * Pallet `ParaSudoWrapper`'s transaction calls
   **/
  paraSudoWrapper: {
    /**
     * See [`Pallet::sudo_schedule_para_initialize`].
     *
     * @param {PolkadotParachainPrimitivesPrimitivesId} id
     * @param {PolkadotRuntimeParachainsParasParaGenesisArgs} genesis
     **/
    sudoScheduleParaInitialize: GenericTxCall<
      Rv,
      (
        id: PolkadotParachainPrimitivesPrimitivesId,
        genesis: PolkadotRuntimeParachainsParasParaGenesisArgs,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'ParaSudoWrapper';
          palletCall: {
            name: 'SudoScheduleParaInitialize';
            params: {
              id: PolkadotParachainPrimitivesPrimitivesId;
              genesis: PolkadotRuntimeParachainsParasParaGenesisArgs;
            };
          };
        }
      >
    >;

    /**
     * See [`Pallet::sudo_schedule_para_cleanup`].
     *
     * @param {PolkadotParachainPrimitivesPrimitivesId} id
     **/
    sudoScheduleParaCleanup: GenericTxCall<
      Rv,
      (id: PolkadotParachainPrimitivesPrimitivesId) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'ParaSudoWrapper';
          palletCall: {
            name: 'SudoScheduleParaCleanup';
            params: { id: PolkadotParachainPrimitivesPrimitivesId };
          };
        }
      >
    >;

    /**
     * See [`Pallet::sudo_schedule_parathread_upgrade`].
     *
     * @param {PolkadotParachainPrimitivesPrimitivesId} id
     **/
    sudoScheduleParathreadUpgrade: GenericTxCall<
      Rv,
      (id: PolkadotParachainPrimitivesPrimitivesId) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'ParaSudoWrapper';
          palletCall: {
            name: 'SudoScheduleParathreadUpgrade';
            params: { id: PolkadotParachainPrimitivesPrimitivesId };
          };
        }
      >
    >;

    /**
     * See [`Pallet::sudo_schedule_parachain_downgrade`].
     *
     * @param {PolkadotParachainPrimitivesPrimitivesId} id
     **/
    sudoScheduleParachainDowngrade: GenericTxCall<
      Rv,
      (id: PolkadotParachainPrimitivesPrimitivesId) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'ParaSudoWrapper';
          palletCall: {
            name: 'SudoScheduleParachainDowngrade';
            params: { id: PolkadotParachainPrimitivesPrimitivesId };
          };
        }
      >
    >;

    /**
     * See [`Pallet::sudo_queue_downward_xcm`].
     *
     * @param {PolkadotParachainPrimitivesPrimitivesId} id
     * @param {XcmVersionedXcm} xcm
     **/
    sudoQueueDownwardXcm: GenericTxCall<
      Rv,
      (
        id: PolkadotParachainPrimitivesPrimitivesId,
        xcm: XcmVersionedXcm,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'ParaSudoWrapper';
          palletCall: {
            name: 'SudoQueueDownwardXcm';
            params: { id: PolkadotParachainPrimitivesPrimitivesId; xcm: XcmVersionedXcm };
          };
        }
      >
    >;

    /**
     * See [`Pallet::sudo_establish_hrmp_channel`].
     *
     * @param {PolkadotParachainPrimitivesPrimitivesId} sender
     * @param {PolkadotParachainPrimitivesPrimitivesId} recipient
     * @param {number} maxCapacity
     * @param {number} maxMessageSize
     **/
    sudoEstablishHrmpChannel: GenericTxCall<
      Rv,
      (
        sender: PolkadotParachainPrimitivesPrimitivesId,
        recipient: PolkadotParachainPrimitivesPrimitivesId,
        maxCapacity: number,
        maxMessageSize: number,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'ParaSudoWrapper';
          palletCall: {
            name: 'SudoEstablishHrmpChannel';
            params: {
              sender: PolkadotParachainPrimitivesPrimitivesId;
              recipient: PolkadotParachainPrimitivesPrimitivesId;
              maxCapacity: number;
              maxMessageSize: number;
            };
          };
        }
      >
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>;
  };
  /**
   * Pallet `Sudo`'s transaction calls
   **/
  sudo: {
    /**
     * See [`Pallet::sudo`].
     *
     * @param {PaseoRuntimeRuntimeCallLike} call
     **/
    sudo: GenericTxCall<
      Rv,
      (call: PaseoRuntimeRuntimeCallLike) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Sudo';
          palletCall: {
            name: 'Sudo';
            params: { call: PaseoRuntimeRuntimeCallLike };
          };
        }
      >
    >;

    /**
     * See [`Pallet::sudo_unchecked_weight`].
     *
     * @param {PaseoRuntimeRuntimeCallLike} call
     * @param {SpWeightsWeightV2Weight} weight
     **/
    sudoUncheckedWeight: GenericTxCall<
      Rv,
      (
        call: PaseoRuntimeRuntimeCallLike,
        weight: SpWeightsWeightV2Weight,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Sudo';
          palletCall: {
            name: 'SudoUncheckedWeight';
            params: { call: PaseoRuntimeRuntimeCallLike; weight: SpWeightsWeightV2Weight };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_key`].
     *
     * @param {MultiAddressLike} new_
     **/
    setKey: GenericTxCall<
      Rv,
      (new_: MultiAddressLike) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Sudo';
          palletCall: {
            name: 'SetKey';
            params: { new: MultiAddressLike };
          };
        }
      >
    >;

    /**
     * See [`Pallet::sudo_as`].
     *
     * @param {MultiAddressLike} who
     * @param {PaseoRuntimeRuntimeCallLike} call
     **/
    sudoAs: GenericTxCall<
      Rv,
      (
        who: MultiAddressLike,
        call: PaseoRuntimeRuntimeCallLike,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Sudo';
          palletCall: {
            name: 'SudoAs';
            params: { who: MultiAddressLike; call: PaseoRuntimeRuntimeCallLike };
          };
        }
      >
    >;

    /**
     * See [`Pallet::remove_key`].
     *
     **/
    removeKey: GenericTxCall<
      Rv,
      () => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Sudo';
          palletCall: {
            name: 'RemoveKey';
          };
        }
      >
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>;
  };
}
