// Generated by dedot cli

import type {
  Phase,
  H256,
  DispatchInfo,
  DispatchError,
  AccountId32,
  FixedBytes,
  FixedArray,
  Bytes,
  Result,
  Permill,
  BytesLike,
  MultiAddress,
  MultiAddressLike,
  AccountId32Like,
  FixedU128,
  Era,
  Header,
  UncheckedExtrinsic,
} from 'dedot/codecs';

export type FrameSystemAccountInfo = {
  nonce: number;
  consumers: number;
  providers: number;
  sufficients: number;
  data: PalletBalancesAccountData;
};

export type PalletBalancesAccountData = {
  free: bigint;
  reserved: bigint;
  frozen: bigint;
  flags: PalletBalancesExtraFlags;
};

export type PalletBalancesExtraFlags = bigint;

export type FrameSupportDispatchPerDispatchClass = {
  normal: SpWeightsWeightV2Weight;
  operational: SpWeightsWeightV2Weight;
  mandatory: SpWeightsWeightV2Weight;
};

export type SpWeightsWeightV2Weight = { refTime: bigint; proofSize: bigint };

export type FrameSystemEventRecord = { phase: Phase; event: AssetHubKusamaRuntimeRuntimeEvent; topics: Array<H256> };

export type AssetHubKusamaRuntimeRuntimeEvent =
  | { pallet: 'System'; palletEvent: FrameSystemEvent }
  | { pallet: 'ParachainSystem'; palletEvent: CumulusPalletParachainSystemEvent }
  | { pallet: 'Balances'; palletEvent: PalletBalancesEvent }
  | { pallet: 'TransactionPayment'; palletEvent: PalletTransactionPaymentEvent }
  | { pallet: 'AssetTxPayment'; palletEvent: PalletAssetConversionTxPaymentEvent }
  | { pallet: 'Vesting'; palletEvent: PalletVestingEvent }
  | { pallet: 'CollatorSelection'; palletEvent: PalletCollatorSelectionEvent }
  | { pallet: 'Session'; palletEvent: PalletSessionEvent }
  | { pallet: 'XcmpQueue'; palletEvent: CumulusPalletXcmpQueueEvent }
  | { pallet: 'PolkadotXcm'; palletEvent: PalletXcmEvent }
  | { pallet: 'CumulusXcm'; palletEvent: CumulusPalletXcmEvent }
  | { pallet: 'MessageQueue'; palletEvent: PalletMessageQueueEvent }
  | { pallet: 'Utility'; palletEvent: PalletUtilityEvent }
  | { pallet: 'Multisig'; palletEvent: PalletMultisigEvent }
  | { pallet: 'Proxy'; palletEvent: PalletProxyEvent }
  | { pallet: 'Assets'; palletEvent: PalletAssetsEvent }
  | { pallet: 'Uniques'; palletEvent: PalletUniquesEvent }
  | { pallet: 'Nfts'; palletEvent: PalletNftsEvent }
  | { pallet: 'ForeignAssets'; palletEvent: PalletAssetsEvent002 }
  | { pallet: 'NftFractionalization'; palletEvent: PalletNftFractionalizationEvent }
  | { pallet: 'PoolAssets'; palletEvent: PalletAssetsEvent }
  | { pallet: 'AssetConversion'; palletEvent: PalletAssetConversionEvent };

/**
 * Event for the System pallet.
 **/
export type FrameSystemEvent =
  /**
   * An extrinsic completed successfully.
   **/
  | { name: 'ExtrinsicSuccess'; data: { dispatchInfo: DispatchInfo } }
  /**
   * An extrinsic failed.
   **/
  | { name: 'ExtrinsicFailed'; data: { dispatchError: DispatchError; dispatchInfo: DispatchInfo } }
  /**
   * `:code` was updated.
   **/
  | { name: 'CodeUpdated' }
  /**
   * A new account was created.
   **/
  | { name: 'NewAccount'; data: { account: AccountId32 } }
  /**
   * An account was reaped.
   **/
  | { name: 'KilledAccount'; data: { account: AccountId32 } }
  /**
   * On on-chain remark happened.
   **/
  | { name: 'Remarked'; data: { sender: AccountId32; hash: H256 } }
  /**
   * An upgrade was authorized.
   **/
  | { name: 'UpgradeAuthorized'; data: { codeHash: H256; checkVersion: boolean } };

export type FrameSupportDispatchDispatchClass = 'Normal' | 'Operational' | 'Mandatory';

export type FrameSupportDispatchPays = 'Yes' | 'No';

/**
 * The `Event` enum of this pallet
 **/
export type CumulusPalletParachainSystemEvent =
  /**
   * The validation function has been scheduled to apply.
   **/
  | { name: 'ValidationFunctionStored' }
  /**
   * The validation function was applied as of the contained relay chain block number.
   **/
  | { name: 'ValidationFunctionApplied'; data: { relayChainBlockNum: number } }
  /**
   * The relay-chain aborted the upgrade process.
   **/
  | { name: 'ValidationFunctionDiscarded' }
  /**
   * Some downward messages have been received and will be processed.
   **/
  | { name: 'DownwardMessagesReceived'; data: { count: number } }
  /**
   * Downward messages were processed using the given weight.
   **/
  | { name: 'DownwardMessagesProcessed'; data: { weightUsed: SpWeightsWeightV2Weight; dmqHead: H256 } }
  /**
   * An upward message was sent to the relay chain.
   **/
  | { name: 'UpwardMessageSent'; data: { messageHash?: FixedBytes<32> | undefined } };

/**
 * The `Event` enum of this pallet
 **/
export type PalletBalancesEvent =
  /**
   * An account was created with some free balance.
   **/
  | { name: 'Endowed'; data: { account: AccountId32; freeBalance: bigint } }
  /**
   * An account was removed whose balance was non-zero but below ExistentialDeposit,
   * resulting in an outright loss.
   **/
  | { name: 'DustLost'; data: { account: AccountId32; amount: bigint } }
  /**
   * Transfer succeeded.
   **/
  | { name: 'Transfer'; data: { from: AccountId32; to: AccountId32; amount: bigint } }
  /**
   * A balance was set by root.
   **/
  | { name: 'BalanceSet'; data: { who: AccountId32; free: bigint } }
  /**
   * Some balance was reserved (moved from free to reserved).
   **/
  | { name: 'Reserved'; data: { who: AccountId32; amount: bigint } }
  /**
   * Some balance was unreserved (moved from reserved to free).
   **/
  | { name: 'Unreserved'; data: { who: AccountId32; amount: bigint } }
  /**
   * Some balance was moved from the reserve of the first account to the second account.
   * Final argument indicates the destination balance type.
   **/
  | {
      name: 'ReserveRepatriated';
      data: {
        from: AccountId32;
        to: AccountId32;
        amount: bigint;
        destinationStatus: FrameSupportTokensMiscBalanceStatus;
      };
    }
  /**
   * Some amount was deposited (e.g. for transaction fees).
   **/
  | { name: 'Deposit'; data: { who: AccountId32; amount: bigint } }
  /**
   * Some amount was withdrawn from the account (e.g. for transaction fees).
   **/
  | { name: 'Withdraw'; data: { who: AccountId32; amount: bigint } }
  /**
   * Some amount was removed from the account (e.g. for misbehavior).
   **/
  | { name: 'Slashed'; data: { who: AccountId32; amount: bigint } }
  /**
   * Some amount was minted into an account.
   **/
  | { name: 'Minted'; data: { who: AccountId32; amount: bigint } }
  /**
   * Some amount was burned from an account.
   **/
  | { name: 'Burned'; data: { who: AccountId32; amount: bigint } }
  /**
   * Some amount was suspended from an account (it can be restored later).
   **/
  | { name: 'Suspended'; data: { who: AccountId32; amount: bigint } }
  /**
   * Some amount was restored into an account.
   **/
  | { name: 'Restored'; data: { who: AccountId32; amount: bigint } }
  /**
   * An account was upgraded.
   **/
  | { name: 'Upgraded'; data: { who: AccountId32 } }
  /**
   * Total issuance was increased by `amount`, creating a credit to be balanced.
   **/
  | { name: 'Issued'; data: { amount: bigint } }
  /**
   * Total issuance was decreased by `amount`, creating a debt to be balanced.
   **/
  | { name: 'Rescinded'; data: { amount: bigint } }
  /**
   * Some balance was locked.
   **/
  | { name: 'Locked'; data: { who: AccountId32; amount: bigint } }
  /**
   * Some balance was unlocked.
   **/
  | { name: 'Unlocked'; data: { who: AccountId32; amount: bigint } }
  /**
   * Some balance was frozen.
   **/
  | { name: 'Frozen'; data: { who: AccountId32; amount: bigint } }
  /**
   * Some balance was thawed.
   **/
  | { name: 'Thawed'; data: { who: AccountId32; amount: bigint } }
  /**
   * The `TotalIssuance` was forcefully changed.
   **/
  | { name: 'TotalIssuanceForced'; data: { old: bigint; new: bigint } };

export type FrameSupportTokensMiscBalanceStatus = 'Free' | 'Reserved';

/**
 * The `Event` enum of this pallet
 **/
export type PalletTransactionPaymentEvent =
  /**
   * A transaction fee `actual_fee`, of which `tip` was added to the minimum inclusion fee,
   * has been paid by `who`.
   **/
  { name: 'TransactionFeePaid'; data: { who: AccountId32; actualFee: bigint; tip: bigint } };

/**
 * The `Event` enum of this pallet
 **/
export type PalletAssetConversionTxPaymentEvent =
  /**
   * A transaction fee `actual_fee`, of which `tip` was added to the minimum inclusion fee,
   * has been paid by `who` in an asset `asset_id`.
   **/
  | {
      name: 'AssetTxFeePaid';
      data: { who: AccountId32; actualFee: bigint; tip: bigint; assetId: StagingXcmV4Location };
    }
  /**
   * A swap of the refund in native currency back to asset failed.
   **/
  | { name: 'AssetRefundFailed'; data: { nativeAmountKept: bigint } };

export type StagingXcmV4Location = { parents: number; interior: StagingXcmV4Junctions };

export type StagingXcmV4Junctions =
  | { type: 'Here' }
  | { type: 'X1'; value: FixedArray<StagingXcmV4Junction, 1> }
  | { type: 'X2'; value: FixedArray<StagingXcmV4Junction, 2> }
  | { type: 'X3'; value: FixedArray<StagingXcmV4Junction, 3> }
  | { type: 'X4'; value: FixedArray<StagingXcmV4Junction, 4> }
  | { type: 'X5'; value: FixedArray<StagingXcmV4Junction, 5> }
  | { type: 'X6'; value: FixedArray<StagingXcmV4Junction, 6> }
  | { type: 'X7'; value: FixedArray<StagingXcmV4Junction, 7> }
  | { type: 'X8'; value: FixedArray<StagingXcmV4Junction, 8> };

export type StagingXcmV4Junction =
  | { type: 'Parachain'; value: number }
  | { type: 'AccountId32'; value: { network?: StagingXcmV4JunctionNetworkId | undefined; id: FixedBytes<32> } }
  | { type: 'AccountIndex64'; value: { network?: StagingXcmV4JunctionNetworkId | undefined; index: bigint } }
  | { type: 'AccountKey20'; value: { network?: StagingXcmV4JunctionNetworkId | undefined; key: FixedBytes<20> } }
  | { type: 'PalletInstance'; value: number }
  | { type: 'GeneralIndex'; value: bigint }
  | { type: 'GeneralKey'; value: { length: number; data: FixedBytes<32> } }
  | { type: 'OnlyChild' }
  | { type: 'Plurality'; value: { id: XcmV3JunctionBodyId; part: XcmV3JunctionBodyPart } }
  | { type: 'GlobalConsensus'; value: StagingXcmV4JunctionNetworkId };

export type StagingXcmV4JunctionNetworkId =
  | { type: 'ByGenesis'; value: FixedBytes<32> }
  | { type: 'ByFork'; value: { blockNumber: bigint; blockHash: FixedBytes<32> } }
  | { type: 'Polkadot' }
  | { type: 'Kusama' }
  | { type: 'Westend' }
  | { type: 'Rococo' }
  | { type: 'Wococo' }
  | { type: 'Ethereum'; value: { chainId: bigint } }
  | { type: 'BitcoinCore' }
  | { type: 'BitcoinCash' }
  | { type: 'PolkadotBulletin' };

export type XcmV3JunctionBodyId =
  | { type: 'Unit' }
  | { type: 'Moniker'; value: FixedBytes<4> }
  | { type: 'Index'; value: number }
  | { type: 'Executive' }
  | { type: 'Technical' }
  | { type: 'Legislative' }
  | { type: 'Judicial' }
  | { type: 'Defense' }
  | { type: 'Administration' }
  | { type: 'Treasury' };

export type XcmV3JunctionBodyPart =
  | { type: 'Voice' }
  | { type: 'Members'; value: { count: number } }
  | { type: 'Fraction'; value: { nom: number; denom: number } }
  | { type: 'AtLeastProportion'; value: { nom: number; denom: number } }
  | { type: 'MoreThanProportion'; value: { nom: number; denom: number } };

/**
 * The `Event` enum of this pallet
 **/
export type PalletVestingEvent =
  /**
   * The amount vested has been updated. This could indicate a change in funds available.
   * The balance given is the amount which is left unvested (and thus locked).
   **/
  | { name: 'VestingUpdated'; data: { account: AccountId32; unvested: bigint } }
  /**
   * An \[account\] has become fully vested.
   **/
  | { name: 'VestingCompleted'; data: { account: AccountId32 } };

/**
 * The `Event` enum of this pallet
 **/
export type PalletCollatorSelectionEvent =
  /**
   * New Invulnerables were set.
   **/
  | { name: 'NewInvulnerables'; data: { invulnerables: Array<AccountId32> } }
  /**
   * A new Invulnerable was added.
   **/
  | { name: 'InvulnerableAdded'; data: { accountId: AccountId32 } }
  /**
   * An Invulnerable was removed.
   **/
  | { name: 'InvulnerableRemoved'; data: { accountId: AccountId32 } }
  /**
   * The number of desired candidates was set.
   **/
  | { name: 'NewDesiredCandidates'; data: { desiredCandidates: number } }
  /**
   * The candidacy bond was set.
   **/
  | { name: 'NewCandidacyBond'; data: { bondAmount: bigint } }
  /**
   * A new candidate joined.
   **/
  | { name: 'CandidateAdded'; data: { accountId: AccountId32; deposit: bigint } }
  /**
   * Bond of a candidate updated.
   **/
  | { name: 'CandidateBondUpdated'; data: { accountId: AccountId32; deposit: bigint } }
  /**
   * A candidate was removed.
   **/
  | { name: 'CandidateRemoved'; data: { accountId: AccountId32 } }
  /**
   * An account was replaced in the candidate list by another one.
   **/
  | { name: 'CandidateReplaced'; data: { old: AccountId32; new: AccountId32; deposit: bigint } }
  /**
   * An account was unable to be added to the Invulnerables because they did not have keys
   * registered. Other Invulnerables may have been set.
   **/
  | { name: 'InvalidInvulnerableSkipped'; data: { accountId: AccountId32 } };

/**
 * The `Event` enum of this pallet
 **/
export type PalletSessionEvent =
  /**
   * New session has happened. Note that the argument is the session index, not the
   * block number as the type might suggest.
   **/
  { name: 'NewSession'; data: { sessionIndex: number } };

/**
 * The `Event` enum of this pallet
 **/
export type CumulusPalletXcmpQueueEvent =
  /**
   * An HRMP message was sent to a sibling parachain.
   **/
  { name: 'XcmpMessageSent'; data: { messageHash: FixedBytes<32> } };

/**
 * The `Event` enum of this pallet
 **/
export type PalletXcmEvent =
  /**
   * Execution of an XCM message was attempted.
   **/
  | { name: 'Attempted'; data: { outcome: StagingXcmV4TraitsOutcome } }
  /**
   * A XCM message was sent.
   **/
  | {
      name: 'Sent';
      data: {
        origin: StagingXcmV4Location;
        destination: StagingXcmV4Location;
        message: StagingXcmV4Xcm;
        messageId: FixedBytes<32>;
      };
    }
  /**
   * Query response received which does not match a registered query. This may be because a
   * matching query was never registered, it may be because it is a duplicate response, or
   * because the query timed out.
   **/
  | { name: 'UnexpectedResponse'; data: { origin: StagingXcmV4Location; queryId: bigint } }
  /**
   * Query response has been received and is ready for taking with `take_response`. There is
   * no registered notification call.
   **/
  | { name: 'ResponseReady'; data: { queryId: bigint; response: StagingXcmV4Response } }
  /**
   * Query response has been received and query is removed. The registered notification has
   * been dispatched and executed successfully.
   **/
  | { name: 'Notified'; data: { queryId: bigint; palletIndex: number; callIndex: number } }
  /**
   * Query response has been received and query is removed. The registered notification
   * could not be dispatched because the dispatch weight is greater than the maximum weight
   * originally budgeted by this runtime for the query result.
   **/
  | {
      name: 'NotifyOverweight';
      data: {
        queryId: bigint;
        palletIndex: number;
        callIndex: number;
        actualWeight: SpWeightsWeightV2Weight;
        maxBudgetedWeight: SpWeightsWeightV2Weight;
      };
    }
  /**
   * Query response has been received and query is removed. There was a general error with
   * dispatching the notification call.
   **/
  | { name: 'NotifyDispatchError'; data: { queryId: bigint; palletIndex: number; callIndex: number } }
  /**
   * Query response has been received and query is removed. The dispatch was unable to be
   * decoded into a `Call`; this might be due to dispatch function having a signature which
   * is not `(origin, QueryId, Response)`.
   **/
  | { name: 'NotifyDecodeFailed'; data: { queryId: bigint; palletIndex: number; callIndex: number } }
  /**
   * Expected query response has been received but the origin location of the response does
   * not match that expected. The query remains registered for a later, valid, response to
   * be received and acted upon.
   **/
  | {
      name: 'InvalidResponder';
      data: { origin: StagingXcmV4Location; queryId: bigint; expectedLocation?: StagingXcmV4Location | undefined };
    }
  /**
   * Expected query response has been received but the expected origin location placed in
   * storage by this runtime previously cannot be decoded. The query remains registered.
   *
   * This is unexpected (since a location placed in storage in a previously executing
   * runtime should be readable prior to query timeout) and dangerous since the possibly
   * valid response will be dropped. Manual governance intervention is probably going to be
   * needed.
   **/
  | { name: 'InvalidResponderVersion'; data: { origin: StagingXcmV4Location; queryId: bigint } }
  /**
   * Received query response has been read and removed.
   **/
  | { name: 'ResponseTaken'; data: { queryId: bigint } }
  /**
   * Some assets have been placed in an asset trap.
   **/
  | { name: 'AssetsTrapped'; data: { hash: H256; origin: StagingXcmV4Location; assets: XcmVersionedAssets } }
  /**
   * An XCM version change notification message has been attempted to be sent.
   *
   * The cost of sending it (borne by the chain) is included.
   **/
  | {
      name: 'VersionChangeNotified';
      data: {
        destination: StagingXcmV4Location;
        result: number;
        cost: StagingXcmV4AssetAssets;
        messageId: FixedBytes<32>;
      };
    }
  /**
   * The supported version of a location has been changed. This might be through an
   * automatic notification or a manual intervention.
   **/
  | { name: 'SupportedVersionChanged'; data: { location: StagingXcmV4Location; version: number } }
  /**
   * A given location which had a version change subscription was dropped owing to an error
   * sending the notification to it.
   **/
  | { name: 'NotifyTargetSendFail'; data: { location: StagingXcmV4Location; queryId: bigint; error: XcmV3TraitsError } }
  /**
   * A given location which had a version change subscription was dropped owing to an error
   * migrating the location to our new XCM format.
   **/
  | { name: 'NotifyTargetMigrationFail'; data: { location: XcmVersionedLocation; queryId: bigint } }
  /**
   * Expected query response has been received but the expected querier location placed in
   * storage by this runtime previously cannot be decoded. The query remains registered.
   *
   * This is unexpected (since a location placed in storage in a previously executing
   * runtime should be readable prior to query timeout) and dangerous since the possibly
   * valid response will be dropped. Manual governance intervention is probably going to be
   * needed.
   **/
  | { name: 'InvalidQuerierVersion'; data: { origin: StagingXcmV4Location; queryId: bigint } }
  /**
   * Expected query response has been received but the querier location of the response does
   * not match the expected. The query remains registered for a later, valid, response to
   * be received and acted upon.
   **/
  | {
      name: 'InvalidQuerier';
      data: {
        origin: StagingXcmV4Location;
        queryId: bigint;
        expectedQuerier: StagingXcmV4Location;
        maybeActualQuerier?: StagingXcmV4Location | undefined;
      };
    }
  /**
   * A remote has requested XCM version change notification from us and we have honored it.
   * A version information message is sent to them and its cost is included.
   **/
  | {
      name: 'VersionNotifyStarted';
      data: { destination: StagingXcmV4Location; cost: StagingXcmV4AssetAssets; messageId: FixedBytes<32> };
    }
  /**
   * We have requested that a remote chain send us XCM version change notifications.
   **/
  | {
      name: 'VersionNotifyRequested';
      data: { destination: StagingXcmV4Location; cost: StagingXcmV4AssetAssets; messageId: FixedBytes<32> };
    }
  /**
   * We have requested that a remote chain stops sending us XCM version change
   * notifications.
   **/
  | {
      name: 'VersionNotifyUnrequested';
      data: { destination: StagingXcmV4Location; cost: StagingXcmV4AssetAssets; messageId: FixedBytes<32> };
    }
  /**
   * Fees were paid from a location for an operation (often for using `SendXcm`).
   **/
  | { name: 'FeesPaid'; data: { paying: StagingXcmV4Location; fees: StagingXcmV4AssetAssets } }
  /**
   * Some assets have been claimed from an asset trap
   **/
  | { name: 'AssetsClaimed'; data: { hash: H256; origin: StagingXcmV4Location; assets: XcmVersionedAssets } }
  /**
   * A XCM version migration finished.
   **/
  | { name: 'VersionMigrationFinished'; data: { version: number } };

export type StagingXcmV4TraitsOutcome =
  | { type: 'Complete'; value: { used: SpWeightsWeightV2Weight } }
  | { type: 'Incomplete'; value: { used: SpWeightsWeightV2Weight; error: XcmV3TraitsError } }
  | { type: 'Error'; value: { error: XcmV3TraitsError } };

export type XcmV3TraitsError =
  | { type: 'Overflow' }
  | { type: 'Unimplemented' }
  | { type: 'UntrustedReserveLocation' }
  | { type: 'UntrustedTeleportLocation' }
  | { type: 'LocationFull' }
  | { type: 'LocationNotInvertible' }
  | { type: 'BadOrigin' }
  | { type: 'InvalidLocation' }
  | { type: 'AssetNotFound' }
  | { type: 'FailedToTransactAsset' }
  | { type: 'NotWithdrawable' }
  | { type: 'LocationCannotHold' }
  | { type: 'ExceedsMaxMessageSize' }
  | { type: 'DestinationUnsupported' }
  | { type: 'Transport' }
  | { type: 'Unroutable' }
  | { type: 'UnknownClaim' }
  | { type: 'FailedToDecode' }
  | { type: 'MaxWeightInvalid' }
  | { type: 'NotHoldingFees' }
  | { type: 'TooExpensive' }
  | { type: 'Trap'; value: bigint }
  | { type: 'ExpectationFalse' }
  | { type: 'PalletNotFound' }
  | { type: 'NameMismatch' }
  | { type: 'VersionIncompatible' }
  | { type: 'HoldingWouldOverflow' }
  | { type: 'ExportError' }
  | { type: 'ReanchorFailed' }
  | { type: 'NoDeal' }
  | { type: 'FeesNotMet' }
  | { type: 'LockError' }
  | { type: 'NoPermission' }
  | { type: 'Unanchored' }
  | { type: 'NotDepositable' }
  | { type: 'UnhandledXcmVersion' }
  | { type: 'WeightLimitReached'; value: SpWeightsWeightV2Weight }
  | { type: 'Barrier' }
  | { type: 'WeightNotComputable' }
  | { type: 'ExceedsStackLimit' };

export type StagingXcmV4Xcm = Array<StagingXcmV4Instruction>;

export type StagingXcmV4Instruction =
  | { type: 'WithdrawAsset'; value: StagingXcmV4AssetAssets }
  | { type: 'ReserveAssetDeposited'; value: StagingXcmV4AssetAssets }
  | { type: 'ReceiveTeleportedAsset'; value: StagingXcmV4AssetAssets }
  | {
      type: 'QueryResponse';
      value: {
        queryId: bigint;
        response: StagingXcmV4Response;
        maxWeight: SpWeightsWeightV2Weight;
        querier?: StagingXcmV4Location | undefined;
      };
    }
  | { type: 'TransferAsset'; value: { assets: StagingXcmV4AssetAssets; beneficiary: StagingXcmV4Location } }
  | {
      type: 'TransferReserveAsset';
      value: { assets: StagingXcmV4AssetAssets; dest: StagingXcmV4Location; xcm: StagingXcmV4Xcm };
    }
  | {
      type: 'Transact';
      value: { originKind: XcmV3OriginKind; requireWeightAtMost: SpWeightsWeightV2Weight; call: XcmDoubleEncoded };
    }
  | { type: 'HrmpNewChannelOpenRequest'; value: { sender: number; maxMessageSize: number; maxCapacity: number } }
  | { type: 'HrmpChannelAccepted'; value: { recipient: number } }
  | { type: 'HrmpChannelClosing'; value: { initiator: number; sender: number; recipient: number } }
  | { type: 'ClearOrigin' }
  | { type: 'DescendOrigin'; value: StagingXcmV4Junctions }
  | { type: 'ReportError'; value: StagingXcmV4QueryResponseInfo }
  | { type: 'DepositAsset'; value: { assets: StagingXcmV4AssetAssetFilter; beneficiary: StagingXcmV4Location } }
  | {
      type: 'DepositReserveAsset';
      value: { assets: StagingXcmV4AssetAssetFilter; dest: StagingXcmV4Location; xcm: StagingXcmV4Xcm };
    }
  | {
      type: 'ExchangeAsset';
      value: { give: StagingXcmV4AssetAssetFilter; want: StagingXcmV4AssetAssets; maximal: boolean };
    }
  | {
      type: 'InitiateReserveWithdraw';
      value: { assets: StagingXcmV4AssetAssetFilter; reserve: StagingXcmV4Location; xcm: StagingXcmV4Xcm };
    }
  | {
      type: 'InitiateTeleport';
      value: { assets: StagingXcmV4AssetAssetFilter; dest: StagingXcmV4Location; xcm: StagingXcmV4Xcm };
    }
  | {
      type: 'ReportHolding';
      value: { responseInfo: StagingXcmV4QueryResponseInfo; assets: StagingXcmV4AssetAssetFilter };
    }
  | { type: 'BuyExecution'; value: { fees: StagingXcmV4Asset; weightLimit: XcmV3WeightLimit } }
  | { type: 'RefundSurplus' }
  | { type: 'SetErrorHandler'; value: StagingXcmV4Xcm }
  | { type: 'SetAppendix'; value: StagingXcmV4Xcm }
  | { type: 'ClearError' }
  | { type: 'ClaimAsset'; value: { assets: StagingXcmV4AssetAssets; ticket: StagingXcmV4Location } }
  | { type: 'Trap'; value: bigint }
  | { type: 'SubscribeVersion'; value: { queryId: bigint; maxResponseWeight: SpWeightsWeightV2Weight } }
  | { type: 'UnsubscribeVersion' }
  | { type: 'BurnAsset'; value: StagingXcmV4AssetAssets }
  | { type: 'ExpectAsset'; value: StagingXcmV4AssetAssets }
  | { type: 'ExpectOrigin'; value?: StagingXcmV4Location | undefined }
  | { type: 'ExpectError'; value?: [number, XcmV3TraitsError] | undefined }
  | { type: 'ExpectTransactStatus'; value: XcmV3MaybeErrorCode }
  | { type: 'QueryPallet'; value: { moduleName: Bytes; responseInfo: StagingXcmV4QueryResponseInfo } }
  | {
      type: 'ExpectPallet';
      value: { index: number; name: Bytes; moduleName: Bytes; crateMajor: number; minCrateMinor: number };
    }
  | { type: 'ReportTransactStatus'; value: StagingXcmV4QueryResponseInfo }
  | { type: 'ClearTransactStatus' }
  | { type: 'UniversalOrigin'; value: StagingXcmV4Junction }
  | {
      type: 'ExportMessage';
      value: { network: StagingXcmV4JunctionNetworkId; destination: StagingXcmV4Junctions; xcm: StagingXcmV4Xcm };
    }
  | { type: 'LockAsset'; value: { asset: StagingXcmV4Asset; unlocker: StagingXcmV4Location } }
  | { type: 'UnlockAsset'; value: { asset: StagingXcmV4Asset; target: StagingXcmV4Location } }
  | { type: 'NoteUnlockable'; value: { asset: StagingXcmV4Asset; owner: StagingXcmV4Location } }
  | { type: 'RequestUnlock'; value: { asset: StagingXcmV4Asset; locker: StagingXcmV4Location } }
  | { type: 'SetFeesMode'; value: { jitWithdraw: boolean } }
  | { type: 'SetTopic'; value: FixedBytes<32> }
  | { type: 'ClearTopic' }
  | { type: 'AliasOrigin'; value: StagingXcmV4Location }
  | {
      type: 'UnpaidExecution';
      value: { weightLimit: XcmV3WeightLimit; checkOrigin?: StagingXcmV4Location | undefined };
    };

export type StagingXcmV4AssetAssets = Array<StagingXcmV4Asset>;

export type StagingXcmV4Asset = { id: StagingXcmV4AssetAssetId; fun: StagingXcmV4AssetFungibility };

export type StagingXcmV4AssetAssetId = StagingXcmV4Location;

export type StagingXcmV4AssetFungibility =
  | { type: 'Fungible'; value: bigint }
  | { type: 'NonFungible'; value: StagingXcmV4AssetAssetInstance };

export type StagingXcmV4AssetAssetInstance =
  | { type: 'Undefined' }
  | { type: 'Index'; value: bigint }
  | { type: 'Array4'; value: FixedBytes<4> }
  | { type: 'Array8'; value: FixedBytes<8> }
  | { type: 'Array16'; value: FixedBytes<16> }
  | { type: 'Array32'; value: FixedBytes<32> };

export type StagingXcmV4Response =
  | { type: 'Null' }
  | { type: 'Assets'; value: StagingXcmV4AssetAssets }
  | { type: 'ExecutionResult'; value?: [number, XcmV3TraitsError] | undefined }
  | { type: 'Version'; value: number }
  | { type: 'PalletsInfo'; value: Array<StagingXcmV4PalletInfo> }
  | { type: 'DispatchResult'; value: XcmV3MaybeErrorCode };

export type StagingXcmV4PalletInfo = {
  index: number;
  name: Bytes;
  moduleName: Bytes;
  major: number;
  minor: number;
  patch: number;
};

export type XcmV3MaybeErrorCode =
  | { type: 'Success' }
  | { type: 'Error'; value: Bytes }
  | { type: 'TruncatedError'; value: Bytes };

export type XcmV3OriginKind = 'Native' | 'SovereignAccount' | 'Superuser' | 'Xcm';

export type XcmDoubleEncoded = { encoded: Bytes };

export type StagingXcmV4QueryResponseInfo = {
  destination: StagingXcmV4Location;
  queryId: bigint;
  maxWeight: SpWeightsWeightV2Weight;
};

export type StagingXcmV4AssetAssetFilter =
  | { type: 'Definite'; value: StagingXcmV4AssetAssets }
  | { type: 'Wild'; value: StagingXcmV4AssetWildAsset };

export type StagingXcmV4AssetWildAsset =
  | { type: 'All' }
  | { type: 'AllOf'; value: { id: StagingXcmV4AssetAssetId; fun: StagingXcmV4AssetWildFungibility } }
  | { type: 'AllCounted'; value: number }
  | {
      type: 'AllOfCounted';
      value: { id: StagingXcmV4AssetAssetId; fun: StagingXcmV4AssetWildFungibility; count: number };
    };

export type StagingXcmV4AssetWildFungibility = 'Fungible' | 'NonFungible';

export type XcmV3WeightLimit = { type: 'Unlimited' } | { type: 'Limited'; value: SpWeightsWeightV2Weight };

export type XcmVersionedAssets =
  | { type: 'V2'; value: XcmV2MultiassetMultiAssets }
  | { type: 'V3'; value: XcmV3MultiassetMultiAssets }
  | { type: 'V4'; value: StagingXcmV4AssetAssets };

export type XcmV2MultiassetMultiAssets = Array<XcmV2MultiassetMultiAsset>;

export type XcmV2MultiassetMultiAsset = { id: XcmV2MultiassetAssetId; fun: XcmV2MultiassetFungibility };

export type XcmV2MultiassetAssetId =
  | { type: 'Concrete'; value: XcmV2MultilocationMultiLocation }
  | { type: 'Abstract'; value: Bytes };

export type XcmV2MultilocationMultiLocation = { parents: number; interior: XcmV2MultilocationJunctions };

export type XcmV2MultilocationJunctions =
  | { type: 'Here' }
  | { type: 'X1'; value: XcmV2Junction }
  | { type: 'X2'; value: [XcmV2Junction, XcmV2Junction] }
  | { type: 'X3'; value: [XcmV2Junction, XcmV2Junction, XcmV2Junction] }
  | { type: 'X4'; value: [XcmV2Junction, XcmV2Junction, XcmV2Junction, XcmV2Junction] }
  | { type: 'X5'; value: [XcmV2Junction, XcmV2Junction, XcmV2Junction, XcmV2Junction, XcmV2Junction] }
  | { type: 'X6'; value: [XcmV2Junction, XcmV2Junction, XcmV2Junction, XcmV2Junction, XcmV2Junction, XcmV2Junction] }
  | {
      type: 'X7';
      value: [XcmV2Junction, XcmV2Junction, XcmV2Junction, XcmV2Junction, XcmV2Junction, XcmV2Junction, XcmV2Junction];
    }
  | {
      type: 'X8';
      value: [
        XcmV2Junction,
        XcmV2Junction,
        XcmV2Junction,
        XcmV2Junction,
        XcmV2Junction,
        XcmV2Junction,
        XcmV2Junction,
        XcmV2Junction,
      ];
    };

export type XcmV2Junction =
  | { type: 'Parachain'; value: number }
  | { type: 'AccountId32'; value: { network: XcmV2NetworkId; id: FixedBytes<32> } }
  | { type: 'AccountIndex64'; value: { network: XcmV2NetworkId; index: bigint } }
  | { type: 'AccountKey20'; value: { network: XcmV2NetworkId; key: FixedBytes<20> } }
  | { type: 'PalletInstance'; value: number }
  | { type: 'GeneralIndex'; value: bigint }
  | { type: 'GeneralKey'; value: Bytes }
  | { type: 'OnlyChild' }
  | { type: 'Plurality'; value: { id: XcmV2BodyId; part: XcmV2BodyPart } };

export type XcmV2NetworkId =
  | { type: 'Any' }
  | { type: 'Named'; value: Bytes }
  | { type: 'Polkadot' }
  | { type: 'Kusama' };

export type XcmV2BodyId =
  | { type: 'Unit' }
  | { type: 'Named'; value: Bytes }
  | { type: 'Index'; value: number }
  | { type: 'Executive' }
  | { type: 'Technical' }
  | { type: 'Legislative' }
  | { type: 'Judicial' }
  | { type: 'Defense' }
  | { type: 'Administration' }
  | { type: 'Treasury' };

export type XcmV2BodyPart =
  | { type: 'Voice' }
  | { type: 'Members'; value: { count: number } }
  | { type: 'Fraction'; value: { nom: number; denom: number } }
  | { type: 'AtLeastProportion'; value: { nom: number; denom: number } }
  | { type: 'MoreThanProportion'; value: { nom: number; denom: number } };

export type XcmV2MultiassetFungibility =
  | { type: 'Fungible'; value: bigint }
  | { type: 'NonFungible'; value: XcmV2MultiassetAssetInstance };

export type XcmV2MultiassetAssetInstance =
  | { type: 'Undefined' }
  | { type: 'Index'; value: bigint }
  | { type: 'Array4'; value: FixedBytes<4> }
  | { type: 'Array8'; value: FixedBytes<8> }
  | { type: 'Array16'; value: FixedBytes<16> }
  | { type: 'Array32'; value: FixedBytes<32> }
  | { type: 'Blob'; value: Bytes };

export type XcmV3MultiassetMultiAssets = Array<XcmV3MultiassetMultiAsset>;

export type XcmV3MultiassetMultiAsset = { id: XcmV3MultiassetAssetId; fun: XcmV3MultiassetFungibility };

export type XcmV3MultiassetAssetId =
  | { type: 'Concrete'; value: StagingXcmV3MultilocationMultiLocation }
  | { type: 'Abstract'; value: FixedBytes<32> };

export type StagingXcmV3MultilocationMultiLocation = { parents: number; interior: XcmV3Junctions };

export type XcmV3Junctions =
  | { type: 'Here' }
  | { type: 'X1'; value: XcmV3Junction }
  | { type: 'X2'; value: [XcmV3Junction, XcmV3Junction] }
  | { type: 'X3'; value: [XcmV3Junction, XcmV3Junction, XcmV3Junction] }
  | { type: 'X4'; value: [XcmV3Junction, XcmV3Junction, XcmV3Junction, XcmV3Junction] }
  | { type: 'X5'; value: [XcmV3Junction, XcmV3Junction, XcmV3Junction, XcmV3Junction, XcmV3Junction] }
  | { type: 'X6'; value: [XcmV3Junction, XcmV3Junction, XcmV3Junction, XcmV3Junction, XcmV3Junction, XcmV3Junction] }
  | {
      type: 'X7';
      value: [XcmV3Junction, XcmV3Junction, XcmV3Junction, XcmV3Junction, XcmV3Junction, XcmV3Junction, XcmV3Junction];
    }
  | {
      type: 'X8';
      value: [
        XcmV3Junction,
        XcmV3Junction,
        XcmV3Junction,
        XcmV3Junction,
        XcmV3Junction,
        XcmV3Junction,
        XcmV3Junction,
        XcmV3Junction,
      ];
    };

export type XcmV3Junction =
  | { type: 'Parachain'; value: number }
  | { type: 'AccountId32'; value: { network?: XcmV3JunctionNetworkId | undefined; id: FixedBytes<32> } }
  | { type: 'AccountIndex64'; value: { network?: XcmV3JunctionNetworkId | undefined; index: bigint } }
  | { type: 'AccountKey20'; value: { network?: XcmV3JunctionNetworkId | undefined; key: FixedBytes<20> } }
  | { type: 'PalletInstance'; value: number }
  | { type: 'GeneralIndex'; value: bigint }
  | { type: 'GeneralKey'; value: { length: number; data: FixedBytes<32> } }
  | { type: 'OnlyChild' }
  | { type: 'Plurality'; value: { id: XcmV3JunctionBodyId; part: XcmV3JunctionBodyPart } }
  | { type: 'GlobalConsensus'; value: XcmV3JunctionNetworkId };

export type XcmV3JunctionNetworkId =
  | { type: 'ByGenesis'; value: FixedBytes<32> }
  | { type: 'ByFork'; value: { blockNumber: bigint; blockHash: FixedBytes<32> } }
  | { type: 'Polkadot' }
  | { type: 'Kusama' }
  | { type: 'Westend' }
  | { type: 'Rococo' }
  | { type: 'Wococo' }
  | { type: 'Ethereum'; value: { chainId: bigint } }
  | { type: 'BitcoinCore' }
  | { type: 'BitcoinCash' }
  | { type: 'PolkadotBulletin' };

export type XcmV3MultiassetFungibility =
  | { type: 'Fungible'; value: bigint }
  | { type: 'NonFungible'; value: XcmV3MultiassetAssetInstance };

export type XcmV3MultiassetAssetInstance =
  | { type: 'Undefined' }
  | { type: 'Index'; value: bigint }
  | { type: 'Array4'; value: FixedBytes<4> }
  | { type: 'Array8'; value: FixedBytes<8> }
  | { type: 'Array16'; value: FixedBytes<16> }
  | { type: 'Array32'; value: FixedBytes<32> };

export type XcmVersionedLocation =
  | { type: 'V2'; value: XcmV2MultilocationMultiLocation }
  | { type: 'V3'; value: StagingXcmV3MultilocationMultiLocation }
  | { type: 'V4'; value: StagingXcmV4Location };

/**
 * The `Event` enum of this pallet
 **/
export type CumulusPalletXcmEvent =
  /**
   * Downward message is invalid XCM.
   * \[ id \]
   **/
  | { name: 'InvalidFormat'; data: FixedBytes<32> }
  /**
   * Downward message is unsupported version of XCM.
   * \[ id \]
   **/
  | { name: 'UnsupportedVersion'; data: FixedBytes<32> }
  /**
   * Downward message executed with the given outcome.
   * \[ id, outcome \]
   **/
  | { name: 'ExecutedDownward'; data: [FixedBytes<32>, StagingXcmV4TraitsOutcome] };

/**
 * The `Event` enum of this pallet
 **/
export type PalletMessageQueueEvent =
  /**
   * Message discarded due to an error in the `MessageProcessor` (usually a format error).
   **/
  | {
      name: 'ProcessingFailed';
      data: {
        /**
         * The `blake2_256` hash of the message.
         **/
        id: H256;

        /**
         * The queue of the message.
         **/
        origin: CumulusPrimitivesCoreAggregateMessageOrigin;

        /**
         * The error that occurred.
         *
         * This error is pretty opaque. More fine-grained errors need to be emitted as events
         * by the `MessageProcessor`.
         **/
        error: FrameSupportMessagesProcessMessageError;
      };
    }
  /**
   * Message is processed.
   **/
  | {
      name: 'Processed';
      data: {
        /**
         * The `blake2_256` hash of the message.
         **/
        id: H256;

        /**
         * The queue of the message.
         **/
        origin: CumulusPrimitivesCoreAggregateMessageOrigin;

        /**
         * How much weight was used to process the message.
         **/
        weightUsed: SpWeightsWeightV2Weight;

        /**
         * Whether the message was processed.
         *
         * Note that this does not mean that the underlying `MessageProcessor` was internally
         * successful. It *solely* means that the MQ pallet will treat this as a success
         * condition and discard the message. Any internal error needs to be emitted as events
         * by the `MessageProcessor`.
         **/
        success: boolean;
      };
    }
  /**
   * Message placed in overweight queue.
   **/
  | {
      name: 'OverweightEnqueued';
      data: {
        /**
         * The `blake2_256` hash of the message.
         **/
        id: FixedBytes<32>;

        /**
         * The queue of the message.
         **/
        origin: CumulusPrimitivesCoreAggregateMessageOrigin;

        /**
         * The page of the message.
         **/
        pageIndex: number;

        /**
         * The index of the message within the page.
         **/
        messageIndex: number;
      };
    }
  /**
   * This page was reaped.
   **/
  | {
      name: 'PageReaped';
      data: {
        /**
         * The queue of the page.
         **/
        origin: CumulusPrimitivesCoreAggregateMessageOrigin;

        /**
         * The index of the page.
         **/
        index: number;
      };
    };

export type CumulusPrimitivesCoreAggregateMessageOrigin =
  | { type: 'Here' }
  | { type: 'Parent' }
  | { type: 'Sibling'; value: PolkadotParachainPrimitivesPrimitivesId };

export type PolkadotParachainPrimitivesPrimitivesId = number;

export type FrameSupportMessagesProcessMessageError =
  | { type: 'BadFormat' }
  | { type: 'Corrupt' }
  | { type: 'Unsupported' }
  | { type: 'Overweight'; value: SpWeightsWeightV2Weight }
  | { type: 'Yield' }
  | { type: 'StackLimitReached' };

/**
 * The `Event` enum of this pallet
 **/
export type PalletUtilityEvent =
  /**
   * Batch of dispatches did not complete fully. Index of first failing dispatch given, as
   * well as the error.
   **/
  | { name: 'BatchInterrupted'; data: { index: number; error: DispatchError } }
  /**
   * Batch of dispatches completed fully with no error.
   **/
  | { name: 'BatchCompleted' }
  /**
   * Batch of dispatches completed but has errors.
   **/
  | { name: 'BatchCompletedWithErrors' }
  /**
   * A single item within a Batch of dispatches has completed with no error.
   **/
  | { name: 'ItemCompleted' }
  /**
   * A single item within a Batch of dispatches has completed with error.
   **/
  | { name: 'ItemFailed'; data: { error: DispatchError } }
  /**
   * A call was dispatched.
   **/
  | { name: 'DispatchedAs'; data: { result: Result<[], DispatchError> } };

/**
 * The `Event` enum of this pallet
 **/
export type PalletMultisigEvent =
  /**
   * A new multisig operation has begun.
   **/
  | { name: 'NewMultisig'; data: { approving: AccountId32; multisig: AccountId32; callHash: FixedBytes<32> } }
  /**
   * A multisig operation has been approved by someone.
   **/
  | {
      name: 'MultisigApproval';
      data: {
        approving: AccountId32;
        timepoint: PalletMultisigTimepoint;
        multisig: AccountId32;
        callHash: FixedBytes<32>;
      };
    }
  /**
   * A multisig operation has been executed.
   **/
  | {
      name: 'MultisigExecuted';
      data: {
        approving: AccountId32;
        timepoint: PalletMultisigTimepoint;
        multisig: AccountId32;
        callHash: FixedBytes<32>;
        result: Result<[], DispatchError>;
      };
    }
  /**
   * A multisig operation has been cancelled.
   **/
  | {
      name: 'MultisigCancelled';
      data: {
        cancelling: AccountId32;
        timepoint: PalletMultisigTimepoint;
        multisig: AccountId32;
        callHash: FixedBytes<32>;
      };
    };

export type PalletMultisigTimepoint = { height: number; index: number };

/**
 * The `Event` enum of this pallet
 **/
export type PalletProxyEvent =
  /**
   * A proxy was executed correctly, with the given.
   **/
  | { name: 'ProxyExecuted'; data: { result: Result<[], DispatchError> } }
  /**
   * A pure account has been created by new proxy with given
   * disambiguation index and proxy type.
   **/
  | {
      name: 'PureCreated';
      data: {
        pure: AccountId32;
        who: AccountId32;
        proxyType: AssetHubKusamaRuntimeProxyType;
        disambiguationIndex: number;
      };
    }
  /**
   * An announcement was placed to make a call in the future.
   **/
  | { name: 'Announced'; data: { real: AccountId32; proxy: AccountId32; callHash: H256 } }
  /**
   * A proxy was added.
   **/
  | {
      name: 'ProxyAdded';
      data: {
        delegator: AccountId32;
        delegatee: AccountId32;
        proxyType: AssetHubKusamaRuntimeProxyType;
        delay: number;
      };
    }
  /**
   * A proxy was removed.
   **/
  | {
      name: 'ProxyRemoved';
      data: {
        delegator: AccountId32;
        delegatee: AccountId32;
        proxyType: AssetHubKusamaRuntimeProxyType;
        delay: number;
      };
    };

export type AssetHubKusamaRuntimeProxyType =
  | 'Any'
  | 'NonTransfer'
  | 'CancelProxy'
  | 'Assets'
  | 'AssetOwner'
  | 'AssetManager'
  | 'Collator';

/**
 * The `Event` enum of this pallet
 **/
export type PalletAssetsEvent =
  /**
   * Some asset class was created.
   **/
  | { name: 'Created'; data: { assetId: number; creator: AccountId32; owner: AccountId32 } }
  /**
   * Some assets were issued.
   **/
  | { name: 'Issued'; data: { assetId: number; owner: AccountId32; amount: bigint } }
  /**
   * Some assets were transferred.
   **/
  | { name: 'Transferred'; data: { assetId: number; from: AccountId32; to: AccountId32; amount: bigint } }
  /**
   * Some assets were destroyed.
   **/
  | { name: 'Burned'; data: { assetId: number; owner: AccountId32; balance: bigint } }
  /**
   * The management team changed.
   **/
  | { name: 'TeamChanged'; data: { assetId: number; issuer: AccountId32; admin: AccountId32; freezer: AccountId32 } }
  /**
   * The owner changed.
   **/
  | { name: 'OwnerChanged'; data: { assetId: number; owner: AccountId32 } }
  /**
   * Some account `who` was frozen.
   **/
  | { name: 'Frozen'; data: { assetId: number; who: AccountId32 } }
  /**
   * Some account `who` was thawed.
   **/
  | { name: 'Thawed'; data: { assetId: number; who: AccountId32 } }
  /**
   * Some asset `asset_id` was frozen.
   **/
  | { name: 'AssetFrozen'; data: { assetId: number } }
  /**
   * Some asset `asset_id` was thawed.
   **/
  | { name: 'AssetThawed'; data: { assetId: number } }
  /**
   * Accounts were destroyed for given asset.
   **/
  | { name: 'AccountsDestroyed'; data: { assetId: number; accountsDestroyed: number; accountsRemaining: number } }
  /**
   * Approvals were destroyed for given asset.
   **/
  | { name: 'ApprovalsDestroyed'; data: { assetId: number; approvalsDestroyed: number; approvalsRemaining: number } }
  /**
   * An asset class is in the process of being destroyed.
   **/
  | { name: 'DestructionStarted'; data: { assetId: number } }
  /**
   * An asset class was destroyed.
   **/
  | { name: 'Destroyed'; data: { assetId: number } }
  /**
   * Some asset class was force-created.
   **/
  | { name: 'ForceCreated'; data: { assetId: number; owner: AccountId32 } }
  /**
   * New metadata has been set for an asset.
   **/
  | { name: 'MetadataSet'; data: { assetId: number; name: Bytes; symbol: Bytes; decimals: number; isFrozen: boolean } }
  /**
   * Metadata has been cleared for an asset.
   **/
  | { name: 'MetadataCleared'; data: { assetId: number } }
  /**
   * (Additional) funds have been approved for transfer to a destination account.
   **/
  | { name: 'ApprovedTransfer'; data: { assetId: number; source: AccountId32; delegate: AccountId32; amount: bigint } }
  /**
   * An approval for account `delegate` was cancelled by `owner`.
   **/
  | { name: 'ApprovalCancelled'; data: { assetId: number; owner: AccountId32; delegate: AccountId32 } }
  /**
   * An `amount` was transferred in its entirety from `owner` to `destination` by
   * the approved `delegate`.
   **/
  | {
      name: 'TransferredApproved';
      data: { assetId: number; owner: AccountId32; delegate: AccountId32; destination: AccountId32; amount: bigint };
    }
  /**
   * An asset has had its attributes changed by the `Force` origin.
   **/
  | { name: 'AssetStatusChanged'; data: { assetId: number } }
  /**
   * The min_balance of an asset has been updated by the asset owner.
   **/
  | { name: 'AssetMinBalanceChanged'; data: { assetId: number; newMinBalance: bigint } }
  /**
   * Some account `who` was created with a deposit from `depositor`.
   **/
  | { name: 'Touched'; data: { assetId: number; who: AccountId32; depositor: AccountId32 } }
  /**
   * Some account `who` was blocked.
   **/
  | { name: 'Blocked'; data: { assetId: number; who: AccountId32 } }
  /**
   * Some assets were deposited (e.g. for transaction fees).
   **/
  | { name: 'Deposited'; data: { assetId: number; who: AccountId32; amount: bigint } }
  /**
   * Some assets were withdrawn from the account (e.g. for transaction fees).
   **/
  | { name: 'Withdrawn'; data: { assetId: number; who: AccountId32; amount: bigint } };

/**
 * The `Event` enum of this pallet
 **/
export type PalletUniquesEvent =
  /**
   * A `collection` was created.
   **/
  | { name: 'Created'; data: { collection: number; creator: AccountId32; owner: AccountId32 } }
  /**
   * A `collection` was force-created.
   **/
  | { name: 'ForceCreated'; data: { collection: number; owner: AccountId32 } }
  /**
   * A `collection` was destroyed.
   **/
  | { name: 'Destroyed'; data: { collection: number } }
  /**
   * An `item` was issued.
   **/
  | { name: 'Issued'; data: { collection: number; item: number; owner: AccountId32 } }
  /**
   * An `item` was transferred.
   **/
  | { name: 'Transferred'; data: { collection: number; item: number; from: AccountId32; to: AccountId32 } }
  /**
   * An `item` was destroyed.
   **/
  | { name: 'Burned'; data: { collection: number; item: number; owner: AccountId32 } }
  /**
   * Some `item` was frozen.
   **/
  | { name: 'Frozen'; data: { collection: number; item: number } }
  /**
   * Some `item` was thawed.
   **/
  | { name: 'Thawed'; data: { collection: number; item: number } }
  /**
   * Some `collection` was frozen.
   **/
  | { name: 'CollectionFrozen'; data: { collection: number } }
  /**
   * Some `collection` was thawed.
   **/
  | { name: 'CollectionThawed'; data: { collection: number } }
  /**
   * The owner changed.
   **/
  | { name: 'OwnerChanged'; data: { collection: number; newOwner: AccountId32 } }
  /**
   * The management team changed.
   **/
  | { name: 'TeamChanged'; data: { collection: number; issuer: AccountId32; admin: AccountId32; freezer: AccountId32 } }
  /**
   * An `item` of a `collection` has been approved by the `owner` for transfer by
   * a `delegate`.
   **/
  | { name: 'ApprovedTransfer'; data: { collection: number; item: number; owner: AccountId32; delegate: AccountId32 } }
  /**
   * An approval for a `delegate` account to transfer the `item` of an item
   * `collection` was cancelled by its `owner`.
   **/
  | { name: 'ApprovalCancelled'; data: { collection: number; item: number; owner: AccountId32; delegate: AccountId32 } }
  /**
   * A `collection` has had its attributes changed by the `Force` origin.
   **/
  | { name: 'ItemStatusChanged'; data: { collection: number } }
  /**
   * New metadata has been set for a `collection`.
   **/
  | { name: 'CollectionMetadataSet'; data: { collection: number; data: Bytes; isFrozen: boolean } }
  /**
   * Metadata has been cleared for a `collection`.
   **/
  | { name: 'CollectionMetadataCleared'; data: { collection: number } }
  /**
   * New metadata has been set for an item.
   **/
  | { name: 'MetadataSet'; data: { collection: number; item: number; data: Bytes; isFrozen: boolean } }
  /**
   * Metadata has been cleared for an item.
   **/
  | { name: 'MetadataCleared'; data: { collection: number; item: number } }
  /**
   * Metadata has been cleared for an item.
   **/
  | { name: 'Redeposited'; data: { collection: number; successfulItems: Array<number> } }
  /**
   * New attribute metadata has been set for a `collection` or `item`.
   **/
  | { name: 'AttributeSet'; data: { collection: number; maybeItem?: number | undefined; key: Bytes; value: Bytes } }
  /**
   * Attribute metadata has been cleared for a `collection` or `item`.
   **/
  | { name: 'AttributeCleared'; data: { collection: number; maybeItem?: number | undefined; key: Bytes } }
  /**
   * Ownership acceptance has changed for an account.
   **/
  | { name: 'OwnershipAcceptanceChanged'; data: { who: AccountId32; maybeCollection?: number | undefined } }
  /**
   * Max supply has been set for a collection.
   **/
  | { name: 'CollectionMaxSupplySet'; data: { collection: number; maxSupply: number } }
  /**
   * The price was set for the instance.
   **/
  | {
      name: 'ItemPriceSet';
      data: { collection: number; item: number; price: bigint; whitelistedBuyer?: AccountId32 | undefined };
    }
  /**
   * The price for the instance was removed.
   **/
  | { name: 'ItemPriceRemoved'; data: { collection: number; item: number } }
  /**
   * An item was bought.
   **/
  | {
      name: 'ItemBought';
      data: { collection: number; item: number; price: bigint; seller: AccountId32; buyer: AccountId32 };
    };

/**
 * The `Event` enum of this pallet
 **/
export type PalletNftsEvent =
  /**
   * A `collection` was created.
   **/
  | { name: 'Created'; data: { collection: number; creator: AccountId32; owner: AccountId32 } }
  /**
   * A `collection` was force-created.
   **/
  | { name: 'ForceCreated'; data: { collection: number; owner: AccountId32 } }
  /**
   * A `collection` was destroyed.
   **/
  | { name: 'Destroyed'; data: { collection: number } }
  /**
   * An `item` was issued.
   **/
  | { name: 'Issued'; data: { collection: number; item: number; owner: AccountId32 } }
  /**
   * An `item` was transferred.
   **/
  | { name: 'Transferred'; data: { collection: number; item: number; from: AccountId32; to: AccountId32 } }
  /**
   * An `item` was destroyed.
   **/
  | { name: 'Burned'; data: { collection: number; item: number; owner: AccountId32 } }
  /**
   * An `item` became non-transferable.
   **/
  | { name: 'ItemTransferLocked'; data: { collection: number; item: number } }
  /**
   * An `item` became transferable.
   **/
  | { name: 'ItemTransferUnlocked'; data: { collection: number; item: number } }
  /**
   * `item` metadata or attributes were locked.
   **/
  | {
      name: 'ItemPropertiesLocked';
      data: { collection: number; item: number; lockMetadata: boolean; lockAttributes: boolean };
    }
  /**
   * Some `collection` was locked.
   **/
  | { name: 'CollectionLocked'; data: { collection: number } }
  /**
   * The owner changed.
   **/
  | { name: 'OwnerChanged'; data: { collection: number; newOwner: AccountId32 } }
  /**
   * The management team changed.
   **/
  | {
      name: 'TeamChanged';
      data: {
        collection: number;
        issuer?: AccountId32 | undefined;
        admin?: AccountId32 | undefined;
        freezer?: AccountId32 | undefined;
      };
    }
  /**
   * An `item` of a `collection` has been approved by the `owner` for transfer by
   * a `delegate`.
   **/
  | {
      name: 'TransferApproved';
      data: {
        collection: number;
        item: number;
        owner: AccountId32;
        delegate: AccountId32;
        deadline?: number | undefined;
      };
    }
  /**
   * An approval for a `delegate` account to transfer the `item` of an item
   * `collection` was cancelled by its `owner`.
   **/
  | { name: 'ApprovalCancelled'; data: { collection: number; item: number; owner: AccountId32; delegate: AccountId32 } }
  /**
   * All approvals of an item got cancelled.
   **/
  | { name: 'AllApprovalsCancelled'; data: { collection: number; item: number; owner: AccountId32 } }
  /**
   * A `collection` has had its config changed by the `Force` origin.
   **/
  | { name: 'CollectionConfigChanged'; data: { collection: number } }
  /**
   * New metadata has been set for a `collection`.
   **/
  | { name: 'CollectionMetadataSet'; data: { collection: number; data: Bytes } }
  /**
   * Metadata has been cleared for a `collection`.
   **/
  | { name: 'CollectionMetadataCleared'; data: { collection: number } }
  /**
   * New metadata has been set for an item.
   **/
  | { name: 'ItemMetadataSet'; data: { collection: number; item: number; data: Bytes } }
  /**
   * Metadata has been cleared for an item.
   **/
  | { name: 'ItemMetadataCleared'; data: { collection: number; item: number } }
  /**
   * The deposit for a set of `item`s within a `collection` has been updated.
   **/
  | { name: 'Redeposited'; data: { collection: number; successfulItems: Array<number> } }
  /**
   * New attribute metadata has been set for a `collection` or `item`.
   **/
  | {
      name: 'AttributeSet';
      data: {
        collection: number;
        maybeItem?: number | undefined;
        key: Bytes;
        value: Bytes;
        namespace: PalletNftsAttributeNamespace;
      };
    }
  /**
   * Attribute metadata has been cleared for a `collection` or `item`.
   **/
  | {
      name: 'AttributeCleared';
      data: { collection: number; maybeItem?: number | undefined; key: Bytes; namespace: PalletNftsAttributeNamespace };
    }
  /**
   * A new approval to modify item attributes was added.
   **/
  | { name: 'ItemAttributesApprovalAdded'; data: { collection: number; item: number; delegate: AccountId32 } }
  /**
   * A new approval to modify item attributes was removed.
   **/
  | { name: 'ItemAttributesApprovalRemoved'; data: { collection: number; item: number; delegate: AccountId32 } }
  /**
   * Ownership acceptance has changed for an account.
   **/
  | { name: 'OwnershipAcceptanceChanged'; data: { who: AccountId32; maybeCollection?: number | undefined } }
  /**
   * Max supply has been set for a collection.
   **/
  | { name: 'CollectionMaxSupplySet'; data: { collection: number; maxSupply: number } }
  /**
   * Mint settings for a collection had changed.
   **/
  | { name: 'CollectionMintSettingsUpdated'; data: { collection: number } }
  /**
   * Event gets emitted when the `NextCollectionId` gets incremented.
   **/
  | { name: 'NextCollectionIdIncremented'; data: { nextId?: number | undefined } }
  /**
   * The price was set for the item.
   **/
  | {
      name: 'ItemPriceSet';
      data: { collection: number; item: number; price: bigint; whitelistedBuyer?: AccountId32 | undefined };
    }
  /**
   * The price for the item was removed.
   **/
  | { name: 'ItemPriceRemoved'; data: { collection: number; item: number } }
  /**
   * An item was bought.
   **/
  | {
      name: 'ItemBought';
      data: { collection: number; item: number; price: bigint; seller: AccountId32; buyer: AccountId32 };
    }
  /**
   * A tip was sent.
   **/
  | {
      name: 'TipSent';
      data: { collection: number; item: number; sender: AccountId32; receiver: AccountId32; amount: bigint };
    }
  /**
   * An `item` swap intent was created.
   **/
  | {
      name: 'SwapCreated';
      data: {
        offeredCollection: number;
        offeredItem: number;
        desiredCollection: number;
        desiredItem?: number | undefined;
        price?: PalletNftsPriceWithDirection | undefined;
        deadline: number;
      };
    }
  /**
   * The swap was cancelled.
   **/
  | {
      name: 'SwapCancelled';
      data: {
        offeredCollection: number;
        offeredItem: number;
        desiredCollection: number;
        desiredItem?: number | undefined;
        price?: PalletNftsPriceWithDirection | undefined;
        deadline: number;
      };
    }
  /**
   * The swap has been claimed.
   **/
  | {
      name: 'SwapClaimed';
      data: {
        sentCollection: number;
        sentItem: number;
        sentItemOwner: AccountId32;
        receivedCollection: number;
        receivedItem: number;
        receivedItemOwner: AccountId32;
        price?: PalletNftsPriceWithDirection | undefined;
        deadline: number;
      };
    }
  /**
   * New attributes have been set for an `item` of the `collection`.
   **/
  | {
      name: 'PreSignedAttributesSet';
      data: { collection: number; item: number; namespace: PalletNftsAttributeNamespace };
    }
  /**
   * A new attribute in the `Pallet` namespace was set for the `collection` or an `item`
   * within that `collection`.
   **/
  | {
      name: 'PalletAttributeSet';
      data: { collection: number; item?: number | undefined; attribute: PalletNftsPalletAttributes; value: Bytes };
    };

export type PalletNftsAttributeNamespace =
  | { type: 'Pallet' }
  | { type: 'CollectionOwner' }
  | { type: 'ItemOwner' }
  | { type: 'Account'; value: AccountId32 };

export type PalletNftsPriceWithDirection = { amount: bigint; direction: PalletNftsPriceDirection };

export type PalletNftsPriceDirection = 'Send' | 'Receive';

export type PalletNftsPalletAttributes = { type: 'UsedToClaim'; value: number } | { type: 'TransferDisabled' };

/**
 * The `Event` enum of this pallet
 **/
export type PalletAssetsEvent002 =
  /**
   * Some asset class was created.
   **/
  | { name: 'Created'; data: { assetId: StagingXcmV4Location; creator: AccountId32; owner: AccountId32 } }
  /**
   * Some assets were issued.
   **/
  | { name: 'Issued'; data: { assetId: StagingXcmV4Location; owner: AccountId32; amount: bigint } }
  /**
   * Some assets were transferred.
   **/
  | { name: 'Transferred'; data: { assetId: StagingXcmV4Location; from: AccountId32; to: AccountId32; amount: bigint } }
  /**
   * Some assets were destroyed.
   **/
  | { name: 'Burned'; data: { assetId: StagingXcmV4Location; owner: AccountId32; balance: bigint } }
  /**
   * The management team changed.
   **/
  | {
      name: 'TeamChanged';
      data: { assetId: StagingXcmV4Location; issuer: AccountId32; admin: AccountId32; freezer: AccountId32 };
    }
  /**
   * The owner changed.
   **/
  | { name: 'OwnerChanged'; data: { assetId: StagingXcmV4Location; owner: AccountId32 } }
  /**
   * Some account `who` was frozen.
   **/
  | { name: 'Frozen'; data: { assetId: StagingXcmV4Location; who: AccountId32 } }
  /**
   * Some account `who` was thawed.
   **/
  | { name: 'Thawed'; data: { assetId: StagingXcmV4Location; who: AccountId32 } }
  /**
   * Some asset `asset_id` was frozen.
   **/
  | { name: 'AssetFrozen'; data: { assetId: StagingXcmV4Location } }
  /**
   * Some asset `asset_id` was thawed.
   **/
  | { name: 'AssetThawed'; data: { assetId: StagingXcmV4Location } }
  /**
   * Accounts were destroyed for given asset.
   **/
  | {
      name: 'AccountsDestroyed';
      data: { assetId: StagingXcmV4Location; accountsDestroyed: number; accountsRemaining: number };
    }
  /**
   * Approvals were destroyed for given asset.
   **/
  | {
      name: 'ApprovalsDestroyed';
      data: { assetId: StagingXcmV4Location; approvalsDestroyed: number; approvalsRemaining: number };
    }
  /**
   * An asset class is in the process of being destroyed.
   **/
  | { name: 'DestructionStarted'; data: { assetId: StagingXcmV4Location } }
  /**
   * An asset class was destroyed.
   **/
  | { name: 'Destroyed'; data: { assetId: StagingXcmV4Location } }
  /**
   * Some asset class was force-created.
   **/
  | { name: 'ForceCreated'; data: { assetId: StagingXcmV4Location; owner: AccountId32 } }
  /**
   * New metadata has been set for an asset.
   **/
  | {
      name: 'MetadataSet';
      data: { assetId: StagingXcmV4Location; name: Bytes; symbol: Bytes; decimals: number; isFrozen: boolean };
    }
  /**
   * Metadata has been cleared for an asset.
   **/
  | { name: 'MetadataCleared'; data: { assetId: StagingXcmV4Location } }
  /**
   * (Additional) funds have been approved for transfer to a destination account.
   **/
  | {
      name: 'ApprovedTransfer';
      data: { assetId: StagingXcmV4Location; source: AccountId32; delegate: AccountId32; amount: bigint };
    }
  /**
   * An approval for account `delegate` was cancelled by `owner`.
   **/
  | { name: 'ApprovalCancelled'; data: { assetId: StagingXcmV4Location; owner: AccountId32; delegate: AccountId32 } }
  /**
   * An `amount` was transferred in its entirety from `owner` to `destination` by
   * the approved `delegate`.
   **/
  | {
      name: 'TransferredApproved';
      data: {
        assetId: StagingXcmV4Location;
        owner: AccountId32;
        delegate: AccountId32;
        destination: AccountId32;
        amount: bigint;
      };
    }
  /**
   * An asset has had its attributes changed by the `Force` origin.
   **/
  | { name: 'AssetStatusChanged'; data: { assetId: StagingXcmV4Location } }
  /**
   * The min_balance of an asset has been updated by the asset owner.
   **/
  | { name: 'AssetMinBalanceChanged'; data: { assetId: StagingXcmV4Location; newMinBalance: bigint } }
  /**
   * Some account `who` was created with a deposit from `depositor`.
   **/
  | { name: 'Touched'; data: { assetId: StagingXcmV4Location; who: AccountId32; depositor: AccountId32 } }
  /**
   * Some account `who` was blocked.
   **/
  | { name: 'Blocked'; data: { assetId: StagingXcmV4Location; who: AccountId32 } }
  /**
   * Some assets were deposited (e.g. for transaction fees).
   **/
  | { name: 'Deposited'; data: { assetId: StagingXcmV4Location; who: AccountId32; amount: bigint } }
  /**
   * Some assets were withdrawn from the account (e.g. for transaction fees).
   **/
  | { name: 'Withdrawn'; data: { assetId: StagingXcmV4Location; who: AccountId32; amount: bigint } };

/**
 * The `Event` enum of this pallet
 **/
export type PalletNftFractionalizationEvent =
  /**
   * An NFT was successfully fractionalized.
   **/
  | {
      name: 'NftFractionalized';
      data: { nftCollection: number; nft: number; fractions: bigint; asset: number; beneficiary: AccountId32 };
    }
  /**
   * An NFT was successfully returned back.
   **/
  | { name: 'NftUnified'; data: { nftCollection: number; nft: number; asset: number; beneficiary: AccountId32 } };

/**
 * The `Event` enum of this pallet
 **/
export type PalletAssetConversionEvent =
  /**
   * A successful call of the `CreatePool` extrinsic will create this event.
   **/
  | {
      name: 'PoolCreated';
      data: {
        /**
         * The account that created the pool.
         **/
        creator: AccountId32;

        /**
         * The pool id associated with the pool. Note that the order of the assets may not be
         * the same as the order specified in the create pool extrinsic.
         **/
        poolId: [StagingXcmV4Location, StagingXcmV4Location];

        /**
         * The account ID of the pool.
         **/
        poolAccount: AccountId32;

        /**
         * The id of the liquidity tokens that will be minted when assets are added to this
         * pool.
         **/
        lpToken: number;
      };
    }
  /**
   * A successful call of the `AddLiquidity` extrinsic will create this event.
   **/
  | {
      name: 'LiquidityAdded';
      data: {
        /**
         * The account that the liquidity was taken from.
         **/
        who: AccountId32;

        /**
         * The account that the liquidity tokens were minted to.
         **/
        mintTo: AccountId32;

        /**
         * The pool id of the pool that the liquidity was added to.
         **/
        poolId: [StagingXcmV4Location, StagingXcmV4Location];

        /**
         * The amount of the first asset that was added to the pool.
         **/
        amount1Provided: bigint;

        /**
         * The amount of the second asset that was added to the pool.
         **/
        amount2Provided: bigint;

        /**
         * The id of the lp token that was minted.
         **/
        lpToken: number;

        /**
         * The amount of lp tokens that were minted of that id.
         **/
        lpTokenMinted: bigint;
      };
    }
  /**
   * A successful call of the `RemoveLiquidity` extrinsic will create this event.
   **/
  | {
      name: 'LiquidityRemoved';
      data: {
        /**
         * The account that the liquidity tokens were burned from.
         **/
        who: AccountId32;

        /**
         * The account that the assets were transferred to.
         **/
        withdrawTo: AccountId32;

        /**
         * The pool id that the liquidity was removed from.
         **/
        poolId: [StagingXcmV4Location, StagingXcmV4Location];

        /**
         * The amount of the first asset that was removed from the pool.
         **/
        amount1: bigint;

        /**
         * The amount of the second asset that was removed from the pool.
         **/
        amount2: bigint;

        /**
         * The id of the lp token that was burned.
         **/
        lpToken: number;

        /**
         * The amount of lp tokens that were burned of that id.
         **/
        lpTokenBurned: bigint;

        /**
         * Liquidity withdrawal fee (%).
         **/
        withdrawalFee: Permill;
      };
    }
  /**
   * Assets have been converted from one to another. Both `SwapExactTokenForToken`
   * and `SwapTokenForExactToken` will generate this event.
   **/
  | {
      name: 'SwapExecuted';
      data: {
        /**
         * Which account was the instigator of the swap.
         **/
        who: AccountId32;

        /**
         * The account that the assets were transferred to.
         **/
        sendTo: AccountId32;

        /**
         * The amount of the first asset that was swapped.
         **/
        amountIn: bigint;

        /**
         * The amount of the second asset that was received.
         **/
        amountOut: bigint;

        /**
         * The route of asset IDs with amounts that the swap went through.
         * E.g. (A, amount_in) -> (Dot, amount_out) -> (B, amount_out)
         **/
        path: Array<[StagingXcmV4Location, bigint]>;
      };
    }
  /**
   * Assets have been converted from one to another.
   **/
  | {
      name: 'SwapCreditExecuted';
      data: {
        /**
         * The amount of the first asset that was swapped.
         **/
        amountIn: bigint;

        /**
         * The amount of the second asset that was received.
         **/
        amountOut: bigint;

        /**
         * The route of asset IDs with amounts that the swap went through.
         * E.g. (A, amount_in) -> (Dot, amount_out) -> (B, amount_out)
         **/
        path: Array<[StagingXcmV4Location, bigint]>;
      };
    }
  /**
   * Pool has been touched in order to fulfill operational requirements.
   **/
  | {
      name: 'Touched';
      data: {
        /**
         * The ID of the pool.
         **/
        poolId: [StagingXcmV4Location, StagingXcmV4Location];

        /**
         * The account initiating the touch.
         **/
        who: AccountId32;
      };
    };

export type FrameSystemLastRuntimeUpgradeInfo = { specVersion: number; specName: string };

export type FrameSystemCodeUpgradeAuthorization = { codeHash: H256; checkVersion: boolean };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type FrameSystemCall =
  /**
   * Make some on-chain remark.
   *
   * Can be executed by every `origin`.
   **/
  | { name: 'Remark'; params: { remark: Bytes } }
  /**
   * Set the number of pages in the WebAssembly environment's heap.
   **/
  | { name: 'SetHeapPages'; params: { pages: bigint } }
  /**
   * Set the new runtime code.
   **/
  | { name: 'SetCode'; params: { code: Bytes } }
  /**
   * Set the new runtime code without doing any checks of the given `code`.
   *
   * Note that runtime upgrades will not run if this is called with a not-increasing spec
   * version!
   **/
  | { name: 'SetCodeWithoutChecks'; params: { code: Bytes } }
  /**
   * Set some items of storage.
   **/
  | { name: 'SetStorage'; params: { items: Array<[Bytes, Bytes]> } }
  /**
   * Kill some items from storage.
   **/
  | { name: 'KillStorage'; params: { keys: Array<Bytes> } }
  /**
   * Kill all storage items with a key that starts with the given prefix.
   *
   * **NOTE:** We rely on the Root origin to provide us the number of subkeys under
   * the prefix we are removing to accurately calculate the weight of this function.
   **/
  | { name: 'KillPrefix'; params: { prefix: Bytes; subkeys: number } }
  /**
   * Make some on-chain remark and emit event.
   **/
  | { name: 'RemarkWithEvent'; params: { remark: Bytes } }
  /**
   * Authorize an upgrade to a given `code_hash` for the runtime. The runtime can be supplied
   * later.
   *
   * This call requires Root origin.
   **/
  | { name: 'AuthorizeUpgrade'; params: { codeHash: H256 } }
  /**
   * Authorize an upgrade to a given `code_hash` for the runtime. The runtime can be supplied
   * later.
   *
   * WARNING: This authorizes an upgrade that will take place without any safety checks, for
   * example that the spec name remains the same and that the version number increases. Not
   * recommended for normal use. Use `authorize_upgrade` instead.
   *
   * This call requires Root origin.
   **/
  | { name: 'AuthorizeUpgradeWithoutChecks'; params: { codeHash: H256 } }
  /**
   * Provide the preimage (runtime binary) `code` for an upgrade that has been authorized.
   *
   * If the authorization required a version check, this call will ensure the spec name
   * remains unchanged and that the spec version has increased.
   *
   * Depending on the runtime's `OnSetCode` configuration, this function may directly apply
   * the new `code` in the same block or attempt to schedule the upgrade.
   *
   * All origins are allowed.
   **/
  | { name: 'ApplyAuthorizedUpgrade'; params: { code: Bytes } };

export type FrameSystemCallLike =
  /**
   * Make some on-chain remark.
   *
   * Can be executed by every `origin`.
   **/
  | { name: 'Remark'; params: { remark: BytesLike } }
  /**
   * Set the number of pages in the WebAssembly environment's heap.
   **/
  | { name: 'SetHeapPages'; params: { pages: bigint } }
  /**
   * Set the new runtime code.
   **/
  | { name: 'SetCode'; params: { code: BytesLike } }
  /**
   * Set the new runtime code without doing any checks of the given `code`.
   *
   * Note that runtime upgrades will not run if this is called with a not-increasing spec
   * version!
   **/
  | { name: 'SetCodeWithoutChecks'; params: { code: BytesLike } }
  /**
   * Set some items of storage.
   **/
  | { name: 'SetStorage'; params: { items: Array<[BytesLike, BytesLike]> } }
  /**
   * Kill some items from storage.
   **/
  | { name: 'KillStorage'; params: { keys: Array<BytesLike> } }
  /**
   * Kill all storage items with a key that starts with the given prefix.
   *
   * **NOTE:** We rely on the Root origin to provide us the number of subkeys under
   * the prefix we are removing to accurately calculate the weight of this function.
   **/
  | { name: 'KillPrefix'; params: { prefix: BytesLike; subkeys: number } }
  /**
   * Make some on-chain remark and emit event.
   **/
  | { name: 'RemarkWithEvent'; params: { remark: BytesLike } }
  /**
   * Authorize an upgrade to a given `code_hash` for the runtime. The runtime can be supplied
   * later.
   *
   * This call requires Root origin.
   **/
  | { name: 'AuthorizeUpgrade'; params: { codeHash: H256 } }
  /**
   * Authorize an upgrade to a given `code_hash` for the runtime. The runtime can be supplied
   * later.
   *
   * WARNING: This authorizes an upgrade that will take place without any safety checks, for
   * example that the spec name remains the same and that the version number increases. Not
   * recommended for normal use. Use `authorize_upgrade` instead.
   *
   * This call requires Root origin.
   **/
  | { name: 'AuthorizeUpgradeWithoutChecks'; params: { codeHash: H256 } }
  /**
   * Provide the preimage (runtime binary) `code` for an upgrade that has been authorized.
   *
   * If the authorization required a version check, this call will ensure the spec name
   * remains unchanged and that the spec version has increased.
   *
   * Depending on the runtime's `OnSetCode` configuration, this function may directly apply
   * the new `code` in the same block or attempt to schedule the upgrade.
   *
   * All origins are allowed.
   **/
  | { name: 'ApplyAuthorizedUpgrade'; params: { code: BytesLike } };

export type FrameSystemLimitsBlockWeights = {
  baseBlock: SpWeightsWeightV2Weight;
  maxBlock: SpWeightsWeightV2Weight;
  perClass: FrameSupportDispatchPerDispatchClassWeightsPerClass;
};

export type FrameSupportDispatchPerDispatchClassWeightsPerClass = {
  normal: FrameSystemLimitsWeightsPerClass;
  operational: FrameSystemLimitsWeightsPerClass;
  mandatory: FrameSystemLimitsWeightsPerClass;
};

export type FrameSystemLimitsWeightsPerClass = {
  baseExtrinsic: SpWeightsWeightV2Weight;
  maxExtrinsic?: SpWeightsWeightV2Weight | undefined;
  maxTotal?: SpWeightsWeightV2Weight | undefined;
  reserved?: SpWeightsWeightV2Weight | undefined;
};

export type FrameSystemLimitsBlockLength = { max: FrameSupportDispatchPerDispatchClassU32 };

export type FrameSupportDispatchPerDispatchClassU32 = { normal: number; operational: number; mandatory: number };

export type SpWeightsRuntimeDbWeight = { read: bigint; write: bigint };

/**
 * Error for the System pallet
 **/
export type FrameSystemError =
  /**
   * The name of specification does not match between the current runtime
   * and the new runtime.
   **/
  | 'InvalidSpecName'
  /**
   * The specification version is not allowed to decrease between the current runtime
   * and the new runtime.
   **/
  | 'SpecVersionNeedsToIncrease'
  /**
   * Failed to extract the runtime version from the new runtime.
   *
   * Either calling `Core_version` or decoding `RuntimeVersion` failed.
   **/
  | 'FailedToExtractRuntimeVersion'
  /**
   * Suicide called when the account has non-default composite data.
   **/
  | 'NonDefaultComposite'
  /**
   * There is a non-zero reference count preventing the account from being purged.
   **/
  | 'NonZeroRefCount'
  /**
   * The origin filter prevent the call to be dispatched.
   **/
  | 'CallFiltered'
  /**
   * A multi-block migration is ongoing and prevents the current code from being replaced.
   **/
  | 'MultiBlockMigrationsOngoing'
  /**
   * No upgrade authorized.
   **/
  | 'NothingAuthorized'
  /**
   * The submitted code is not authorized.
   **/
  | 'Unauthorized';

export type CumulusPalletParachainSystemUnincludedSegmentAncestor = {
  usedBandwidth: CumulusPalletParachainSystemUnincludedSegmentUsedBandwidth;
  paraHeadHash?: H256 | undefined;
  consumedGoAheadSignal?: PolkadotPrimitivesV7UpgradeGoAhead | undefined;
};

export type CumulusPalletParachainSystemUnincludedSegmentUsedBandwidth = {
  umpMsgCount: number;
  umpTotalBytes: number;
  hrmpOutgoing: Array<
    [PolkadotParachainPrimitivesPrimitivesId, CumulusPalletParachainSystemUnincludedSegmentHrmpChannelUpdate]
  >;
};

export type CumulusPalletParachainSystemUnincludedSegmentHrmpChannelUpdate = { msgCount: number; totalBytes: number };

export type PolkadotPrimitivesV7UpgradeGoAhead = 'Abort' | 'GoAhead';

export type CumulusPalletParachainSystemUnincludedSegmentSegmentTracker = {
  usedBandwidth: CumulusPalletParachainSystemUnincludedSegmentUsedBandwidth;
  hrmpWatermark?: number | undefined;
  consumedGoAheadSignal?: PolkadotPrimitivesV7UpgradeGoAhead | undefined;
};

export type PolkadotPrimitivesV7PersistedValidationData = {
  parentHead: PolkadotParachainPrimitivesPrimitivesHeadData;
  relayParentNumber: number;
  relayParentStorageRoot: H256;
  maxPovSize: number;
};

export type PolkadotParachainPrimitivesPrimitivesHeadData = Bytes;

export type PolkadotPrimitivesV7UpgradeRestriction = 'Present';

export type SpTrieStorageProof = { trieNodes: Array<Bytes> };

export type CumulusPalletParachainSystemRelayStateSnapshotMessagingStateSnapshot = {
  dmqMqcHead: H256;
  relayDispatchQueueRemainingCapacity: CumulusPalletParachainSystemRelayStateSnapshotRelayDispatchQueueRemainingCapacity;
  ingressChannels: Array<[PolkadotParachainPrimitivesPrimitivesId, PolkadotPrimitivesV7AbridgedHrmpChannel]>;
  egressChannels: Array<[PolkadotParachainPrimitivesPrimitivesId, PolkadotPrimitivesV7AbridgedHrmpChannel]>;
};

export type CumulusPalletParachainSystemRelayStateSnapshotRelayDispatchQueueRemainingCapacity = {
  remainingCount: number;
  remainingSize: number;
};

export type PolkadotPrimitivesV7AbridgedHrmpChannel = {
  maxCapacity: number;
  maxTotalSize: number;
  maxMessageSize: number;
  msgCount: number;
  totalSize: number;
  mqcHead?: H256 | undefined;
};

export type PolkadotPrimitivesV7AbridgedHostConfiguration = {
  maxCodeSize: number;
  maxHeadDataSize: number;
  maxUpwardQueueCount: number;
  maxUpwardQueueSize: number;
  maxUpwardMessageSize: number;
  maxUpwardMessageNumPerCandidate: number;
  hrmpMaxMessageNumPerCandidate: number;
  validationUpgradeCooldown: number;
  validationUpgradeDelay: number;
  asyncBackingParams: PolkadotPrimitivesV7AsyncBackingAsyncBackingParams;
};

export type PolkadotPrimitivesV7AsyncBackingAsyncBackingParams = {
  maxCandidateDepth: number;
  allowedAncestryLen: number;
};

export type CumulusPrimitivesParachainInherentMessageQueueChain = H256;

export type PolkadotCorePrimitivesOutboundHrmpMessage = {
  recipient: PolkadotParachainPrimitivesPrimitivesId;
  data: Bytes;
};

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type CumulusPalletParachainSystemCall =
  /**
   * Set the current validation data.
   *
   * This should be invoked exactly once per block. It will panic at the finalization
   * phase if the call was not invoked.
   *
   * The dispatch origin for this call must be `Inherent`
   *
   * As a side effect, this function upgrades the current validation function
   * if the appropriate time has come.
   **/
  | { name: 'SetValidationData'; params: { data: CumulusPrimitivesParachainInherentParachainInherentData } }
  | { name: 'SudoSendUpwardMessage'; params: { message: Bytes } }
  /**
   * Authorize an upgrade to a given `code_hash` for the runtime. The runtime can be supplied
   * later.
   *
   * The `check_version` parameter sets a boolean flag for whether or not the runtime's spec
   * version and name should be verified on upgrade. Since the authorization only has a hash,
   * it cannot actually perform the verification.
   *
   * This call requires Root origin.
   **/
  | { name: 'AuthorizeUpgrade'; params: { codeHash: H256; checkVersion: boolean } }
  /**
   * Provide the preimage (runtime binary) `code` for an upgrade that has been authorized.
   *
   * If the authorization required a version check, this call will ensure the spec name
   * remains unchanged and that the spec version has increased.
   *
   * Note that this function will not apply the new `code`, but only attempt to schedule the
   * upgrade with the Relay Chain.
   *
   * All origins are allowed.
   **/
  | { name: 'EnactAuthorizedUpgrade'; params: { code: Bytes } };

export type CumulusPalletParachainSystemCallLike =
  /**
   * Set the current validation data.
   *
   * This should be invoked exactly once per block. It will panic at the finalization
   * phase if the call was not invoked.
   *
   * The dispatch origin for this call must be `Inherent`
   *
   * As a side effect, this function upgrades the current validation function
   * if the appropriate time has come.
   **/
  | { name: 'SetValidationData'; params: { data: CumulusPrimitivesParachainInherentParachainInherentData } }
  | { name: 'SudoSendUpwardMessage'; params: { message: BytesLike } }
  /**
   * Authorize an upgrade to a given `code_hash` for the runtime. The runtime can be supplied
   * later.
   *
   * The `check_version` parameter sets a boolean flag for whether or not the runtime's spec
   * version and name should be verified on upgrade. Since the authorization only has a hash,
   * it cannot actually perform the verification.
   *
   * This call requires Root origin.
   **/
  | { name: 'AuthorizeUpgrade'; params: { codeHash: H256; checkVersion: boolean } }
  /**
   * Provide the preimage (runtime binary) `code` for an upgrade that has been authorized.
   *
   * If the authorization required a version check, this call will ensure the spec name
   * remains unchanged and that the spec version has increased.
   *
   * Note that this function will not apply the new `code`, but only attempt to schedule the
   * upgrade with the Relay Chain.
   *
   * All origins are allowed.
   **/
  | { name: 'EnactAuthorizedUpgrade'; params: { code: BytesLike } };

export type CumulusPrimitivesParachainInherentParachainInherentData = {
  validationData: PolkadotPrimitivesV7PersistedValidationData;
  relayChainState: SpTrieStorageProof;
  downwardMessages: Array<PolkadotCorePrimitivesInboundDownwardMessage>;
  horizontalMessages: Array<[PolkadotParachainPrimitivesPrimitivesId, Array<PolkadotCorePrimitivesInboundHrmpMessage>]>;
};

export type PolkadotCorePrimitivesInboundDownwardMessage = { sentAt: number; msg: Bytes };

export type PolkadotCorePrimitivesInboundHrmpMessage = { sentAt: number; data: Bytes };

/**
 * The `Error` enum of this pallet.
 **/
export type CumulusPalletParachainSystemError =
  /**
   * Attempt to upgrade validation function while existing upgrade pending.
   **/
  | 'OverlappingUpgrades'
  /**
   * Polkadot currently prohibits this parachain from upgrading its validation function.
   **/
  | 'ProhibitedByPolkadot'
  /**
   * The supplied validation function has compiled into a blob larger than Polkadot is
   * willing to run.
   **/
  | 'TooBig'
  /**
   * The inherent which supplies the validation data did not run this block.
   **/
  | 'ValidationDataNotAvailable'
  /**
   * The inherent which supplies the host configuration did not run this block.
   **/
  | 'HostConfigurationNotAvailable'
  /**
   * No validation function upgrade is currently scheduled.
   **/
  | 'NotScheduled'
  /**
   * No code upgrade has been authorized.
   **/
  | 'NothingAuthorized'
  /**
   * The given code upgrade has not been authorized.
   **/
  | 'Unauthorized';

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletTimestampCall =
  /**
   * Set the current time.
   *
   * This call should be invoked exactly once per block. It will panic at the finalization
   * phase, if this call hasn't been invoked by that time.
   *
   * The timestamp should be greater than the previous one by the amount specified by
   * [`Config::MinimumPeriod`].
   *
   * The dispatch origin for this call must be _None_.
   *
   * This dispatch class is _Mandatory_ to ensure it gets executed in the block. Be aware
   * that changing the complexity of this call could result exhausting the resources in a
   * block to execute any other calls.
   *
   * ## Complexity
   * - `O(1)` (Note that implementations of `OnTimestampSet` must also be `O(1)`)
   * - 1 storage read and 1 storage mutation (codec `O(1)` because of `DidUpdate::take` in
   * `on_finalize`)
   * - 1 event handler `on_timestamp_set`. Must be `O(1)`.
   **/
  { name: 'Set'; params: { now: bigint } };

export type PalletTimestampCallLike =
  /**
   * Set the current time.
   *
   * This call should be invoked exactly once per block. It will panic at the finalization
   * phase, if this call hasn't been invoked by that time.
   *
   * The timestamp should be greater than the previous one by the amount specified by
   * [`Config::MinimumPeriod`].
   *
   * The dispatch origin for this call must be _None_.
   *
   * This dispatch class is _Mandatory_ to ensure it gets executed in the block. Be aware
   * that changing the complexity of this call could result exhausting the resources in a
   * block to execute any other calls.
   *
   * ## Complexity
   * - `O(1)` (Note that implementations of `OnTimestampSet` must also be `O(1)`)
   * - 1 storage read and 1 storage mutation (codec `O(1)` because of `DidUpdate::take` in
   * `on_finalize`)
   * - 1 event handler `on_timestamp_set`. Must be `O(1)`.
   **/
  { name: 'Set'; params: { now: bigint } };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type StagingParachainInfoCall = null;

export type StagingParachainInfoCallLike = null;

export type PalletBalancesBalanceLock = { id: FixedBytes<8>; amount: bigint; reasons: PalletBalancesReasons };

export type PalletBalancesReasons = 'Fee' | 'Misc' | 'All';

export type PalletBalancesReserveData = { id: FixedBytes<8>; amount: bigint };

export type FrameSupportTokensMiscIdAmount = { id: AssetHubKusamaRuntimeRuntimeHoldReason; amount: bigint };

export type AssetHubKusamaRuntimeRuntimeHoldReason =
  | { type: 'NftFractionalization'; value: PalletNftFractionalizationHoldReason }
  | { type: 'StateTrieMigration'; value: PalletStateTrieMigrationHoldReason };

export type PalletNftFractionalizationHoldReason = 'Fractionalized';

export type PalletStateTrieMigrationHoldReason = 'SlashForMigrate';

export type FrameSupportTokensMiscIdAmount002 = { id: []; amount: bigint };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletBalancesCall =
  /**
   * Transfer some liquid free balance to another account.
   *
   * `transfer_allow_death` will set the `FreeBalance` of the sender and receiver.
   * If the sender's account is below the existential deposit as a result
   * of the transfer, the account will be reaped.
   *
   * The dispatch origin for this call must be `Signed` by the transactor.
   **/
  | { name: 'TransferAllowDeath'; params: { dest: MultiAddress; value: bigint } }
  /**
   * Exactly as `transfer_allow_death`, except the origin must be root and the source account
   * may be specified.
   **/
  | { name: 'ForceTransfer'; params: { source: MultiAddress; dest: MultiAddress; value: bigint } }
  /**
   * Same as the [`transfer_allow_death`] call, but with a check that the transfer will not
   * kill the origin account.
   *
   * 99% of the time you want [`transfer_allow_death`] instead.
   *
   * [`transfer_allow_death`]: struct.Pallet.html#method.transfer
   **/
  | { name: 'TransferKeepAlive'; params: { dest: MultiAddress; value: bigint } }
  /**
   * Transfer the entire transferable balance from the caller account.
   *
   * NOTE: This function only attempts to transfer _transferable_ balances. This means that
   * any locked, reserved, or existential deposits (when `keep_alive` is `true`), will not be
   * transferred by this function. To ensure that this function results in a killed account,
   * you might need to prepare the account by removing any reference counters, storage
   * deposits, etc...
   *
   * The dispatch origin of this call must be Signed.
   *
   * - `dest`: The recipient of the transfer.
   * - `keep_alive`: A boolean to determine if the `transfer_all` operation should send all
   * of the funds the account has, causing the sender account to be killed (false), or
   * transfer everything except at least the existential deposit, which will guarantee to
   * keep the sender account alive (true).
   **/
  | { name: 'TransferAll'; params: { dest: MultiAddress; keepAlive: boolean } }
  /**
   * Unreserve some balance from a user by force.
   *
   * Can only be called by ROOT.
   **/
  | { name: 'ForceUnreserve'; params: { who: MultiAddress; amount: bigint } }
  /**
   * Upgrade a specified account.
   *
   * - `origin`: Must be `Signed`.
   * - `who`: The account to be upgraded.
   *
   * This will waive the transaction fee if at least all but 10% of the accounts needed to
   * be upgraded. (We let some not have to be upgraded just in order to allow for the
   * possibility of churn).
   **/
  | { name: 'UpgradeAccounts'; params: { who: Array<AccountId32> } }
  /**
   * Set the regular balance of a given account.
   *
   * The dispatch origin for this call is `root`.
   **/
  | { name: 'ForceSetBalance'; params: { who: MultiAddress; newFree: bigint } }
  /**
   * Adjust the total issuance in a saturating way.
   *
   * Can only be called by root and always needs a positive `delta`.
   *
   * # Example
   **/
  | { name: 'ForceAdjustTotalIssuance'; params: { direction: PalletBalancesAdjustmentDirection; delta: bigint } }
  /**
   * Burn the specified liquid free balance from the origin account.
   *
   * If the origin's account ends up below the existential deposit as a result
   * of the burn and `keep_alive` is false, the account will be reaped.
   *
   * Unlike sending funds to a _burn_ address, which merely makes the funds inaccessible,
   * this `burn` operation will reduce total issuance by the amount _burned_.
   **/
  | { name: 'Burn'; params: { value: bigint; keepAlive: boolean } };

export type PalletBalancesCallLike =
  /**
   * Transfer some liquid free balance to another account.
   *
   * `transfer_allow_death` will set the `FreeBalance` of the sender and receiver.
   * If the sender's account is below the existential deposit as a result
   * of the transfer, the account will be reaped.
   *
   * The dispatch origin for this call must be `Signed` by the transactor.
   **/
  | { name: 'TransferAllowDeath'; params: { dest: MultiAddressLike; value: bigint } }
  /**
   * Exactly as `transfer_allow_death`, except the origin must be root and the source account
   * may be specified.
   **/
  | { name: 'ForceTransfer'; params: { source: MultiAddressLike; dest: MultiAddressLike; value: bigint } }
  /**
   * Same as the [`transfer_allow_death`] call, but with a check that the transfer will not
   * kill the origin account.
   *
   * 99% of the time you want [`transfer_allow_death`] instead.
   *
   * [`transfer_allow_death`]: struct.Pallet.html#method.transfer
   **/
  | { name: 'TransferKeepAlive'; params: { dest: MultiAddressLike; value: bigint } }
  /**
   * Transfer the entire transferable balance from the caller account.
   *
   * NOTE: This function only attempts to transfer _transferable_ balances. This means that
   * any locked, reserved, or existential deposits (when `keep_alive` is `true`), will not be
   * transferred by this function. To ensure that this function results in a killed account,
   * you might need to prepare the account by removing any reference counters, storage
   * deposits, etc...
   *
   * The dispatch origin of this call must be Signed.
   *
   * - `dest`: The recipient of the transfer.
   * - `keep_alive`: A boolean to determine if the `transfer_all` operation should send all
   * of the funds the account has, causing the sender account to be killed (false), or
   * transfer everything except at least the existential deposit, which will guarantee to
   * keep the sender account alive (true).
   **/
  | { name: 'TransferAll'; params: { dest: MultiAddressLike; keepAlive: boolean } }
  /**
   * Unreserve some balance from a user by force.
   *
   * Can only be called by ROOT.
   **/
  | { name: 'ForceUnreserve'; params: { who: MultiAddressLike; amount: bigint } }
  /**
   * Upgrade a specified account.
   *
   * - `origin`: Must be `Signed`.
   * - `who`: The account to be upgraded.
   *
   * This will waive the transaction fee if at least all but 10% of the accounts needed to
   * be upgraded. (We let some not have to be upgraded just in order to allow for the
   * possibility of churn).
   **/
  | { name: 'UpgradeAccounts'; params: { who: Array<AccountId32Like> } }
  /**
   * Set the regular balance of a given account.
   *
   * The dispatch origin for this call is `root`.
   **/
  | { name: 'ForceSetBalance'; params: { who: MultiAddressLike; newFree: bigint } }
  /**
   * Adjust the total issuance in a saturating way.
   *
   * Can only be called by root and always needs a positive `delta`.
   *
   * # Example
   **/
  | { name: 'ForceAdjustTotalIssuance'; params: { direction: PalletBalancesAdjustmentDirection; delta: bigint } }
  /**
   * Burn the specified liquid free balance from the origin account.
   *
   * If the origin's account ends up below the existential deposit as a result
   * of the burn and `keep_alive` is false, the account will be reaped.
   *
   * Unlike sending funds to a _burn_ address, which merely makes the funds inaccessible,
   * this `burn` operation will reduce total issuance by the amount _burned_.
   **/
  | { name: 'Burn'; params: { value: bigint; keepAlive: boolean } };

export type PalletBalancesAdjustmentDirection = 'Increase' | 'Decrease';

/**
 * The `Error` enum of this pallet.
 **/
export type PalletBalancesError =
  /**
   * Vesting balance too high to send value.
   **/
  | 'VestingBalance'
  /**
   * Account liquidity restrictions prevent withdrawal.
   **/
  | 'LiquidityRestrictions'
  /**
   * Balance too low to send value.
   **/
  | 'InsufficientBalance'
  /**
   * Value too low to create account due to existential deposit.
   **/
  | 'ExistentialDeposit'
  /**
   * Transfer/payment would kill account.
   **/
  | 'Expendability'
  /**
   * A vesting schedule already exists for this account.
   **/
  | 'ExistingVestingSchedule'
  /**
   * Beneficiary account must pre-exist.
   **/
  | 'DeadAccount'
  /**
   * Number of named reserves exceed `MaxReserves`.
   **/
  | 'TooManyReserves'
  /**
   * Number of holds exceed `VariantCountOf<T::RuntimeHoldReason>`.
   **/
  | 'TooManyHolds'
  /**
   * Number of freezes exceed `MaxFreezes`.
   **/
  | 'TooManyFreezes'
  /**
   * The issuance cannot be modified since it is already deactivated.
   **/
  | 'IssuanceDeactivated'
  /**
   * The delta cannot be zero.
   **/
  | 'DeltaZero';

export type PalletTransactionPaymentReleases = 'V1Ancient' | 'V2';

export type PalletVestingVestingInfo = { locked: bigint; perBlock: bigint; startingBlock: number };

export type PalletVestingReleases = 'V0' | 'V1';

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletVestingCall =
  /**
   * Unlock any vested funds of the sender account.
   *
   * The dispatch origin for this call must be _Signed_ and the sender must have funds still
   * locked under this pallet.
   *
   * Emits either `VestingCompleted` or `VestingUpdated`.
   *
   * ## Complexity
   * - `O(1)`.
   **/
  | { name: 'Vest' }
  /**
   * Unlock any vested funds of a `target` account.
   *
   * The dispatch origin for this call must be _Signed_.
   *
   * - `target`: The account whose vested funds should be unlocked. Must have funds still
   * locked under this pallet.
   *
   * Emits either `VestingCompleted` or `VestingUpdated`.
   *
   * ## Complexity
   * - `O(1)`.
   **/
  | { name: 'VestOther'; params: { target: MultiAddress } }
  /**
   * Create a vested transfer.
   *
   * The dispatch origin for this call must be _Signed_.
   *
   * - `target`: The account receiving the vested funds.
   * - `schedule`: The vesting schedule attached to the transfer.
   *
   * Emits `VestingCreated`.
   *
   * NOTE: This will unlock all schedules through the current block.
   *
   * ## Complexity
   * - `O(1)`.
   **/
  | { name: 'VestedTransfer'; params: { target: MultiAddress; schedule: PalletVestingVestingInfo } }
  /**
   * Force a vested transfer.
   *
   * The dispatch origin for this call must be _Root_.
   *
   * - `source`: The account whose funds should be transferred.
   * - `target`: The account that should be transferred the vested funds.
   * - `schedule`: The vesting schedule attached to the transfer.
   *
   * Emits `VestingCreated`.
   *
   * NOTE: This will unlock all schedules through the current block.
   *
   * ## Complexity
   * - `O(1)`.
   **/
  | {
      name: 'ForceVestedTransfer';
      params: { source: MultiAddress; target: MultiAddress; schedule: PalletVestingVestingInfo };
    }
  /**
   * Merge two vesting schedules together, creating a new vesting schedule that unlocks over
   * the highest possible start and end blocks. If both schedules have already started the
   * current block will be used as the schedule start; with the caveat that if one schedule
   * is finished by the current block, the other will be treated as the new merged schedule,
   * unmodified.
   *
   * NOTE: If `schedule1_index == schedule2_index` this is a no-op.
   * NOTE: This will unlock all schedules through the current block prior to merging.
   * NOTE: If both schedules have ended by the current block, no new schedule will be created
   * and both will be removed.
   *
   * Merged schedule attributes:
   * - `starting_block`: `MAX(schedule1.starting_block, scheduled2.starting_block,
   * current_block)`.
   * - `ending_block`: `MAX(schedule1.ending_block, schedule2.ending_block)`.
   * - `locked`: `schedule1.locked_at(current_block) + schedule2.locked_at(current_block)`.
   *
   * The dispatch origin for this call must be _Signed_.
   *
   * - `schedule1_index`: index of the first schedule to merge.
   * - `schedule2_index`: index of the second schedule to merge.
   **/
  | { name: 'MergeSchedules'; params: { schedule1Index: number; schedule2Index: number } }
  /**
   * Force remove a vesting schedule
   *
   * The dispatch origin for this call must be _Root_.
   *
   * - `target`: An account that has a vesting schedule
   * - `schedule_index`: The vesting schedule index that should be removed
   **/
  | { name: 'ForceRemoveVestingSchedule'; params: { target: MultiAddress; scheduleIndex: number } };

export type PalletVestingCallLike =
  /**
   * Unlock any vested funds of the sender account.
   *
   * The dispatch origin for this call must be _Signed_ and the sender must have funds still
   * locked under this pallet.
   *
   * Emits either `VestingCompleted` or `VestingUpdated`.
   *
   * ## Complexity
   * - `O(1)`.
   **/
  | { name: 'Vest' }
  /**
   * Unlock any vested funds of a `target` account.
   *
   * The dispatch origin for this call must be _Signed_.
   *
   * - `target`: The account whose vested funds should be unlocked. Must have funds still
   * locked under this pallet.
   *
   * Emits either `VestingCompleted` or `VestingUpdated`.
   *
   * ## Complexity
   * - `O(1)`.
   **/
  | { name: 'VestOther'; params: { target: MultiAddressLike } }
  /**
   * Create a vested transfer.
   *
   * The dispatch origin for this call must be _Signed_.
   *
   * - `target`: The account receiving the vested funds.
   * - `schedule`: The vesting schedule attached to the transfer.
   *
   * Emits `VestingCreated`.
   *
   * NOTE: This will unlock all schedules through the current block.
   *
   * ## Complexity
   * - `O(1)`.
   **/
  | { name: 'VestedTransfer'; params: { target: MultiAddressLike; schedule: PalletVestingVestingInfo } }
  /**
   * Force a vested transfer.
   *
   * The dispatch origin for this call must be _Root_.
   *
   * - `source`: The account whose funds should be transferred.
   * - `target`: The account that should be transferred the vested funds.
   * - `schedule`: The vesting schedule attached to the transfer.
   *
   * Emits `VestingCreated`.
   *
   * NOTE: This will unlock all schedules through the current block.
   *
   * ## Complexity
   * - `O(1)`.
   **/
  | {
      name: 'ForceVestedTransfer';
      params: { source: MultiAddressLike; target: MultiAddressLike; schedule: PalletVestingVestingInfo };
    }
  /**
   * Merge two vesting schedules together, creating a new vesting schedule that unlocks over
   * the highest possible start and end blocks. If both schedules have already started the
   * current block will be used as the schedule start; with the caveat that if one schedule
   * is finished by the current block, the other will be treated as the new merged schedule,
   * unmodified.
   *
   * NOTE: If `schedule1_index == schedule2_index` this is a no-op.
   * NOTE: This will unlock all schedules through the current block prior to merging.
   * NOTE: If both schedules have ended by the current block, no new schedule will be created
   * and both will be removed.
   *
   * Merged schedule attributes:
   * - `starting_block`: `MAX(schedule1.starting_block, scheduled2.starting_block,
   * current_block)`.
   * - `ending_block`: `MAX(schedule1.ending_block, schedule2.ending_block)`.
   * - `locked`: `schedule1.locked_at(current_block) + schedule2.locked_at(current_block)`.
   *
   * The dispatch origin for this call must be _Signed_.
   *
   * - `schedule1_index`: index of the first schedule to merge.
   * - `schedule2_index`: index of the second schedule to merge.
   **/
  | { name: 'MergeSchedules'; params: { schedule1Index: number; schedule2Index: number } }
  /**
   * Force remove a vesting schedule
   *
   * The dispatch origin for this call must be _Root_.
   *
   * - `target`: An account that has a vesting schedule
   * - `schedule_index`: The vesting schedule index that should be removed
   **/
  | { name: 'ForceRemoveVestingSchedule'; params: { target: MultiAddressLike; scheduleIndex: number } };

/**
 * Error for the vesting pallet.
 **/
export type PalletVestingError =
  /**
   * The account given is not vesting.
   **/
  | 'NotVesting'
  /**
   * The account already has `MaxVestingSchedules` count of schedules and thus
   * cannot add another one. Consider merging existing schedules in order to add another.
   **/
  | 'AtMaxVestingSchedules'
  /**
   * Amount being transferred is too low to create a vesting schedule.
   **/
  | 'AmountLow'
  /**
   * An index was out of bounds of the vesting schedules.
   **/
  | 'ScheduleIndexOutOfBounds'
  /**
   * Failed to create a new schedule because some parameter was invalid.
   **/
  | 'InvalidScheduleParams';

export type PalletCollatorSelectionCandidateInfo = { who: AccountId32; deposit: bigint };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletCollatorSelectionCall =
  /**
   * Set the list of invulnerable (fixed) collators. These collators must do some
   * preparation, namely to have registered session keys.
   *
   * The call will remove any accounts that have not registered keys from the set. That is,
   * it is non-atomic; the caller accepts all `AccountId`s passed in `new` _individually_ as
   * acceptable Invulnerables, and is not proposing a _set_ of new Invulnerables.
   *
   * This call does not maintain mutual exclusivity of `Invulnerables` and `Candidates`. It
   * is recommended to use a batch of `add_invulnerable` and `remove_invulnerable` instead. A
   * `batch_all` can also be used to enforce atomicity. If any candidates are included in
   * `new`, they should be removed with `remove_invulnerable_candidate` after execution.
   *
   * Must be called by the `UpdateOrigin`.
   **/
  | { name: 'SetInvulnerables'; params: { new: Array<AccountId32> } }
  /**
   * Set the ideal number of non-invulnerable collators. If lowering this number, then the
   * number of running collators could be higher than this figure. Aside from that edge case,
   * there should be no other way to have more candidates than the desired number.
   *
   * The origin for this call must be the `UpdateOrigin`.
   **/
  | { name: 'SetDesiredCandidates'; params: { max: number } }
  /**
   * Set the candidacy bond amount.
   *
   * If the candidacy bond is increased by this call, all current candidates which have a
   * deposit lower than the new bond will be kicked from the list and get their deposits
   * back.
   *
   * The origin for this call must be the `UpdateOrigin`.
   **/
  | { name: 'SetCandidacyBond'; params: { bond: bigint } }
  /**
   * Register this account as a collator candidate. The account must (a) already have
   * registered session keys and (b) be able to reserve the `CandidacyBond`.
   *
   * This call is not available to `Invulnerable` collators.
   **/
  | { name: 'RegisterAsCandidate' }
  /**
   * Deregister `origin` as a collator candidate. Note that the collator can only leave on
   * session change. The `CandidacyBond` will be unreserved immediately.
   *
   * This call will fail if the total number of candidates would drop below
   * `MinEligibleCollators`.
   **/
  | { name: 'LeaveIntent' }
  /**
   * Add a new account `who` to the list of `Invulnerables` collators. `who` must have
   * registered session keys. If `who` is a candidate, they will be removed.
   *
   * The origin for this call must be the `UpdateOrigin`.
   **/
  | { name: 'AddInvulnerable'; params: { who: AccountId32 } }
  /**
   * Remove an account `who` from the list of `Invulnerables` collators. `Invulnerables` must
   * be sorted.
   *
   * The origin for this call must be the `UpdateOrigin`.
   **/
  | { name: 'RemoveInvulnerable'; params: { who: AccountId32 } }
  /**
   * Update the candidacy bond of collator candidate `origin` to a new amount `new_deposit`.
   *
   * Setting a `new_deposit` that is lower than the current deposit while `origin` is
   * occupying a top-`DesiredCandidates` slot is not allowed.
   *
   * This call will fail if `origin` is not a collator candidate, the updated bond is lower
   * than the minimum candidacy bond, and/or the amount cannot be reserved.
   **/
  | { name: 'UpdateBond'; params: { newDeposit: bigint } }
  /**
   * The caller `origin` replaces a candidate `target` in the collator candidate list by
   * reserving `deposit`. The amount `deposit` reserved by the caller must be greater than
   * the existing bond of the target it is trying to replace.
   *
   * This call will fail if the caller is already a collator candidate or invulnerable, the
   * caller does not have registered session keys, the target is not a collator candidate,
   * and/or the `deposit` amount cannot be reserved.
   **/
  | { name: 'TakeCandidateSlot'; params: { deposit: bigint; target: AccountId32 } };

export type PalletCollatorSelectionCallLike =
  /**
   * Set the list of invulnerable (fixed) collators. These collators must do some
   * preparation, namely to have registered session keys.
   *
   * The call will remove any accounts that have not registered keys from the set. That is,
   * it is non-atomic; the caller accepts all `AccountId`s passed in `new` _individually_ as
   * acceptable Invulnerables, and is not proposing a _set_ of new Invulnerables.
   *
   * This call does not maintain mutual exclusivity of `Invulnerables` and `Candidates`. It
   * is recommended to use a batch of `add_invulnerable` and `remove_invulnerable` instead. A
   * `batch_all` can also be used to enforce atomicity. If any candidates are included in
   * `new`, they should be removed with `remove_invulnerable_candidate` after execution.
   *
   * Must be called by the `UpdateOrigin`.
   **/
  | { name: 'SetInvulnerables'; params: { new: Array<AccountId32Like> } }
  /**
   * Set the ideal number of non-invulnerable collators. If lowering this number, then the
   * number of running collators could be higher than this figure. Aside from that edge case,
   * there should be no other way to have more candidates than the desired number.
   *
   * The origin for this call must be the `UpdateOrigin`.
   **/
  | { name: 'SetDesiredCandidates'; params: { max: number } }
  /**
   * Set the candidacy bond amount.
   *
   * If the candidacy bond is increased by this call, all current candidates which have a
   * deposit lower than the new bond will be kicked from the list and get their deposits
   * back.
   *
   * The origin for this call must be the `UpdateOrigin`.
   **/
  | { name: 'SetCandidacyBond'; params: { bond: bigint } }
  /**
   * Register this account as a collator candidate. The account must (a) already have
   * registered session keys and (b) be able to reserve the `CandidacyBond`.
   *
   * This call is not available to `Invulnerable` collators.
   **/
  | { name: 'RegisterAsCandidate' }
  /**
   * Deregister `origin` as a collator candidate. Note that the collator can only leave on
   * session change. The `CandidacyBond` will be unreserved immediately.
   *
   * This call will fail if the total number of candidates would drop below
   * `MinEligibleCollators`.
   **/
  | { name: 'LeaveIntent' }
  /**
   * Add a new account `who` to the list of `Invulnerables` collators. `who` must have
   * registered session keys. If `who` is a candidate, they will be removed.
   *
   * The origin for this call must be the `UpdateOrigin`.
   **/
  | { name: 'AddInvulnerable'; params: { who: AccountId32Like } }
  /**
   * Remove an account `who` from the list of `Invulnerables` collators. `Invulnerables` must
   * be sorted.
   *
   * The origin for this call must be the `UpdateOrigin`.
   **/
  | { name: 'RemoveInvulnerable'; params: { who: AccountId32Like } }
  /**
   * Update the candidacy bond of collator candidate `origin` to a new amount `new_deposit`.
   *
   * Setting a `new_deposit` that is lower than the current deposit while `origin` is
   * occupying a top-`DesiredCandidates` slot is not allowed.
   *
   * This call will fail if `origin` is not a collator candidate, the updated bond is lower
   * than the minimum candidacy bond, and/or the amount cannot be reserved.
   **/
  | { name: 'UpdateBond'; params: { newDeposit: bigint } }
  /**
   * The caller `origin` replaces a candidate `target` in the collator candidate list by
   * reserving `deposit`. The amount `deposit` reserved by the caller must be greater than
   * the existing bond of the target it is trying to replace.
   *
   * This call will fail if the caller is already a collator candidate or invulnerable, the
   * caller does not have registered session keys, the target is not a collator candidate,
   * and/or the `deposit` amount cannot be reserved.
   **/
  | { name: 'TakeCandidateSlot'; params: { deposit: bigint; target: AccountId32Like } };

/**
 * The `Error` enum of this pallet.
 **/
export type PalletCollatorSelectionError =
  /**
   * The pallet has too many candidates.
   **/
  | 'TooManyCandidates'
  /**
   * Leaving would result in too few candidates.
   **/
  | 'TooFewEligibleCollators'
  /**
   * Account is already a candidate.
   **/
  | 'AlreadyCandidate'
  /**
   * Account is not a candidate.
   **/
  | 'NotCandidate'
  /**
   * There are too many Invulnerables.
   **/
  | 'TooManyInvulnerables'
  /**
   * Account is already an Invulnerable.
   **/
  | 'AlreadyInvulnerable'
  /**
   * Account is not an Invulnerable.
   **/
  | 'NotInvulnerable'
  /**
   * Account has no associated validator ID.
   **/
  | 'NoAssociatedValidatorId'
  /**
   * Validator ID is not yet registered.
   **/
  | 'ValidatorNotRegistered'
  /**
   * Could not insert in the candidate list.
   **/
  | 'InsertToCandidateListFailed'
  /**
   * Could not remove from the candidate list.
   **/
  | 'RemoveFromCandidateListFailed'
  /**
   * New deposit amount would be below the minimum candidacy bond.
   **/
  | 'DepositTooLow'
  /**
   * Could not update the candidate list.
   **/
  | 'UpdateCandidateListFailed'
  /**
   * Deposit amount is too low to take the target's slot in the candidate list.
   **/
  | 'InsufficientBond'
  /**
   * The target account to be replaced in the candidate list is not a candidate.
   **/
  | 'TargetIsNotCandidate'
  /**
   * The updated deposit amount is equal to the amount already reserved.
   **/
  | 'IdenticalDeposit'
  /**
   * Cannot lower candidacy bond while occupying a future collator slot in the list.
   **/
  | 'InvalidUnreserve';

export type AssetHubKusamaRuntimeSessionKeys = { aura: SpConsensusAuraSr25519AppSr25519Public };

export type SpConsensusAuraSr25519AppSr25519Public = FixedBytes<32>;

export type SpCoreCryptoKeyTypeId = FixedBytes<4>;

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletSessionCall =
  /**
   * Sets the session key(s) of the function caller to `keys`.
   * Allows an account to set its session key prior to becoming a validator.
   * This doesn't take effect until the next session.
   *
   * The dispatch origin of this function must be signed.
   *
   * ## Complexity
   * - `O(1)`. Actual cost depends on the number of length of `T::Keys::key_ids()` which is
   * fixed.
   **/
  | { name: 'SetKeys'; params: { keys: AssetHubKusamaRuntimeSessionKeys; proof: Bytes } }
  /**
   * Removes any session key(s) of the function caller.
   *
   * This doesn't take effect until the next session.
   *
   * The dispatch origin of this function must be Signed and the account must be either be
   * convertible to a validator ID using the chain's typical addressing system (this usually
   * means being a controller account) or directly convertible into a validator ID (which
   * usually means being a stash account).
   *
   * ## Complexity
   * - `O(1)` in number of key types. Actual cost depends on the number of length of
   * `T::Keys::key_ids()` which is fixed.
   **/
  | { name: 'PurgeKeys' };

export type PalletSessionCallLike =
  /**
   * Sets the session key(s) of the function caller to `keys`.
   * Allows an account to set its session key prior to becoming a validator.
   * This doesn't take effect until the next session.
   *
   * The dispatch origin of this function must be signed.
   *
   * ## Complexity
   * - `O(1)`. Actual cost depends on the number of length of `T::Keys::key_ids()` which is
   * fixed.
   **/
  | { name: 'SetKeys'; params: { keys: AssetHubKusamaRuntimeSessionKeys; proof: BytesLike } }
  /**
   * Removes any session key(s) of the function caller.
   *
   * This doesn't take effect until the next session.
   *
   * The dispatch origin of this function must be Signed and the account must be either be
   * convertible to a validator ID using the chain's typical addressing system (this usually
   * means being a controller account) or directly convertible into a validator ID (which
   * usually means being a stash account).
   *
   * ## Complexity
   * - `O(1)` in number of key types. Actual cost depends on the number of length of
   * `T::Keys::key_ids()` which is fixed.
   **/
  | { name: 'PurgeKeys' };

/**
 * Error for the session pallet.
 **/
export type PalletSessionError =
  /**
   * Invalid ownership proof.
   **/
  | 'InvalidProof'
  /**
   * No associated validator ID for account.
   **/
  | 'NoAssociatedValidatorId'
  /**
   * Registered duplicate key.
   **/
  | 'DuplicatedKey'
  /**
   * No keys are associated with this account.
   **/
  | 'NoKeys'
  /**
   * Key setting account is not live, so it's impossible to associate keys.
   **/
  | 'NoAccount';

export type SpConsensusSlotsSlot = bigint;

export type CumulusPalletXcmpQueueOutboundChannelDetails = {
  recipient: PolkadotParachainPrimitivesPrimitivesId;
  state: CumulusPalletXcmpQueueOutboundState;
  signalsExist: boolean;
  firstIndex: number;
  lastIndex: number;
};

export type CumulusPalletXcmpQueueOutboundState = 'Ok' | 'Suspended';

export type CumulusPalletXcmpQueueQueueConfigData = {
  suspendThreshold: number;
  dropThreshold: number;
  resumeThreshold: number;
};

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type CumulusPalletXcmpQueueCall =
  /**
   * Suspends all XCM executions for the XCMP queue, regardless of the sender's origin.
   *
   * - `origin`: Must pass `ControllerOrigin`.
   **/
  | { name: 'SuspendXcmExecution' }
  /**
   * Resumes all XCM executions for the XCMP queue.
   *
   * Note that this function doesn't change the status of the in/out bound channels.
   *
   * - `origin`: Must pass `ControllerOrigin`.
   **/
  | { name: 'ResumeXcmExecution' }
  /**
   * Overwrites the number of pages which must be in the queue for the other side to be
   * told to suspend their sending.
   *
   * - `origin`: Must pass `Root`.
   * - `new`: Desired value for `QueueConfigData.suspend_value`
   **/
  | { name: 'UpdateSuspendThreshold'; params: { new: number } }
  /**
   * Overwrites the number of pages which must be in the queue after which we drop any
   * further messages from the channel.
   *
   * - `origin`: Must pass `Root`.
   * - `new`: Desired value for `QueueConfigData.drop_threshold`
   **/
  | { name: 'UpdateDropThreshold'; params: { new: number } }
  /**
   * Overwrites the number of pages which the queue must be reduced to before it signals
   * that message sending may recommence after it has been suspended.
   *
   * - `origin`: Must pass `Root`.
   * - `new`: Desired value for `QueueConfigData.resume_threshold`
   **/
  | { name: 'UpdateResumeThreshold'; params: { new: number } };

export type CumulusPalletXcmpQueueCallLike =
  /**
   * Suspends all XCM executions for the XCMP queue, regardless of the sender's origin.
   *
   * - `origin`: Must pass `ControllerOrigin`.
   **/
  | { name: 'SuspendXcmExecution' }
  /**
   * Resumes all XCM executions for the XCMP queue.
   *
   * Note that this function doesn't change the status of the in/out bound channels.
   *
   * - `origin`: Must pass `ControllerOrigin`.
   **/
  | { name: 'ResumeXcmExecution' }
  /**
   * Overwrites the number of pages which must be in the queue for the other side to be
   * told to suspend their sending.
   *
   * - `origin`: Must pass `Root`.
   * - `new`: Desired value for `QueueConfigData.suspend_value`
   **/
  | { name: 'UpdateSuspendThreshold'; params: { new: number } }
  /**
   * Overwrites the number of pages which must be in the queue after which we drop any
   * further messages from the channel.
   *
   * - `origin`: Must pass `Root`.
   * - `new`: Desired value for `QueueConfigData.drop_threshold`
   **/
  | { name: 'UpdateDropThreshold'; params: { new: number } }
  /**
   * Overwrites the number of pages which the queue must be reduced to before it signals
   * that message sending may recommence after it has been suspended.
   *
   * - `origin`: Must pass `Root`.
   * - `new`: Desired value for `QueueConfigData.resume_threshold`
   **/
  | { name: 'UpdateResumeThreshold'; params: { new: number } };

/**
 * The `Error` enum of this pallet.
 **/
export type CumulusPalletXcmpQueueError =
  /**
   * Setting the queue config failed since one of its values was invalid.
   **/
  | 'BadQueueConfig'
  /**
   * The execution is already suspended.
   **/
  | 'AlreadySuspended'
  /**
   * The execution is already resumed.
   **/
  | 'AlreadyResumed'
  /**
   * There are too many active outbound channels.
   **/
  | 'TooManyActiveOutboundChannels'
  /**
   * The message is too big.
   **/
  | 'TooBig';

export type PalletXcmQueryStatus =
  | {
      type: 'Pending';
      value: {
        responder: XcmVersionedLocation;
        maybeMatchQuerier?: XcmVersionedLocation | undefined;
        maybeNotify?: [number, number] | undefined;
        timeout: number;
      };
    }
  | { type: 'VersionNotifier'; value: { origin: XcmVersionedLocation; isActive: boolean } }
  | { type: 'Ready'; value: { response: XcmVersionedResponse; at: number } };

export type XcmVersionedResponse =
  | { type: 'V2'; value: XcmV2Response }
  | { type: 'V3'; value: XcmV3Response }
  | { type: 'V4'; value: StagingXcmV4Response };

export type XcmV2Response =
  | { type: 'Null' }
  | { type: 'Assets'; value: XcmV2MultiassetMultiAssets }
  | { type: 'ExecutionResult'; value?: [number, XcmV2TraitsError] | undefined }
  | { type: 'Version'; value: number };

export type XcmV2TraitsError =
  | { type: 'Overflow' }
  | { type: 'Unimplemented' }
  | { type: 'UntrustedReserveLocation' }
  | { type: 'UntrustedTeleportLocation' }
  | { type: 'MultiLocationFull' }
  | { type: 'MultiLocationNotInvertible' }
  | { type: 'BadOrigin' }
  | { type: 'InvalidLocation' }
  | { type: 'AssetNotFound' }
  | { type: 'FailedToTransactAsset' }
  | { type: 'NotWithdrawable' }
  | { type: 'LocationCannotHold' }
  | { type: 'ExceedsMaxMessageSize' }
  | { type: 'DestinationUnsupported' }
  | { type: 'Transport' }
  | { type: 'Unroutable' }
  | { type: 'UnknownClaim' }
  | { type: 'FailedToDecode' }
  | { type: 'MaxWeightInvalid' }
  | { type: 'NotHoldingFees' }
  | { type: 'TooExpensive' }
  | { type: 'Trap'; value: bigint }
  | { type: 'UnhandledXcmVersion' }
  | { type: 'WeightLimitReached'; value: bigint }
  | { type: 'Barrier' }
  | { type: 'WeightNotComputable' };

export type XcmV3Response =
  | { type: 'Null' }
  | { type: 'Assets'; value: XcmV3MultiassetMultiAssets }
  | { type: 'ExecutionResult'; value?: [number, XcmV3TraitsError] | undefined }
  | { type: 'Version'; value: number }
  | { type: 'PalletsInfo'; value: Array<XcmV3PalletInfo> }
  | { type: 'DispatchResult'; value: XcmV3MaybeErrorCode };

export type XcmV3PalletInfo = {
  index: number;
  name: Bytes;
  moduleName: Bytes;
  major: number;
  minor: number;
  patch: number;
};

export type PalletXcmVersionMigrationStage =
  | { type: 'MigrateSupportedVersion' }
  | { type: 'MigrateVersionNotifiers' }
  | { type: 'NotifyCurrentTargets'; value?: Bytes | undefined }
  | { type: 'MigrateAndNotifyOldTargets' };

export type XcmVersionedAssetId =
  | { type: 'V3'; value: XcmV3MultiassetAssetId }
  | { type: 'V4'; value: StagingXcmV4AssetAssetId };

export type PalletXcmRemoteLockedFungibleRecord = {
  amount: bigint;
  owner: XcmVersionedLocation;
  locker: XcmVersionedLocation;
  consumers: Array<[[], bigint]>;
};

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletXcmCall =
  | { name: 'Send'; params: { dest: XcmVersionedLocation; message: XcmVersionedXcm } }
  /**
   * Teleport some assets from the local chain to some destination chain.
   *
   * **This function is deprecated: Use `limited_teleport_assets` instead.**
   *
   * Fee payment on the destination side is made from the asset in the `assets` vector of
   * index `fee_asset_item`. The weight limit for fees is not provided and thus is unlimited,
   * with all fees taken as needed from the asset.
   *
   * - `origin`: Must be capable of withdrawing the `assets` and executing XCM.
   * - `dest`: Destination context for the assets. Will typically be `[Parent,
   * Parachain(..)]` to send from parachain to parachain, or `[Parachain(..)]` to send from
   * relay to parachain.
   * - `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will
   * generally be an `AccountId32` value.
   * - `assets`: The assets to be withdrawn. This should include the assets used to pay the
   * fee on the `dest` chain.
   * - `fee_asset_item`: The index into `assets` of the item which should be used to pay
   * fees.
   **/
  | {
      name: 'TeleportAssets';
      params: {
        dest: XcmVersionedLocation;
        beneficiary: XcmVersionedLocation;
        assets: XcmVersionedAssets;
        feeAssetItem: number;
      };
    }
  /**
   * Transfer some assets from the local chain to the destination chain through their local,
   * destination or remote reserve.
   *
   * `assets` must have same reserve location and may not be teleportable to `dest`.
   * - `assets` have local reserve: transfer assets to sovereign account of destination
   * chain and forward a notification XCM to `dest` to mint and deposit reserve-based
   * assets to `beneficiary`.
   * - `assets` have destination reserve: burn local assets and forward a notification to
   * `dest` chain to withdraw the reserve assets from this chain's sovereign account and
   * deposit them to `beneficiary`.
   * - `assets` have remote reserve: burn local assets, forward XCM to reserve chain to move
   * reserves from this chain's SA to `dest` chain's SA, and forward another XCM to `dest`
   * to mint and deposit reserve-based assets to `beneficiary`.
   *
   * **This function is deprecated: Use `limited_reserve_transfer_assets` instead.**
   *
   * Fee payment on the destination side is made from the asset in the `assets` vector of
   * index `fee_asset_item`. The weight limit for fees is not provided and thus is unlimited,
   * with all fees taken as needed from the asset.
   *
   * - `origin`: Must be capable of withdrawing the `assets` and executing XCM.
   * - `dest`: Destination context for the assets. Will typically be `[Parent,
   * Parachain(..)]` to send from parachain to parachain, or `[Parachain(..)]` to send from
   * relay to parachain.
   * - `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will
   * generally be an `AccountId32` value.
   * - `assets`: The assets to be withdrawn. This should include the assets used to pay the
   * fee on the `dest` (and possibly reserve) chains.
   * - `fee_asset_item`: The index into `assets` of the item which should be used to pay
   * fees.
   **/
  | {
      name: 'ReserveTransferAssets';
      params: {
        dest: XcmVersionedLocation;
        beneficiary: XcmVersionedLocation;
        assets: XcmVersionedAssets;
        feeAssetItem: number;
      };
    }
  /**
   * Execute an XCM message from a local, signed, origin.
   *
   * An event is deposited indicating whether `msg` could be executed completely or only
   * partially.
   *
   * No more than `max_weight` will be used in its attempted execution. If this is less than
   * the maximum amount of weight that the message could take to be executed, then no
   * execution attempt will be made.
   **/
  | { name: 'Execute'; params: { message: XcmVersionedXcm; maxWeight: SpWeightsWeightV2Weight } }
  /**
   * Extoll that a particular destination can be communicated with through a particular
   * version of XCM.
   *
   * - `origin`: Must be an origin specified by AdminOrigin.
   * - `location`: The destination that is being described.
   * - `xcm_version`: The latest version of XCM that `location` supports.
   **/
  | { name: 'ForceXcmVersion'; params: { location: StagingXcmV4Location; version: number } }
  /**
   * Set a safe XCM version (the version that XCM should be encoded with if the most recent
   * version a destination can accept is unknown).
   *
   * - `origin`: Must be an origin specified by AdminOrigin.
   * - `maybe_xcm_version`: The default XCM encoding version, or `None` to disable.
   **/
  | { name: 'ForceDefaultXcmVersion'; params: { maybeXcmVersion?: number | undefined } }
  /**
   * Ask a location to notify us regarding their XCM version and any changes to it.
   *
   * - `origin`: Must be an origin specified by AdminOrigin.
   * - `location`: The location to which we should subscribe for XCM version notifications.
   **/
  | { name: 'ForceSubscribeVersionNotify'; params: { location: XcmVersionedLocation } }
  /**
   * Require that a particular destination should no longer notify us regarding any XCM
   * version changes.
   *
   * - `origin`: Must be an origin specified by AdminOrigin.
   * - `location`: The location to which we are currently subscribed for XCM version
   * notifications which we no longer desire.
   **/
  | { name: 'ForceUnsubscribeVersionNotify'; params: { location: XcmVersionedLocation } }
  /**
   * Transfer some assets from the local chain to the destination chain through their local,
   * destination or remote reserve.
   *
   * `assets` must have same reserve location and may not be teleportable to `dest`.
   * - `assets` have local reserve: transfer assets to sovereign account of destination
   * chain and forward a notification XCM to `dest` to mint and deposit reserve-based
   * assets to `beneficiary`.
   * - `assets` have destination reserve: burn local assets and forward a notification to
   * `dest` chain to withdraw the reserve assets from this chain's sovereign account and
   * deposit them to `beneficiary`.
   * - `assets` have remote reserve: burn local assets, forward XCM to reserve chain to move
   * reserves from this chain's SA to `dest` chain's SA, and forward another XCM to `dest`
   * to mint and deposit reserve-based assets to `beneficiary`.
   *
   * Fee payment on the destination side is made from the asset in the `assets` vector of
   * index `fee_asset_item`, up to enough to pay for `weight_limit` of weight. If more weight
   * is needed than `weight_limit`, then the operation will fail and the sent assets may be
   * at risk.
   *
   * - `origin`: Must be capable of withdrawing the `assets` and executing XCM.
   * - `dest`: Destination context for the assets. Will typically be `[Parent,
   * Parachain(..)]` to send from parachain to parachain, or `[Parachain(..)]` to send from
   * relay to parachain.
   * - `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will
   * generally be an `AccountId32` value.
   * - `assets`: The assets to be withdrawn. This should include the assets used to pay the
   * fee on the `dest` (and possibly reserve) chains.
   * - `fee_asset_item`: The index into `assets` of the item which should be used to pay
   * fees.
   * - `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase.
   **/
  | {
      name: 'LimitedReserveTransferAssets';
      params: {
        dest: XcmVersionedLocation;
        beneficiary: XcmVersionedLocation;
        assets: XcmVersionedAssets;
        feeAssetItem: number;
        weightLimit: XcmV3WeightLimit;
      };
    }
  /**
   * Teleport some assets from the local chain to some destination chain.
   *
   * Fee payment on the destination side is made from the asset in the `assets` vector of
   * index `fee_asset_item`, up to enough to pay for `weight_limit` of weight. If more weight
   * is needed than `weight_limit`, then the operation will fail and the sent assets may be
   * at risk.
   *
   * - `origin`: Must be capable of withdrawing the `assets` and executing XCM.
   * - `dest`: Destination context for the assets. Will typically be `[Parent,
   * Parachain(..)]` to send from parachain to parachain, or `[Parachain(..)]` to send from
   * relay to parachain.
   * - `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will
   * generally be an `AccountId32` value.
   * - `assets`: The assets to be withdrawn. This should include the assets used to pay the
   * fee on the `dest` chain.
   * - `fee_asset_item`: The index into `assets` of the item which should be used to pay
   * fees.
   * - `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase.
   **/
  | {
      name: 'LimitedTeleportAssets';
      params: {
        dest: XcmVersionedLocation;
        beneficiary: XcmVersionedLocation;
        assets: XcmVersionedAssets;
        feeAssetItem: number;
        weightLimit: XcmV3WeightLimit;
      };
    }
  /**
   * Set or unset the global suspension state of the XCM executor.
   *
   * - `origin`: Must be an origin specified by AdminOrigin.
   * - `suspended`: `true` to suspend, `false` to resume.
   **/
  | { name: 'ForceSuspension'; params: { suspended: boolean } }
  /**
   * Transfer some assets from the local chain to the destination chain through their local,
   * destination or remote reserve, or through teleports.
   *
   * Fee payment on the destination side is made from the asset in the `assets` vector of
   * index `fee_asset_item` (hence referred to as `fees`), up to enough to pay for
   * `weight_limit` of weight. If more weight is needed than `weight_limit`, then the
   * operation will fail and the sent assets may be at risk.
   *
   * `assets` (excluding `fees`) must have same reserve location or otherwise be teleportable
   * to `dest`, no limitations imposed on `fees`.
   * - for local reserve: transfer assets to sovereign account of destination chain and
   * forward a notification XCM to `dest` to mint and deposit reserve-based assets to
   * `beneficiary`.
   * - for destination reserve: burn local assets and forward a notification to `dest` chain
   * to withdraw the reserve assets from this chain's sovereign account and deposit them
   * to `beneficiary`.
   * - for remote reserve: burn local assets, forward XCM to reserve chain to move reserves
   * from this chain's SA to `dest` chain's SA, and forward another XCM to `dest` to mint
   * and deposit reserve-based assets to `beneficiary`.
   * - for teleports: burn local assets and forward XCM to `dest` chain to mint/teleport
   * assets and deposit them to `beneficiary`.
   *
   * - `origin`: Must be capable of withdrawing the `assets` and executing XCM.
   * - `dest`: Destination context for the assets. Will typically be `X2(Parent,
   * Parachain(..))` to send from parachain to parachain, or `X1(Parachain(..))` to send
   * from relay to parachain.
   * - `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will
   * generally be an `AccountId32` value.
   * - `assets`: The assets to be withdrawn. This should include the assets used to pay the
   * fee on the `dest` (and possibly reserve) chains.
   * - `fee_asset_item`: The index into `assets` of the item which should be used to pay
   * fees.
   * - `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase.
   **/
  | {
      name: 'TransferAssets';
      params: {
        dest: XcmVersionedLocation;
        beneficiary: XcmVersionedLocation;
        assets: XcmVersionedAssets;
        feeAssetItem: number;
        weightLimit: XcmV3WeightLimit;
      };
    }
  /**
   * Claims assets trapped on this pallet because of leftover assets during XCM execution.
   *
   * - `origin`: Anyone can call this extrinsic.
   * - `assets`: The exact assets that were trapped. Use the version to specify what version
   * was the latest when they were trapped.
   * - `beneficiary`: The location/account where the claimed assets will be deposited.
   **/
  | { name: 'ClaimAssets'; params: { assets: XcmVersionedAssets; beneficiary: XcmVersionedLocation } }
  /**
   * Transfer assets from the local chain to the destination chain using explicit transfer
   * types for assets and fees.
   *
   * `assets` must have same reserve location or may be teleportable to `dest`. Caller must
   * provide the `assets_transfer_type` to be used for `assets`:
   * - `TransferType::LocalReserve`: transfer assets to sovereign account of destination
   * chain and forward a notification XCM to `dest` to mint and deposit reserve-based
   * assets to `beneficiary`.
   * - `TransferType::DestinationReserve`: burn local assets and forward a notification to
   * `dest` chain to withdraw the reserve assets from this chain's sovereign account and
   * deposit them to `beneficiary`.
   * - `TransferType::RemoteReserve(reserve)`: burn local assets, forward XCM to `reserve`
   * chain to move reserves from this chain's SA to `dest` chain's SA, and forward another
   * XCM to `dest` to mint and deposit reserve-based assets to `beneficiary`. Typically
   * the remote `reserve` is Asset Hub.
   * - `TransferType::Teleport`: burn local assets and forward XCM to `dest` chain to
   * mint/teleport assets and deposit them to `beneficiary`.
   *
   * On the destination chain, as well as any intermediary hops, `BuyExecution` is used to
   * buy execution using transferred `assets` identified by `remote_fees_id`.
   * Make sure enough of the specified `remote_fees_id` asset is included in the given list
   * of `assets`. `remote_fees_id` should be enough to pay for `weight_limit`. If more weight
   * is needed than `weight_limit`, then the operation will fail and the sent assets may be
   * at risk.
   *
   * `remote_fees_id` may use different transfer type than rest of `assets` and can be
   * specified through `fees_transfer_type`.
   *
   * The caller needs to specify what should happen to the transferred assets once they reach
   * the `dest` chain. This is done through the `custom_xcm_on_dest` parameter, which
   * contains the instructions to execute on `dest` as a final step.
   * This is usually as simple as:
   * `Xcm(vec![DepositAsset { assets: Wild(AllCounted(assets.len())), beneficiary }])`,
   * but could be something more exotic like sending the `assets` even further.
   *
   * - `origin`: Must be capable of withdrawing the `assets` and executing XCM.
   * - `dest`: Destination context for the assets. Will typically be `[Parent,
   * Parachain(..)]` to send from parachain to parachain, or `[Parachain(..)]` to send from
   * relay to parachain, or `(parents: 2, (GlobalConsensus(..), ..))` to send from
   * parachain across a bridge to another ecosystem destination.
   * - `assets`: The assets to be withdrawn. This should include the assets used to pay the
   * fee on the `dest` (and possibly reserve) chains.
   * - `assets_transfer_type`: The XCM `TransferType` used to transfer the `assets`.
   * - `remote_fees_id`: One of the included `assets` to be used to pay fees.
   * - `fees_transfer_type`: The XCM `TransferType` used to transfer the `fees` assets.
   * - `custom_xcm_on_dest`: The XCM to be executed on `dest` chain as the last step of the
   * transfer, which also determines what happens to the assets on the destination chain.
   * - `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase.
   **/
  | {
      name: 'TransferAssetsUsingTypeAndThen';
      params: {
        dest: XcmVersionedLocation;
        assets: XcmVersionedAssets;
        assetsTransferType: StagingXcmExecutorAssetTransferTransferType;
        remoteFeesId: XcmVersionedAssetId;
        feesTransferType: StagingXcmExecutorAssetTransferTransferType;
        customXcmOnDest: XcmVersionedXcm;
        weightLimit: XcmV3WeightLimit;
      };
    };

export type PalletXcmCallLike =
  | { name: 'Send'; params: { dest: XcmVersionedLocation; message: XcmVersionedXcm } }
  /**
   * Teleport some assets from the local chain to some destination chain.
   *
   * **This function is deprecated: Use `limited_teleport_assets` instead.**
   *
   * Fee payment on the destination side is made from the asset in the `assets` vector of
   * index `fee_asset_item`. The weight limit for fees is not provided and thus is unlimited,
   * with all fees taken as needed from the asset.
   *
   * - `origin`: Must be capable of withdrawing the `assets` and executing XCM.
   * - `dest`: Destination context for the assets. Will typically be `[Parent,
   * Parachain(..)]` to send from parachain to parachain, or `[Parachain(..)]` to send from
   * relay to parachain.
   * - `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will
   * generally be an `AccountId32` value.
   * - `assets`: The assets to be withdrawn. This should include the assets used to pay the
   * fee on the `dest` chain.
   * - `fee_asset_item`: The index into `assets` of the item which should be used to pay
   * fees.
   **/
  | {
      name: 'TeleportAssets';
      params: {
        dest: XcmVersionedLocation;
        beneficiary: XcmVersionedLocation;
        assets: XcmVersionedAssets;
        feeAssetItem: number;
      };
    }
  /**
   * Transfer some assets from the local chain to the destination chain through their local,
   * destination or remote reserve.
   *
   * `assets` must have same reserve location and may not be teleportable to `dest`.
   * - `assets` have local reserve: transfer assets to sovereign account of destination
   * chain and forward a notification XCM to `dest` to mint and deposit reserve-based
   * assets to `beneficiary`.
   * - `assets` have destination reserve: burn local assets and forward a notification to
   * `dest` chain to withdraw the reserve assets from this chain's sovereign account and
   * deposit them to `beneficiary`.
   * - `assets` have remote reserve: burn local assets, forward XCM to reserve chain to move
   * reserves from this chain's SA to `dest` chain's SA, and forward another XCM to `dest`
   * to mint and deposit reserve-based assets to `beneficiary`.
   *
   * **This function is deprecated: Use `limited_reserve_transfer_assets` instead.**
   *
   * Fee payment on the destination side is made from the asset in the `assets` vector of
   * index `fee_asset_item`. The weight limit for fees is not provided and thus is unlimited,
   * with all fees taken as needed from the asset.
   *
   * - `origin`: Must be capable of withdrawing the `assets` and executing XCM.
   * - `dest`: Destination context for the assets. Will typically be `[Parent,
   * Parachain(..)]` to send from parachain to parachain, or `[Parachain(..)]` to send from
   * relay to parachain.
   * - `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will
   * generally be an `AccountId32` value.
   * - `assets`: The assets to be withdrawn. This should include the assets used to pay the
   * fee on the `dest` (and possibly reserve) chains.
   * - `fee_asset_item`: The index into `assets` of the item which should be used to pay
   * fees.
   **/
  | {
      name: 'ReserveTransferAssets';
      params: {
        dest: XcmVersionedLocation;
        beneficiary: XcmVersionedLocation;
        assets: XcmVersionedAssets;
        feeAssetItem: number;
      };
    }
  /**
   * Execute an XCM message from a local, signed, origin.
   *
   * An event is deposited indicating whether `msg` could be executed completely or only
   * partially.
   *
   * No more than `max_weight` will be used in its attempted execution. If this is less than
   * the maximum amount of weight that the message could take to be executed, then no
   * execution attempt will be made.
   **/
  | { name: 'Execute'; params: { message: XcmVersionedXcm; maxWeight: SpWeightsWeightV2Weight } }
  /**
   * Extoll that a particular destination can be communicated with through a particular
   * version of XCM.
   *
   * - `origin`: Must be an origin specified by AdminOrigin.
   * - `location`: The destination that is being described.
   * - `xcm_version`: The latest version of XCM that `location` supports.
   **/
  | { name: 'ForceXcmVersion'; params: { location: StagingXcmV4Location; version: number } }
  /**
   * Set a safe XCM version (the version that XCM should be encoded with if the most recent
   * version a destination can accept is unknown).
   *
   * - `origin`: Must be an origin specified by AdminOrigin.
   * - `maybe_xcm_version`: The default XCM encoding version, or `None` to disable.
   **/
  | { name: 'ForceDefaultXcmVersion'; params: { maybeXcmVersion?: number | undefined } }
  /**
   * Ask a location to notify us regarding their XCM version and any changes to it.
   *
   * - `origin`: Must be an origin specified by AdminOrigin.
   * - `location`: The location to which we should subscribe for XCM version notifications.
   **/
  | { name: 'ForceSubscribeVersionNotify'; params: { location: XcmVersionedLocation } }
  /**
   * Require that a particular destination should no longer notify us regarding any XCM
   * version changes.
   *
   * - `origin`: Must be an origin specified by AdminOrigin.
   * - `location`: The location to which we are currently subscribed for XCM version
   * notifications which we no longer desire.
   **/
  | { name: 'ForceUnsubscribeVersionNotify'; params: { location: XcmVersionedLocation } }
  /**
   * Transfer some assets from the local chain to the destination chain through their local,
   * destination or remote reserve.
   *
   * `assets` must have same reserve location and may not be teleportable to `dest`.
   * - `assets` have local reserve: transfer assets to sovereign account of destination
   * chain and forward a notification XCM to `dest` to mint and deposit reserve-based
   * assets to `beneficiary`.
   * - `assets` have destination reserve: burn local assets and forward a notification to
   * `dest` chain to withdraw the reserve assets from this chain's sovereign account and
   * deposit them to `beneficiary`.
   * - `assets` have remote reserve: burn local assets, forward XCM to reserve chain to move
   * reserves from this chain's SA to `dest` chain's SA, and forward another XCM to `dest`
   * to mint and deposit reserve-based assets to `beneficiary`.
   *
   * Fee payment on the destination side is made from the asset in the `assets` vector of
   * index `fee_asset_item`, up to enough to pay for `weight_limit` of weight. If more weight
   * is needed than `weight_limit`, then the operation will fail and the sent assets may be
   * at risk.
   *
   * - `origin`: Must be capable of withdrawing the `assets` and executing XCM.
   * - `dest`: Destination context for the assets. Will typically be `[Parent,
   * Parachain(..)]` to send from parachain to parachain, or `[Parachain(..)]` to send from
   * relay to parachain.
   * - `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will
   * generally be an `AccountId32` value.
   * - `assets`: The assets to be withdrawn. This should include the assets used to pay the
   * fee on the `dest` (and possibly reserve) chains.
   * - `fee_asset_item`: The index into `assets` of the item which should be used to pay
   * fees.
   * - `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase.
   **/
  | {
      name: 'LimitedReserveTransferAssets';
      params: {
        dest: XcmVersionedLocation;
        beneficiary: XcmVersionedLocation;
        assets: XcmVersionedAssets;
        feeAssetItem: number;
        weightLimit: XcmV3WeightLimit;
      };
    }
  /**
   * Teleport some assets from the local chain to some destination chain.
   *
   * Fee payment on the destination side is made from the asset in the `assets` vector of
   * index `fee_asset_item`, up to enough to pay for `weight_limit` of weight. If more weight
   * is needed than `weight_limit`, then the operation will fail and the sent assets may be
   * at risk.
   *
   * - `origin`: Must be capable of withdrawing the `assets` and executing XCM.
   * - `dest`: Destination context for the assets. Will typically be `[Parent,
   * Parachain(..)]` to send from parachain to parachain, or `[Parachain(..)]` to send from
   * relay to parachain.
   * - `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will
   * generally be an `AccountId32` value.
   * - `assets`: The assets to be withdrawn. This should include the assets used to pay the
   * fee on the `dest` chain.
   * - `fee_asset_item`: The index into `assets` of the item which should be used to pay
   * fees.
   * - `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase.
   **/
  | {
      name: 'LimitedTeleportAssets';
      params: {
        dest: XcmVersionedLocation;
        beneficiary: XcmVersionedLocation;
        assets: XcmVersionedAssets;
        feeAssetItem: number;
        weightLimit: XcmV3WeightLimit;
      };
    }
  /**
   * Set or unset the global suspension state of the XCM executor.
   *
   * - `origin`: Must be an origin specified by AdminOrigin.
   * - `suspended`: `true` to suspend, `false` to resume.
   **/
  | { name: 'ForceSuspension'; params: { suspended: boolean } }
  /**
   * Transfer some assets from the local chain to the destination chain through their local,
   * destination or remote reserve, or through teleports.
   *
   * Fee payment on the destination side is made from the asset in the `assets` vector of
   * index `fee_asset_item` (hence referred to as `fees`), up to enough to pay for
   * `weight_limit` of weight. If more weight is needed than `weight_limit`, then the
   * operation will fail and the sent assets may be at risk.
   *
   * `assets` (excluding `fees`) must have same reserve location or otherwise be teleportable
   * to `dest`, no limitations imposed on `fees`.
   * - for local reserve: transfer assets to sovereign account of destination chain and
   * forward a notification XCM to `dest` to mint and deposit reserve-based assets to
   * `beneficiary`.
   * - for destination reserve: burn local assets and forward a notification to `dest` chain
   * to withdraw the reserve assets from this chain's sovereign account and deposit them
   * to `beneficiary`.
   * - for remote reserve: burn local assets, forward XCM to reserve chain to move reserves
   * from this chain's SA to `dest` chain's SA, and forward another XCM to `dest` to mint
   * and deposit reserve-based assets to `beneficiary`.
   * - for teleports: burn local assets and forward XCM to `dest` chain to mint/teleport
   * assets and deposit them to `beneficiary`.
   *
   * - `origin`: Must be capable of withdrawing the `assets` and executing XCM.
   * - `dest`: Destination context for the assets. Will typically be `X2(Parent,
   * Parachain(..))` to send from parachain to parachain, or `X1(Parachain(..))` to send
   * from relay to parachain.
   * - `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will
   * generally be an `AccountId32` value.
   * - `assets`: The assets to be withdrawn. This should include the assets used to pay the
   * fee on the `dest` (and possibly reserve) chains.
   * - `fee_asset_item`: The index into `assets` of the item which should be used to pay
   * fees.
   * - `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase.
   **/
  | {
      name: 'TransferAssets';
      params: {
        dest: XcmVersionedLocation;
        beneficiary: XcmVersionedLocation;
        assets: XcmVersionedAssets;
        feeAssetItem: number;
        weightLimit: XcmV3WeightLimit;
      };
    }
  /**
   * Claims assets trapped on this pallet because of leftover assets during XCM execution.
   *
   * - `origin`: Anyone can call this extrinsic.
   * - `assets`: The exact assets that were trapped. Use the version to specify what version
   * was the latest when they were trapped.
   * - `beneficiary`: The location/account where the claimed assets will be deposited.
   **/
  | { name: 'ClaimAssets'; params: { assets: XcmVersionedAssets; beneficiary: XcmVersionedLocation } }
  /**
   * Transfer assets from the local chain to the destination chain using explicit transfer
   * types for assets and fees.
   *
   * `assets` must have same reserve location or may be teleportable to `dest`. Caller must
   * provide the `assets_transfer_type` to be used for `assets`:
   * - `TransferType::LocalReserve`: transfer assets to sovereign account of destination
   * chain and forward a notification XCM to `dest` to mint and deposit reserve-based
   * assets to `beneficiary`.
   * - `TransferType::DestinationReserve`: burn local assets and forward a notification to
   * `dest` chain to withdraw the reserve assets from this chain's sovereign account and
   * deposit them to `beneficiary`.
   * - `TransferType::RemoteReserve(reserve)`: burn local assets, forward XCM to `reserve`
   * chain to move reserves from this chain's SA to `dest` chain's SA, and forward another
   * XCM to `dest` to mint and deposit reserve-based assets to `beneficiary`. Typically
   * the remote `reserve` is Asset Hub.
   * - `TransferType::Teleport`: burn local assets and forward XCM to `dest` chain to
   * mint/teleport assets and deposit them to `beneficiary`.
   *
   * On the destination chain, as well as any intermediary hops, `BuyExecution` is used to
   * buy execution using transferred `assets` identified by `remote_fees_id`.
   * Make sure enough of the specified `remote_fees_id` asset is included in the given list
   * of `assets`. `remote_fees_id` should be enough to pay for `weight_limit`. If more weight
   * is needed than `weight_limit`, then the operation will fail and the sent assets may be
   * at risk.
   *
   * `remote_fees_id` may use different transfer type than rest of `assets` and can be
   * specified through `fees_transfer_type`.
   *
   * The caller needs to specify what should happen to the transferred assets once they reach
   * the `dest` chain. This is done through the `custom_xcm_on_dest` parameter, which
   * contains the instructions to execute on `dest` as a final step.
   * This is usually as simple as:
   * `Xcm(vec![DepositAsset { assets: Wild(AllCounted(assets.len())), beneficiary }])`,
   * but could be something more exotic like sending the `assets` even further.
   *
   * - `origin`: Must be capable of withdrawing the `assets` and executing XCM.
   * - `dest`: Destination context for the assets. Will typically be `[Parent,
   * Parachain(..)]` to send from parachain to parachain, or `[Parachain(..)]` to send from
   * relay to parachain, or `(parents: 2, (GlobalConsensus(..), ..))` to send from
   * parachain across a bridge to another ecosystem destination.
   * - `assets`: The assets to be withdrawn. This should include the assets used to pay the
   * fee on the `dest` (and possibly reserve) chains.
   * - `assets_transfer_type`: The XCM `TransferType` used to transfer the `assets`.
   * - `remote_fees_id`: One of the included `assets` to be used to pay fees.
   * - `fees_transfer_type`: The XCM `TransferType` used to transfer the `fees` assets.
   * - `custom_xcm_on_dest`: The XCM to be executed on `dest` chain as the last step of the
   * transfer, which also determines what happens to the assets on the destination chain.
   * - `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase.
   **/
  | {
      name: 'TransferAssetsUsingTypeAndThen';
      params: {
        dest: XcmVersionedLocation;
        assets: XcmVersionedAssets;
        assetsTransferType: StagingXcmExecutorAssetTransferTransferType;
        remoteFeesId: XcmVersionedAssetId;
        feesTransferType: StagingXcmExecutorAssetTransferTransferType;
        customXcmOnDest: XcmVersionedXcm;
        weightLimit: XcmV3WeightLimit;
      };
    };

export type XcmVersionedXcm =
  | { type: 'V2'; value: XcmV2Xcm }
  | { type: 'V3'; value: XcmV3Xcm }
  | { type: 'V4'; value: StagingXcmV4Xcm };

export type XcmV2Xcm = Array<XcmV2Instruction>;

export type XcmV2Instruction =
  | { type: 'WithdrawAsset'; value: XcmV2MultiassetMultiAssets }
  | { type: 'ReserveAssetDeposited'; value: XcmV2MultiassetMultiAssets }
  | { type: 'ReceiveTeleportedAsset'; value: XcmV2MultiassetMultiAssets }
  | { type: 'QueryResponse'; value: { queryId: bigint; response: XcmV2Response; maxWeight: bigint } }
  | {
      type: 'TransferAsset';
      value: { assets: XcmV2MultiassetMultiAssets; beneficiary: XcmV2MultilocationMultiLocation };
    }
  | {
      type: 'TransferReserveAsset';
      value: { assets: XcmV2MultiassetMultiAssets; dest: XcmV2MultilocationMultiLocation; xcm: XcmV2Xcm };
    }
  | { type: 'Transact'; value: { originType: XcmV2OriginKind; requireWeightAtMost: bigint; call: XcmDoubleEncoded } }
  | { type: 'HrmpNewChannelOpenRequest'; value: { sender: number; maxMessageSize: number; maxCapacity: number } }
  | { type: 'HrmpChannelAccepted'; value: { recipient: number } }
  | { type: 'HrmpChannelClosing'; value: { initiator: number; sender: number; recipient: number } }
  | { type: 'ClearOrigin' }
  | { type: 'DescendOrigin'; value: XcmV2MultilocationJunctions }
  | {
      type: 'ReportError';
      value: { queryId: bigint; dest: XcmV2MultilocationMultiLocation; maxResponseWeight: bigint };
    }
  | {
      type: 'DepositAsset';
      value: {
        assets: XcmV2MultiassetMultiAssetFilter;
        maxAssets: number;
        beneficiary: XcmV2MultilocationMultiLocation;
      };
    }
  | {
      type: 'DepositReserveAsset';
      value: {
        assets: XcmV2MultiassetMultiAssetFilter;
        maxAssets: number;
        dest: XcmV2MultilocationMultiLocation;
        xcm: XcmV2Xcm;
      };
    }
  | { type: 'ExchangeAsset'; value: { give: XcmV2MultiassetMultiAssetFilter; receive: XcmV2MultiassetMultiAssets } }
  | {
      type: 'InitiateReserveWithdraw';
      value: { assets: XcmV2MultiassetMultiAssetFilter; reserve: XcmV2MultilocationMultiLocation; xcm: XcmV2Xcm };
    }
  | {
      type: 'InitiateTeleport';
      value: { assets: XcmV2MultiassetMultiAssetFilter; dest: XcmV2MultilocationMultiLocation; xcm: XcmV2Xcm };
    }
  | {
      type: 'QueryHolding';
      value: {
        queryId: bigint;
        dest: XcmV2MultilocationMultiLocation;
        assets: XcmV2MultiassetMultiAssetFilter;
        maxResponseWeight: bigint;
      };
    }
  | { type: 'BuyExecution'; value: { fees: XcmV2MultiassetMultiAsset; weightLimit: XcmV2WeightLimit } }
  | { type: 'RefundSurplus' }
  | { type: 'SetErrorHandler'; value: XcmV2Xcm }
  | { type: 'SetAppendix'; value: XcmV2Xcm }
  | { type: 'ClearError' }
  | { type: 'ClaimAsset'; value: { assets: XcmV2MultiassetMultiAssets; ticket: XcmV2MultilocationMultiLocation } }
  | { type: 'Trap'; value: bigint }
  | { type: 'SubscribeVersion'; value: { queryId: bigint; maxResponseWeight: bigint } }
  | { type: 'UnsubscribeVersion' };

export type XcmV2OriginKind = 'Native' | 'SovereignAccount' | 'Superuser' | 'Xcm';

export type XcmV2MultiassetMultiAssetFilter =
  | { type: 'Definite'; value: XcmV2MultiassetMultiAssets }
  | { type: 'Wild'; value: XcmV2MultiassetWildMultiAsset };

export type XcmV2MultiassetWildMultiAsset =
  | { type: 'All' }
  | { type: 'AllOf'; value: { id: XcmV2MultiassetAssetId; fun: XcmV2MultiassetWildFungibility } };

export type XcmV2MultiassetWildFungibility = 'Fungible' | 'NonFungible';

export type XcmV2WeightLimit = { type: 'Unlimited' } | { type: 'Limited'; value: bigint };

export type XcmV3Xcm = Array<XcmV3Instruction>;

export type XcmV3Instruction =
  | { type: 'WithdrawAsset'; value: XcmV3MultiassetMultiAssets }
  | { type: 'ReserveAssetDeposited'; value: XcmV3MultiassetMultiAssets }
  | { type: 'ReceiveTeleportedAsset'; value: XcmV3MultiassetMultiAssets }
  | {
      type: 'QueryResponse';
      value: {
        queryId: bigint;
        response: XcmV3Response;
        maxWeight: SpWeightsWeightV2Weight;
        querier?: StagingXcmV3MultilocationMultiLocation | undefined;
      };
    }
  | {
      type: 'TransferAsset';
      value: { assets: XcmV3MultiassetMultiAssets; beneficiary: StagingXcmV3MultilocationMultiLocation };
    }
  | {
      type: 'TransferReserveAsset';
      value: { assets: XcmV3MultiassetMultiAssets; dest: StagingXcmV3MultilocationMultiLocation; xcm: XcmV3Xcm };
    }
  | {
      type: 'Transact';
      value: { originKind: XcmV3OriginKind; requireWeightAtMost: SpWeightsWeightV2Weight; call: XcmDoubleEncoded };
    }
  | { type: 'HrmpNewChannelOpenRequest'; value: { sender: number; maxMessageSize: number; maxCapacity: number } }
  | { type: 'HrmpChannelAccepted'; value: { recipient: number } }
  | { type: 'HrmpChannelClosing'; value: { initiator: number; sender: number; recipient: number } }
  | { type: 'ClearOrigin' }
  | { type: 'DescendOrigin'; value: XcmV3Junctions }
  | { type: 'ReportError'; value: XcmV3QueryResponseInfo }
  | {
      type: 'DepositAsset';
      value: { assets: XcmV3MultiassetMultiAssetFilter; beneficiary: StagingXcmV3MultilocationMultiLocation };
    }
  | {
      type: 'DepositReserveAsset';
      value: { assets: XcmV3MultiassetMultiAssetFilter; dest: StagingXcmV3MultilocationMultiLocation; xcm: XcmV3Xcm };
    }
  | {
      type: 'ExchangeAsset';
      value: { give: XcmV3MultiassetMultiAssetFilter; want: XcmV3MultiassetMultiAssets; maximal: boolean };
    }
  | {
      type: 'InitiateReserveWithdraw';
      value: {
        assets: XcmV3MultiassetMultiAssetFilter;
        reserve: StagingXcmV3MultilocationMultiLocation;
        xcm: XcmV3Xcm;
      };
    }
  | {
      type: 'InitiateTeleport';
      value: { assets: XcmV3MultiassetMultiAssetFilter; dest: StagingXcmV3MultilocationMultiLocation; xcm: XcmV3Xcm };
    }
  | { type: 'ReportHolding'; value: { responseInfo: XcmV3QueryResponseInfo; assets: XcmV3MultiassetMultiAssetFilter } }
  | { type: 'BuyExecution'; value: { fees: XcmV3MultiassetMultiAsset; weightLimit: XcmV3WeightLimit } }
  | { type: 'RefundSurplus' }
  | { type: 'SetErrorHandler'; value: XcmV3Xcm }
  | { type: 'SetAppendix'; value: XcmV3Xcm }
  | { type: 'ClearError' }
  | {
      type: 'ClaimAsset';
      value: { assets: XcmV3MultiassetMultiAssets; ticket: StagingXcmV3MultilocationMultiLocation };
    }
  | { type: 'Trap'; value: bigint }
  | { type: 'SubscribeVersion'; value: { queryId: bigint; maxResponseWeight: SpWeightsWeightV2Weight } }
  | { type: 'UnsubscribeVersion' }
  | { type: 'BurnAsset'; value: XcmV3MultiassetMultiAssets }
  | { type: 'ExpectAsset'; value: XcmV3MultiassetMultiAssets }
  | { type: 'ExpectOrigin'; value?: StagingXcmV3MultilocationMultiLocation | undefined }
  | { type: 'ExpectError'; value?: [number, XcmV3TraitsError] | undefined }
  | { type: 'ExpectTransactStatus'; value: XcmV3MaybeErrorCode }
  | { type: 'QueryPallet'; value: { moduleName: Bytes; responseInfo: XcmV3QueryResponseInfo } }
  | {
      type: 'ExpectPallet';
      value: { index: number; name: Bytes; moduleName: Bytes; crateMajor: number; minCrateMinor: number };
    }
  | { type: 'ReportTransactStatus'; value: XcmV3QueryResponseInfo }
  | { type: 'ClearTransactStatus' }
  | { type: 'UniversalOrigin'; value: XcmV3Junction }
  | { type: 'ExportMessage'; value: { network: XcmV3JunctionNetworkId; destination: XcmV3Junctions; xcm: XcmV3Xcm } }
  | { type: 'LockAsset'; value: { asset: XcmV3MultiassetMultiAsset; unlocker: StagingXcmV3MultilocationMultiLocation } }
  | { type: 'UnlockAsset'; value: { asset: XcmV3MultiassetMultiAsset; target: StagingXcmV3MultilocationMultiLocation } }
  | {
      type: 'NoteUnlockable';
      value: { asset: XcmV3MultiassetMultiAsset; owner: StagingXcmV3MultilocationMultiLocation };
    }
  | {
      type: 'RequestUnlock';
      value: { asset: XcmV3MultiassetMultiAsset; locker: StagingXcmV3MultilocationMultiLocation };
    }
  | { type: 'SetFeesMode'; value: { jitWithdraw: boolean } }
  | { type: 'SetTopic'; value: FixedBytes<32> }
  | { type: 'ClearTopic' }
  | { type: 'AliasOrigin'; value: StagingXcmV3MultilocationMultiLocation }
  | {
      type: 'UnpaidExecution';
      value: { weightLimit: XcmV3WeightLimit; checkOrigin?: StagingXcmV3MultilocationMultiLocation | undefined };
    };

export type XcmV3QueryResponseInfo = {
  destination: StagingXcmV3MultilocationMultiLocation;
  queryId: bigint;
  maxWeight: SpWeightsWeightV2Weight;
};

export type XcmV3MultiassetMultiAssetFilter =
  | { type: 'Definite'; value: XcmV3MultiassetMultiAssets }
  | { type: 'Wild'; value: XcmV3MultiassetWildMultiAsset };

export type XcmV3MultiassetWildMultiAsset =
  | { type: 'All' }
  | { type: 'AllOf'; value: { id: XcmV3MultiassetAssetId; fun: XcmV3MultiassetWildFungibility } }
  | { type: 'AllCounted'; value: number }
  | { type: 'AllOfCounted'; value: { id: XcmV3MultiassetAssetId; fun: XcmV3MultiassetWildFungibility; count: number } };

export type XcmV3MultiassetWildFungibility = 'Fungible' | 'NonFungible';

export type StagingXcmExecutorAssetTransferTransferType =
  | { type: 'Teleport' }
  | { type: 'LocalReserve' }
  | { type: 'DestinationReserve' }
  | { type: 'RemoteReserve'; value: XcmVersionedLocation };

/**
 * The `Error` enum of this pallet.
 **/
export type PalletXcmError =
  /**
   * The desired destination was unreachable, generally because there is a no way of routing
   * to it.
   **/
  | 'Unreachable'
  /**
   * There was some other issue (i.e. not to do with routing) in sending the message.
   * Perhaps a lack of space for buffering the message.
   **/
  | 'SendFailure'
  /**
   * The message execution fails the filter.
   **/
  | 'Filtered'
  /**
   * The message's weight could not be determined.
   **/
  | 'UnweighableMessage'
  /**
   * The destination `Location` provided cannot be inverted.
   **/
  | 'DestinationNotInvertible'
  /**
   * The assets to be sent are empty.
   **/
  | 'Empty'
  /**
   * Could not re-anchor the assets to declare the fees for the destination chain.
   **/
  | 'CannotReanchor'
  /**
   * Too many assets have been attempted for transfer.
   **/
  | 'TooManyAssets'
  /**
   * Origin is invalid for sending.
   **/
  | 'InvalidOrigin'
  /**
   * The version of the `Versioned` value used is not able to be interpreted.
   **/
  | 'BadVersion'
  /**
   * The given location could not be used (e.g. because it cannot be expressed in the
   * desired version of XCM).
   **/
  | 'BadLocation'
  /**
   * The referenced subscription could not be found.
   **/
  | 'NoSubscription'
  /**
   * The location is invalid since it already has a subscription from us.
   **/
  | 'AlreadySubscribed'
  /**
   * Could not check-out the assets for teleportation to the destination chain.
   **/
  | 'CannotCheckOutTeleport'
  /**
   * The owner does not own (all) of the asset that they wish to do the operation on.
   **/
  | 'LowBalance'
  /**
   * The asset owner has too many locks on the asset.
   **/
  | 'TooManyLocks'
  /**
   * The given account is not an identifiable sovereign account for any location.
   **/
  | 'AccountNotSovereign'
  /**
   * The operation required fees to be paid which the initiator could not meet.
   **/
  | 'FeesNotMet'
  /**
   * A remote lock with the corresponding data could not be found.
   **/
  | 'LockNotFound'
  /**
   * The unlock operation cannot succeed because there are still consumers of the lock.
   **/
  | 'InUse'
  /**
   * Invalid asset, reserve chain could not be determined for it.
   **/
  | 'InvalidAssetUnknownReserve'
  /**
   * Invalid asset, do not support remote asset reserves with different fees reserves.
   **/
  | 'InvalidAssetUnsupportedReserve'
  /**
   * Too many assets with different reserve locations have been attempted for transfer.
   **/
  | 'TooManyReserves'
  /**
   * Local XCM execution incomplete.
   **/
  | 'LocalExecutionIncomplete';

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type CumulusPalletXcmCall = null;

export type CumulusPalletXcmCallLike = null;

export type BpXcmBridgeHubRouterBridgeState = { deliveryFeeFactor: FixedU128; isCongested: boolean };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletXcmBridgeHubRouterCall =
  /**
   * Notification about congested bridge queue.
   **/
  { name: 'ReportBridgeStatus'; params: { bridgeId: H256; isCongested: boolean } };

export type PalletXcmBridgeHubRouterCallLike =
  /**
   * Notification about congested bridge queue.
   **/
  { name: 'ReportBridgeStatus'; params: { bridgeId: H256; isCongested: boolean } };

export type PalletMessageQueueBookState = {
  begin: number;
  end: number;
  count: number;
  readyNeighbours?: PalletMessageQueueNeighbours | undefined;
  messageCount: bigint;
  size: bigint;
};

export type PalletMessageQueueNeighbours = {
  prev: CumulusPrimitivesCoreAggregateMessageOrigin;
  next: CumulusPrimitivesCoreAggregateMessageOrigin;
};

export type PalletMessageQueuePage = {
  remaining: number;
  remainingSize: number;
  firstIndex: number;
  first: number;
  last: number;
  heap: Bytes;
};

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletMessageQueueCall =
  /**
   * Remove a page which has no more messages remaining to be processed or is stale.
   **/
  | { name: 'ReapPage'; params: { messageOrigin: CumulusPrimitivesCoreAggregateMessageOrigin; pageIndex: number } }
  /**
   * Execute an overweight message.
   *
   * Temporary processing errors will be propagated whereas permanent errors are treated
   * as success condition.
   *
   * - `origin`: Must be `Signed`.
   * - `message_origin`: The origin from which the message to be executed arrived.
   * - `page`: The page in the queue in which the message to be executed is sitting.
   * - `index`: The index into the queue of the message to be executed.
   * - `weight_limit`: The maximum amount of weight allowed to be consumed in the execution
   * of the message.
   *
   * Benchmark complexity considerations: O(index + weight_limit).
   **/
  | {
      name: 'ExecuteOverweight';
      params: {
        messageOrigin: CumulusPrimitivesCoreAggregateMessageOrigin;
        page: number;
        index: number;
        weightLimit: SpWeightsWeightV2Weight;
      };
    };

export type PalletMessageQueueCallLike =
  /**
   * Remove a page which has no more messages remaining to be processed or is stale.
   **/
  | { name: 'ReapPage'; params: { messageOrigin: CumulusPrimitivesCoreAggregateMessageOrigin; pageIndex: number } }
  /**
   * Execute an overweight message.
   *
   * Temporary processing errors will be propagated whereas permanent errors are treated
   * as success condition.
   *
   * - `origin`: Must be `Signed`.
   * - `message_origin`: The origin from which the message to be executed arrived.
   * - `page`: The page in the queue in which the message to be executed is sitting.
   * - `index`: The index into the queue of the message to be executed.
   * - `weight_limit`: The maximum amount of weight allowed to be consumed in the execution
   * of the message.
   *
   * Benchmark complexity considerations: O(index + weight_limit).
   **/
  | {
      name: 'ExecuteOverweight';
      params: {
        messageOrigin: CumulusPrimitivesCoreAggregateMessageOrigin;
        page: number;
        index: number;
        weightLimit: SpWeightsWeightV2Weight;
      };
    };

/**
 * The `Error` enum of this pallet.
 **/
export type PalletMessageQueueError =
  /**
   * Page is not reapable because it has items remaining to be processed and is not old
   * enough.
   **/
  | 'NotReapable'
  /**
   * Page to be reaped does not exist.
   **/
  | 'NoPage'
  /**
   * The referenced message could not be found.
   **/
  | 'NoMessage'
  /**
   * The message was already processed and cannot be processed again.
   **/
  | 'AlreadyProcessed'
  /**
   * The message is queued for future execution.
   **/
  | 'Queued'
  /**
   * There is temporarily not enough weight to continue servicing messages.
   **/
  | 'InsufficientWeight'
  /**
   * This message is temporarily unprocessable.
   *
   * Such errors are expected, but not guaranteed, to resolve themselves eventually through
   * retrying.
   **/
  | 'TemporarilyUnprocessable'
  /**
   * The queue is paused and no message can be executed from it.
   *
   * This can change at any time and may resolve in the future by re-trying.
   **/
  | 'QueuePaused'
  /**
   * Another call is in progress and needs to finish before this call can happen.
   **/
  | 'RecursiveDisallowed';

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletUtilityCall =
  /**
   * Send a batch of dispatch calls.
   *
   * May be called from any origin except `None`.
   *
   * - `calls`: The calls to be dispatched from the same origin. The number of call must not
   * exceed the constant: `batched_calls_limit` (available in constant metadata).
   *
   * If origin is root then the calls are dispatched without checking origin filter. (This
   * includes bypassing `frame_system::Config::BaseCallFilter`).
   *
   * ## Complexity
   * - O(C) where C is the number of calls to be batched.
   *
   * This will return `Ok` in all circumstances. To determine the success of the batch, an
   * event is deposited. If a call failed and the batch was interrupted, then the
   * `BatchInterrupted` event is deposited, along with the number of successful calls made
   * and the error of the failed call. If all were successful, then the `BatchCompleted`
   * event is deposited.
   **/
  | { name: 'Batch'; params: { calls: Array<AssetHubKusamaRuntimeRuntimeCall> } }
  /**
   * Send a call through an indexed pseudonym of the sender.
   *
   * Filter from origin are passed along. The call will be dispatched with an origin which
   * use the same filter as the origin of this call.
   *
   * NOTE: If you need to ensure that any account-based filtering is not honored (i.e.
   * because you expect `proxy` to have been used prior in the call stack and you do not want
   * the call restrictions to apply to any sub-accounts), then use `as_multi_threshold_1`
   * in the Multisig pallet instead.
   *
   * NOTE: Prior to version *12, this was called `as_limited_sub`.
   *
   * The dispatch origin for this call must be _Signed_.
   **/
  | { name: 'AsDerivative'; params: { index: number; call: AssetHubKusamaRuntimeRuntimeCall } }
  /**
   * Send a batch of dispatch calls and atomically execute them.
   * The whole transaction will rollback and fail if any of the calls failed.
   *
   * May be called from any origin except `None`.
   *
   * - `calls`: The calls to be dispatched from the same origin. The number of call must not
   * exceed the constant: `batched_calls_limit` (available in constant metadata).
   *
   * If origin is root then the calls are dispatched without checking origin filter. (This
   * includes bypassing `frame_system::Config::BaseCallFilter`).
   *
   * ## Complexity
   * - O(C) where C is the number of calls to be batched.
   **/
  | { name: 'BatchAll'; params: { calls: Array<AssetHubKusamaRuntimeRuntimeCall> } }
  /**
   * Dispatches a function call with a provided origin.
   *
   * The dispatch origin for this call must be _Root_.
   *
   * ## Complexity
   * - O(1).
   **/
  | {
      name: 'DispatchAs';
      params: { asOrigin: AssetHubKusamaRuntimeOriginCaller; call: AssetHubKusamaRuntimeRuntimeCall };
    }
  /**
   * Send a batch of dispatch calls.
   * Unlike `batch`, it allows errors and won't interrupt.
   *
   * May be called from any origin except `None`.
   *
   * - `calls`: The calls to be dispatched from the same origin. The number of call must not
   * exceed the constant: `batched_calls_limit` (available in constant metadata).
   *
   * If origin is root then the calls are dispatch without checking origin filter. (This
   * includes bypassing `frame_system::Config::BaseCallFilter`).
   *
   * ## Complexity
   * - O(C) where C is the number of calls to be batched.
   **/
  | { name: 'ForceBatch'; params: { calls: Array<AssetHubKusamaRuntimeRuntimeCall> } }
  /**
   * Dispatch a function call with a specified weight.
   *
   * This function does not check the weight of the call, and instead allows the
   * Root origin to specify the weight of the call.
   *
   * The dispatch origin for this call must be _Root_.
   **/
  | { name: 'WithWeight'; params: { call: AssetHubKusamaRuntimeRuntimeCall; weight: SpWeightsWeightV2Weight } };

export type PalletUtilityCallLike =
  /**
   * Send a batch of dispatch calls.
   *
   * May be called from any origin except `None`.
   *
   * - `calls`: The calls to be dispatched from the same origin. The number of call must not
   * exceed the constant: `batched_calls_limit` (available in constant metadata).
   *
   * If origin is root then the calls are dispatched without checking origin filter. (This
   * includes bypassing `frame_system::Config::BaseCallFilter`).
   *
   * ## Complexity
   * - O(C) where C is the number of calls to be batched.
   *
   * This will return `Ok` in all circumstances. To determine the success of the batch, an
   * event is deposited. If a call failed and the batch was interrupted, then the
   * `BatchInterrupted` event is deposited, along with the number of successful calls made
   * and the error of the failed call. If all were successful, then the `BatchCompleted`
   * event is deposited.
   **/
  | { name: 'Batch'; params: { calls: Array<AssetHubKusamaRuntimeRuntimeCallLike> } }
  /**
   * Send a call through an indexed pseudonym of the sender.
   *
   * Filter from origin are passed along. The call will be dispatched with an origin which
   * use the same filter as the origin of this call.
   *
   * NOTE: If you need to ensure that any account-based filtering is not honored (i.e.
   * because you expect `proxy` to have been used prior in the call stack and you do not want
   * the call restrictions to apply to any sub-accounts), then use `as_multi_threshold_1`
   * in the Multisig pallet instead.
   *
   * NOTE: Prior to version *12, this was called `as_limited_sub`.
   *
   * The dispatch origin for this call must be _Signed_.
   **/
  | { name: 'AsDerivative'; params: { index: number; call: AssetHubKusamaRuntimeRuntimeCallLike } }
  /**
   * Send a batch of dispatch calls and atomically execute them.
   * The whole transaction will rollback and fail if any of the calls failed.
   *
   * May be called from any origin except `None`.
   *
   * - `calls`: The calls to be dispatched from the same origin. The number of call must not
   * exceed the constant: `batched_calls_limit` (available in constant metadata).
   *
   * If origin is root then the calls are dispatched without checking origin filter. (This
   * includes bypassing `frame_system::Config::BaseCallFilter`).
   *
   * ## Complexity
   * - O(C) where C is the number of calls to be batched.
   **/
  | { name: 'BatchAll'; params: { calls: Array<AssetHubKusamaRuntimeRuntimeCallLike> } }
  /**
   * Dispatches a function call with a provided origin.
   *
   * The dispatch origin for this call must be _Root_.
   *
   * ## Complexity
   * - O(1).
   **/
  | {
      name: 'DispatchAs';
      params: { asOrigin: AssetHubKusamaRuntimeOriginCaller; call: AssetHubKusamaRuntimeRuntimeCallLike };
    }
  /**
   * Send a batch of dispatch calls.
   * Unlike `batch`, it allows errors and won't interrupt.
   *
   * May be called from any origin except `None`.
   *
   * - `calls`: The calls to be dispatched from the same origin. The number of call must not
   * exceed the constant: `batched_calls_limit` (available in constant metadata).
   *
   * If origin is root then the calls are dispatch without checking origin filter. (This
   * includes bypassing `frame_system::Config::BaseCallFilter`).
   *
   * ## Complexity
   * - O(C) where C is the number of calls to be batched.
   **/
  | { name: 'ForceBatch'; params: { calls: Array<AssetHubKusamaRuntimeRuntimeCallLike> } }
  /**
   * Dispatch a function call with a specified weight.
   *
   * This function does not check the weight of the call, and instead allows the
   * Root origin to specify the weight of the call.
   *
   * The dispatch origin for this call must be _Root_.
   **/
  | { name: 'WithWeight'; params: { call: AssetHubKusamaRuntimeRuntimeCallLike; weight: SpWeightsWeightV2Weight } };

export type AssetHubKusamaRuntimeRuntimeCall =
  | { pallet: 'System'; palletCall: FrameSystemCall }
  | { pallet: 'ParachainSystem'; palletCall: CumulusPalletParachainSystemCall }
  | { pallet: 'Timestamp'; palletCall: PalletTimestampCall }
  | { pallet: 'ParachainInfo'; palletCall: StagingParachainInfoCall }
  | { pallet: 'Balances'; palletCall: PalletBalancesCall }
  | { pallet: 'Vesting'; palletCall: PalletVestingCall }
  | { pallet: 'CollatorSelection'; palletCall: PalletCollatorSelectionCall }
  | { pallet: 'Session'; palletCall: PalletSessionCall }
  | { pallet: 'XcmpQueue'; palletCall: CumulusPalletXcmpQueueCall }
  | { pallet: 'PolkadotXcm'; palletCall: PalletXcmCall }
  | { pallet: 'CumulusXcm'; palletCall: CumulusPalletXcmCall }
  | { pallet: 'ToPolkadotXcmRouter'; palletCall: PalletXcmBridgeHubRouterCall }
  | { pallet: 'MessageQueue'; palletCall: PalletMessageQueueCall }
  | { pallet: 'Utility'; palletCall: PalletUtilityCall }
  | { pallet: 'Multisig'; palletCall: PalletMultisigCall }
  | { pallet: 'Proxy'; palletCall: PalletProxyCall }
  | { pallet: 'Assets'; palletCall: PalletAssetsCall }
  | { pallet: 'Uniques'; palletCall: PalletUniquesCall }
  | { pallet: 'Nfts'; palletCall: PalletNftsCall }
  | { pallet: 'ForeignAssets'; palletCall: PalletAssetsCall002 }
  | { pallet: 'NftFractionalization'; palletCall: PalletNftFractionalizationCall }
  | { pallet: 'PoolAssets'; palletCall: PalletAssetsCall003 }
  | { pallet: 'AssetConversion'; palletCall: PalletAssetConversionCall };

export type AssetHubKusamaRuntimeRuntimeCallLike =
  | { pallet: 'System'; palletCall: FrameSystemCallLike }
  | { pallet: 'ParachainSystem'; palletCall: CumulusPalletParachainSystemCallLike }
  | { pallet: 'Timestamp'; palletCall: PalletTimestampCallLike }
  | { pallet: 'ParachainInfo'; palletCall: StagingParachainInfoCallLike }
  | { pallet: 'Balances'; palletCall: PalletBalancesCallLike }
  | { pallet: 'Vesting'; palletCall: PalletVestingCallLike }
  | { pallet: 'CollatorSelection'; palletCall: PalletCollatorSelectionCallLike }
  | { pallet: 'Session'; palletCall: PalletSessionCallLike }
  | { pallet: 'XcmpQueue'; palletCall: CumulusPalletXcmpQueueCallLike }
  | { pallet: 'PolkadotXcm'; palletCall: PalletXcmCallLike }
  | { pallet: 'CumulusXcm'; palletCall: CumulusPalletXcmCallLike }
  | { pallet: 'ToPolkadotXcmRouter'; palletCall: PalletXcmBridgeHubRouterCallLike }
  | { pallet: 'MessageQueue'; palletCall: PalletMessageQueueCallLike }
  | { pallet: 'Utility'; palletCall: PalletUtilityCallLike }
  | { pallet: 'Multisig'; palletCall: PalletMultisigCallLike }
  | { pallet: 'Proxy'; palletCall: PalletProxyCallLike }
  | { pallet: 'Assets'; palletCall: PalletAssetsCallLike }
  | { pallet: 'Uniques'; palletCall: PalletUniquesCallLike }
  | { pallet: 'Nfts'; palletCall: PalletNftsCallLike }
  | { pallet: 'ForeignAssets'; palletCall: PalletAssetsCallLike002 }
  | { pallet: 'NftFractionalization'; palletCall: PalletNftFractionalizationCallLike }
  | { pallet: 'PoolAssets'; palletCall: PalletAssetsCallLike003 }
  | { pallet: 'AssetConversion'; palletCall: PalletAssetConversionCallLike };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletMultisigCall =
  /**
   * Immediately dispatch a multi-signature call using a single approval from the caller.
   *
   * The dispatch origin for this call must be _Signed_.
   *
   * - `other_signatories`: The accounts (other than the sender) who are part of the
   * multi-signature, but do not participate in the approval process.
   * - `call`: The call to be executed.
   *
   * Result is equivalent to the dispatched result.
   *
   * ## Complexity
   * O(Z + C) where Z is the length of the call and C its execution weight.
   **/
  | {
      name: 'AsMultiThreshold1';
      params: { otherSignatories: Array<AccountId32>; call: AssetHubKusamaRuntimeRuntimeCall };
    }
  /**
   * Register approval for a dispatch to be made from a deterministic composite account if
   * approved by a total of `threshold - 1` of `other_signatories`.
   *
   * If there are enough, then dispatch the call.
   *
   * Payment: `DepositBase` will be reserved if this is the first approval, plus
   * `threshold` times `DepositFactor`. It is returned once this dispatch happens or
   * is cancelled.
   *
   * The dispatch origin for this call must be _Signed_.
   *
   * - `threshold`: The total number of approvals for this dispatch before it is executed.
   * - `other_signatories`: The accounts (other than the sender) who can approve this
   * dispatch. May not be empty.
   * - `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is
   * not the first approval, then it must be `Some`, with the timepoint (block number and
   * transaction index) of the first approval transaction.
   * - `call`: The call to be executed.
   *
   * NOTE: Unless this is the final approval, you will generally want to use
   * `approve_as_multi` instead, since it only requires a hash of the call.
   *
   * Result is equivalent to the dispatched result if `threshold` is exactly `1`. Otherwise
   * on success, result is `Ok` and the result from the interior call, if it was executed,
   * may be found in the deposited `MultisigExecuted` event.
   *
   * ## Complexity
   * - `O(S + Z + Call)`.
   * - Up to one balance-reserve or unreserve operation.
   * - One passthrough operation, one insert, both `O(S)` where `S` is the number of
   * signatories. `S` is capped by `MaxSignatories`, with weight being proportional.
   * - One call encode & hash, both of complexity `O(Z)` where `Z` is tx-len.
   * - One encode & hash, both of complexity `O(S)`.
   * - Up to one binary search and insert (`O(logS + S)`).
   * - I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove.
   * - One event.
   * - The weight of the `call`.
   * - Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit
   * taken for its lifetime of `DepositBase + threshold * DepositFactor`.
   **/
  | {
      name: 'AsMulti';
      params: {
        threshold: number;
        otherSignatories: Array<AccountId32>;
        maybeTimepoint?: PalletMultisigTimepoint | undefined;
        call: AssetHubKusamaRuntimeRuntimeCall;
        maxWeight: SpWeightsWeightV2Weight;
      };
    }
  /**
   * Register approval for a dispatch to be made from a deterministic composite account if
   * approved by a total of `threshold - 1` of `other_signatories`.
   *
   * Payment: `DepositBase` will be reserved if this is the first approval, plus
   * `threshold` times `DepositFactor`. It is returned once this dispatch happens or
   * is cancelled.
   *
   * The dispatch origin for this call must be _Signed_.
   *
   * - `threshold`: The total number of approvals for this dispatch before it is executed.
   * - `other_signatories`: The accounts (other than the sender) who can approve this
   * dispatch. May not be empty.
   * - `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is
   * not the first approval, then it must be `Some`, with the timepoint (block number and
   * transaction index) of the first approval transaction.
   * - `call_hash`: The hash of the call to be executed.
   *
   * NOTE: If this is the final approval, you will want to use `as_multi` instead.
   *
   * ## Complexity
   * - `O(S)`.
   * - Up to one balance-reserve or unreserve operation.
   * - One passthrough operation, one insert, both `O(S)` where `S` is the number of
   * signatories. `S` is capped by `MaxSignatories`, with weight being proportional.
   * - One encode & hash, both of complexity `O(S)`.
   * - Up to one binary search and insert (`O(logS + S)`).
   * - I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove.
   * - One event.
   * - Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit
   * taken for its lifetime of `DepositBase + threshold * DepositFactor`.
   **/
  | {
      name: 'ApproveAsMulti';
      params: {
        threshold: number;
        otherSignatories: Array<AccountId32>;
        maybeTimepoint?: PalletMultisigTimepoint | undefined;
        callHash: FixedBytes<32>;
        maxWeight: SpWeightsWeightV2Weight;
      };
    }
  /**
   * Cancel a pre-existing, on-going multisig transaction. Any deposit reserved previously
   * for this operation will be unreserved on success.
   *
   * The dispatch origin for this call must be _Signed_.
   *
   * - `threshold`: The total number of approvals for this dispatch before it is executed.
   * - `other_signatories`: The accounts (other than the sender) who can approve this
   * dispatch. May not be empty.
   * - `timepoint`: The timepoint (block number and transaction index) of the first approval
   * transaction for this dispatch.
   * - `call_hash`: The hash of the call to be executed.
   *
   * ## Complexity
   * - `O(S)`.
   * - Up to one balance-reserve or unreserve operation.
   * - One passthrough operation, one insert, both `O(S)` where `S` is the number of
   * signatories. `S` is capped by `MaxSignatories`, with weight being proportional.
   * - One encode & hash, both of complexity `O(S)`.
   * - One event.
   * - I/O: 1 read `O(S)`, one remove.
   * - Storage: removes one item.
   **/
  | {
      name: 'CancelAsMulti';
      params: {
        threshold: number;
        otherSignatories: Array<AccountId32>;
        timepoint: PalletMultisigTimepoint;
        callHash: FixedBytes<32>;
      };
    };

export type PalletMultisigCallLike =
  /**
   * Immediately dispatch a multi-signature call using a single approval from the caller.
   *
   * The dispatch origin for this call must be _Signed_.
   *
   * - `other_signatories`: The accounts (other than the sender) who are part of the
   * multi-signature, but do not participate in the approval process.
   * - `call`: The call to be executed.
   *
   * Result is equivalent to the dispatched result.
   *
   * ## Complexity
   * O(Z + C) where Z is the length of the call and C its execution weight.
   **/
  | {
      name: 'AsMultiThreshold1';
      params: { otherSignatories: Array<AccountId32Like>; call: AssetHubKusamaRuntimeRuntimeCallLike };
    }
  /**
   * Register approval for a dispatch to be made from a deterministic composite account if
   * approved by a total of `threshold - 1` of `other_signatories`.
   *
   * If there are enough, then dispatch the call.
   *
   * Payment: `DepositBase` will be reserved if this is the first approval, plus
   * `threshold` times `DepositFactor`. It is returned once this dispatch happens or
   * is cancelled.
   *
   * The dispatch origin for this call must be _Signed_.
   *
   * - `threshold`: The total number of approvals for this dispatch before it is executed.
   * - `other_signatories`: The accounts (other than the sender) who can approve this
   * dispatch. May not be empty.
   * - `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is
   * not the first approval, then it must be `Some`, with the timepoint (block number and
   * transaction index) of the first approval transaction.
   * - `call`: The call to be executed.
   *
   * NOTE: Unless this is the final approval, you will generally want to use
   * `approve_as_multi` instead, since it only requires a hash of the call.
   *
   * Result is equivalent to the dispatched result if `threshold` is exactly `1`. Otherwise
   * on success, result is `Ok` and the result from the interior call, if it was executed,
   * may be found in the deposited `MultisigExecuted` event.
   *
   * ## Complexity
   * - `O(S + Z + Call)`.
   * - Up to one balance-reserve or unreserve operation.
   * - One passthrough operation, one insert, both `O(S)` where `S` is the number of
   * signatories. `S` is capped by `MaxSignatories`, with weight being proportional.
   * - One call encode & hash, both of complexity `O(Z)` where `Z` is tx-len.
   * - One encode & hash, both of complexity `O(S)`.
   * - Up to one binary search and insert (`O(logS + S)`).
   * - I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove.
   * - One event.
   * - The weight of the `call`.
   * - Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit
   * taken for its lifetime of `DepositBase + threshold * DepositFactor`.
   **/
  | {
      name: 'AsMulti';
      params: {
        threshold: number;
        otherSignatories: Array<AccountId32Like>;
        maybeTimepoint?: PalletMultisigTimepoint | undefined;
        call: AssetHubKusamaRuntimeRuntimeCallLike;
        maxWeight: SpWeightsWeightV2Weight;
      };
    }
  /**
   * Register approval for a dispatch to be made from a deterministic composite account if
   * approved by a total of `threshold - 1` of `other_signatories`.
   *
   * Payment: `DepositBase` will be reserved if this is the first approval, plus
   * `threshold` times `DepositFactor`. It is returned once this dispatch happens or
   * is cancelled.
   *
   * The dispatch origin for this call must be _Signed_.
   *
   * - `threshold`: The total number of approvals for this dispatch before it is executed.
   * - `other_signatories`: The accounts (other than the sender) who can approve this
   * dispatch. May not be empty.
   * - `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is
   * not the first approval, then it must be `Some`, with the timepoint (block number and
   * transaction index) of the first approval transaction.
   * - `call_hash`: The hash of the call to be executed.
   *
   * NOTE: If this is the final approval, you will want to use `as_multi` instead.
   *
   * ## Complexity
   * - `O(S)`.
   * - Up to one balance-reserve or unreserve operation.
   * - One passthrough operation, one insert, both `O(S)` where `S` is the number of
   * signatories. `S` is capped by `MaxSignatories`, with weight being proportional.
   * - One encode & hash, both of complexity `O(S)`.
   * - Up to one binary search and insert (`O(logS + S)`).
   * - I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove.
   * - One event.
   * - Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit
   * taken for its lifetime of `DepositBase + threshold * DepositFactor`.
   **/
  | {
      name: 'ApproveAsMulti';
      params: {
        threshold: number;
        otherSignatories: Array<AccountId32Like>;
        maybeTimepoint?: PalletMultisigTimepoint | undefined;
        callHash: FixedBytes<32>;
        maxWeight: SpWeightsWeightV2Weight;
      };
    }
  /**
   * Cancel a pre-existing, on-going multisig transaction. Any deposit reserved previously
   * for this operation will be unreserved on success.
   *
   * The dispatch origin for this call must be _Signed_.
   *
   * - `threshold`: The total number of approvals for this dispatch before it is executed.
   * - `other_signatories`: The accounts (other than the sender) who can approve this
   * dispatch. May not be empty.
   * - `timepoint`: The timepoint (block number and transaction index) of the first approval
   * transaction for this dispatch.
   * - `call_hash`: The hash of the call to be executed.
   *
   * ## Complexity
   * - `O(S)`.
   * - Up to one balance-reserve or unreserve operation.
   * - One passthrough operation, one insert, both `O(S)` where `S` is the number of
   * signatories. `S` is capped by `MaxSignatories`, with weight being proportional.
   * - One encode & hash, both of complexity `O(S)`.
   * - One event.
   * - I/O: 1 read `O(S)`, one remove.
   * - Storage: removes one item.
   **/
  | {
      name: 'CancelAsMulti';
      params: {
        threshold: number;
        otherSignatories: Array<AccountId32Like>;
        timepoint: PalletMultisigTimepoint;
        callHash: FixedBytes<32>;
      };
    };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletProxyCall =
  /**
   * Dispatch the given `call` from an account that the sender is authorised for through
   * `add_proxy`.
   *
   * The dispatch origin for this call must be _Signed_.
   *
   * Parameters:
   * - `real`: The account that the proxy will make a call on behalf of.
   * - `force_proxy_type`: Specify the exact proxy type to be used and checked for this call.
   * - `call`: The call to be made by the `real` account.
   **/
  | {
      name: 'Proxy';
      params: {
        real: MultiAddress;
        forceProxyType?: AssetHubKusamaRuntimeProxyType | undefined;
        call: AssetHubKusamaRuntimeRuntimeCall;
      };
    }
  /**
   * Register a proxy account for the sender that is able to make calls on its behalf.
   *
   * The dispatch origin for this call must be _Signed_.
   *
   * Parameters:
   * - `proxy`: The account that the `caller` would like to make a proxy.
   * - `proxy_type`: The permissions allowed for this proxy account.
   * - `delay`: The announcement period required of the initial proxy. Will generally be
   * zero.
   **/
  | { name: 'AddProxy'; params: { delegate: MultiAddress; proxyType: AssetHubKusamaRuntimeProxyType; delay: number } }
  /**
   * Unregister a proxy account for the sender.
   *
   * The dispatch origin for this call must be _Signed_.
   *
   * Parameters:
   * - `proxy`: The account that the `caller` would like to remove as a proxy.
   * - `proxy_type`: The permissions currently enabled for the removed proxy account.
   **/
  | {
      name: 'RemoveProxy';
      params: { delegate: MultiAddress; proxyType: AssetHubKusamaRuntimeProxyType; delay: number };
    }
  /**
   * Unregister all proxy accounts for the sender.
   *
   * The dispatch origin for this call must be _Signed_.
   *
   * WARNING: This may be called on accounts created by `pure`, however if done, then
   * the unreserved fees will be inaccessible. **All access to this account will be lost.**
   **/
  | { name: 'RemoveProxies' }
  /**
   * Spawn a fresh new account that is guaranteed to be otherwise inaccessible, and
   * initialize it with a proxy of `proxy_type` for `origin` sender.
   *
   * Requires a `Signed` origin.
   *
   * - `proxy_type`: The type of the proxy that the sender will be registered as over the
   * new account. This will almost always be the most permissive `ProxyType` possible to
   * allow for maximum flexibility.
   * - `index`: A disambiguation index, in case this is called multiple times in the same
   * transaction (e.g. with `utility::batch`). Unless you're using `batch` you probably just
   * want to use `0`.
   * - `delay`: The announcement period required of the initial proxy. Will generally be
   * zero.
   *
   * Fails with `Duplicate` if this has already been called in this transaction, from the
   * same sender, with the same parameters.
   *
   * Fails if there are insufficient funds to pay for deposit.
   **/
  | { name: 'CreatePure'; params: { proxyType: AssetHubKusamaRuntimeProxyType; delay: number; index: number } }
  /**
   * Removes a previously spawned pure proxy.
   *
   * WARNING: **All access to this account will be lost.** Any funds held in it will be
   * inaccessible.
   *
   * Requires a `Signed` origin, and the sender account must have been created by a call to
   * `pure` with corresponding parameters.
   *
   * - `spawner`: The account that originally called `pure` to create this account.
   * - `index`: The disambiguation index originally passed to `pure`. Probably `0`.
   * - `proxy_type`: The proxy type originally passed to `pure`.
   * - `height`: The height of the chain when the call to `pure` was processed.
   * - `ext_index`: The extrinsic index in which the call to `pure` was processed.
   *
   * Fails with `NoPermission` in case the caller is not a previously created pure
   * account whose `pure` call has corresponding parameters.
   **/
  | {
      name: 'KillPure';
      params: {
        spawner: MultiAddress;
        proxyType: AssetHubKusamaRuntimeProxyType;
        index: number;
        height: number;
        extIndex: number;
      };
    }
  /**
   * Publish the hash of a proxy-call that will be made in the future.
   *
   * This must be called some number of blocks before the corresponding `proxy` is attempted
   * if the delay associated with the proxy relationship is greater than zero.
   *
   * No more than `MaxPending` announcements may be made at any one time.
   *
   * This will take a deposit of `AnnouncementDepositFactor` as well as
   * `AnnouncementDepositBase` if there are no other pending announcements.
   *
   * The dispatch origin for this call must be _Signed_ and a proxy of `real`.
   *
   * Parameters:
   * - `real`: The account that the proxy will make a call on behalf of.
   * - `call_hash`: The hash of the call to be made by the `real` account.
   **/
  | { name: 'Announce'; params: { real: MultiAddress; callHash: H256 } }
  /**
   * Remove a given announcement.
   *
   * May be called by a proxy account to remove a call they previously announced and return
   * the deposit.
   *
   * The dispatch origin for this call must be _Signed_.
   *
   * Parameters:
   * - `real`: The account that the proxy will make a call on behalf of.
   * - `call_hash`: The hash of the call to be made by the `real` account.
   **/
  | { name: 'RemoveAnnouncement'; params: { real: MultiAddress; callHash: H256 } }
  /**
   * Remove the given announcement of a delegate.
   *
   * May be called by a target (proxied) account to remove a call that one of their delegates
   * (`delegate`) has announced they want to execute. The deposit is returned.
   *
   * The dispatch origin for this call must be _Signed_.
   *
   * Parameters:
   * - `delegate`: The account that previously announced the call.
   * - `call_hash`: The hash of the call to be made.
   **/
  | { name: 'RejectAnnouncement'; params: { delegate: MultiAddress; callHash: H256 } }
  /**
   * Dispatch the given `call` from an account that the sender is authorized for through
   * `add_proxy`.
   *
   * Removes any corresponding announcement(s).
   *
   * The dispatch origin for this call must be _Signed_.
   *
   * Parameters:
   * - `real`: The account that the proxy will make a call on behalf of.
   * - `force_proxy_type`: Specify the exact proxy type to be used and checked for this call.
   * - `call`: The call to be made by the `real` account.
   **/
  | {
      name: 'ProxyAnnounced';
      params: {
        delegate: MultiAddress;
        real: MultiAddress;
        forceProxyType?: AssetHubKusamaRuntimeProxyType | undefined;
        call: AssetHubKusamaRuntimeRuntimeCall;
      };
    };

export type PalletProxyCallLike =
  /**
   * Dispatch the given `call` from an account that the sender is authorised for through
   * `add_proxy`.
   *
   * The dispatch origin for this call must be _Signed_.
   *
   * Parameters:
   * - `real`: The account that the proxy will make a call on behalf of.
   * - `force_proxy_type`: Specify the exact proxy type to be used and checked for this call.
   * - `call`: The call to be made by the `real` account.
   **/
  | {
      name: 'Proxy';
      params: {
        real: MultiAddressLike;
        forceProxyType?: AssetHubKusamaRuntimeProxyType | undefined;
        call: AssetHubKusamaRuntimeRuntimeCallLike;
      };
    }
  /**
   * Register a proxy account for the sender that is able to make calls on its behalf.
   *
   * The dispatch origin for this call must be _Signed_.
   *
   * Parameters:
   * - `proxy`: The account that the `caller` would like to make a proxy.
   * - `proxy_type`: The permissions allowed for this proxy account.
   * - `delay`: The announcement period required of the initial proxy. Will generally be
   * zero.
   **/
  | {
      name: 'AddProxy';
      params: { delegate: MultiAddressLike; proxyType: AssetHubKusamaRuntimeProxyType; delay: number };
    }
  /**
   * Unregister a proxy account for the sender.
   *
   * The dispatch origin for this call must be _Signed_.
   *
   * Parameters:
   * - `proxy`: The account that the `caller` would like to remove as a proxy.
   * - `proxy_type`: The permissions currently enabled for the removed proxy account.
   **/
  | {
      name: 'RemoveProxy';
      params: { delegate: MultiAddressLike; proxyType: AssetHubKusamaRuntimeProxyType; delay: number };
    }
  /**
   * Unregister all proxy accounts for the sender.
   *
   * The dispatch origin for this call must be _Signed_.
   *
   * WARNING: This may be called on accounts created by `pure`, however if done, then
   * the unreserved fees will be inaccessible. **All access to this account will be lost.**
   **/
  | { name: 'RemoveProxies' }
  /**
   * Spawn a fresh new account that is guaranteed to be otherwise inaccessible, and
   * initialize it with a proxy of `proxy_type` for `origin` sender.
   *
   * Requires a `Signed` origin.
   *
   * - `proxy_type`: The type of the proxy that the sender will be registered as over the
   * new account. This will almost always be the most permissive `ProxyType` possible to
   * allow for maximum flexibility.
   * - `index`: A disambiguation index, in case this is called multiple times in the same
   * transaction (e.g. with `utility::batch`). Unless you're using `batch` you probably just
   * want to use `0`.
   * - `delay`: The announcement period required of the initial proxy. Will generally be
   * zero.
   *
   * Fails with `Duplicate` if this has already been called in this transaction, from the
   * same sender, with the same parameters.
   *
   * Fails if there are insufficient funds to pay for deposit.
   **/
  | { name: 'CreatePure'; params: { proxyType: AssetHubKusamaRuntimeProxyType; delay: number; index: number } }
  /**
   * Removes a previously spawned pure proxy.
   *
   * WARNING: **All access to this account will be lost.** Any funds held in it will be
   * inaccessible.
   *
   * Requires a `Signed` origin, and the sender account must have been created by a call to
   * `pure` with corresponding parameters.
   *
   * - `spawner`: The account that originally called `pure` to create this account.
   * - `index`: The disambiguation index originally passed to `pure`. Probably `0`.
   * - `proxy_type`: The proxy type originally passed to `pure`.
   * - `height`: The height of the chain when the call to `pure` was processed.
   * - `ext_index`: The extrinsic index in which the call to `pure` was processed.
   *
   * Fails with `NoPermission` in case the caller is not a previously created pure
   * account whose `pure` call has corresponding parameters.
   **/
  | {
      name: 'KillPure';
      params: {
        spawner: MultiAddressLike;
        proxyType: AssetHubKusamaRuntimeProxyType;
        index: number;
        height: number;
        extIndex: number;
      };
    }
  /**
   * Publish the hash of a proxy-call that will be made in the future.
   *
   * This must be called some number of blocks before the corresponding `proxy` is attempted
   * if the delay associated with the proxy relationship is greater than zero.
   *
   * No more than `MaxPending` announcements may be made at any one time.
   *
   * This will take a deposit of `AnnouncementDepositFactor` as well as
   * `AnnouncementDepositBase` if there are no other pending announcements.
   *
   * The dispatch origin for this call must be _Signed_ and a proxy of `real`.
   *
   * Parameters:
   * - `real`: The account that the proxy will make a call on behalf of.
   * - `call_hash`: The hash of the call to be made by the `real` account.
   **/
  | { name: 'Announce'; params: { real: MultiAddressLike; callHash: H256 } }
  /**
   * Remove a given announcement.
   *
   * May be called by a proxy account to remove a call they previously announced and return
   * the deposit.
   *
   * The dispatch origin for this call must be _Signed_.
   *
   * Parameters:
   * - `real`: The account that the proxy will make a call on behalf of.
   * - `call_hash`: The hash of the call to be made by the `real` account.
   **/
  | { name: 'RemoveAnnouncement'; params: { real: MultiAddressLike; callHash: H256 } }
  /**
   * Remove the given announcement of a delegate.
   *
   * May be called by a target (proxied) account to remove a call that one of their delegates
   * (`delegate`) has announced they want to execute. The deposit is returned.
   *
   * The dispatch origin for this call must be _Signed_.
   *
   * Parameters:
   * - `delegate`: The account that previously announced the call.
   * - `call_hash`: The hash of the call to be made.
   **/
  | { name: 'RejectAnnouncement'; params: { delegate: MultiAddressLike; callHash: H256 } }
  /**
   * Dispatch the given `call` from an account that the sender is authorized for through
   * `add_proxy`.
   *
   * Removes any corresponding announcement(s).
   *
   * The dispatch origin for this call must be _Signed_.
   *
   * Parameters:
   * - `real`: The account that the proxy will make a call on behalf of.
   * - `force_proxy_type`: Specify the exact proxy type to be used and checked for this call.
   * - `call`: The call to be made by the `real` account.
   **/
  | {
      name: 'ProxyAnnounced';
      params: {
        delegate: MultiAddressLike;
        real: MultiAddressLike;
        forceProxyType?: AssetHubKusamaRuntimeProxyType | undefined;
        call: AssetHubKusamaRuntimeRuntimeCallLike;
      };
    };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletAssetsCall =
  /**
   * Issue a new class of fungible assets from a public origin.
   *
   * This new asset class has no assets initially and its owner is the origin.
   *
   * The origin must conform to the configured `CreateOrigin` and have sufficient funds free.
   *
   * Funds of sender are reserved by `AssetDeposit`.
   *
   * Parameters:
   * - `id`: The identifier of the new asset. This must not be currently in use to identify
   * an existing asset. If [`NextAssetId`] is set, then this must be equal to it.
   * - `admin`: The admin of this class of assets. The admin is the initial address of each
   * member of the asset class's admin team.
   * - `min_balance`: The minimum balance of this new asset that any single account must
   * have. If an account's balance is reduced below this, then it collapses to zero.
   *
   * Emits `Created` event when successful.
   *
   * Weight: `O(1)`
   **/
  | { name: 'Create'; params: { id: number; admin: MultiAddress; minBalance: bigint } }
  /**
   * Issue a new class of fungible assets from a privileged origin.
   *
   * This new asset class has no assets initially.
   *
   * The origin must conform to `ForceOrigin`.
   *
   * Unlike `create`, no funds are reserved.
   *
   * - `id`: The identifier of the new asset. This must not be currently in use to identify
   * an existing asset. If [`NextAssetId`] is set, then this must be equal to it.
   * - `owner`: The owner of this class of assets. The owner has full superuser permissions
   * over this asset, but may later change and configure the permissions using
   * `transfer_ownership` and `set_team`.
   * - `min_balance`: The minimum balance of this new asset that any single account must
   * have. If an account's balance is reduced below this, then it collapses to zero.
   *
   * Emits `ForceCreated` event when successful.
   *
   * Weight: `O(1)`
   **/
  | { name: 'ForceCreate'; params: { id: number; owner: MultiAddress; isSufficient: boolean; minBalance: bigint } }
  /**
   * Start the process of destroying a fungible asset class.
   *
   * `start_destroy` is the first in a series of extrinsics that should be called, to allow
   * destruction of an asset class.
   *
   * The origin must conform to `ForceOrigin` or must be `Signed` by the asset's `owner`.
   *
   * - `id`: The identifier of the asset to be destroyed. This must identify an existing
   * asset.
   *
   * The asset class must be frozen before calling `start_destroy`.
   **/
  | { name: 'StartDestroy'; params: { id: number } }
  /**
   * Destroy all accounts associated with a given asset.
   *
   * `destroy_accounts` should only be called after `start_destroy` has been called, and the
   * asset is in a `Destroying` state.
   *
   * Due to weight restrictions, this function may need to be called multiple times to fully
   * destroy all accounts. It will destroy `RemoveItemsLimit` accounts at a time.
   *
   * - `id`: The identifier of the asset to be destroyed. This must identify an existing
   * asset.
   *
   * Each call emits the `Event::DestroyedAccounts` event.
   **/
  | { name: 'DestroyAccounts'; params: { id: number } }
  /**
   * Destroy all approvals associated with a given asset up to the max (T::RemoveItemsLimit).
   *
   * `destroy_approvals` should only be called after `start_destroy` has been called, and the
   * asset is in a `Destroying` state.
   *
   * Due to weight restrictions, this function may need to be called multiple times to fully
   * destroy all approvals. It will destroy `RemoveItemsLimit` approvals at a time.
   *
   * - `id`: The identifier of the asset to be destroyed. This must identify an existing
   * asset.
   *
   * Each call emits the `Event::DestroyedApprovals` event.
   **/
  | { name: 'DestroyApprovals'; params: { id: number } }
  /**
   * Complete destroying asset and unreserve currency.
   *
   * `finish_destroy` should only be called after `start_destroy` has been called, and the
   * asset is in a `Destroying` state. All accounts or approvals should be destroyed before
   * hand.
   *
   * - `id`: The identifier of the asset to be destroyed. This must identify an existing
   * asset.
   *
   * Each successful call emits the `Event::Destroyed` event.
   **/
  | { name: 'FinishDestroy'; params: { id: number } }
  /**
   * Mint assets of a particular class.
   *
   * The origin must be Signed and the sender must be the Issuer of the asset `id`.
   *
   * - `id`: The identifier of the asset to have some amount minted.
   * - `beneficiary`: The account to be credited with the minted assets.
   * - `amount`: The amount of the asset to be minted.
   *
   * Emits `Issued` event when successful.
   *
   * Weight: `O(1)`
   * Modes: Pre-existing balance of `beneficiary`; Account pre-existence of `beneficiary`.
   **/
  | { name: 'Mint'; params: { id: number; beneficiary: MultiAddress; amount: bigint } }
  /**
   * Reduce the balance of `who` by as much as possible up to `amount` assets of `id`.
   *
   * Origin must be Signed and the sender should be the Manager of the asset `id`.
   *
   * Bails with `NoAccount` if the `who` is already dead.
   *
   * - `id`: The identifier of the asset to have some amount burned.
   * - `who`: The account to be debited from.
   * - `amount`: The maximum amount by which `who`'s balance should be reduced.
   *
   * Emits `Burned` with the actual amount burned. If this takes the balance to below the
   * minimum for the asset, then the amount burned is increased to take it to zero.
   *
   * Weight: `O(1)`
   * Modes: Post-existence of `who`; Pre & post Zombie-status of `who`.
   **/
  | { name: 'Burn'; params: { id: number; who: MultiAddress; amount: bigint } }
  /**
   * Move some assets from the sender account to another.
   *
   * Origin must be Signed.
   *
   * - `id`: The identifier of the asset to have some amount transferred.
   * - `target`: The account to be credited.
   * - `amount`: The amount by which the sender's balance of assets should be reduced and
   * `target`'s balance increased. The amount actually transferred may be slightly greater in
   * the case that the transfer would otherwise take the sender balance above zero but below
   * the minimum balance. Must be greater than zero.
   *
   * Emits `Transferred` with the actual amount transferred. If this takes the source balance
   * to below the minimum for the asset, then the amount transferred is increased to take it
   * to zero.
   *
   * Weight: `O(1)`
   * Modes: Pre-existence of `target`; Post-existence of sender; Account pre-existence of
   * `target`.
   **/
  | { name: 'Transfer'; params: { id: number; target: MultiAddress; amount: bigint } }
  /**
   * Move some assets from the sender account to another, keeping the sender account alive.
   *
   * Origin must be Signed.
   *
   * - `id`: The identifier of the asset to have some amount transferred.
   * - `target`: The account to be credited.
   * - `amount`: The amount by which the sender's balance of assets should be reduced and
   * `target`'s balance increased. The amount actually transferred may be slightly greater in
   * the case that the transfer would otherwise take the sender balance above zero but below
   * the minimum balance. Must be greater than zero.
   *
   * Emits `Transferred` with the actual amount transferred. If this takes the source balance
   * to below the minimum for the asset, then the amount transferred is increased to take it
   * to zero.
   *
   * Weight: `O(1)`
   * Modes: Pre-existence of `target`; Post-existence of sender; Account pre-existence of
   * `target`.
   **/
  | { name: 'TransferKeepAlive'; params: { id: number; target: MultiAddress; amount: bigint } }
  /**
   * Move some assets from one account to another.
   *
   * Origin must be Signed and the sender should be the Admin of the asset `id`.
   *
   * - `id`: The identifier of the asset to have some amount transferred.
   * - `source`: The account to be debited.
   * - `dest`: The account to be credited.
   * - `amount`: The amount by which the `source`'s balance of assets should be reduced and
   * `dest`'s balance increased. The amount actually transferred may be slightly greater in
   * the case that the transfer would otherwise take the `source` balance above zero but
   * below the minimum balance. Must be greater than zero.
   *
   * Emits `Transferred` with the actual amount transferred. If this takes the source balance
   * to below the minimum for the asset, then the amount transferred is increased to take it
   * to zero.
   *
   * Weight: `O(1)`
   * Modes: Pre-existence of `dest`; Post-existence of `source`; Account pre-existence of
   * `dest`.
   **/
  | { name: 'ForceTransfer'; params: { id: number; source: MultiAddress; dest: MultiAddress; amount: bigint } }
  /**
   * Disallow further unprivileged transfers of an asset `id` from an account `who`. `who`
   * must already exist as an entry in `Account`s of the asset. If you want to freeze an
   * account that does not have an entry, use `touch_other` first.
   *
   * Origin must be Signed and the sender should be the Freezer of the asset `id`.
   *
   * - `id`: The identifier of the asset to be frozen.
   * - `who`: The account to be frozen.
   *
   * Emits `Frozen`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'Freeze'; params: { id: number; who: MultiAddress } }
  /**
   * Allow unprivileged transfers to and from an account again.
   *
   * Origin must be Signed and the sender should be the Admin of the asset `id`.
   *
   * - `id`: The identifier of the asset to be frozen.
   * - `who`: The account to be unfrozen.
   *
   * Emits `Thawed`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'Thaw'; params: { id: number; who: MultiAddress } }
  /**
   * Disallow further unprivileged transfers for the asset class.
   *
   * Origin must be Signed and the sender should be the Freezer of the asset `id`.
   *
   * - `id`: The identifier of the asset to be frozen.
   *
   * Emits `Frozen`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'FreezeAsset'; params: { id: number } }
  /**
   * Allow unprivileged transfers for the asset again.
   *
   * Origin must be Signed and the sender should be the Admin of the asset `id`.
   *
   * - `id`: The identifier of the asset to be thawed.
   *
   * Emits `Thawed`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'ThawAsset'; params: { id: number } }
  /**
   * Change the Owner of an asset.
   *
   * Origin must be Signed and the sender should be the Owner of the asset `id`.
   *
   * - `id`: The identifier of the asset.
   * - `owner`: The new Owner of this asset.
   *
   * Emits `OwnerChanged`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'TransferOwnership'; params: { id: number; owner: MultiAddress } }
  /**
   * Change the Issuer, Admin and Freezer of an asset.
   *
   * Origin must be Signed and the sender should be the Owner of the asset `id`.
   *
   * - `id`: The identifier of the asset to be frozen.
   * - `issuer`: The new Issuer of this asset.
   * - `admin`: The new Admin of this asset.
   * - `freezer`: The new Freezer of this asset.
   *
   * Emits `TeamChanged`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'SetTeam'; params: { id: number; issuer: MultiAddress; admin: MultiAddress; freezer: MultiAddress } }
  /**
   * Set the metadata for an asset.
   *
   * Origin must be Signed and the sender should be the Owner of the asset `id`.
   *
   * Funds of sender are reserved according to the formula:
   * `MetadataDepositBase + MetadataDepositPerByte * (name.len + symbol.len)` taking into
   * account any already reserved funds.
   *
   * - `id`: The identifier of the asset to update.
   * - `name`: The user friendly name of this asset. Limited in length by `StringLimit`.
   * - `symbol`: The exchange symbol for this asset. Limited in length by `StringLimit`.
   * - `decimals`: The number of decimals this asset uses to represent one unit.
   *
   * Emits `MetadataSet`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'SetMetadata'; params: { id: number; name: Bytes; symbol: Bytes; decimals: number } }
  /**
   * Clear the metadata for an asset.
   *
   * Origin must be Signed and the sender should be the Owner of the asset `id`.
   *
   * Any deposit is freed for the asset owner.
   *
   * - `id`: The identifier of the asset to clear.
   *
   * Emits `MetadataCleared`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'ClearMetadata'; params: { id: number } }
  /**
   * Force the metadata for an asset to some value.
   *
   * Origin must be ForceOrigin.
   *
   * Any deposit is left alone.
   *
   * - `id`: The identifier of the asset to update.
   * - `name`: The user friendly name of this asset. Limited in length by `StringLimit`.
   * - `symbol`: The exchange symbol for this asset. Limited in length by `StringLimit`.
   * - `decimals`: The number of decimals this asset uses to represent one unit.
   *
   * Emits `MetadataSet`.
   *
   * Weight: `O(N + S)` where N and S are the length of the name and symbol respectively.
   **/
  | {
      name: 'ForceSetMetadata';
      params: { id: number; name: Bytes; symbol: Bytes; decimals: number; isFrozen: boolean };
    }
  /**
   * Clear the metadata for an asset.
   *
   * Origin must be ForceOrigin.
   *
   * Any deposit is returned.
   *
   * - `id`: The identifier of the asset to clear.
   *
   * Emits `MetadataCleared`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'ForceClearMetadata'; params: { id: number } }
  /**
   * Alter the attributes of a given asset.
   *
   * Origin must be `ForceOrigin`.
   *
   * - `id`: The identifier of the asset.
   * - `owner`: The new Owner of this asset.
   * - `issuer`: The new Issuer of this asset.
   * - `admin`: The new Admin of this asset.
   * - `freezer`: The new Freezer of this asset.
   * - `min_balance`: The minimum balance of this new asset that any single account must
   * have. If an account's balance is reduced below this, then it collapses to zero.
   * - `is_sufficient`: Whether a non-zero balance of this asset is deposit of sufficient
   * value to account for the state bloat associated with its balance storage. If set to
   * `true`, then non-zero balances may be stored without a `consumer` reference (and thus
   * an ED in the Balances pallet or whatever else is used to control user-account state
   * growth).
   * - `is_frozen`: Whether this asset class is frozen except for permissioned/admin
   * instructions.
   *
   * Emits `AssetStatusChanged` with the identity of the asset.
   *
   * Weight: `O(1)`
   **/
  | {
      name: 'ForceAssetStatus';
      params: {
        id: number;
        owner: MultiAddress;
        issuer: MultiAddress;
        admin: MultiAddress;
        freezer: MultiAddress;
        minBalance: bigint;
        isSufficient: boolean;
        isFrozen: boolean;
      };
    }
  /**
   * Approve an amount of asset for transfer by a delegated third-party account.
   *
   * Origin must be Signed.
   *
   * Ensures that `ApprovalDeposit` worth of `Currency` is reserved from signing account
   * for the purpose of holding the approval. If some non-zero amount of assets is already
   * approved from signing account to `delegate`, then it is topped up or unreserved to
   * meet the right value.
   *
   * NOTE: The signing account does not need to own `amount` of assets at the point of
   * making this call.
   *
   * - `id`: The identifier of the asset.
   * - `delegate`: The account to delegate permission to transfer asset.
   * - `amount`: The amount of asset that may be transferred by `delegate`. If there is
   * already an approval in place, then this acts additively.
   *
   * Emits `ApprovedTransfer` on success.
   *
   * Weight: `O(1)`
   **/
  | { name: 'ApproveTransfer'; params: { id: number; delegate: MultiAddress; amount: bigint } }
  /**
   * Cancel all of some asset approved for delegated transfer by a third-party account.
   *
   * Origin must be Signed and there must be an approval in place between signer and
   * `delegate`.
   *
   * Unreserves any deposit previously reserved by `approve_transfer` for the approval.
   *
   * - `id`: The identifier of the asset.
   * - `delegate`: The account delegated permission to transfer asset.
   *
   * Emits `ApprovalCancelled` on success.
   *
   * Weight: `O(1)`
   **/
  | { name: 'CancelApproval'; params: { id: number; delegate: MultiAddress } }
  /**
   * Cancel all of some asset approved for delegated transfer by a third-party account.
   *
   * Origin must be either ForceOrigin or Signed origin with the signer being the Admin
   * account of the asset `id`.
   *
   * Unreserves any deposit previously reserved by `approve_transfer` for the approval.
   *
   * - `id`: The identifier of the asset.
   * - `delegate`: The account delegated permission to transfer asset.
   *
   * Emits `ApprovalCancelled` on success.
   *
   * Weight: `O(1)`
   **/
  | { name: 'ForceCancelApproval'; params: { id: number; owner: MultiAddress; delegate: MultiAddress } }
  /**
   * Transfer some asset balance from a previously delegated account to some third-party
   * account.
   *
   * Origin must be Signed and there must be an approval in place by the `owner` to the
   * signer.
   *
   * If the entire amount approved for transfer is transferred, then any deposit previously
   * reserved by `approve_transfer` is unreserved.
   *
   * - `id`: The identifier of the asset.
   * - `owner`: The account which previously approved for a transfer of at least `amount` and
   * from which the asset balance will be withdrawn.
   * - `destination`: The account to which the asset balance of `amount` will be transferred.
   * - `amount`: The amount of assets to transfer.
   *
   * Emits `TransferredApproved` on success.
   *
   * Weight: `O(1)`
   **/
  | { name: 'TransferApproved'; params: { id: number; owner: MultiAddress; destination: MultiAddress; amount: bigint } }
  /**
   * Create an asset account for non-provider assets.
   *
   * A deposit will be taken from the signer account.
   *
   * - `origin`: Must be Signed; the signer account must have sufficient funds for a deposit
   * to be taken.
   * - `id`: The identifier of the asset for the account to be created.
   *
   * Emits `Touched` event when successful.
   **/
  | { name: 'Touch'; params: { id: number } }
  /**
   * Return the deposit (if any) of an asset account or a consumer reference (if any) of an
   * account.
   *
   * The origin must be Signed.
   *
   * - `id`: The identifier of the asset for which the caller would like the deposit
   * refunded.
   * - `allow_burn`: If `true` then assets may be destroyed in order to complete the refund.
   *
   * Emits `Refunded` event when successful.
   **/
  | { name: 'Refund'; params: { id: number; allowBurn: boolean } }
  /**
   * Sets the minimum balance of an asset.
   *
   * Only works if there aren't any accounts that are holding the asset or if
   * the new value of `min_balance` is less than the old one.
   *
   * Origin must be Signed and the sender has to be the Owner of the
   * asset `id`.
   *
   * - `id`: The identifier of the asset.
   * - `min_balance`: The new value of `min_balance`.
   *
   * Emits `AssetMinBalanceChanged` event when successful.
   **/
  | { name: 'SetMinBalance'; params: { id: number; minBalance: bigint } }
  /**
   * Create an asset account for `who`.
   *
   * A deposit will be taken from the signer account.
   *
   * - `origin`: Must be Signed by `Freezer` or `Admin` of the asset `id`; the signer account
   * must have sufficient funds for a deposit to be taken.
   * - `id`: The identifier of the asset for the account to be created.
   * - `who`: The account to be created.
   *
   * Emits `Touched` event when successful.
   **/
  | { name: 'TouchOther'; params: { id: number; who: MultiAddress } }
  /**
   * Return the deposit (if any) of a target asset account. Useful if you are the depositor.
   *
   * The origin must be Signed and either the account owner, depositor, or asset `Admin`. In
   * order to burn a non-zero balance of the asset, the caller must be the account and should
   * use `refund`.
   *
   * - `id`: The identifier of the asset for the account holding a deposit.
   * - `who`: The account to refund.
   *
   * Emits `Refunded` event when successful.
   **/
  | { name: 'RefundOther'; params: { id: number; who: MultiAddress } }
  /**
   * Disallow further unprivileged transfers of an asset `id` to and from an account `who`.
   *
   * Origin must be Signed and the sender should be the Freezer of the asset `id`.
   *
   * - `id`: The identifier of the account's asset.
   * - `who`: The account to be unblocked.
   *
   * Emits `Blocked`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'Block'; params: { id: number; who: MultiAddress } };

export type PalletAssetsCallLike =
  /**
   * Issue a new class of fungible assets from a public origin.
   *
   * This new asset class has no assets initially and its owner is the origin.
   *
   * The origin must conform to the configured `CreateOrigin` and have sufficient funds free.
   *
   * Funds of sender are reserved by `AssetDeposit`.
   *
   * Parameters:
   * - `id`: The identifier of the new asset. This must not be currently in use to identify
   * an existing asset. If [`NextAssetId`] is set, then this must be equal to it.
   * - `admin`: The admin of this class of assets. The admin is the initial address of each
   * member of the asset class's admin team.
   * - `min_balance`: The minimum balance of this new asset that any single account must
   * have. If an account's balance is reduced below this, then it collapses to zero.
   *
   * Emits `Created` event when successful.
   *
   * Weight: `O(1)`
   **/
  | { name: 'Create'; params: { id: number; admin: MultiAddressLike; minBalance: bigint } }
  /**
   * Issue a new class of fungible assets from a privileged origin.
   *
   * This new asset class has no assets initially.
   *
   * The origin must conform to `ForceOrigin`.
   *
   * Unlike `create`, no funds are reserved.
   *
   * - `id`: The identifier of the new asset. This must not be currently in use to identify
   * an existing asset. If [`NextAssetId`] is set, then this must be equal to it.
   * - `owner`: The owner of this class of assets. The owner has full superuser permissions
   * over this asset, but may later change and configure the permissions using
   * `transfer_ownership` and `set_team`.
   * - `min_balance`: The minimum balance of this new asset that any single account must
   * have. If an account's balance is reduced below this, then it collapses to zero.
   *
   * Emits `ForceCreated` event when successful.
   *
   * Weight: `O(1)`
   **/
  | { name: 'ForceCreate'; params: { id: number; owner: MultiAddressLike; isSufficient: boolean; minBalance: bigint } }
  /**
   * Start the process of destroying a fungible asset class.
   *
   * `start_destroy` is the first in a series of extrinsics that should be called, to allow
   * destruction of an asset class.
   *
   * The origin must conform to `ForceOrigin` or must be `Signed` by the asset's `owner`.
   *
   * - `id`: The identifier of the asset to be destroyed. This must identify an existing
   * asset.
   *
   * The asset class must be frozen before calling `start_destroy`.
   **/
  | { name: 'StartDestroy'; params: { id: number } }
  /**
   * Destroy all accounts associated with a given asset.
   *
   * `destroy_accounts` should only be called after `start_destroy` has been called, and the
   * asset is in a `Destroying` state.
   *
   * Due to weight restrictions, this function may need to be called multiple times to fully
   * destroy all accounts. It will destroy `RemoveItemsLimit` accounts at a time.
   *
   * - `id`: The identifier of the asset to be destroyed. This must identify an existing
   * asset.
   *
   * Each call emits the `Event::DestroyedAccounts` event.
   **/
  | { name: 'DestroyAccounts'; params: { id: number } }
  /**
   * Destroy all approvals associated with a given asset up to the max (T::RemoveItemsLimit).
   *
   * `destroy_approvals` should only be called after `start_destroy` has been called, and the
   * asset is in a `Destroying` state.
   *
   * Due to weight restrictions, this function may need to be called multiple times to fully
   * destroy all approvals. It will destroy `RemoveItemsLimit` approvals at a time.
   *
   * - `id`: The identifier of the asset to be destroyed. This must identify an existing
   * asset.
   *
   * Each call emits the `Event::DestroyedApprovals` event.
   **/
  | { name: 'DestroyApprovals'; params: { id: number } }
  /**
   * Complete destroying asset and unreserve currency.
   *
   * `finish_destroy` should only be called after `start_destroy` has been called, and the
   * asset is in a `Destroying` state. All accounts or approvals should be destroyed before
   * hand.
   *
   * - `id`: The identifier of the asset to be destroyed. This must identify an existing
   * asset.
   *
   * Each successful call emits the `Event::Destroyed` event.
   **/
  | { name: 'FinishDestroy'; params: { id: number } }
  /**
   * Mint assets of a particular class.
   *
   * The origin must be Signed and the sender must be the Issuer of the asset `id`.
   *
   * - `id`: The identifier of the asset to have some amount minted.
   * - `beneficiary`: The account to be credited with the minted assets.
   * - `amount`: The amount of the asset to be minted.
   *
   * Emits `Issued` event when successful.
   *
   * Weight: `O(1)`
   * Modes: Pre-existing balance of `beneficiary`; Account pre-existence of `beneficiary`.
   **/
  | { name: 'Mint'; params: { id: number; beneficiary: MultiAddressLike; amount: bigint } }
  /**
   * Reduce the balance of `who` by as much as possible up to `amount` assets of `id`.
   *
   * Origin must be Signed and the sender should be the Manager of the asset `id`.
   *
   * Bails with `NoAccount` if the `who` is already dead.
   *
   * - `id`: The identifier of the asset to have some amount burned.
   * - `who`: The account to be debited from.
   * - `amount`: The maximum amount by which `who`'s balance should be reduced.
   *
   * Emits `Burned` with the actual amount burned. If this takes the balance to below the
   * minimum for the asset, then the amount burned is increased to take it to zero.
   *
   * Weight: `O(1)`
   * Modes: Post-existence of `who`; Pre & post Zombie-status of `who`.
   **/
  | { name: 'Burn'; params: { id: number; who: MultiAddressLike; amount: bigint } }
  /**
   * Move some assets from the sender account to another.
   *
   * Origin must be Signed.
   *
   * - `id`: The identifier of the asset to have some amount transferred.
   * - `target`: The account to be credited.
   * - `amount`: The amount by which the sender's balance of assets should be reduced and
   * `target`'s balance increased. The amount actually transferred may be slightly greater in
   * the case that the transfer would otherwise take the sender balance above zero but below
   * the minimum balance. Must be greater than zero.
   *
   * Emits `Transferred` with the actual amount transferred. If this takes the source balance
   * to below the minimum for the asset, then the amount transferred is increased to take it
   * to zero.
   *
   * Weight: `O(1)`
   * Modes: Pre-existence of `target`; Post-existence of sender; Account pre-existence of
   * `target`.
   **/
  | { name: 'Transfer'; params: { id: number; target: MultiAddressLike; amount: bigint } }
  /**
   * Move some assets from the sender account to another, keeping the sender account alive.
   *
   * Origin must be Signed.
   *
   * - `id`: The identifier of the asset to have some amount transferred.
   * - `target`: The account to be credited.
   * - `amount`: The amount by which the sender's balance of assets should be reduced and
   * `target`'s balance increased. The amount actually transferred may be slightly greater in
   * the case that the transfer would otherwise take the sender balance above zero but below
   * the minimum balance. Must be greater than zero.
   *
   * Emits `Transferred` with the actual amount transferred. If this takes the source balance
   * to below the minimum for the asset, then the amount transferred is increased to take it
   * to zero.
   *
   * Weight: `O(1)`
   * Modes: Pre-existence of `target`; Post-existence of sender; Account pre-existence of
   * `target`.
   **/
  | { name: 'TransferKeepAlive'; params: { id: number; target: MultiAddressLike; amount: bigint } }
  /**
   * Move some assets from one account to another.
   *
   * Origin must be Signed and the sender should be the Admin of the asset `id`.
   *
   * - `id`: The identifier of the asset to have some amount transferred.
   * - `source`: The account to be debited.
   * - `dest`: The account to be credited.
   * - `amount`: The amount by which the `source`'s balance of assets should be reduced and
   * `dest`'s balance increased. The amount actually transferred may be slightly greater in
   * the case that the transfer would otherwise take the `source` balance above zero but
   * below the minimum balance. Must be greater than zero.
   *
   * Emits `Transferred` with the actual amount transferred. If this takes the source balance
   * to below the minimum for the asset, then the amount transferred is increased to take it
   * to zero.
   *
   * Weight: `O(1)`
   * Modes: Pre-existence of `dest`; Post-existence of `source`; Account pre-existence of
   * `dest`.
   **/
  | { name: 'ForceTransfer'; params: { id: number; source: MultiAddressLike; dest: MultiAddressLike; amount: bigint } }
  /**
   * Disallow further unprivileged transfers of an asset `id` from an account `who`. `who`
   * must already exist as an entry in `Account`s of the asset. If you want to freeze an
   * account that does not have an entry, use `touch_other` first.
   *
   * Origin must be Signed and the sender should be the Freezer of the asset `id`.
   *
   * - `id`: The identifier of the asset to be frozen.
   * - `who`: The account to be frozen.
   *
   * Emits `Frozen`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'Freeze'; params: { id: number; who: MultiAddressLike } }
  /**
   * Allow unprivileged transfers to and from an account again.
   *
   * Origin must be Signed and the sender should be the Admin of the asset `id`.
   *
   * - `id`: The identifier of the asset to be frozen.
   * - `who`: The account to be unfrozen.
   *
   * Emits `Thawed`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'Thaw'; params: { id: number; who: MultiAddressLike } }
  /**
   * Disallow further unprivileged transfers for the asset class.
   *
   * Origin must be Signed and the sender should be the Freezer of the asset `id`.
   *
   * - `id`: The identifier of the asset to be frozen.
   *
   * Emits `Frozen`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'FreezeAsset'; params: { id: number } }
  /**
   * Allow unprivileged transfers for the asset again.
   *
   * Origin must be Signed and the sender should be the Admin of the asset `id`.
   *
   * - `id`: The identifier of the asset to be thawed.
   *
   * Emits `Thawed`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'ThawAsset'; params: { id: number } }
  /**
   * Change the Owner of an asset.
   *
   * Origin must be Signed and the sender should be the Owner of the asset `id`.
   *
   * - `id`: The identifier of the asset.
   * - `owner`: The new Owner of this asset.
   *
   * Emits `OwnerChanged`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'TransferOwnership'; params: { id: number; owner: MultiAddressLike } }
  /**
   * Change the Issuer, Admin and Freezer of an asset.
   *
   * Origin must be Signed and the sender should be the Owner of the asset `id`.
   *
   * - `id`: The identifier of the asset to be frozen.
   * - `issuer`: The new Issuer of this asset.
   * - `admin`: The new Admin of this asset.
   * - `freezer`: The new Freezer of this asset.
   *
   * Emits `TeamChanged`.
   *
   * Weight: `O(1)`
   **/
  | {
      name: 'SetTeam';
      params: { id: number; issuer: MultiAddressLike; admin: MultiAddressLike; freezer: MultiAddressLike };
    }
  /**
   * Set the metadata for an asset.
   *
   * Origin must be Signed and the sender should be the Owner of the asset `id`.
   *
   * Funds of sender are reserved according to the formula:
   * `MetadataDepositBase + MetadataDepositPerByte * (name.len + symbol.len)` taking into
   * account any already reserved funds.
   *
   * - `id`: The identifier of the asset to update.
   * - `name`: The user friendly name of this asset. Limited in length by `StringLimit`.
   * - `symbol`: The exchange symbol for this asset. Limited in length by `StringLimit`.
   * - `decimals`: The number of decimals this asset uses to represent one unit.
   *
   * Emits `MetadataSet`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'SetMetadata'; params: { id: number; name: BytesLike; symbol: BytesLike; decimals: number } }
  /**
   * Clear the metadata for an asset.
   *
   * Origin must be Signed and the sender should be the Owner of the asset `id`.
   *
   * Any deposit is freed for the asset owner.
   *
   * - `id`: The identifier of the asset to clear.
   *
   * Emits `MetadataCleared`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'ClearMetadata'; params: { id: number } }
  /**
   * Force the metadata for an asset to some value.
   *
   * Origin must be ForceOrigin.
   *
   * Any deposit is left alone.
   *
   * - `id`: The identifier of the asset to update.
   * - `name`: The user friendly name of this asset. Limited in length by `StringLimit`.
   * - `symbol`: The exchange symbol for this asset. Limited in length by `StringLimit`.
   * - `decimals`: The number of decimals this asset uses to represent one unit.
   *
   * Emits `MetadataSet`.
   *
   * Weight: `O(N + S)` where N and S are the length of the name and symbol respectively.
   **/
  | {
      name: 'ForceSetMetadata';
      params: { id: number; name: BytesLike; symbol: BytesLike; decimals: number; isFrozen: boolean };
    }
  /**
   * Clear the metadata for an asset.
   *
   * Origin must be ForceOrigin.
   *
   * Any deposit is returned.
   *
   * - `id`: The identifier of the asset to clear.
   *
   * Emits `MetadataCleared`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'ForceClearMetadata'; params: { id: number } }
  /**
   * Alter the attributes of a given asset.
   *
   * Origin must be `ForceOrigin`.
   *
   * - `id`: The identifier of the asset.
   * - `owner`: The new Owner of this asset.
   * - `issuer`: The new Issuer of this asset.
   * - `admin`: The new Admin of this asset.
   * - `freezer`: The new Freezer of this asset.
   * - `min_balance`: The minimum balance of this new asset that any single account must
   * have. If an account's balance is reduced below this, then it collapses to zero.
   * - `is_sufficient`: Whether a non-zero balance of this asset is deposit of sufficient
   * value to account for the state bloat associated with its balance storage. If set to
   * `true`, then non-zero balances may be stored without a `consumer` reference (and thus
   * an ED in the Balances pallet or whatever else is used to control user-account state
   * growth).
   * - `is_frozen`: Whether this asset class is frozen except for permissioned/admin
   * instructions.
   *
   * Emits `AssetStatusChanged` with the identity of the asset.
   *
   * Weight: `O(1)`
   **/
  | {
      name: 'ForceAssetStatus';
      params: {
        id: number;
        owner: MultiAddressLike;
        issuer: MultiAddressLike;
        admin: MultiAddressLike;
        freezer: MultiAddressLike;
        minBalance: bigint;
        isSufficient: boolean;
        isFrozen: boolean;
      };
    }
  /**
   * Approve an amount of asset for transfer by a delegated third-party account.
   *
   * Origin must be Signed.
   *
   * Ensures that `ApprovalDeposit` worth of `Currency` is reserved from signing account
   * for the purpose of holding the approval. If some non-zero amount of assets is already
   * approved from signing account to `delegate`, then it is topped up or unreserved to
   * meet the right value.
   *
   * NOTE: The signing account does not need to own `amount` of assets at the point of
   * making this call.
   *
   * - `id`: The identifier of the asset.
   * - `delegate`: The account to delegate permission to transfer asset.
   * - `amount`: The amount of asset that may be transferred by `delegate`. If there is
   * already an approval in place, then this acts additively.
   *
   * Emits `ApprovedTransfer` on success.
   *
   * Weight: `O(1)`
   **/
  | { name: 'ApproveTransfer'; params: { id: number; delegate: MultiAddressLike; amount: bigint } }
  /**
   * Cancel all of some asset approved for delegated transfer by a third-party account.
   *
   * Origin must be Signed and there must be an approval in place between signer and
   * `delegate`.
   *
   * Unreserves any deposit previously reserved by `approve_transfer` for the approval.
   *
   * - `id`: The identifier of the asset.
   * - `delegate`: The account delegated permission to transfer asset.
   *
   * Emits `ApprovalCancelled` on success.
   *
   * Weight: `O(1)`
   **/
  | { name: 'CancelApproval'; params: { id: number; delegate: MultiAddressLike } }
  /**
   * Cancel all of some asset approved for delegated transfer by a third-party account.
   *
   * Origin must be either ForceOrigin or Signed origin with the signer being the Admin
   * account of the asset `id`.
   *
   * Unreserves any deposit previously reserved by `approve_transfer` for the approval.
   *
   * - `id`: The identifier of the asset.
   * - `delegate`: The account delegated permission to transfer asset.
   *
   * Emits `ApprovalCancelled` on success.
   *
   * Weight: `O(1)`
   **/
  | { name: 'ForceCancelApproval'; params: { id: number; owner: MultiAddressLike; delegate: MultiAddressLike } }
  /**
   * Transfer some asset balance from a previously delegated account to some third-party
   * account.
   *
   * Origin must be Signed and there must be an approval in place by the `owner` to the
   * signer.
   *
   * If the entire amount approved for transfer is transferred, then any deposit previously
   * reserved by `approve_transfer` is unreserved.
   *
   * - `id`: The identifier of the asset.
   * - `owner`: The account which previously approved for a transfer of at least `amount` and
   * from which the asset balance will be withdrawn.
   * - `destination`: The account to which the asset balance of `amount` will be transferred.
   * - `amount`: The amount of assets to transfer.
   *
   * Emits `TransferredApproved` on success.
   *
   * Weight: `O(1)`
   **/
  | {
      name: 'TransferApproved';
      params: { id: number; owner: MultiAddressLike; destination: MultiAddressLike; amount: bigint };
    }
  /**
   * Create an asset account for non-provider assets.
   *
   * A deposit will be taken from the signer account.
   *
   * - `origin`: Must be Signed; the signer account must have sufficient funds for a deposit
   * to be taken.
   * - `id`: The identifier of the asset for the account to be created.
   *
   * Emits `Touched` event when successful.
   **/
  | { name: 'Touch'; params: { id: number } }
  /**
   * Return the deposit (if any) of an asset account or a consumer reference (if any) of an
   * account.
   *
   * The origin must be Signed.
   *
   * - `id`: The identifier of the asset for which the caller would like the deposit
   * refunded.
   * - `allow_burn`: If `true` then assets may be destroyed in order to complete the refund.
   *
   * Emits `Refunded` event when successful.
   **/
  | { name: 'Refund'; params: { id: number; allowBurn: boolean } }
  /**
   * Sets the minimum balance of an asset.
   *
   * Only works if there aren't any accounts that are holding the asset or if
   * the new value of `min_balance` is less than the old one.
   *
   * Origin must be Signed and the sender has to be the Owner of the
   * asset `id`.
   *
   * - `id`: The identifier of the asset.
   * - `min_balance`: The new value of `min_balance`.
   *
   * Emits `AssetMinBalanceChanged` event when successful.
   **/
  | { name: 'SetMinBalance'; params: { id: number; minBalance: bigint } }
  /**
   * Create an asset account for `who`.
   *
   * A deposit will be taken from the signer account.
   *
   * - `origin`: Must be Signed by `Freezer` or `Admin` of the asset `id`; the signer account
   * must have sufficient funds for a deposit to be taken.
   * - `id`: The identifier of the asset for the account to be created.
   * - `who`: The account to be created.
   *
   * Emits `Touched` event when successful.
   **/
  | { name: 'TouchOther'; params: { id: number; who: MultiAddressLike } }
  /**
   * Return the deposit (if any) of a target asset account. Useful if you are the depositor.
   *
   * The origin must be Signed and either the account owner, depositor, or asset `Admin`. In
   * order to burn a non-zero balance of the asset, the caller must be the account and should
   * use `refund`.
   *
   * - `id`: The identifier of the asset for the account holding a deposit.
   * - `who`: The account to refund.
   *
   * Emits `Refunded` event when successful.
   **/
  | { name: 'RefundOther'; params: { id: number; who: MultiAddressLike } }
  /**
   * Disallow further unprivileged transfers of an asset `id` to and from an account `who`.
   *
   * Origin must be Signed and the sender should be the Freezer of the asset `id`.
   *
   * - `id`: The identifier of the account's asset.
   * - `who`: The account to be unblocked.
   *
   * Emits `Blocked`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'Block'; params: { id: number; who: MultiAddressLike } };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletUniquesCall =
  /**
   * Issue a new collection of non-fungible items from a public origin.
   *
   * This new collection has no items initially and its owner is the origin.
   *
   * The origin must conform to the configured `CreateOrigin` and have sufficient funds free.
   *
   * `ItemDeposit` funds of sender are reserved.
   *
   * Parameters:
   * - `collection`: The identifier of the new collection. This must not be currently in use.
   * - `admin`: The admin of this collection. The admin is the initial address of each
   * member of the collection's admin team.
   *
   * Emits `Created` event when successful.
   *
   * Weight: `O(1)`
   **/
  | { name: 'Create'; params: { collection: number; admin: MultiAddress } }
  /**
   * Issue a new collection of non-fungible items from a privileged origin.
   *
   * This new collection has no items initially.
   *
   * The origin must conform to `ForceOrigin`.
   *
   * Unlike `create`, no funds are reserved.
   *
   * - `collection`: The identifier of the new item. This must not be currently in use.
   * - `owner`: The owner of this collection of items. The owner has full superuser
   * permissions
   * over this item, but may later change and configure the permissions using
   * `transfer_ownership` and `set_team`.
   *
   * Emits `ForceCreated` event when successful.
   *
   * Weight: `O(1)`
   **/
  | { name: 'ForceCreate'; params: { collection: number; owner: MultiAddress; freeHolding: boolean } }
  /**
   * Destroy a collection of fungible items.
   *
   * The origin must conform to `ForceOrigin` or must be `Signed` and the sender must be the
   * owner of the `collection`.
   *
   * - `collection`: The identifier of the collection to be destroyed.
   * - `witness`: Information on the items minted in the collection. This must be
   * correct.
   *
   * Emits `Destroyed` event when successful.
   *
   * Weight: `O(n + m)` where:
   * - `n = witness.items`
   * - `m = witness.item_metadatas`
   * - `a = witness.attributes`
   **/
  | { name: 'Destroy'; params: { collection: number; witness: PalletUniquesDestroyWitness } }
  /**
   * Mint an item of a particular collection.
   *
   * The origin must be Signed and the sender must be the Issuer of the `collection`.
   *
   * - `collection`: The collection of the item to be minted.
   * - `item`: The item value of the item to be minted.
   * - `beneficiary`: The initial owner of the minted item.
   *
   * Emits `Issued` event when successful.
   *
   * Weight: `O(1)`
   **/
  | { name: 'Mint'; params: { collection: number; item: number; owner: MultiAddress } }
  /**
   * Destroy a single item.
   *
   * Origin must be Signed and the signing account must be either:
   * - the Admin of the `collection`;
   * - the Owner of the `item`;
   *
   * - `collection`: The collection of the item to be burned.
   * - `item`: The item of the item to be burned.
   * - `check_owner`: If `Some` then the operation will fail with `WrongOwner` unless the
   * item is owned by this value.
   *
   * Emits `Burned` with the actual amount burned.
   *
   * Weight: `O(1)`
   * Modes: `check_owner.is_some()`.
   **/
  | { name: 'Burn'; params: { collection: number; item: number; checkOwner?: MultiAddress | undefined } }
  /**
   * Move an item from the sender account to another.
   *
   * This resets the approved account of the item.
   *
   * Origin must be Signed and the signing account must be either:
   * - the Admin of the `collection`;
   * - the Owner of the `item`;
   * - the approved delegate for the `item` (in this case, the approval is reset).
   *
   * Arguments:
   * - `collection`: The collection of the item to be transferred.
   * - `item`: The item of the item to be transferred.
   * - `dest`: The account to receive ownership of the item.
   *
   * Emits `Transferred`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'Transfer'; params: { collection: number; item: number; dest: MultiAddress } }
  /**
   * Reevaluate the deposits on some items.
   *
   * Origin must be Signed and the sender should be the Owner of the `collection`.
   *
   * - `collection`: The collection to be frozen.
   * - `items`: The items of the collection whose deposits will be reevaluated.
   *
   * NOTE: This exists as a best-effort function. Any items which are unknown or
   * in the case that the owner account does not have reservable funds to pay for a
   * deposit increase are ignored. Generally the owner isn't going to call this on items
   * whose existing deposit is less than the refreshed deposit as it would only cost them,
   * so it's of little consequence.
   *
   * It will still return an error in the case that the collection is unknown of the signer
   * is not permitted to call it.
   *
   * Weight: `O(items.len())`
   **/
  | { name: 'Redeposit'; params: { collection: number; items: Array<number> } }
  /**
   * Disallow further unprivileged transfer of an item.
   *
   * Origin must be Signed and the sender should be the Freezer of the `collection`.
   *
   * - `collection`: The collection of the item to be frozen.
   * - `item`: The item of the item to be frozen.
   *
   * Emits `Frozen`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'Freeze'; params: { collection: number; item: number } }
  /**
   * Re-allow unprivileged transfer of an item.
   *
   * Origin must be Signed and the sender should be the Freezer of the `collection`.
   *
   * - `collection`: The collection of the item to be thawed.
   * - `item`: The item of the item to be thawed.
   *
   * Emits `Thawed`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'Thaw'; params: { collection: number; item: number } }
  /**
   * Disallow further unprivileged transfers for a whole collection.
   *
   * Origin must be Signed and the sender should be the Freezer of the `collection`.
   *
   * - `collection`: The collection to be frozen.
   *
   * Emits `CollectionFrozen`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'FreezeCollection'; params: { collection: number } }
  /**
   * Re-allow unprivileged transfers for a whole collection.
   *
   * Origin must be Signed and the sender should be the Admin of the `collection`.
   *
   * - `collection`: The collection to be thawed.
   *
   * Emits `CollectionThawed`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'ThawCollection'; params: { collection: number } }
  /**
   * Change the Owner of a collection.
   *
   * Origin must be Signed and the sender should be the Owner of the `collection`.
   *
   * - `collection`: The collection whose owner should be changed.
   * - `owner`: The new Owner of this collection. They must have called
   * `set_accept_ownership` with `collection` in order for this operation to succeed.
   *
   * Emits `OwnerChanged`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'TransferOwnership'; params: { collection: number; newOwner: MultiAddress } }
  /**
   * Change the Issuer, Admin and Freezer of a collection.
   *
   * Origin must be Signed and the sender should be the Owner of the `collection`.
   *
   * - `collection`: The collection whose team should be changed.
   * - `issuer`: The new Issuer of this collection.
   * - `admin`: The new Admin of this collection.
   * - `freezer`: The new Freezer of this collection.
   *
   * Emits `TeamChanged`.
   *
   * Weight: `O(1)`
   **/
  | {
      name: 'SetTeam';
      params: { collection: number; issuer: MultiAddress; admin: MultiAddress; freezer: MultiAddress };
    }
  /**
   * Approve an item to be transferred by a delegated third-party account.
   *
   * The origin must conform to `ForceOrigin` or must be `Signed` and the sender must be
   * either the owner of the `item` or the admin of the collection.
   *
   * - `collection`: The collection of the item to be approved for delegated transfer.
   * - `item`: The item of the item to be approved for delegated transfer.
   * - `delegate`: The account to delegate permission to transfer the item.
   *
   * Important NOTE: The `approved` account gets reset after each transfer.
   *
   * Emits `ApprovedTransfer` on success.
   *
   * Weight: `O(1)`
   **/
  | { name: 'ApproveTransfer'; params: { collection: number; item: number; delegate: MultiAddress } }
  /**
   * Cancel the prior approval for the transfer of an item by a delegate.
   *
   * Origin must be either:
   * - the `Force` origin;
   * - `Signed` with the signer being the Admin of the `collection`;
   * - `Signed` with the signer being the Owner of the `item`;
   *
   * Arguments:
   * - `collection`: The collection of the item of whose approval will be cancelled.
   * - `item`: The item of the item of whose approval will be cancelled.
   * - `maybe_check_delegate`: If `Some` will ensure that the given account is the one to
   * which permission of transfer is delegated.
   *
   * Emits `ApprovalCancelled` on success.
   *
   * Weight: `O(1)`
   **/
  | {
      name: 'CancelApproval';
      params: { collection: number; item: number; maybeCheckDelegate?: MultiAddress | undefined };
    }
  /**
   * Alter the attributes of a given item.
   *
   * Origin must be `ForceOrigin`.
   *
   * - `collection`: The identifier of the item.
   * - `owner`: The new Owner of this item.
   * - `issuer`: The new Issuer of this item.
   * - `admin`: The new Admin of this item.
   * - `freezer`: The new Freezer of this item.
   * - `free_holding`: Whether a deposit is taken for holding an item of this collection.
   * - `is_frozen`: Whether this collection is frozen except for permissioned/admin
   * instructions.
   *
   * Emits `ItemStatusChanged` with the identity of the item.
   *
   * Weight: `O(1)`
   **/
  | {
      name: 'ForceItemStatus';
      params: {
        collection: number;
        owner: MultiAddress;
        issuer: MultiAddress;
        admin: MultiAddress;
        freezer: MultiAddress;
        freeHolding: boolean;
        isFrozen: boolean;
      };
    }
  /**
   * Set an attribute for a collection or item.
   *
   * Origin must be either `ForceOrigin` or Signed and the sender should be the Owner of the
   * `collection`.
   *
   * If the origin is Signed, then funds of signer are reserved according to the formula:
   * `MetadataDepositBase + DepositPerByte * (key.len + value.len)` taking into
   * account any already reserved funds.
   *
   * - `collection`: The identifier of the collection whose item's metadata to set.
   * - `maybe_item`: The identifier of the item whose metadata to set.
   * - `key`: The key of the attribute.
   * - `value`: The value to which to set the attribute.
   *
   * Emits `AttributeSet`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'SetAttribute'; params: { collection: number; maybeItem?: number | undefined; key: Bytes; value: Bytes } }
  /**
   * Clear an attribute for a collection or item.
   *
   * Origin must be either `ForceOrigin` or Signed and the sender should be the Owner of the
   * `collection`.
   *
   * Any deposit is freed for the collection's owner.
   *
   * - `collection`: The identifier of the collection whose item's metadata to clear.
   * - `maybe_item`: The identifier of the item whose metadata to clear.
   * - `key`: The key of the attribute.
   *
   * Emits `AttributeCleared`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'ClearAttribute'; params: { collection: number; maybeItem?: number | undefined; key: Bytes } }
  /**
   * Set the metadata for an item.
   *
   * Origin must be either `ForceOrigin` or Signed and the sender should be the Owner of the
   * `collection`.
   *
   * If the origin is Signed, then funds of signer are reserved according to the formula:
   * `MetadataDepositBase + DepositPerByte * data.len` taking into
   * account any already reserved funds.
   *
   * - `collection`: The identifier of the collection whose item's metadata to set.
   * - `item`: The identifier of the item whose metadata to set.
   * - `data`: The general information of this item. Limited in length by `StringLimit`.
   * - `is_frozen`: Whether the metadata should be frozen against further changes.
   *
   * Emits `MetadataSet`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'SetMetadata'; params: { collection: number; item: number; data: Bytes; isFrozen: boolean } }
  /**
   * Clear the metadata for an item.
   *
   * Origin must be either `ForceOrigin` or Signed and the sender should be the Owner of the
   * `item`.
   *
   * Any deposit is freed for the collection's owner.
   *
   * - `collection`: The identifier of the collection whose item's metadata to clear.
   * - `item`: The identifier of the item whose metadata to clear.
   *
   * Emits `MetadataCleared`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'ClearMetadata'; params: { collection: number; item: number } }
  /**
   * Set the metadata for a collection.
   *
   * Origin must be either `ForceOrigin` or `Signed` and the sender should be the Owner of
   * the `collection`.
   *
   * If the origin is `Signed`, then funds of signer are reserved according to the formula:
   * `MetadataDepositBase + DepositPerByte * data.len` taking into
   * account any already reserved funds.
   *
   * - `collection`: The identifier of the item whose metadata to update.
   * - `data`: The general information of this item. Limited in length by `StringLimit`.
   * - `is_frozen`: Whether the metadata should be frozen against further changes.
   *
   * Emits `CollectionMetadataSet`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'SetCollectionMetadata'; params: { collection: number; data: Bytes; isFrozen: boolean } }
  /**
   * Clear the metadata for a collection.
   *
   * Origin must be either `ForceOrigin` or `Signed` and the sender should be the Owner of
   * the `collection`.
   *
   * Any deposit is freed for the collection's owner.
   *
   * - `collection`: The identifier of the collection whose metadata to clear.
   *
   * Emits `CollectionMetadataCleared`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'ClearCollectionMetadata'; params: { collection: number } }
  /**
   * Set (or reset) the acceptance of ownership for a particular account.
   *
   * Origin must be `Signed` and if `maybe_collection` is `Some`, then the signer must have a
   * provider reference.
   *
   * - `maybe_collection`: The identifier of the collection whose ownership the signer is
   * willing to accept, or if `None`, an indication that the signer is willing to accept no
   * ownership transferal.
   *
   * Emits `OwnershipAcceptanceChanged`.
   **/
  | { name: 'SetAcceptOwnership'; params: { maybeCollection?: number | undefined } }
  /**
   * Set the maximum amount of items a collection could have.
   *
   * Origin must be either `ForceOrigin` or `Signed` and the sender should be the Owner of
   * the `collection`.
   *
   * Note: This function can only succeed once per collection.
   *
   * - `collection`: The identifier of the collection to change.
   * - `max_supply`: The maximum amount of items a collection could have.
   *
   * Emits `CollectionMaxSupplySet` event when successful.
   **/
  | { name: 'SetCollectionMaxSupply'; params: { collection: number; maxSupply: number } }
  /**
   * Set (or reset) the price for an item.
   *
   * Origin must be Signed and must be the owner of the asset `item`.
   *
   * - `collection`: The collection of the item.
   * - `item`: The item to set the price for.
   * - `price`: The price for the item. Pass `None`, to reset the price.
   * - `buyer`: Restricts the buy operation to a specific account.
   *
   * Emits `ItemPriceSet` on success if the price is not `None`.
   * Emits `ItemPriceRemoved` on success if the price is `None`.
   **/
  | {
      name: 'SetPrice';
      params: {
        collection: number;
        item: number;
        price?: bigint | undefined;
        whitelistedBuyer?: MultiAddress | undefined;
      };
    }
  /**
   * Allows to buy an item if it's up for sale.
   *
   * Origin must be Signed and must not be the owner of the `item`.
   *
   * - `collection`: The collection of the item.
   * - `item`: The item the sender wants to buy.
   * - `bid_price`: The price the sender is willing to pay.
   *
   * Emits `ItemBought` on success.
   **/
  | { name: 'BuyItem'; params: { collection: number; item: number; bidPrice: bigint } };

export type PalletUniquesCallLike =
  /**
   * Issue a new collection of non-fungible items from a public origin.
   *
   * This new collection has no items initially and its owner is the origin.
   *
   * The origin must conform to the configured `CreateOrigin` and have sufficient funds free.
   *
   * `ItemDeposit` funds of sender are reserved.
   *
   * Parameters:
   * - `collection`: The identifier of the new collection. This must not be currently in use.
   * - `admin`: The admin of this collection. The admin is the initial address of each
   * member of the collection's admin team.
   *
   * Emits `Created` event when successful.
   *
   * Weight: `O(1)`
   **/
  | { name: 'Create'; params: { collection: number; admin: MultiAddressLike } }
  /**
   * Issue a new collection of non-fungible items from a privileged origin.
   *
   * This new collection has no items initially.
   *
   * The origin must conform to `ForceOrigin`.
   *
   * Unlike `create`, no funds are reserved.
   *
   * - `collection`: The identifier of the new item. This must not be currently in use.
   * - `owner`: The owner of this collection of items. The owner has full superuser
   * permissions
   * over this item, but may later change and configure the permissions using
   * `transfer_ownership` and `set_team`.
   *
   * Emits `ForceCreated` event when successful.
   *
   * Weight: `O(1)`
   **/
  | { name: 'ForceCreate'; params: { collection: number; owner: MultiAddressLike; freeHolding: boolean } }
  /**
   * Destroy a collection of fungible items.
   *
   * The origin must conform to `ForceOrigin` or must be `Signed` and the sender must be the
   * owner of the `collection`.
   *
   * - `collection`: The identifier of the collection to be destroyed.
   * - `witness`: Information on the items minted in the collection. This must be
   * correct.
   *
   * Emits `Destroyed` event when successful.
   *
   * Weight: `O(n + m)` where:
   * - `n = witness.items`
   * - `m = witness.item_metadatas`
   * - `a = witness.attributes`
   **/
  | { name: 'Destroy'; params: { collection: number; witness: PalletUniquesDestroyWitness } }
  /**
   * Mint an item of a particular collection.
   *
   * The origin must be Signed and the sender must be the Issuer of the `collection`.
   *
   * - `collection`: The collection of the item to be minted.
   * - `item`: The item value of the item to be minted.
   * - `beneficiary`: The initial owner of the minted item.
   *
   * Emits `Issued` event when successful.
   *
   * Weight: `O(1)`
   **/
  | { name: 'Mint'; params: { collection: number; item: number; owner: MultiAddressLike } }
  /**
   * Destroy a single item.
   *
   * Origin must be Signed and the signing account must be either:
   * - the Admin of the `collection`;
   * - the Owner of the `item`;
   *
   * - `collection`: The collection of the item to be burned.
   * - `item`: The item of the item to be burned.
   * - `check_owner`: If `Some` then the operation will fail with `WrongOwner` unless the
   * item is owned by this value.
   *
   * Emits `Burned` with the actual amount burned.
   *
   * Weight: `O(1)`
   * Modes: `check_owner.is_some()`.
   **/
  | { name: 'Burn'; params: { collection: number; item: number; checkOwner?: MultiAddressLike | undefined } }
  /**
   * Move an item from the sender account to another.
   *
   * This resets the approved account of the item.
   *
   * Origin must be Signed and the signing account must be either:
   * - the Admin of the `collection`;
   * - the Owner of the `item`;
   * - the approved delegate for the `item` (in this case, the approval is reset).
   *
   * Arguments:
   * - `collection`: The collection of the item to be transferred.
   * - `item`: The item of the item to be transferred.
   * - `dest`: The account to receive ownership of the item.
   *
   * Emits `Transferred`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'Transfer'; params: { collection: number; item: number; dest: MultiAddressLike } }
  /**
   * Reevaluate the deposits on some items.
   *
   * Origin must be Signed and the sender should be the Owner of the `collection`.
   *
   * - `collection`: The collection to be frozen.
   * - `items`: The items of the collection whose deposits will be reevaluated.
   *
   * NOTE: This exists as a best-effort function. Any items which are unknown or
   * in the case that the owner account does not have reservable funds to pay for a
   * deposit increase are ignored. Generally the owner isn't going to call this on items
   * whose existing deposit is less than the refreshed deposit as it would only cost them,
   * so it's of little consequence.
   *
   * It will still return an error in the case that the collection is unknown of the signer
   * is not permitted to call it.
   *
   * Weight: `O(items.len())`
   **/
  | { name: 'Redeposit'; params: { collection: number; items: Array<number> } }
  /**
   * Disallow further unprivileged transfer of an item.
   *
   * Origin must be Signed and the sender should be the Freezer of the `collection`.
   *
   * - `collection`: The collection of the item to be frozen.
   * - `item`: The item of the item to be frozen.
   *
   * Emits `Frozen`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'Freeze'; params: { collection: number; item: number } }
  /**
   * Re-allow unprivileged transfer of an item.
   *
   * Origin must be Signed and the sender should be the Freezer of the `collection`.
   *
   * - `collection`: The collection of the item to be thawed.
   * - `item`: The item of the item to be thawed.
   *
   * Emits `Thawed`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'Thaw'; params: { collection: number; item: number } }
  /**
   * Disallow further unprivileged transfers for a whole collection.
   *
   * Origin must be Signed and the sender should be the Freezer of the `collection`.
   *
   * - `collection`: The collection to be frozen.
   *
   * Emits `CollectionFrozen`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'FreezeCollection'; params: { collection: number } }
  /**
   * Re-allow unprivileged transfers for a whole collection.
   *
   * Origin must be Signed and the sender should be the Admin of the `collection`.
   *
   * - `collection`: The collection to be thawed.
   *
   * Emits `CollectionThawed`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'ThawCollection'; params: { collection: number } }
  /**
   * Change the Owner of a collection.
   *
   * Origin must be Signed and the sender should be the Owner of the `collection`.
   *
   * - `collection`: The collection whose owner should be changed.
   * - `owner`: The new Owner of this collection. They must have called
   * `set_accept_ownership` with `collection` in order for this operation to succeed.
   *
   * Emits `OwnerChanged`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'TransferOwnership'; params: { collection: number; newOwner: MultiAddressLike } }
  /**
   * Change the Issuer, Admin and Freezer of a collection.
   *
   * Origin must be Signed and the sender should be the Owner of the `collection`.
   *
   * - `collection`: The collection whose team should be changed.
   * - `issuer`: The new Issuer of this collection.
   * - `admin`: The new Admin of this collection.
   * - `freezer`: The new Freezer of this collection.
   *
   * Emits `TeamChanged`.
   *
   * Weight: `O(1)`
   **/
  | {
      name: 'SetTeam';
      params: { collection: number; issuer: MultiAddressLike; admin: MultiAddressLike; freezer: MultiAddressLike };
    }
  /**
   * Approve an item to be transferred by a delegated third-party account.
   *
   * The origin must conform to `ForceOrigin` or must be `Signed` and the sender must be
   * either the owner of the `item` or the admin of the collection.
   *
   * - `collection`: The collection of the item to be approved for delegated transfer.
   * - `item`: The item of the item to be approved for delegated transfer.
   * - `delegate`: The account to delegate permission to transfer the item.
   *
   * Important NOTE: The `approved` account gets reset after each transfer.
   *
   * Emits `ApprovedTransfer` on success.
   *
   * Weight: `O(1)`
   **/
  | { name: 'ApproveTransfer'; params: { collection: number; item: number; delegate: MultiAddressLike } }
  /**
   * Cancel the prior approval for the transfer of an item by a delegate.
   *
   * Origin must be either:
   * - the `Force` origin;
   * - `Signed` with the signer being the Admin of the `collection`;
   * - `Signed` with the signer being the Owner of the `item`;
   *
   * Arguments:
   * - `collection`: The collection of the item of whose approval will be cancelled.
   * - `item`: The item of the item of whose approval will be cancelled.
   * - `maybe_check_delegate`: If `Some` will ensure that the given account is the one to
   * which permission of transfer is delegated.
   *
   * Emits `ApprovalCancelled` on success.
   *
   * Weight: `O(1)`
   **/
  | {
      name: 'CancelApproval';
      params: { collection: number; item: number; maybeCheckDelegate?: MultiAddressLike | undefined };
    }
  /**
   * Alter the attributes of a given item.
   *
   * Origin must be `ForceOrigin`.
   *
   * - `collection`: The identifier of the item.
   * - `owner`: The new Owner of this item.
   * - `issuer`: The new Issuer of this item.
   * - `admin`: The new Admin of this item.
   * - `freezer`: The new Freezer of this item.
   * - `free_holding`: Whether a deposit is taken for holding an item of this collection.
   * - `is_frozen`: Whether this collection is frozen except for permissioned/admin
   * instructions.
   *
   * Emits `ItemStatusChanged` with the identity of the item.
   *
   * Weight: `O(1)`
   **/
  | {
      name: 'ForceItemStatus';
      params: {
        collection: number;
        owner: MultiAddressLike;
        issuer: MultiAddressLike;
        admin: MultiAddressLike;
        freezer: MultiAddressLike;
        freeHolding: boolean;
        isFrozen: boolean;
      };
    }
  /**
   * Set an attribute for a collection or item.
   *
   * Origin must be either `ForceOrigin` or Signed and the sender should be the Owner of the
   * `collection`.
   *
   * If the origin is Signed, then funds of signer are reserved according to the formula:
   * `MetadataDepositBase + DepositPerByte * (key.len + value.len)` taking into
   * account any already reserved funds.
   *
   * - `collection`: The identifier of the collection whose item's metadata to set.
   * - `maybe_item`: The identifier of the item whose metadata to set.
   * - `key`: The key of the attribute.
   * - `value`: The value to which to set the attribute.
   *
   * Emits `AttributeSet`.
   *
   * Weight: `O(1)`
   **/
  | {
      name: 'SetAttribute';
      params: { collection: number; maybeItem?: number | undefined; key: BytesLike; value: BytesLike };
    }
  /**
   * Clear an attribute for a collection or item.
   *
   * Origin must be either `ForceOrigin` or Signed and the sender should be the Owner of the
   * `collection`.
   *
   * Any deposit is freed for the collection's owner.
   *
   * - `collection`: The identifier of the collection whose item's metadata to clear.
   * - `maybe_item`: The identifier of the item whose metadata to clear.
   * - `key`: The key of the attribute.
   *
   * Emits `AttributeCleared`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'ClearAttribute'; params: { collection: number; maybeItem?: number | undefined; key: BytesLike } }
  /**
   * Set the metadata for an item.
   *
   * Origin must be either `ForceOrigin` or Signed and the sender should be the Owner of the
   * `collection`.
   *
   * If the origin is Signed, then funds of signer are reserved according to the formula:
   * `MetadataDepositBase + DepositPerByte * data.len` taking into
   * account any already reserved funds.
   *
   * - `collection`: The identifier of the collection whose item's metadata to set.
   * - `item`: The identifier of the item whose metadata to set.
   * - `data`: The general information of this item. Limited in length by `StringLimit`.
   * - `is_frozen`: Whether the metadata should be frozen against further changes.
   *
   * Emits `MetadataSet`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'SetMetadata'; params: { collection: number; item: number; data: BytesLike; isFrozen: boolean } }
  /**
   * Clear the metadata for an item.
   *
   * Origin must be either `ForceOrigin` or Signed and the sender should be the Owner of the
   * `item`.
   *
   * Any deposit is freed for the collection's owner.
   *
   * - `collection`: The identifier of the collection whose item's metadata to clear.
   * - `item`: The identifier of the item whose metadata to clear.
   *
   * Emits `MetadataCleared`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'ClearMetadata'; params: { collection: number; item: number } }
  /**
   * Set the metadata for a collection.
   *
   * Origin must be either `ForceOrigin` or `Signed` and the sender should be the Owner of
   * the `collection`.
   *
   * If the origin is `Signed`, then funds of signer are reserved according to the formula:
   * `MetadataDepositBase + DepositPerByte * data.len` taking into
   * account any already reserved funds.
   *
   * - `collection`: The identifier of the item whose metadata to update.
   * - `data`: The general information of this item. Limited in length by `StringLimit`.
   * - `is_frozen`: Whether the metadata should be frozen against further changes.
   *
   * Emits `CollectionMetadataSet`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'SetCollectionMetadata'; params: { collection: number; data: BytesLike; isFrozen: boolean } }
  /**
   * Clear the metadata for a collection.
   *
   * Origin must be either `ForceOrigin` or `Signed` and the sender should be the Owner of
   * the `collection`.
   *
   * Any deposit is freed for the collection's owner.
   *
   * - `collection`: The identifier of the collection whose metadata to clear.
   *
   * Emits `CollectionMetadataCleared`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'ClearCollectionMetadata'; params: { collection: number } }
  /**
   * Set (or reset) the acceptance of ownership for a particular account.
   *
   * Origin must be `Signed` and if `maybe_collection` is `Some`, then the signer must have a
   * provider reference.
   *
   * - `maybe_collection`: The identifier of the collection whose ownership the signer is
   * willing to accept, or if `None`, an indication that the signer is willing to accept no
   * ownership transferal.
   *
   * Emits `OwnershipAcceptanceChanged`.
   **/
  | { name: 'SetAcceptOwnership'; params: { maybeCollection?: number | undefined } }
  /**
   * Set the maximum amount of items a collection could have.
   *
   * Origin must be either `ForceOrigin` or `Signed` and the sender should be the Owner of
   * the `collection`.
   *
   * Note: This function can only succeed once per collection.
   *
   * - `collection`: The identifier of the collection to change.
   * - `max_supply`: The maximum amount of items a collection could have.
   *
   * Emits `CollectionMaxSupplySet` event when successful.
   **/
  | { name: 'SetCollectionMaxSupply'; params: { collection: number; maxSupply: number } }
  /**
   * Set (or reset) the price for an item.
   *
   * Origin must be Signed and must be the owner of the asset `item`.
   *
   * - `collection`: The collection of the item.
   * - `item`: The item to set the price for.
   * - `price`: The price for the item. Pass `None`, to reset the price.
   * - `buyer`: Restricts the buy operation to a specific account.
   *
   * Emits `ItemPriceSet` on success if the price is not `None`.
   * Emits `ItemPriceRemoved` on success if the price is `None`.
   **/
  | {
      name: 'SetPrice';
      params: {
        collection: number;
        item: number;
        price?: bigint | undefined;
        whitelistedBuyer?: MultiAddressLike | undefined;
      };
    }
  /**
   * Allows to buy an item if it's up for sale.
   *
   * Origin must be Signed and must not be the owner of the `item`.
   *
   * - `collection`: The collection of the item.
   * - `item`: The item the sender wants to buy.
   * - `bid_price`: The price the sender is willing to pay.
   *
   * Emits `ItemBought` on success.
   **/
  | { name: 'BuyItem'; params: { collection: number; item: number; bidPrice: bigint } };

export type PalletUniquesDestroyWitness = { items: number; itemMetadatas: number; attributes: number };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletNftsCall =
  /**
   * Issue a new collection of non-fungible items from a public origin.
   *
   * This new collection has no items initially and its owner is the origin.
   *
   * The origin must be Signed and the sender must have sufficient funds free.
   *
   * `CollectionDeposit` funds of sender are reserved.
   *
   * Parameters:
   * - `admin`: The admin of this collection. The admin is the initial address of each
   * member of the collection's admin team.
   *
   * Emits `Created` event when successful.
   *
   * Weight: `O(1)`
   **/
  | { name: 'Create'; params: { admin: MultiAddress; config: PalletNftsCollectionConfig } }
  /**
   * Issue a new collection of non-fungible items from a privileged origin.
   *
   * This new collection has no items initially.
   *
   * The origin must conform to `ForceOrigin`.
   *
   * Unlike `create`, no funds are reserved.
   *
   * - `owner`: The owner of this collection of items. The owner has full superuser
   * permissions over this item, but may later change and configure the permissions using
   * `transfer_ownership` and `set_team`.
   *
   * Emits `ForceCreated` event when successful.
   *
   * Weight: `O(1)`
   **/
  | { name: 'ForceCreate'; params: { owner: MultiAddress; config: PalletNftsCollectionConfig } }
  /**
   * Destroy a collection of fungible items.
   *
   * The origin must conform to `ForceOrigin` or must be `Signed` and the sender must be the
   * owner of the `collection`.
   *
   * NOTE: The collection must have 0 items to be destroyed.
   *
   * - `collection`: The identifier of the collection to be destroyed.
   * - `witness`: Information on the items minted in the collection. This must be
   * correct.
   *
   * Emits `Destroyed` event when successful.
   *
   * Weight: `O(m + c + a)` where:
   * - `m = witness.item_metadatas`
   * - `c = witness.item_configs`
   * - `a = witness.attributes`
   **/
  | { name: 'Destroy'; params: { collection: number; witness: PalletNftsDestroyWitness } }
  /**
   * Mint an item of a particular collection.
   *
   * The origin must be Signed and the sender must comply with the `mint_settings` rules.
   *
   * - `collection`: The collection of the item to be minted.
   * - `item`: An identifier of the new item.
   * - `mint_to`: Account into which the item will be minted.
   * - `witness_data`: When the mint type is `HolderOf(collection_id)`, then the owned
   * item_id from that collection needs to be provided within the witness data object. If
   * the mint price is set, then it should be additionally confirmed in the `witness_data`.
   *
   * Note: the deposit will be taken from the `origin` and not the `owner` of the `item`.
   *
   * Emits `Issued` event when successful.
   *
   * Weight: `O(1)`
   **/
  | {
      name: 'Mint';
      params: {
        collection: number;
        item: number;
        mintTo: MultiAddress;
        witnessData?: PalletNftsMintWitness | undefined;
      };
    }
  /**
   * Mint an item of a particular collection from a privileged origin.
   *
   * The origin must conform to `ForceOrigin` or must be `Signed` and the sender must be the
   * Issuer of the `collection`.
   *
   * - `collection`: The collection of the item to be minted.
   * - `item`: An identifier of the new item.
   * - `mint_to`: Account into which the item will be minted.
   * - `item_config`: A config of the new item.
   *
   * Emits `Issued` event when successful.
   *
   * Weight: `O(1)`
   **/
  | {
      name: 'ForceMint';
      params: { collection: number; item: number; mintTo: MultiAddress; itemConfig: PalletNftsItemConfig };
    }
  /**
   * Destroy a single item.
   *
   * The origin must conform to `ForceOrigin` or must be Signed and the signing account must
   * be the owner of the `item`.
   *
   * - `collection`: The collection of the item to be burned.
   * - `item`: The item to be burned.
   *
   * Emits `Burned`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'Burn'; params: { collection: number; item: number } }
  /**
   * Move an item from the sender account to another.
   *
   * Origin must be Signed and the signing account must be either:
   * - the Owner of the `item`;
   * - the approved delegate for the `item` (in this case, the approval is reset).
   *
   * Arguments:
   * - `collection`: The collection of the item to be transferred.
   * - `item`: The item to be transferred.
   * - `dest`: The account to receive ownership of the item.
   *
   * Emits `Transferred`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'Transfer'; params: { collection: number; item: number; dest: MultiAddress } }
  /**
   * Re-evaluate the deposits on some items.
   *
   * Origin must be Signed and the sender should be the Owner of the `collection`.
   *
   * - `collection`: The collection of the items to be reevaluated.
   * - `items`: The items of the collection whose deposits will be reevaluated.
   *
   * NOTE: This exists as a best-effort function. Any items which are unknown or
   * in the case that the owner account does not have reservable funds to pay for a
   * deposit increase are ignored. Generally the owner isn't going to call this on items
   * whose existing deposit is less than the refreshed deposit as it would only cost them,
   * so it's of little consequence.
   *
   * It will still return an error in the case that the collection is unknown or the signer
   * is not permitted to call it.
   *
   * Weight: `O(items.len())`
   **/
  | { name: 'Redeposit'; params: { collection: number; items: Array<number> } }
  /**
   * Disallow further unprivileged transfer of an item.
   *
   * Origin must be Signed and the sender should be the Freezer of the `collection`.
   *
   * - `collection`: The collection of the item to be changed.
   * - `item`: The item to become non-transferable.
   *
   * Emits `ItemTransferLocked`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'LockItemTransfer'; params: { collection: number; item: number } }
  /**
   * Re-allow unprivileged transfer of an item.
   *
   * Origin must be Signed and the sender should be the Freezer of the `collection`.
   *
   * - `collection`: The collection of the item to be changed.
   * - `item`: The item to become transferable.
   *
   * Emits `ItemTransferUnlocked`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'UnlockItemTransfer'; params: { collection: number; item: number } }
  /**
   * Disallows specified settings for the whole collection.
   *
   * Origin must be Signed and the sender should be the Owner of the `collection`.
   *
   * - `collection`: The collection to be locked.
   * - `lock_settings`: The settings to be locked.
   *
   * Note: it's possible to only lock(set) the setting, but not to unset it.
   *
   * Emits `CollectionLocked`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'LockCollection'; params: { collection: number; lockSettings: PalletNftsBitFlags } }
  /**
   * Change the Owner of a collection.
   *
   * Origin must be Signed and the sender should be the Owner of the `collection`.
   *
   * - `collection`: The collection whose owner should be changed.
   * - `owner`: The new Owner of this collection. They must have called
   * `set_accept_ownership` with `collection` in order for this operation to succeed.
   *
   * Emits `OwnerChanged`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'TransferOwnership'; params: { collection: number; newOwner: MultiAddress } }
  /**
   * Change the Issuer, Admin and Freezer of a collection.
   *
   * Origin must be either `ForceOrigin` or Signed and the sender should be the Owner of the
   * `collection`.
   *
   * Note: by setting the role to `None` only the `ForceOrigin` will be able to change it
   * after to `Some(account)`.
   *
   * - `collection`: The collection whose team should be changed.
   * - `issuer`: The new Issuer of this collection.
   * - `admin`: The new Admin of this collection.
   * - `freezer`: The new Freezer of this collection.
   *
   * Emits `TeamChanged`.
   *
   * Weight: `O(1)`
   **/
  | {
      name: 'SetTeam';
      params: {
        collection: number;
        issuer?: MultiAddress | undefined;
        admin?: MultiAddress | undefined;
        freezer?: MultiAddress | undefined;
      };
    }
  /**
   * Change the Owner of a collection.
   *
   * Origin must be `ForceOrigin`.
   *
   * - `collection`: The identifier of the collection.
   * - `owner`: The new Owner of this collection.
   *
   * Emits `OwnerChanged`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'ForceCollectionOwner'; params: { collection: number; owner: MultiAddress } }
  /**
   * Change the config of a collection.
   *
   * Origin must be `ForceOrigin`.
   *
   * - `collection`: The identifier of the collection.
   * - `config`: The new config of this collection.
   *
   * Emits `CollectionConfigChanged`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'ForceCollectionConfig'; params: { collection: number; config: PalletNftsCollectionConfig } }
  /**
   * Approve an item to be transferred by a delegated third-party account.
   *
   * Origin must be either `ForceOrigin` or Signed and the sender should be the Owner of the
   * `item`.
   *
   * - `collection`: The collection of the item to be approved for delegated transfer.
   * - `item`: The item to be approved for delegated transfer.
   * - `delegate`: The account to delegate permission to transfer the item.
   * - `maybe_deadline`: Optional deadline for the approval. Specified by providing the
   * number of blocks after which the approval will expire
   *
   * Emits `TransferApproved` on success.
   *
   * Weight: `O(1)`
   **/
  | {
      name: 'ApproveTransfer';
      params: { collection: number; item: number; delegate: MultiAddress; maybeDeadline?: number | undefined };
    }
  /**
   * Cancel one of the transfer approvals for a specific item.
   *
   * Origin must be either:
   * - the `Force` origin;
   * - `Signed` with the signer being the Owner of the `item`;
   *
   * Arguments:
   * - `collection`: The collection of the item of whose approval will be cancelled.
   * - `item`: The item of the collection of whose approval will be cancelled.
   * - `delegate`: The account that is going to loose their approval.
   *
   * Emits `ApprovalCancelled` on success.
   *
   * Weight: `O(1)`
   **/
  | { name: 'CancelApproval'; params: { collection: number; item: number; delegate: MultiAddress } }
  /**
   * Cancel all the approvals of a specific item.
   *
   * Origin must be either:
   * - the `Force` origin;
   * - `Signed` with the signer being the Owner of the `item`;
   *
   * Arguments:
   * - `collection`: The collection of the item of whose approvals will be cleared.
   * - `item`: The item of the collection of whose approvals will be cleared.
   *
   * Emits `AllApprovalsCancelled` on success.
   *
   * Weight: `O(1)`
   **/
  | { name: 'ClearAllTransferApprovals'; params: { collection: number; item: number } }
  /**
   * Disallows changing the metadata or attributes of the item.
   *
   * Origin must be either `ForceOrigin` or Signed and the sender should be the Admin
   * of the `collection`.
   *
   * - `collection`: The collection if the `item`.
   * - `item`: An item to be locked.
   * - `lock_metadata`: Specifies whether the metadata should be locked.
   * - `lock_attributes`: Specifies whether the attributes in the `CollectionOwner` namespace
   * should be locked.
   *
   * Note: `lock_attributes` affects the attributes in the `CollectionOwner` namespace only.
   * When the metadata or attributes are locked, it won't be possible the unlock them.
   *
   * Emits `ItemPropertiesLocked`.
   *
   * Weight: `O(1)`
   **/
  | {
      name: 'LockItemProperties';
      params: { collection: number; item: number; lockMetadata: boolean; lockAttributes: boolean };
    }
  /**
   * Set an attribute for a collection or item.
   *
   * Origin must be Signed and must conform to the namespace ruleset:
   * - `CollectionOwner` namespace could be modified by the `collection` Admin only;
   * - `ItemOwner` namespace could be modified by the `maybe_item` owner only. `maybe_item`
   * should be set in that case;
   * - `Account(AccountId)` namespace could be modified only when the `origin` was given a
   * permission to do so;
   *
   * The funds of `origin` are reserved according to the formula:
   * `AttributeDepositBase + DepositPerByte * (key.len + value.len)` taking into
   * account any already reserved funds.
   *
   * - `collection`: The identifier of the collection whose item's metadata to set.
   * - `maybe_item`: The identifier of the item whose metadata to set.
   * - `namespace`: Attribute's namespace.
   * - `key`: The key of the attribute.
   * - `value`: The value to which to set the attribute.
   *
   * Emits `AttributeSet`.
   *
   * Weight: `O(1)`
   **/
  | {
      name: 'SetAttribute';
      params: {
        collection: number;
        maybeItem?: number | undefined;
        namespace: PalletNftsAttributeNamespace;
        key: Bytes;
        value: Bytes;
      };
    }
  /**
   * Force-set an attribute for a collection or item.
   *
   * Origin must be `ForceOrigin`.
   *
   * If the attribute already exists and it was set by another account, the deposit
   * will be returned to the previous owner.
   *
   * - `set_as`: An optional owner of the attribute.
   * - `collection`: The identifier of the collection whose item's metadata to set.
   * - `maybe_item`: The identifier of the item whose metadata to set.
   * - `namespace`: Attribute's namespace.
   * - `key`: The key of the attribute.
   * - `value`: The value to which to set the attribute.
   *
   * Emits `AttributeSet`.
   *
   * Weight: `O(1)`
   **/
  | {
      name: 'ForceSetAttribute';
      params: {
        setAs?: AccountId32 | undefined;
        collection: number;
        maybeItem?: number | undefined;
        namespace: PalletNftsAttributeNamespace;
        key: Bytes;
        value: Bytes;
      };
    }
  /**
   * Clear an attribute for a collection or item.
   *
   * Origin must be either `ForceOrigin` or Signed and the sender should be the Owner of the
   * attribute.
   *
   * Any deposit is freed for the collection's owner.
   *
   * - `collection`: The identifier of the collection whose item's metadata to clear.
   * - `maybe_item`: The identifier of the item whose metadata to clear.
   * - `namespace`: Attribute's namespace.
   * - `key`: The key of the attribute.
   *
   * Emits `AttributeCleared`.
   *
   * Weight: `O(1)`
   **/
  | {
      name: 'ClearAttribute';
      params: {
        collection: number;
        maybeItem?: number | undefined;
        namespace: PalletNftsAttributeNamespace;
        key: Bytes;
      };
    }
  /**
   * Approve item's attributes to be changed by a delegated third-party account.
   *
   * Origin must be Signed and must be an owner of the `item`.
   *
   * - `collection`: A collection of the item.
   * - `item`: The item that holds attributes.
   * - `delegate`: The account to delegate permission to change attributes of the item.
   *
   * Emits `ItemAttributesApprovalAdded` on success.
   **/
  | { name: 'ApproveItemAttributes'; params: { collection: number; item: number; delegate: MultiAddress } }
  /**
   * Cancel the previously provided approval to change item's attributes.
   * All the previously set attributes by the `delegate` will be removed.
   *
   * Origin must be Signed and must be an owner of the `item`.
   *
   * - `collection`: Collection that the item is contained within.
   * - `item`: The item that holds attributes.
   * - `delegate`: The previously approved account to remove.
   *
   * Emits `ItemAttributesApprovalRemoved` on success.
   **/
  | {
      name: 'CancelItemAttributesApproval';
      params: {
        collection: number;
        item: number;
        delegate: MultiAddress;
        witness: PalletNftsCancelAttributesApprovalWitness;
      };
    }
  /**
   * Set the metadata for an item.
   *
   * Origin must be either `ForceOrigin` or Signed and the sender should be the Admin of the
   * `collection`.
   *
   * If the origin is Signed, then funds of signer are reserved according to the formula:
   * `MetadataDepositBase + DepositPerByte * data.len` taking into
   * account any already reserved funds.
   *
   * - `collection`: The identifier of the collection whose item's metadata to set.
   * - `item`: The identifier of the item whose metadata to set.
   * - `data`: The general information of this item. Limited in length by `StringLimit`.
   *
   * Emits `ItemMetadataSet`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'SetMetadata'; params: { collection: number; item: number; data: Bytes } }
  /**
   * Clear the metadata for an item.
   *
   * Origin must be either `ForceOrigin` or Signed and the sender should be the Admin of the
   * `collection`.
   *
   * Any deposit is freed for the collection's owner.
   *
   * - `collection`: The identifier of the collection whose item's metadata to clear.
   * - `item`: The identifier of the item whose metadata to clear.
   *
   * Emits `ItemMetadataCleared`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'ClearMetadata'; params: { collection: number; item: number } }
  /**
   * Set the metadata for a collection.
   *
   * Origin must be either `ForceOrigin` or `Signed` and the sender should be the Admin of
   * the `collection`.
   *
   * If the origin is `Signed`, then funds of signer are reserved according to the formula:
   * `MetadataDepositBase + DepositPerByte * data.len` taking into
   * account any already reserved funds.
   *
   * - `collection`: The identifier of the item whose metadata to update.
   * - `data`: The general information of this item. Limited in length by `StringLimit`.
   *
   * Emits `CollectionMetadataSet`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'SetCollectionMetadata'; params: { collection: number; data: Bytes } }
  /**
   * Clear the metadata for a collection.
   *
   * Origin must be either `ForceOrigin` or `Signed` and the sender should be the Admin of
   * the `collection`.
   *
   * Any deposit is freed for the collection's owner.
   *
   * - `collection`: The identifier of the collection whose metadata to clear.
   *
   * Emits `CollectionMetadataCleared`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'ClearCollectionMetadata'; params: { collection: number } }
  /**
   * Set (or reset) the acceptance of ownership for a particular account.
   *
   * Origin must be `Signed` and if `maybe_collection` is `Some`, then the signer must have a
   * provider reference.
   *
   * - `maybe_collection`: The identifier of the collection whose ownership the signer is
   * willing to accept, or if `None`, an indication that the signer is willing to accept no
   * ownership transferal.
   *
   * Emits `OwnershipAcceptanceChanged`.
   **/
  | { name: 'SetAcceptOwnership'; params: { maybeCollection?: number | undefined } }
  /**
   * Set the maximum number of items a collection could have.
   *
   * Origin must be either `ForceOrigin` or `Signed` and the sender should be the Owner of
   * the `collection`.
   *
   * - `collection`: The identifier of the collection to change.
   * - `max_supply`: The maximum number of items a collection could have.
   *
   * Emits `CollectionMaxSupplySet` event when successful.
   **/
  | { name: 'SetCollectionMaxSupply'; params: { collection: number; maxSupply: number } }
  /**
   * Update mint settings.
   *
   * Origin must be either `ForceOrigin` or `Signed` and the sender should be the Issuer
   * of the `collection`.
   *
   * - `collection`: The identifier of the collection to change.
   * - `mint_settings`: The new mint settings.
   *
   * Emits `CollectionMintSettingsUpdated` event when successful.
   **/
  | { name: 'UpdateMintSettings'; params: { collection: number; mintSettings: PalletNftsMintSettings } }
  /**
   * Set (or reset) the price for an item.
   *
   * Origin must be Signed and must be the owner of the `item`.
   *
   * - `collection`: The collection of the item.
   * - `item`: The item to set the price for.
   * - `price`: The price for the item. Pass `None`, to reset the price.
   * - `buyer`: Restricts the buy operation to a specific account.
   *
   * Emits `ItemPriceSet` on success if the price is not `None`.
   * Emits `ItemPriceRemoved` on success if the price is `None`.
   **/
  | {
      name: 'SetPrice';
      params: {
        collection: number;
        item: number;
        price?: bigint | undefined;
        whitelistedBuyer?: MultiAddress | undefined;
      };
    }
  /**
   * Allows to buy an item if it's up for sale.
   *
   * Origin must be Signed and must not be the owner of the `item`.
   *
   * - `collection`: The collection of the item.
   * - `item`: The item the sender wants to buy.
   * - `bid_price`: The price the sender is willing to pay.
   *
   * Emits `ItemBought` on success.
   **/
  | { name: 'BuyItem'; params: { collection: number; item: number; bidPrice: bigint } }
  /**
   * Allows to pay the tips.
   *
   * Origin must be Signed.
   *
   * - `tips`: Tips array.
   *
   * Emits `TipSent` on every tip transfer.
   **/
  | { name: 'PayTips'; params: { tips: Array<PalletNftsItemTip> } }
  /**
   * Register a new atomic swap, declaring an intention to send an `item` in exchange for
   * `desired_item` from origin to target on the current blockchain.
   * The target can execute the swap during the specified `duration` of blocks (if set).
   * Additionally, the price could be set for the desired `item`.
   *
   * Origin must be Signed and must be an owner of the `item`.
   *
   * - `collection`: The collection of the item.
   * - `item`: The item an owner wants to give.
   * - `desired_collection`: The collection of the desired item.
   * - `desired_item`: The desired item an owner wants to receive.
   * - `maybe_price`: The price an owner is willing to pay or receive for the desired `item`.
   * - `duration`: A deadline for the swap. Specified by providing the number of blocks
   * after which the swap will expire.
   *
   * Emits `SwapCreated` on success.
   **/
  | {
      name: 'CreateSwap';
      params: {
        offeredCollection: number;
        offeredItem: number;
        desiredCollection: number;
        maybeDesiredItem?: number | undefined;
        maybePrice?: PalletNftsPriceWithDirection | undefined;
        duration: number;
      };
    }
  /**
   * Cancel an atomic swap.
   *
   * Origin must be Signed.
   * Origin must be an owner of the `item` if the deadline hasn't expired.
   *
   * - `collection`: The collection of the item.
   * - `item`: The item an owner wants to give.
   *
   * Emits `SwapCancelled` on success.
   **/
  | { name: 'CancelSwap'; params: { offeredCollection: number; offeredItem: number } }
  /**
   * Claim an atomic swap.
   * This method executes a pending swap, that was created by a counterpart before.
   *
   * Origin must be Signed and must be an owner of the `item`.
   *
   * - `send_collection`: The collection of the item to be sent.
   * - `send_item`: The item to be sent.
   * - `receive_collection`: The collection of the item to be received.
   * - `receive_item`: The item to be received.
   * - `witness_price`: A price that was previously agreed on.
   *
   * Emits `SwapClaimed` on success.
   **/
  | {
      name: 'ClaimSwap';
      params: {
        sendCollection: number;
        sendItem: number;
        receiveCollection: number;
        receiveItem: number;
        witnessPrice?: PalletNftsPriceWithDirection | undefined;
      };
    }
  /**
   * Mint an item by providing the pre-signed approval.
   *
   * Origin must be Signed.
   *
   * - `mint_data`: The pre-signed approval that consists of the information about the item,
   * its metadata, attributes, who can mint it (`None` for anyone) and until what block
   * number.
   * - `signature`: The signature of the `data` object.
   * - `signer`: The `data` object's signer. Should be an Issuer of the collection.
   *
   * Emits `Issued` on success.
   * Emits `AttributeSet` if the attributes were provided.
   * Emits `ItemMetadataSet` if the metadata was not empty.
   **/
  | {
      name: 'MintPreSigned';
      params: { mintData: PalletNftsPreSignedMint; signature: SpRuntimeMultiSignature; signer: AccountId32 };
    }
  /**
   * Set attributes for an item by providing the pre-signed approval.
   *
   * Origin must be Signed and must be an owner of the `data.item`.
   *
   * - `data`: The pre-signed approval that consists of the information about the item,
   * attributes to update and until what block number.
   * - `signature`: The signature of the `data` object.
   * - `signer`: The `data` object's signer. Should be an Admin of the collection for the
   * `CollectionOwner` namespace.
   *
   * Emits `AttributeSet` for each provided attribute.
   * Emits `ItemAttributesApprovalAdded` if the approval wasn't set before.
   * Emits `PreSignedAttributesSet` on success.
   **/
  | {
      name: 'SetAttributesPreSigned';
      params: { data: PalletNftsPreSignedAttributes; signature: SpRuntimeMultiSignature; signer: AccountId32 };
    };

export type PalletNftsCallLike =
  /**
   * Issue a new collection of non-fungible items from a public origin.
   *
   * This new collection has no items initially and its owner is the origin.
   *
   * The origin must be Signed and the sender must have sufficient funds free.
   *
   * `CollectionDeposit` funds of sender are reserved.
   *
   * Parameters:
   * - `admin`: The admin of this collection. The admin is the initial address of each
   * member of the collection's admin team.
   *
   * Emits `Created` event when successful.
   *
   * Weight: `O(1)`
   **/
  | { name: 'Create'; params: { admin: MultiAddressLike; config: PalletNftsCollectionConfig } }
  /**
   * Issue a new collection of non-fungible items from a privileged origin.
   *
   * This new collection has no items initially.
   *
   * The origin must conform to `ForceOrigin`.
   *
   * Unlike `create`, no funds are reserved.
   *
   * - `owner`: The owner of this collection of items. The owner has full superuser
   * permissions over this item, but may later change and configure the permissions using
   * `transfer_ownership` and `set_team`.
   *
   * Emits `ForceCreated` event when successful.
   *
   * Weight: `O(1)`
   **/
  | { name: 'ForceCreate'; params: { owner: MultiAddressLike; config: PalletNftsCollectionConfig } }
  /**
   * Destroy a collection of fungible items.
   *
   * The origin must conform to `ForceOrigin` or must be `Signed` and the sender must be the
   * owner of the `collection`.
   *
   * NOTE: The collection must have 0 items to be destroyed.
   *
   * - `collection`: The identifier of the collection to be destroyed.
   * - `witness`: Information on the items minted in the collection. This must be
   * correct.
   *
   * Emits `Destroyed` event when successful.
   *
   * Weight: `O(m + c + a)` where:
   * - `m = witness.item_metadatas`
   * - `c = witness.item_configs`
   * - `a = witness.attributes`
   **/
  | { name: 'Destroy'; params: { collection: number; witness: PalletNftsDestroyWitness } }
  /**
   * Mint an item of a particular collection.
   *
   * The origin must be Signed and the sender must comply with the `mint_settings` rules.
   *
   * - `collection`: The collection of the item to be minted.
   * - `item`: An identifier of the new item.
   * - `mint_to`: Account into which the item will be minted.
   * - `witness_data`: When the mint type is `HolderOf(collection_id)`, then the owned
   * item_id from that collection needs to be provided within the witness data object. If
   * the mint price is set, then it should be additionally confirmed in the `witness_data`.
   *
   * Note: the deposit will be taken from the `origin` and not the `owner` of the `item`.
   *
   * Emits `Issued` event when successful.
   *
   * Weight: `O(1)`
   **/
  | {
      name: 'Mint';
      params: {
        collection: number;
        item: number;
        mintTo: MultiAddressLike;
        witnessData?: PalletNftsMintWitness | undefined;
      };
    }
  /**
   * Mint an item of a particular collection from a privileged origin.
   *
   * The origin must conform to `ForceOrigin` or must be `Signed` and the sender must be the
   * Issuer of the `collection`.
   *
   * - `collection`: The collection of the item to be minted.
   * - `item`: An identifier of the new item.
   * - `mint_to`: Account into which the item will be minted.
   * - `item_config`: A config of the new item.
   *
   * Emits `Issued` event when successful.
   *
   * Weight: `O(1)`
   **/
  | {
      name: 'ForceMint';
      params: { collection: number; item: number; mintTo: MultiAddressLike; itemConfig: PalletNftsItemConfig };
    }
  /**
   * Destroy a single item.
   *
   * The origin must conform to `ForceOrigin` or must be Signed and the signing account must
   * be the owner of the `item`.
   *
   * - `collection`: The collection of the item to be burned.
   * - `item`: The item to be burned.
   *
   * Emits `Burned`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'Burn'; params: { collection: number; item: number } }
  /**
   * Move an item from the sender account to another.
   *
   * Origin must be Signed and the signing account must be either:
   * - the Owner of the `item`;
   * - the approved delegate for the `item` (in this case, the approval is reset).
   *
   * Arguments:
   * - `collection`: The collection of the item to be transferred.
   * - `item`: The item to be transferred.
   * - `dest`: The account to receive ownership of the item.
   *
   * Emits `Transferred`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'Transfer'; params: { collection: number; item: number; dest: MultiAddressLike } }
  /**
   * Re-evaluate the deposits on some items.
   *
   * Origin must be Signed and the sender should be the Owner of the `collection`.
   *
   * - `collection`: The collection of the items to be reevaluated.
   * - `items`: The items of the collection whose deposits will be reevaluated.
   *
   * NOTE: This exists as a best-effort function. Any items which are unknown or
   * in the case that the owner account does not have reservable funds to pay for a
   * deposit increase are ignored. Generally the owner isn't going to call this on items
   * whose existing deposit is less than the refreshed deposit as it would only cost them,
   * so it's of little consequence.
   *
   * It will still return an error in the case that the collection is unknown or the signer
   * is not permitted to call it.
   *
   * Weight: `O(items.len())`
   **/
  | { name: 'Redeposit'; params: { collection: number; items: Array<number> } }
  /**
   * Disallow further unprivileged transfer of an item.
   *
   * Origin must be Signed and the sender should be the Freezer of the `collection`.
   *
   * - `collection`: The collection of the item to be changed.
   * - `item`: The item to become non-transferable.
   *
   * Emits `ItemTransferLocked`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'LockItemTransfer'; params: { collection: number; item: number } }
  /**
   * Re-allow unprivileged transfer of an item.
   *
   * Origin must be Signed and the sender should be the Freezer of the `collection`.
   *
   * - `collection`: The collection of the item to be changed.
   * - `item`: The item to become transferable.
   *
   * Emits `ItemTransferUnlocked`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'UnlockItemTransfer'; params: { collection: number; item: number } }
  /**
   * Disallows specified settings for the whole collection.
   *
   * Origin must be Signed and the sender should be the Owner of the `collection`.
   *
   * - `collection`: The collection to be locked.
   * - `lock_settings`: The settings to be locked.
   *
   * Note: it's possible to only lock(set) the setting, but not to unset it.
   *
   * Emits `CollectionLocked`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'LockCollection'; params: { collection: number; lockSettings: PalletNftsBitFlags } }
  /**
   * Change the Owner of a collection.
   *
   * Origin must be Signed and the sender should be the Owner of the `collection`.
   *
   * - `collection`: The collection whose owner should be changed.
   * - `owner`: The new Owner of this collection. They must have called
   * `set_accept_ownership` with `collection` in order for this operation to succeed.
   *
   * Emits `OwnerChanged`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'TransferOwnership'; params: { collection: number; newOwner: MultiAddressLike } }
  /**
   * Change the Issuer, Admin and Freezer of a collection.
   *
   * Origin must be either `ForceOrigin` or Signed and the sender should be the Owner of the
   * `collection`.
   *
   * Note: by setting the role to `None` only the `ForceOrigin` will be able to change it
   * after to `Some(account)`.
   *
   * - `collection`: The collection whose team should be changed.
   * - `issuer`: The new Issuer of this collection.
   * - `admin`: The new Admin of this collection.
   * - `freezer`: The new Freezer of this collection.
   *
   * Emits `TeamChanged`.
   *
   * Weight: `O(1)`
   **/
  | {
      name: 'SetTeam';
      params: {
        collection: number;
        issuer?: MultiAddressLike | undefined;
        admin?: MultiAddressLike | undefined;
        freezer?: MultiAddressLike | undefined;
      };
    }
  /**
   * Change the Owner of a collection.
   *
   * Origin must be `ForceOrigin`.
   *
   * - `collection`: The identifier of the collection.
   * - `owner`: The new Owner of this collection.
   *
   * Emits `OwnerChanged`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'ForceCollectionOwner'; params: { collection: number; owner: MultiAddressLike } }
  /**
   * Change the config of a collection.
   *
   * Origin must be `ForceOrigin`.
   *
   * - `collection`: The identifier of the collection.
   * - `config`: The new config of this collection.
   *
   * Emits `CollectionConfigChanged`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'ForceCollectionConfig'; params: { collection: number; config: PalletNftsCollectionConfig } }
  /**
   * Approve an item to be transferred by a delegated third-party account.
   *
   * Origin must be either `ForceOrigin` or Signed and the sender should be the Owner of the
   * `item`.
   *
   * - `collection`: The collection of the item to be approved for delegated transfer.
   * - `item`: The item to be approved for delegated transfer.
   * - `delegate`: The account to delegate permission to transfer the item.
   * - `maybe_deadline`: Optional deadline for the approval. Specified by providing the
   * number of blocks after which the approval will expire
   *
   * Emits `TransferApproved` on success.
   *
   * Weight: `O(1)`
   **/
  | {
      name: 'ApproveTransfer';
      params: { collection: number; item: number; delegate: MultiAddressLike; maybeDeadline?: number | undefined };
    }
  /**
   * Cancel one of the transfer approvals for a specific item.
   *
   * Origin must be either:
   * - the `Force` origin;
   * - `Signed` with the signer being the Owner of the `item`;
   *
   * Arguments:
   * - `collection`: The collection of the item of whose approval will be cancelled.
   * - `item`: The item of the collection of whose approval will be cancelled.
   * - `delegate`: The account that is going to loose their approval.
   *
   * Emits `ApprovalCancelled` on success.
   *
   * Weight: `O(1)`
   **/
  | { name: 'CancelApproval'; params: { collection: number; item: number; delegate: MultiAddressLike } }
  /**
   * Cancel all the approvals of a specific item.
   *
   * Origin must be either:
   * - the `Force` origin;
   * - `Signed` with the signer being the Owner of the `item`;
   *
   * Arguments:
   * - `collection`: The collection of the item of whose approvals will be cleared.
   * - `item`: The item of the collection of whose approvals will be cleared.
   *
   * Emits `AllApprovalsCancelled` on success.
   *
   * Weight: `O(1)`
   **/
  | { name: 'ClearAllTransferApprovals'; params: { collection: number; item: number } }
  /**
   * Disallows changing the metadata or attributes of the item.
   *
   * Origin must be either `ForceOrigin` or Signed and the sender should be the Admin
   * of the `collection`.
   *
   * - `collection`: The collection if the `item`.
   * - `item`: An item to be locked.
   * - `lock_metadata`: Specifies whether the metadata should be locked.
   * - `lock_attributes`: Specifies whether the attributes in the `CollectionOwner` namespace
   * should be locked.
   *
   * Note: `lock_attributes` affects the attributes in the `CollectionOwner` namespace only.
   * When the metadata or attributes are locked, it won't be possible the unlock them.
   *
   * Emits `ItemPropertiesLocked`.
   *
   * Weight: `O(1)`
   **/
  | {
      name: 'LockItemProperties';
      params: { collection: number; item: number; lockMetadata: boolean; lockAttributes: boolean };
    }
  /**
   * Set an attribute for a collection or item.
   *
   * Origin must be Signed and must conform to the namespace ruleset:
   * - `CollectionOwner` namespace could be modified by the `collection` Admin only;
   * - `ItemOwner` namespace could be modified by the `maybe_item` owner only. `maybe_item`
   * should be set in that case;
   * - `Account(AccountId)` namespace could be modified only when the `origin` was given a
   * permission to do so;
   *
   * The funds of `origin` are reserved according to the formula:
   * `AttributeDepositBase + DepositPerByte * (key.len + value.len)` taking into
   * account any already reserved funds.
   *
   * - `collection`: The identifier of the collection whose item's metadata to set.
   * - `maybe_item`: The identifier of the item whose metadata to set.
   * - `namespace`: Attribute's namespace.
   * - `key`: The key of the attribute.
   * - `value`: The value to which to set the attribute.
   *
   * Emits `AttributeSet`.
   *
   * Weight: `O(1)`
   **/
  | {
      name: 'SetAttribute';
      params: {
        collection: number;
        maybeItem?: number | undefined;
        namespace: PalletNftsAttributeNamespace;
        key: BytesLike;
        value: BytesLike;
      };
    }
  /**
   * Force-set an attribute for a collection or item.
   *
   * Origin must be `ForceOrigin`.
   *
   * If the attribute already exists and it was set by another account, the deposit
   * will be returned to the previous owner.
   *
   * - `set_as`: An optional owner of the attribute.
   * - `collection`: The identifier of the collection whose item's metadata to set.
   * - `maybe_item`: The identifier of the item whose metadata to set.
   * - `namespace`: Attribute's namespace.
   * - `key`: The key of the attribute.
   * - `value`: The value to which to set the attribute.
   *
   * Emits `AttributeSet`.
   *
   * Weight: `O(1)`
   **/
  | {
      name: 'ForceSetAttribute';
      params: {
        setAs?: AccountId32Like | undefined;
        collection: number;
        maybeItem?: number | undefined;
        namespace: PalletNftsAttributeNamespace;
        key: BytesLike;
        value: BytesLike;
      };
    }
  /**
   * Clear an attribute for a collection or item.
   *
   * Origin must be either `ForceOrigin` or Signed and the sender should be the Owner of the
   * attribute.
   *
   * Any deposit is freed for the collection's owner.
   *
   * - `collection`: The identifier of the collection whose item's metadata to clear.
   * - `maybe_item`: The identifier of the item whose metadata to clear.
   * - `namespace`: Attribute's namespace.
   * - `key`: The key of the attribute.
   *
   * Emits `AttributeCleared`.
   *
   * Weight: `O(1)`
   **/
  | {
      name: 'ClearAttribute';
      params: {
        collection: number;
        maybeItem?: number | undefined;
        namespace: PalletNftsAttributeNamespace;
        key: BytesLike;
      };
    }
  /**
   * Approve item's attributes to be changed by a delegated third-party account.
   *
   * Origin must be Signed and must be an owner of the `item`.
   *
   * - `collection`: A collection of the item.
   * - `item`: The item that holds attributes.
   * - `delegate`: The account to delegate permission to change attributes of the item.
   *
   * Emits `ItemAttributesApprovalAdded` on success.
   **/
  | { name: 'ApproveItemAttributes'; params: { collection: number; item: number; delegate: MultiAddressLike } }
  /**
   * Cancel the previously provided approval to change item's attributes.
   * All the previously set attributes by the `delegate` will be removed.
   *
   * Origin must be Signed and must be an owner of the `item`.
   *
   * - `collection`: Collection that the item is contained within.
   * - `item`: The item that holds attributes.
   * - `delegate`: The previously approved account to remove.
   *
   * Emits `ItemAttributesApprovalRemoved` on success.
   **/
  | {
      name: 'CancelItemAttributesApproval';
      params: {
        collection: number;
        item: number;
        delegate: MultiAddressLike;
        witness: PalletNftsCancelAttributesApprovalWitness;
      };
    }
  /**
   * Set the metadata for an item.
   *
   * Origin must be either `ForceOrigin` or Signed and the sender should be the Admin of the
   * `collection`.
   *
   * If the origin is Signed, then funds of signer are reserved according to the formula:
   * `MetadataDepositBase + DepositPerByte * data.len` taking into
   * account any already reserved funds.
   *
   * - `collection`: The identifier of the collection whose item's metadata to set.
   * - `item`: The identifier of the item whose metadata to set.
   * - `data`: The general information of this item. Limited in length by `StringLimit`.
   *
   * Emits `ItemMetadataSet`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'SetMetadata'; params: { collection: number; item: number; data: BytesLike } }
  /**
   * Clear the metadata for an item.
   *
   * Origin must be either `ForceOrigin` or Signed and the sender should be the Admin of the
   * `collection`.
   *
   * Any deposit is freed for the collection's owner.
   *
   * - `collection`: The identifier of the collection whose item's metadata to clear.
   * - `item`: The identifier of the item whose metadata to clear.
   *
   * Emits `ItemMetadataCleared`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'ClearMetadata'; params: { collection: number; item: number } }
  /**
   * Set the metadata for a collection.
   *
   * Origin must be either `ForceOrigin` or `Signed` and the sender should be the Admin of
   * the `collection`.
   *
   * If the origin is `Signed`, then funds of signer are reserved according to the formula:
   * `MetadataDepositBase + DepositPerByte * data.len` taking into
   * account any already reserved funds.
   *
   * - `collection`: The identifier of the item whose metadata to update.
   * - `data`: The general information of this item. Limited in length by `StringLimit`.
   *
   * Emits `CollectionMetadataSet`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'SetCollectionMetadata'; params: { collection: number; data: BytesLike } }
  /**
   * Clear the metadata for a collection.
   *
   * Origin must be either `ForceOrigin` or `Signed` and the sender should be the Admin of
   * the `collection`.
   *
   * Any deposit is freed for the collection's owner.
   *
   * - `collection`: The identifier of the collection whose metadata to clear.
   *
   * Emits `CollectionMetadataCleared`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'ClearCollectionMetadata'; params: { collection: number } }
  /**
   * Set (or reset) the acceptance of ownership for a particular account.
   *
   * Origin must be `Signed` and if `maybe_collection` is `Some`, then the signer must have a
   * provider reference.
   *
   * - `maybe_collection`: The identifier of the collection whose ownership the signer is
   * willing to accept, or if `None`, an indication that the signer is willing to accept no
   * ownership transferal.
   *
   * Emits `OwnershipAcceptanceChanged`.
   **/
  | { name: 'SetAcceptOwnership'; params: { maybeCollection?: number | undefined } }
  /**
   * Set the maximum number of items a collection could have.
   *
   * Origin must be either `ForceOrigin` or `Signed` and the sender should be the Owner of
   * the `collection`.
   *
   * - `collection`: The identifier of the collection to change.
   * - `max_supply`: The maximum number of items a collection could have.
   *
   * Emits `CollectionMaxSupplySet` event when successful.
   **/
  | { name: 'SetCollectionMaxSupply'; params: { collection: number; maxSupply: number } }
  /**
   * Update mint settings.
   *
   * Origin must be either `ForceOrigin` or `Signed` and the sender should be the Issuer
   * of the `collection`.
   *
   * - `collection`: The identifier of the collection to change.
   * - `mint_settings`: The new mint settings.
   *
   * Emits `CollectionMintSettingsUpdated` event when successful.
   **/
  | { name: 'UpdateMintSettings'; params: { collection: number; mintSettings: PalletNftsMintSettings } }
  /**
   * Set (or reset) the price for an item.
   *
   * Origin must be Signed and must be the owner of the `item`.
   *
   * - `collection`: The collection of the item.
   * - `item`: The item to set the price for.
   * - `price`: The price for the item. Pass `None`, to reset the price.
   * - `buyer`: Restricts the buy operation to a specific account.
   *
   * Emits `ItemPriceSet` on success if the price is not `None`.
   * Emits `ItemPriceRemoved` on success if the price is `None`.
   **/
  | {
      name: 'SetPrice';
      params: {
        collection: number;
        item: number;
        price?: bigint | undefined;
        whitelistedBuyer?: MultiAddressLike | undefined;
      };
    }
  /**
   * Allows to buy an item if it's up for sale.
   *
   * Origin must be Signed and must not be the owner of the `item`.
   *
   * - `collection`: The collection of the item.
   * - `item`: The item the sender wants to buy.
   * - `bid_price`: The price the sender is willing to pay.
   *
   * Emits `ItemBought` on success.
   **/
  | { name: 'BuyItem'; params: { collection: number; item: number; bidPrice: bigint } }
  /**
   * Allows to pay the tips.
   *
   * Origin must be Signed.
   *
   * - `tips`: Tips array.
   *
   * Emits `TipSent` on every tip transfer.
   **/
  | { name: 'PayTips'; params: { tips: Array<PalletNftsItemTip> } }
  /**
   * Register a new atomic swap, declaring an intention to send an `item` in exchange for
   * `desired_item` from origin to target on the current blockchain.
   * The target can execute the swap during the specified `duration` of blocks (if set).
   * Additionally, the price could be set for the desired `item`.
   *
   * Origin must be Signed and must be an owner of the `item`.
   *
   * - `collection`: The collection of the item.
   * - `item`: The item an owner wants to give.
   * - `desired_collection`: The collection of the desired item.
   * - `desired_item`: The desired item an owner wants to receive.
   * - `maybe_price`: The price an owner is willing to pay or receive for the desired `item`.
   * - `duration`: A deadline for the swap. Specified by providing the number of blocks
   * after which the swap will expire.
   *
   * Emits `SwapCreated` on success.
   **/
  | {
      name: 'CreateSwap';
      params: {
        offeredCollection: number;
        offeredItem: number;
        desiredCollection: number;
        maybeDesiredItem?: number | undefined;
        maybePrice?: PalletNftsPriceWithDirection | undefined;
        duration: number;
      };
    }
  /**
   * Cancel an atomic swap.
   *
   * Origin must be Signed.
   * Origin must be an owner of the `item` if the deadline hasn't expired.
   *
   * - `collection`: The collection of the item.
   * - `item`: The item an owner wants to give.
   *
   * Emits `SwapCancelled` on success.
   **/
  | { name: 'CancelSwap'; params: { offeredCollection: number; offeredItem: number } }
  /**
   * Claim an atomic swap.
   * This method executes a pending swap, that was created by a counterpart before.
   *
   * Origin must be Signed and must be an owner of the `item`.
   *
   * - `send_collection`: The collection of the item to be sent.
   * - `send_item`: The item to be sent.
   * - `receive_collection`: The collection of the item to be received.
   * - `receive_item`: The item to be received.
   * - `witness_price`: A price that was previously agreed on.
   *
   * Emits `SwapClaimed` on success.
   **/
  | {
      name: 'ClaimSwap';
      params: {
        sendCollection: number;
        sendItem: number;
        receiveCollection: number;
        receiveItem: number;
        witnessPrice?: PalletNftsPriceWithDirection | undefined;
      };
    }
  /**
   * Mint an item by providing the pre-signed approval.
   *
   * Origin must be Signed.
   *
   * - `mint_data`: The pre-signed approval that consists of the information about the item,
   * its metadata, attributes, who can mint it (`None` for anyone) and until what block
   * number.
   * - `signature`: The signature of the `data` object.
   * - `signer`: The `data` object's signer. Should be an Issuer of the collection.
   *
   * Emits `Issued` on success.
   * Emits `AttributeSet` if the attributes were provided.
   * Emits `ItemMetadataSet` if the metadata was not empty.
   **/
  | {
      name: 'MintPreSigned';
      params: { mintData: PalletNftsPreSignedMint; signature: SpRuntimeMultiSignature; signer: AccountId32Like };
    }
  /**
   * Set attributes for an item by providing the pre-signed approval.
   *
   * Origin must be Signed and must be an owner of the `data.item`.
   *
   * - `data`: The pre-signed approval that consists of the information about the item,
   * attributes to update and until what block number.
   * - `signature`: The signature of the `data` object.
   * - `signer`: The `data` object's signer. Should be an Admin of the collection for the
   * `CollectionOwner` namespace.
   *
   * Emits `AttributeSet` for each provided attribute.
   * Emits `ItemAttributesApprovalAdded` if the approval wasn't set before.
   * Emits `PreSignedAttributesSet` on success.
   **/
  | {
      name: 'SetAttributesPreSigned';
      params: { data: PalletNftsPreSignedAttributes; signature: SpRuntimeMultiSignature; signer: AccountId32Like };
    };

export type PalletNftsCollectionConfig = {
  settings: PalletNftsBitFlags;
  maxSupply?: number | undefined;
  mintSettings: PalletNftsMintSettings;
};

export type PalletNftsBitFlags = bigint;

export type PalletNftsCollectionSetting =
  | 'TransferableItems'
  | 'UnlockedMetadata'
  | 'UnlockedAttributes'
  | 'UnlockedMaxSupply'
  | 'DepositRequired';

export type PalletNftsMintSettings = {
  mintType: PalletNftsMintType;
  price?: bigint | undefined;
  startBlock?: number | undefined;
  endBlock?: number | undefined;
  defaultItemSettings: PalletNftsBitFlagsItemSetting;
};

export type PalletNftsMintType = { type: 'Issuer' } | { type: 'Public' } | { type: 'HolderOf'; value: number };

export type PalletNftsBitFlagsItemSetting = bigint;

export type PalletNftsItemSetting = 'Transferable' | 'UnlockedMetadata' | 'UnlockedAttributes';

export type PalletNftsDestroyWitness = { itemMetadatas: number; itemConfigs: number; attributes: number };

export type PalletNftsMintWitness = { ownedItem?: number | undefined; mintPrice?: bigint | undefined };

export type PalletNftsItemConfig = { settings: PalletNftsBitFlagsItemSetting };

export type PalletNftsCancelAttributesApprovalWitness = { accountAttributes: number };

export type PalletNftsItemTip = { collection: number; item: number; receiver: AccountId32; amount: bigint };

export type PalletNftsPreSignedMint = {
  collection: number;
  item: number;
  attributes: Array<[Bytes, Bytes]>;
  metadata: Bytes;
  onlyAccount?: AccountId32 | undefined;
  deadline: number;
  mintPrice?: bigint | undefined;
};

export type SpRuntimeMultiSignature =
  | { type: 'Ed25519'; value: FixedBytes<64> }
  | { type: 'Sr25519'; value: FixedBytes<64> }
  | { type: 'Ecdsa'; value: FixedBytes<65> };

export type PalletNftsPreSignedAttributes = {
  collection: number;
  item: number;
  attributes: Array<[Bytes, Bytes]>;
  namespace: PalletNftsAttributeNamespace;
  deadline: number;
};

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletAssetsCall002 =
  /**
   * Issue a new class of fungible assets from a public origin.
   *
   * This new asset class has no assets initially and its owner is the origin.
   *
   * The origin must conform to the configured `CreateOrigin` and have sufficient funds free.
   *
   * Funds of sender are reserved by `AssetDeposit`.
   *
   * Parameters:
   * - `id`: The identifier of the new asset. This must not be currently in use to identify
   * an existing asset. If [`NextAssetId`] is set, then this must be equal to it.
   * - `admin`: The admin of this class of assets. The admin is the initial address of each
   * member of the asset class's admin team.
   * - `min_balance`: The minimum balance of this new asset that any single account must
   * have. If an account's balance is reduced below this, then it collapses to zero.
   *
   * Emits `Created` event when successful.
   *
   * Weight: `O(1)`
   **/
  | { name: 'Create'; params: { id: StagingXcmV4Location; admin: MultiAddress; minBalance: bigint } }
  /**
   * Issue a new class of fungible assets from a privileged origin.
   *
   * This new asset class has no assets initially.
   *
   * The origin must conform to `ForceOrigin`.
   *
   * Unlike `create`, no funds are reserved.
   *
   * - `id`: The identifier of the new asset. This must not be currently in use to identify
   * an existing asset. If [`NextAssetId`] is set, then this must be equal to it.
   * - `owner`: The owner of this class of assets. The owner has full superuser permissions
   * over this asset, but may later change and configure the permissions using
   * `transfer_ownership` and `set_team`.
   * - `min_balance`: The minimum balance of this new asset that any single account must
   * have. If an account's balance is reduced below this, then it collapses to zero.
   *
   * Emits `ForceCreated` event when successful.
   *
   * Weight: `O(1)`
   **/
  | {
      name: 'ForceCreate';
      params: { id: StagingXcmV4Location; owner: MultiAddress; isSufficient: boolean; minBalance: bigint };
    }
  /**
   * Start the process of destroying a fungible asset class.
   *
   * `start_destroy` is the first in a series of extrinsics that should be called, to allow
   * destruction of an asset class.
   *
   * The origin must conform to `ForceOrigin` or must be `Signed` by the asset's `owner`.
   *
   * - `id`: The identifier of the asset to be destroyed. This must identify an existing
   * asset.
   *
   * The asset class must be frozen before calling `start_destroy`.
   **/
  | { name: 'StartDestroy'; params: { id: StagingXcmV4Location } }
  /**
   * Destroy all accounts associated with a given asset.
   *
   * `destroy_accounts` should only be called after `start_destroy` has been called, and the
   * asset is in a `Destroying` state.
   *
   * Due to weight restrictions, this function may need to be called multiple times to fully
   * destroy all accounts. It will destroy `RemoveItemsLimit` accounts at a time.
   *
   * - `id`: The identifier of the asset to be destroyed. This must identify an existing
   * asset.
   *
   * Each call emits the `Event::DestroyedAccounts` event.
   **/
  | { name: 'DestroyAccounts'; params: { id: StagingXcmV4Location } }
  /**
   * Destroy all approvals associated with a given asset up to the max (T::RemoveItemsLimit).
   *
   * `destroy_approvals` should only be called after `start_destroy` has been called, and the
   * asset is in a `Destroying` state.
   *
   * Due to weight restrictions, this function may need to be called multiple times to fully
   * destroy all approvals. It will destroy `RemoveItemsLimit` approvals at a time.
   *
   * - `id`: The identifier of the asset to be destroyed. This must identify an existing
   * asset.
   *
   * Each call emits the `Event::DestroyedApprovals` event.
   **/
  | { name: 'DestroyApprovals'; params: { id: StagingXcmV4Location } }
  /**
   * Complete destroying asset and unreserve currency.
   *
   * `finish_destroy` should only be called after `start_destroy` has been called, and the
   * asset is in a `Destroying` state. All accounts or approvals should be destroyed before
   * hand.
   *
   * - `id`: The identifier of the asset to be destroyed. This must identify an existing
   * asset.
   *
   * Each successful call emits the `Event::Destroyed` event.
   **/
  | { name: 'FinishDestroy'; params: { id: StagingXcmV4Location } }
  /**
   * Mint assets of a particular class.
   *
   * The origin must be Signed and the sender must be the Issuer of the asset `id`.
   *
   * - `id`: The identifier of the asset to have some amount minted.
   * - `beneficiary`: The account to be credited with the minted assets.
   * - `amount`: The amount of the asset to be minted.
   *
   * Emits `Issued` event when successful.
   *
   * Weight: `O(1)`
   * Modes: Pre-existing balance of `beneficiary`; Account pre-existence of `beneficiary`.
   **/
  | { name: 'Mint'; params: { id: StagingXcmV4Location; beneficiary: MultiAddress; amount: bigint } }
  /**
   * Reduce the balance of `who` by as much as possible up to `amount` assets of `id`.
   *
   * Origin must be Signed and the sender should be the Manager of the asset `id`.
   *
   * Bails with `NoAccount` if the `who` is already dead.
   *
   * - `id`: The identifier of the asset to have some amount burned.
   * - `who`: The account to be debited from.
   * - `amount`: The maximum amount by which `who`'s balance should be reduced.
   *
   * Emits `Burned` with the actual amount burned. If this takes the balance to below the
   * minimum for the asset, then the amount burned is increased to take it to zero.
   *
   * Weight: `O(1)`
   * Modes: Post-existence of `who`; Pre & post Zombie-status of `who`.
   **/
  | { name: 'Burn'; params: { id: StagingXcmV4Location; who: MultiAddress; amount: bigint } }
  /**
   * Move some assets from the sender account to another.
   *
   * Origin must be Signed.
   *
   * - `id`: The identifier of the asset to have some amount transferred.
   * - `target`: The account to be credited.
   * - `amount`: The amount by which the sender's balance of assets should be reduced and
   * `target`'s balance increased. The amount actually transferred may be slightly greater in
   * the case that the transfer would otherwise take the sender balance above zero but below
   * the minimum balance. Must be greater than zero.
   *
   * Emits `Transferred` with the actual amount transferred. If this takes the source balance
   * to below the minimum for the asset, then the amount transferred is increased to take it
   * to zero.
   *
   * Weight: `O(1)`
   * Modes: Pre-existence of `target`; Post-existence of sender; Account pre-existence of
   * `target`.
   **/
  | { name: 'Transfer'; params: { id: StagingXcmV4Location; target: MultiAddress; amount: bigint } }
  /**
   * Move some assets from the sender account to another, keeping the sender account alive.
   *
   * Origin must be Signed.
   *
   * - `id`: The identifier of the asset to have some amount transferred.
   * - `target`: The account to be credited.
   * - `amount`: The amount by which the sender's balance of assets should be reduced and
   * `target`'s balance increased. The amount actually transferred may be slightly greater in
   * the case that the transfer would otherwise take the sender balance above zero but below
   * the minimum balance. Must be greater than zero.
   *
   * Emits `Transferred` with the actual amount transferred. If this takes the source balance
   * to below the minimum for the asset, then the amount transferred is increased to take it
   * to zero.
   *
   * Weight: `O(1)`
   * Modes: Pre-existence of `target`; Post-existence of sender; Account pre-existence of
   * `target`.
   **/
  | { name: 'TransferKeepAlive'; params: { id: StagingXcmV4Location; target: MultiAddress; amount: bigint } }
  /**
   * Move some assets from one account to another.
   *
   * Origin must be Signed and the sender should be the Admin of the asset `id`.
   *
   * - `id`: The identifier of the asset to have some amount transferred.
   * - `source`: The account to be debited.
   * - `dest`: The account to be credited.
   * - `amount`: The amount by which the `source`'s balance of assets should be reduced and
   * `dest`'s balance increased. The amount actually transferred may be slightly greater in
   * the case that the transfer would otherwise take the `source` balance above zero but
   * below the minimum balance. Must be greater than zero.
   *
   * Emits `Transferred` with the actual amount transferred. If this takes the source balance
   * to below the minimum for the asset, then the amount transferred is increased to take it
   * to zero.
   *
   * Weight: `O(1)`
   * Modes: Pre-existence of `dest`; Post-existence of `source`; Account pre-existence of
   * `dest`.
   **/
  | {
      name: 'ForceTransfer';
      params: { id: StagingXcmV4Location; source: MultiAddress; dest: MultiAddress; amount: bigint };
    }
  /**
   * Disallow further unprivileged transfers of an asset `id` from an account `who`. `who`
   * must already exist as an entry in `Account`s of the asset. If you want to freeze an
   * account that does not have an entry, use `touch_other` first.
   *
   * Origin must be Signed and the sender should be the Freezer of the asset `id`.
   *
   * - `id`: The identifier of the asset to be frozen.
   * - `who`: The account to be frozen.
   *
   * Emits `Frozen`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'Freeze'; params: { id: StagingXcmV4Location; who: MultiAddress } }
  /**
   * Allow unprivileged transfers to and from an account again.
   *
   * Origin must be Signed and the sender should be the Admin of the asset `id`.
   *
   * - `id`: The identifier of the asset to be frozen.
   * - `who`: The account to be unfrozen.
   *
   * Emits `Thawed`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'Thaw'; params: { id: StagingXcmV4Location; who: MultiAddress } }
  /**
   * Disallow further unprivileged transfers for the asset class.
   *
   * Origin must be Signed and the sender should be the Freezer of the asset `id`.
   *
   * - `id`: The identifier of the asset to be frozen.
   *
   * Emits `Frozen`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'FreezeAsset'; params: { id: StagingXcmV4Location } }
  /**
   * Allow unprivileged transfers for the asset again.
   *
   * Origin must be Signed and the sender should be the Admin of the asset `id`.
   *
   * - `id`: The identifier of the asset to be thawed.
   *
   * Emits `Thawed`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'ThawAsset'; params: { id: StagingXcmV4Location } }
  /**
   * Change the Owner of an asset.
   *
   * Origin must be Signed and the sender should be the Owner of the asset `id`.
   *
   * - `id`: The identifier of the asset.
   * - `owner`: The new Owner of this asset.
   *
   * Emits `OwnerChanged`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'TransferOwnership'; params: { id: StagingXcmV4Location; owner: MultiAddress } }
  /**
   * Change the Issuer, Admin and Freezer of an asset.
   *
   * Origin must be Signed and the sender should be the Owner of the asset `id`.
   *
   * - `id`: The identifier of the asset to be frozen.
   * - `issuer`: The new Issuer of this asset.
   * - `admin`: The new Admin of this asset.
   * - `freezer`: The new Freezer of this asset.
   *
   * Emits `TeamChanged`.
   *
   * Weight: `O(1)`
   **/
  | {
      name: 'SetTeam';
      params: { id: StagingXcmV4Location; issuer: MultiAddress; admin: MultiAddress; freezer: MultiAddress };
    }
  /**
   * Set the metadata for an asset.
   *
   * Origin must be Signed and the sender should be the Owner of the asset `id`.
   *
   * Funds of sender are reserved according to the formula:
   * `MetadataDepositBase + MetadataDepositPerByte * (name.len + symbol.len)` taking into
   * account any already reserved funds.
   *
   * - `id`: The identifier of the asset to update.
   * - `name`: The user friendly name of this asset. Limited in length by `StringLimit`.
   * - `symbol`: The exchange symbol for this asset. Limited in length by `StringLimit`.
   * - `decimals`: The number of decimals this asset uses to represent one unit.
   *
   * Emits `MetadataSet`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'SetMetadata'; params: { id: StagingXcmV4Location; name: Bytes; symbol: Bytes; decimals: number } }
  /**
   * Clear the metadata for an asset.
   *
   * Origin must be Signed and the sender should be the Owner of the asset `id`.
   *
   * Any deposit is freed for the asset owner.
   *
   * - `id`: The identifier of the asset to clear.
   *
   * Emits `MetadataCleared`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'ClearMetadata'; params: { id: StagingXcmV4Location } }
  /**
   * Force the metadata for an asset to some value.
   *
   * Origin must be ForceOrigin.
   *
   * Any deposit is left alone.
   *
   * - `id`: The identifier of the asset to update.
   * - `name`: The user friendly name of this asset. Limited in length by `StringLimit`.
   * - `symbol`: The exchange symbol for this asset. Limited in length by `StringLimit`.
   * - `decimals`: The number of decimals this asset uses to represent one unit.
   *
   * Emits `MetadataSet`.
   *
   * Weight: `O(N + S)` where N and S are the length of the name and symbol respectively.
   **/
  | {
      name: 'ForceSetMetadata';
      params: { id: StagingXcmV4Location; name: Bytes; symbol: Bytes; decimals: number; isFrozen: boolean };
    }
  /**
   * Clear the metadata for an asset.
   *
   * Origin must be ForceOrigin.
   *
   * Any deposit is returned.
   *
   * - `id`: The identifier of the asset to clear.
   *
   * Emits `MetadataCleared`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'ForceClearMetadata'; params: { id: StagingXcmV4Location } }
  /**
   * Alter the attributes of a given asset.
   *
   * Origin must be `ForceOrigin`.
   *
   * - `id`: The identifier of the asset.
   * - `owner`: The new Owner of this asset.
   * - `issuer`: The new Issuer of this asset.
   * - `admin`: The new Admin of this asset.
   * - `freezer`: The new Freezer of this asset.
   * - `min_balance`: The minimum balance of this new asset that any single account must
   * have. If an account's balance is reduced below this, then it collapses to zero.
   * - `is_sufficient`: Whether a non-zero balance of this asset is deposit of sufficient
   * value to account for the state bloat associated with its balance storage. If set to
   * `true`, then non-zero balances may be stored without a `consumer` reference (and thus
   * an ED in the Balances pallet or whatever else is used to control user-account state
   * growth).
   * - `is_frozen`: Whether this asset class is frozen except for permissioned/admin
   * instructions.
   *
   * Emits `AssetStatusChanged` with the identity of the asset.
   *
   * Weight: `O(1)`
   **/
  | {
      name: 'ForceAssetStatus';
      params: {
        id: StagingXcmV4Location;
        owner: MultiAddress;
        issuer: MultiAddress;
        admin: MultiAddress;
        freezer: MultiAddress;
        minBalance: bigint;
        isSufficient: boolean;
        isFrozen: boolean;
      };
    }
  /**
   * Approve an amount of asset for transfer by a delegated third-party account.
   *
   * Origin must be Signed.
   *
   * Ensures that `ApprovalDeposit` worth of `Currency` is reserved from signing account
   * for the purpose of holding the approval. If some non-zero amount of assets is already
   * approved from signing account to `delegate`, then it is topped up or unreserved to
   * meet the right value.
   *
   * NOTE: The signing account does not need to own `amount` of assets at the point of
   * making this call.
   *
   * - `id`: The identifier of the asset.
   * - `delegate`: The account to delegate permission to transfer asset.
   * - `amount`: The amount of asset that may be transferred by `delegate`. If there is
   * already an approval in place, then this acts additively.
   *
   * Emits `ApprovedTransfer` on success.
   *
   * Weight: `O(1)`
   **/
  | { name: 'ApproveTransfer'; params: { id: StagingXcmV4Location; delegate: MultiAddress; amount: bigint } }
  /**
   * Cancel all of some asset approved for delegated transfer by a third-party account.
   *
   * Origin must be Signed and there must be an approval in place between signer and
   * `delegate`.
   *
   * Unreserves any deposit previously reserved by `approve_transfer` for the approval.
   *
   * - `id`: The identifier of the asset.
   * - `delegate`: The account delegated permission to transfer asset.
   *
   * Emits `ApprovalCancelled` on success.
   *
   * Weight: `O(1)`
   **/
  | { name: 'CancelApproval'; params: { id: StagingXcmV4Location; delegate: MultiAddress } }
  /**
   * Cancel all of some asset approved for delegated transfer by a third-party account.
   *
   * Origin must be either ForceOrigin or Signed origin with the signer being the Admin
   * account of the asset `id`.
   *
   * Unreserves any deposit previously reserved by `approve_transfer` for the approval.
   *
   * - `id`: The identifier of the asset.
   * - `delegate`: The account delegated permission to transfer asset.
   *
   * Emits `ApprovalCancelled` on success.
   *
   * Weight: `O(1)`
   **/
  | { name: 'ForceCancelApproval'; params: { id: StagingXcmV4Location; owner: MultiAddress; delegate: MultiAddress } }
  /**
   * Transfer some asset balance from a previously delegated account to some third-party
   * account.
   *
   * Origin must be Signed and there must be an approval in place by the `owner` to the
   * signer.
   *
   * If the entire amount approved for transfer is transferred, then any deposit previously
   * reserved by `approve_transfer` is unreserved.
   *
   * - `id`: The identifier of the asset.
   * - `owner`: The account which previously approved for a transfer of at least `amount` and
   * from which the asset balance will be withdrawn.
   * - `destination`: The account to which the asset balance of `amount` will be transferred.
   * - `amount`: The amount of assets to transfer.
   *
   * Emits `TransferredApproved` on success.
   *
   * Weight: `O(1)`
   **/
  | {
      name: 'TransferApproved';
      params: { id: StagingXcmV4Location; owner: MultiAddress; destination: MultiAddress; amount: bigint };
    }
  /**
   * Create an asset account for non-provider assets.
   *
   * A deposit will be taken from the signer account.
   *
   * - `origin`: Must be Signed; the signer account must have sufficient funds for a deposit
   * to be taken.
   * - `id`: The identifier of the asset for the account to be created.
   *
   * Emits `Touched` event when successful.
   **/
  | { name: 'Touch'; params: { id: StagingXcmV4Location } }
  /**
   * Return the deposit (if any) of an asset account or a consumer reference (if any) of an
   * account.
   *
   * The origin must be Signed.
   *
   * - `id`: The identifier of the asset for which the caller would like the deposit
   * refunded.
   * - `allow_burn`: If `true` then assets may be destroyed in order to complete the refund.
   *
   * Emits `Refunded` event when successful.
   **/
  | { name: 'Refund'; params: { id: StagingXcmV4Location; allowBurn: boolean } }
  /**
   * Sets the minimum balance of an asset.
   *
   * Only works if there aren't any accounts that are holding the asset or if
   * the new value of `min_balance` is less than the old one.
   *
   * Origin must be Signed and the sender has to be the Owner of the
   * asset `id`.
   *
   * - `id`: The identifier of the asset.
   * - `min_balance`: The new value of `min_balance`.
   *
   * Emits `AssetMinBalanceChanged` event when successful.
   **/
  | { name: 'SetMinBalance'; params: { id: StagingXcmV4Location; minBalance: bigint } }
  /**
   * Create an asset account for `who`.
   *
   * A deposit will be taken from the signer account.
   *
   * - `origin`: Must be Signed by `Freezer` or `Admin` of the asset `id`; the signer account
   * must have sufficient funds for a deposit to be taken.
   * - `id`: The identifier of the asset for the account to be created.
   * - `who`: The account to be created.
   *
   * Emits `Touched` event when successful.
   **/
  | { name: 'TouchOther'; params: { id: StagingXcmV4Location; who: MultiAddress } }
  /**
   * Return the deposit (if any) of a target asset account. Useful if you are the depositor.
   *
   * The origin must be Signed and either the account owner, depositor, or asset `Admin`. In
   * order to burn a non-zero balance of the asset, the caller must be the account and should
   * use `refund`.
   *
   * - `id`: The identifier of the asset for the account holding a deposit.
   * - `who`: The account to refund.
   *
   * Emits `Refunded` event when successful.
   **/
  | { name: 'RefundOther'; params: { id: StagingXcmV4Location; who: MultiAddress } }
  /**
   * Disallow further unprivileged transfers of an asset `id` to and from an account `who`.
   *
   * Origin must be Signed and the sender should be the Freezer of the asset `id`.
   *
   * - `id`: The identifier of the account's asset.
   * - `who`: The account to be unblocked.
   *
   * Emits `Blocked`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'Block'; params: { id: StagingXcmV4Location; who: MultiAddress } };

export type PalletAssetsCallLike002 =
  /**
   * Issue a new class of fungible assets from a public origin.
   *
   * This new asset class has no assets initially and its owner is the origin.
   *
   * The origin must conform to the configured `CreateOrigin` and have sufficient funds free.
   *
   * Funds of sender are reserved by `AssetDeposit`.
   *
   * Parameters:
   * - `id`: The identifier of the new asset. This must not be currently in use to identify
   * an existing asset. If [`NextAssetId`] is set, then this must be equal to it.
   * - `admin`: The admin of this class of assets. The admin is the initial address of each
   * member of the asset class's admin team.
   * - `min_balance`: The minimum balance of this new asset that any single account must
   * have. If an account's balance is reduced below this, then it collapses to zero.
   *
   * Emits `Created` event when successful.
   *
   * Weight: `O(1)`
   **/
  | { name: 'Create'; params: { id: StagingXcmV4Location; admin: MultiAddressLike; minBalance: bigint } }
  /**
   * Issue a new class of fungible assets from a privileged origin.
   *
   * This new asset class has no assets initially.
   *
   * The origin must conform to `ForceOrigin`.
   *
   * Unlike `create`, no funds are reserved.
   *
   * - `id`: The identifier of the new asset. This must not be currently in use to identify
   * an existing asset. If [`NextAssetId`] is set, then this must be equal to it.
   * - `owner`: The owner of this class of assets. The owner has full superuser permissions
   * over this asset, but may later change and configure the permissions using
   * `transfer_ownership` and `set_team`.
   * - `min_balance`: The minimum balance of this new asset that any single account must
   * have. If an account's balance is reduced below this, then it collapses to zero.
   *
   * Emits `ForceCreated` event when successful.
   *
   * Weight: `O(1)`
   **/
  | {
      name: 'ForceCreate';
      params: { id: StagingXcmV4Location; owner: MultiAddressLike; isSufficient: boolean; minBalance: bigint };
    }
  /**
   * Start the process of destroying a fungible asset class.
   *
   * `start_destroy` is the first in a series of extrinsics that should be called, to allow
   * destruction of an asset class.
   *
   * The origin must conform to `ForceOrigin` or must be `Signed` by the asset's `owner`.
   *
   * - `id`: The identifier of the asset to be destroyed. This must identify an existing
   * asset.
   *
   * The asset class must be frozen before calling `start_destroy`.
   **/
  | { name: 'StartDestroy'; params: { id: StagingXcmV4Location } }
  /**
   * Destroy all accounts associated with a given asset.
   *
   * `destroy_accounts` should only be called after `start_destroy` has been called, and the
   * asset is in a `Destroying` state.
   *
   * Due to weight restrictions, this function may need to be called multiple times to fully
   * destroy all accounts. It will destroy `RemoveItemsLimit` accounts at a time.
   *
   * - `id`: The identifier of the asset to be destroyed. This must identify an existing
   * asset.
   *
   * Each call emits the `Event::DestroyedAccounts` event.
   **/
  | { name: 'DestroyAccounts'; params: { id: StagingXcmV4Location } }
  /**
   * Destroy all approvals associated with a given asset up to the max (T::RemoveItemsLimit).
   *
   * `destroy_approvals` should only be called after `start_destroy` has been called, and the
   * asset is in a `Destroying` state.
   *
   * Due to weight restrictions, this function may need to be called multiple times to fully
   * destroy all approvals. It will destroy `RemoveItemsLimit` approvals at a time.
   *
   * - `id`: The identifier of the asset to be destroyed. This must identify an existing
   * asset.
   *
   * Each call emits the `Event::DestroyedApprovals` event.
   **/
  | { name: 'DestroyApprovals'; params: { id: StagingXcmV4Location } }
  /**
   * Complete destroying asset and unreserve currency.
   *
   * `finish_destroy` should only be called after `start_destroy` has been called, and the
   * asset is in a `Destroying` state. All accounts or approvals should be destroyed before
   * hand.
   *
   * - `id`: The identifier of the asset to be destroyed. This must identify an existing
   * asset.
   *
   * Each successful call emits the `Event::Destroyed` event.
   **/
  | { name: 'FinishDestroy'; params: { id: StagingXcmV4Location } }
  /**
   * Mint assets of a particular class.
   *
   * The origin must be Signed and the sender must be the Issuer of the asset `id`.
   *
   * - `id`: The identifier of the asset to have some amount minted.
   * - `beneficiary`: The account to be credited with the minted assets.
   * - `amount`: The amount of the asset to be minted.
   *
   * Emits `Issued` event when successful.
   *
   * Weight: `O(1)`
   * Modes: Pre-existing balance of `beneficiary`; Account pre-existence of `beneficiary`.
   **/
  | { name: 'Mint'; params: { id: StagingXcmV4Location; beneficiary: MultiAddressLike; amount: bigint } }
  /**
   * Reduce the balance of `who` by as much as possible up to `amount` assets of `id`.
   *
   * Origin must be Signed and the sender should be the Manager of the asset `id`.
   *
   * Bails with `NoAccount` if the `who` is already dead.
   *
   * - `id`: The identifier of the asset to have some amount burned.
   * - `who`: The account to be debited from.
   * - `amount`: The maximum amount by which `who`'s balance should be reduced.
   *
   * Emits `Burned` with the actual amount burned. If this takes the balance to below the
   * minimum for the asset, then the amount burned is increased to take it to zero.
   *
   * Weight: `O(1)`
   * Modes: Post-existence of `who`; Pre & post Zombie-status of `who`.
   **/
  | { name: 'Burn'; params: { id: StagingXcmV4Location; who: MultiAddressLike; amount: bigint } }
  /**
   * Move some assets from the sender account to another.
   *
   * Origin must be Signed.
   *
   * - `id`: The identifier of the asset to have some amount transferred.
   * - `target`: The account to be credited.
   * - `amount`: The amount by which the sender's balance of assets should be reduced and
   * `target`'s balance increased. The amount actually transferred may be slightly greater in
   * the case that the transfer would otherwise take the sender balance above zero but below
   * the minimum balance. Must be greater than zero.
   *
   * Emits `Transferred` with the actual amount transferred. If this takes the source balance
   * to below the minimum for the asset, then the amount transferred is increased to take it
   * to zero.
   *
   * Weight: `O(1)`
   * Modes: Pre-existence of `target`; Post-existence of sender; Account pre-existence of
   * `target`.
   **/
  | { name: 'Transfer'; params: { id: StagingXcmV4Location; target: MultiAddressLike; amount: bigint } }
  /**
   * Move some assets from the sender account to another, keeping the sender account alive.
   *
   * Origin must be Signed.
   *
   * - `id`: The identifier of the asset to have some amount transferred.
   * - `target`: The account to be credited.
   * - `amount`: The amount by which the sender's balance of assets should be reduced and
   * `target`'s balance increased. The amount actually transferred may be slightly greater in
   * the case that the transfer would otherwise take the sender balance above zero but below
   * the minimum balance. Must be greater than zero.
   *
   * Emits `Transferred` with the actual amount transferred. If this takes the source balance
   * to below the minimum for the asset, then the amount transferred is increased to take it
   * to zero.
   *
   * Weight: `O(1)`
   * Modes: Pre-existence of `target`; Post-existence of sender; Account pre-existence of
   * `target`.
   **/
  | { name: 'TransferKeepAlive'; params: { id: StagingXcmV4Location; target: MultiAddressLike; amount: bigint } }
  /**
   * Move some assets from one account to another.
   *
   * Origin must be Signed and the sender should be the Admin of the asset `id`.
   *
   * - `id`: The identifier of the asset to have some amount transferred.
   * - `source`: The account to be debited.
   * - `dest`: The account to be credited.
   * - `amount`: The amount by which the `source`'s balance of assets should be reduced and
   * `dest`'s balance increased. The amount actually transferred may be slightly greater in
   * the case that the transfer would otherwise take the `source` balance above zero but
   * below the minimum balance. Must be greater than zero.
   *
   * Emits `Transferred` with the actual amount transferred. If this takes the source balance
   * to below the minimum for the asset, then the amount transferred is increased to take it
   * to zero.
   *
   * Weight: `O(1)`
   * Modes: Pre-existence of `dest`; Post-existence of `source`; Account pre-existence of
   * `dest`.
   **/
  | {
      name: 'ForceTransfer';
      params: { id: StagingXcmV4Location; source: MultiAddressLike; dest: MultiAddressLike; amount: bigint };
    }
  /**
   * Disallow further unprivileged transfers of an asset `id` from an account `who`. `who`
   * must already exist as an entry in `Account`s of the asset. If you want to freeze an
   * account that does not have an entry, use `touch_other` first.
   *
   * Origin must be Signed and the sender should be the Freezer of the asset `id`.
   *
   * - `id`: The identifier of the asset to be frozen.
   * - `who`: The account to be frozen.
   *
   * Emits `Frozen`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'Freeze'; params: { id: StagingXcmV4Location; who: MultiAddressLike } }
  /**
   * Allow unprivileged transfers to and from an account again.
   *
   * Origin must be Signed and the sender should be the Admin of the asset `id`.
   *
   * - `id`: The identifier of the asset to be frozen.
   * - `who`: The account to be unfrozen.
   *
   * Emits `Thawed`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'Thaw'; params: { id: StagingXcmV4Location; who: MultiAddressLike } }
  /**
   * Disallow further unprivileged transfers for the asset class.
   *
   * Origin must be Signed and the sender should be the Freezer of the asset `id`.
   *
   * - `id`: The identifier of the asset to be frozen.
   *
   * Emits `Frozen`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'FreezeAsset'; params: { id: StagingXcmV4Location } }
  /**
   * Allow unprivileged transfers for the asset again.
   *
   * Origin must be Signed and the sender should be the Admin of the asset `id`.
   *
   * - `id`: The identifier of the asset to be thawed.
   *
   * Emits `Thawed`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'ThawAsset'; params: { id: StagingXcmV4Location } }
  /**
   * Change the Owner of an asset.
   *
   * Origin must be Signed and the sender should be the Owner of the asset `id`.
   *
   * - `id`: The identifier of the asset.
   * - `owner`: The new Owner of this asset.
   *
   * Emits `OwnerChanged`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'TransferOwnership'; params: { id: StagingXcmV4Location; owner: MultiAddressLike } }
  /**
   * Change the Issuer, Admin and Freezer of an asset.
   *
   * Origin must be Signed and the sender should be the Owner of the asset `id`.
   *
   * - `id`: The identifier of the asset to be frozen.
   * - `issuer`: The new Issuer of this asset.
   * - `admin`: The new Admin of this asset.
   * - `freezer`: The new Freezer of this asset.
   *
   * Emits `TeamChanged`.
   *
   * Weight: `O(1)`
   **/
  | {
      name: 'SetTeam';
      params: {
        id: StagingXcmV4Location;
        issuer: MultiAddressLike;
        admin: MultiAddressLike;
        freezer: MultiAddressLike;
      };
    }
  /**
   * Set the metadata for an asset.
   *
   * Origin must be Signed and the sender should be the Owner of the asset `id`.
   *
   * Funds of sender are reserved according to the formula:
   * `MetadataDepositBase + MetadataDepositPerByte * (name.len + symbol.len)` taking into
   * account any already reserved funds.
   *
   * - `id`: The identifier of the asset to update.
   * - `name`: The user friendly name of this asset. Limited in length by `StringLimit`.
   * - `symbol`: The exchange symbol for this asset. Limited in length by `StringLimit`.
   * - `decimals`: The number of decimals this asset uses to represent one unit.
   *
   * Emits `MetadataSet`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'SetMetadata'; params: { id: StagingXcmV4Location; name: BytesLike; symbol: BytesLike; decimals: number } }
  /**
   * Clear the metadata for an asset.
   *
   * Origin must be Signed and the sender should be the Owner of the asset `id`.
   *
   * Any deposit is freed for the asset owner.
   *
   * - `id`: The identifier of the asset to clear.
   *
   * Emits `MetadataCleared`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'ClearMetadata'; params: { id: StagingXcmV4Location } }
  /**
   * Force the metadata for an asset to some value.
   *
   * Origin must be ForceOrigin.
   *
   * Any deposit is left alone.
   *
   * - `id`: The identifier of the asset to update.
   * - `name`: The user friendly name of this asset. Limited in length by `StringLimit`.
   * - `symbol`: The exchange symbol for this asset. Limited in length by `StringLimit`.
   * - `decimals`: The number of decimals this asset uses to represent one unit.
   *
   * Emits `MetadataSet`.
   *
   * Weight: `O(N + S)` where N and S are the length of the name and symbol respectively.
   **/
  | {
      name: 'ForceSetMetadata';
      params: { id: StagingXcmV4Location; name: BytesLike; symbol: BytesLike; decimals: number; isFrozen: boolean };
    }
  /**
   * Clear the metadata for an asset.
   *
   * Origin must be ForceOrigin.
   *
   * Any deposit is returned.
   *
   * - `id`: The identifier of the asset to clear.
   *
   * Emits `MetadataCleared`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'ForceClearMetadata'; params: { id: StagingXcmV4Location } }
  /**
   * Alter the attributes of a given asset.
   *
   * Origin must be `ForceOrigin`.
   *
   * - `id`: The identifier of the asset.
   * - `owner`: The new Owner of this asset.
   * - `issuer`: The new Issuer of this asset.
   * - `admin`: The new Admin of this asset.
   * - `freezer`: The new Freezer of this asset.
   * - `min_balance`: The minimum balance of this new asset that any single account must
   * have. If an account's balance is reduced below this, then it collapses to zero.
   * - `is_sufficient`: Whether a non-zero balance of this asset is deposit of sufficient
   * value to account for the state bloat associated with its balance storage. If set to
   * `true`, then non-zero balances may be stored without a `consumer` reference (and thus
   * an ED in the Balances pallet or whatever else is used to control user-account state
   * growth).
   * - `is_frozen`: Whether this asset class is frozen except for permissioned/admin
   * instructions.
   *
   * Emits `AssetStatusChanged` with the identity of the asset.
   *
   * Weight: `O(1)`
   **/
  | {
      name: 'ForceAssetStatus';
      params: {
        id: StagingXcmV4Location;
        owner: MultiAddressLike;
        issuer: MultiAddressLike;
        admin: MultiAddressLike;
        freezer: MultiAddressLike;
        minBalance: bigint;
        isSufficient: boolean;
        isFrozen: boolean;
      };
    }
  /**
   * Approve an amount of asset for transfer by a delegated third-party account.
   *
   * Origin must be Signed.
   *
   * Ensures that `ApprovalDeposit` worth of `Currency` is reserved from signing account
   * for the purpose of holding the approval. If some non-zero amount of assets is already
   * approved from signing account to `delegate`, then it is topped up or unreserved to
   * meet the right value.
   *
   * NOTE: The signing account does not need to own `amount` of assets at the point of
   * making this call.
   *
   * - `id`: The identifier of the asset.
   * - `delegate`: The account to delegate permission to transfer asset.
   * - `amount`: The amount of asset that may be transferred by `delegate`. If there is
   * already an approval in place, then this acts additively.
   *
   * Emits `ApprovedTransfer` on success.
   *
   * Weight: `O(1)`
   **/
  | { name: 'ApproveTransfer'; params: { id: StagingXcmV4Location; delegate: MultiAddressLike; amount: bigint } }
  /**
   * Cancel all of some asset approved for delegated transfer by a third-party account.
   *
   * Origin must be Signed and there must be an approval in place between signer and
   * `delegate`.
   *
   * Unreserves any deposit previously reserved by `approve_transfer` for the approval.
   *
   * - `id`: The identifier of the asset.
   * - `delegate`: The account delegated permission to transfer asset.
   *
   * Emits `ApprovalCancelled` on success.
   *
   * Weight: `O(1)`
   **/
  | { name: 'CancelApproval'; params: { id: StagingXcmV4Location; delegate: MultiAddressLike } }
  /**
   * Cancel all of some asset approved for delegated transfer by a third-party account.
   *
   * Origin must be either ForceOrigin or Signed origin with the signer being the Admin
   * account of the asset `id`.
   *
   * Unreserves any deposit previously reserved by `approve_transfer` for the approval.
   *
   * - `id`: The identifier of the asset.
   * - `delegate`: The account delegated permission to transfer asset.
   *
   * Emits `ApprovalCancelled` on success.
   *
   * Weight: `O(1)`
   **/
  | {
      name: 'ForceCancelApproval';
      params: { id: StagingXcmV4Location; owner: MultiAddressLike; delegate: MultiAddressLike };
    }
  /**
   * Transfer some asset balance from a previously delegated account to some third-party
   * account.
   *
   * Origin must be Signed and there must be an approval in place by the `owner` to the
   * signer.
   *
   * If the entire amount approved for transfer is transferred, then any deposit previously
   * reserved by `approve_transfer` is unreserved.
   *
   * - `id`: The identifier of the asset.
   * - `owner`: The account which previously approved for a transfer of at least `amount` and
   * from which the asset balance will be withdrawn.
   * - `destination`: The account to which the asset balance of `amount` will be transferred.
   * - `amount`: The amount of assets to transfer.
   *
   * Emits `TransferredApproved` on success.
   *
   * Weight: `O(1)`
   **/
  | {
      name: 'TransferApproved';
      params: { id: StagingXcmV4Location; owner: MultiAddressLike; destination: MultiAddressLike; amount: bigint };
    }
  /**
   * Create an asset account for non-provider assets.
   *
   * A deposit will be taken from the signer account.
   *
   * - `origin`: Must be Signed; the signer account must have sufficient funds for a deposit
   * to be taken.
   * - `id`: The identifier of the asset for the account to be created.
   *
   * Emits `Touched` event when successful.
   **/
  | { name: 'Touch'; params: { id: StagingXcmV4Location } }
  /**
   * Return the deposit (if any) of an asset account or a consumer reference (if any) of an
   * account.
   *
   * The origin must be Signed.
   *
   * - `id`: The identifier of the asset for which the caller would like the deposit
   * refunded.
   * - `allow_burn`: If `true` then assets may be destroyed in order to complete the refund.
   *
   * Emits `Refunded` event when successful.
   **/
  | { name: 'Refund'; params: { id: StagingXcmV4Location; allowBurn: boolean } }
  /**
   * Sets the minimum balance of an asset.
   *
   * Only works if there aren't any accounts that are holding the asset or if
   * the new value of `min_balance` is less than the old one.
   *
   * Origin must be Signed and the sender has to be the Owner of the
   * asset `id`.
   *
   * - `id`: The identifier of the asset.
   * - `min_balance`: The new value of `min_balance`.
   *
   * Emits `AssetMinBalanceChanged` event when successful.
   **/
  | { name: 'SetMinBalance'; params: { id: StagingXcmV4Location; minBalance: bigint } }
  /**
   * Create an asset account for `who`.
   *
   * A deposit will be taken from the signer account.
   *
   * - `origin`: Must be Signed by `Freezer` or `Admin` of the asset `id`; the signer account
   * must have sufficient funds for a deposit to be taken.
   * - `id`: The identifier of the asset for the account to be created.
   * - `who`: The account to be created.
   *
   * Emits `Touched` event when successful.
   **/
  | { name: 'TouchOther'; params: { id: StagingXcmV4Location; who: MultiAddressLike } }
  /**
   * Return the deposit (if any) of a target asset account. Useful if you are the depositor.
   *
   * The origin must be Signed and either the account owner, depositor, or asset `Admin`. In
   * order to burn a non-zero balance of the asset, the caller must be the account and should
   * use `refund`.
   *
   * - `id`: The identifier of the asset for the account holding a deposit.
   * - `who`: The account to refund.
   *
   * Emits `Refunded` event when successful.
   **/
  | { name: 'RefundOther'; params: { id: StagingXcmV4Location; who: MultiAddressLike } }
  /**
   * Disallow further unprivileged transfers of an asset `id` to and from an account `who`.
   *
   * Origin must be Signed and the sender should be the Freezer of the asset `id`.
   *
   * - `id`: The identifier of the account's asset.
   * - `who`: The account to be unblocked.
   *
   * Emits `Blocked`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'Block'; params: { id: StagingXcmV4Location; who: MultiAddressLike } };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletNftFractionalizationCall =
  /**
   * Lock the NFT and mint a new fungible asset.
   *
   * The dispatch origin for this call must be Signed.
   * The origin must be the owner of the NFT they are trying to lock.
   *
   * `Deposit` funds of sender are reserved.
   *
   * - `nft_collection_id`: The ID used to identify the collection of the NFT.
   * Is used within the context of `pallet_nfts`.
   * - `nft_id`: The ID used to identify the NFT within the given collection.
   * Is used within the context of `pallet_nfts`.
   * - `asset_id`: The ID of the new asset. It must not exist.
   * Is used within the context of `pallet_assets`.
   * - `beneficiary`: The account that will receive the newly created asset.
   * - `fractions`: The total issuance of the newly created asset class.
   *
   * Emits `NftFractionalized` event when successful.
   **/
  | {
      name: 'Fractionalize';
      params: { nftCollectionId: number; nftId: number; assetId: number; beneficiary: MultiAddress; fractions: bigint };
    }
  /**
   * Burn the total issuance of the fungible asset and return (unlock) the locked NFT.
   *
   * The dispatch origin for this call must be Signed.
   *
   * `Deposit` funds will be returned to `asset_creator`.
   *
   * - `nft_collection_id`: The ID used to identify the collection of the NFT.
   * Is used within the context of `pallet_nfts`.
   * - `nft_id`: The ID used to identify the NFT within the given collection.
   * Is used within the context of `pallet_nfts`.
   * - `asset_id`: The ID of the asset being returned and destroyed. Must match
   * the original ID of the created asset, corresponding to the NFT.
   * Is used within the context of `pallet_assets`.
   * - `beneficiary`: The account that will receive the unified NFT.
   *
   * Emits `NftUnified` event when successful.
   **/
  | { name: 'Unify'; params: { nftCollectionId: number; nftId: number; assetId: number; beneficiary: MultiAddress } };

export type PalletNftFractionalizationCallLike =
  /**
   * Lock the NFT and mint a new fungible asset.
   *
   * The dispatch origin for this call must be Signed.
   * The origin must be the owner of the NFT they are trying to lock.
   *
   * `Deposit` funds of sender are reserved.
   *
   * - `nft_collection_id`: The ID used to identify the collection of the NFT.
   * Is used within the context of `pallet_nfts`.
   * - `nft_id`: The ID used to identify the NFT within the given collection.
   * Is used within the context of `pallet_nfts`.
   * - `asset_id`: The ID of the new asset. It must not exist.
   * Is used within the context of `pallet_assets`.
   * - `beneficiary`: The account that will receive the newly created asset.
   * - `fractions`: The total issuance of the newly created asset class.
   *
   * Emits `NftFractionalized` event when successful.
   **/
  | {
      name: 'Fractionalize';
      params: {
        nftCollectionId: number;
        nftId: number;
        assetId: number;
        beneficiary: MultiAddressLike;
        fractions: bigint;
      };
    }
  /**
   * Burn the total issuance of the fungible asset and return (unlock) the locked NFT.
   *
   * The dispatch origin for this call must be Signed.
   *
   * `Deposit` funds will be returned to `asset_creator`.
   *
   * - `nft_collection_id`: The ID used to identify the collection of the NFT.
   * Is used within the context of `pallet_nfts`.
   * - `nft_id`: The ID used to identify the NFT within the given collection.
   * Is used within the context of `pallet_nfts`.
   * - `asset_id`: The ID of the asset being returned and destroyed. Must match
   * the original ID of the created asset, corresponding to the NFT.
   * Is used within the context of `pallet_assets`.
   * - `beneficiary`: The account that will receive the unified NFT.
   *
   * Emits `NftUnified` event when successful.
   **/
  | {
      name: 'Unify';
      params: { nftCollectionId: number; nftId: number; assetId: number; beneficiary: MultiAddressLike };
    };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletAssetsCall003 =
  /**
   * Issue a new class of fungible assets from a public origin.
   *
   * This new asset class has no assets initially and its owner is the origin.
   *
   * The origin must conform to the configured `CreateOrigin` and have sufficient funds free.
   *
   * Funds of sender are reserved by `AssetDeposit`.
   *
   * Parameters:
   * - `id`: The identifier of the new asset. This must not be currently in use to identify
   * an existing asset. If [`NextAssetId`] is set, then this must be equal to it.
   * - `admin`: The admin of this class of assets. The admin is the initial address of each
   * member of the asset class's admin team.
   * - `min_balance`: The minimum balance of this new asset that any single account must
   * have. If an account's balance is reduced below this, then it collapses to zero.
   *
   * Emits `Created` event when successful.
   *
   * Weight: `O(1)`
   **/
  | { name: 'Create'; params: { id: number; admin: MultiAddress; minBalance: bigint } }
  /**
   * Issue a new class of fungible assets from a privileged origin.
   *
   * This new asset class has no assets initially.
   *
   * The origin must conform to `ForceOrigin`.
   *
   * Unlike `create`, no funds are reserved.
   *
   * - `id`: The identifier of the new asset. This must not be currently in use to identify
   * an existing asset. If [`NextAssetId`] is set, then this must be equal to it.
   * - `owner`: The owner of this class of assets. The owner has full superuser permissions
   * over this asset, but may later change and configure the permissions using
   * `transfer_ownership` and `set_team`.
   * - `min_balance`: The minimum balance of this new asset that any single account must
   * have. If an account's balance is reduced below this, then it collapses to zero.
   *
   * Emits `ForceCreated` event when successful.
   *
   * Weight: `O(1)`
   **/
  | { name: 'ForceCreate'; params: { id: number; owner: MultiAddress; isSufficient: boolean; minBalance: bigint } }
  /**
   * Start the process of destroying a fungible asset class.
   *
   * `start_destroy` is the first in a series of extrinsics that should be called, to allow
   * destruction of an asset class.
   *
   * The origin must conform to `ForceOrigin` or must be `Signed` by the asset's `owner`.
   *
   * - `id`: The identifier of the asset to be destroyed. This must identify an existing
   * asset.
   *
   * The asset class must be frozen before calling `start_destroy`.
   **/
  | { name: 'StartDestroy'; params: { id: number } }
  /**
   * Destroy all accounts associated with a given asset.
   *
   * `destroy_accounts` should only be called after `start_destroy` has been called, and the
   * asset is in a `Destroying` state.
   *
   * Due to weight restrictions, this function may need to be called multiple times to fully
   * destroy all accounts. It will destroy `RemoveItemsLimit` accounts at a time.
   *
   * - `id`: The identifier of the asset to be destroyed. This must identify an existing
   * asset.
   *
   * Each call emits the `Event::DestroyedAccounts` event.
   **/
  | { name: 'DestroyAccounts'; params: { id: number } }
  /**
   * Destroy all approvals associated with a given asset up to the max (T::RemoveItemsLimit).
   *
   * `destroy_approvals` should only be called after `start_destroy` has been called, and the
   * asset is in a `Destroying` state.
   *
   * Due to weight restrictions, this function may need to be called multiple times to fully
   * destroy all approvals. It will destroy `RemoveItemsLimit` approvals at a time.
   *
   * - `id`: The identifier of the asset to be destroyed. This must identify an existing
   * asset.
   *
   * Each call emits the `Event::DestroyedApprovals` event.
   **/
  | { name: 'DestroyApprovals'; params: { id: number } }
  /**
   * Complete destroying asset and unreserve currency.
   *
   * `finish_destroy` should only be called after `start_destroy` has been called, and the
   * asset is in a `Destroying` state. All accounts or approvals should be destroyed before
   * hand.
   *
   * - `id`: The identifier of the asset to be destroyed. This must identify an existing
   * asset.
   *
   * Each successful call emits the `Event::Destroyed` event.
   **/
  | { name: 'FinishDestroy'; params: { id: number } }
  /**
   * Mint assets of a particular class.
   *
   * The origin must be Signed and the sender must be the Issuer of the asset `id`.
   *
   * - `id`: The identifier of the asset to have some amount minted.
   * - `beneficiary`: The account to be credited with the minted assets.
   * - `amount`: The amount of the asset to be minted.
   *
   * Emits `Issued` event when successful.
   *
   * Weight: `O(1)`
   * Modes: Pre-existing balance of `beneficiary`; Account pre-existence of `beneficiary`.
   **/
  | { name: 'Mint'; params: { id: number; beneficiary: MultiAddress; amount: bigint } }
  /**
   * Reduce the balance of `who` by as much as possible up to `amount` assets of `id`.
   *
   * Origin must be Signed and the sender should be the Manager of the asset `id`.
   *
   * Bails with `NoAccount` if the `who` is already dead.
   *
   * - `id`: The identifier of the asset to have some amount burned.
   * - `who`: The account to be debited from.
   * - `amount`: The maximum amount by which `who`'s balance should be reduced.
   *
   * Emits `Burned` with the actual amount burned. If this takes the balance to below the
   * minimum for the asset, then the amount burned is increased to take it to zero.
   *
   * Weight: `O(1)`
   * Modes: Post-existence of `who`; Pre & post Zombie-status of `who`.
   **/
  | { name: 'Burn'; params: { id: number; who: MultiAddress; amount: bigint } }
  /**
   * Move some assets from the sender account to another.
   *
   * Origin must be Signed.
   *
   * - `id`: The identifier of the asset to have some amount transferred.
   * - `target`: The account to be credited.
   * - `amount`: The amount by which the sender's balance of assets should be reduced and
   * `target`'s balance increased. The amount actually transferred may be slightly greater in
   * the case that the transfer would otherwise take the sender balance above zero but below
   * the minimum balance. Must be greater than zero.
   *
   * Emits `Transferred` with the actual amount transferred. If this takes the source balance
   * to below the minimum for the asset, then the amount transferred is increased to take it
   * to zero.
   *
   * Weight: `O(1)`
   * Modes: Pre-existence of `target`; Post-existence of sender; Account pre-existence of
   * `target`.
   **/
  | { name: 'Transfer'; params: { id: number; target: MultiAddress; amount: bigint } }
  /**
   * Move some assets from the sender account to another, keeping the sender account alive.
   *
   * Origin must be Signed.
   *
   * - `id`: The identifier of the asset to have some amount transferred.
   * - `target`: The account to be credited.
   * - `amount`: The amount by which the sender's balance of assets should be reduced and
   * `target`'s balance increased. The amount actually transferred may be slightly greater in
   * the case that the transfer would otherwise take the sender balance above zero but below
   * the minimum balance. Must be greater than zero.
   *
   * Emits `Transferred` with the actual amount transferred. If this takes the source balance
   * to below the minimum for the asset, then the amount transferred is increased to take it
   * to zero.
   *
   * Weight: `O(1)`
   * Modes: Pre-existence of `target`; Post-existence of sender; Account pre-existence of
   * `target`.
   **/
  | { name: 'TransferKeepAlive'; params: { id: number; target: MultiAddress; amount: bigint } }
  /**
   * Move some assets from one account to another.
   *
   * Origin must be Signed and the sender should be the Admin of the asset `id`.
   *
   * - `id`: The identifier of the asset to have some amount transferred.
   * - `source`: The account to be debited.
   * - `dest`: The account to be credited.
   * - `amount`: The amount by which the `source`'s balance of assets should be reduced and
   * `dest`'s balance increased. The amount actually transferred may be slightly greater in
   * the case that the transfer would otherwise take the `source` balance above zero but
   * below the minimum balance. Must be greater than zero.
   *
   * Emits `Transferred` with the actual amount transferred. If this takes the source balance
   * to below the minimum for the asset, then the amount transferred is increased to take it
   * to zero.
   *
   * Weight: `O(1)`
   * Modes: Pre-existence of `dest`; Post-existence of `source`; Account pre-existence of
   * `dest`.
   **/
  | { name: 'ForceTransfer'; params: { id: number; source: MultiAddress; dest: MultiAddress; amount: bigint } }
  /**
   * Disallow further unprivileged transfers of an asset `id` from an account `who`. `who`
   * must already exist as an entry in `Account`s of the asset. If you want to freeze an
   * account that does not have an entry, use `touch_other` first.
   *
   * Origin must be Signed and the sender should be the Freezer of the asset `id`.
   *
   * - `id`: The identifier of the asset to be frozen.
   * - `who`: The account to be frozen.
   *
   * Emits `Frozen`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'Freeze'; params: { id: number; who: MultiAddress } }
  /**
   * Allow unprivileged transfers to and from an account again.
   *
   * Origin must be Signed and the sender should be the Admin of the asset `id`.
   *
   * - `id`: The identifier of the asset to be frozen.
   * - `who`: The account to be unfrozen.
   *
   * Emits `Thawed`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'Thaw'; params: { id: number; who: MultiAddress } }
  /**
   * Disallow further unprivileged transfers for the asset class.
   *
   * Origin must be Signed and the sender should be the Freezer of the asset `id`.
   *
   * - `id`: The identifier of the asset to be frozen.
   *
   * Emits `Frozen`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'FreezeAsset'; params: { id: number } }
  /**
   * Allow unprivileged transfers for the asset again.
   *
   * Origin must be Signed and the sender should be the Admin of the asset `id`.
   *
   * - `id`: The identifier of the asset to be thawed.
   *
   * Emits `Thawed`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'ThawAsset'; params: { id: number } }
  /**
   * Change the Owner of an asset.
   *
   * Origin must be Signed and the sender should be the Owner of the asset `id`.
   *
   * - `id`: The identifier of the asset.
   * - `owner`: The new Owner of this asset.
   *
   * Emits `OwnerChanged`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'TransferOwnership'; params: { id: number; owner: MultiAddress } }
  /**
   * Change the Issuer, Admin and Freezer of an asset.
   *
   * Origin must be Signed and the sender should be the Owner of the asset `id`.
   *
   * - `id`: The identifier of the asset to be frozen.
   * - `issuer`: The new Issuer of this asset.
   * - `admin`: The new Admin of this asset.
   * - `freezer`: The new Freezer of this asset.
   *
   * Emits `TeamChanged`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'SetTeam'; params: { id: number; issuer: MultiAddress; admin: MultiAddress; freezer: MultiAddress } }
  /**
   * Set the metadata for an asset.
   *
   * Origin must be Signed and the sender should be the Owner of the asset `id`.
   *
   * Funds of sender are reserved according to the formula:
   * `MetadataDepositBase + MetadataDepositPerByte * (name.len + symbol.len)` taking into
   * account any already reserved funds.
   *
   * - `id`: The identifier of the asset to update.
   * - `name`: The user friendly name of this asset. Limited in length by `StringLimit`.
   * - `symbol`: The exchange symbol for this asset. Limited in length by `StringLimit`.
   * - `decimals`: The number of decimals this asset uses to represent one unit.
   *
   * Emits `MetadataSet`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'SetMetadata'; params: { id: number; name: Bytes; symbol: Bytes; decimals: number } }
  /**
   * Clear the metadata for an asset.
   *
   * Origin must be Signed and the sender should be the Owner of the asset `id`.
   *
   * Any deposit is freed for the asset owner.
   *
   * - `id`: The identifier of the asset to clear.
   *
   * Emits `MetadataCleared`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'ClearMetadata'; params: { id: number } }
  /**
   * Force the metadata for an asset to some value.
   *
   * Origin must be ForceOrigin.
   *
   * Any deposit is left alone.
   *
   * - `id`: The identifier of the asset to update.
   * - `name`: The user friendly name of this asset. Limited in length by `StringLimit`.
   * - `symbol`: The exchange symbol for this asset. Limited in length by `StringLimit`.
   * - `decimals`: The number of decimals this asset uses to represent one unit.
   *
   * Emits `MetadataSet`.
   *
   * Weight: `O(N + S)` where N and S are the length of the name and symbol respectively.
   **/
  | {
      name: 'ForceSetMetadata';
      params: { id: number; name: Bytes; symbol: Bytes; decimals: number; isFrozen: boolean };
    }
  /**
   * Clear the metadata for an asset.
   *
   * Origin must be ForceOrigin.
   *
   * Any deposit is returned.
   *
   * - `id`: The identifier of the asset to clear.
   *
   * Emits `MetadataCleared`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'ForceClearMetadata'; params: { id: number } }
  /**
   * Alter the attributes of a given asset.
   *
   * Origin must be `ForceOrigin`.
   *
   * - `id`: The identifier of the asset.
   * - `owner`: The new Owner of this asset.
   * - `issuer`: The new Issuer of this asset.
   * - `admin`: The new Admin of this asset.
   * - `freezer`: The new Freezer of this asset.
   * - `min_balance`: The minimum balance of this new asset that any single account must
   * have. If an account's balance is reduced below this, then it collapses to zero.
   * - `is_sufficient`: Whether a non-zero balance of this asset is deposit of sufficient
   * value to account for the state bloat associated with its balance storage. If set to
   * `true`, then non-zero balances may be stored without a `consumer` reference (and thus
   * an ED in the Balances pallet or whatever else is used to control user-account state
   * growth).
   * - `is_frozen`: Whether this asset class is frozen except for permissioned/admin
   * instructions.
   *
   * Emits `AssetStatusChanged` with the identity of the asset.
   *
   * Weight: `O(1)`
   **/
  | {
      name: 'ForceAssetStatus';
      params: {
        id: number;
        owner: MultiAddress;
        issuer: MultiAddress;
        admin: MultiAddress;
        freezer: MultiAddress;
        minBalance: bigint;
        isSufficient: boolean;
        isFrozen: boolean;
      };
    }
  /**
   * Approve an amount of asset for transfer by a delegated third-party account.
   *
   * Origin must be Signed.
   *
   * Ensures that `ApprovalDeposit` worth of `Currency` is reserved from signing account
   * for the purpose of holding the approval. If some non-zero amount of assets is already
   * approved from signing account to `delegate`, then it is topped up or unreserved to
   * meet the right value.
   *
   * NOTE: The signing account does not need to own `amount` of assets at the point of
   * making this call.
   *
   * - `id`: The identifier of the asset.
   * - `delegate`: The account to delegate permission to transfer asset.
   * - `amount`: The amount of asset that may be transferred by `delegate`. If there is
   * already an approval in place, then this acts additively.
   *
   * Emits `ApprovedTransfer` on success.
   *
   * Weight: `O(1)`
   **/
  | { name: 'ApproveTransfer'; params: { id: number; delegate: MultiAddress; amount: bigint } }
  /**
   * Cancel all of some asset approved for delegated transfer by a third-party account.
   *
   * Origin must be Signed and there must be an approval in place between signer and
   * `delegate`.
   *
   * Unreserves any deposit previously reserved by `approve_transfer` for the approval.
   *
   * - `id`: The identifier of the asset.
   * - `delegate`: The account delegated permission to transfer asset.
   *
   * Emits `ApprovalCancelled` on success.
   *
   * Weight: `O(1)`
   **/
  | { name: 'CancelApproval'; params: { id: number; delegate: MultiAddress } }
  /**
   * Cancel all of some asset approved for delegated transfer by a third-party account.
   *
   * Origin must be either ForceOrigin or Signed origin with the signer being the Admin
   * account of the asset `id`.
   *
   * Unreserves any deposit previously reserved by `approve_transfer` for the approval.
   *
   * - `id`: The identifier of the asset.
   * - `delegate`: The account delegated permission to transfer asset.
   *
   * Emits `ApprovalCancelled` on success.
   *
   * Weight: `O(1)`
   **/
  | { name: 'ForceCancelApproval'; params: { id: number; owner: MultiAddress; delegate: MultiAddress } }
  /**
   * Transfer some asset balance from a previously delegated account to some third-party
   * account.
   *
   * Origin must be Signed and there must be an approval in place by the `owner` to the
   * signer.
   *
   * If the entire amount approved for transfer is transferred, then any deposit previously
   * reserved by `approve_transfer` is unreserved.
   *
   * - `id`: The identifier of the asset.
   * - `owner`: The account which previously approved for a transfer of at least `amount` and
   * from which the asset balance will be withdrawn.
   * - `destination`: The account to which the asset balance of `amount` will be transferred.
   * - `amount`: The amount of assets to transfer.
   *
   * Emits `TransferredApproved` on success.
   *
   * Weight: `O(1)`
   **/
  | { name: 'TransferApproved'; params: { id: number; owner: MultiAddress; destination: MultiAddress; amount: bigint } }
  /**
   * Create an asset account for non-provider assets.
   *
   * A deposit will be taken from the signer account.
   *
   * - `origin`: Must be Signed; the signer account must have sufficient funds for a deposit
   * to be taken.
   * - `id`: The identifier of the asset for the account to be created.
   *
   * Emits `Touched` event when successful.
   **/
  | { name: 'Touch'; params: { id: number } }
  /**
   * Return the deposit (if any) of an asset account or a consumer reference (if any) of an
   * account.
   *
   * The origin must be Signed.
   *
   * - `id`: The identifier of the asset for which the caller would like the deposit
   * refunded.
   * - `allow_burn`: If `true` then assets may be destroyed in order to complete the refund.
   *
   * Emits `Refunded` event when successful.
   **/
  | { name: 'Refund'; params: { id: number; allowBurn: boolean } }
  /**
   * Sets the minimum balance of an asset.
   *
   * Only works if there aren't any accounts that are holding the asset or if
   * the new value of `min_balance` is less than the old one.
   *
   * Origin must be Signed and the sender has to be the Owner of the
   * asset `id`.
   *
   * - `id`: The identifier of the asset.
   * - `min_balance`: The new value of `min_balance`.
   *
   * Emits `AssetMinBalanceChanged` event when successful.
   **/
  | { name: 'SetMinBalance'; params: { id: number; minBalance: bigint } }
  /**
   * Create an asset account for `who`.
   *
   * A deposit will be taken from the signer account.
   *
   * - `origin`: Must be Signed by `Freezer` or `Admin` of the asset `id`; the signer account
   * must have sufficient funds for a deposit to be taken.
   * - `id`: The identifier of the asset for the account to be created.
   * - `who`: The account to be created.
   *
   * Emits `Touched` event when successful.
   **/
  | { name: 'TouchOther'; params: { id: number; who: MultiAddress } }
  /**
   * Return the deposit (if any) of a target asset account. Useful if you are the depositor.
   *
   * The origin must be Signed and either the account owner, depositor, or asset `Admin`. In
   * order to burn a non-zero balance of the asset, the caller must be the account and should
   * use `refund`.
   *
   * - `id`: The identifier of the asset for the account holding a deposit.
   * - `who`: The account to refund.
   *
   * Emits `Refunded` event when successful.
   **/
  | { name: 'RefundOther'; params: { id: number; who: MultiAddress } }
  /**
   * Disallow further unprivileged transfers of an asset `id` to and from an account `who`.
   *
   * Origin must be Signed and the sender should be the Freezer of the asset `id`.
   *
   * - `id`: The identifier of the account's asset.
   * - `who`: The account to be unblocked.
   *
   * Emits `Blocked`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'Block'; params: { id: number; who: MultiAddress } };

export type PalletAssetsCallLike003 =
  /**
   * Issue a new class of fungible assets from a public origin.
   *
   * This new asset class has no assets initially and its owner is the origin.
   *
   * The origin must conform to the configured `CreateOrigin` and have sufficient funds free.
   *
   * Funds of sender are reserved by `AssetDeposit`.
   *
   * Parameters:
   * - `id`: The identifier of the new asset. This must not be currently in use to identify
   * an existing asset. If [`NextAssetId`] is set, then this must be equal to it.
   * - `admin`: The admin of this class of assets. The admin is the initial address of each
   * member of the asset class's admin team.
   * - `min_balance`: The minimum balance of this new asset that any single account must
   * have. If an account's balance is reduced below this, then it collapses to zero.
   *
   * Emits `Created` event when successful.
   *
   * Weight: `O(1)`
   **/
  | { name: 'Create'; params: { id: number; admin: MultiAddressLike; minBalance: bigint } }
  /**
   * Issue a new class of fungible assets from a privileged origin.
   *
   * This new asset class has no assets initially.
   *
   * The origin must conform to `ForceOrigin`.
   *
   * Unlike `create`, no funds are reserved.
   *
   * - `id`: The identifier of the new asset. This must not be currently in use to identify
   * an existing asset. If [`NextAssetId`] is set, then this must be equal to it.
   * - `owner`: The owner of this class of assets. The owner has full superuser permissions
   * over this asset, but may later change and configure the permissions using
   * `transfer_ownership` and `set_team`.
   * - `min_balance`: The minimum balance of this new asset that any single account must
   * have. If an account's balance is reduced below this, then it collapses to zero.
   *
   * Emits `ForceCreated` event when successful.
   *
   * Weight: `O(1)`
   **/
  | { name: 'ForceCreate'; params: { id: number; owner: MultiAddressLike; isSufficient: boolean; minBalance: bigint } }
  /**
   * Start the process of destroying a fungible asset class.
   *
   * `start_destroy` is the first in a series of extrinsics that should be called, to allow
   * destruction of an asset class.
   *
   * The origin must conform to `ForceOrigin` or must be `Signed` by the asset's `owner`.
   *
   * - `id`: The identifier of the asset to be destroyed. This must identify an existing
   * asset.
   *
   * The asset class must be frozen before calling `start_destroy`.
   **/
  | { name: 'StartDestroy'; params: { id: number } }
  /**
   * Destroy all accounts associated with a given asset.
   *
   * `destroy_accounts` should only be called after `start_destroy` has been called, and the
   * asset is in a `Destroying` state.
   *
   * Due to weight restrictions, this function may need to be called multiple times to fully
   * destroy all accounts. It will destroy `RemoveItemsLimit` accounts at a time.
   *
   * - `id`: The identifier of the asset to be destroyed. This must identify an existing
   * asset.
   *
   * Each call emits the `Event::DestroyedAccounts` event.
   **/
  | { name: 'DestroyAccounts'; params: { id: number } }
  /**
   * Destroy all approvals associated with a given asset up to the max (T::RemoveItemsLimit).
   *
   * `destroy_approvals` should only be called after `start_destroy` has been called, and the
   * asset is in a `Destroying` state.
   *
   * Due to weight restrictions, this function may need to be called multiple times to fully
   * destroy all approvals. It will destroy `RemoveItemsLimit` approvals at a time.
   *
   * - `id`: The identifier of the asset to be destroyed. This must identify an existing
   * asset.
   *
   * Each call emits the `Event::DestroyedApprovals` event.
   **/
  | { name: 'DestroyApprovals'; params: { id: number } }
  /**
   * Complete destroying asset and unreserve currency.
   *
   * `finish_destroy` should only be called after `start_destroy` has been called, and the
   * asset is in a `Destroying` state. All accounts or approvals should be destroyed before
   * hand.
   *
   * - `id`: The identifier of the asset to be destroyed. This must identify an existing
   * asset.
   *
   * Each successful call emits the `Event::Destroyed` event.
   **/
  | { name: 'FinishDestroy'; params: { id: number } }
  /**
   * Mint assets of a particular class.
   *
   * The origin must be Signed and the sender must be the Issuer of the asset `id`.
   *
   * - `id`: The identifier of the asset to have some amount minted.
   * - `beneficiary`: The account to be credited with the minted assets.
   * - `amount`: The amount of the asset to be minted.
   *
   * Emits `Issued` event when successful.
   *
   * Weight: `O(1)`
   * Modes: Pre-existing balance of `beneficiary`; Account pre-existence of `beneficiary`.
   **/
  | { name: 'Mint'; params: { id: number; beneficiary: MultiAddressLike; amount: bigint } }
  /**
   * Reduce the balance of `who` by as much as possible up to `amount` assets of `id`.
   *
   * Origin must be Signed and the sender should be the Manager of the asset `id`.
   *
   * Bails with `NoAccount` if the `who` is already dead.
   *
   * - `id`: The identifier of the asset to have some amount burned.
   * - `who`: The account to be debited from.
   * - `amount`: The maximum amount by which `who`'s balance should be reduced.
   *
   * Emits `Burned` with the actual amount burned. If this takes the balance to below the
   * minimum for the asset, then the amount burned is increased to take it to zero.
   *
   * Weight: `O(1)`
   * Modes: Post-existence of `who`; Pre & post Zombie-status of `who`.
   **/
  | { name: 'Burn'; params: { id: number; who: MultiAddressLike; amount: bigint } }
  /**
   * Move some assets from the sender account to another.
   *
   * Origin must be Signed.
   *
   * - `id`: The identifier of the asset to have some amount transferred.
   * - `target`: The account to be credited.
   * - `amount`: The amount by which the sender's balance of assets should be reduced and
   * `target`'s balance increased. The amount actually transferred may be slightly greater in
   * the case that the transfer would otherwise take the sender balance above zero but below
   * the minimum balance. Must be greater than zero.
   *
   * Emits `Transferred` with the actual amount transferred. If this takes the source balance
   * to below the minimum for the asset, then the amount transferred is increased to take it
   * to zero.
   *
   * Weight: `O(1)`
   * Modes: Pre-existence of `target`; Post-existence of sender; Account pre-existence of
   * `target`.
   **/
  | { name: 'Transfer'; params: { id: number; target: MultiAddressLike; amount: bigint } }
  /**
   * Move some assets from the sender account to another, keeping the sender account alive.
   *
   * Origin must be Signed.
   *
   * - `id`: The identifier of the asset to have some amount transferred.
   * - `target`: The account to be credited.
   * - `amount`: The amount by which the sender's balance of assets should be reduced and
   * `target`'s balance increased. The amount actually transferred may be slightly greater in
   * the case that the transfer would otherwise take the sender balance above zero but below
   * the minimum balance. Must be greater than zero.
   *
   * Emits `Transferred` with the actual amount transferred. If this takes the source balance
   * to below the minimum for the asset, then the amount transferred is increased to take it
   * to zero.
   *
   * Weight: `O(1)`
   * Modes: Pre-existence of `target`; Post-existence of sender; Account pre-existence of
   * `target`.
   **/
  | { name: 'TransferKeepAlive'; params: { id: number; target: MultiAddressLike; amount: bigint } }
  /**
   * Move some assets from one account to another.
   *
   * Origin must be Signed and the sender should be the Admin of the asset `id`.
   *
   * - `id`: The identifier of the asset to have some amount transferred.
   * - `source`: The account to be debited.
   * - `dest`: The account to be credited.
   * - `amount`: The amount by which the `source`'s balance of assets should be reduced and
   * `dest`'s balance increased. The amount actually transferred may be slightly greater in
   * the case that the transfer would otherwise take the `source` balance above zero but
   * below the minimum balance. Must be greater than zero.
   *
   * Emits `Transferred` with the actual amount transferred. If this takes the source balance
   * to below the minimum for the asset, then the amount transferred is increased to take it
   * to zero.
   *
   * Weight: `O(1)`
   * Modes: Pre-existence of `dest`; Post-existence of `source`; Account pre-existence of
   * `dest`.
   **/
  | { name: 'ForceTransfer'; params: { id: number; source: MultiAddressLike; dest: MultiAddressLike; amount: bigint } }
  /**
   * Disallow further unprivileged transfers of an asset `id` from an account `who`. `who`
   * must already exist as an entry in `Account`s of the asset. If you want to freeze an
   * account that does not have an entry, use `touch_other` first.
   *
   * Origin must be Signed and the sender should be the Freezer of the asset `id`.
   *
   * - `id`: The identifier of the asset to be frozen.
   * - `who`: The account to be frozen.
   *
   * Emits `Frozen`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'Freeze'; params: { id: number; who: MultiAddressLike } }
  /**
   * Allow unprivileged transfers to and from an account again.
   *
   * Origin must be Signed and the sender should be the Admin of the asset `id`.
   *
   * - `id`: The identifier of the asset to be frozen.
   * - `who`: The account to be unfrozen.
   *
   * Emits `Thawed`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'Thaw'; params: { id: number; who: MultiAddressLike } }
  /**
   * Disallow further unprivileged transfers for the asset class.
   *
   * Origin must be Signed and the sender should be the Freezer of the asset `id`.
   *
   * - `id`: The identifier of the asset to be frozen.
   *
   * Emits `Frozen`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'FreezeAsset'; params: { id: number } }
  /**
   * Allow unprivileged transfers for the asset again.
   *
   * Origin must be Signed and the sender should be the Admin of the asset `id`.
   *
   * - `id`: The identifier of the asset to be thawed.
   *
   * Emits `Thawed`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'ThawAsset'; params: { id: number } }
  /**
   * Change the Owner of an asset.
   *
   * Origin must be Signed and the sender should be the Owner of the asset `id`.
   *
   * - `id`: The identifier of the asset.
   * - `owner`: The new Owner of this asset.
   *
   * Emits `OwnerChanged`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'TransferOwnership'; params: { id: number; owner: MultiAddressLike } }
  /**
   * Change the Issuer, Admin and Freezer of an asset.
   *
   * Origin must be Signed and the sender should be the Owner of the asset `id`.
   *
   * - `id`: The identifier of the asset to be frozen.
   * - `issuer`: The new Issuer of this asset.
   * - `admin`: The new Admin of this asset.
   * - `freezer`: The new Freezer of this asset.
   *
   * Emits `TeamChanged`.
   *
   * Weight: `O(1)`
   **/
  | {
      name: 'SetTeam';
      params: { id: number; issuer: MultiAddressLike; admin: MultiAddressLike; freezer: MultiAddressLike };
    }
  /**
   * Set the metadata for an asset.
   *
   * Origin must be Signed and the sender should be the Owner of the asset `id`.
   *
   * Funds of sender are reserved according to the formula:
   * `MetadataDepositBase + MetadataDepositPerByte * (name.len + symbol.len)` taking into
   * account any already reserved funds.
   *
   * - `id`: The identifier of the asset to update.
   * - `name`: The user friendly name of this asset. Limited in length by `StringLimit`.
   * - `symbol`: The exchange symbol for this asset. Limited in length by `StringLimit`.
   * - `decimals`: The number of decimals this asset uses to represent one unit.
   *
   * Emits `MetadataSet`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'SetMetadata'; params: { id: number; name: BytesLike; symbol: BytesLike; decimals: number } }
  /**
   * Clear the metadata for an asset.
   *
   * Origin must be Signed and the sender should be the Owner of the asset `id`.
   *
   * Any deposit is freed for the asset owner.
   *
   * - `id`: The identifier of the asset to clear.
   *
   * Emits `MetadataCleared`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'ClearMetadata'; params: { id: number } }
  /**
   * Force the metadata for an asset to some value.
   *
   * Origin must be ForceOrigin.
   *
   * Any deposit is left alone.
   *
   * - `id`: The identifier of the asset to update.
   * - `name`: The user friendly name of this asset. Limited in length by `StringLimit`.
   * - `symbol`: The exchange symbol for this asset. Limited in length by `StringLimit`.
   * - `decimals`: The number of decimals this asset uses to represent one unit.
   *
   * Emits `MetadataSet`.
   *
   * Weight: `O(N + S)` where N and S are the length of the name and symbol respectively.
   **/
  | {
      name: 'ForceSetMetadata';
      params: { id: number; name: BytesLike; symbol: BytesLike; decimals: number; isFrozen: boolean };
    }
  /**
   * Clear the metadata for an asset.
   *
   * Origin must be ForceOrigin.
   *
   * Any deposit is returned.
   *
   * - `id`: The identifier of the asset to clear.
   *
   * Emits `MetadataCleared`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'ForceClearMetadata'; params: { id: number } }
  /**
   * Alter the attributes of a given asset.
   *
   * Origin must be `ForceOrigin`.
   *
   * - `id`: The identifier of the asset.
   * - `owner`: The new Owner of this asset.
   * - `issuer`: The new Issuer of this asset.
   * - `admin`: The new Admin of this asset.
   * - `freezer`: The new Freezer of this asset.
   * - `min_balance`: The minimum balance of this new asset that any single account must
   * have. If an account's balance is reduced below this, then it collapses to zero.
   * - `is_sufficient`: Whether a non-zero balance of this asset is deposit of sufficient
   * value to account for the state bloat associated with its balance storage. If set to
   * `true`, then non-zero balances may be stored without a `consumer` reference (and thus
   * an ED in the Balances pallet or whatever else is used to control user-account state
   * growth).
   * - `is_frozen`: Whether this asset class is frozen except for permissioned/admin
   * instructions.
   *
   * Emits `AssetStatusChanged` with the identity of the asset.
   *
   * Weight: `O(1)`
   **/
  | {
      name: 'ForceAssetStatus';
      params: {
        id: number;
        owner: MultiAddressLike;
        issuer: MultiAddressLike;
        admin: MultiAddressLike;
        freezer: MultiAddressLike;
        minBalance: bigint;
        isSufficient: boolean;
        isFrozen: boolean;
      };
    }
  /**
   * Approve an amount of asset for transfer by a delegated third-party account.
   *
   * Origin must be Signed.
   *
   * Ensures that `ApprovalDeposit` worth of `Currency` is reserved from signing account
   * for the purpose of holding the approval. If some non-zero amount of assets is already
   * approved from signing account to `delegate`, then it is topped up or unreserved to
   * meet the right value.
   *
   * NOTE: The signing account does not need to own `amount` of assets at the point of
   * making this call.
   *
   * - `id`: The identifier of the asset.
   * - `delegate`: The account to delegate permission to transfer asset.
   * - `amount`: The amount of asset that may be transferred by `delegate`. If there is
   * already an approval in place, then this acts additively.
   *
   * Emits `ApprovedTransfer` on success.
   *
   * Weight: `O(1)`
   **/
  | { name: 'ApproveTransfer'; params: { id: number; delegate: MultiAddressLike; amount: bigint } }
  /**
   * Cancel all of some asset approved for delegated transfer by a third-party account.
   *
   * Origin must be Signed and there must be an approval in place between signer and
   * `delegate`.
   *
   * Unreserves any deposit previously reserved by `approve_transfer` for the approval.
   *
   * - `id`: The identifier of the asset.
   * - `delegate`: The account delegated permission to transfer asset.
   *
   * Emits `ApprovalCancelled` on success.
   *
   * Weight: `O(1)`
   **/
  | { name: 'CancelApproval'; params: { id: number; delegate: MultiAddressLike } }
  /**
   * Cancel all of some asset approved for delegated transfer by a third-party account.
   *
   * Origin must be either ForceOrigin or Signed origin with the signer being the Admin
   * account of the asset `id`.
   *
   * Unreserves any deposit previously reserved by `approve_transfer` for the approval.
   *
   * - `id`: The identifier of the asset.
   * - `delegate`: The account delegated permission to transfer asset.
   *
   * Emits `ApprovalCancelled` on success.
   *
   * Weight: `O(1)`
   **/
  | { name: 'ForceCancelApproval'; params: { id: number; owner: MultiAddressLike; delegate: MultiAddressLike } }
  /**
   * Transfer some asset balance from a previously delegated account to some third-party
   * account.
   *
   * Origin must be Signed and there must be an approval in place by the `owner` to the
   * signer.
   *
   * If the entire amount approved for transfer is transferred, then any deposit previously
   * reserved by `approve_transfer` is unreserved.
   *
   * - `id`: The identifier of the asset.
   * - `owner`: The account which previously approved for a transfer of at least `amount` and
   * from which the asset balance will be withdrawn.
   * - `destination`: The account to which the asset balance of `amount` will be transferred.
   * - `amount`: The amount of assets to transfer.
   *
   * Emits `TransferredApproved` on success.
   *
   * Weight: `O(1)`
   **/
  | {
      name: 'TransferApproved';
      params: { id: number; owner: MultiAddressLike; destination: MultiAddressLike; amount: bigint };
    }
  /**
   * Create an asset account for non-provider assets.
   *
   * A deposit will be taken from the signer account.
   *
   * - `origin`: Must be Signed; the signer account must have sufficient funds for a deposit
   * to be taken.
   * - `id`: The identifier of the asset for the account to be created.
   *
   * Emits `Touched` event when successful.
   **/
  | { name: 'Touch'; params: { id: number } }
  /**
   * Return the deposit (if any) of an asset account or a consumer reference (if any) of an
   * account.
   *
   * The origin must be Signed.
   *
   * - `id`: The identifier of the asset for which the caller would like the deposit
   * refunded.
   * - `allow_burn`: If `true` then assets may be destroyed in order to complete the refund.
   *
   * Emits `Refunded` event when successful.
   **/
  | { name: 'Refund'; params: { id: number; allowBurn: boolean } }
  /**
   * Sets the minimum balance of an asset.
   *
   * Only works if there aren't any accounts that are holding the asset or if
   * the new value of `min_balance` is less than the old one.
   *
   * Origin must be Signed and the sender has to be the Owner of the
   * asset `id`.
   *
   * - `id`: The identifier of the asset.
   * - `min_balance`: The new value of `min_balance`.
   *
   * Emits `AssetMinBalanceChanged` event when successful.
   **/
  | { name: 'SetMinBalance'; params: { id: number; minBalance: bigint } }
  /**
   * Create an asset account for `who`.
   *
   * A deposit will be taken from the signer account.
   *
   * - `origin`: Must be Signed by `Freezer` or `Admin` of the asset `id`; the signer account
   * must have sufficient funds for a deposit to be taken.
   * - `id`: The identifier of the asset for the account to be created.
   * - `who`: The account to be created.
   *
   * Emits `Touched` event when successful.
   **/
  | { name: 'TouchOther'; params: { id: number; who: MultiAddressLike } }
  /**
   * Return the deposit (if any) of a target asset account. Useful if you are the depositor.
   *
   * The origin must be Signed and either the account owner, depositor, or asset `Admin`. In
   * order to burn a non-zero balance of the asset, the caller must be the account and should
   * use `refund`.
   *
   * - `id`: The identifier of the asset for the account holding a deposit.
   * - `who`: The account to refund.
   *
   * Emits `Refunded` event when successful.
   **/
  | { name: 'RefundOther'; params: { id: number; who: MultiAddressLike } }
  /**
   * Disallow further unprivileged transfers of an asset `id` to and from an account `who`.
   *
   * Origin must be Signed and the sender should be the Freezer of the asset `id`.
   *
   * - `id`: The identifier of the account's asset.
   * - `who`: The account to be unblocked.
   *
   * Emits `Blocked`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'Block'; params: { id: number; who: MultiAddressLike } };

/**
 * Pallet's callable functions.
 **/
export type PalletAssetConversionCall =
  /**
   * Creates an empty liquidity pool and an associated new `lp_token` asset
   * (the id of which is returned in the `Event::PoolCreated` event).
   *
   * Once a pool is created, someone may [`Pallet::add_liquidity`] to it.
   **/
  | { name: 'CreatePool'; params: { asset1: StagingXcmV4Location; asset2: StagingXcmV4Location } }
  /**
   * Provide liquidity into the pool of `asset1` and `asset2`.
   * NOTE: an optimal amount of asset1 and asset2 will be calculated and
   * might be different than the provided `amount1_desired`/`amount2_desired`
   * thus you should provide the min amount you're happy to provide.
   * Params `amount1_min`/`amount2_min` represent that.
   * `mint_to` will be sent the liquidity tokens that represent this share of the pool.
   *
   * NOTE: when encountering an incorrect exchange rate and non-withdrawable pool liquidity,
   * batch an atomic call with [`Pallet::add_liquidity`] and
   * [`Pallet::swap_exact_tokens_for_tokens`] or [`Pallet::swap_tokens_for_exact_tokens`]
   * calls to render the liquidity withdrawable and rectify the exchange rate.
   *
   * Once liquidity is added, someone may successfully call
   * [`Pallet::swap_exact_tokens_for_tokens`] successfully.
   **/
  | {
      name: 'AddLiquidity';
      params: {
        asset1: StagingXcmV4Location;
        asset2: StagingXcmV4Location;
        amount1Desired: bigint;
        amount2Desired: bigint;
        amount1Min: bigint;
        amount2Min: bigint;
        mintTo: AccountId32;
      };
    }
  /**
   * Allows you to remove liquidity by providing the `lp_token_burn` tokens that will be
   * burned in the process. With the usage of `amount1_min_receive`/`amount2_min_receive`
   * it's possible to control the min amount of returned tokens you're happy with.
   **/
  | {
      name: 'RemoveLiquidity';
      params: {
        asset1: StagingXcmV4Location;
        asset2: StagingXcmV4Location;
        lpTokenBurn: bigint;
        amount1MinReceive: bigint;
        amount2MinReceive: bigint;
        withdrawTo: AccountId32;
      };
    }
  /**
   * Swap the exact amount of `asset1` into `asset2`.
   * `amount_out_min` param allows you to specify the min amount of the `asset2`
   * you're happy to receive.
   *
   * [`AssetConversionApi::quote_price_exact_tokens_for_tokens`] runtime call can be called
   * for a quote.
   **/
  | {
      name: 'SwapExactTokensForTokens';
      params: {
        path: Array<StagingXcmV4Location>;
        amountIn: bigint;
        amountOutMin: bigint;
        sendTo: AccountId32;
        keepAlive: boolean;
      };
    }
  /**
   * Swap any amount of `asset1` to get the exact amount of `asset2`.
   * `amount_in_max` param allows to specify the max amount of the `asset1`
   * you're happy to provide.
   *
   * [`AssetConversionApi::quote_price_tokens_for_exact_tokens`] runtime call can be called
   * for a quote.
   **/
  | {
      name: 'SwapTokensForExactTokens';
      params: {
        path: Array<StagingXcmV4Location>;
        amountOut: bigint;
        amountInMax: bigint;
        sendTo: AccountId32;
        keepAlive: boolean;
      };
    }
  /**
   * Touch an existing pool to fulfill prerequisites before providing liquidity, such as
   * ensuring that the pool's accounts are in place. It is typically useful when a pool
   * creator removes the pool's accounts and does not provide a liquidity. This action may
   * involve holding assets from the caller as a deposit for creating the pool's accounts.
   *
   * The origin must be Signed.
   *
   * - `asset1`: The asset ID of an existing pool with a pair (asset1, asset2).
   * - `asset2`: The asset ID of an existing pool with a pair (asset1, asset2).
   *
   * Emits `Touched` event when successful.
   **/
  | { name: 'Touch'; params: { asset1: StagingXcmV4Location; asset2: StagingXcmV4Location } };

export type PalletAssetConversionCallLike =
  /**
   * Creates an empty liquidity pool and an associated new `lp_token` asset
   * (the id of which is returned in the `Event::PoolCreated` event).
   *
   * Once a pool is created, someone may [`Pallet::add_liquidity`] to it.
   **/
  | { name: 'CreatePool'; params: { asset1: StagingXcmV4Location; asset2: StagingXcmV4Location } }
  /**
   * Provide liquidity into the pool of `asset1` and `asset2`.
   * NOTE: an optimal amount of asset1 and asset2 will be calculated and
   * might be different than the provided `amount1_desired`/`amount2_desired`
   * thus you should provide the min amount you're happy to provide.
   * Params `amount1_min`/`amount2_min` represent that.
   * `mint_to` will be sent the liquidity tokens that represent this share of the pool.
   *
   * NOTE: when encountering an incorrect exchange rate and non-withdrawable pool liquidity,
   * batch an atomic call with [`Pallet::add_liquidity`] and
   * [`Pallet::swap_exact_tokens_for_tokens`] or [`Pallet::swap_tokens_for_exact_tokens`]
   * calls to render the liquidity withdrawable and rectify the exchange rate.
   *
   * Once liquidity is added, someone may successfully call
   * [`Pallet::swap_exact_tokens_for_tokens`] successfully.
   **/
  | {
      name: 'AddLiquidity';
      params: {
        asset1: StagingXcmV4Location;
        asset2: StagingXcmV4Location;
        amount1Desired: bigint;
        amount2Desired: bigint;
        amount1Min: bigint;
        amount2Min: bigint;
        mintTo: AccountId32Like;
      };
    }
  /**
   * Allows you to remove liquidity by providing the `lp_token_burn` tokens that will be
   * burned in the process. With the usage of `amount1_min_receive`/`amount2_min_receive`
   * it's possible to control the min amount of returned tokens you're happy with.
   **/
  | {
      name: 'RemoveLiquidity';
      params: {
        asset1: StagingXcmV4Location;
        asset2: StagingXcmV4Location;
        lpTokenBurn: bigint;
        amount1MinReceive: bigint;
        amount2MinReceive: bigint;
        withdrawTo: AccountId32Like;
      };
    }
  /**
   * Swap the exact amount of `asset1` into `asset2`.
   * `amount_out_min` param allows you to specify the min amount of the `asset2`
   * you're happy to receive.
   *
   * [`AssetConversionApi::quote_price_exact_tokens_for_tokens`] runtime call can be called
   * for a quote.
   **/
  | {
      name: 'SwapExactTokensForTokens';
      params: {
        path: Array<StagingXcmV4Location>;
        amountIn: bigint;
        amountOutMin: bigint;
        sendTo: AccountId32Like;
        keepAlive: boolean;
      };
    }
  /**
   * Swap any amount of `asset1` to get the exact amount of `asset2`.
   * `amount_in_max` param allows to specify the max amount of the `asset1`
   * you're happy to provide.
   *
   * [`AssetConversionApi::quote_price_tokens_for_exact_tokens`] runtime call can be called
   * for a quote.
   **/
  | {
      name: 'SwapTokensForExactTokens';
      params: {
        path: Array<StagingXcmV4Location>;
        amountOut: bigint;
        amountInMax: bigint;
        sendTo: AccountId32Like;
        keepAlive: boolean;
      };
    }
  /**
   * Touch an existing pool to fulfill prerequisites before providing liquidity, such as
   * ensuring that the pool's accounts are in place. It is typically useful when a pool
   * creator removes the pool's accounts and does not provide a liquidity. This action may
   * involve holding assets from the caller as a deposit for creating the pool's accounts.
   *
   * The origin must be Signed.
   *
   * - `asset1`: The asset ID of an existing pool with a pair (asset1, asset2).
   * - `asset2`: The asset ID of an existing pool with a pair (asset1, asset2).
   *
   * Emits `Touched` event when successful.
   **/
  | { name: 'Touch'; params: { asset1: StagingXcmV4Location; asset2: StagingXcmV4Location } };

export type AssetHubKusamaRuntimeOriginCaller =
  | { type: 'System'; value: FrameSupportDispatchRawOrigin }
  | { type: 'PolkadotXcm'; value: PalletXcmOrigin }
  | { type: 'CumulusXcm'; value: CumulusPalletXcmOrigin }
  | { type: 'Void'; value: SpCoreVoid };

export type FrameSupportDispatchRawOrigin =
  | { type: 'Root' }
  | { type: 'Signed'; value: AccountId32 }
  | { type: 'None' };

export type PalletXcmOrigin =
  | { type: 'Xcm'; value: StagingXcmV4Location }
  | { type: 'Response'; value: StagingXcmV4Location };

export type CumulusPalletXcmOrigin =
  | { type: 'Relay' }
  | { type: 'SiblingParachain'; value: PolkadotParachainPrimitivesPrimitivesId };

export type SpCoreVoid = null;

/**
 * The `Error` enum of this pallet.
 **/
export type PalletUtilityError =
  /**
   * Too many calls batched.
   **/
  'TooManyCalls';

export type PalletMultisigMultisig = {
  when: PalletMultisigTimepoint;
  deposit: bigint;
  depositor: AccountId32;
  approvals: Array<AccountId32>;
};

/**
 * The `Error` enum of this pallet.
 **/
export type PalletMultisigError =
  /**
   * Threshold must be 2 or greater.
   **/
  | 'MinimumThreshold'
  /**
   * Call is already approved by this signatory.
   **/
  | 'AlreadyApproved'
  /**
   * Call doesn't need any (more) approvals.
   **/
  | 'NoApprovalsNeeded'
  /**
   * There are too few signatories in the list.
   **/
  | 'TooFewSignatories'
  /**
   * There are too many signatories in the list.
   **/
  | 'TooManySignatories'
  /**
   * The signatories were provided out of order; they should be ordered.
   **/
  | 'SignatoriesOutOfOrder'
  /**
   * The sender was contained in the other signatories; it shouldn't be.
   **/
  | 'SenderInSignatories'
  /**
   * Multisig operation not found when attempting to cancel.
   **/
  | 'NotFound'
  /**
   * Only the account that originally created the multisig is able to cancel it.
   **/
  | 'NotOwner'
  /**
   * No timepoint was given, yet the multisig operation is already underway.
   **/
  | 'NoTimepoint'
  /**
   * A different timepoint was given to the multisig operation that is underway.
   **/
  | 'WrongTimepoint'
  /**
   * A timepoint was given, yet no multisig operation is underway.
   **/
  | 'UnexpectedTimepoint'
  /**
   * The maximum weight information provided was too low.
   **/
  | 'MaxWeightTooLow'
  /**
   * The data to be stored is already stored.
   **/
  | 'AlreadyStored';

export type PalletProxyProxyDefinition = {
  delegate: AccountId32;
  proxyType: AssetHubKusamaRuntimeProxyType;
  delay: number;
};

export type PalletProxyAnnouncement = { real: AccountId32; callHash: H256; height: number };

/**
 * The `Error` enum of this pallet.
 **/
export type PalletProxyError =
  /**
   * There are too many proxies registered or too many announcements pending.
   **/
  | 'TooMany'
  /**
   * Proxy registration not found.
   **/
  | 'NotFound'
  /**
   * Sender is not a proxy of the account to be proxied.
   **/
  | 'NotProxy'
  /**
   * A call which is incompatible with the proxy type's filter was attempted.
   **/
  | 'Unproxyable'
  /**
   * Account is already a proxy.
   **/
  | 'Duplicate'
  /**
   * Call may not be made by proxy because it may escalate its privileges.
   **/
  | 'NoPermission'
  /**
   * Announcement, if made at all, was made too recently.
   **/
  | 'Unannounced'
  /**
   * Cannot add self as proxy.
   **/
  | 'NoSelfProxy';

export type PalletAssetsAssetDetails = {
  owner: AccountId32;
  issuer: AccountId32;
  admin: AccountId32;
  freezer: AccountId32;
  supply: bigint;
  deposit: bigint;
  minBalance: bigint;
  isSufficient: boolean;
  accounts: number;
  sufficients: number;
  approvals: number;
  status: PalletAssetsAssetStatus;
};

export type PalletAssetsAssetStatus = 'Live' | 'Frozen' | 'Destroying';

export type PalletAssetsAssetAccount = {
  balance: bigint;
  status: PalletAssetsAccountStatus;
  reason: PalletAssetsExistenceReason;
  extra: [];
};

export type PalletAssetsAccountStatus = 'Liquid' | 'Frozen' | 'Blocked';

export type PalletAssetsExistenceReason =
  | { type: 'Consumer' }
  | { type: 'Sufficient' }
  | { type: 'DepositHeld'; value: bigint }
  | { type: 'DepositRefunded' }
  | { type: 'DepositFrom'; value: [AccountId32, bigint] };

export type PalletAssetsApproval = { amount: bigint; deposit: bigint };

export type PalletAssetsAssetMetadata = {
  deposit: bigint;
  name: Bytes;
  symbol: Bytes;
  decimals: number;
  isFrozen: boolean;
};

/**
 * The `Error` enum of this pallet.
 **/
export type PalletAssetsError =
  /**
   * Account balance must be greater than or equal to the transfer amount.
   **/
  | 'BalanceLow'
  /**
   * The account to alter does not exist.
   **/
  | 'NoAccount'
  /**
   * The signing account has no permission to do the operation.
   **/
  | 'NoPermission'
  /**
   * The given asset ID is unknown.
   **/
  | 'Unknown'
  /**
   * The origin account is frozen.
   **/
  | 'Frozen'
  /**
   * The asset ID is already taken.
   **/
  | 'InUse'
  /**
   * Invalid witness data given.
   **/
  | 'BadWitness'
  /**
   * Minimum balance should be non-zero.
   **/
  | 'MinBalanceZero'
  /**
   * Unable to increment the consumer reference counters on the account. Either no provider
   * reference exists to allow a non-zero balance of a non-self-sufficient asset, or one
   * fewer then the maximum number of consumers has been reached.
   **/
  | 'UnavailableConsumer'
  /**
   * Invalid metadata given.
   **/
  | 'BadMetadata'
  /**
   * No approval exists that would allow the transfer.
   **/
  | 'Unapproved'
  /**
   * The source account would not survive the transfer and it needs to stay alive.
   **/
  | 'WouldDie'
  /**
   * The asset-account already exists.
   **/
  | 'AlreadyExists'
  /**
   * The asset-account doesn't have an associated deposit.
   **/
  | 'NoDeposit'
  /**
   * The operation would result in funds being burned.
   **/
  | 'WouldBurn'
  /**
   * The asset is a live asset and is actively being used. Usually emit for operations such
   * as `start_destroy` which require the asset to be in a destroying state.
   **/
  | 'LiveAsset'
  /**
   * The asset is not live, and likely being destroyed.
   **/
  | 'AssetNotLive'
  /**
   * The asset status is not the expected status.
   **/
  | 'IncorrectStatus'
  /**
   * The asset should be frozen before the given operation.
   **/
  | 'NotFrozen'
  /**
   * Callback action resulted in error
   **/
  | 'CallbackFailed'
  /**
   * The asset ID must be equal to the [`NextAssetId`].
   **/
  | 'BadAssetId';

export type PalletUniquesCollectionDetails = {
  owner: AccountId32;
  issuer: AccountId32;
  admin: AccountId32;
  freezer: AccountId32;
  totalDeposit: bigint;
  freeHolding: boolean;
  items: number;
  itemMetadatas: number;
  attributes: number;
  isFrozen: boolean;
};

export type PalletUniquesItemDetails = {
  owner: AccountId32;
  approved?: AccountId32 | undefined;
  isFrozen: boolean;
  deposit: bigint;
};

export type PalletUniquesCollectionMetadata = { deposit: bigint; data: Bytes; isFrozen: boolean };

export type PalletUniquesItemMetadata = { deposit: bigint; data: Bytes; isFrozen: boolean };

/**
 * The `Error` enum of this pallet.
 **/
export type PalletUniquesError =
  /**
   * The signing account has no permission to do the operation.
   **/
  | 'NoPermission'
  /**
   * The given item ID is unknown.
   **/
  | 'UnknownCollection'
  /**
   * The item ID has already been used for an item.
   **/
  | 'AlreadyExists'
  /**
   * The owner turned out to be different to what was expected.
   **/
  | 'WrongOwner'
  /**
   * Invalid witness data given.
   **/
  | 'BadWitness'
  /**
   * The item ID is already taken.
   **/
  | 'InUse'
  /**
   * The item or collection is frozen.
   **/
  | 'Frozen'
  /**
   * The delegate turned out to be different to what was expected.
   **/
  | 'WrongDelegate'
  /**
   * There is no delegate approved.
   **/
  | 'NoDelegate'
  /**
   * No approval exists that would allow the transfer.
   **/
  | 'Unapproved'
  /**
   * The named owner has not signed ownership of the collection is acceptable.
   **/
  | 'Unaccepted'
  /**
   * The item is locked.
   **/
  | 'Locked'
  /**
   * All items have been minted.
   **/
  | 'MaxSupplyReached'
  /**
   * The max supply has already been set.
   **/
  | 'MaxSupplyAlreadySet'
  /**
   * The provided max supply is less to the amount of items a collection already has.
   **/
  | 'MaxSupplyTooSmall'
  /**
   * The given item ID is unknown.
   **/
  | 'UnknownItem'
  /**
   * Item is not for sale.
   **/
  | 'NotForSale'
  /**
   * The provided bid is too low.
   **/
  | 'BidTooLow';

export type PalletNftsCollectionDetails = {
  owner: AccountId32;
  ownerDeposit: bigint;
  items: number;
  itemMetadatas: number;
  itemConfigs: number;
  attributes: number;
};

export type PalletNftsBitFlagsCollectionRole = number;

export type PalletNftsCollectionRole = 'Issuer' | 'Freezer' | 'Admin';

export type PalletNftsItemDetails = {
  owner: AccountId32;
  approvals: Array<[AccountId32, number | undefined]>;
  deposit: PalletNftsItemDeposit;
};

export type PalletNftsItemDeposit = { account: AccountId32; amount: bigint };

export type PalletNftsCollectionMetadata = { deposit: bigint; data: Bytes };

export type PalletNftsItemMetadata = { deposit: PalletNftsItemMetadataDeposit; data: Bytes };

export type PalletNftsItemMetadataDeposit = { account?: AccountId32 | undefined; amount: bigint };

export type PalletNftsAttributeDeposit = { account?: AccountId32 | undefined; amount: bigint };

export type PalletNftsPendingSwap = {
  desiredCollection: number;
  desiredItem?: number | undefined;
  price?: PalletNftsPriceWithDirection | undefined;
  deadline: number;
};

export type PalletNftsBitFlagsPalletFeature = bigint;

export type PalletNftsPalletFeature = 'Trading' | 'Attributes' | 'Approvals' | 'Swaps';

/**
 * The `Error` enum of this pallet.
 **/
export type PalletNftsError =
  /**
   * The signing account has no permission to do the operation.
   **/
  | 'NoPermission'
  /**
   * The given item ID is unknown.
   **/
  | 'UnknownCollection'
  /**
   * The item ID has already been used for an item.
   **/
  | 'AlreadyExists'
  /**
   * The approval had a deadline that expired, so the approval isn't valid anymore.
   **/
  | 'ApprovalExpired'
  /**
   * The owner turned out to be different to what was expected.
   **/
  | 'WrongOwner'
  /**
   * The witness data given does not match the current state of the chain.
   **/
  | 'BadWitness'
  /**
   * Collection ID is already taken.
   **/
  | 'CollectionIdInUse'
  /**
   * Items within that collection are non-transferable.
   **/
  | 'ItemsNonTransferable'
  /**
   * The provided account is not a delegate.
   **/
  | 'NotDelegate'
  /**
   * The delegate turned out to be different to what was expected.
   **/
  | 'WrongDelegate'
  /**
   * No approval exists that would allow the transfer.
   **/
  | 'Unapproved'
  /**
   * The named owner has not signed ownership acceptance of the collection.
   **/
  | 'Unaccepted'
  /**
   * The item is locked (non-transferable).
   **/
  | 'ItemLocked'
  /**
   * Item's attributes are locked.
   **/
  | 'LockedItemAttributes'
  /**
   * Collection's attributes are locked.
   **/
  | 'LockedCollectionAttributes'
  /**
   * Item's metadata is locked.
   **/
  | 'LockedItemMetadata'
  /**
   * Collection's metadata is locked.
   **/
  | 'LockedCollectionMetadata'
  /**
   * All items have been minted.
   **/
  | 'MaxSupplyReached'
  /**
   * The max supply is locked and can't be changed.
   **/
  | 'MaxSupplyLocked'
  /**
   * The provided max supply is less than the number of items a collection already has.
   **/
  | 'MaxSupplyTooSmall'
  /**
   * The given item ID is unknown.
   **/
  | 'UnknownItem'
  /**
   * Swap doesn't exist.
   **/
  | 'UnknownSwap'
  /**
   * The given item has no metadata set.
   **/
  | 'MetadataNotFound'
  /**
   * The provided attribute can't be found.
   **/
  | 'AttributeNotFound'
  /**
   * Item is not for sale.
   **/
  | 'NotForSale'
  /**
   * The provided bid is too low.
   **/
  | 'BidTooLow'
  /**
   * The item has reached its approval limit.
   **/
  | 'ReachedApprovalLimit'
  /**
   * The deadline has already expired.
   **/
  | 'DeadlineExpired'
  /**
   * The duration provided should be less than or equal to `MaxDeadlineDuration`.
   **/
  | 'WrongDuration'
  /**
   * The method is disabled by system settings.
   **/
  | 'MethodDisabled'
  /**
   * The provided setting can't be set.
   **/
  | 'WrongSetting'
  /**
   * Item's config already exists and should be equal to the provided one.
   **/
  | 'InconsistentItemConfig'
  /**
   * Config for a collection or an item can't be found.
   **/
  | 'NoConfig'
  /**
   * Some roles were not cleared.
   **/
  | 'RolesNotCleared'
  /**
   * Mint has not started yet.
   **/
  | 'MintNotStarted'
  /**
   * Mint has already ended.
   **/
  | 'MintEnded'
  /**
   * The provided Item was already used for claiming.
   **/
  | 'AlreadyClaimed'
  /**
   * The provided data is incorrect.
   **/
  | 'IncorrectData'
  /**
   * The extrinsic was sent by the wrong origin.
   **/
  | 'WrongOrigin'
  /**
   * The provided signature is incorrect.
   **/
  | 'WrongSignature'
  /**
   * The provided metadata might be too long.
   **/
  | 'IncorrectMetadata'
  /**
   * Can't set more attributes per one call.
   **/
  | 'MaxAttributesLimitReached'
  /**
   * The provided namespace isn't supported in this call.
   **/
  | 'WrongNamespace'
  /**
   * Can't delete non-empty collections.
   **/
  | 'CollectionNotEmpty'
  /**
   * The witness data should be provided.
   **/
  | 'WitnessRequired';

export type PalletNftFractionalizationDetails = {
  asset: number;
  fractions: bigint;
  deposit: bigint;
  assetCreator: AccountId32;
};

export type FrameSupportPalletId = FixedBytes<8>;

/**
 * The `Error` enum of this pallet.
 **/
export type PalletNftFractionalizationError =
  /**
   * Asset ID does not correspond to locked NFT.
   **/
  | 'IncorrectAssetId'
  /**
   * The signing account has no permission to do the operation.
   **/
  | 'NoPermission'
  /**
   * NFT doesn't exist.
   **/
  | 'NftNotFound'
  /**
   * NFT has not yet been fractionalised.
   **/
  | 'NftNotFractionalized';

export type PalletAssetConversionPoolInfo = { lpToken: number };

/**
 * The `Error` enum of this pallet.
 **/
export type PalletAssetConversionError =
  /**
   * Provided asset pair is not supported for pool.
   **/
  | 'InvalidAssetPair'
  /**
   * Pool already exists.
   **/
  | 'PoolExists'
  /**
   * Desired amount can't be zero.
   **/
  | 'WrongDesiredAmount'
  /**
   * Provided amount should be greater than or equal to the existential deposit/asset's
   * minimal amount.
   **/
  | 'AmountOneLessThanMinimal'
  /**
   * Provided amount should be greater than or equal to the existential deposit/asset's
   * minimal amount.
   **/
  | 'AmountTwoLessThanMinimal'
  /**
   * Reserve needs to always be greater than or equal to the existential deposit/asset's
   * minimal amount.
   **/
  | 'ReserveLeftLessThanMinimal'
  /**
   * Desired amount can't be equal to the pool reserve.
   **/
  | 'AmountOutTooHigh'
  /**
   * The pool doesn't exist.
   **/
  | 'PoolNotFound'
  /**
   * An overflow happened.
   **/
  | 'Overflow'
  /**
   * The minimal amount requirement for the first token in the pair wasn't met.
   **/
  | 'AssetOneDepositDidNotMeetMinimum'
  /**
   * The minimal amount requirement for the second token in the pair wasn't met.
   **/
  | 'AssetTwoDepositDidNotMeetMinimum'
  /**
   * The minimal amount requirement for the first token in the pair wasn't met.
   **/
  | 'AssetOneWithdrawalDidNotMeetMinimum'
  /**
   * The minimal amount requirement for the second token in the pair wasn't met.
   **/
  | 'AssetTwoWithdrawalDidNotMeetMinimum'
  /**
   * Optimal calculated amount is less than desired.
   **/
  | 'OptimalAmountLessThanDesired'
  /**
   * Insufficient liquidity minted.
   **/
  | 'InsufficientLiquidityMinted'
  /**
   * Requested liquidity can't be zero.
   **/
  | 'ZeroLiquidity'
  /**
   * Amount can't be zero.
   **/
  | 'ZeroAmount'
  /**
   * Calculated amount out is less than provided minimum amount.
   **/
  | 'ProvidedMinimumNotSufficientForSwap'
  /**
   * Provided maximum amount is not sufficient for swap.
   **/
  | 'ProvidedMaximumNotSufficientForSwap'
  /**
   * The provided path must consists of 2 assets at least.
   **/
  | 'InvalidPath'
  /**
   * The provided path must consists of unique assets.
   **/
  | 'NonUniquePath'
  /**
   * It was not possible to get or increment the Id of the pool.
   **/
  | 'IncorrectPoolAssetId'
  /**
   * The destination account cannot exist with the swapped funds.
   **/
  | 'BelowMinimum';

export type FrameSystemExtensionsCheckNonZeroSender = {};

export type FrameSystemExtensionsCheckSpecVersion = {};

export type FrameSystemExtensionsCheckTxVersion = {};

export type FrameSystemExtensionsCheckGenesis = {};

export type FrameSystemExtensionsCheckMortality = Era;

export type FrameSystemExtensionsCheckNonce = number;

export type FrameSystemExtensionsCheckWeight = {};

export type PalletAssetConversionTxPaymentChargeAssetTxPayment = {
  tip: bigint;
  assetId?: StagingXcmV4Location | undefined;
};

export type FrameMetadataHashExtensionCheckMetadataHash = { mode: FrameMetadataHashExtensionMode };

export type FrameMetadataHashExtensionMode = 'Disabled' | 'Enabled';

export type AssetHubKusamaRuntimeRuntime = {};

export type SpConsensusSlotsSlotDuration = bigint;

export type SpRuntimeBlock = { header: Header; extrinsics: Array<UncheckedExtrinsic> };

export type SpRuntimeExtrinsicInclusionMode = 'AllExtrinsics' | 'OnlyInherents';

export type SpCoreOpaqueMetadata = Bytes;

export type SpRuntimeTransactionValidityTransactionValidityError =
  | { type: 'Invalid'; value: SpRuntimeTransactionValidityInvalidTransaction }
  | { type: 'Unknown'; value: SpRuntimeTransactionValidityUnknownTransaction };

export type SpRuntimeTransactionValidityInvalidTransaction =
  | { type: 'Call' }
  | { type: 'Payment' }
  | { type: 'Future' }
  | { type: 'Stale' }
  | { type: 'BadProof' }
  | { type: 'AncientBirthBlock' }
  | { type: 'ExhaustsResources' }
  | { type: 'Custom'; value: number }
  | { type: 'BadMandatory' }
  | { type: 'MandatoryValidation' }
  | { type: 'BadSigner' };

export type SpRuntimeTransactionValidityUnknownTransaction =
  | { type: 'CannotLookup' }
  | { type: 'NoUnsignedValidator' }
  | { type: 'Custom'; value: number };

export type SpInherentsInherentData = { data: Array<[FixedBytes<8>, Bytes]> };

export type SpInherentsCheckInherentsResult = { okay: boolean; fatalError: boolean; errors: SpInherentsInherentData };

export type SpRuntimeTransactionValidityTransactionSource = 'InBlock' | 'Local' | 'External';

export type SpRuntimeTransactionValidityValidTransaction = {
  priority: bigint;
  requires: Array<Bytes>;
  provides: Array<Bytes>;
  longevity: bigint;
  propagate: boolean;
};

export type PalletTransactionPaymentRuntimeDispatchInfo = {
  weight: SpWeightsWeightV2Weight;
  class: FrameSupportDispatchDispatchClass;
  partialFee: bigint;
};

export type PalletTransactionPaymentFeeDetails = {
  inclusionFee?: PalletTransactionPaymentInclusionFee | undefined;
  tip: bigint;
};

export type PalletTransactionPaymentInclusionFee = { baseFee: bigint; lenFee: bigint; adjustedWeightFee: bigint };

export type XcmRuntimeApisFeesError =
  | 'Unimplemented'
  | 'VersionedConversionFailed'
  | 'WeightNotComputable'
  | 'UnhandledXcmVersion'
  | 'AssetNotFound'
  | 'Unroutable';

export type XcmRuntimeApisDryRunCallDryRunEffects = {
  executionResult: Result<FrameSupportDispatchPostDispatchInfo, SpRuntimeDispatchErrorWithPostInfo>;
  emittedEvents: Array<AssetHubKusamaRuntimeRuntimeEvent>;
  localXcm?: XcmVersionedXcm | undefined;
  forwardedXcms: Array<[XcmVersionedLocation, Array<XcmVersionedXcm>]>;
};

export type FrameSupportDispatchPostDispatchInfo = {
  actualWeight?: SpWeightsWeightV2Weight | undefined;
  paysFee: FrameSupportDispatchPays;
};

export type SpRuntimeDispatchErrorWithPostInfo = {
  postInfo: FrameSupportDispatchPostDispatchInfo;
  error: DispatchError;
};

export type XcmRuntimeApisDryRunError = 'Unimplemented' | 'VersionedConversionFailed';

export type XcmRuntimeApisDryRunXcmDryRunEffects = {
  executionResult: StagingXcmV4TraitsOutcome;
  emittedEvents: Array<AssetHubKusamaRuntimeRuntimeEvent>;
  forwardedXcms: Array<[XcmVersionedLocation, Array<XcmVersionedXcm>]>;
};

export type XcmRuntimeApisConversionsError = 'Unsupported' | 'VersionedConversionFailed';

export type AssetsCommonRuntimeApiFungiblesAccessError = 'AssetIdConversionFailed' | 'AmountToBalanceConversionFailed';

export type CumulusPrimitivesCoreCollationInfo = {
  upwardMessages: Array<Bytes>;
  horizontalMessages: Array<PolkadotCorePrimitivesOutboundHrmpMessage>;
  newValidationCode?: PolkadotParachainPrimitivesPrimitivesValidationCode | undefined;
  processedDownwardMessages: number;
  hrmpWatermark: number;
  headData: PolkadotParachainPrimitivesPrimitivesHeadData;
};

export type PolkadotParachainPrimitivesPrimitivesValidationCode = Bytes;

export type AssetHubKusamaRuntimeRuntimeError =
  | { pallet: 'System'; palletError: FrameSystemError }
  | { pallet: 'ParachainSystem'; palletError: CumulusPalletParachainSystemError }
  | { pallet: 'Balances'; palletError: PalletBalancesError }
  | { pallet: 'Vesting'; palletError: PalletVestingError }
  | { pallet: 'CollatorSelection'; palletError: PalletCollatorSelectionError }
  | { pallet: 'Session'; palletError: PalletSessionError }
  | { pallet: 'XcmpQueue'; palletError: CumulusPalletXcmpQueueError }
  | { pallet: 'PolkadotXcm'; palletError: PalletXcmError }
  | { pallet: 'MessageQueue'; palletError: PalletMessageQueueError }
  | { pallet: 'Utility'; palletError: PalletUtilityError }
  | { pallet: 'Multisig'; palletError: PalletMultisigError }
  | { pallet: 'Proxy'; palletError: PalletProxyError }
  | { pallet: 'Assets'; palletError: PalletAssetsError }
  | { pallet: 'Uniques'; palletError: PalletUniquesError }
  | { pallet: 'Nfts'; palletError: PalletNftsError }
  | { pallet: 'ForeignAssets'; palletError: PalletAssetsError }
  | { pallet: 'NftFractionalization'; palletError: PalletNftFractionalizationError }
  | { pallet: 'PoolAssets'; palletError: PalletAssetsError }
  | { pallet: 'AssetConversion'; palletError: PalletAssetConversionError };
