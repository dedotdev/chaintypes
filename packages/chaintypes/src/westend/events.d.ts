// Generated by dedot cli

import type { GenericChainEvents, GenericPalletEvent, RpcVersion } from 'dedot/types';
import type { DispatchError, AccountId32, H256, Perbill, FixedBytes, Bytes, Result, FixedU128 } from 'dedot/codecs';
import type {
  FrameSystemDispatchEventInfo,
  FrameSupportTokensMiscBalanceStatus,
  PalletStakingRewardDestination,
  PalletStakingValidatorPrefs,
  PalletStakingForcing,
  WestendRuntimeRuntimeParametersKey,
  WestendRuntimeRuntimeParametersValue,
  SpConsensusGrandpaAppPublic,
  WestendRuntimeProxyType,
  PalletMultisigTimepoint,
  PalletElectionProviderMultiPhaseElectionCompute,
  SpNposElectionsElectionScore,
  PalletElectionProviderMultiPhasePhase,
  PalletNominationPoolsPoolState,
  PalletNominationPoolsCommissionChangeRate,
  PalletNominationPoolsCommissionClaimPermission,
  PalletConvictionVotingVoteAccountVote,
  FrameSupportPreimagesBounded,
  PalletConvictionVotingTally,
  FrameSupportDispatchPostDispatchInfo,
  SpRuntimeDispatchErrorWithPostInfo,
  PolkadotRuntimeCommonImplsVersionedLocatableAsset,
  XcmVersionedLocation,
  PolkadotPrimitivesVstagingCandidateReceiptV2,
  PolkadotParachainPrimitivesPrimitivesHeadData,
  PolkadotPrimitivesV8CoreIndex,
  PolkadotPrimitivesV8GroupIndex,
  PolkadotParachainPrimitivesPrimitivesId,
  PolkadotParachainPrimitivesPrimitivesValidationCodeHash,
  PolkadotParachainPrimitivesPrimitivesHrmpChannelId,
  PolkadotCorePrimitivesCandidateHash,
  PolkadotRuntimeParachainsDisputesDisputeLocation,
  PolkadotRuntimeParachainsDisputesDisputeResult,
  StagingXcmV5TraitsOutcome,
  StagingXcmV5Location,
  StagingXcmV5Xcm,
  StagingXcmV5Response,
  SpWeightsWeightV2Weight,
  XcmVersionedAssets,
  StagingXcmV5AssetAssets,
  XcmV5TraitsError,
  PolkadotRuntimeParachainsInclusionAggregateMessageOrigin,
  FrameSupportMessagesProcessMessageError,
} from './types';

export interface ChainEvents<Rv extends RpcVersion> extends GenericChainEvents<Rv> {
  /**
   * Pallet `System`'s events
   **/
  system: {
    /**
     * An extrinsic completed successfully.
     **/
    ExtrinsicSuccess: GenericPalletEvent<
      Rv,
      'System',
      'ExtrinsicSuccess',
      { dispatchInfo: FrameSystemDispatchEventInfo }
    >;

    /**
     * An extrinsic failed.
     **/
    ExtrinsicFailed: GenericPalletEvent<
      Rv,
      'System',
      'ExtrinsicFailed',
      { dispatchError: DispatchError; dispatchInfo: FrameSystemDispatchEventInfo }
    >;

    /**
     * `:code` was updated.
     **/
    CodeUpdated: GenericPalletEvent<Rv, 'System', 'CodeUpdated', null>;

    /**
     * A new account was created.
     **/
    NewAccount: GenericPalletEvent<Rv, 'System', 'NewAccount', { account: AccountId32 }>;

    /**
     * An account was reaped.
     **/
    KilledAccount: GenericPalletEvent<Rv, 'System', 'KilledAccount', { account: AccountId32 }>;

    /**
     * On on-chain remark happened.
     **/
    Remarked: GenericPalletEvent<Rv, 'System', 'Remarked', { sender: AccountId32; hash: H256 }>;

    /**
     * An upgrade was authorized.
     **/
    UpgradeAuthorized: GenericPalletEvent<Rv, 'System', 'UpgradeAuthorized', { codeHash: H256; checkVersion: boolean }>;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Indices`'s events
   **/
  indices: {
    /**
     * A account index was assigned.
     **/
    IndexAssigned: GenericPalletEvent<Rv, 'Indices', 'IndexAssigned', { who: AccountId32; index: number }>;

    /**
     * A account index has been freed up (unassigned).
     **/
    IndexFreed: GenericPalletEvent<Rv, 'Indices', 'IndexFreed', { index: number }>;

    /**
     * A account index has been frozen to its current account ID.
     **/
    IndexFrozen: GenericPalletEvent<Rv, 'Indices', 'IndexFrozen', { index: number; who: AccountId32 }>;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Balances`'s events
   **/
  balances: {
    /**
     * An account was created with some free balance.
     **/
    Endowed: GenericPalletEvent<Rv, 'Balances', 'Endowed', { account: AccountId32; freeBalance: bigint }>;

    /**
     * An account was removed whose balance was non-zero but below ExistentialDeposit,
     * resulting in an outright loss.
     **/
    DustLost: GenericPalletEvent<Rv, 'Balances', 'DustLost', { account: AccountId32; amount: bigint }>;

    /**
     * Transfer succeeded.
     **/
    Transfer: GenericPalletEvent<Rv, 'Balances', 'Transfer', { from: AccountId32; to: AccountId32; amount: bigint }>;

    /**
     * A balance was set by root.
     **/
    BalanceSet: GenericPalletEvent<Rv, 'Balances', 'BalanceSet', { who: AccountId32; free: bigint }>;

    /**
     * Some balance was reserved (moved from free to reserved).
     **/
    Reserved: GenericPalletEvent<Rv, 'Balances', 'Reserved', { who: AccountId32; amount: bigint }>;

    /**
     * Some balance was unreserved (moved from reserved to free).
     **/
    Unreserved: GenericPalletEvent<Rv, 'Balances', 'Unreserved', { who: AccountId32; amount: bigint }>;

    /**
     * Some balance was moved from the reserve of the first account to the second account.
     * Final argument indicates the destination balance type.
     **/
    ReserveRepatriated: GenericPalletEvent<
      Rv,
      'Balances',
      'ReserveRepatriated',
      { from: AccountId32; to: AccountId32; amount: bigint; destinationStatus: FrameSupportTokensMiscBalanceStatus }
    >;

    /**
     * Some amount was deposited (e.g. for transaction fees).
     **/
    Deposit: GenericPalletEvent<Rv, 'Balances', 'Deposit', { who: AccountId32; amount: bigint }>;

    /**
     * Some amount was withdrawn from the account (e.g. for transaction fees).
     **/
    Withdraw: GenericPalletEvent<Rv, 'Balances', 'Withdraw', { who: AccountId32; amount: bigint }>;

    /**
     * Some amount was removed from the account (e.g. for misbehavior).
     **/
    Slashed: GenericPalletEvent<Rv, 'Balances', 'Slashed', { who: AccountId32; amount: bigint }>;

    /**
     * Some amount was minted into an account.
     **/
    Minted: GenericPalletEvent<Rv, 'Balances', 'Minted', { who: AccountId32; amount: bigint }>;

    /**
     * Some amount was burned from an account.
     **/
    Burned: GenericPalletEvent<Rv, 'Balances', 'Burned', { who: AccountId32; amount: bigint }>;

    /**
     * Some amount was suspended from an account (it can be restored later).
     **/
    Suspended: GenericPalletEvent<Rv, 'Balances', 'Suspended', { who: AccountId32; amount: bigint }>;

    /**
     * Some amount was restored into an account.
     **/
    Restored: GenericPalletEvent<Rv, 'Balances', 'Restored', { who: AccountId32; amount: bigint }>;

    /**
     * An account was upgraded.
     **/
    Upgraded: GenericPalletEvent<Rv, 'Balances', 'Upgraded', { who: AccountId32 }>;

    /**
     * Total issuance was increased by `amount`, creating a credit to be balanced.
     **/
    Issued: GenericPalletEvent<Rv, 'Balances', 'Issued', { amount: bigint }>;

    /**
     * Total issuance was decreased by `amount`, creating a debt to be balanced.
     **/
    Rescinded: GenericPalletEvent<Rv, 'Balances', 'Rescinded', { amount: bigint }>;

    /**
     * Some balance was locked.
     **/
    Locked: GenericPalletEvent<Rv, 'Balances', 'Locked', { who: AccountId32; amount: bigint }>;

    /**
     * Some balance was unlocked.
     **/
    Unlocked: GenericPalletEvent<Rv, 'Balances', 'Unlocked', { who: AccountId32; amount: bigint }>;

    /**
     * Some balance was frozen.
     **/
    Frozen: GenericPalletEvent<Rv, 'Balances', 'Frozen', { who: AccountId32; amount: bigint }>;

    /**
     * Some balance was thawed.
     **/
    Thawed: GenericPalletEvent<Rv, 'Balances', 'Thawed', { who: AccountId32; amount: bigint }>;

    /**
     * The `TotalIssuance` was forcefully changed.
     **/
    TotalIssuanceForced: GenericPalletEvent<Rv, 'Balances', 'TotalIssuanceForced', { old: bigint; new: bigint }>;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `TransactionPayment`'s events
   **/
  transactionPayment: {
    /**
     * A transaction fee `actual_fee`, of which `tip` was added to the minimum inclusion fee,
     * has been paid by `who`.
     **/
    TransactionFeePaid: GenericPalletEvent<
      Rv,
      'TransactionPayment',
      'TransactionFeePaid',
      { who: AccountId32; actualFee: bigint; tip: bigint }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Staking`'s events
   **/
  staking: {
    /**
     * The era payout has been set; the first balance is the validator-payout; the second is
     * the remainder from the maximum amount of reward.
     **/
    EraPaid: GenericPalletEvent<
      Rv,
      'Staking',
      'EraPaid',
      { eraIndex: number; validatorPayout: bigint; remainder: bigint }
    >;

    /**
     * The nominator has been rewarded by this amount to this destination.
     **/
    Rewarded: GenericPalletEvent<
      Rv,
      'Staking',
      'Rewarded',
      { stash: AccountId32; dest: PalletStakingRewardDestination; amount: bigint }
    >;

    /**
     * A staker (validator or nominator) has been slashed by the given amount.
     **/
    Slashed: GenericPalletEvent<Rv, 'Staking', 'Slashed', { staker: AccountId32; amount: bigint }>;

    /**
     * A slash for the given validator, for the given percentage of their stake, at the given
     * era as been reported.
     **/
    SlashReported: GenericPalletEvent<
      Rv,
      'Staking',
      'SlashReported',
      { validator: AccountId32; fraction: Perbill; slashEra: number }
    >;

    /**
     * An old slashing report from a prior era was discarded because it could
     * not be processed.
     **/
    OldSlashingReportDiscarded: GenericPalletEvent<
      Rv,
      'Staking',
      'OldSlashingReportDiscarded',
      { sessionIndex: number }
    >;

    /**
     * A new set of stakers was elected.
     **/
    StakersElected: GenericPalletEvent<Rv, 'Staking', 'StakersElected', null>;

    /**
     * An account has bonded this amount. \[stash, amount\]
     *
     * NOTE: This event is only emitted when funds are bonded via a dispatchable. Notably,
     * it will not be emitted for staking rewards when they are added to stake.
     **/
    Bonded: GenericPalletEvent<Rv, 'Staking', 'Bonded', { stash: AccountId32; amount: bigint }>;

    /**
     * An account has unbonded this amount.
     **/
    Unbonded: GenericPalletEvent<Rv, 'Staking', 'Unbonded', { stash: AccountId32; amount: bigint }>;

    /**
     * An account has called `withdraw_unbonded` and removed unbonding chunks worth `Balance`
     * from the unlocking queue.
     **/
    Withdrawn: GenericPalletEvent<Rv, 'Staking', 'Withdrawn', { stash: AccountId32; amount: bigint }>;

    /**
     * A nominator has been kicked from a validator.
     **/
    Kicked: GenericPalletEvent<Rv, 'Staking', 'Kicked', { nominator: AccountId32; stash: AccountId32 }>;

    /**
     * The election failed. No new era is planned.
     **/
    StakingElectionFailed: GenericPalletEvent<Rv, 'Staking', 'StakingElectionFailed', null>;

    /**
     * An account has stopped participating as either a validator or nominator.
     **/
    Chilled: GenericPalletEvent<Rv, 'Staking', 'Chilled', { stash: AccountId32 }>;

    /**
     * A Page of stakers rewards are getting paid. `next` is `None` if all pages are claimed.
     **/
    PayoutStarted: GenericPalletEvent<
      Rv,
      'Staking',
      'PayoutStarted',
      { eraIndex: number; validatorStash: AccountId32; page: number; next?: number | undefined }
    >;

    /**
     * A validator has set their preferences.
     **/
    ValidatorPrefsSet: GenericPalletEvent<
      Rv,
      'Staking',
      'ValidatorPrefsSet',
      { stash: AccountId32; prefs: PalletStakingValidatorPrefs }
    >;

    /**
     * Voters size limit reached.
     **/
    SnapshotVotersSizeExceeded: GenericPalletEvent<Rv, 'Staking', 'SnapshotVotersSizeExceeded', { size: number }>;

    /**
     * Targets size limit reached.
     **/
    SnapshotTargetsSizeExceeded: GenericPalletEvent<Rv, 'Staking', 'SnapshotTargetsSizeExceeded', { size: number }>;

    /**
     * A new force era mode was set.
     **/
    ForceEra: GenericPalletEvent<Rv, 'Staking', 'ForceEra', { mode: PalletStakingForcing }>;

    /**
     * Report of a controller batch deprecation.
     **/
    ControllerBatchDeprecated: GenericPalletEvent<Rv, 'Staking', 'ControllerBatchDeprecated', { failures: number }>;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Offences`'s events
   **/
  offences: {
    /**
     * There is an offence reported of the given `kind` happened at the `session_index` and
     * (kind-specific) time slot. This event is not deposited for duplicate slashes.
     * \[kind, timeslot\].
     **/
    Offence: GenericPalletEvent<Rv, 'Offences', 'Offence', { kind: FixedBytes<16>; timeslot: Bytes }>;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Parameters`'s events
   **/
  parameters: {
    /**
     * A Parameter was set.
     *
     * Is also emitted when the value was not changed.
     **/
    Updated: GenericPalletEvent<
      Rv,
      'Parameters',
      'Updated',
      {
        /**
         * The key that was updated.
         **/
        key: WestendRuntimeRuntimeParametersKey;

        /**
         * The old value before this call.
         **/
        oldValue?: WestendRuntimeRuntimeParametersValue | undefined;

        /**
         * The new value after this call.
         **/
        newValue?: WestendRuntimeRuntimeParametersValue | undefined;
      }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Session`'s events
   **/
  session: {
    /**
     * New session has happened. Note that the argument is the session index, not the
     * block number as the type might suggest.
     **/
    NewSession: GenericPalletEvent<Rv, 'Session', 'NewSession', { sessionIndex: number }>;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Grandpa`'s events
   **/
  grandpa: {
    /**
     * New authority set has been applied.
     **/
    NewAuthorities: GenericPalletEvent<
      Rv,
      'Grandpa',
      'NewAuthorities',
      { authoritySet: Array<[SpConsensusGrandpaAppPublic, bigint]> }
    >;

    /**
     * Current authority set has been paused.
     **/
    Paused: GenericPalletEvent<Rv, 'Grandpa', 'Paused', null>;

    /**
     * Current authority set has been resumed.
     **/
    Resumed: GenericPalletEvent<Rv, 'Grandpa', 'Resumed', null>;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Utility`'s events
   **/
  utility: {
    /**
     * Batch of dispatches did not complete fully. Index of first failing dispatch given, as
     * well as the error.
     **/
    BatchInterrupted: GenericPalletEvent<Rv, 'Utility', 'BatchInterrupted', { index: number; error: DispatchError }>;

    /**
     * Batch of dispatches completed fully with no error.
     **/
    BatchCompleted: GenericPalletEvent<Rv, 'Utility', 'BatchCompleted', null>;

    /**
     * Batch of dispatches completed but has errors.
     **/
    BatchCompletedWithErrors: GenericPalletEvent<Rv, 'Utility', 'BatchCompletedWithErrors', null>;

    /**
     * A single item within a Batch of dispatches has completed with no error.
     **/
    ItemCompleted: GenericPalletEvent<Rv, 'Utility', 'ItemCompleted', null>;

    /**
     * A single item within a Batch of dispatches has completed with error.
     **/
    ItemFailed: GenericPalletEvent<Rv, 'Utility', 'ItemFailed', { error: DispatchError }>;

    /**
     * A call was dispatched.
     **/
    DispatchedAs: GenericPalletEvent<Rv, 'Utility', 'DispatchedAs', { result: Result<[], DispatchError> }>;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Identity`'s events
   **/
  identity: {
    /**
     * A name was set or reset (which will remove all judgements).
     **/
    IdentitySet: GenericPalletEvent<Rv, 'Identity', 'IdentitySet', { who: AccountId32 }>;

    /**
     * A name was cleared, and the given balance returned.
     **/
    IdentityCleared: GenericPalletEvent<Rv, 'Identity', 'IdentityCleared', { who: AccountId32; deposit: bigint }>;

    /**
     * A name was removed and the given balance slashed.
     **/
    IdentityKilled: GenericPalletEvent<Rv, 'Identity', 'IdentityKilled', { who: AccountId32; deposit: bigint }>;

    /**
     * A judgement was asked from a registrar.
     **/
    JudgementRequested: GenericPalletEvent<
      Rv,
      'Identity',
      'JudgementRequested',
      { who: AccountId32; registrarIndex: number }
    >;

    /**
     * A judgement request was retracted.
     **/
    JudgementUnrequested: GenericPalletEvent<
      Rv,
      'Identity',
      'JudgementUnrequested',
      { who: AccountId32; registrarIndex: number }
    >;

    /**
     * A judgement was given by a registrar.
     **/
    JudgementGiven: GenericPalletEvent<
      Rv,
      'Identity',
      'JudgementGiven',
      { target: AccountId32; registrarIndex: number }
    >;

    /**
     * A registrar was added.
     **/
    RegistrarAdded: GenericPalletEvent<Rv, 'Identity', 'RegistrarAdded', { registrarIndex: number }>;

    /**
     * A sub-identity was added to an identity and the deposit paid.
     **/
    SubIdentityAdded: GenericPalletEvent<
      Rv,
      'Identity',
      'SubIdentityAdded',
      { sub: AccountId32; main: AccountId32; deposit: bigint }
    >;

    /**
     * An account's sub-identities were set (in bulk).
     **/
    SubIdentitiesSet: GenericPalletEvent<
      Rv,
      'Identity',
      'SubIdentitiesSet',
      { main: AccountId32; numberOfSubs: number; newDeposit: bigint }
    >;

    /**
     * A given sub-account's associated name was changed by its super-identity.
     **/
    SubIdentityRenamed: GenericPalletEvent<
      Rv,
      'Identity',
      'SubIdentityRenamed',
      { sub: AccountId32; main: AccountId32 }
    >;

    /**
     * A sub-identity was removed from an identity and the deposit freed.
     **/
    SubIdentityRemoved: GenericPalletEvent<
      Rv,
      'Identity',
      'SubIdentityRemoved',
      { sub: AccountId32; main: AccountId32; deposit: bigint }
    >;

    /**
     * A sub-identity was cleared, and the given deposit repatriated from the
     * main identity account to the sub-identity account.
     **/
    SubIdentityRevoked: GenericPalletEvent<
      Rv,
      'Identity',
      'SubIdentityRevoked',
      { sub: AccountId32; main: AccountId32; deposit: bigint }
    >;

    /**
     * A username authority was added.
     **/
    AuthorityAdded: GenericPalletEvent<Rv, 'Identity', 'AuthorityAdded', { authority: AccountId32 }>;

    /**
     * A username authority was removed.
     **/
    AuthorityRemoved: GenericPalletEvent<Rv, 'Identity', 'AuthorityRemoved', { authority: AccountId32 }>;

    /**
     * A username was set for `who`.
     **/
    UsernameSet: GenericPalletEvent<Rv, 'Identity', 'UsernameSet', { who: AccountId32; username: Bytes }>;

    /**
     * A username was queued, but `who` must accept it prior to `expiration`.
     **/
    UsernameQueued: GenericPalletEvent<
      Rv,
      'Identity',
      'UsernameQueued',
      { who: AccountId32; username: Bytes; expiration: number }
    >;

    /**
     * A queued username passed its expiration without being claimed and was removed.
     **/
    PreapprovalExpired: GenericPalletEvent<Rv, 'Identity', 'PreapprovalExpired', { whose: AccountId32 }>;

    /**
     * A username was set as a primary and can be looked up from `who`.
     **/
    PrimaryUsernameSet: GenericPalletEvent<Rv, 'Identity', 'PrimaryUsernameSet', { who: AccountId32; username: Bytes }>;

    /**
     * A dangling username (as in, a username corresponding to an account that has removed its
     * identity) has been removed.
     **/
    DanglingUsernameRemoved: GenericPalletEvent<
      Rv,
      'Identity',
      'DanglingUsernameRemoved',
      { who: AccountId32; username: Bytes }
    >;

    /**
     * A username has been unbound.
     **/
    UsernameUnbound: GenericPalletEvent<Rv, 'Identity', 'UsernameUnbound', { username: Bytes }>;

    /**
     * A username has been removed.
     **/
    UsernameRemoved: GenericPalletEvent<Rv, 'Identity', 'UsernameRemoved', { username: Bytes }>;

    /**
     * A username has been killed.
     **/
    UsernameKilled: GenericPalletEvent<Rv, 'Identity', 'UsernameKilled', { username: Bytes }>;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Recovery`'s events
   **/
  recovery: {
    /**
     * A recovery process has been set up for an account.
     **/
    RecoveryCreated: GenericPalletEvent<Rv, 'Recovery', 'RecoveryCreated', { account: AccountId32 }>;

    /**
     * A recovery process has been initiated for lost account by rescuer account.
     **/
    RecoveryInitiated: GenericPalletEvent<
      Rv,
      'Recovery',
      'RecoveryInitiated',
      { lostAccount: AccountId32; rescuerAccount: AccountId32 }
    >;

    /**
     * A recovery process for lost account by rescuer account has been vouched for by sender.
     **/
    RecoveryVouched: GenericPalletEvent<
      Rv,
      'Recovery',
      'RecoveryVouched',
      { lostAccount: AccountId32; rescuerAccount: AccountId32; sender: AccountId32 }
    >;

    /**
     * A recovery process for lost account by rescuer account has been closed.
     **/
    RecoveryClosed: GenericPalletEvent<
      Rv,
      'Recovery',
      'RecoveryClosed',
      { lostAccount: AccountId32; rescuerAccount: AccountId32 }
    >;

    /**
     * Lost account has been successfully recovered by rescuer account.
     **/
    AccountRecovered: GenericPalletEvent<
      Rv,
      'Recovery',
      'AccountRecovered',
      { lostAccount: AccountId32; rescuerAccount: AccountId32 }
    >;

    /**
     * A recovery process has been removed for an account.
     **/
    RecoveryRemoved: GenericPalletEvent<Rv, 'Recovery', 'RecoveryRemoved', { lostAccount: AccountId32 }>;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Vesting`'s events
   **/
  vesting: {
    /**
     * The amount vested has been updated. This could indicate a change in funds available.
     * The balance given is the amount which is left unvested (and thus locked).
     **/
    VestingUpdated: GenericPalletEvent<Rv, 'Vesting', 'VestingUpdated', { account: AccountId32; unvested: bigint }>;

    /**
     * An \[account\] has become fully vested.
     **/
    VestingCompleted: GenericPalletEvent<Rv, 'Vesting', 'VestingCompleted', { account: AccountId32 }>;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Scheduler`'s events
   **/
  scheduler: {
    /**
     * Scheduled some task.
     **/
    Scheduled: GenericPalletEvent<Rv, 'Scheduler', 'Scheduled', { when: number; index: number }>;

    /**
     * Canceled some task.
     **/
    Canceled: GenericPalletEvent<Rv, 'Scheduler', 'Canceled', { when: number; index: number }>;

    /**
     * Dispatched some task.
     **/
    Dispatched: GenericPalletEvent<
      Rv,
      'Scheduler',
      'Dispatched',
      { task: [number, number]; id?: FixedBytes<32> | undefined; result: Result<[], DispatchError> }
    >;

    /**
     * Set a retry configuration for some task.
     **/
    RetrySet: GenericPalletEvent<
      Rv,
      'Scheduler',
      'RetrySet',
      { task: [number, number]; id?: FixedBytes<32> | undefined; period: number; retries: number }
    >;

    /**
     * Cancel a retry configuration for some task.
     **/
    RetryCancelled: GenericPalletEvent<
      Rv,
      'Scheduler',
      'RetryCancelled',
      { task: [number, number]; id?: FixedBytes<32> | undefined }
    >;

    /**
     * The call for the provided hash was not found so the task has been aborted.
     **/
    CallUnavailable: GenericPalletEvent<
      Rv,
      'Scheduler',
      'CallUnavailable',
      { task: [number, number]; id?: FixedBytes<32> | undefined }
    >;

    /**
     * The given task was unable to be renewed since the agenda is full at that block.
     **/
    PeriodicFailed: GenericPalletEvent<
      Rv,
      'Scheduler',
      'PeriodicFailed',
      { task: [number, number]; id?: FixedBytes<32> | undefined }
    >;

    /**
     * The given task was unable to be retried since the agenda is full at that block or there
     * was not enough weight to reschedule it.
     **/
    RetryFailed: GenericPalletEvent<
      Rv,
      'Scheduler',
      'RetryFailed',
      { task: [number, number]; id?: FixedBytes<32> | undefined }
    >;

    /**
     * The given task can never be executed since it is overweight.
     **/
    PermanentlyOverweight: GenericPalletEvent<
      Rv,
      'Scheduler',
      'PermanentlyOverweight',
      { task: [number, number]; id?: FixedBytes<32> | undefined }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Preimage`'s events
   **/
  preimage: {
    /**
     * A preimage has been noted.
     **/
    Noted: GenericPalletEvent<Rv, 'Preimage', 'Noted', { hash: H256 }>;

    /**
     * A preimage has been requested.
     **/
    Requested: GenericPalletEvent<Rv, 'Preimage', 'Requested', { hash: H256 }>;

    /**
     * A preimage has ben cleared.
     **/
    Cleared: GenericPalletEvent<Rv, 'Preimage', 'Cleared', { hash: H256 }>;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Sudo`'s events
   **/
  sudo: {
    /**
     * A sudo call just took place.
     **/
    Sudid: GenericPalletEvent<
      Rv,
      'Sudo',
      'Sudid',
      {
        /**
         * The result of the call made by the sudo user.
         **/
        sudoResult: Result<[], DispatchError>;
      }
    >;

    /**
     * The sudo key has been updated.
     **/
    KeyChanged: GenericPalletEvent<
      Rv,
      'Sudo',
      'KeyChanged',
      {
        /**
         * The old sudo key (if one was previously set).
         **/
        old?: AccountId32 | undefined;

        /**
         * The new sudo key (if one was set).
         **/
        new: AccountId32;
      }
    >;

    /**
     * The key was permanently removed.
     **/
    KeyRemoved: GenericPalletEvent<Rv, 'Sudo', 'KeyRemoved', null>;

    /**
     * A [sudo_as](Pallet::sudo_as) call just took place.
     **/
    SudoAsDone: GenericPalletEvent<
      Rv,
      'Sudo',
      'SudoAsDone',
      {
        /**
         * The result of the call made by the sudo user.
         **/
        sudoResult: Result<[], DispatchError>;
      }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Proxy`'s events
   **/
  proxy: {
    /**
     * A proxy was executed correctly, with the given.
     **/
    ProxyExecuted: GenericPalletEvent<Rv, 'Proxy', 'ProxyExecuted', { result: Result<[], DispatchError> }>;

    /**
     * A pure account has been created by new proxy with given
     * disambiguation index and proxy type.
     **/
    PureCreated: GenericPalletEvent<
      Rv,
      'Proxy',
      'PureCreated',
      { pure: AccountId32; who: AccountId32; proxyType: WestendRuntimeProxyType; disambiguationIndex: number }
    >;

    /**
     * An announcement was placed to make a call in the future.
     **/
    Announced: GenericPalletEvent<Rv, 'Proxy', 'Announced', { real: AccountId32; proxy: AccountId32; callHash: H256 }>;

    /**
     * A proxy was added.
     **/
    ProxyAdded: GenericPalletEvent<
      Rv,
      'Proxy',
      'ProxyAdded',
      { delegator: AccountId32; delegatee: AccountId32; proxyType: WestendRuntimeProxyType; delay: number }
    >;

    /**
     * A proxy was removed.
     **/
    ProxyRemoved: GenericPalletEvent<
      Rv,
      'Proxy',
      'ProxyRemoved',
      { delegator: AccountId32; delegatee: AccountId32; proxyType: WestendRuntimeProxyType; delay: number }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Multisig`'s events
   **/
  multisig: {
    /**
     * A new multisig operation has begun.
     **/
    NewMultisig: GenericPalletEvent<
      Rv,
      'Multisig',
      'NewMultisig',
      { approving: AccountId32; multisig: AccountId32; callHash: FixedBytes<32> }
    >;

    /**
     * A multisig operation has been approved by someone.
     **/
    MultisigApproval: GenericPalletEvent<
      Rv,
      'Multisig',
      'MultisigApproval',
      { approving: AccountId32; timepoint: PalletMultisigTimepoint; multisig: AccountId32; callHash: FixedBytes<32> }
    >;

    /**
     * A multisig operation has been executed.
     **/
    MultisigExecuted: GenericPalletEvent<
      Rv,
      'Multisig',
      'MultisigExecuted',
      {
        approving: AccountId32;
        timepoint: PalletMultisigTimepoint;
        multisig: AccountId32;
        callHash: FixedBytes<32>;
        result: Result<[], DispatchError>;
      }
    >;

    /**
     * A multisig operation has been cancelled.
     **/
    MultisigCancelled: GenericPalletEvent<
      Rv,
      'Multisig',
      'MultisigCancelled',
      { cancelling: AccountId32; timepoint: PalletMultisigTimepoint; multisig: AccountId32; callHash: FixedBytes<32> }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `ElectionProviderMultiPhase`'s events
   **/
  electionProviderMultiPhase: {
    /**
     * A solution was stored with the given compute.
     *
     * The `origin` indicates the origin of the solution. If `origin` is `Some(AccountId)`,
     * the stored solution was submitted in the signed phase by a miner with the `AccountId`.
     * Otherwise, the solution was stored either during the unsigned phase or by
     * `T::ForceOrigin`. The `bool` is `true` when a previous solution was ejected to make
     * room for this one.
     **/
    SolutionStored: GenericPalletEvent<
      Rv,
      'ElectionProviderMultiPhase',
      'SolutionStored',
      {
        compute: PalletElectionProviderMultiPhaseElectionCompute;
        origin?: AccountId32 | undefined;
        prevEjected: boolean;
      }
    >;

    /**
     * The election has been finalized, with the given computation and score.
     **/
    ElectionFinalized: GenericPalletEvent<
      Rv,
      'ElectionProviderMultiPhase',
      'ElectionFinalized',
      { compute: PalletElectionProviderMultiPhaseElectionCompute; score: SpNposElectionsElectionScore }
    >;

    /**
     * An election failed.
     *
     * Not much can be said about which computes failed in the process.
     **/
    ElectionFailed: GenericPalletEvent<Rv, 'ElectionProviderMultiPhase', 'ElectionFailed', null>;

    /**
     * An account has been rewarded for their signed submission being finalized.
     **/
    Rewarded: GenericPalletEvent<Rv, 'ElectionProviderMultiPhase', 'Rewarded', { account: AccountId32; value: bigint }>;

    /**
     * An account has been slashed for submitting an invalid signed submission.
     **/
    Slashed: GenericPalletEvent<Rv, 'ElectionProviderMultiPhase', 'Slashed', { account: AccountId32; value: bigint }>;

    /**
     * There was a phase transition in a given round.
     **/
    PhaseTransitioned: GenericPalletEvent<
      Rv,
      'ElectionProviderMultiPhase',
      'PhaseTransitioned',
      { from: PalletElectionProviderMultiPhasePhase; to: PalletElectionProviderMultiPhasePhase; round: number }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `VoterList`'s events
   **/
  voterList: {
    /**
     * Moved an account from one bag to another.
     **/
    Rebagged: GenericPalletEvent<Rv, 'VoterList', 'Rebagged', { who: AccountId32; from: bigint; to: bigint }>;

    /**
     * Updated the score of some account to the given amount.
     **/
    ScoreUpdated: GenericPalletEvent<Rv, 'VoterList', 'ScoreUpdated', { who: AccountId32; newScore: bigint }>;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `NominationPools`'s events
   **/
  nominationPools: {
    /**
     * A pool has been created.
     **/
    Created: GenericPalletEvent<Rv, 'NominationPools', 'Created', { depositor: AccountId32; poolId: number }>;

    /**
     * A member has became bonded in a pool.
     **/
    Bonded: GenericPalletEvent<
      Rv,
      'NominationPools',
      'Bonded',
      { member: AccountId32; poolId: number; bonded: bigint; joined: boolean }
    >;

    /**
     * A payout has been made to a member.
     **/
    PaidOut: GenericPalletEvent<
      Rv,
      'NominationPools',
      'PaidOut',
      { member: AccountId32; poolId: number; payout: bigint }
    >;

    /**
     * A member has unbonded from their pool.
     *
     * - `balance` is the corresponding balance of the number of points that has been
     * requested to be unbonded (the argument of the `unbond` transaction) from the bonded
     * pool.
     * - `points` is the number of points that are issued as a result of `balance` being
     * dissolved into the corresponding unbonding pool.
     * - `era` is the era in which the balance will be unbonded.
     * In the absence of slashing, these values will match. In the presence of slashing, the
     * number of points that are issued in the unbonding pool will be less than the amount
     * requested to be unbonded.
     **/
    Unbonded: GenericPalletEvent<
      Rv,
      'NominationPools',
      'Unbonded',
      { member: AccountId32; poolId: number; balance: bigint; points: bigint; era: number }
    >;

    /**
     * A member has withdrawn from their pool.
     *
     * The given number of `points` have been dissolved in return of `balance`.
     *
     * Similar to `Unbonded` event, in the absence of slashing, the ratio of point to balance
     * will be 1.
     **/
    Withdrawn: GenericPalletEvent<
      Rv,
      'NominationPools',
      'Withdrawn',
      { member: AccountId32; poolId: number; balance: bigint; points: bigint }
    >;

    /**
     * A pool has been destroyed.
     **/
    Destroyed: GenericPalletEvent<Rv, 'NominationPools', 'Destroyed', { poolId: number }>;

    /**
     * The state of a pool has changed
     **/
    StateChanged: GenericPalletEvent<
      Rv,
      'NominationPools',
      'StateChanged',
      { poolId: number; newState: PalletNominationPoolsPoolState }
    >;

    /**
     * A member has been removed from a pool.
     *
     * The removal can be voluntary (withdrawn all unbonded funds) or involuntary (kicked).
     * Any funds that are still delegated (i.e. dangling delegation) are released and are
     * represented by `released_balance`.
     **/
    MemberRemoved: GenericPalletEvent<
      Rv,
      'NominationPools',
      'MemberRemoved',
      { poolId: number; member: AccountId32; releasedBalance: bigint }
    >;

    /**
     * The roles of a pool have been updated to the given new roles. Note that the depositor
     * can never change.
     **/
    RolesUpdated: GenericPalletEvent<
      Rv,
      'NominationPools',
      'RolesUpdated',
      { root?: AccountId32 | undefined; bouncer?: AccountId32 | undefined; nominator?: AccountId32 | undefined }
    >;

    /**
     * The active balance of pool `pool_id` has been slashed to `balance`.
     **/
    PoolSlashed: GenericPalletEvent<Rv, 'NominationPools', 'PoolSlashed', { poolId: number; balance: bigint }>;

    /**
     * The unbond pool at `era` of pool `pool_id` has been slashed to `balance`.
     **/
    UnbondingPoolSlashed: GenericPalletEvent<
      Rv,
      'NominationPools',
      'UnbondingPoolSlashed',
      { poolId: number; era: number; balance: bigint }
    >;

    /**
     * A pool's commission setting has been changed.
     **/
    PoolCommissionUpdated: GenericPalletEvent<
      Rv,
      'NominationPools',
      'PoolCommissionUpdated',
      { poolId: number; current?: [Perbill, AccountId32] | undefined }
    >;

    /**
     * A pool's maximum commission setting has been changed.
     **/
    PoolMaxCommissionUpdated: GenericPalletEvent<
      Rv,
      'NominationPools',
      'PoolMaxCommissionUpdated',
      { poolId: number; maxCommission: Perbill }
    >;

    /**
     * A pool's commission `change_rate` has been changed.
     **/
    PoolCommissionChangeRateUpdated: GenericPalletEvent<
      Rv,
      'NominationPools',
      'PoolCommissionChangeRateUpdated',
      { poolId: number; changeRate: PalletNominationPoolsCommissionChangeRate }
    >;

    /**
     * Pool commission claim permission has been updated.
     **/
    PoolCommissionClaimPermissionUpdated: GenericPalletEvent<
      Rv,
      'NominationPools',
      'PoolCommissionClaimPermissionUpdated',
      { poolId: number; permission?: PalletNominationPoolsCommissionClaimPermission | undefined }
    >;

    /**
     * Pool commission has been claimed.
     **/
    PoolCommissionClaimed: GenericPalletEvent<
      Rv,
      'NominationPools',
      'PoolCommissionClaimed',
      { poolId: number; commission: bigint }
    >;

    /**
     * Topped up deficit in frozen ED of the reward pool.
     **/
    MinBalanceDeficitAdjusted: GenericPalletEvent<
      Rv,
      'NominationPools',
      'MinBalanceDeficitAdjusted',
      { poolId: number; amount: bigint }
    >;

    /**
     * Claimed excess frozen ED of af the reward pool.
     **/
    MinBalanceExcessAdjusted: GenericPalletEvent<
      Rv,
      'NominationPools',
      'MinBalanceExcessAdjusted',
      { poolId: number; amount: bigint }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `FastUnstake`'s events
   **/
  fastUnstake: {
    /**
     * A staker was unstaked.
     **/
    Unstaked: GenericPalletEvent<
      Rv,
      'FastUnstake',
      'Unstaked',
      { stash: AccountId32; result: Result<[], DispatchError> }
    >;

    /**
     * A staker was slashed for requesting fast-unstake whilst being exposed.
     **/
    Slashed: GenericPalletEvent<Rv, 'FastUnstake', 'Slashed', { stash: AccountId32; amount: bigint }>;

    /**
     * A batch was partially checked for the given eras, but the process did not finish.
     **/
    BatchChecked: GenericPalletEvent<Rv, 'FastUnstake', 'BatchChecked', { eras: Array<number> }>;

    /**
     * A batch of a given size was terminated.
     *
     * This is always follows by a number of `Unstaked` or `Slashed` events, marking the end
     * of the batch. A new batch will be created upon next block.
     **/
    BatchFinished: GenericPalletEvent<Rv, 'FastUnstake', 'BatchFinished', { size: number }>;

    /**
     * An internal error happened. Operations will be paused now.
     **/
    InternalError: GenericPalletEvent<Rv, 'FastUnstake', 'InternalError', null>;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `ConvictionVoting`'s events
   **/
  convictionVoting: {
    /**
     * An account has delegated their vote to another account. \[who, target\]
     **/
    Delegated: GenericPalletEvent<Rv, 'ConvictionVoting', 'Delegated', [AccountId32, AccountId32]>;

    /**
     * An \[account\] has cancelled a previous delegation operation.
     **/
    Undelegated: GenericPalletEvent<Rv, 'ConvictionVoting', 'Undelegated', AccountId32>;

    /**
     * An account that has voted
     **/
    Voted: GenericPalletEvent<
      Rv,
      'ConvictionVoting',
      'Voted',
      { who: AccountId32; vote: PalletConvictionVotingVoteAccountVote }
    >;

    /**
     * A vote that been removed
     **/
    VoteRemoved: GenericPalletEvent<
      Rv,
      'ConvictionVoting',
      'VoteRemoved',
      { who: AccountId32; vote: PalletConvictionVotingVoteAccountVote }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Referenda`'s events
   **/
  referenda: {
    /**
     * A referendum has been submitted.
     **/
    Submitted: GenericPalletEvent<
      Rv,
      'Referenda',
      'Submitted',
      {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * The track (and by extension proposal dispatch origin) of this referendum.
         **/
        track: number;

        /**
         * The proposal for the referendum.
         **/
        proposal: FrameSupportPreimagesBounded;
      }
    >;

    /**
     * The decision deposit has been placed.
     **/
    DecisionDepositPlaced: GenericPalletEvent<
      Rv,
      'Referenda',
      'DecisionDepositPlaced',
      {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * The account who placed the deposit.
         **/
        who: AccountId32;

        /**
         * The amount placed by the account.
         **/
        amount: bigint;
      }
    >;

    /**
     * The decision deposit has been refunded.
     **/
    DecisionDepositRefunded: GenericPalletEvent<
      Rv,
      'Referenda',
      'DecisionDepositRefunded',
      {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * The account who placed the deposit.
         **/
        who: AccountId32;

        /**
         * The amount placed by the account.
         **/
        amount: bigint;
      }
    >;

    /**
     * A deposit has been slashed.
     **/
    DepositSlashed: GenericPalletEvent<
      Rv,
      'Referenda',
      'DepositSlashed',
      {
        /**
         * The account who placed the deposit.
         **/
        who: AccountId32;

        /**
         * The amount placed by the account.
         **/
        amount: bigint;
      }
    >;

    /**
     * A referendum has moved into the deciding phase.
     **/
    DecisionStarted: GenericPalletEvent<
      Rv,
      'Referenda',
      'DecisionStarted',
      {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * The track (and by extension proposal dispatch origin) of this referendum.
         **/
        track: number;

        /**
         * The proposal for the referendum.
         **/
        proposal: FrameSupportPreimagesBounded;

        /**
         * The current tally of votes in this referendum.
         **/
        tally: PalletConvictionVotingTally;
      }
    >;
    ConfirmStarted: GenericPalletEvent<
      Rv,
      'Referenda',
      'ConfirmStarted',
      {
        /**
         * Index of the referendum.
         **/
        index: number;
      }
    >;
    ConfirmAborted: GenericPalletEvent<
      Rv,
      'Referenda',
      'ConfirmAborted',
      {
        /**
         * Index of the referendum.
         **/
        index: number;
      }
    >;

    /**
     * A referendum has ended its confirmation phase and is ready for approval.
     **/
    Confirmed: GenericPalletEvent<
      Rv,
      'Referenda',
      'Confirmed',
      {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * The final tally of votes in this referendum.
         **/
        tally: PalletConvictionVotingTally;
      }
    >;

    /**
     * A referendum has been approved and its proposal has been scheduled.
     **/
    Approved: GenericPalletEvent<
      Rv,
      'Referenda',
      'Approved',
      {
        /**
         * Index of the referendum.
         **/
        index: number;
      }
    >;

    /**
     * A proposal has been rejected by referendum.
     **/
    Rejected: GenericPalletEvent<
      Rv,
      'Referenda',
      'Rejected',
      {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * The final tally of votes in this referendum.
         **/
        tally: PalletConvictionVotingTally;
      }
    >;

    /**
     * A referendum has been timed out without being decided.
     **/
    TimedOut: GenericPalletEvent<
      Rv,
      'Referenda',
      'TimedOut',
      {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * The final tally of votes in this referendum.
         **/
        tally: PalletConvictionVotingTally;
      }
    >;

    /**
     * A referendum has been cancelled.
     **/
    Cancelled: GenericPalletEvent<
      Rv,
      'Referenda',
      'Cancelled',
      {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * The final tally of votes in this referendum.
         **/
        tally: PalletConvictionVotingTally;
      }
    >;

    /**
     * A referendum has been killed.
     **/
    Killed: GenericPalletEvent<
      Rv,
      'Referenda',
      'Killed',
      {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * The final tally of votes in this referendum.
         **/
        tally: PalletConvictionVotingTally;
      }
    >;

    /**
     * The submission deposit has been refunded.
     **/
    SubmissionDepositRefunded: GenericPalletEvent<
      Rv,
      'Referenda',
      'SubmissionDepositRefunded',
      {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * The account who placed the deposit.
         **/
        who: AccountId32;

        /**
         * The amount placed by the account.
         **/
        amount: bigint;
      }
    >;

    /**
     * Metadata for a referendum has been set.
     **/
    MetadataSet: GenericPalletEvent<
      Rv,
      'Referenda',
      'MetadataSet',
      {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * Preimage hash.
         **/
        hash: H256;
      }
    >;

    /**
     * Metadata for a referendum has been cleared.
     **/
    MetadataCleared: GenericPalletEvent<
      Rv,
      'Referenda',
      'MetadataCleared',
      {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * Preimage hash.
         **/
        hash: H256;
      }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Whitelist`'s events
   **/
  whitelist: {
    CallWhitelisted: GenericPalletEvent<Rv, 'Whitelist', 'CallWhitelisted', { callHash: H256 }>;
    WhitelistedCallRemoved: GenericPalletEvent<Rv, 'Whitelist', 'WhitelistedCallRemoved', { callHash: H256 }>;
    WhitelistedCallDispatched: GenericPalletEvent<
      Rv,
      'Whitelist',
      'WhitelistedCallDispatched',
      { callHash: H256; result: Result<FrameSupportDispatchPostDispatchInfo, SpRuntimeDispatchErrorWithPostInfo> }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Treasury`'s events
   **/
  treasury: {
    /**
     * We have ended a spend period and will now allocate funds.
     **/
    Spending: GenericPalletEvent<Rv, 'Treasury', 'Spending', { budgetRemaining: bigint }>;

    /**
     * Some funds have been allocated.
     **/
    Awarded: GenericPalletEvent<
      Rv,
      'Treasury',
      'Awarded',
      { proposalIndex: number; award: bigint; account: AccountId32 }
    >;

    /**
     * Some of our funds have been burnt.
     **/
    Burnt: GenericPalletEvent<Rv, 'Treasury', 'Burnt', { burntFunds: bigint }>;

    /**
     * Spending has finished; this is the amount that rolls over until next spend.
     **/
    Rollover: GenericPalletEvent<Rv, 'Treasury', 'Rollover', { rolloverBalance: bigint }>;

    /**
     * Some funds have been deposited.
     **/
    Deposit: GenericPalletEvent<Rv, 'Treasury', 'Deposit', { value: bigint }>;

    /**
     * A new spend proposal has been approved.
     **/
    SpendApproved: GenericPalletEvent<
      Rv,
      'Treasury',
      'SpendApproved',
      { proposalIndex: number; amount: bigint; beneficiary: AccountId32 }
    >;

    /**
     * The inactive funds of the pallet have been updated.
     **/
    UpdatedInactive: GenericPalletEvent<
      Rv,
      'Treasury',
      'UpdatedInactive',
      { reactivated: bigint; deactivated: bigint }
    >;

    /**
     * A new asset spend proposal has been approved.
     **/
    AssetSpendApproved: GenericPalletEvent<
      Rv,
      'Treasury',
      'AssetSpendApproved',
      {
        index: number;
        assetKind: PolkadotRuntimeCommonImplsVersionedLocatableAsset;
        amount: bigint;
        beneficiary: XcmVersionedLocation;
        validFrom: number;
        expireAt: number;
      }
    >;

    /**
     * An approved spend was voided.
     **/
    AssetSpendVoided: GenericPalletEvent<Rv, 'Treasury', 'AssetSpendVoided', { index: number }>;

    /**
     * A payment happened.
     **/
    Paid: GenericPalletEvent<Rv, 'Treasury', 'Paid', { index: number; paymentId: bigint }>;

    /**
     * A payment failed and can be retried.
     **/
    PaymentFailed: GenericPalletEvent<Rv, 'Treasury', 'PaymentFailed', { index: number; paymentId: bigint }>;

    /**
     * A spend was processed and removed from the storage. It might have been successfully
     * paid or it may have expired.
     **/
    SpendProcessed: GenericPalletEvent<Rv, 'Treasury', 'SpendProcessed', { index: number }>;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `DelegatedStaking`'s events
   **/
  delegatedStaking: {
    /**
     * Funds delegated by a delegator.
     **/
    Delegated: GenericPalletEvent<
      Rv,
      'DelegatedStaking',
      'Delegated',
      { agent: AccountId32; delegator: AccountId32; amount: bigint }
    >;

    /**
     * Funds released to a delegator.
     **/
    Released: GenericPalletEvent<
      Rv,
      'DelegatedStaking',
      'Released',
      { agent: AccountId32; delegator: AccountId32; amount: bigint }
    >;

    /**
     * Funds slashed from a delegator.
     **/
    Slashed: GenericPalletEvent<
      Rv,
      'DelegatedStaking',
      'Slashed',
      { agent: AccountId32; delegator: AccountId32; amount: bigint }
    >;

    /**
     * Unclaimed delegation funds migrated to delegator.
     **/
    MigratedDelegation: GenericPalletEvent<
      Rv,
      'DelegatedStaking',
      'MigratedDelegation',
      { agent: AccountId32; delegator: AccountId32; amount: bigint }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `ParaInclusion`'s events
   **/
  paraInclusion: {
    /**
     * A candidate was backed. `[candidate, head_data]`
     **/
    CandidateBacked: GenericPalletEvent<
      Rv,
      'ParaInclusion',
      'CandidateBacked',
      [
        PolkadotPrimitivesVstagingCandidateReceiptV2,
        PolkadotParachainPrimitivesPrimitivesHeadData,
        PolkadotPrimitivesV8CoreIndex,
        PolkadotPrimitivesV8GroupIndex,
      ]
    >;

    /**
     * A candidate was included. `[candidate, head_data]`
     **/
    CandidateIncluded: GenericPalletEvent<
      Rv,
      'ParaInclusion',
      'CandidateIncluded',
      [
        PolkadotPrimitivesVstagingCandidateReceiptV2,
        PolkadotParachainPrimitivesPrimitivesHeadData,
        PolkadotPrimitivesV8CoreIndex,
        PolkadotPrimitivesV8GroupIndex,
      ]
    >;

    /**
     * A candidate timed out. `[candidate, head_data]`
     **/
    CandidateTimedOut: GenericPalletEvent<
      Rv,
      'ParaInclusion',
      'CandidateTimedOut',
      [
        PolkadotPrimitivesVstagingCandidateReceiptV2,
        PolkadotParachainPrimitivesPrimitivesHeadData,
        PolkadotPrimitivesV8CoreIndex,
      ]
    >;

    /**
     * Some upward messages have been received and will be processed.
     **/
    UpwardMessagesReceived: GenericPalletEvent<
      Rv,
      'ParaInclusion',
      'UpwardMessagesReceived',
      { from: PolkadotParachainPrimitivesPrimitivesId; count: number }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Paras`'s events
   **/
  paras: {
    /**
     * Current code has been updated for a Para. `para_id`
     **/
    CurrentCodeUpdated: GenericPalletEvent<Rv, 'Paras', 'CurrentCodeUpdated', PolkadotParachainPrimitivesPrimitivesId>;

    /**
     * Current head has been updated for a Para. `para_id`
     **/
    CurrentHeadUpdated: GenericPalletEvent<Rv, 'Paras', 'CurrentHeadUpdated', PolkadotParachainPrimitivesPrimitivesId>;

    /**
     * A code upgrade has been scheduled for a Para. `para_id`
     **/
    CodeUpgradeScheduled: GenericPalletEvent<
      Rv,
      'Paras',
      'CodeUpgradeScheduled',
      PolkadotParachainPrimitivesPrimitivesId
    >;

    /**
     * A new head has been noted for a Para. `para_id`
     **/
    NewHeadNoted: GenericPalletEvent<Rv, 'Paras', 'NewHeadNoted', PolkadotParachainPrimitivesPrimitivesId>;

    /**
     * A para has been queued to execute pending actions. `para_id`
     **/
    ActionQueued: GenericPalletEvent<Rv, 'Paras', 'ActionQueued', [PolkadotParachainPrimitivesPrimitivesId, number]>;

    /**
     * The given para either initiated or subscribed to a PVF check for the given validation
     * code. `code_hash` `para_id`
     **/
    PvfCheckStarted: GenericPalletEvent<
      Rv,
      'Paras',
      'PvfCheckStarted',
      [PolkadotParachainPrimitivesPrimitivesValidationCodeHash, PolkadotParachainPrimitivesPrimitivesId]
    >;

    /**
     * The given validation code was accepted by the PVF pre-checking vote.
     * `code_hash` `para_id`
     **/
    PvfCheckAccepted: GenericPalletEvent<
      Rv,
      'Paras',
      'PvfCheckAccepted',
      [PolkadotParachainPrimitivesPrimitivesValidationCodeHash, PolkadotParachainPrimitivesPrimitivesId]
    >;

    /**
     * The given validation code was rejected by the PVF pre-checking vote.
     * `code_hash` `para_id`
     **/
    PvfCheckRejected: GenericPalletEvent<
      Rv,
      'Paras',
      'PvfCheckRejected',
      [PolkadotParachainPrimitivesPrimitivesValidationCodeHash, PolkadotParachainPrimitivesPrimitivesId]
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Hrmp`'s events
   **/
  hrmp: {
    /**
     * Open HRMP channel requested.
     **/
    OpenChannelRequested: GenericPalletEvent<
      Rv,
      'Hrmp',
      'OpenChannelRequested',
      {
        sender: PolkadotParachainPrimitivesPrimitivesId;
        recipient: PolkadotParachainPrimitivesPrimitivesId;
        proposedMaxCapacity: number;
        proposedMaxMessageSize: number;
      }
    >;

    /**
     * An HRMP channel request sent by the receiver was canceled by either party.
     **/
    OpenChannelCanceled: GenericPalletEvent<
      Rv,
      'Hrmp',
      'OpenChannelCanceled',
      {
        byParachain: PolkadotParachainPrimitivesPrimitivesId;
        channelId: PolkadotParachainPrimitivesPrimitivesHrmpChannelId;
      }
    >;

    /**
     * Open HRMP channel accepted.
     **/
    OpenChannelAccepted: GenericPalletEvent<
      Rv,
      'Hrmp',
      'OpenChannelAccepted',
      { sender: PolkadotParachainPrimitivesPrimitivesId; recipient: PolkadotParachainPrimitivesPrimitivesId }
    >;

    /**
     * HRMP channel closed.
     **/
    ChannelClosed: GenericPalletEvent<
      Rv,
      'Hrmp',
      'ChannelClosed',
      {
        byParachain: PolkadotParachainPrimitivesPrimitivesId;
        channelId: PolkadotParachainPrimitivesPrimitivesHrmpChannelId;
      }
    >;

    /**
     * An HRMP channel was opened via Root origin.
     **/
    HrmpChannelForceOpened: GenericPalletEvent<
      Rv,
      'Hrmp',
      'HrmpChannelForceOpened',
      {
        sender: PolkadotParachainPrimitivesPrimitivesId;
        recipient: PolkadotParachainPrimitivesPrimitivesId;
        proposedMaxCapacity: number;
        proposedMaxMessageSize: number;
      }
    >;

    /**
     * An HRMP channel was opened with a system chain.
     **/
    HrmpSystemChannelOpened: GenericPalletEvent<
      Rv,
      'Hrmp',
      'HrmpSystemChannelOpened',
      {
        sender: PolkadotParachainPrimitivesPrimitivesId;
        recipient: PolkadotParachainPrimitivesPrimitivesId;
        proposedMaxCapacity: number;
        proposedMaxMessageSize: number;
      }
    >;

    /**
     * An HRMP channel's deposits were updated.
     **/
    OpenChannelDepositsUpdated: GenericPalletEvent<
      Rv,
      'Hrmp',
      'OpenChannelDepositsUpdated',
      { sender: PolkadotParachainPrimitivesPrimitivesId; recipient: PolkadotParachainPrimitivesPrimitivesId }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `ParasDisputes`'s events
   **/
  parasDisputes: {
    /**
     * A dispute has been initiated. \[candidate hash, dispute location\]
     **/
    DisputeInitiated: GenericPalletEvent<
      Rv,
      'ParasDisputes',
      'DisputeInitiated',
      [PolkadotCorePrimitivesCandidateHash, PolkadotRuntimeParachainsDisputesDisputeLocation]
    >;

    /**
     * A dispute has concluded for or against a candidate.
     * `\[para id, candidate hash, dispute result\]`
     **/
    DisputeConcluded: GenericPalletEvent<
      Rv,
      'ParasDisputes',
      'DisputeConcluded',
      [PolkadotCorePrimitivesCandidateHash, PolkadotRuntimeParachainsDisputesDisputeResult]
    >;

    /**
     * A dispute has concluded with supermajority against a candidate.
     * Block authors should no longer build on top of this head and should
     * instead revert the block at the given height. This should be the
     * number of the child of the last known valid block in the chain.
     **/
    Revert: GenericPalletEvent<Rv, 'ParasDisputes', 'Revert', number>;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `OnDemandAssignmentProvider`'s events
   **/
  onDemandAssignmentProvider: {
    /**
     * An order was placed at some spot price amount by orderer ordered_by
     **/
    OnDemandOrderPlaced: GenericPalletEvent<
      Rv,
      'OnDemandAssignmentProvider',
      'OnDemandOrderPlaced',
      { paraId: PolkadotParachainPrimitivesPrimitivesId; spotPrice: bigint; orderedBy: AccountId32 }
    >;

    /**
     * The value of the spot price has likely changed
     **/
    SpotPriceSet: GenericPalletEvent<Rv, 'OnDemandAssignmentProvider', 'SpotPriceSet', { spotPrice: bigint }>;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Registrar`'s events
   **/
  registrar: {
    Registered: GenericPalletEvent<
      Rv,
      'Registrar',
      'Registered',
      { paraId: PolkadotParachainPrimitivesPrimitivesId; manager: AccountId32 }
    >;
    Deregistered: GenericPalletEvent<
      Rv,
      'Registrar',
      'Deregistered',
      { paraId: PolkadotParachainPrimitivesPrimitivesId }
    >;
    Reserved: GenericPalletEvent<
      Rv,
      'Registrar',
      'Reserved',
      { paraId: PolkadotParachainPrimitivesPrimitivesId; who: AccountId32 }
    >;
    Swapped: GenericPalletEvent<
      Rv,
      'Registrar',
      'Swapped',
      { paraId: PolkadotParachainPrimitivesPrimitivesId; otherId: PolkadotParachainPrimitivesPrimitivesId }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Slots`'s events
   **/
  slots: {
    /**
     * A new `[lease_period]` is beginning.
     **/
    NewLeasePeriod: GenericPalletEvent<Rv, 'Slots', 'NewLeasePeriod', { leasePeriod: number }>;

    /**
     * A para has won the right to a continuous set of lease periods as a parachain.
     * First balance is any extra amount reserved on top of the para's existing deposit.
     * Second balance is the total amount reserved.
     **/
    Leased: GenericPalletEvent<
      Rv,
      'Slots',
      'Leased',
      {
        paraId: PolkadotParachainPrimitivesPrimitivesId;
        leaser: AccountId32;
        periodBegin: number;
        periodCount: number;
        extraReserved: bigint;
        totalAmount: bigint;
      }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Auctions`'s events
   **/
  auctions: {
    /**
     * An auction started. Provides its index and the block number where it will begin to
     * close and the first lease period of the quadruplet that is auctioned.
     **/
    AuctionStarted: GenericPalletEvent<
      Rv,
      'Auctions',
      'AuctionStarted',
      { auctionIndex: number; leasePeriod: number; ending: number }
    >;

    /**
     * An auction ended. All funds become unreserved.
     **/
    AuctionClosed: GenericPalletEvent<Rv, 'Auctions', 'AuctionClosed', { auctionIndex: number }>;

    /**
     * Funds were reserved for a winning bid. First balance is the extra amount reserved.
     * Second is the total.
     **/
    Reserved: GenericPalletEvent<
      Rv,
      'Auctions',
      'Reserved',
      { bidder: AccountId32; extraReserved: bigint; totalAmount: bigint }
    >;

    /**
     * Funds were unreserved since bidder is no longer active. `[bidder, amount]`
     **/
    Unreserved: GenericPalletEvent<Rv, 'Auctions', 'Unreserved', { bidder: AccountId32; amount: bigint }>;

    /**
     * Someone attempted to lease the same slot twice for a parachain. The amount is held in
     * reserve but no parachain slot has been leased.
     **/
    ReserveConfiscated: GenericPalletEvent<
      Rv,
      'Auctions',
      'ReserveConfiscated',
      { paraId: PolkadotParachainPrimitivesPrimitivesId; leaser: AccountId32; amount: bigint }
    >;

    /**
     * A new bid has been accepted as the current winner.
     **/
    BidAccepted: GenericPalletEvent<
      Rv,
      'Auctions',
      'BidAccepted',
      {
        bidder: AccountId32;
        paraId: PolkadotParachainPrimitivesPrimitivesId;
        amount: bigint;
        firstSlot: number;
        lastSlot: number;
      }
    >;

    /**
     * The winning offset was chosen for an auction. This will map into the `Winning` storage
     * map.
     **/
    WinningOffset: GenericPalletEvent<Rv, 'Auctions', 'WinningOffset', { auctionIndex: number; blockNumber: number }>;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Crowdloan`'s events
   **/
  crowdloan: {
    /**
     * Create a new crowdloaning campaign.
     **/
    Created: GenericPalletEvent<Rv, 'Crowdloan', 'Created', { paraId: PolkadotParachainPrimitivesPrimitivesId }>;

    /**
     * Contributed to a crowd sale.
     **/
    Contributed: GenericPalletEvent<
      Rv,
      'Crowdloan',
      'Contributed',
      { who: AccountId32; fundIndex: PolkadotParachainPrimitivesPrimitivesId; amount: bigint }
    >;

    /**
     * Withdrew full balance of a contributor.
     **/
    Withdrew: GenericPalletEvent<
      Rv,
      'Crowdloan',
      'Withdrew',
      { who: AccountId32; fundIndex: PolkadotParachainPrimitivesPrimitivesId; amount: bigint }
    >;

    /**
     * The loans in a fund have been partially dissolved, i.e. there are some left
     * over child keys that still need to be killed.
     **/
    PartiallyRefunded: GenericPalletEvent<
      Rv,
      'Crowdloan',
      'PartiallyRefunded',
      { paraId: PolkadotParachainPrimitivesPrimitivesId }
    >;

    /**
     * All loans in a fund have been refunded.
     **/
    AllRefunded: GenericPalletEvent<
      Rv,
      'Crowdloan',
      'AllRefunded',
      { paraId: PolkadotParachainPrimitivesPrimitivesId }
    >;

    /**
     * Fund is dissolved.
     **/
    Dissolved: GenericPalletEvent<Rv, 'Crowdloan', 'Dissolved', { paraId: PolkadotParachainPrimitivesPrimitivesId }>;

    /**
     * The result of trying to submit a new bid to the Slots pallet.
     **/
    HandleBidResult: GenericPalletEvent<
      Rv,
      'Crowdloan',
      'HandleBidResult',
      { paraId: PolkadotParachainPrimitivesPrimitivesId; result: Result<[], DispatchError> }
    >;

    /**
     * The configuration to a crowdloan has been edited.
     **/
    Edited: GenericPalletEvent<Rv, 'Crowdloan', 'Edited', { paraId: PolkadotParachainPrimitivesPrimitivesId }>;

    /**
     * A memo has been updated.
     **/
    MemoUpdated: GenericPalletEvent<
      Rv,
      'Crowdloan',
      'MemoUpdated',
      { who: AccountId32; paraId: PolkadotParachainPrimitivesPrimitivesId; memo: Bytes }
    >;

    /**
     * A parachain has been moved to `NewRaise`
     **/
    AddedToNewRaise: GenericPalletEvent<
      Rv,
      'Crowdloan',
      'AddedToNewRaise',
      { paraId: PolkadotParachainPrimitivesPrimitivesId }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `AssignedSlots`'s events
   **/
  assignedSlots: {
    /**
     * A parachain was assigned a permanent parachain slot
     **/
    PermanentSlotAssigned: GenericPalletEvent<
      Rv,
      'AssignedSlots',
      'PermanentSlotAssigned',
      PolkadotParachainPrimitivesPrimitivesId
    >;

    /**
     * A parachain was assigned a temporary parachain slot
     **/
    TemporarySlotAssigned: GenericPalletEvent<
      Rv,
      'AssignedSlots',
      'TemporarySlotAssigned',
      PolkadotParachainPrimitivesPrimitivesId
    >;

    /**
     * The maximum number of permanent slots has been changed
     **/
    MaxPermanentSlotsChanged: GenericPalletEvent<Rv, 'AssignedSlots', 'MaxPermanentSlotsChanged', { slots: number }>;

    /**
     * The maximum number of temporary slots has been changed
     **/
    MaxTemporarySlotsChanged: GenericPalletEvent<Rv, 'AssignedSlots', 'MaxTemporarySlotsChanged', { slots: number }>;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Coretime`'s events
   **/
  coretime: {
    /**
     * The broker chain has asked for revenue information for a specific block.
     **/
    RevenueInfoRequested: GenericPalletEvent<Rv, 'Coretime', 'RevenueInfoRequested', { when: number }>;

    /**
     * A core has received a new assignment from the broker chain.
     **/
    CoreAssigned: GenericPalletEvent<Rv, 'Coretime', 'CoreAssigned', { core: PolkadotPrimitivesV8CoreIndex }>;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `MultiBlockMigrations`'s events
   **/
  multiBlockMigrations: {
    /**
     * A Runtime upgrade started.
     *
     * Its end is indicated by `UpgradeCompleted` or `UpgradeFailed`.
     **/
    UpgradeStarted: GenericPalletEvent<
      Rv,
      'MultiBlockMigrations',
      'UpgradeStarted',
      {
        /**
         * The number of migrations that this upgrade contains.
         *
         * This can be used to design a progress indicator in combination with counting the
         * `MigrationCompleted` and `MigrationSkipped` events.
         **/
        migrations: number;
      }
    >;

    /**
     * The current runtime upgrade completed.
     *
     * This implies that all of its migrations completed successfully as well.
     **/
    UpgradeCompleted: GenericPalletEvent<Rv, 'MultiBlockMigrations', 'UpgradeCompleted', null>;

    /**
     * Runtime upgrade failed.
     *
     * This is very bad and will require governance intervention.
     **/
    UpgradeFailed: GenericPalletEvent<Rv, 'MultiBlockMigrations', 'UpgradeFailed', null>;

    /**
     * A migration was skipped since it was already executed in the past.
     **/
    MigrationSkipped: GenericPalletEvent<
      Rv,
      'MultiBlockMigrations',
      'MigrationSkipped',
      {
        /**
         * The index of the skipped migration within the [`Config::Migrations`] list.
         **/
        index: number;
      }
    >;

    /**
     * A migration progressed.
     **/
    MigrationAdvanced: GenericPalletEvent<
      Rv,
      'MultiBlockMigrations',
      'MigrationAdvanced',
      {
        /**
         * The index of the migration within the [`Config::Migrations`] list.
         **/
        index: number;

        /**
         * The number of blocks that this migration took so far.
         **/
        took: number;
      }
    >;

    /**
     * A Migration completed.
     **/
    MigrationCompleted: GenericPalletEvent<
      Rv,
      'MultiBlockMigrations',
      'MigrationCompleted',
      {
        /**
         * The index of the migration within the [`Config::Migrations`] list.
         **/
        index: number;

        /**
         * The number of blocks that this migration took so far.
         **/
        took: number;
      }
    >;

    /**
     * A Migration failed.
     *
     * This implies that the whole upgrade failed and governance intervention is required.
     **/
    MigrationFailed: GenericPalletEvent<
      Rv,
      'MultiBlockMigrations',
      'MigrationFailed',
      {
        /**
         * The index of the migration within the [`Config::Migrations`] list.
         **/
        index: number;

        /**
         * The number of blocks that this migration took so far.
         **/
        took: number;
      }
    >;

    /**
     * The set of historical migrations has been cleared.
     **/
    HistoricCleared: GenericPalletEvent<
      Rv,
      'MultiBlockMigrations',
      'HistoricCleared',
      {
        /**
         * Should be passed to `clear_historic` in a successive call.
         **/
        nextCursor?: Bytes | undefined;
      }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `XcmPallet`'s events
   **/
  xcmPallet: {
    /**
     * Execution of an XCM message was attempted.
     **/
    Attempted: GenericPalletEvent<Rv, 'XcmPallet', 'Attempted', { outcome: StagingXcmV5TraitsOutcome }>;

    /**
     * A XCM message was sent.
     **/
    Sent: GenericPalletEvent<
      Rv,
      'XcmPallet',
      'Sent',
      {
        origin: StagingXcmV5Location;
        destination: StagingXcmV5Location;
        message: StagingXcmV5Xcm;
        messageId: FixedBytes<32>;
      }
    >;

    /**
     * Query response received which does not match a registered query. This may be because a
     * matching query was never registered, it may be because it is a duplicate response, or
     * because the query timed out.
     **/
    UnexpectedResponse: GenericPalletEvent<
      Rv,
      'XcmPallet',
      'UnexpectedResponse',
      { origin: StagingXcmV5Location; queryId: bigint }
    >;

    /**
     * Query response has been received and is ready for taking with `take_response`. There is
     * no registered notification call.
     **/
    ResponseReady: GenericPalletEvent<
      Rv,
      'XcmPallet',
      'ResponseReady',
      { queryId: bigint; response: StagingXcmV5Response }
    >;

    /**
     * Query response has been received and query is removed. The registered notification has
     * been dispatched and executed successfully.
     **/
    Notified: GenericPalletEvent<
      Rv,
      'XcmPallet',
      'Notified',
      { queryId: bigint; palletIndex: number; callIndex: number }
    >;

    /**
     * Query response has been received and query is removed. The registered notification
     * could not be dispatched because the dispatch weight is greater than the maximum weight
     * originally budgeted by this runtime for the query result.
     **/
    NotifyOverweight: GenericPalletEvent<
      Rv,
      'XcmPallet',
      'NotifyOverweight',
      {
        queryId: bigint;
        palletIndex: number;
        callIndex: number;
        actualWeight: SpWeightsWeightV2Weight;
        maxBudgetedWeight: SpWeightsWeightV2Weight;
      }
    >;

    /**
     * Query response has been received and query is removed. There was a general error with
     * dispatching the notification call.
     **/
    NotifyDispatchError: GenericPalletEvent<
      Rv,
      'XcmPallet',
      'NotifyDispatchError',
      { queryId: bigint; palletIndex: number; callIndex: number }
    >;

    /**
     * Query response has been received and query is removed. The dispatch was unable to be
     * decoded into a `Call`; this might be due to dispatch function having a signature which
     * is not `(origin, QueryId, Response)`.
     **/
    NotifyDecodeFailed: GenericPalletEvent<
      Rv,
      'XcmPallet',
      'NotifyDecodeFailed',
      { queryId: bigint; palletIndex: number; callIndex: number }
    >;

    /**
     * Expected query response has been received but the origin location of the response does
     * not match that expected. The query remains registered for a later, valid, response to
     * be received and acted upon.
     **/
    InvalidResponder: GenericPalletEvent<
      Rv,
      'XcmPallet',
      'InvalidResponder',
      { origin: StagingXcmV5Location; queryId: bigint; expectedLocation?: StagingXcmV5Location | undefined }
    >;

    /**
     * Expected query response has been received but the expected origin location placed in
     * storage by this runtime previously cannot be decoded. The query remains registered.
     *
     * This is unexpected (since a location placed in storage in a previously executing
     * runtime should be readable prior to query timeout) and dangerous since the possibly
     * valid response will be dropped. Manual governance intervention is probably going to be
     * needed.
     **/
    InvalidResponderVersion: GenericPalletEvent<
      Rv,
      'XcmPallet',
      'InvalidResponderVersion',
      { origin: StagingXcmV5Location; queryId: bigint }
    >;

    /**
     * Received query response has been read and removed.
     **/
    ResponseTaken: GenericPalletEvent<Rv, 'XcmPallet', 'ResponseTaken', { queryId: bigint }>;

    /**
     * Some assets have been placed in an asset trap.
     **/
    AssetsTrapped: GenericPalletEvent<
      Rv,
      'XcmPallet',
      'AssetsTrapped',
      { hash: H256; origin: StagingXcmV5Location; assets: XcmVersionedAssets }
    >;

    /**
     * An XCM version change notification message has been attempted to be sent.
     *
     * The cost of sending it (borne by the chain) is included.
     **/
    VersionChangeNotified: GenericPalletEvent<
      Rv,
      'XcmPallet',
      'VersionChangeNotified',
      { destination: StagingXcmV5Location; result: number; cost: StagingXcmV5AssetAssets; messageId: FixedBytes<32> }
    >;

    /**
     * The supported version of a location has been changed. This might be through an
     * automatic notification or a manual intervention.
     **/
    SupportedVersionChanged: GenericPalletEvent<
      Rv,
      'XcmPallet',
      'SupportedVersionChanged',
      { location: StagingXcmV5Location; version: number }
    >;

    /**
     * A given location which had a version change subscription was dropped owing to an error
     * sending the notification to it.
     **/
    NotifyTargetSendFail: GenericPalletEvent<
      Rv,
      'XcmPallet',
      'NotifyTargetSendFail',
      { location: StagingXcmV5Location; queryId: bigint; error: XcmV5TraitsError }
    >;

    /**
     * A given location which had a version change subscription was dropped owing to an error
     * migrating the location to our new XCM format.
     **/
    NotifyTargetMigrationFail: GenericPalletEvent<
      Rv,
      'XcmPallet',
      'NotifyTargetMigrationFail',
      { location: XcmVersionedLocation; queryId: bigint }
    >;

    /**
     * Expected query response has been received but the expected querier location placed in
     * storage by this runtime previously cannot be decoded. The query remains registered.
     *
     * This is unexpected (since a location placed in storage in a previously executing
     * runtime should be readable prior to query timeout) and dangerous since the possibly
     * valid response will be dropped. Manual governance intervention is probably going to be
     * needed.
     **/
    InvalidQuerierVersion: GenericPalletEvent<
      Rv,
      'XcmPallet',
      'InvalidQuerierVersion',
      { origin: StagingXcmV5Location; queryId: bigint }
    >;

    /**
     * Expected query response has been received but the querier location of the response does
     * not match the expected. The query remains registered for a later, valid, response to
     * be received and acted upon.
     **/
    InvalidQuerier: GenericPalletEvent<
      Rv,
      'XcmPallet',
      'InvalidQuerier',
      {
        origin: StagingXcmV5Location;
        queryId: bigint;
        expectedQuerier: StagingXcmV5Location;
        maybeActualQuerier?: StagingXcmV5Location | undefined;
      }
    >;

    /**
     * A remote has requested XCM version change notification from us and we have honored it.
     * A version information message is sent to them and its cost is included.
     **/
    VersionNotifyStarted: GenericPalletEvent<
      Rv,
      'XcmPallet',
      'VersionNotifyStarted',
      { destination: StagingXcmV5Location; cost: StagingXcmV5AssetAssets; messageId: FixedBytes<32> }
    >;

    /**
     * We have requested that a remote chain send us XCM version change notifications.
     **/
    VersionNotifyRequested: GenericPalletEvent<
      Rv,
      'XcmPallet',
      'VersionNotifyRequested',
      { destination: StagingXcmV5Location; cost: StagingXcmV5AssetAssets; messageId: FixedBytes<32> }
    >;

    /**
     * We have requested that a remote chain stops sending us XCM version change
     * notifications.
     **/
    VersionNotifyUnrequested: GenericPalletEvent<
      Rv,
      'XcmPallet',
      'VersionNotifyUnrequested',
      { destination: StagingXcmV5Location; cost: StagingXcmV5AssetAssets; messageId: FixedBytes<32> }
    >;

    /**
     * Fees were paid from a location for an operation (often for using `SendXcm`).
     **/
    FeesPaid: GenericPalletEvent<
      Rv,
      'XcmPallet',
      'FeesPaid',
      { paying: StagingXcmV5Location; fees: StagingXcmV5AssetAssets }
    >;

    /**
     * Some assets have been claimed from an asset trap
     **/
    AssetsClaimed: GenericPalletEvent<
      Rv,
      'XcmPallet',
      'AssetsClaimed',
      { hash: H256; origin: StagingXcmV5Location; assets: XcmVersionedAssets }
    >;

    /**
     * A XCM version migration finished.
     **/
    VersionMigrationFinished: GenericPalletEvent<Rv, 'XcmPallet', 'VersionMigrationFinished', { version: number }>;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `MessageQueue`'s events
   **/
  messageQueue: {
    /**
     * Message discarded due to an error in the `MessageProcessor` (usually a format error).
     **/
    ProcessingFailed: GenericPalletEvent<
      Rv,
      'MessageQueue',
      'ProcessingFailed',
      {
        /**
         * The `blake2_256` hash of the message.
         **/
        id: H256;

        /**
         * The queue of the message.
         **/
        origin: PolkadotRuntimeParachainsInclusionAggregateMessageOrigin;

        /**
         * The error that occurred.
         *
         * This error is pretty opaque. More fine-grained errors need to be emitted as events
         * by the `MessageProcessor`.
         **/
        error: FrameSupportMessagesProcessMessageError;
      }
    >;

    /**
     * Message is processed.
     **/
    Processed: GenericPalletEvent<
      Rv,
      'MessageQueue',
      'Processed',
      {
        /**
         * The `blake2_256` hash of the message.
         **/
        id: H256;

        /**
         * The queue of the message.
         **/
        origin: PolkadotRuntimeParachainsInclusionAggregateMessageOrigin;

        /**
         * How much weight was used to process the message.
         **/
        weightUsed: SpWeightsWeightV2Weight;

        /**
         * Whether the message was processed.
         *
         * Note that this does not mean that the underlying `MessageProcessor` was internally
         * successful. It *solely* means that the MQ pallet will treat this as a success
         * condition and discard the message. Any internal error needs to be emitted as events
         * by the `MessageProcessor`.
         **/
        success: boolean;
      }
    >;

    /**
     * Message placed in overweight queue.
     **/
    OverweightEnqueued: GenericPalletEvent<
      Rv,
      'MessageQueue',
      'OverweightEnqueued',
      {
        /**
         * The `blake2_256` hash of the message.
         **/
        id: FixedBytes<32>;

        /**
         * The queue of the message.
         **/
        origin: PolkadotRuntimeParachainsInclusionAggregateMessageOrigin;

        /**
         * The page of the message.
         **/
        pageIndex: number;

        /**
         * The index of the message within the page.
         **/
        messageIndex: number;
      }
    >;

    /**
     * This page was reaped.
     **/
    PageReaped: GenericPalletEvent<
      Rv,
      'MessageQueue',
      'PageReaped',
      {
        /**
         * The queue of the page.
         **/
        origin: PolkadotRuntimeParachainsInclusionAggregateMessageOrigin;

        /**
         * The index of the page.
         **/
        index: number;
      }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `AssetRate`'s events
   **/
  assetRate: {
    AssetRateCreated: GenericPalletEvent<
      Rv,
      'AssetRate',
      'AssetRateCreated',
      { assetKind: PolkadotRuntimeCommonImplsVersionedLocatableAsset; rate: FixedU128 }
    >;
    AssetRateRemoved: GenericPalletEvent<
      Rv,
      'AssetRate',
      'AssetRateRemoved',
      { assetKind: PolkadotRuntimeCommonImplsVersionedLocatableAsset }
    >;
    AssetRateUpdated: GenericPalletEvent<
      Rv,
      'AssetRate',
      'AssetRateUpdated',
      { assetKind: PolkadotRuntimeCommonImplsVersionedLocatableAsset; old: FixedU128; new: FixedU128 }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `RootTesting`'s events
   **/
  rootTesting: {
    /**
     * Event dispatched when the trigger_defensive extrinsic is called.
     **/
    DefensiveTestCall: GenericPalletEvent<Rv, 'RootTesting', 'DefensiveTestCall', undefined>;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `IdentityMigrator`'s events
   **/
  identityMigrator: {
    /**
     * The identity and all sub accounts were reaped for `who`.
     **/
    IdentityReaped: GenericPalletEvent<Rv, 'IdentityMigrator', 'IdentityReaped', { who: AccountId32 }>;

    /**
     * The deposits held for `who` were updated. `identity` is the new deposit held for
     * identity info, and `subs` is the new deposit held for the sub-accounts.
     **/
    DepositUpdated: GenericPalletEvent<
      Rv,
      'IdentityMigrator',
      'DepositUpdated',
      { who: AccountId32; identity: bigint; subs: bigint }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
}
