// Generated by dedot cli

import type { GenericChainViewFunctions, GenericViewFunction, RpcVersion } from 'dedot/types';
import type { AccountId32Like } from 'dedot/codecs';
import type { AssetHubPaseoRuntimeRuntimeCallLike, AssetHubPaseoRuntimeProxyType } from './types.js';

export interface ChainViewFunctions<Rv extends RpcVersion> extends GenericChainViewFunctions<Rv> {
  /**
   * Pallet `Proxy`'s view functions
   **/
  proxy: {
    /**
     * Check if a `RuntimeCall` is allowed for a given `ProxyType`.
     *
     * @param {AssetHubPaseoRuntimeRuntimeCallLike} call
     * @param {AssetHubPaseoRuntimeProxyType} proxyType
     **/
    checkPermissions: GenericViewFunction<
      Rv,
      (call: AssetHubPaseoRuntimeRuntimeCallLike, proxyType: AssetHubPaseoRuntimeProxyType) => Promise<boolean>
    >;

    /**
     * Check if one `ProxyType` is a subset of another `ProxyType`.
     *
     * @param {AssetHubPaseoRuntimeProxyType} toCheck
     * @param {AssetHubPaseoRuntimeProxyType} against
     **/
    isSuperset: GenericViewFunction<
      Rv,
      (toCheck: AssetHubPaseoRuntimeProxyType, against: AssetHubPaseoRuntimeProxyType) => Promise<boolean>
    >;

    /**
     * Generic pallet view function
     **/
    [name: string]: GenericViewFunction<Rv>;
  };
  /**
   * Pallet `VoterList`'s view functions
   **/
  voterList: {
    /**
     * Get the current `score` of a given account.
     *
     * Returns `(current, real_score)`, the former being the current score that this pallet is
     * aware of, which may or may not be up to date, and the latter being the real score, as
     * provided by
     *
     * If the two differ, it means this node is eligible for [`Call::rebag`].
     *
     * @param {AccountId32Like} who
     **/
    scores: GenericViewFunction<Rv, (who: AccountId32Like) => Promise<[bigint | undefined, bigint | undefined]>>;

    /**
     * Generic pallet view function
     **/
    [name: string]: GenericViewFunction<Rv>;
  };
  /**
   * Pallet `MultiBlockElectionSigned`'s view functions
   **/
  multiBlockElectionSigned: {
    /**
     * Get the deposit amount that will be held for a solution of `pages`.
     *
     * This allows an offchain application to know what [`Config::DepositPerPage`] and
     * [`Config::DepositBase`] are doing under the hood. It also takes into account if `who` is
     * [`Invulnerables`] or not.
     *
     * @param {AccountId32Like} who
     * @param {number} pages
     **/
    depositFor: GenericViewFunction<Rv, (who: AccountId32Like, pages: number) => Promise<bigint>>;

    /**
     * Generic pallet view function
     **/
    [name: string]: GenericViewFunction<Rv>;
  };
}
