// Generated by dedot cli

import type { GenericChainErrors, GenericPalletError, RpcVersion } from 'dedot/types';

export interface ChainErrors<Rv extends RpcVersion> extends GenericChainErrors<Rv> {
  /**
   * Pallet `System`'s errors
   **/
  system: {
    /**
     * The name of specification does not match between the current runtime
     * and the new runtime.
     **/
    InvalidSpecName: GenericPalletError<Rv>;

    /**
     * The specification version is not allowed to decrease between the current runtime
     * and the new runtime.
     **/
    SpecVersionNeedsToIncrease: GenericPalletError<Rv>;

    /**
     * Failed to extract the runtime version from the new runtime.
     *
     * Either calling `Core_version` or decoding `RuntimeVersion` failed.
     **/
    FailedToExtractRuntimeVersion: GenericPalletError<Rv>;

    /**
     * Suicide called when the account has non-default composite data.
     **/
    NonDefaultComposite: GenericPalletError<Rv>;

    /**
     * There is a non-zero reference count preventing the account from being purged.
     **/
    NonZeroRefCount: GenericPalletError<Rv>;

    /**
     * The origin filter prevent the call to be dispatched.
     **/
    CallFiltered: GenericPalletError<Rv>;

    /**
     * A multi-block migration is ongoing and prevents the current code from being replaced.
     **/
    MultiBlockMigrationsOngoing: GenericPalletError<Rv>;

    /**
     * No upgrade authorized.
     **/
    NothingAuthorized: GenericPalletError<Rv>;

    /**
     * The submitted code is not authorized.
     **/
    Unauthorized: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `Scheduler`'s errors
   **/
  scheduler: {
    /**
     * Failed to schedule a call
     **/
    FailedToSchedule: GenericPalletError<Rv>;

    /**
     * Cannot find the scheduled call.
     **/
    NotFound: GenericPalletError<Rv>;

    /**
     * Given target block number is in the past.
     **/
    TargetBlockNumberInPast: GenericPalletError<Rv>;

    /**
     * Reschedule failed because it does not change scheduled time.
     **/
    RescheduleNoChange: GenericPalletError<Rv>;

    /**
     * Attempt to use a non-named function on a named task.
     **/
    Named: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `Preimage`'s errors
   **/
  preimage: {
    /**
     * Preimage is too large to store on-chain.
     **/
    TooBig: GenericPalletError<Rv>;

    /**
     * Preimage has already been noted on-chain.
     **/
    AlreadyNoted: GenericPalletError<Rv>;

    /**
     * The user is not authorized to perform this action.
     **/
    NotAuthorized: GenericPalletError<Rv>;

    /**
     * The preimage cannot be removed since it has not yet been noted.
     **/
    NotNoted: GenericPalletError<Rv>;

    /**
     * A preimage may not be removed when there are outstanding requests.
     **/
    Requested: GenericPalletError<Rv>;

    /**
     * The preimage request cannot be removed since no outstanding requests exist.
     **/
    NotRequested: GenericPalletError<Rv>;

    /**
     * More than `MAX_HASH_UPGRADE_BULK_COUNT` hashes were requested to be upgraded at once.
     **/
    TooMany: GenericPalletError<Rv>;

    /**
     * Too few hashes were requested to be upgraded (i.e. zero).
     **/
    TooFew: GenericPalletError<Rv>;

    /**
     * No ticket with a cost was returned by [`Config::Consideration`] to store the preimage.
     **/
    NoCost: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `Babe`'s errors
   **/
  babe: {
    /**
     * An equivocation proof provided as part of an equivocation report is invalid.
     **/
    InvalidEquivocationProof: GenericPalletError<Rv>;

    /**
     * A key ownership proof provided as part of an equivocation report is invalid.
     **/
    InvalidKeyOwnershipProof: GenericPalletError<Rv>;

    /**
     * A given equivocation report is valid but already previously reported.
     **/
    DuplicateOffenceReport: GenericPalletError<Rv>;

    /**
     * Submitted configuration is invalid.
     **/
    InvalidConfiguration: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `Indices`'s errors
   **/
  indices: {
    /**
     * The index was not already assigned.
     **/
    NotAssigned: GenericPalletError<Rv>;

    /**
     * The index is assigned to another account.
     **/
    NotOwner: GenericPalletError<Rv>;

    /**
     * The index was not available.
     **/
    InUse: GenericPalletError<Rv>;

    /**
     * The source and destination accounts are identical.
     **/
    NotTransfer: GenericPalletError<Rv>;

    /**
     * The index is permanent and may not be freed/changed.
     **/
    Permanent: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `Balances`'s errors
   **/
  balances: {
    /**
     * Vesting balance too high to send value.
     **/
    VestingBalance: GenericPalletError<Rv>;

    /**
     * Account liquidity restrictions prevent withdrawal.
     **/
    LiquidityRestrictions: GenericPalletError<Rv>;

    /**
     * Balance too low to send value.
     **/
    InsufficientBalance: GenericPalletError<Rv>;

    /**
     * Value too low to create account due to existential deposit.
     **/
    ExistentialDeposit: GenericPalletError<Rv>;

    /**
     * Transfer/payment would kill account.
     **/
    Expendability: GenericPalletError<Rv>;

    /**
     * A vesting schedule already exists for this account.
     **/
    ExistingVestingSchedule: GenericPalletError<Rv>;

    /**
     * Beneficiary account must pre-exist.
     **/
    DeadAccount: GenericPalletError<Rv>;

    /**
     * Number of named reserves exceed `MaxReserves`.
     **/
    TooManyReserves: GenericPalletError<Rv>;

    /**
     * Number of holds exceed `VariantCountOf<T::RuntimeHoldReason>`.
     **/
    TooManyHolds: GenericPalletError<Rv>;

    /**
     * Number of freezes exceed `MaxFreezes`.
     **/
    TooManyFreezes: GenericPalletError<Rv>;

    /**
     * The issuance cannot be modified since it is already deactivated.
     **/
    IssuanceDeactivated: GenericPalletError<Rv>;

    /**
     * The delta cannot be zero.
     **/
    DeltaZero: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `Staking`'s errors
   **/
  staking: {
    /**
     * Not a controller account.
     **/
    NotController: GenericPalletError<Rv>;

    /**
     * Not a stash account.
     **/
    NotStash: GenericPalletError<Rv>;

    /**
     * Stash is already bonded.
     **/
    AlreadyBonded: GenericPalletError<Rv>;

    /**
     * Controller is already paired.
     **/
    AlreadyPaired: GenericPalletError<Rv>;

    /**
     * Targets cannot be empty.
     **/
    EmptyTargets: GenericPalletError<Rv>;

    /**
     * Duplicate index.
     **/
    DuplicateIndex: GenericPalletError<Rv>;

    /**
     * Slash record index out of bounds.
     **/
    InvalidSlashIndex: GenericPalletError<Rv>;

    /**
     * Cannot have a validator or nominator role, with value less than the minimum defined by
     * governance (see `MinValidatorBond` and `MinNominatorBond`). If unbonding is the
     * intention, `chill` first to remove one's role as validator/nominator.
     **/
    InsufficientBond: GenericPalletError<Rv>;

    /**
     * Can not schedule more unlock chunks.
     **/
    NoMoreChunks: GenericPalletError<Rv>;

    /**
     * Can not rebond without unlocking chunks.
     **/
    NoUnlockChunk: GenericPalletError<Rv>;

    /**
     * Attempting to target a stash that still has funds.
     **/
    FundedTarget: GenericPalletError<Rv>;

    /**
     * Invalid era to reward.
     **/
    InvalidEraToReward: GenericPalletError<Rv>;

    /**
     * Invalid number of nominations.
     **/
    InvalidNumberOfNominations: GenericPalletError<Rv>;

    /**
     * Items are not sorted and unique.
     **/
    NotSortedAndUnique: GenericPalletError<Rv>;

    /**
     * Rewards for this era have already been claimed for this validator.
     **/
    AlreadyClaimed: GenericPalletError<Rv>;

    /**
     * No nominators exist on this page.
     **/
    InvalidPage: GenericPalletError<Rv>;

    /**
     * Incorrect previous history depth input provided.
     **/
    IncorrectHistoryDepth: GenericPalletError<Rv>;

    /**
     * Incorrect number of slashing spans provided.
     **/
    IncorrectSlashingSpans: GenericPalletError<Rv>;

    /**
     * Internal state has become somehow corrupted and the operation cannot continue.
     **/
    BadState: GenericPalletError<Rv>;

    /**
     * Too many nomination targets supplied.
     **/
    TooManyTargets: GenericPalletError<Rv>;

    /**
     * A nomination target was supplied that was blocked or otherwise not a validator.
     **/
    BadTarget: GenericPalletError<Rv>;

    /**
     * The user has enough bond and thus cannot be chilled forcefully by an external person.
     **/
    CannotChillOther: GenericPalletError<Rv>;

    /**
     * There are too many nominators in the system. Governance needs to adjust the staking
     * settings to keep things safe for the runtime.
     **/
    TooManyNominators: GenericPalletError<Rv>;

    /**
     * There are too many validator candidates in the system. Governance needs to adjust the
     * staking settings to keep things safe for the runtime.
     **/
    TooManyValidators: GenericPalletError<Rv>;

    /**
     * Commission is too low. Must be at least `MinCommission`.
     **/
    CommissionTooLow: GenericPalletError<Rv>;

    /**
     * Some bound is not met.
     **/
    BoundNotMet: GenericPalletError<Rv>;

    /**
     * Used when attempting to use deprecated controller account logic.
     **/
    ControllerDeprecated: GenericPalletError<Rv>;

    /**
     * Cannot reset a ledger.
     **/
    CannotRestoreLedger: GenericPalletError<Rv>;

    /**
     * Provided reward destination is not allowed.
     **/
    RewardDestinationRestricted: GenericPalletError<Rv>;

    /**
     * Not enough funds available to withdraw.
     **/
    NotEnoughFunds: GenericPalletError<Rv>;

    /**
     * Operation not allowed for virtual stakers.
     **/
    VirtualStakerNotAllowed: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `Session`'s errors
   **/
  session: {
    /**
     * Invalid ownership proof.
     **/
    InvalidProof: GenericPalletError<Rv>;

    /**
     * No associated validator ID for account.
     **/
    NoAssociatedValidatorId: GenericPalletError<Rv>;

    /**
     * Registered duplicate key.
     **/
    DuplicatedKey: GenericPalletError<Rv>;

    /**
     * No keys are associated with this account.
     **/
    NoKeys: GenericPalletError<Rv>;

    /**
     * Key setting account is not live, so it's impossible to associate keys.
     **/
    NoAccount: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `Grandpa`'s errors
   **/
  grandpa: {
    /**
     * Attempt to signal GRANDPA pause when the authority set isn't live
     * (either paused or already pending pause).
     **/
    PauseFailed: GenericPalletError<Rv>;

    /**
     * Attempt to signal GRANDPA resume when the authority set isn't paused
     * (either live or already pending resume).
     **/
    ResumeFailed: GenericPalletError<Rv>;

    /**
     * Attempt to signal GRANDPA change with one already pending.
     **/
    ChangePending: GenericPalletError<Rv>;

    /**
     * Cannot signal forced change so soon after last.
     **/
    TooSoon: GenericPalletError<Rv>;

    /**
     * A key ownership proof provided as part of an equivocation report is invalid.
     **/
    InvalidKeyOwnershipProof: GenericPalletError<Rv>;

    /**
     * An equivocation proof provided as part of an equivocation report is invalid.
     **/
    InvalidEquivocationProof: GenericPalletError<Rv>;

    /**
     * A given equivocation report is valid but already previously reported.
     **/
    DuplicateOffenceReport: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `Treasury`'s errors
   **/
  treasury: {
    /**
     * No proposal, bounty or spend at that index.
     **/
    InvalidIndex: GenericPalletError<Rv>;

    /**
     * Too many approvals in the queue.
     **/
    TooManyApprovals: GenericPalletError<Rv>;

    /**
     * The spend origin is valid but the amount it is allowed to spend is lower than the
     * amount to be spent.
     **/
    InsufficientPermission: GenericPalletError<Rv>;

    /**
     * Proposal has not been approved.
     **/
    ProposalNotApproved: GenericPalletError<Rv>;

    /**
     * The balance of the asset kind is not convertible to the balance of the native asset.
     **/
    FailedToConvertBalance: GenericPalletError<Rv>;

    /**
     * The spend has expired and cannot be claimed.
     **/
    SpendExpired: GenericPalletError<Rv>;

    /**
     * The spend is not yet eligible for payout.
     **/
    EarlyPayout: GenericPalletError<Rv>;

    /**
     * The payment has already been attempted.
     **/
    AlreadyAttempted: GenericPalletError<Rv>;

    /**
     * There was some issue with the mechanism of payment.
     **/
    PayoutError: GenericPalletError<Rv>;

    /**
     * The payout was not yet attempted/claimed.
     **/
    NotAttempted: GenericPalletError<Rv>;

    /**
     * The payment has neither failed nor succeeded yet.
     **/
    Inconclusive: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `ConvictionVoting`'s errors
   **/
  convictionVoting: {
    /**
     * Poll is not ongoing.
     **/
    NotOngoing: GenericPalletError<Rv>;

    /**
     * The given account did not vote on the poll.
     **/
    NotVoter: GenericPalletError<Rv>;

    /**
     * The actor has no permission to conduct the action.
     **/
    NoPermission: GenericPalletError<Rv>;

    /**
     * The actor has no permission to conduct the action right now but will do in the future.
     **/
    NoPermissionYet: GenericPalletError<Rv>;

    /**
     * The account is already delegating.
     **/
    AlreadyDelegating: GenericPalletError<Rv>;

    /**
     * The account currently has votes attached to it and the operation cannot succeed until
     * these are removed through `remove_vote`.
     **/
    AlreadyVoting: GenericPalletError<Rv>;

    /**
     * Too high a balance was provided that the account cannot afford.
     **/
    InsufficientFunds: GenericPalletError<Rv>;

    /**
     * The account is not currently delegating.
     **/
    NotDelegating: GenericPalletError<Rv>;

    /**
     * Delegation to oneself makes no sense.
     **/
    Nonsense: GenericPalletError<Rv>;

    /**
     * Maximum number of votes reached.
     **/
    MaxVotesReached: GenericPalletError<Rv>;

    /**
     * The class must be supplied since it is not easily determinable from the state.
     **/
    ClassNeeded: GenericPalletError<Rv>;

    /**
     * The class ID supplied is invalid.
     **/
    BadClass: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `Referenda`'s errors
   **/
  referenda: {
    /**
     * Referendum is not ongoing.
     **/
    NotOngoing: GenericPalletError<Rv>;

    /**
     * Referendum's decision deposit is already paid.
     **/
    HasDeposit: GenericPalletError<Rv>;

    /**
     * The track identifier given was invalid.
     **/
    BadTrack: GenericPalletError<Rv>;

    /**
     * There are already a full complement of referenda in progress for this track.
     **/
    Full: GenericPalletError<Rv>;

    /**
     * The queue of the track is empty.
     **/
    QueueEmpty: GenericPalletError<Rv>;

    /**
     * The referendum index provided is invalid in this context.
     **/
    BadReferendum: GenericPalletError<Rv>;

    /**
     * There was nothing to do in the advancement.
     **/
    NothingToDo: GenericPalletError<Rv>;

    /**
     * No track exists for the proposal origin.
     **/
    NoTrack: GenericPalletError<Rv>;

    /**
     * Any deposit cannot be refunded until after the decision is over.
     **/
    Unfinished: GenericPalletError<Rv>;

    /**
     * The deposit refunder is not the depositor.
     **/
    NoPermission: GenericPalletError<Rv>;

    /**
     * The deposit cannot be refunded since none was made.
     **/
    NoDeposit: GenericPalletError<Rv>;

    /**
     * The referendum status is invalid for this operation.
     **/
    BadStatus: GenericPalletError<Rv>;

    /**
     * The preimage does not exist.
     **/
    PreimageNotExist: GenericPalletError<Rv>;

    /**
     * The preimage is stored with a different length than the one provided.
     **/
    PreimageStoredWithDifferentLength: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `Whitelist`'s errors
   **/
  whitelist: {
    /**
     * The preimage of the call hash could not be loaded.
     **/
    UnavailablePreImage: GenericPalletError<Rv>;

    /**
     * The call could not be decoded.
     **/
    UndecodableCall: GenericPalletError<Rv>;

    /**
     * The weight of the decoded call was higher than the witness.
     **/
    InvalidCallWeightWitness: GenericPalletError<Rv>;

    /**
     * The call was not whitelisted.
     **/
    CallIsNotWhitelisted: GenericPalletError<Rv>;

    /**
     * The call was already whitelisted; No-Op.
     **/
    CallAlreadyWhitelisted: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `Claims`'s errors
   **/
  claims: {
    /**
     * Invalid Ethereum signature.
     **/
    InvalidEthereumSignature: GenericPalletError<Rv>;

    /**
     * Ethereum address has no claim.
     **/
    SignerHasNoClaim: GenericPalletError<Rv>;

    /**
     * Account ID sending transaction has no claim.
     **/
    SenderHasNoClaim: GenericPalletError<Rv>;

    /**
     * There's not enough in the pot to pay out some unvested amount. Generally implies a
     * logic error.
     **/
    PotUnderflow: GenericPalletError<Rv>;

    /**
     * A needed statement was not included.
     **/
    InvalidStatement: GenericPalletError<Rv>;

    /**
     * The account already has a vested balance.
     **/
    VestedBalanceExists: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `Vesting`'s errors
   **/
  vesting: {
    /**
     * The account given is not vesting.
     **/
    NotVesting: GenericPalletError<Rv>;

    /**
     * The account already has `MaxVestingSchedules` count of schedules and thus
     * cannot add another one. Consider merging existing schedules in order to add another.
     **/
    AtMaxVestingSchedules: GenericPalletError<Rv>;

    /**
     * Amount being transferred is too low to create a vesting schedule.
     **/
    AmountLow: GenericPalletError<Rv>;

    /**
     * An index was out of bounds of the vesting schedules.
     **/
    ScheduleIndexOutOfBounds: GenericPalletError<Rv>;

    /**
     * Failed to create a new schedule because some parameter was invalid.
     **/
    InvalidScheduleParams: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `Utility`'s errors
   **/
  utility: {
    /**
     * Too many calls batched.
     **/
    TooManyCalls: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `Proxy`'s errors
   **/
  proxy: {
    /**
     * There are too many proxies registered or too many announcements pending.
     **/
    TooMany: GenericPalletError<Rv>;

    /**
     * Proxy registration not found.
     **/
    NotFound: GenericPalletError<Rv>;

    /**
     * Sender is not a proxy of the account to be proxied.
     **/
    NotProxy: GenericPalletError<Rv>;

    /**
     * A call which is incompatible with the proxy type's filter was attempted.
     **/
    Unproxyable: GenericPalletError<Rv>;

    /**
     * Account is already a proxy.
     **/
    Duplicate: GenericPalletError<Rv>;

    /**
     * Call may not be made by proxy because it may escalate its privileges.
     **/
    NoPermission: GenericPalletError<Rv>;

    /**
     * Announcement, if made at all, was made too recently.
     **/
    Unannounced: GenericPalletError<Rv>;

    /**
     * Cannot add self as proxy.
     **/
    NoSelfProxy: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `Multisig`'s errors
   **/
  multisig: {
    /**
     * Threshold must be 2 or greater.
     **/
    MinimumThreshold: GenericPalletError<Rv>;

    /**
     * Call is already approved by this signatory.
     **/
    AlreadyApproved: GenericPalletError<Rv>;

    /**
     * Call doesn't need any (more) approvals.
     **/
    NoApprovalsNeeded: GenericPalletError<Rv>;

    /**
     * There are too few signatories in the list.
     **/
    TooFewSignatories: GenericPalletError<Rv>;

    /**
     * There are too many signatories in the list.
     **/
    TooManySignatories: GenericPalletError<Rv>;

    /**
     * The signatories were provided out of order; they should be ordered.
     **/
    SignatoriesOutOfOrder: GenericPalletError<Rv>;

    /**
     * The sender was contained in the other signatories; it shouldn't be.
     **/
    SenderInSignatories: GenericPalletError<Rv>;

    /**
     * Multisig operation not found when attempting to cancel.
     **/
    NotFound: GenericPalletError<Rv>;

    /**
     * Only the account that originally created the multisig is able to cancel it.
     **/
    NotOwner: GenericPalletError<Rv>;

    /**
     * No timepoint was given, yet the multisig operation is already underway.
     **/
    NoTimepoint: GenericPalletError<Rv>;

    /**
     * A different timepoint was given to the multisig operation that is underway.
     **/
    WrongTimepoint: GenericPalletError<Rv>;

    /**
     * A timepoint was given, yet no multisig operation is underway.
     **/
    UnexpectedTimepoint: GenericPalletError<Rv>;

    /**
     * The maximum weight information provided was too low.
     **/
    MaxWeightTooLow: GenericPalletError<Rv>;

    /**
     * The data to be stored is already stored.
     **/
    AlreadyStored: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `Bounties`'s errors
   **/
  bounties: {
    /**
     * Proposer's balance is too low.
     **/
    InsufficientProposersBalance: GenericPalletError<Rv>;

    /**
     * No proposal or bounty at that index.
     **/
    InvalidIndex: GenericPalletError<Rv>;

    /**
     * The reason given is just too big.
     **/
    ReasonTooBig: GenericPalletError<Rv>;

    /**
     * The bounty status is unexpected.
     **/
    UnexpectedStatus: GenericPalletError<Rv>;

    /**
     * Require bounty curator.
     **/
    RequireCurator: GenericPalletError<Rv>;

    /**
     * Invalid bounty value.
     **/
    InvalidValue: GenericPalletError<Rv>;

    /**
     * Invalid bounty fee.
     **/
    InvalidFee: GenericPalletError<Rv>;

    /**
     * A bounty payout is pending.
     * To cancel the bounty, you must unassign and slash the curator.
     **/
    PendingPayout: GenericPalletError<Rv>;

    /**
     * The bounties cannot be claimed/closed because it's still in the countdown period.
     **/
    Premature: GenericPalletError<Rv>;

    /**
     * The bounty cannot be closed because it has active child bounties.
     **/
    HasActiveChildBounty: GenericPalletError<Rv>;

    /**
     * Too many approvals are already queued.
     **/
    TooManyQueued: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `ChildBounties`'s errors
   **/
  childBounties: {
    /**
     * The parent bounty is not in active state.
     **/
    ParentBountyNotActive: GenericPalletError<Rv>;

    /**
     * The bounty balance is not enough to add new child-bounty.
     **/
    InsufficientBountyBalance: GenericPalletError<Rv>;

    /**
     * Number of child bounties exceeds limit `MaxActiveChildBountyCount`.
     **/
    TooManyChildBounties: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `ElectionProviderMultiPhase`'s errors
   **/
  electionProviderMultiPhase: {
    /**
     * Submission was too early.
     **/
    PreDispatchEarlySubmission: GenericPalletError<Rv>;

    /**
     * Wrong number of winners presented.
     **/
    PreDispatchWrongWinnerCount: GenericPalletError<Rv>;

    /**
     * Submission was too weak, score-wise.
     **/
    PreDispatchWeakSubmission: GenericPalletError<Rv>;

    /**
     * The queue was full, and the solution was not better than any of the existing ones.
     **/
    SignedQueueFull: GenericPalletError<Rv>;

    /**
     * The origin failed to pay the deposit.
     **/
    SignedCannotPayDeposit: GenericPalletError<Rv>;

    /**
     * Witness data to dispatchable is invalid.
     **/
    SignedInvalidWitness: GenericPalletError<Rv>;

    /**
     * The signed submission consumes too much weight
     **/
    SignedTooMuchWeight: GenericPalletError<Rv>;

    /**
     * OCW submitted solution for wrong round
     **/
    OcwCallWrongEra: GenericPalletError<Rv>;

    /**
     * Snapshot metadata should exist but didn't.
     **/
    MissingSnapshotMetadata: GenericPalletError<Rv>;

    /**
     * `Self::insert_submission` returned an invalid index.
     **/
    InvalidSubmissionIndex: GenericPalletError<Rv>;

    /**
     * The call is not allowed at this point.
     **/
    CallNotAllowed: GenericPalletError<Rv>;

    /**
     * The fallback failed
     **/
    FallbackFailed: GenericPalletError<Rv>;

    /**
     * Some bound not met
     **/
    BoundNotMet: GenericPalletError<Rv>;

    /**
     * Submitted solution has too many winners
     **/
    TooManyWinners: GenericPalletError<Rv>;

    /**
     * Submission was prepared for a different round.
     **/
    PreDispatchDifferentRound: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `VoterList`'s errors
   **/
  voterList: {
    /**
     * A error in the list interface implementation.
     **/
    List: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `NominationPools`'s errors
   **/
  nominationPools: {
    /**
     * A (bonded) pool id does not exist.
     **/
    PoolNotFound: GenericPalletError<Rv>;

    /**
     * An account is not a member.
     **/
    PoolMemberNotFound: GenericPalletError<Rv>;

    /**
     * A reward pool does not exist. In all cases this is a system logic error.
     **/
    RewardPoolNotFound: GenericPalletError<Rv>;

    /**
     * A sub pool does not exist.
     **/
    SubPoolsNotFound: GenericPalletError<Rv>;

    /**
     * An account is already delegating in another pool. An account may only belong to one
     * pool at a time.
     **/
    AccountBelongsToOtherPool: GenericPalletError<Rv>;

    /**
     * The member is fully unbonded (and thus cannot access the bonded and reward pool
     * anymore to, for example, collect rewards).
     **/
    FullyUnbonding: GenericPalletError<Rv>;

    /**
     * The member cannot unbond further chunks due to reaching the limit.
     **/
    MaxUnbondingLimit: GenericPalletError<Rv>;

    /**
     * None of the funds can be withdrawn yet because the bonding duration has not passed.
     **/
    CannotWithdrawAny: GenericPalletError<Rv>;

    /**
     * The amount does not meet the minimum bond to either join or create a pool.
     *
     * The depositor can never unbond to a value less than `Pallet::depositor_min_bond`. The
     * caller does not have nominating permissions for the pool. Members can never unbond to a
     * value below `MinJoinBond`.
     **/
    MinimumBondNotMet: GenericPalletError<Rv>;

    /**
     * The transaction could not be executed due to overflow risk for the pool.
     **/
    OverflowRisk: GenericPalletError<Rv>;

    /**
     * A pool must be in [`PoolState::Destroying`] in order for the depositor to unbond or for
     * other members to be permissionlessly unbonded.
     **/
    NotDestroying: GenericPalletError<Rv>;

    /**
     * The caller does not have nominating permissions for the pool.
     **/
    NotNominator: GenericPalletError<Rv>;

    /**
     * Either a) the caller cannot make a valid kick or b) the pool is not destroying.
     **/
    NotKickerOrDestroying: GenericPalletError<Rv>;

    /**
     * The pool is not open to join
     **/
    NotOpen: GenericPalletError<Rv>;

    /**
     * The system is maxed out on pools.
     **/
    MaxPools: GenericPalletError<Rv>;

    /**
     * Too many members in the pool or system.
     **/
    MaxPoolMembers: GenericPalletError<Rv>;

    /**
     * The pools state cannot be changed.
     **/
    CanNotChangeState: GenericPalletError<Rv>;

    /**
     * The caller does not have adequate permissions.
     **/
    DoesNotHavePermission: GenericPalletError<Rv>;

    /**
     * Metadata exceeds [`Config::MaxMetadataLen`]
     **/
    MetadataExceedsMaxLen: GenericPalletError<Rv>;

    /**
     * Some error occurred that should never happen. This should be reported to the
     * maintainers.
     **/
    Defensive: GenericPalletError<Rv>;

    /**
     * Partial unbonding now allowed permissionlessly.
     **/
    PartialUnbondNotAllowedPermissionlessly: GenericPalletError<Rv>;

    /**
     * The pool's max commission cannot be set higher than the existing value.
     **/
    MaxCommissionRestricted: GenericPalletError<Rv>;

    /**
     * The supplied commission exceeds the max allowed commission.
     **/
    CommissionExceedsMaximum: GenericPalletError<Rv>;

    /**
     * The supplied commission exceeds global maximum commission.
     **/
    CommissionExceedsGlobalMaximum: GenericPalletError<Rv>;

    /**
     * Not enough blocks have surpassed since the last commission update.
     **/
    CommissionChangeThrottled: GenericPalletError<Rv>;

    /**
     * The submitted changes to commission change rate are not allowed.
     **/
    CommissionChangeRateNotAllowed: GenericPalletError<Rv>;

    /**
     * There is no pending commission to claim.
     **/
    NoPendingCommission: GenericPalletError<Rv>;

    /**
     * No commission current has been set.
     **/
    NoCommissionCurrentSet: GenericPalletError<Rv>;

    /**
     * Pool id currently in use.
     **/
    PoolIdInUse: GenericPalletError<Rv>;

    /**
     * Pool id provided is not correct/usable.
     **/
    InvalidPoolId: GenericPalletError<Rv>;

    /**
     * Bonding extra is restricted to the exact pending reward amount.
     **/
    BondExtraRestricted: GenericPalletError<Rv>;

    /**
     * No imbalance in the ED deposit for the pool.
     **/
    NothingToAdjust: GenericPalletError<Rv>;

    /**
     * No slash pending that can be applied to the member.
     **/
    NothingToSlash: GenericPalletError<Rv>;

    /**
     * The pool or member delegation has already migrated to delegate stake.
     **/
    AlreadyMigrated: GenericPalletError<Rv>;

    /**
     * The pool or member delegation has not migrated yet to delegate stake.
     **/
    NotMigrated: GenericPalletError<Rv>;

    /**
     * This call is not allowed in the current state of the pallet.
     **/
    NotSupported: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `FastUnstake`'s errors
   **/
  fastUnstake: {
    /**
     * The provided Controller account was not found.
     *
     * This means that the given account is not bonded.
     **/
    NotController: GenericPalletError<Rv>;

    /**
     * The bonded account has already been queued.
     **/
    AlreadyQueued: GenericPalletError<Rv>;

    /**
     * The bonded account has active unlocking chunks.
     **/
    NotFullyBonded: GenericPalletError<Rv>;

    /**
     * The provided un-staker is not in the `Queue`.
     **/
    NotQueued: GenericPalletError<Rv>;

    /**
     * The provided un-staker is already in Head, and cannot deregister.
     **/
    AlreadyHead: GenericPalletError<Rv>;

    /**
     * The call is not allowed at this point because the pallet is not active.
     **/
    CallNotAllowed: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `Configuration`'s errors
   **/
  configuration: {
    /**
     * The new value for a configuration parameter is invalid.
     **/
    InvalidNewValue: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `ParaInclusion`'s errors
   **/
  paraInclusion: {
    /**
     * Validator index out of bounds.
     **/
    ValidatorIndexOutOfBounds: GenericPalletError<Rv>;

    /**
     * Candidate submitted but para not scheduled.
     **/
    UnscheduledCandidate: GenericPalletError<Rv>;

    /**
     * Head data exceeds the configured maximum.
     **/
    HeadDataTooLarge: GenericPalletError<Rv>;

    /**
     * Code upgrade prematurely.
     **/
    PrematureCodeUpgrade: GenericPalletError<Rv>;

    /**
     * Output code is too large
     **/
    NewCodeTooLarge: GenericPalletError<Rv>;

    /**
     * The candidate's relay-parent was not allowed. Either it was
     * not recent enough or it didn't advance based on the last parachain block.
     **/
    DisallowedRelayParent: GenericPalletError<Rv>;

    /**
     * Failed to compute group index for the core: either it's out of bounds
     * or the relay parent doesn't belong to the current session.
     **/
    InvalidAssignment: GenericPalletError<Rv>;

    /**
     * Invalid group index in core assignment.
     **/
    InvalidGroupIndex: GenericPalletError<Rv>;

    /**
     * Insufficient (non-majority) backing.
     **/
    InsufficientBacking: GenericPalletError<Rv>;

    /**
     * Invalid (bad signature, unknown validator, etc.) backing.
     **/
    InvalidBacking: GenericPalletError<Rv>;

    /**
     * Collator did not sign PoV.
     **/
    NotCollatorSigned: GenericPalletError<Rv>;

    /**
     * The validation data hash does not match expected.
     **/
    ValidationDataHashMismatch: GenericPalletError<Rv>;

    /**
     * The downward message queue is not processed correctly.
     **/
    IncorrectDownwardMessageHandling: GenericPalletError<Rv>;

    /**
     * At least one upward message sent does not pass the acceptance criteria.
     **/
    InvalidUpwardMessages: GenericPalletError<Rv>;

    /**
     * The candidate didn't follow the rules of HRMP watermark advancement.
     **/
    HrmpWatermarkMishandling: GenericPalletError<Rv>;

    /**
     * The HRMP messages sent by the candidate is not valid.
     **/
    InvalidOutboundHrmp: GenericPalletError<Rv>;

    /**
     * The validation code hash of the candidate is not valid.
     **/
    InvalidValidationCodeHash: GenericPalletError<Rv>;

    /**
     * The `para_head` hash in the candidate descriptor doesn't match the hash of the actual
     * para head in the commitments.
     **/
    ParaHeadMismatch: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `ParaInherent`'s errors
   **/
  paraInherent: {
    /**
     * Inclusion inherent called more than once per block.
     **/
    TooManyInclusionInherents: GenericPalletError<Rv>;

    /**
     * The hash of the submitted parent header doesn't correspond to the saved block hash of
     * the parent.
     **/
    InvalidParentHeader: GenericPalletError<Rv>;

    /**
     * The data given to the inherent will result in an overweight block.
     **/
    InherentOverweight: GenericPalletError<Rv>;

    /**
     * A candidate was filtered during inherent execution. This should have only been done
     * during creation.
     **/
    CandidatesFilteredDuringExecution: GenericPalletError<Rv>;

    /**
     * Too many candidates supplied.
     **/
    UnscheduledCandidate: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `Paras`'s errors
   **/
  paras: {
    /**
     * Para is not registered in our system.
     **/
    NotRegistered: GenericPalletError<Rv>;

    /**
     * Para cannot be onboarded because it is already tracked by our system.
     **/
    CannotOnboard: GenericPalletError<Rv>;

    /**
     * Para cannot be offboarded at this time.
     **/
    CannotOffboard: GenericPalletError<Rv>;

    /**
     * Para cannot be upgraded to a lease holding parachain.
     **/
    CannotUpgrade: GenericPalletError<Rv>;

    /**
     * Para cannot be downgraded to an on-demand parachain.
     **/
    CannotDowngrade: GenericPalletError<Rv>;

    /**
     * The statement for PVF pre-checking is stale.
     **/
    PvfCheckStatementStale: GenericPalletError<Rv>;

    /**
     * The statement for PVF pre-checking is for a future session.
     **/
    PvfCheckStatementFuture: GenericPalletError<Rv>;

    /**
     * Claimed validator index is out of bounds.
     **/
    PvfCheckValidatorIndexOutOfBounds: GenericPalletError<Rv>;

    /**
     * The signature for the PVF pre-checking is invalid.
     **/
    PvfCheckInvalidSignature: GenericPalletError<Rv>;

    /**
     * The given validator already has cast a vote.
     **/
    PvfCheckDoubleVote: GenericPalletError<Rv>;

    /**
     * The given PVF does not exist at the moment of process a vote.
     **/
    PvfCheckSubjectInvalid: GenericPalletError<Rv>;

    /**
     * Parachain cannot currently schedule a code upgrade.
     **/
    CannotUpgradeCode: GenericPalletError<Rv>;

    /**
     * Invalid validation code size.
     **/
    InvalidCode: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `Hrmp`'s errors
   **/
  hrmp: {
    /**
     * The sender tried to open a channel to themselves.
     **/
    OpenHrmpChannelToSelf: GenericPalletError<Rv>;

    /**
     * The recipient is not a valid para.
     **/
    OpenHrmpChannelInvalidRecipient: GenericPalletError<Rv>;

    /**
     * The requested capacity is zero.
     **/
    OpenHrmpChannelZeroCapacity: GenericPalletError<Rv>;

    /**
     * The requested capacity exceeds the global limit.
     **/
    OpenHrmpChannelCapacityExceedsLimit: GenericPalletError<Rv>;

    /**
     * The requested maximum message size is 0.
     **/
    OpenHrmpChannelZeroMessageSize: GenericPalletError<Rv>;

    /**
     * The open request requested the message size that exceeds the global limit.
     **/
    OpenHrmpChannelMessageSizeExceedsLimit: GenericPalletError<Rv>;

    /**
     * The channel already exists
     **/
    OpenHrmpChannelAlreadyExists: GenericPalletError<Rv>;

    /**
     * There is already a request to open the same channel.
     **/
    OpenHrmpChannelAlreadyRequested: GenericPalletError<Rv>;

    /**
     * The sender already has the maximum number of allowed outbound channels.
     **/
    OpenHrmpChannelLimitExceeded: GenericPalletError<Rv>;

    /**
     * The channel from the sender to the origin doesn't exist.
     **/
    AcceptHrmpChannelDoesntExist: GenericPalletError<Rv>;

    /**
     * The channel is already confirmed.
     **/
    AcceptHrmpChannelAlreadyConfirmed: GenericPalletError<Rv>;

    /**
     * The recipient already has the maximum number of allowed inbound channels.
     **/
    AcceptHrmpChannelLimitExceeded: GenericPalletError<Rv>;

    /**
     * The origin tries to close a channel where it is neither the sender nor the recipient.
     **/
    CloseHrmpChannelUnauthorized: GenericPalletError<Rv>;

    /**
     * The channel to be closed doesn't exist.
     **/
    CloseHrmpChannelDoesntExist: GenericPalletError<Rv>;

    /**
     * The channel close request is already requested.
     **/
    CloseHrmpChannelAlreadyUnderway: GenericPalletError<Rv>;

    /**
     * Canceling is requested by neither the sender nor recipient of the open channel request.
     **/
    CancelHrmpOpenChannelUnauthorized: GenericPalletError<Rv>;

    /**
     * The open request doesn't exist.
     **/
    OpenHrmpChannelDoesntExist: GenericPalletError<Rv>;

    /**
     * Cannot cancel an HRMP open channel request because it is already confirmed.
     **/
    OpenHrmpChannelAlreadyConfirmed: GenericPalletError<Rv>;

    /**
     * The provided witness data is wrong.
     **/
    WrongWitness: GenericPalletError<Rv>;

    /**
     * The channel between these two chains cannot be authorized.
     **/
    ChannelCreationNotAuthorized: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `ParasDisputes`'s errors
   **/
  parasDisputes: {
    /**
     * Duplicate dispute statement sets provided.
     **/
    DuplicateDisputeStatementSets: GenericPalletError<Rv>;

    /**
     * Ancient dispute statement provided.
     **/
    AncientDisputeStatement: GenericPalletError<Rv>;

    /**
     * Validator index on statement is out of bounds for session.
     **/
    ValidatorIndexOutOfBounds: GenericPalletError<Rv>;

    /**
     * Invalid signature on statement.
     **/
    InvalidSignature: GenericPalletError<Rv>;

    /**
     * Validator vote submitted more than once to dispute.
     **/
    DuplicateStatement: GenericPalletError<Rv>;

    /**
     * A dispute where there are only votes on one side.
     **/
    SingleSidedDispute: GenericPalletError<Rv>;

    /**
     * A dispute vote from a malicious backer.
     **/
    MaliciousBacker: GenericPalletError<Rv>;

    /**
     * No backing votes were provides along dispute statements.
     **/
    MissingBackingVotes: GenericPalletError<Rv>;

    /**
     * Unconfirmed dispute statement sets provided.
     **/
    UnconfirmedDispute: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `ParasSlashing`'s errors
   **/
  parasSlashing: {
    /**
     * The key ownership proof is invalid.
     **/
    InvalidKeyOwnershipProof: GenericPalletError<Rv>;

    /**
     * The session index is too old or invalid.
     **/
    InvalidSessionIndex: GenericPalletError<Rv>;

    /**
     * The candidate hash is invalid.
     **/
    InvalidCandidateHash: GenericPalletError<Rv>;

    /**
     * There is no pending slash for the given validator index and time
     * slot.
     **/
    InvalidValidatorIndex: GenericPalletError<Rv>;

    /**
     * The validator index does not match the validator id.
     **/
    ValidatorIndexIdMismatch: GenericPalletError<Rv>;

    /**
     * The given slashing report is valid but already previously reported.
     **/
    DuplicateSlashingReport: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `OnDemand`'s errors
   **/
  onDemand: {
    /**
     * The order queue is full, `place_order` will not continue.
     **/
    QueueFull: GenericPalletError<Rv>;

    /**
     * The current spot price is higher than the max amount specified in the `place_order`
     * call, making it invalid.
     **/
    SpotPriceHigherThanMaxAmount: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `CoretimeAssignmentProvider`'s errors
   **/
  coretimeAssignmentProvider: {
    AssignmentsEmpty: GenericPalletError<Rv>;

    /**
     * Assignments together exceeded 57600.
     **/
    OverScheduled: GenericPalletError<Rv>;

    /**
     * Assignments together less than 57600
     **/
    UnderScheduled: GenericPalletError<Rv>;

    /**
     * assign_core is only allowed to append new assignments at the end of already existing
     * ones.
     **/
    DisallowedInsert: GenericPalletError<Rv>;

    /**
     * Tried to insert a schedule for the same core and block number as an existing schedule
     **/
    DuplicateInsert: GenericPalletError<Rv>;

    /**
     * Tried to add an unsorted set of assignments
     **/
    AssignmentsNotSorted: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `Registrar`'s errors
   **/
  registrar: {
    /**
     * The ID is not registered.
     **/
    NotRegistered: GenericPalletError<Rv>;

    /**
     * The ID is already registered.
     **/
    AlreadyRegistered: GenericPalletError<Rv>;

    /**
     * The caller is not the owner of this Id.
     **/
    NotOwner: GenericPalletError<Rv>;

    /**
     * Invalid para code size.
     **/
    CodeTooLarge: GenericPalletError<Rv>;

    /**
     * Invalid para head data size.
     **/
    HeadDataTooLarge: GenericPalletError<Rv>;

    /**
     * Para is not a Parachain.
     **/
    NotParachain: GenericPalletError<Rv>;

    /**
     * Para is not a Parathread (on-demand parachain).
     **/
    NotParathread: GenericPalletError<Rv>;

    /**
     * Cannot deregister para
     **/
    CannotDeregister: GenericPalletError<Rv>;

    /**
     * Cannot schedule downgrade of lease holding parachain to on-demand parachain
     **/
    CannotDowngrade: GenericPalletError<Rv>;

    /**
     * Cannot schedule upgrade of on-demand parachain to lease holding parachain
     **/
    CannotUpgrade: GenericPalletError<Rv>;

    /**
     * Para is locked from manipulation by the manager. Must use parachain or relay chain
     * governance.
     **/
    ParaLocked: GenericPalletError<Rv>;

    /**
     * The ID given for registration has not been reserved.
     **/
    NotReserved: GenericPalletError<Rv>;

    /**
     * The validation code is invalid.
     **/
    InvalidCode: GenericPalletError<Rv>;

    /**
     * Cannot perform a parachain slot / lifecycle swap. Check that the state of both paras
     * are correct for the swap to work.
     **/
    CannotSwap: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `Slots`'s errors
   **/
  slots: {
    /**
     * The parachain ID is not onboarding.
     **/
    ParaNotOnboarding: GenericPalletError<Rv>;

    /**
     * There was an error with the lease.
     **/
    LeaseError: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `Auctions`'s errors
   **/
  auctions: {
    /**
     * This auction is already in progress.
     **/
    AuctionInProgress: GenericPalletError<Rv>;

    /**
     * The lease period is in the past.
     **/
    LeasePeriodInPast: GenericPalletError<Rv>;

    /**
     * Para is not registered
     **/
    ParaNotRegistered: GenericPalletError<Rv>;

    /**
     * Not a current auction.
     **/
    NotCurrentAuction: GenericPalletError<Rv>;

    /**
     * Not an auction.
     **/
    NotAuction: GenericPalletError<Rv>;

    /**
     * Auction has already ended.
     **/
    AuctionEnded: GenericPalletError<Rv>;

    /**
     * The para is already leased out for part of this range.
     **/
    AlreadyLeasedOut: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `Crowdloan`'s errors
   **/
  crowdloan: {
    /**
     * The current lease period is more than the first lease period.
     **/
    FirstPeriodInPast: GenericPalletError<Rv>;

    /**
     * The first lease period needs to at least be less than 3 `max_value`.
     **/
    FirstPeriodTooFarInFuture: GenericPalletError<Rv>;

    /**
     * Last lease period must be greater than first lease period.
     **/
    LastPeriodBeforeFirstPeriod: GenericPalletError<Rv>;

    /**
     * The last lease period cannot be more than 3 periods after the first period.
     **/
    LastPeriodTooFarInFuture: GenericPalletError<Rv>;

    /**
     * The campaign ends before the current block number. The end must be in the future.
     **/
    CannotEndInPast: GenericPalletError<Rv>;

    /**
     * The end date for this crowdloan is not sensible.
     **/
    EndTooFarInFuture: GenericPalletError<Rv>;

    /**
     * There was an overflow.
     **/
    Overflow: GenericPalletError<Rv>;

    /**
     * The contribution was below the minimum, `MinContribution`.
     **/
    ContributionTooSmall: GenericPalletError<Rv>;

    /**
     * Invalid fund index.
     **/
    InvalidParaId: GenericPalletError<Rv>;

    /**
     * Contributions exceed maximum amount.
     **/
    CapExceeded: GenericPalletError<Rv>;

    /**
     * The contribution period has already ended.
     **/
    ContributionPeriodOver: GenericPalletError<Rv>;

    /**
     * The origin of this call is invalid.
     **/
    InvalidOrigin: GenericPalletError<Rv>;

    /**
     * This crowdloan does not correspond to a parachain.
     **/
    NotParachain: GenericPalletError<Rv>;

    /**
     * This parachain lease is still active and retirement cannot yet begin.
     **/
    LeaseActive: GenericPalletError<Rv>;

    /**
     * This parachain's bid or lease is still active and withdraw cannot yet begin.
     **/
    BidOrLeaseActive: GenericPalletError<Rv>;

    /**
     * The crowdloan has not yet ended.
     **/
    FundNotEnded: GenericPalletError<Rv>;

    /**
     * There are no contributions stored in this crowdloan.
     **/
    NoContributions: GenericPalletError<Rv>;

    /**
     * The crowdloan is not ready to dissolve. Potentially still has a slot or in retirement
     * period.
     **/
    NotReadyToDissolve: GenericPalletError<Rv>;

    /**
     * Invalid signature.
     **/
    InvalidSignature: GenericPalletError<Rv>;

    /**
     * The provided memo is too large.
     **/
    MemoTooLarge: GenericPalletError<Rv>;

    /**
     * The fund is already in `NewRaise`
     **/
    AlreadyInNewRaise: GenericPalletError<Rv>;

    /**
     * No contributions allowed during the VRF delay
     **/
    VrfDelayInProgress: GenericPalletError<Rv>;

    /**
     * A lease period has not started yet, due to an offset in the starting block.
     **/
    NoLeasePeriod: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `Coretime`'s errors
   **/
  coretime: {
    /**
     * The paraid making the call is not the coretime brokerage system parachain.
     **/
    NotBroker: GenericPalletError<Rv>;

    /**
     * Requested revenue information `when` parameter was in the future from the current
     * block height.
     **/
    RequestedFutureRevenue: GenericPalletError<Rv>;

    /**
     * Failed to transfer assets to the coretime chain
     **/
    AssetTransferFailed: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `StateTrieMigration`'s errors
   **/
  stateTrieMigration: {
    /**
     * Max signed limits not respected.
     **/
    MaxSignedLimits: GenericPalletError<Rv>;

    /**
     * A key was longer than the configured maximum.
     *
     * This means that the migration halted at the current [`Progress`] and
     * can be resumed with a larger [`crate::Config::MaxKeyLen`] value.
     * Retrying with the same [`crate::Config::MaxKeyLen`] value will not work.
     * The value should only be increased to avoid a storage migration for the currently
     * stored [`crate::Progress::LastKey`].
     **/
    KeyTooLong: GenericPalletError<Rv>;

    /**
     * submitter does not have enough funds.
     **/
    NotEnoughFunds: GenericPalletError<Rv>;

    /**
     * Bad witness data provided.
     **/
    BadWitness: GenericPalletError<Rv>;

    /**
     * Signed migration is not allowed because the maximum limit is not set yet.
     **/
    SignedMigrationNotAllowed: GenericPalletError<Rv>;

    /**
     * Bad child root provided.
     **/
    BadChildRoot: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `XcmPallet`'s errors
   **/
  xcmPallet: {
    /**
     * The desired destination was unreachable, generally because there is a no way of routing
     * to it.
     **/
    Unreachable: GenericPalletError<Rv>;

    /**
     * There was some other issue (i.e. not to do with routing) in sending the message.
     * Perhaps a lack of space for buffering the message.
     **/
    SendFailure: GenericPalletError<Rv>;

    /**
     * The message execution fails the filter.
     **/
    Filtered: GenericPalletError<Rv>;

    /**
     * The message's weight could not be determined.
     **/
    UnweighableMessage: GenericPalletError<Rv>;

    /**
     * The destination `Location` provided cannot be inverted.
     **/
    DestinationNotInvertible: GenericPalletError<Rv>;

    /**
     * The assets to be sent are empty.
     **/
    Empty: GenericPalletError<Rv>;

    /**
     * Could not re-anchor the assets to declare the fees for the destination chain.
     **/
    CannotReanchor: GenericPalletError<Rv>;

    /**
     * Too many assets have been attempted for transfer.
     **/
    TooManyAssets: GenericPalletError<Rv>;

    /**
     * Origin is invalid for sending.
     **/
    InvalidOrigin: GenericPalletError<Rv>;

    /**
     * The version of the `Versioned` value used is not able to be interpreted.
     **/
    BadVersion: GenericPalletError<Rv>;

    /**
     * The given location could not be used (e.g. because it cannot be expressed in the
     * desired version of XCM).
     **/
    BadLocation: GenericPalletError<Rv>;

    /**
     * The referenced subscription could not be found.
     **/
    NoSubscription: GenericPalletError<Rv>;

    /**
     * The location is invalid since it already has a subscription from us.
     **/
    AlreadySubscribed: GenericPalletError<Rv>;

    /**
     * Could not check-out the assets for teleportation to the destination chain.
     **/
    CannotCheckOutTeleport: GenericPalletError<Rv>;

    /**
     * The owner does not own (all) of the asset that they wish to do the operation on.
     **/
    LowBalance: GenericPalletError<Rv>;

    /**
     * The asset owner has too many locks on the asset.
     **/
    TooManyLocks: GenericPalletError<Rv>;

    /**
     * The given account is not an identifiable sovereign account for any location.
     **/
    AccountNotSovereign: GenericPalletError<Rv>;

    /**
     * The operation required fees to be paid which the initiator could not meet.
     **/
    FeesNotMet: GenericPalletError<Rv>;

    /**
     * A remote lock with the corresponding data could not be found.
     **/
    LockNotFound: GenericPalletError<Rv>;

    /**
     * The unlock operation cannot succeed because there are still consumers of the lock.
     **/
    InUse: GenericPalletError<Rv>;

    /**
     * Invalid asset, reserve chain could not be determined for it.
     **/
    InvalidAssetUnknownReserve: GenericPalletError<Rv>;

    /**
     * Invalid asset, do not support remote asset reserves with different fees reserves.
     **/
    InvalidAssetUnsupportedReserve: GenericPalletError<Rv>;

    /**
     * Too many assets with different reserve locations have been attempted for transfer.
     **/
    TooManyReserves: GenericPalletError<Rv>;

    /**
     * Local XCM execution incomplete.
     **/
    LocalExecutionIncomplete: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `MessageQueue`'s errors
   **/
  messageQueue: {
    /**
     * Page is not reapable because it has items remaining to be processed and is not old
     * enough.
     **/
    NotReapable: GenericPalletError<Rv>;

    /**
     * Page to be reaped does not exist.
     **/
    NoPage: GenericPalletError<Rv>;

    /**
     * The referenced message could not be found.
     **/
    NoMessage: GenericPalletError<Rv>;

    /**
     * The message was already processed and cannot be processed again.
     **/
    AlreadyProcessed: GenericPalletError<Rv>;

    /**
     * The message is queued for future execution.
     **/
    Queued: GenericPalletError<Rv>;

    /**
     * There is temporarily not enough weight to continue servicing messages.
     **/
    InsufficientWeight: GenericPalletError<Rv>;

    /**
     * This message is temporarily unprocessable.
     *
     * Such errors are expected, but not guaranteed, to resolve themselves eventually through
     * retrying.
     **/
    TemporarilyUnprocessable: GenericPalletError<Rv>;

    /**
     * The queue is paused and no message can be executed from it.
     *
     * This can change at any time and may resolve in the future by re-trying.
     **/
    QueuePaused: GenericPalletError<Rv>;

    /**
     * Another call is in progress and needs to finish before this call can happen.
     **/
    RecursiveDisallowed: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `AssetRate`'s errors
   **/
  assetRate: {
    /**
     * The given asset ID is unknown.
     **/
    UnknownAssetKind: GenericPalletError<Rv>;

    /**
     * The given asset ID already has an assigned conversion rate and cannot be re-created.
     **/
    AlreadyExists: GenericPalletError<Rv>;

    /**
     * Overflow ocurred when calculating the inverse rate.
     **/
    Overflow: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
  /**
   * Pallet `Beefy`'s errors
   **/
  beefy: {
    /**
     * A key ownership proof provided as part of an equivocation report is invalid.
     **/
    InvalidKeyOwnershipProof: GenericPalletError<Rv>;

    /**
     * An equivocation proof provided as part of an equivocation report is invalid.
     **/
    InvalidEquivocationProof: GenericPalletError<Rv>;

    /**
     * A given equivocation report is valid but already previously reported.
     **/
    DuplicateOffenceReport: GenericPalletError<Rv>;

    /**
     * Submitted configuration is invalid.
     **/
    InvalidConfiguration: GenericPalletError<Rv>;

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>;
  };
}
