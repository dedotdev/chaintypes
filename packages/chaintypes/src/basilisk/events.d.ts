// Generated by dedot cli

import type { GenericChainEvents, GenericPalletEvent, RpcVersion } from 'dedot/types';
import type {
  DispatchInfo,
  DispatchError,
  AccountId32,
  H256,
  Result,
  Bytes,
  FixedBytes,
  Perquintill,
  FixedU128,
} from 'dedot/codecs';
import type {
  FrameSupportTokensMiscBalanceStatus,
  PalletDemocracyVoteThreshold,
  PalletDemocracyVoteAccountVote,
  PalletDemocracyMetadataOwner,
  OrmlVestingVestingSchedule,
  BasiliskRuntimeSystemProxyType,
  PalletMultisigTimepoint,
  PalletStateTrieMigrationMigrationCompute,
  PalletStateTrieMigrationError,
  PalletConvictionVotingVoteAccountVote,
  FrameSupportPreimagesBounded,
  PalletConvictionVotingTally,
  FrameSupportDispatchPostDispatchInfo,
  SpRuntimeDispatchErrorWithPostInfo,
  SpWeightsWeightV2Weight,
  StagingXcmV4TraitsOutcome,
  StagingXcmV4Location,
  StagingXcmV4Xcm,
  StagingXcmV4Response,
  XcmVersionedAssets,
  StagingXcmV4AssetAssets,
  XcmV3TraitsError,
  XcmVersionedLocation,
  CumulusPrimitivesCoreAggregateMessageOrigin,
  FrameSupportMessagesProcessMessageError,
  PalletAssetRegistryAssetType,
  BasiliskRuntimeXcmAssetLocation,
  PalletLbpPool,
  PalletNftCollectionType,
  PalletXykAssetPair,
  PalletLiquidityMiningLoyaltyCurve,
  PalletBroadcastFiller,
  PalletBroadcastTradeOperation,
  PalletBroadcastAsset,
  PalletBroadcastFee,
  PalletBroadcastExecutionType,
  StagingXcmV4Asset,
} from './types.js';

export interface ChainEvents<Rv extends RpcVersion> extends GenericChainEvents<Rv> {
  /**
   * Pallet `System`'s events
   **/
  system: {
    /**
     * An extrinsic completed successfully.
     **/
    ExtrinsicSuccess: GenericPalletEvent<Rv, 'System', 'ExtrinsicSuccess', { dispatchInfo: DispatchInfo }>;

    /**
     * An extrinsic failed.
     **/
    ExtrinsicFailed: GenericPalletEvent<
      Rv,
      'System',
      'ExtrinsicFailed',
      { dispatchError: DispatchError; dispatchInfo: DispatchInfo }
    >;

    /**
     * `:code` was updated.
     **/
    CodeUpdated: GenericPalletEvent<Rv, 'System', 'CodeUpdated', null>;

    /**
     * A new account was created.
     **/
    NewAccount: GenericPalletEvent<Rv, 'System', 'NewAccount', { account: AccountId32 }>;

    /**
     * An account was reaped.
     **/
    KilledAccount: GenericPalletEvent<Rv, 'System', 'KilledAccount', { account: AccountId32 }>;

    /**
     * On on-chain remark happened.
     **/
    Remarked: GenericPalletEvent<Rv, 'System', 'Remarked', { sender: AccountId32; hash: H256 }>;

    /**
     * An upgrade was authorized.
     **/
    UpgradeAuthorized: GenericPalletEvent<Rv, 'System', 'UpgradeAuthorized', { codeHash: H256; checkVersion: boolean }>;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Balances`'s events
   **/
  balances: {
    /**
     * An account was created with some free balance.
     **/
    Endowed: GenericPalletEvent<Rv, 'Balances', 'Endowed', { account: AccountId32; freeBalance: bigint }>;

    /**
     * An account was removed whose balance was non-zero but below ExistentialDeposit,
     * resulting in an outright loss.
     **/
    DustLost: GenericPalletEvent<Rv, 'Balances', 'DustLost', { account: AccountId32; amount: bigint }>;

    /**
     * Transfer succeeded.
     **/
    Transfer: GenericPalletEvent<Rv, 'Balances', 'Transfer', { from: AccountId32; to: AccountId32; amount: bigint }>;

    /**
     * A balance was set by root.
     **/
    BalanceSet: GenericPalletEvent<Rv, 'Balances', 'BalanceSet', { who: AccountId32; free: bigint }>;

    /**
     * Some balance was reserved (moved from free to reserved).
     **/
    Reserved: GenericPalletEvent<Rv, 'Balances', 'Reserved', { who: AccountId32; amount: bigint }>;

    /**
     * Some balance was unreserved (moved from reserved to free).
     **/
    Unreserved: GenericPalletEvent<Rv, 'Balances', 'Unreserved', { who: AccountId32; amount: bigint }>;

    /**
     * Some balance was moved from the reserve of the first account to the second account.
     * Final argument indicates the destination balance type.
     **/
    ReserveRepatriated: GenericPalletEvent<
      Rv,
      'Balances',
      'ReserveRepatriated',
      { from: AccountId32; to: AccountId32; amount: bigint; destinationStatus: FrameSupportTokensMiscBalanceStatus }
    >;

    /**
     * Some amount was deposited (e.g. for transaction fees).
     **/
    Deposit: GenericPalletEvent<Rv, 'Balances', 'Deposit', { who: AccountId32; amount: bigint }>;

    /**
     * Some amount was withdrawn from the account (e.g. for transaction fees).
     **/
    Withdraw: GenericPalletEvent<Rv, 'Balances', 'Withdraw', { who: AccountId32; amount: bigint }>;

    /**
     * Some amount was removed from the account (e.g. for misbehavior).
     **/
    Slashed: GenericPalletEvent<Rv, 'Balances', 'Slashed', { who: AccountId32; amount: bigint }>;

    /**
     * Some amount was minted into an account.
     **/
    Minted: GenericPalletEvent<Rv, 'Balances', 'Minted', { who: AccountId32; amount: bigint }>;

    /**
     * Some amount was burned from an account.
     **/
    Burned: GenericPalletEvent<Rv, 'Balances', 'Burned', { who: AccountId32; amount: bigint }>;

    /**
     * Some amount was suspended from an account (it can be restored later).
     **/
    Suspended: GenericPalletEvent<Rv, 'Balances', 'Suspended', { who: AccountId32; amount: bigint }>;

    /**
     * Some amount was restored into an account.
     **/
    Restored: GenericPalletEvent<Rv, 'Balances', 'Restored', { who: AccountId32; amount: bigint }>;

    /**
     * An account was upgraded.
     **/
    Upgraded: GenericPalletEvent<Rv, 'Balances', 'Upgraded', { who: AccountId32 }>;

    /**
     * Total issuance was increased by `amount`, creating a credit to be balanced.
     **/
    Issued: GenericPalletEvent<Rv, 'Balances', 'Issued', { amount: bigint }>;

    /**
     * Total issuance was decreased by `amount`, creating a debt to be balanced.
     **/
    Rescinded: GenericPalletEvent<Rv, 'Balances', 'Rescinded', { amount: bigint }>;

    /**
     * Some balance was locked.
     **/
    Locked: GenericPalletEvent<Rv, 'Balances', 'Locked', { who: AccountId32; amount: bigint }>;

    /**
     * Some balance was unlocked.
     **/
    Unlocked: GenericPalletEvent<Rv, 'Balances', 'Unlocked', { who: AccountId32; amount: bigint }>;

    /**
     * Some balance was frozen.
     **/
    Frozen: GenericPalletEvent<Rv, 'Balances', 'Frozen', { who: AccountId32; amount: bigint }>;

    /**
     * Some balance was thawed.
     **/
    Thawed: GenericPalletEvent<Rv, 'Balances', 'Thawed', { who: AccountId32; amount: bigint }>;

    /**
     * The `TotalIssuance` was forcefully changed.
     **/
    TotalIssuanceForced: GenericPalletEvent<Rv, 'Balances', 'TotalIssuanceForced', { old: bigint; new: bigint }>;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `TransactionPayment`'s events
   **/
  transactionPayment: {
    /**
     * A transaction fee `actual_fee`, of which `tip` was added to the minimum inclusion fee,
     * has been paid by `who`.
     **/
    TransactionFeePaid: GenericPalletEvent<
      Rv,
      'TransactionPayment',
      'TransactionFeePaid',
      { who: AccountId32; actualFee: bigint; tip: bigint }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `MultiTransactionPayment`'s events
   **/
  multiTransactionPayment: {
    /**
     * CurrencySet
     * [who, currency]
     **/
    CurrencySet: GenericPalletEvent<
      Rv,
      'MultiTransactionPayment',
      'CurrencySet',
      { accountId: AccountId32; assetId: number }
    >;

    /**
     * New accepted currency added
     * [currency]
     **/
    CurrencyAdded: GenericPalletEvent<Rv, 'MultiTransactionPayment', 'CurrencyAdded', { assetId: number }>;

    /**
     * Accepted currency removed
     * [currency]
     **/
    CurrencyRemoved: GenericPalletEvent<Rv, 'MultiTransactionPayment', 'CurrencyRemoved', { assetId: number }>;

    /**
     * Transaction fee paid in non-native currency
     * [Account, Currency, Native fee amount, Non-native fee amount, Destination account]
     **/
    FeeWithdrawn: GenericPalletEvent<
      Rv,
      'MultiTransactionPayment',
      'FeeWithdrawn',
      {
        accountId: AccountId32;
        assetId: number;
        nativeFeeAmount: bigint;
        nonNativeFeeAmount: bigint;
        destinationAccountId: AccountId32;
      }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Treasury`'s events
   **/
  treasury: {
    /**
     * We have ended a spend period and will now allocate funds.
     **/
    Spending: GenericPalletEvent<Rv, 'Treasury', 'Spending', { budgetRemaining: bigint }>;

    /**
     * Some funds have been allocated.
     **/
    Awarded: GenericPalletEvent<
      Rv,
      'Treasury',
      'Awarded',
      { proposalIndex: number; award: bigint; account: AccountId32 }
    >;

    /**
     * Some of our funds have been burnt.
     **/
    Burnt: GenericPalletEvent<Rv, 'Treasury', 'Burnt', { burntFunds: bigint }>;

    /**
     * Spending has finished; this is the amount that rolls over until next spend.
     **/
    Rollover: GenericPalletEvent<Rv, 'Treasury', 'Rollover', { rolloverBalance: bigint }>;

    /**
     * Some funds have been deposited.
     **/
    Deposit: GenericPalletEvent<Rv, 'Treasury', 'Deposit', { value: bigint }>;

    /**
     * A new spend proposal has been approved.
     **/
    SpendApproved: GenericPalletEvent<
      Rv,
      'Treasury',
      'SpendApproved',
      { proposalIndex: number; amount: bigint; beneficiary: AccountId32 }
    >;

    /**
     * The inactive funds of the pallet have been updated.
     **/
    UpdatedInactive: GenericPalletEvent<
      Rv,
      'Treasury',
      'UpdatedInactive',
      { reactivated: bigint; deactivated: bigint }
    >;

    /**
     * A new asset spend proposal has been approved.
     **/
    AssetSpendApproved: GenericPalletEvent<
      Rv,
      'Treasury',
      'AssetSpendApproved',
      { index: number; assetKind: []; amount: bigint; beneficiary: AccountId32; validFrom: number; expireAt: number }
    >;

    /**
     * An approved spend was voided.
     **/
    AssetSpendVoided: GenericPalletEvent<Rv, 'Treasury', 'AssetSpendVoided', { index: number }>;

    /**
     * A payment happened.
     **/
    Paid: GenericPalletEvent<Rv, 'Treasury', 'Paid', { index: number; paymentId: [] }>;

    /**
     * A payment failed and can be retried.
     **/
    PaymentFailed: GenericPalletEvent<Rv, 'Treasury', 'PaymentFailed', { index: number; paymentId: [] }>;

    /**
     * A spend was processed and removed from the storage. It might have been successfully
     * paid or it may have expired.
     **/
    SpendProcessed: GenericPalletEvent<Rv, 'Treasury', 'SpendProcessed', { index: number }>;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Utility`'s events
   **/
  utility: {
    /**
     * Batch of dispatches did not complete fully. Index of first failing dispatch given, as
     * well as the error.
     **/
    BatchInterrupted: GenericPalletEvent<Rv, 'Utility', 'BatchInterrupted', { index: number; error: DispatchError }>;

    /**
     * Batch of dispatches completed fully with no error.
     **/
    BatchCompleted: GenericPalletEvent<Rv, 'Utility', 'BatchCompleted', null>;

    /**
     * Batch of dispatches completed but has errors.
     **/
    BatchCompletedWithErrors: GenericPalletEvent<Rv, 'Utility', 'BatchCompletedWithErrors', null>;

    /**
     * A single item within a Batch of dispatches has completed with no error.
     **/
    ItemCompleted: GenericPalletEvent<Rv, 'Utility', 'ItemCompleted', null>;

    /**
     * A single item within a Batch of dispatches has completed with error.
     **/
    ItemFailed: GenericPalletEvent<Rv, 'Utility', 'ItemFailed', { error: DispatchError }>;

    /**
     * A call was dispatched.
     **/
    DispatchedAs: GenericPalletEvent<Rv, 'Utility', 'DispatchedAs', { result: Result<[], DispatchError> }>;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Democracy`'s events
   **/
  democracy: {
    /**
     * A motion has been proposed by a public account.
     **/
    Proposed: GenericPalletEvent<Rv, 'Democracy', 'Proposed', { proposalIndex: number; deposit: bigint }>;

    /**
     * A public proposal has been tabled for referendum vote.
     **/
    Tabled: GenericPalletEvent<Rv, 'Democracy', 'Tabled', { proposalIndex: number; deposit: bigint }>;

    /**
     * An external proposal has been tabled.
     **/
    ExternalTabled: GenericPalletEvent<Rv, 'Democracy', 'ExternalTabled', null>;

    /**
     * A referendum has begun.
     **/
    Started: GenericPalletEvent<
      Rv,
      'Democracy',
      'Started',
      { refIndex: number; threshold: PalletDemocracyVoteThreshold }
    >;

    /**
     * A proposal has been approved by referendum.
     **/
    Passed: GenericPalletEvent<Rv, 'Democracy', 'Passed', { refIndex: number }>;

    /**
     * A proposal has been rejected by referendum.
     **/
    NotPassed: GenericPalletEvent<Rv, 'Democracy', 'NotPassed', { refIndex: number }>;

    /**
     * A referendum has been cancelled.
     **/
    Cancelled: GenericPalletEvent<Rv, 'Democracy', 'Cancelled', { refIndex: number }>;

    /**
     * An account has delegated their vote to another account.
     **/
    Delegated: GenericPalletEvent<Rv, 'Democracy', 'Delegated', { who: AccountId32; target: AccountId32 }>;

    /**
     * An account has cancelled a previous delegation operation.
     **/
    Undelegated: GenericPalletEvent<Rv, 'Democracy', 'Undelegated', { account: AccountId32 }>;

    /**
     * An external proposal has been vetoed.
     **/
    Vetoed: GenericPalletEvent<Rv, 'Democracy', 'Vetoed', { who: AccountId32; proposalHash: H256; until: number }>;

    /**
     * A proposal_hash has been blacklisted permanently.
     **/
    Blacklisted: GenericPalletEvent<Rv, 'Democracy', 'Blacklisted', { proposalHash: H256 }>;

    /**
     * An account has voted in a referendum
     **/
    Voted: GenericPalletEvent<
      Rv,
      'Democracy',
      'Voted',
      { voter: AccountId32; refIndex: number; vote: PalletDemocracyVoteAccountVote }
    >;

    /**
     * An account has seconded a proposal
     **/
    Seconded: GenericPalletEvent<Rv, 'Democracy', 'Seconded', { seconder: AccountId32; propIndex: number }>;

    /**
     * A proposal got canceled.
     **/
    ProposalCanceled: GenericPalletEvent<Rv, 'Democracy', 'ProposalCanceled', { propIndex: number }>;

    /**
     * Metadata for a proposal or a referendum has been set.
     **/
    MetadataSet: GenericPalletEvent<
      Rv,
      'Democracy',
      'MetadataSet',
      {
        /**
         * Metadata owner.
         **/
        owner: PalletDemocracyMetadataOwner;

        /**
         * Preimage hash.
         **/
        hash: H256;
      }
    >;

    /**
     * Metadata for a proposal or a referendum has been cleared.
     **/
    MetadataCleared: GenericPalletEvent<
      Rv,
      'Democracy',
      'MetadataCleared',
      {
        /**
         * Metadata owner.
         **/
        owner: PalletDemocracyMetadataOwner;

        /**
         * Preimage hash.
         **/
        hash: H256;
      }
    >;

    /**
     * Metadata has been transferred to new owner.
     **/
    MetadataTransferred: GenericPalletEvent<
      Rv,
      'Democracy',
      'MetadataTransferred',
      {
        /**
         * Previous metadata owner.
         **/
        prevOwner: PalletDemocracyMetadataOwner;

        /**
         * New metadata owner.
         **/
        owner: PalletDemocracyMetadataOwner;

        /**
         * Preimage hash.
         **/
        hash: H256;
      }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `TechnicalCommittee`'s events
   **/
  technicalCommittee: {
    /**
     * A motion (given hash) has been proposed (by given account) with a threshold (given
     * `MemberCount`).
     **/
    Proposed: GenericPalletEvent<
      Rv,
      'TechnicalCommittee',
      'Proposed',
      { account: AccountId32; proposalIndex: number; proposalHash: H256; threshold: number }
    >;

    /**
     * A motion (given hash) has been voted on by given account, leaving
     * a tally (yes votes and no votes given respectively as `MemberCount`).
     **/
    Voted: GenericPalletEvent<
      Rv,
      'TechnicalCommittee',
      'Voted',
      { account: AccountId32; proposalHash: H256; voted: boolean; yes: number; no: number }
    >;

    /**
     * A motion was approved by the required threshold.
     **/
    Approved: GenericPalletEvent<Rv, 'TechnicalCommittee', 'Approved', { proposalHash: H256 }>;

    /**
     * A motion was not approved by the required threshold.
     **/
    Disapproved: GenericPalletEvent<Rv, 'TechnicalCommittee', 'Disapproved', { proposalHash: H256 }>;

    /**
     * A motion was executed; result will be `Ok` if it returned without error.
     **/
    Executed: GenericPalletEvent<
      Rv,
      'TechnicalCommittee',
      'Executed',
      { proposalHash: H256; result: Result<[], DispatchError> }
    >;

    /**
     * A single member did some action; result will be `Ok` if it returned without error.
     **/
    MemberExecuted: GenericPalletEvent<
      Rv,
      'TechnicalCommittee',
      'MemberExecuted',
      { proposalHash: H256; result: Result<[], DispatchError> }
    >;

    /**
     * A proposal was closed because its threshold was reached or after its duration was up.
     **/
    Closed: GenericPalletEvent<Rv, 'TechnicalCommittee', 'Closed', { proposalHash: H256; yes: number; no: number }>;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Vesting`'s events
   **/
  vesting: {
    /**
     * Added new vesting schedule.
     **/
    VestingScheduleAdded: GenericPalletEvent<
      Rv,
      'Vesting',
      'VestingScheduleAdded',
      { from: AccountId32; to: AccountId32; vestingSchedule: OrmlVestingVestingSchedule }
    >;

    /**
     * Claimed vesting.
     **/
    Claimed: GenericPalletEvent<Rv, 'Vesting', 'Claimed', { who: AccountId32; amount: bigint }>;

    /**
     * Updated vesting schedules.
     **/
    VestingSchedulesUpdated: GenericPalletEvent<Rv, 'Vesting', 'VestingSchedulesUpdated', { who: AccountId32 }>;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Proxy`'s events
   **/
  proxy: {
    /**
     * A proxy was executed correctly, with the given.
     **/
    ProxyExecuted: GenericPalletEvent<Rv, 'Proxy', 'ProxyExecuted', { result: Result<[], DispatchError> }>;

    /**
     * A pure account has been created by new proxy with given
     * disambiguation index and proxy type.
     **/
    PureCreated: GenericPalletEvent<
      Rv,
      'Proxy',
      'PureCreated',
      { pure: AccountId32; who: AccountId32; proxyType: BasiliskRuntimeSystemProxyType; disambiguationIndex: number }
    >;

    /**
     * An announcement was placed to make a call in the future.
     **/
    Announced: GenericPalletEvent<Rv, 'Proxy', 'Announced', { real: AccountId32; proxy: AccountId32; callHash: H256 }>;

    /**
     * A proxy was added.
     **/
    ProxyAdded: GenericPalletEvent<
      Rv,
      'Proxy',
      'ProxyAdded',
      { delegator: AccountId32; delegatee: AccountId32; proxyType: BasiliskRuntimeSystemProxyType; delay: number }
    >;

    /**
     * A proxy was removed.
     **/
    ProxyRemoved: GenericPalletEvent<
      Rv,
      'Proxy',
      'ProxyRemoved',
      { delegator: AccountId32; delegatee: AccountId32; proxyType: BasiliskRuntimeSystemProxyType; delay: number }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `CollatorSelection`'s events
   **/
  collatorSelection: {
    /**
     * New Invulnerables were set.
     **/
    NewInvulnerables: GenericPalletEvent<
      Rv,
      'CollatorSelection',
      'NewInvulnerables',
      { invulnerables: Array<AccountId32> }
    >;

    /**
     * A new Invulnerable was added.
     **/
    InvulnerableAdded: GenericPalletEvent<Rv, 'CollatorSelection', 'InvulnerableAdded', { accountId: AccountId32 }>;

    /**
     * An Invulnerable was removed.
     **/
    InvulnerableRemoved: GenericPalletEvent<Rv, 'CollatorSelection', 'InvulnerableRemoved', { accountId: AccountId32 }>;

    /**
     * The number of desired candidates was set.
     **/
    NewDesiredCandidates: GenericPalletEvent<
      Rv,
      'CollatorSelection',
      'NewDesiredCandidates',
      { desiredCandidates: number }
    >;

    /**
     * The candidacy bond was set.
     **/
    NewCandidacyBond: GenericPalletEvent<Rv, 'CollatorSelection', 'NewCandidacyBond', { bondAmount: bigint }>;

    /**
     * A new candidate joined.
     **/
    CandidateAdded: GenericPalletEvent<
      Rv,
      'CollatorSelection',
      'CandidateAdded',
      { accountId: AccountId32; deposit: bigint }
    >;

    /**
     * Bond of a candidate updated.
     **/
    CandidateBondUpdated: GenericPalletEvent<
      Rv,
      'CollatorSelection',
      'CandidateBondUpdated',
      { accountId: AccountId32; deposit: bigint }
    >;

    /**
     * A candidate was removed.
     **/
    CandidateRemoved: GenericPalletEvent<Rv, 'CollatorSelection', 'CandidateRemoved', { accountId: AccountId32 }>;

    /**
     * An account was replaced in the candidate list by another one.
     **/
    CandidateReplaced: GenericPalletEvent<
      Rv,
      'CollatorSelection',
      'CandidateReplaced',
      { old: AccountId32; new: AccountId32; deposit: bigint }
    >;

    /**
     * An account was unable to be added to the Invulnerables because they did not have keys
     * registered. Other Invulnerables may have been set.
     **/
    InvalidInvulnerableSkipped: GenericPalletEvent<
      Rv,
      'CollatorSelection',
      'InvalidInvulnerableSkipped',
      { accountId: AccountId32 }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Session`'s events
   **/
  session: {
    /**
     * New session has happened. Note that the argument is the session index, not the
     * block number as the type might suggest.
     **/
    NewSession: GenericPalletEvent<Rv, 'Session', 'NewSession', { sessionIndex: number }>;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Preimage`'s events
   **/
  preimage: {
    /**
     * A preimage has been noted.
     **/
    Noted: GenericPalletEvent<Rv, 'Preimage', 'Noted', { hash: H256 }>;

    /**
     * A preimage has been requested.
     **/
    Requested: GenericPalletEvent<Rv, 'Preimage', 'Requested', { hash: H256 }>;

    /**
     * A preimage has ben cleared.
     **/
    Cleared: GenericPalletEvent<Rv, 'Preimage', 'Cleared', { hash: H256 }>;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Uniques`'s events
   **/
  uniques: {
    /**
     * A `collection` was created.
     **/
    Created: GenericPalletEvent<
      Rv,
      'Uniques',
      'Created',
      { collection: bigint; creator: AccountId32; owner: AccountId32 }
    >;

    /**
     * A `collection` was force-created.
     **/
    ForceCreated: GenericPalletEvent<Rv, 'Uniques', 'ForceCreated', { collection: bigint; owner: AccountId32 }>;

    /**
     * A `collection` was destroyed.
     **/
    Destroyed: GenericPalletEvent<Rv, 'Uniques', 'Destroyed', { collection: bigint }>;

    /**
     * An `item` was issued.
     **/
    Issued: GenericPalletEvent<Rv, 'Uniques', 'Issued', { collection: bigint; item: bigint; owner: AccountId32 }>;

    /**
     * An `item` was transferred.
     **/
    Transferred: GenericPalletEvent<
      Rv,
      'Uniques',
      'Transferred',
      { collection: bigint; item: bigint; from: AccountId32; to: AccountId32 }
    >;

    /**
     * An `item` was destroyed.
     **/
    Burned: GenericPalletEvent<Rv, 'Uniques', 'Burned', { collection: bigint; item: bigint; owner: AccountId32 }>;

    /**
     * Some `item` was frozen.
     **/
    Frozen: GenericPalletEvent<Rv, 'Uniques', 'Frozen', { collection: bigint; item: bigint }>;

    /**
     * Some `item` was thawed.
     **/
    Thawed: GenericPalletEvent<Rv, 'Uniques', 'Thawed', { collection: bigint; item: bigint }>;

    /**
     * Some `collection` was frozen.
     **/
    CollectionFrozen: GenericPalletEvent<Rv, 'Uniques', 'CollectionFrozen', { collection: bigint }>;

    /**
     * Some `collection` was thawed.
     **/
    CollectionThawed: GenericPalletEvent<Rv, 'Uniques', 'CollectionThawed', { collection: bigint }>;

    /**
     * The owner changed.
     **/
    OwnerChanged: GenericPalletEvent<Rv, 'Uniques', 'OwnerChanged', { collection: bigint; newOwner: AccountId32 }>;

    /**
     * The management team changed.
     **/
    TeamChanged: GenericPalletEvent<
      Rv,
      'Uniques',
      'TeamChanged',
      { collection: bigint; issuer: AccountId32; admin: AccountId32; freezer: AccountId32 }
    >;

    /**
     * An `item` of a `collection` has been approved by the `owner` for transfer by
     * a `delegate`.
     **/
    ApprovedTransfer: GenericPalletEvent<
      Rv,
      'Uniques',
      'ApprovedTransfer',
      { collection: bigint; item: bigint; owner: AccountId32; delegate: AccountId32 }
    >;

    /**
     * An approval for a `delegate` account to transfer the `item` of an item
     * `collection` was cancelled by its `owner`.
     **/
    ApprovalCancelled: GenericPalletEvent<
      Rv,
      'Uniques',
      'ApprovalCancelled',
      { collection: bigint; item: bigint; owner: AccountId32; delegate: AccountId32 }
    >;

    /**
     * A `collection` has had its attributes changed by the `Force` origin.
     **/
    ItemStatusChanged: GenericPalletEvent<Rv, 'Uniques', 'ItemStatusChanged', { collection: bigint }>;

    /**
     * New metadata has been set for a `collection`.
     **/
    CollectionMetadataSet: GenericPalletEvent<
      Rv,
      'Uniques',
      'CollectionMetadataSet',
      { collection: bigint; data: Bytes; isFrozen: boolean }
    >;

    /**
     * Metadata has been cleared for a `collection`.
     **/
    CollectionMetadataCleared: GenericPalletEvent<Rv, 'Uniques', 'CollectionMetadataCleared', { collection: bigint }>;

    /**
     * New metadata has been set for an item.
     **/
    MetadataSet: GenericPalletEvent<
      Rv,
      'Uniques',
      'MetadataSet',
      { collection: bigint; item: bigint; data: Bytes; isFrozen: boolean }
    >;

    /**
     * Metadata has been cleared for an item.
     **/
    MetadataCleared: GenericPalletEvent<Rv, 'Uniques', 'MetadataCleared', { collection: bigint; item: bigint }>;

    /**
     * Metadata has been cleared for an item.
     **/
    Redeposited: GenericPalletEvent<
      Rv,
      'Uniques',
      'Redeposited',
      { collection: bigint; successfulItems: Array<bigint> }
    >;

    /**
     * New attribute metadata has been set for a `collection` or `item`.
     **/
    AttributeSet: GenericPalletEvent<
      Rv,
      'Uniques',
      'AttributeSet',
      { collection: bigint; maybeItem?: bigint | undefined; key: Bytes; value: Bytes }
    >;

    /**
     * Attribute metadata has been cleared for a `collection` or `item`.
     **/
    AttributeCleared: GenericPalletEvent<
      Rv,
      'Uniques',
      'AttributeCleared',
      { collection: bigint; maybeItem?: bigint | undefined; key: Bytes }
    >;

    /**
     * Ownership acceptance has changed for an account.
     **/
    OwnershipAcceptanceChanged: GenericPalletEvent<
      Rv,
      'Uniques',
      'OwnershipAcceptanceChanged',
      { who: AccountId32; maybeCollection?: bigint | undefined }
    >;

    /**
     * Max supply has been set for a collection.
     **/
    CollectionMaxSupplySet: GenericPalletEvent<
      Rv,
      'Uniques',
      'CollectionMaxSupplySet',
      { collection: bigint; maxSupply: number }
    >;

    /**
     * The price was set for the instance.
     **/
    ItemPriceSet: GenericPalletEvent<
      Rv,
      'Uniques',
      'ItemPriceSet',
      { collection: bigint; item: bigint; price: bigint; whitelistedBuyer?: AccountId32 | undefined }
    >;

    /**
     * The price for the instance was removed.
     **/
    ItemPriceRemoved: GenericPalletEvent<Rv, 'Uniques', 'ItemPriceRemoved', { collection: bigint; item: bigint }>;

    /**
     * An item was bought.
     **/
    ItemBought: GenericPalletEvent<
      Rv,
      'Uniques',
      'ItemBought',
      { collection: bigint; item: bigint; price: bigint; seller: AccountId32; buyer: AccountId32 }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Identity`'s events
   **/
  identity: {
    /**
     * A name was set or reset (which will remove all judgements).
     **/
    IdentitySet: GenericPalletEvent<Rv, 'Identity', 'IdentitySet', { who: AccountId32 }>;

    /**
     * A name was cleared, and the given balance returned.
     **/
    IdentityCleared: GenericPalletEvent<Rv, 'Identity', 'IdentityCleared', { who: AccountId32; deposit: bigint }>;

    /**
     * A name was removed and the given balance slashed.
     **/
    IdentityKilled: GenericPalletEvent<Rv, 'Identity', 'IdentityKilled', { who: AccountId32; deposit: bigint }>;

    /**
     * A judgement was asked from a registrar.
     **/
    JudgementRequested: GenericPalletEvent<
      Rv,
      'Identity',
      'JudgementRequested',
      { who: AccountId32; registrarIndex: number }
    >;

    /**
     * A judgement request was retracted.
     **/
    JudgementUnrequested: GenericPalletEvent<
      Rv,
      'Identity',
      'JudgementUnrequested',
      { who: AccountId32; registrarIndex: number }
    >;

    /**
     * A judgement was given by a registrar.
     **/
    JudgementGiven: GenericPalletEvent<
      Rv,
      'Identity',
      'JudgementGiven',
      { target: AccountId32; registrarIndex: number }
    >;

    /**
     * A registrar was added.
     **/
    RegistrarAdded: GenericPalletEvent<Rv, 'Identity', 'RegistrarAdded', { registrarIndex: number }>;

    /**
     * A sub-identity was added to an identity and the deposit paid.
     **/
    SubIdentityAdded: GenericPalletEvent<
      Rv,
      'Identity',
      'SubIdentityAdded',
      { sub: AccountId32; main: AccountId32; deposit: bigint }
    >;

    /**
     * A sub-identity was removed from an identity and the deposit freed.
     **/
    SubIdentityRemoved: GenericPalletEvent<
      Rv,
      'Identity',
      'SubIdentityRemoved',
      { sub: AccountId32; main: AccountId32; deposit: bigint }
    >;

    /**
     * A sub-identity was cleared, and the given deposit repatriated from the
     * main identity account to the sub-identity account.
     **/
    SubIdentityRevoked: GenericPalletEvent<
      Rv,
      'Identity',
      'SubIdentityRevoked',
      { sub: AccountId32; main: AccountId32; deposit: bigint }
    >;

    /**
     * A username authority was added.
     **/
    AuthorityAdded: GenericPalletEvent<Rv, 'Identity', 'AuthorityAdded', { authority: AccountId32 }>;

    /**
     * A username authority was removed.
     **/
    AuthorityRemoved: GenericPalletEvent<Rv, 'Identity', 'AuthorityRemoved', { authority: AccountId32 }>;

    /**
     * A username was set for `who`.
     **/
    UsernameSet: GenericPalletEvent<Rv, 'Identity', 'UsernameSet', { who: AccountId32; username: Bytes }>;

    /**
     * A username was queued, but `who` must accept it prior to `expiration`.
     **/
    UsernameQueued: GenericPalletEvent<
      Rv,
      'Identity',
      'UsernameQueued',
      { who: AccountId32; username: Bytes; expiration: number }
    >;

    /**
     * A queued username passed its expiration without being claimed and was removed.
     **/
    PreapprovalExpired: GenericPalletEvent<Rv, 'Identity', 'PreapprovalExpired', { whose: AccountId32 }>;

    /**
     * A username was set as a primary and can be looked up from `who`.
     **/
    PrimaryUsernameSet: GenericPalletEvent<Rv, 'Identity', 'PrimaryUsernameSet', { who: AccountId32; username: Bytes }>;

    /**
     * A dangling username (as in, a username corresponding to an account that has removed its
     * identity) has been removed.
     **/
    DanglingUsernameRemoved: GenericPalletEvent<
      Rv,
      'Identity',
      'DanglingUsernameRemoved',
      { who: AccountId32; username: Bytes }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Multisig`'s events
   **/
  multisig: {
    /**
     * A new multisig operation has begun.
     **/
    NewMultisig: GenericPalletEvent<
      Rv,
      'Multisig',
      'NewMultisig',
      { approving: AccountId32; multisig: AccountId32; callHash: FixedBytes<32> }
    >;

    /**
     * A multisig operation has been approved by someone.
     **/
    MultisigApproval: GenericPalletEvent<
      Rv,
      'Multisig',
      'MultisigApproval',
      { approving: AccountId32; timepoint: PalletMultisigTimepoint; multisig: AccountId32; callHash: FixedBytes<32> }
    >;

    /**
     * A multisig operation has been executed.
     **/
    MultisigExecuted: GenericPalletEvent<
      Rv,
      'Multisig',
      'MultisigExecuted',
      {
        approving: AccountId32;
        timepoint: PalletMultisigTimepoint;
        multisig: AccountId32;
        callHash: FixedBytes<32>;
        result: Result<[], DispatchError>;
      }
    >;

    /**
     * A multisig operation has been cancelled.
     **/
    MultisigCancelled: GenericPalletEvent<
      Rv,
      'Multisig',
      'MultisigCancelled',
      { cancelling: AccountId32; timepoint: PalletMultisigTimepoint; multisig: AccountId32; callHash: FixedBytes<32> }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `StateTrieMigration`'s events
   **/
  stateTrieMigration: {
    /**
     * Given number of `(top, child)` keys were migrated respectively, with the given
     * `compute`.
     **/
    Migrated: GenericPalletEvent<
      Rv,
      'StateTrieMigration',
      'Migrated',
      { top: number; child: number; compute: PalletStateTrieMigrationMigrationCompute }
    >;

    /**
     * Some account got slashed by the given amount.
     **/
    Slashed: GenericPalletEvent<Rv, 'StateTrieMigration', 'Slashed', { who: AccountId32; amount: bigint }>;

    /**
     * The auto migration task finished.
     **/
    AutoMigrationFinished: GenericPalletEvent<Rv, 'StateTrieMigration', 'AutoMigrationFinished', null>;

    /**
     * Migration got halted due to an error or miss-configuration.
     **/
    Halted: GenericPalletEvent<Rv, 'StateTrieMigration', 'Halted', { error: PalletStateTrieMigrationError }>;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `ConvictionVoting`'s events
   **/
  convictionVoting: {
    /**
     * An account has delegated their vote to another account. \[who, target\]
     **/
    Delegated: GenericPalletEvent<Rv, 'ConvictionVoting', 'Delegated', [AccountId32, AccountId32]>;

    /**
     * An \[account\] has cancelled a previous delegation operation.
     **/
    Undelegated: GenericPalletEvent<Rv, 'ConvictionVoting', 'Undelegated', AccountId32>;

    /**
     * An account that has voted
     **/
    Voted: GenericPalletEvent<
      Rv,
      'ConvictionVoting',
      'Voted',
      { who: AccountId32; vote: PalletConvictionVotingVoteAccountVote }
    >;

    /**
     * A vote that been removed
     **/
    VoteRemoved: GenericPalletEvent<
      Rv,
      'ConvictionVoting',
      'VoteRemoved',
      { who: AccountId32; vote: PalletConvictionVotingVoteAccountVote }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Referenda`'s events
   **/
  referenda: {
    /**
     * A referendum has been submitted.
     **/
    Submitted: GenericPalletEvent<
      Rv,
      'Referenda',
      'Submitted',
      {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * The track (and by extension proposal dispatch origin) of this referendum.
         **/
        track: number;

        /**
         * The proposal for the referendum.
         **/
        proposal: FrameSupportPreimagesBounded;
      }
    >;

    /**
     * The decision deposit has been placed.
     **/
    DecisionDepositPlaced: GenericPalletEvent<
      Rv,
      'Referenda',
      'DecisionDepositPlaced',
      {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * The account who placed the deposit.
         **/
        who: AccountId32;

        /**
         * The amount placed by the account.
         **/
        amount: bigint;
      }
    >;

    /**
     * The decision deposit has been refunded.
     **/
    DecisionDepositRefunded: GenericPalletEvent<
      Rv,
      'Referenda',
      'DecisionDepositRefunded',
      {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * The account who placed the deposit.
         **/
        who: AccountId32;

        /**
         * The amount placed by the account.
         **/
        amount: bigint;
      }
    >;

    /**
     * A deposit has been slashed.
     **/
    DepositSlashed: GenericPalletEvent<
      Rv,
      'Referenda',
      'DepositSlashed',
      {
        /**
         * The account who placed the deposit.
         **/
        who: AccountId32;

        /**
         * The amount placed by the account.
         **/
        amount: bigint;
      }
    >;

    /**
     * A referendum has moved into the deciding phase.
     **/
    DecisionStarted: GenericPalletEvent<
      Rv,
      'Referenda',
      'DecisionStarted',
      {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * The track (and by extension proposal dispatch origin) of this referendum.
         **/
        track: number;

        /**
         * The proposal for the referendum.
         **/
        proposal: FrameSupportPreimagesBounded;

        /**
         * The current tally of votes in this referendum.
         **/
        tally: PalletConvictionVotingTally;
      }
    >;
    ConfirmStarted: GenericPalletEvent<
      Rv,
      'Referenda',
      'ConfirmStarted',
      {
        /**
         * Index of the referendum.
         **/
        index: number;
      }
    >;
    ConfirmAborted: GenericPalletEvent<
      Rv,
      'Referenda',
      'ConfirmAborted',
      {
        /**
         * Index of the referendum.
         **/
        index: number;
      }
    >;

    /**
     * A referendum has ended its confirmation phase and is ready for approval.
     **/
    Confirmed: GenericPalletEvent<
      Rv,
      'Referenda',
      'Confirmed',
      {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * The final tally of votes in this referendum.
         **/
        tally: PalletConvictionVotingTally;
      }
    >;

    /**
     * A referendum has been approved and its proposal has been scheduled.
     **/
    Approved: GenericPalletEvent<
      Rv,
      'Referenda',
      'Approved',
      {
        /**
         * Index of the referendum.
         **/
        index: number;
      }
    >;

    /**
     * A proposal has been rejected by referendum.
     **/
    Rejected: GenericPalletEvent<
      Rv,
      'Referenda',
      'Rejected',
      {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * The final tally of votes in this referendum.
         **/
        tally: PalletConvictionVotingTally;
      }
    >;

    /**
     * A referendum has been timed out without being decided.
     **/
    TimedOut: GenericPalletEvent<
      Rv,
      'Referenda',
      'TimedOut',
      {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * The final tally of votes in this referendum.
         **/
        tally: PalletConvictionVotingTally;
      }
    >;

    /**
     * A referendum has been cancelled.
     **/
    Cancelled: GenericPalletEvent<
      Rv,
      'Referenda',
      'Cancelled',
      {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * The final tally of votes in this referendum.
         **/
        tally: PalletConvictionVotingTally;
      }
    >;

    /**
     * A referendum has been killed.
     **/
    Killed: GenericPalletEvent<
      Rv,
      'Referenda',
      'Killed',
      {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * The final tally of votes in this referendum.
         **/
        tally: PalletConvictionVotingTally;
      }
    >;

    /**
     * The submission deposit has been refunded.
     **/
    SubmissionDepositRefunded: GenericPalletEvent<
      Rv,
      'Referenda',
      'SubmissionDepositRefunded',
      {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * The account who placed the deposit.
         **/
        who: AccountId32;

        /**
         * The amount placed by the account.
         **/
        amount: bigint;
      }
    >;

    /**
     * Metadata for a referendum has been set.
     **/
    MetadataSet: GenericPalletEvent<
      Rv,
      'Referenda',
      'MetadataSet',
      {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * Preimage hash.
         **/
        hash: H256;
      }
    >;

    /**
     * Metadata for a referendum has been cleared.
     **/
    MetadataCleared: GenericPalletEvent<
      Rv,
      'Referenda',
      'MetadataCleared',
      {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * Preimage hash.
         **/
        hash: H256;
      }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Whitelist`'s events
   **/
  whitelist: {
    CallWhitelisted: GenericPalletEvent<Rv, 'Whitelist', 'CallWhitelisted', { callHash: H256 }>;
    WhitelistedCallRemoved: GenericPalletEvent<Rv, 'Whitelist', 'WhitelistedCallRemoved', { callHash: H256 }>;
    WhitelistedCallDispatched: GenericPalletEvent<
      Rv,
      'Whitelist',
      'WhitelistedCallDispatched',
      { callHash: H256; result: Result<FrameSupportDispatchPostDispatchInfo, SpRuntimeDispatchErrorWithPostInfo> }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `RelayChainInfo`'s events
   **/
  relayChainInfo: {
    /**
     * Current block numbers
     * [ Parachain block number, Relaychain Block number ]
     **/
    CurrentBlockNumbers: GenericPalletEvent<
      Rv,
      'RelayChainInfo',
      'CurrentBlockNumbers',
      { parachainBlockNumber: number; relaychainBlockNumber: number }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Scheduler`'s events
   **/
  scheduler: {
    /**
     * Scheduled some task.
     **/
    Scheduled: GenericPalletEvent<Rv, 'Scheduler', 'Scheduled', { when: number; index: number }>;

    /**
     * Canceled some task.
     **/
    Canceled: GenericPalletEvent<Rv, 'Scheduler', 'Canceled', { when: number; index: number }>;

    /**
     * Dispatched some task.
     **/
    Dispatched: GenericPalletEvent<
      Rv,
      'Scheduler',
      'Dispatched',
      { task: [number, number]; id?: FixedBytes<32> | undefined; result: Result<[], DispatchError> }
    >;

    /**
     * Set a retry configuration for some task.
     **/
    RetrySet: GenericPalletEvent<
      Rv,
      'Scheduler',
      'RetrySet',
      { task: [number, number]; id?: FixedBytes<32> | undefined; period: number; retries: number }
    >;

    /**
     * Cancel a retry configuration for some task.
     **/
    RetryCancelled: GenericPalletEvent<
      Rv,
      'Scheduler',
      'RetryCancelled',
      { task: [number, number]; id?: FixedBytes<32> | undefined }
    >;

    /**
     * The call for the provided hash was not found so the task has been aborted.
     **/
    CallUnavailable: GenericPalletEvent<
      Rv,
      'Scheduler',
      'CallUnavailable',
      { task: [number, number]; id?: FixedBytes<32> | undefined }
    >;

    /**
     * The given task was unable to be renewed since the agenda is full at that block.
     **/
    PeriodicFailed: GenericPalletEvent<
      Rv,
      'Scheduler',
      'PeriodicFailed',
      { task: [number, number]; id?: FixedBytes<32> | undefined }
    >;

    /**
     * The given task was unable to be retried since the agenda is full at that block or there
     * was not enough weight to reschedule it.
     **/
    RetryFailed: GenericPalletEvent<
      Rv,
      'Scheduler',
      'RetryFailed',
      { task: [number, number]; id?: FixedBytes<32> | undefined }
    >;

    /**
     * The given task can never be executed since it is overweight.
     **/
    PermanentlyOverweight: GenericPalletEvent<
      Rv,
      'Scheduler',
      'PermanentlyOverweight',
      { task: [number, number]; id?: FixedBytes<32> | undefined }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `ParachainSystem`'s events
   **/
  parachainSystem: {
    /**
     * The validation function has been scheduled to apply.
     **/
    ValidationFunctionStored: GenericPalletEvent<Rv, 'ParachainSystem', 'ValidationFunctionStored', null>;

    /**
     * The validation function was applied as of the contained relay chain block number.
     **/
    ValidationFunctionApplied: GenericPalletEvent<
      Rv,
      'ParachainSystem',
      'ValidationFunctionApplied',
      { relayChainBlockNum: number }
    >;

    /**
     * The relay-chain aborted the upgrade process.
     **/
    ValidationFunctionDiscarded: GenericPalletEvent<Rv, 'ParachainSystem', 'ValidationFunctionDiscarded', null>;

    /**
     * Some downward messages have been received and will be processed.
     **/
    DownwardMessagesReceived: GenericPalletEvent<Rv, 'ParachainSystem', 'DownwardMessagesReceived', { count: number }>;

    /**
     * Downward messages were processed using the given weight.
     **/
    DownwardMessagesProcessed: GenericPalletEvent<
      Rv,
      'ParachainSystem',
      'DownwardMessagesProcessed',
      { weightUsed: SpWeightsWeightV2Weight; dmqHead: H256 }
    >;

    /**
     * An upward message was sent to the relay chain.
     **/
    UpwardMessageSent: GenericPalletEvent<
      Rv,
      'ParachainSystem',
      'UpwardMessageSent',
      { messageHash?: FixedBytes<32> | undefined }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `PolkadotXcm`'s events
   **/
  polkadotXcm: {
    /**
     * Execution of an XCM message was attempted.
     **/
    Attempted: GenericPalletEvent<Rv, 'PolkadotXcm', 'Attempted', { outcome: StagingXcmV4TraitsOutcome }>;

    /**
     * A XCM message was sent.
     **/
    Sent: GenericPalletEvent<
      Rv,
      'PolkadotXcm',
      'Sent',
      {
        origin: StagingXcmV4Location;
        destination: StagingXcmV4Location;
        message: StagingXcmV4Xcm;
        messageId: FixedBytes<32>;
      }
    >;

    /**
     * Query response received which does not match a registered query. This may be because a
     * matching query was never registered, it may be because it is a duplicate response, or
     * because the query timed out.
     **/
    UnexpectedResponse: GenericPalletEvent<
      Rv,
      'PolkadotXcm',
      'UnexpectedResponse',
      { origin: StagingXcmV4Location; queryId: bigint }
    >;

    /**
     * Query response has been received and is ready for taking with `take_response`. There is
     * no registered notification call.
     **/
    ResponseReady: GenericPalletEvent<
      Rv,
      'PolkadotXcm',
      'ResponseReady',
      { queryId: bigint; response: StagingXcmV4Response }
    >;

    /**
     * Query response has been received and query is removed. The registered notification has
     * been dispatched and executed successfully.
     **/
    Notified: GenericPalletEvent<
      Rv,
      'PolkadotXcm',
      'Notified',
      { queryId: bigint; palletIndex: number; callIndex: number }
    >;

    /**
     * Query response has been received and query is removed. The registered notification
     * could not be dispatched because the dispatch weight is greater than the maximum weight
     * originally budgeted by this runtime for the query result.
     **/
    NotifyOverweight: GenericPalletEvent<
      Rv,
      'PolkadotXcm',
      'NotifyOverweight',
      {
        queryId: bigint;
        palletIndex: number;
        callIndex: number;
        actualWeight: SpWeightsWeightV2Weight;
        maxBudgetedWeight: SpWeightsWeightV2Weight;
      }
    >;

    /**
     * Query response has been received and query is removed. There was a general error with
     * dispatching the notification call.
     **/
    NotifyDispatchError: GenericPalletEvent<
      Rv,
      'PolkadotXcm',
      'NotifyDispatchError',
      { queryId: bigint; palletIndex: number; callIndex: number }
    >;

    /**
     * Query response has been received and query is removed. The dispatch was unable to be
     * decoded into a `Call`; this might be due to dispatch function having a signature which
     * is not `(origin, QueryId, Response)`.
     **/
    NotifyDecodeFailed: GenericPalletEvent<
      Rv,
      'PolkadotXcm',
      'NotifyDecodeFailed',
      { queryId: bigint; palletIndex: number; callIndex: number }
    >;

    /**
     * Expected query response has been received but the origin location of the response does
     * not match that expected. The query remains registered for a later, valid, response to
     * be received and acted upon.
     **/
    InvalidResponder: GenericPalletEvent<
      Rv,
      'PolkadotXcm',
      'InvalidResponder',
      { origin: StagingXcmV4Location; queryId: bigint; expectedLocation?: StagingXcmV4Location | undefined }
    >;

    /**
     * Expected query response has been received but the expected origin location placed in
     * storage by this runtime previously cannot be decoded. The query remains registered.
     *
     * This is unexpected (since a location placed in storage in a previously executing
     * runtime should be readable prior to query timeout) and dangerous since the possibly
     * valid response will be dropped. Manual governance intervention is probably going to be
     * needed.
     **/
    InvalidResponderVersion: GenericPalletEvent<
      Rv,
      'PolkadotXcm',
      'InvalidResponderVersion',
      { origin: StagingXcmV4Location; queryId: bigint }
    >;

    /**
     * Received query response has been read and removed.
     **/
    ResponseTaken: GenericPalletEvent<Rv, 'PolkadotXcm', 'ResponseTaken', { queryId: bigint }>;

    /**
     * Some assets have been placed in an asset trap.
     **/
    AssetsTrapped: GenericPalletEvent<
      Rv,
      'PolkadotXcm',
      'AssetsTrapped',
      { hash: H256; origin: StagingXcmV4Location; assets: XcmVersionedAssets }
    >;

    /**
     * An XCM version change notification message has been attempted to be sent.
     *
     * The cost of sending it (borne by the chain) is included.
     **/
    VersionChangeNotified: GenericPalletEvent<
      Rv,
      'PolkadotXcm',
      'VersionChangeNotified',
      { destination: StagingXcmV4Location; result: number; cost: StagingXcmV4AssetAssets; messageId: FixedBytes<32> }
    >;

    /**
     * The supported version of a location has been changed. This might be through an
     * automatic notification or a manual intervention.
     **/
    SupportedVersionChanged: GenericPalletEvent<
      Rv,
      'PolkadotXcm',
      'SupportedVersionChanged',
      { location: StagingXcmV4Location; version: number }
    >;

    /**
     * A given location which had a version change subscription was dropped owing to an error
     * sending the notification to it.
     **/
    NotifyTargetSendFail: GenericPalletEvent<
      Rv,
      'PolkadotXcm',
      'NotifyTargetSendFail',
      { location: StagingXcmV4Location; queryId: bigint; error: XcmV3TraitsError }
    >;

    /**
     * A given location which had a version change subscription was dropped owing to an error
     * migrating the location to our new XCM format.
     **/
    NotifyTargetMigrationFail: GenericPalletEvent<
      Rv,
      'PolkadotXcm',
      'NotifyTargetMigrationFail',
      { location: XcmVersionedLocation; queryId: bigint }
    >;

    /**
     * Expected query response has been received but the expected querier location placed in
     * storage by this runtime previously cannot be decoded. The query remains registered.
     *
     * This is unexpected (since a location placed in storage in a previously executing
     * runtime should be readable prior to query timeout) and dangerous since the possibly
     * valid response will be dropped. Manual governance intervention is probably going to be
     * needed.
     **/
    InvalidQuerierVersion: GenericPalletEvent<
      Rv,
      'PolkadotXcm',
      'InvalidQuerierVersion',
      { origin: StagingXcmV4Location; queryId: bigint }
    >;

    /**
     * Expected query response has been received but the querier location of the response does
     * not match the expected. The query remains registered for a later, valid, response to
     * be received and acted upon.
     **/
    InvalidQuerier: GenericPalletEvent<
      Rv,
      'PolkadotXcm',
      'InvalidQuerier',
      {
        origin: StagingXcmV4Location;
        queryId: bigint;
        expectedQuerier: StagingXcmV4Location;
        maybeActualQuerier?: StagingXcmV4Location | undefined;
      }
    >;

    /**
     * A remote has requested XCM version change notification from us and we have honored it.
     * A version information message is sent to them and its cost is included.
     **/
    VersionNotifyStarted: GenericPalletEvent<
      Rv,
      'PolkadotXcm',
      'VersionNotifyStarted',
      { destination: StagingXcmV4Location; cost: StagingXcmV4AssetAssets; messageId: FixedBytes<32> }
    >;

    /**
     * We have requested that a remote chain send us XCM version change notifications.
     **/
    VersionNotifyRequested: GenericPalletEvent<
      Rv,
      'PolkadotXcm',
      'VersionNotifyRequested',
      { destination: StagingXcmV4Location; cost: StagingXcmV4AssetAssets; messageId: FixedBytes<32> }
    >;

    /**
     * We have requested that a remote chain stops sending us XCM version change
     * notifications.
     **/
    VersionNotifyUnrequested: GenericPalletEvent<
      Rv,
      'PolkadotXcm',
      'VersionNotifyUnrequested',
      { destination: StagingXcmV4Location; cost: StagingXcmV4AssetAssets; messageId: FixedBytes<32> }
    >;

    /**
     * Fees were paid from a location for an operation (often for using `SendXcm`).
     **/
    FeesPaid: GenericPalletEvent<
      Rv,
      'PolkadotXcm',
      'FeesPaid',
      { paying: StagingXcmV4Location; fees: StagingXcmV4AssetAssets }
    >;

    /**
     * Some assets have been claimed from an asset trap
     **/
    AssetsClaimed: GenericPalletEvent<
      Rv,
      'PolkadotXcm',
      'AssetsClaimed',
      { hash: H256; origin: StagingXcmV4Location; assets: XcmVersionedAssets }
    >;

    /**
     * A XCM version migration finished.
     **/
    VersionMigrationFinished: GenericPalletEvent<Rv, 'PolkadotXcm', 'VersionMigrationFinished', { version: number }>;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `CumulusXcm`'s events
   **/
  cumulusXcm: {
    /**
     * Downward message is invalid XCM.
     * \[ id \]
     **/
    InvalidFormat: GenericPalletEvent<Rv, 'CumulusXcm', 'InvalidFormat', FixedBytes<32>>;

    /**
     * Downward message is unsupported version of XCM.
     * \[ id \]
     **/
    UnsupportedVersion: GenericPalletEvent<Rv, 'CumulusXcm', 'UnsupportedVersion', FixedBytes<32>>;

    /**
     * Downward message executed with the given outcome.
     * \[ id, outcome \]
     **/
    ExecutedDownward: GenericPalletEvent<
      Rv,
      'CumulusXcm',
      'ExecutedDownward',
      [FixedBytes<32>, StagingXcmV4TraitsOutcome]
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `XcmpQueue`'s events
   **/
  xcmpQueue: {
    /**
     * An HRMP message was sent to a sibling parachain.
     **/
    XcmpMessageSent: GenericPalletEvent<Rv, 'XcmpQueue', 'XcmpMessageSent', { messageHash: FixedBytes<32> }>;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `MessageQueue`'s events
   **/
  messageQueue: {
    /**
     * Message discarded due to an error in the `MessageProcessor` (usually a format error).
     **/
    ProcessingFailed: GenericPalletEvent<
      Rv,
      'MessageQueue',
      'ProcessingFailed',
      {
        /**
         * The `blake2_256` hash of the message.
         **/
        id: H256;

        /**
         * The queue of the message.
         **/
        origin: CumulusPrimitivesCoreAggregateMessageOrigin;

        /**
         * The error that occurred.
         *
         * This error is pretty opaque. More fine-grained errors need to be emitted as events
         * by the `MessageProcessor`.
         **/
        error: FrameSupportMessagesProcessMessageError;
      }
    >;

    /**
     * Message is processed.
     **/
    Processed: GenericPalletEvent<
      Rv,
      'MessageQueue',
      'Processed',
      {
        /**
         * The `blake2_256` hash of the message.
         **/
        id: H256;

        /**
         * The queue of the message.
         **/
        origin: CumulusPrimitivesCoreAggregateMessageOrigin;

        /**
         * How much weight was used to process the message.
         **/
        weightUsed: SpWeightsWeightV2Weight;

        /**
         * Whether the message was processed.
         *
         * Note that this does not mean that the underlying `MessageProcessor` was internally
         * successful. It *solely* means that the MQ pallet will treat this as a success
         * condition and discard the message. Any internal error needs to be emitted as events
         * by the `MessageProcessor`.
         **/
        success: boolean;
      }
    >;

    /**
     * Message placed in overweight queue.
     **/
    OverweightEnqueued: GenericPalletEvent<
      Rv,
      'MessageQueue',
      'OverweightEnqueued',
      {
        /**
         * The `blake2_256` hash of the message.
         **/
        id: FixedBytes<32>;

        /**
         * The queue of the message.
         **/
        origin: CumulusPrimitivesCoreAggregateMessageOrigin;

        /**
         * The page of the message.
         **/
        pageIndex: number;

        /**
         * The index of the message within the page.
         **/
        messageIndex: number;
      }
    >;

    /**
     * This page was reaped.
     **/
    PageReaped: GenericPalletEvent<
      Rv,
      'MessageQueue',
      'PageReaped',
      {
        /**
         * The queue of the page.
         **/
        origin: CumulusPrimitivesCoreAggregateMessageOrigin;

        /**
         * The index of the page.
         **/
        index: number;
      }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `AssetRegistry`'s events
   **/
  assetRegistry: {
    /**
     * Asset was registered.
     **/
    Registered: GenericPalletEvent<
      Rv,
      'AssetRegistry',
      'Registered',
      { assetId: number; assetName: Bytes; assetType: PalletAssetRegistryAssetType }
    >;

    /**
     * Asset was updated.
     **/
    Updated: GenericPalletEvent<
      Rv,
      'AssetRegistry',
      'Updated',
      {
        assetId: number;
        assetName: Bytes;
        assetType: PalletAssetRegistryAssetType;
        existentialDeposit: bigint;
        xcmRateLimit?: bigint | undefined;
      }
    >;

    /**
     * Metadata set for an asset.
     **/
    MetadataSet: GenericPalletEvent<
      Rv,
      'AssetRegistry',
      'MetadataSet',
      { assetId: number; symbol: Bytes; decimals: number }
    >;

    /**
     * Native location set for an asset.
     **/
    LocationSet: GenericPalletEvent<
      Rv,
      'AssetRegistry',
      'LocationSet',
      { assetId: number; location: BasiliskRuntimeXcmAssetLocation }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `XYK`'s events
   **/
  xyk: {
    /**
     * New liquidity was provided to the pool.
     **/
    LiquidityAdded: GenericPalletEvent<
      Rv,
      'XYK',
      'LiquidityAdded',
      { who: AccountId32; assetA: number; assetB: number; amountA: bigint; amountB: bigint }
    >;

    /**
     * Liquidity was removed from the pool.
     **/
    LiquidityRemoved: GenericPalletEvent<
      Rv,
      'XYK',
      'LiquidityRemoved',
      { who: AccountId32; assetA: number; assetB: number; shares: bigint }
    >;

    /**
     * Pool was created.
     **/
    PoolCreated: GenericPalletEvent<
      Rv,
      'XYK',
      'PoolCreated',
      {
        who: AccountId32;
        assetA: number;
        assetB: number;
        initialSharesAmount: bigint;
        shareToken: number;
        pool: AccountId32;
      }
    >;

    /**
     * Pool was destroyed.
     **/
    PoolDestroyed: GenericPalletEvent<
      Rv,
      'XYK',
      'PoolDestroyed',
      { who: AccountId32; assetA: number; assetB: number; shareToken: number; pool: AccountId32 }
    >;

    /**
     * Asset sale executed.
     * Deprecated. Replaced by pallet_broadcast::Swapped
     **/
    SellExecuted: GenericPalletEvent<
      Rv,
      'XYK',
      'SellExecuted',
      {
        who: AccountId32;
        assetIn: number;
        assetOut: number;
        amount: bigint;
        salePrice: bigint;
        feeAsset: number;
        feeAmount: bigint;
        pool: AccountId32;
      }
    >;

    /**
     * Asset purchase executed.
     * Deprecated. Replaced by pallet_broadcast::Swapped
     **/
    BuyExecuted: GenericPalletEvent<
      Rv,
      'XYK',
      'BuyExecuted',
      {
        who: AccountId32;
        assetOut: number;
        assetIn: number;
        amount: bigint;
        buyPrice: bigint;
        feeAsset: number;
        feeAmount: bigint;
        pool: AccountId32;
      }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Duster`'s events
   **/
  duster: {
    /**
     * Account dusted.
     **/
    Dusted: GenericPalletEvent<Rv, 'Duster', 'Dusted', { who: AccountId32; amount: bigint }>;

    /**
     * Account added to non-dustable list.
     **/
    Added: GenericPalletEvent<Rv, 'Duster', 'Added', { who: AccountId32 }>;

    /**
     * Account removed from non-dustable list.
     **/
    Removed: GenericPalletEvent<Rv, 'Duster', 'Removed', { who: AccountId32 }>;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `LBP`'s events
   **/
  lbp: {
    /**
     * Pool was created by the `CreatePool` origin.
     **/
    PoolCreated: GenericPalletEvent<Rv, 'LBP', 'PoolCreated', { pool: AccountId32; data: PalletLbpPool }>;

    /**
     * Pool data were updated.
     **/
    PoolUpdated: GenericPalletEvent<Rv, 'LBP', 'PoolUpdated', { pool: AccountId32; data: PalletLbpPool }>;

    /**
     * New liquidity was provided to the pool.
     **/
    LiquidityAdded: GenericPalletEvent<
      Rv,
      'LBP',
      'LiquidityAdded',
      { who: AccountId32; assetA: number; assetB: number; amountA: bigint; amountB: bigint }
    >;

    /**
     * Liquidity was removed from the pool and the pool was destroyed.
     **/
    LiquidityRemoved: GenericPalletEvent<
      Rv,
      'LBP',
      'LiquidityRemoved',
      { who: AccountId32; assetA: number; assetB: number; amountA: bigint; amountB: bigint }
    >;

    /**
     * Sale executed.
     * Deprecated. Replaced by pallet_broadcast::Swapped
     **/
    SellExecuted: GenericPalletEvent<
      Rv,
      'LBP',
      'SellExecuted',
      {
        who: AccountId32;
        assetIn: number;
        assetOut: number;
        amount: bigint;
        salePrice: bigint;
        feeAsset: number;
        feeAmount: bigint;
      }
    >;

    /**
     * Purchase executed.
     * Deprecated. Replaced by pallet_broadcast::Swapped
     **/
    BuyExecuted: GenericPalletEvent<
      Rv,
      'LBP',
      'BuyExecuted',
      {
        who: AccountId32;
        assetOut: number;
        assetIn: number;
        amount: bigint;
        buyPrice: bigint;
        feeAsset: number;
        feeAmount: bigint;
      }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `NFT`'s events
   **/
  nft: {
    /**
     * A collection was created
     **/
    CollectionCreated: GenericPalletEvent<
      Rv,
      'NFT',
      'CollectionCreated',
      { owner: AccountId32; collectionId: bigint; collectionType: PalletNftCollectionType; metadata: Bytes }
    >;

    /**
     * An item was minted
     **/
    ItemMinted: GenericPalletEvent<
      Rv,
      'NFT',
      'ItemMinted',
      { owner: AccountId32; collectionId: bigint; itemId: bigint; metadata: Bytes }
    >;

    /**
     * An item was transferred
     **/
    ItemTransferred: GenericPalletEvent<
      Rv,
      'NFT',
      'ItemTransferred',
      { from: AccountId32; to: AccountId32; collectionId: bigint; itemId: bigint }
    >;

    /**
     * An item was burned
     **/
    ItemBurned: GenericPalletEvent<
      Rv,
      'NFT',
      'ItemBurned',
      { owner: AccountId32; collectionId: bigint; itemId: bigint }
    >;

    /**
     * A collection was destroyed
     **/
    CollectionDestroyed: GenericPalletEvent<
      Rv,
      'NFT',
      'CollectionDestroyed',
      { owner: AccountId32; collectionId: bigint }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Marketplace`'s events
   **/
  marketplace: {
    /**
     * The price for a token was updated
     **/
    TokenPriceUpdated: GenericPalletEvent<
      Rv,
      'Marketplace',
      'TokenPriceUpdated',
      { who: AccountId32; collection: bigint; item: bigint; price?: bigint | undefined }
    >;

    /**
     * Token was sold to a new owner
     **/
    TokenSold: GenericPalletEvent<
      Rv,
      'Marketplace',
      'TokenSold',
      { owner: AccountId32; buyer: AccountId32; collection: bigint; item: bigint; price: bigint }
    >;

    /**
     * Offer was placed on a token
     **/
    OfferPlaced: GenericPalletEvent<
      Rv,
      'Marketplace',
      'OfferPlaced',
      { who: AccountId32; collection: bigint; item: bigint; amount: bigint; expires: number }
    >;

    /**
     * Offer was withdrawn
     **/
    OfferWithdrawn: GenericPalletEvent<
      Rv,
      'Marketplace',
      'OfferWithdrawn',
      { who: AccountId32; collection: bigint; item: bigint }
    >;

    /**
     * Offer was accepted
     **/
    OfferAccepted: GenericPalletEvent<
      Rv,
      'Marketplace',
      'OfferAccepted',
      { who: AccountId32; collection: bigint; item: bigint; amount: bigint; maker: AccountId32 }
    >;

    /**
     * Royalty hs been paid to the author
     **/
    RoyaltyPaid: GenericPalletEvent<
      Rv,
      'Marketplace',
      'RoyaltyPaid',
      { collection: bigint; item: bigint; author: AccountId32; royalty: number; royaltyAmount: bigint }
    >;

    /**
     * Marketplace data has been added
     **/
    RoyaltyAdded: GenericPalletEvent<
      Rv,
      'Marketplace',
      'RoyaltyAdded',
      { collection: bigint; item: bigint; author: AccountId32; royalty: number }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `TransactionPause`'s events
   **/
  transactionPause: {
    /**
     * Paused transaction
     **/
    TransactionPaused: GenericPalletEvent<
      Rv,
      'TransactionPause',
      'TransactionPaused',
      { palletNameBytes: Bytes; functionNameBytes: Bytes }
    >;

    /**
     * Unpaused transaction
     **/
    TransactionUnpaused: GenericPalletEvent<
      Rv,
      'TransactionPause',
      'TransactionUnpaused',
      { palletNameBytes: Bytes; functionNameBytes: Bytes }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Router`'s events
   **/
  router: {
    /**
     * The route with trades has been successfully executed
     **/
    Executed: GenericPalletEvent<
      Rv,
      'Router',
      'Executed',
      { assetIn: number; assetOut: number; amountIn: bigint; amountOut: bigint; eventId: number }
    >;

    /**
     * The route with trades has been successfully executed
     **/
    RouteUpdated: GenericPalletEvent<Rv, 'Router', 'RouteUpdated', { assetIds: Array<number> }>;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `XYKLiquidityMining`'s events
   **/
  xykLiquidityMining: {
    /**
     * New global farm was created.
     **/
    GlobalFarmCreated: GenericPalletEvent<
      Rv,
      'XYKLiquidityMining',
      'GlobalFarmCreated',
      {
        id: number;
        owner: AccountId32;
        totalRewards: bigint;
        rewardCurrency: number;
        yieldPerPeriod: Perquintill;
        plannedYieldingPeriods: number;
        blocksPerPeriod: number;
        incentivizedAsset: number;
        maxRewardPerPeriod: bigint;
        minDeposit: bigint;
        priceAdjustment: FixedU128;
      }
    >;

    /**
     * Global farm's `price_adjustment` was updated.
     **/
    GlobalFarmUpdated: GenericPalletEvent<
      Rv,
      'XYKLiquidityMining',
      'GlobalFarmUpdated',
      { id: number; priceAdjustment: FixedU128 }
    >;

    /**
     * New yield farm was added into the farm.
     **/
    YieldFarmCreated: GenericPalletEvent<
      Rv,
      'XYKLiquidityMining',
      'YieldFarmCreated',
      {
        globalFarmId: number;
        yieldFarmId: number;
        multiplier: FixedU128;
        assetPair: PalletXykAssetPair;
        loyaltyCurve?: PalletLiquidityMiningLoyaltyCurve | undefined;
      }
    >;

    /**
     * Global farm was terminated.
     **/
    GlobalFarmTerminated: GenericPalletEvent<
      Rv,
      'XYKLiquidityMining',
      'GlobalFarmTerminated',
      { globalFarmId: number; who: AccountId32; rewardCurrency: number; undistributedRewards: bigint }
    >;

    /**
     * New LP tokens was deposited.
     **/
    SharesDeposited: GenericPalletEvent<
      Rv,
      'XYKLiquidityMining',
      'SharesDeposited',
      {
        globalFarmId: number;
        yieldFarmId: number;
        who: AccountId32;
        amount: bigint;
        lpToken: number;
        depositId: bigint;
      }
    >;

    /**
     * LP token was redeposited for a new yield farm entry
     **/
    SharesRedeposited: GenericPalletEvent<
      Rv,
      'XYKLiquidityMining',
      'SharesRedeposited',
      {
        globalFarmId: number;
        yieldFarmId: number;
        who: AccountId32;
        amount: bigint;
        lpToken: number;
        depositId: bigint;
      }
    >;

    /**
     * Rewards was claimed.
     **/
    RewardClaimed: GenericPalletEvent<
      Rv,
      'XYKLiquidityMining',
      'RewardClaimed',
      {
        globalFarmId: number;
        yieldFarmId: number;
        who: AccountId32;
        claimed: bigint;
        rewardCurrency: number;
        depositId: bigint;
      }
    >;

    /**
     * LP tokens was withdrawn.
     **/
    SharesWithdrawn: GenericPalletEvent<
      Rv,
      'XYKLiquidityMining',
      'SharesWithdrawn',
      {
        globalFarmId: number;
        yieldFarmId: number;
        who: AccountId32;
        lpToken: number;
        amount: bigint;
        depositId: bigint;
      }
    >;

    /**
     * Yield farm for asset pair was stopped.
     **/
    YieldFarmStopped: GenericPalletEvent<
      Rv,
      'XYKLiquidityMining',
      'YieldFarmStopped',
      { globalFarmId: number; yieldFarmId: number; who: AccountId32; assetPair: PalletXykAssetPair }
    >;

    /**
     * Yield farm for asset pair was resumed.
     **/
    YieldFarmResumed: GenericPalletEvent<
      Rv,
      'XYKLiquidityMining',
      'YieldFarmResumed',
      {
        globalFarmId: number;
        yieldFarmId: number;
        who: AccountId32;
        assetPair: PalletXykAssetPair;
        multiplier: FixedU128;
      }
    >;

    /**
     * Yield farm was terminated from global farm.
     **/
    YieldFarmTerminated: GenericPalletEvent<
      Rv,
      'XYKLiquidityMining',
      'YieldFarmTerminated',
      { globalFarmId: number; yieldFarmId: number; who: AccountId32; assetPair: PalletXykAssetPair }
    >;

    /**
     * Yield farm multiplier was updated.
     **/
    YieldFarmUpdated: GenericPalletEvent<
      Rv,
      'XYKLiquidityMining',
      'YieldFarmUpdated',
      {
        globalFarmId: number;
        yieldFarmId: number;
        who: AccountId32;
        assetPair: PalletXykAssetPair;
        multiplier: FixedU128;
      }
    >;

    /**
     * NFT representing deposit has been destroyed
     **/
    DepositDestroyed: GenericPalletEvent<
      Rv,
      'XYKLiquidityMining',
      'DepositDestroyed',
      { who: AccountId32; depositId: bigint }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `XYKWarehouseLM`'s events
   **/
  xykWarehouseLM: {
    /**
     * Global farm accumulated reward per share was updated.
     **/
    GlobalFarmAccRPZUpdated: GenericPalletEvent<
      Rv,
      'XYKWarehouseLM',
      'GlobalFarmAccRPZUpdated',
      { globalFarmId: number; accumulatedRpz: FixedU128; totalSharesZ: bigint }
    >;

    /**
     * Yield farm accumulated reward per valued share was updated.
     **/
    YieldFarmAccRPVSUpdated: GenericPalletEvent<
      Rv,
      'XYKWarehouseLM',
      'YieldFarmAccRPVSUpdated',
      { globalFarmId: number; yieldFarmId: number; accumulatedRpvs: FixedU128; totalValuedShares: bigint }
    >;

    /**
     * Global farm has no more rewards to distribute in the moment.
     **/
    AllRewardsDistributed: GenericPalletEvent<Rv, 'XYKWarehouseLM', 'AllRewardsDistributed', { globalFarmId: number }>;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `CollatorRewards`'s events
   **/
  collatorRewards: {
    /**
     * Collator was rewarded.
     **/
    CollatorRewarded: GenericPalletEvent<
      Rv,
      'CollatorRewards',
      'CollatorRewarded',
      { who: AccountId32; amount: bigint; currency: number }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Broadcast`'s events
   **/
  broadcast: {
    /**
     * Trade executed.
     **/
    Swapped: GenericPalletEvent<
      Rv,
      'Broadcast',
      'Swapped',
      {
        swapper: AccountId32;
        filler: AccountId32;
        fillerType: PalletBroadcastFiller;
        operation: PalletBroadcastTradeOperation;
        inputs: Array<PalletBroadcastAsset>;
        outputs: Array<PalletBroadcastAsset>;
        fees: Array<PalletBroadcastFee>;
        operationStack: Array<PalletBroadcastExecutionType>;
      }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `EmaOracle`'s events
   **/
  emaOracle: {
    /**
     * Oracle was added to the whitelist.
     **/
    AddedToWhitelist: GenericPalletEvent<
      Rv,
      'EmaOracle',
      'AddedToWhitelist',
      { source: FixedBytes<8>; assets: [number, number] }
    >;

    /**
     * Oracle was removed from the whitelist.
     **/
    RemovedFromWhitelist: GenericPalletEvent<
      Rv,
      'EmaOracle',
      'RemovedFromWhitelist',
      { source: FixedBytes<8>; assets: [number, number] }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Currencies`'s events
   **/
  currencies: {
    /**
     * Currency transfer success.
     **/
    Transferred: GenericPalletEvent<
      Rv,
      'Currencies',
      'Transferred',
      { currencyId: number; from: AccountId32; to: AccountId32; amount: bigint }
    >;

    /**
     * Update balance success.
     **/
    BalanceUpdated: GenericPalletEvent<
      Rv,
      'Currencies',
      'BalanceUpdated',
      { currencyId: number; who: AccountId32; amount: bigint }
    >;

    /**
     * Deposit success.
     **/
    Deposited: GenericPalletEvent<
      Rv,
      'Currencies',
      'Deposited',
      { currencyId: number; who: AccountId32; amount: bigint }
    >;

    /**
     * Withdraw success.
     **/
    Withdrawn: GenericPalletEvent<
      Rv,
      'Currencies',
      'Withdrawn',
      { currencyId: number; who: AccountId32; amount: bigint }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Tokens`'s events
   **/
  tokens: {
    /**
     * An account was created with some free balance.
     **/
    Endowed: GenericPalletEvent<Rv, 'Tokens', 'Endowed', { currencyId: number; who: AccountId32; amount: bigint }>;

    /**
     * An account was removed whose balance was non-zero but below
     * ExistentialDeposit, resulting in an outright loss.
     **/
    DustLost: GenericPalletEvent<Rv, 'Tokens', 'DustLost', { currencyId: number; who: AccountId32; amount: bigint }>;

    /**
     * Transfer succeeded.
     **/
    Transfer: GenericPalletEvent<
      Rv,
      'Tokens',
      'Transfer',
      { currencyId: number; from: AccountId32; to: AccountId32; amount: bigint }
    >;

    /**
     * Some balance was reserved (moved from free to reserved).
     **/
    Reserved: GenericPalletEvent<Rv, 'Tokens', 'Reserved', { currencyId: number; who: AccountId32; amount: bigint }>;

    /**
     * Some balance was unreserved (moved from reserved to free).
     **/
    Unreserved: GenericPalletEvent<
      Rv,
      'Tokens',
      'Unreserved',
      { currencyId: number; who: AccountId32; amount: bigint }
    >;

    /**
     * Some reserved balance was repatriated (moved from reserved to
     * another account).
     **/
    ReserveRepatriated: GenericPalletEvent<
      Rv,
      'Tokens',
      'ReserveRepatriated',
      {
        currencyId: number;
        from: AccountId32;
        to: AccountId32;
        amount: bigint;
        status: FrameSupportTokensMiscBalanceStatus;
      }
    >;

    /**
     * A balance was set by root.
     **/
    BalanceSet: GenericPalletEvent<
      Rv,
      'Tokens',
      'BalanceSet',
      { currencyId: number; who: AccountId32; free: bigint; reserved: bigint }
    >;

    /**
     * The total issuance of an currency has been set
     **/
    TotalIssuanceSet: GenericPalletEvent<Rv, 'Tokens', 'TotalIssuanceSet', { currencyId: number; amount: bigint }>;

    /**
     * Some balances were withdrawn (e.g. pay for transaction fee)
     **/
    Withdrawn: GenericPalletEvent<Rv, 'Tokens', 'Withdrawn', { currencyId: number; who: AccountId32; amount: bigint }>;

    /**
     * Some balances were slashed (e.g. due to mis-behavior)
     **/
    Slashed: GenericPalletEvent<
      Rv,
      'Tokens',
      'Slashed',
      { currencyId: number; who: AccountId32; freeAmount: bigint; reservedAmount: bigint }
    >;

    /**
     * Deposited some balance into an account
     **/
    Deposited: GenericPalletEvent<Rv, 'Tokens', 'Deposited', { currencyId: number; who: AccountId32; amount: bigint }>;

    /**
     * Some funds are locked
     **/
    LockSet: GenericPalletEvent<
      Rv,
      'Tokens',
      'LockSet',
      { lockId: FixedBytes<8>; currencyId: number; who: AccountId32; amount: bigint }
    >;

    /**
     * Some locked funds were unlocked
     **/
    LockRemoved: GenericPalletEvent<
      Rv,
      'Tokens',
      'LockRemoved',
      { lockId: FixedBytes<8>; currencyId: number; who: AccountId32 }
    >;

    /**
     * Some free balance was locked.
     **/
    Locked: GenericPalletEvent<Rv, 'Tokens', 'Locked', { currencyId: number; who: AccountId32; amount: bigint }>;

    /**
     * Some locked balance was freed.
     **/
    Unlocked: GenericPalletEvent<Rv, 'Tokens', 'Unlocked', { currencyId: number; who: AccountId32; amount: bigint }>;
    Issued: GenericPalletEvent<Rv, 'Tokens', 'Issued', { currencyId: number; amount: bigint }>;
    Rescinded: GenericPalletEvent<Rv, 'Tokens', 'Rescinded', { currencyId: number; amount: bigint }>;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `OrmlXcm`'s events
   **/
  ormlXcm: {
    /**
     * XCM message sent. \[to, message\]
     **/
    Sent: GenericPalletEvent<Rv, 'OrmlXcm', 'Sent', { to: StagingXcmV4Location; message: StagingXcmV4Xcm }>;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `XTokens`'s events
   **/
  xTokens: {
    /**
     * Transferred `Asset` with fee.
     **/
    TransferredAssets: GenericPalletEvent<
      Rv,
      'XTokens',
      'TransferredAssets',
      { sender: AccountId32; assets: StagingXcmV4AssetAssets; fee: StagingXcmV4Asset; dest: StagingXcmV4Location }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `UnknownTokens`'s events
   **/
  unknownTokens: {
    /**
     * Deposit success.
     **/
    Deposited: GenericPalletEvent<
      Rv,
      'UnknownTokens',
      'Deposited',
      { asset: StagingXcmV4Asset; who: StagingXcmV4Location }
    >;

    /**
     * Withdraw success.
     **/
    Withdrawn: GenericPalletEvent<
      Rv,
      'UnknownTokens',
      'Withdrawn',
      { asset: StagingXcmV4Asset; who: StagingXcmV4Location }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
}
