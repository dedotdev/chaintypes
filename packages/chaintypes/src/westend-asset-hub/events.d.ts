// Generated by dedot cli

import type { GenericChainEvents, GenericPalletEvent, RpcVersion } from 'dedot/types';
import type {
  DispatchError,
  AccountId32,
  H256,
  FixedBytes,
  Bytes,
  Result,
  FixedU128,
  Permill,
  H160,
  Perbill,
} from 'dedot/codecs';
import type {
  FrameSystemDispatchEventInfo,
  SpWeightsWeightV2Weight,
  FrameSupportTokensMiscBalanceStatus,
  StagingXcmV5Location,
  StagingXcmV5TraitsOutcome,
  StagingXcmV5Xcm,
  XcmV3TraitsSendError,
  XcmV5TraitsError,
  StagingXcmV5Response,
  XcmVersionedAssets,
  StagingXcmV5AssetAssets,
  XcmVersionedLocation,
  CumulusPrimitivesCoreAggregateMessageOrigin,
  FrameSupportMessagesProcessMessageError,
  SnowbridgeCoreOperatingModeBasicOperatingMode,
  PalletMultisigTimepoint,
  AssetHubWestendRuntimeProxyType,
  PalletProxyDepositKind,
  PalletNftsAttributeNamespace,
  PalletNftsPriceWithDirection,
  PalletNftsPalletAttributes,
  PalletStateTrieMigrationMigrationCompute,
  PalletStateTrieMigrationError,
  PalletStakingAsyncRewardDestination,
  PalletStakingAsyncValidatorPrefs,
  PalletStakingAsyncForcing,
  PalletNominationPoolsPoolState,
  PalletNominationPoolsCommissionChangeRate,
  PalletNominationPoolsCommissionClaimPermission,
  PalletNominationPoolsClaimPermission,
  PalletStakingAsyncRcClientUnexpectedKind,
  PalletElectionProviderMultiBlockPhase,
  PalletElectionProviderMultiBlockVerifierFeasibilityError,
  SpNposElectionsElectionScore,
  PalletConvictionVotingVoteAccountVote,
  FrameSupportPreimagesBounded,
  PalletConvictionVotingTally,
  FrameSupportDispatchPostDispatchInfo,
  SpRuntimeDispatchErrorWithPostInfo,
  PolkadotRuntimeCommonImplsVersionedLocatableAsset,
  PolkadotParachainPrimitivesPrimitivesId,
  PalletAhMigratorMigrationStage,
  PalletAhMigratorPalletEventName,
} from './types.js';

export interface ChainEvents<Rv extends RpcVersion> extends GenericChainEvents<Rv> {
  /**
   * Pallet `System`'s events
   **/
  system: {
    /**
     * An extrinsic completed successfully.
     **/
    ExtrinsicSuccess: GenericPalletEvent<
      Rv,
      'System',
      'ExtrinsicSuccess',
      { dispatchInfo: FrameSystemDispatchEventInfo }
    >;

    /**
     * An extrinsic failed.
     **/
    ExtrinsicFailed: GenericPalletEvent<
      Rv,
      'System',
      'ExtrinsicFailed',
      { dispatchError: DispatchError; dispatchInfo: FrameSystemDispatchEventInfo }
    >;

    /**
     * `:code` was updated.
     **/
    CodeUpdated: GenericPalletEvent<Rv, 'System', 'CodeUpdated', null>;

    /**
     * A new account was created.
     **/
    NewAccount: GenericPalletEvent<Rv, 'System', 'NewAccount', { account: AccountId32 }>;

    /**
     * An account was reaped.
     **/
    KilledAccount: GenericPalletEvent<Rv, 'System', 'KilledAccount', { account: AccountId32 }>;

    /**
     * On on-chain remark happened.
     **/
    Remarked: GenericPalletEvent<Rv, 'System', 'Remarked', { sender: AccountId32; hash: H256 }>;

    /**
     * An upgrade was authorized.
     **/
    UpgradeAuthorized: GenericPalletEvent<Rv, 'System', 'UpgradeAuthorized', { codeHash: H256; checkVersion: boolean }>;

    /**
     * An invalid authorized upgrade was rejected while trying to apply it.
     **/
    RejectedInvalidAuthorizedUpgrade: GenericPalletEvent<
      Rv,
      'System',
      'RejectedInvalidAuthorizedUpgrade',
      { codeHash: H256; error: DispatchError }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `ParachainSystem`'s events
   **/
  parachainSystem: {
    /**
     * The validation function has been scheduled to apply.
     **/
    ValidationFunctionStored: GenericPalletEvent<Rv, 'ParachainSystem', 'ValidationFunctionStored', null>;

    /**
     * The validation function was applied as of the contained relay chain block number.
     **/
    ValidationFunctionApplied: GenericPalletEvent<
      Rv,
      'ParachainSystem',
      'ValidationFunctionApplied',
      { relayChainBlockNum: number }
    >;

    /**
     * The relay-chain aborted the upgrade process.
     **/
    ValidationFunctionDiscarded: GenericPalletEvent<Rv, 'ParachainSystem', 'ValidationFunctionDiscarded', null>;

    /**
     * Some downward messages have been received and will be processed.
     **/
    DownwardMessagesReceived: GenericPalletEvent<Rv, 'ParachainSystem', 'DownwardMessagesReceived', { count: number }>;

    /**
     * Downward messages were processed using the given weight.
     **/
    DownwardMessagesProcessed: GenericPalletEvent<
      Rv,
      'ParachainSystem',
      'DownwardMessagesProcessed',
      { weightUsed: SpWeightsWeightV2Weight; dmqHead: H256 }
    >;

    /**
     * An upward message was sent to the relay chain.
     **/
    UpwardMessageSent: GenericPalletEvent<
      Rv,
      'ParachainSystem',
      'UpwardMessageSent',
      { messageHash?: FixedBytes<32> | undefined }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `MultiBlockMigrations`'s events
   **/
  multiBlockMigrations: {
    /**
     * A Runtime upgrade started.
     *
     * Its end is indicated by `UpgradeCompleted` or `UpgradeFailed`.
     **/
    UpgradeStarted: GenericPalletEvent<
      Rv,
      'MultiBlockMigrations',
      'UpgradeStarted',
      {
        /**
         * The number of migrations that this upgrade contains.
         *
         * This can be used to design a progress indicator in combination with counting the
         * `MigrationCompleted` and `MigrationSkipped` events.
         **/
        migrations: number;
      }
    >;

    /**
     * The current runtime upgrade completed.
     *
     * This implies that all of its migrations completed successfully as well.
     **/
    UpgradeCompleted: GenericPalletEvent<Rv, 'MultiBlockMigrations', 'UpgradeCompleted', null>;

    /**
     * Runtime upgrade failed.
     *
     * This is very bad and will require governance intervention.
     **/
    UpgradeFailed: GenericPalletEvent<Rv, 'MultiBlockMigrations', 'UpgradeFailed', null>;

    /**
     * A migration was skipped since it was already executed in the past.
     **/
    MigrationSkipped: GenericPalletEvent<
      Rv,
      'MultiBlockMigrations',
      'MigrationSkipped',
      {
        /**
         * The index of the skipped migration within the [`Config::Migrations`] list.
         **/
        index: number;
      }
    >;

    /**
     * A migration progressed.
     **/
    MigrationAdvanced: GenericPalletEvent<
      Rv,
      'MultiBlockMigrations',
      'MigrationAdvanced',
      {
        /**
         * The index of the migration within the [`Config::Migrations`] list.
         **/
        index: number;

        /**
         * The number of blocks that this migration took so far.
         **/
        took: number;
      }
    >;

    /**
     * A Migration completed.
     **/
    MigrationCompleted: GenericPalletEvent<
      Rv,
      'MultiBlockMigrations',
      'MigrationCompleted',
      {
        /**
         * The index of the migration within the [`Config::Migrations`] list.
         **/
        index: number;

        /**
         * The number of blocks that this migration took so far.
         **/
        took: number;
      }
    >;

    /**
     * A Migration failed.
     *
     * This implies that the whole upgrade failed and governance intervention is required.
     **/
    MigrationFailed: GenericPalletEvent<
      Rv,
      'MultiBlockMigrations',
      'MigrationFailed',
      {
        /**
         * The index of the migration within the [`Config::Migrations`] list.
         **/
        index: number;

        /**
         * The number of blocks that this migration took so far.
         **/
        took: number;
      }
    >;

    /**
     * The set of historical migrations has been cleared.
     **/
    HistoricCleared: GenericPalletEvent<
      Rv,
      'MultiBlockMigrations',
      'HistoricCleared',
      {
        /**
         * Should be passed to `clear_historic` in a successive call.
         **/
        nextCursor?: Bytes | undefined;
      }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Preimage`'s events
   **/
  preimage: {
    /**
     * A preimage has been noted.
     **/
    Noted: GenericPalletEvent<Rv, 'Preimage', 'Noted', { hash: H256 }>;

    /**
     * A preimage has been requested.
     **/
    Requested: GenericPalletEvent<Rv, 'Preimage', 'Requested', { hash: H256 }>;

    /**
     * A preimage has ben cleared.
     **/
    Cleared: GenericPalletEvent<Rv, 'Preimage', 'Cleared', { hash: H256 }>;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Scheduler`'s events
   **/
  scheduler: {
    /**
     * Scheduled some task.
     **/
    Scheduled: GenericPalletEvent<Rv, 'Scheduler', 'Scheduled', { when: number; index: number }>;

    /**
     * Canceled some task.
     **/
    Canceled: GenericPalletEvent<Rv, 'Scheduler', 'Canceled', { when: number; index: number }>;

    /**
     * Dispatched some task.
     **/
    Dispatched: GenericPalletEvent<
      Rv,
      'Scheduler',
      'Dispatched',
      { task: [number, number]; id?: FixedBytes<32> | undefined; result: Result<[], DispatchError> }
    >;

    /**
     * Set a retry configuration for some task.
     **/
    RetrySet: GenericPalletEvent<
      Rv,
      'Scheduler',
      'RetrySet',
      { task: [number, number]; id?: FixedBytes<32> | undefined; period: number; retries: number }
    >;

    /**
     * Cancel a retry configuration for some task.
     **/
    RetryCancelled: GenericPalletEvent<
      Rv,
      'Scheduler',
      'RetryCancelled',
      { task: [number, number]; id?: FixedBytes<32> | undefined }
    >;

    /**
     * The call for the provided hash was not found so the task has been aborted.
     **/
    CallUnavailable: GenericPalletEvent<
      Rv,
      'Scheduler',
      'CallUnavailable',
      { task: [number, number]; id?: FixedBytes<32> | undefined }
    >;

    /**
     * The given task was unable to be renewed since the agenda is full at that block.
     **/
    PeriodicFailed: GenericPalletEvent<
      Rv,
      'Scheduler',
      'PeriodicFailed',
      { task: [number, number]; id?: FixedBytes<32> | undefined }
    >;

    /**
     * The given task was unable to be retried since the agenda is full at that block or there
     * was not enough weight to reschedule it.
     **/
    RetryFailed: GenericPalletEvent<
      Rv,
      'Scheduler',
      'RetryFailed',
      { task: [number, number]; id?: FixedBytes<32> | undefined }
    >;

    /**
     * The given task can never be executed since it is overweight.
     **/
    PermanentlyOverweight: GenericPalletEvent<
      Rv,
      'Scheduler',
      'PermanentlyOverweight',
      { task: [number, number]; id?: FixedBytes<32> | undefined }
    >;

    /**
     * Agenda is incomplete from `when`.
     **/
    AgendaIncomplete: GenericPalletEvent<Rv, 'Scheduler', 'AgendaIncomplete', { when: number }>;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Sudo`'s events
   **/
  sudo: {
    /**
     * A sudo call just took place.
     **/
    Sudid: GenericPalletEvent<
      Rv,
      'Sudo',
      'Sudid',
      {
        /**
         * The result of the call made by the sudo user.
         **/
        sudoResult: Result<[], DispatchError>;
      }
    >;

    /**
     * The sudo key has been updated.
     **/
    KeyChanged: GenericPalletEvent<
      Rv,
      'Sudo',
      'KeyChanged',
      {
        /**
         * The old sudo key (if one was previously set).
         **/
        old?: AccountId32 | undefined;

        /**
         * The new sudo key (if one was set).
         **/
        new: AccountId32;
      }
    >;

    /**
     * The key was permanently removed.
     **/
    KeyRemoved: GenericPalletEvent<Rv, 'Sudo', 'KeyRemoved', null>;

    /**
     * A [sudo_as](Pallet::sudo_as) call just took place.
     **/
    SudoAsDone: GenericPalletEvent<
      Rv,
      'Sudo',
      'SudoAsDone',
      {
        /**
         * The result of the call made by the sudo user.
         **/
        sudoResult: Result<[], DispatchError>;
      }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Balances`'s events
   **/
  balances: {
    /**
     * An account was created with some free balance.
     **/
    Endowed: GenericPalletEvent<Rv, 'Balances', 'Endowed', { account: AccountId32; freeBalance: bigint }>;

    /**
     * An account was removed whose balance was non-zero but below ExistentialDeposit,
     * resulting in an outright loss.
     **/
    DustLost: GenericPalletEvent<Rv, 'Balances', 'DustLost', { account: AccountId32; amount: bigint }>;

    /**
     * Transfer succeeded.
     **/
    Transfer: GenericPalletEvent<Rv, 'Balances', 'Transfer', { from: AccountId32; to: AccountId32; amount: bigint }>;

    /**
     * A balance was set by root.
     **/
    BalanceSet: GenericPalletEvent<Rv, 'Balances', 'BalanceSet', { who: AccountId32; free: bigint }>;

    /**
     * Some balance was reserved (moved from free to reserved).
     **/
    Reserved: GenericPalletEvent<Rv, 'Balances', 'Reserved', { who: AccountId32; amount: bigint }>;

    /**
     * Some balance was unreserved (moved from reserved to free).
     **/
    Unreserved: GenericPalletEvent<Rv, 'Balances', 'Unreserved', { who: AccountId32; amount: bigint }>;

    /**
     * Some balance was moved from the reserve of the first account to the second account.
     * Final argument indicates the destination balance type.
     **/
    ReserveRepatriated: GenericPalletEvent<
      Rv,
      'Balances',
      'ReserveRepatriated',
      { from: AccountId32; to: AccountId32; amount: bigint; destinationStatus: FrameSupportTokensMiscBalanceStatus }
    >;

    /**
     * Some amount was deposited (e.g. for transaction fees).
     **/
    Deposit: GenericPalletEvent<Rv, 'Balances', 'Deposit', { who: AccountId32; amount: bigint }>;

    /**
     * Some amount was withdrawn from the account (e.g. for transaction fees).
     **/
    Withdraw: GenericPalletEvent<Rv, 'Balances', 'Withdraw', { who: AccountId32; amount: bigint }>;

    /**
     * Some amount was removed from the account (e.g. for misbehavior).
     **/
    Slashed: GenericPalletEvent<Rv, 'Balances', 'Slashed', { who: AccountId32; amount: bigint }>;

    /**
     * Some amount was minted into an account.
     **/
    Minted: GenericPalletEvent<Rv, 'Balances', 'Minted', { who: AccountId32; amount: bigint }>;

    /**
     * Some amount was burned from an account.
     **/
    Burned: GenericPalletEvent<Rv, 'Balances', 'Burned', { who: AccountId32; amount: bigint }>;

    /**
     * Some amount was suspended from an account (it can be restored later).
     **/
    Suspended: GenericPalletEvent<Rv, 'Balances', 'Suspended', { who: AccountId32; amount: bigint }>;

    /**
     * Some amount was restored into an account.
     **/
    Restored: GenericPalletEvent<Rv, 'Balances', 'Restored', { who: AccountId32; amount: bigint }>;

    /**
     * An account was upgraded.
     **/
    Upgraded: GenericPalletEvent<Rv, 'Balances', 'Upgraded', { who: AccountId32 }>;

    /**
     * Total issuance was increased by `amount`, creating a credit to be balanced.
     **/
    Issued: GenericPalletEvent<Rv, 'Balances', 'Issued', { amount: bigint }>;

    /**
     * Total issuance was decreased by `amount`, creating a debt to be balanced.
     **/
    Rescinded: GenericPalletEvent<Rv, 'Balances', 'Rescinded', { amount: bigint }>;

    /**
     * Some balance was locked.
     **/
    Locked: GenericPalletEvent<Rv, 'Balances', 'Locked', { who: AccountId32; amount: bigint }>;

    /**
     * Some balance was unlocked.
     **/
    Unlocked: GenericPalletEvent<Rv, 'Balances', 'Unlocked', { who: AccountId32; amount: bigint }>;

    /**
     * Some balance was frozen.
     **/
    Frozen: GenericPalletEvent<Rv, 'Balances', 'Frozen', { who: AccountId32; amount: bigint }>;

    /**
     * Some balance was thawed.
     **/
    Thawed: GenericPalletEvent<Rv, 'Balances', 'Thawed', { who: AccountId32; amount: bigint }>;

    /**
     * The `TotalIssuance` was forcefully changed.
     **/
    TotalIssuanceForced: GenericPalletEvent<Rv, 'Balances', 'TotalIssuanceForced', { old: bigint; new: bigint }>;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `TransactionPayment`'s events
   **/
  transactionPayment: {
    /**
     * A transaction fee `actual_fee`, of which `tip` was added to the minimum inclusion fee,
     * has been paid by `who`.
     **/
    TransactionFeePaid: GenericPalletEvent<
      Rv,
      'TransactionPayment',
      'TransactionFeePaid',
      { who: AccountId32; actualFee: bigint; tip: bigint }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `AssetTxPayment`'s events
   **/
  assetTxPayment: {
    /**
     * A transaction fee `actual_fee`, of which `tip` was added to the minimum inclusion fee,
     * has been paid by `who` in an asset `asset_id`.
     **/
    AssetTxFeePaid: GenericPalletEvent<
      Rv,
      'AssetTxPayment',
      'AssetTxFeePaid',
      { who: AccountId32; actualFee: bigint; tip: bigint; assetId: StagingXcmV5Location }
    >;

    /**
     * A swap of the refund in native currency back to asset failed.
     **/
    AssetRefundFailed: GenericPalletEvent<Rv, 'AssetTxPayment', 'AssetRefundFailed', { nativeAmountKept: bigint }>;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Vesting`'s events
   **/
  vesting: {
    /**
     * A vesting schedule has been created.
     **/
    VestingCreated: GenericPalletEvent<
      Rv,
      'Vesting',
      'VestingCreated',
      { account: AccountId32; scheduleIndex: number }
    >;

    /**
     * The amount vested has been updated. This could indicate a change in funds available.
     * The balance given is the amount which is left unvested (and thus locked).
     **/
    VestingUpdated: GenericPalletEvent<Rv, 'Vesting', 'VestingUpdated', { account: AccountId32; unvested: bigint }>;

    /**
     * An \[account\] has become fully vested.
     **/
    VestingCompleted: GenericPalletEvent<Rv, 'Vesting', 'VestingCompleted', { account: AccountId32 }>;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `CollatorSelection`'s events
   **/
  collatorSelection: {
    /**
     * New Invulnerables were set.
     **/
    NewInvulnerables: GenericPalletEvent<
      Rv,
      'CollatorSelection',
      'NewInvulnerables',
      { invulnerables: Array<AccountId32> }
    >;

    /**
     * A new Invulnerable was added.
     **/
    InvulnerableAdded: GenericPalletEvent<Rv, 'CollatorSelection', 'InvulnerableAdded', { accountId: AccountId32 }>;

    /**
     * An Invulnerable was removed.
     **/
    InvulnerableRemoved: GenericPalletEvent<Rv, 'CollatorSelection', 'InvulnerableRemoved', { accountId: AccountId32 }>;

    /**
     * The number of desired candidates was set.
     **/
    NewDesiredCandidates: GenericPalletEvent<
      Rv,
      'CollatorSelection',
      'NewDesiredCandidates',
      { desiredCandidates: number }
    >;

    /**
     * The candidacy bond was set.
     **/
    NewCandidacyBond: GenericPalletEvent<Rv, 'CollatorSelection', 'NewCandidacyBond', { bondAmount: bigint }>;

    /**
     * A new candidate joined.
     **/
    CandidateAdded: GenericPalletEvent<
      Rv,
      'CollatorSelection',
      'CandidateAdded',
      { accountId: AccountId32; deposit: bigint }
    >;

    /**
     * Bond of a candidate updated.
     **/
    CandidateBondUpdated: GenericPalletEvent<
      Rv,
      'CollatorSelection',
      'CandidateBondUpdated',
      { accountId: AccountId32; deposit: bigint }
    >;

    /**
     * A candidate was removed.
     **/
    CandidateRemoved: GenericPalletEvent<Rv, 'CollatorSelection', 'CandidateRemoved', { accountId: AccountId32 }>;

    /**
     * An account was replaced in the candidate list by another one.
     **/
    CandidateReplaced: GenericPalletEvent<
      Rv,
      'CollatorSelection',
      'CandidateReplaced',
      { old: AccountId32; new: AccountId32; deposit: bigint }
    >;

    /**
     * An account was unable to be added to the Invulnerables because they did not have keys
     * registered. Other Invulnerables may have been set.
     **/
    InvalidInvulnerableSkipped: GenericPalletEvent<
      Rv,
      'CollatorSelection',
      'InvalidInvulnerableSkipped',
      { accountId: AccountId32 }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Session`'s events
   **/
  session: {
    /**
     * New session has happened. Note that the argument is the session index, not the
     * block number as the type might suggest.
     **/
    NewSession: GenericPalletEvent<Rv, 'Session', 'NewSession', { sessionIndex: number }>;

    /**
     * The `NewSession` event in the current block also implies a new validator set to be
     * queued.
     **/
    NewQueued: GenericPalletEvent<Rv, 'Session', 'NewQueued', null>;

    /**
     * Validator has been disabled.
     **/
    ValidatorDisabled: GenericPalletEvent<Rv, 'Session', 'ValidatorDisabled', { validator: AccountId32 }>;

    /**
     * Validator has been re-enabled.
     **/
    ValidatorReenabled: GenericPalletEvent<Rv, 'Session', 'ValidatorReenabled', { validator: AccountId32 }>;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `XcmpQueue`'s events
   **/
  xcmpQueue: {
    /**
     * An HRMP message was sent to a sibling parachain.
     **/
    XcmpMessageSent: GenericPalletEvent<Rv, 'XcmpQueue', 'XcmpMessageSent', { messageHash: FixedBytes<32> }>;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `PolkadotXcm`'s events
   **/
  polkadotXcm: {
    /**
     * Execution of an XCM message was attempted.
     **/
    Attempted: GenericPalletEvent<Rv, 'PolkadotXcm', 'Attempted', { outcome: StagingXcmV5TraitsOutcome }>;

    /**
     * An XCM message was sent.
     **/
    Sent: GenericPalletEvent<
      Rv,
      'PolkadotXcm',
      'Sent',
      {
        origin: StagingXcmV5Location;
        destination: StagingXcmV5Location;
        message: StagingXcmV5Xcm;
        messageId: FixedBytes<32>;
      }
    >;

    /**
     * An XCM message failed to send.
     **/
    SendFailed: GenericPalletEvent<
      Rv,
      'PolkadotXcm',
      'SendFailed',
      {
        origin: StagingXcmV5Location;
        destination: StagingXcmV5Location;
        error: XcmV3TraitsSendError;
        messageId: FixedBytes<32>;
      }
    >;

    /**
     * An XCM message failed to process.
     **/
    ProcessXcmError: GenericPalletEvent<
      Rv,
      'PolkadotXcm',
      'ProcessXcmError',
      { origin: StagingXcmV5Location; error: XcmV5TraitsError; messageId: FixedBytes<32> }
    >;

    /**
     * Query response received which does not match a registered query. This may be because a
     * matching query was never registered, it may be because it is a duplicate response, or
     * because the query timed out.
     **/
    UnexpectedResponse: GenericPalletEvent<
      Rv,
      'PolkadotXcm',
      'UnexpectedResponse',
      { origin: StagingXcmV5Location; queryId: bigint }
    >;

    /**
     * Query response has been received and is ready for taking with `take_response`. There is
     * no registered notification call.
     **/
    ResponseReady: GenericPalletEvent<
      Rv,
      'PolkadotXcm',
      'ResponseReady',
      { queryId: bigint; response: StagingXcmV5Response }
    >;

    /**
     * Query response has been received and query is removed. The registered notification has
     * been dispatched and executed successfully.
     **/
    Notified: GenericPalletEvent<
      Rv,
      'PolkadotXcm',
      'Notified',
      { queryId: bigint; palletIndex: number; callIndex: number }
    >;

    /**
     * Query response has been received and query is removed. The registered notification
     * could not be dispatched because the dispatch weight is greater than the maximum weight
     * originally budgeted by this runtime for the query result.
     **/
    NotifyOverweight: GenericPalletEvent<
      Rv,
      'PolkadotXcm',
      'NotifyOverweight',
      {
        queryId: bigint;
        palletIndex: number;
        callIndex: number;
        actualWeight: SpWeightsWeightV2Weight;
        maxBudgetedWeight: SpWeightsWeightV2Weight;
      }
    >;

    /**
     * Query response has been received and query is removed. There was a general error with
     * dispatching the notification call.
     **/
    NotifyDispatchError: GenericPalletEvent<
      Rv,
      'PolkadotXcm',
      'NotifyDispatchError',
      { queryId: bigint; palletIndex: number; callIndex: number }
    >;

    /**
     * Query response has been received and query is removed. The dispatch was unable to be
     * decoded into a `Call`; this might be due to dispatch function having a signature which
     * is not `(origin, QueryId, Response)`.
     **/
    NotifyDecodeFailed: GenericPalletEvent<
      Rv,
      'PolkadotXcm',
      'NotifyDecodeFailed',
      { queryId: bigint; palletIndex: number; callIndex: number }
    >;

    /**
     * Expected query response has been received but the origin location of the response does
     * not match that expected. The query remains registered for a later, valid, response to
     * be received and acted upon.
     **/
    InvalidResponder: GenericPalletEvent<
      Rv,
      'PolkadotXcm',
      'InvalidResponder',
      { origin: StagingXcmV5Location; queryId: bigint; expectedLocation?: StagingXcmV5Location | undefined }
    >;

    /**
     * Expected query response has been received but the expected origin location placed in
     * storage by this runtime previously cannot be decoded. The query remains registered.
     *
     * This is unexpected (since a location placed in storage in a previously executing
     * runtime should be readable prior to query timeout) and dangerous since the possibly
     * valid response will be dropped. Manual governance intervention is probably going to be
     * needed.
     **/
    InvalidResponderVersion: GenericPalletEvent<
      Rv,
      'PolkadotXcm',
      'InvalidResponderVersion',
      { origin: StagingXcmV5Location; queryId: bigint }
    >;

    /**
     * Received query response has been read and removed.
     **/
    ResponseTaken: GenericPalletEvent<Rv, 'PolkadotXcm', 'ResponseTaken', { queryId: bigint }>;

    /**
     * Some assets have been placed in an asset trap.
     **/
    AssetsTrapped: GenericPalletEvent<
      Rv,
      'PolkadotXcm',
      'AssetsTrapped',
      { hash: H256; origin: StagingXcmV5Location; assets: XcmVersionedAssets }
    >;

    /**
     * An XCM version change notification message has been attempted to be sent.
     *
     * The cost of sending it (borne by the chain) is included.
     **/
    VersionChangeNotified: GenericPalletEvent<
      Rv,
      'PolkadotXcm',
      'VersionChangeNotified',
      { destination: StagingXcmV5Location; result: number; cost: StagingXcmV5AssetAssets; messageId: FixedBytes<32> }
    >;

    /**
     * The supported version of a location has been changed. This might be through an
     * automatic notification or a manual intervention.
     **/
    SupportedVersionChanged: GenericPalletEvent<
      Rv,
      'PolkadotXcm',
      'SupportedVersionChanged',
      { location: StagingXcmV5Location; version: number }
    >;

    /**
     * A given location which had a version change subscription was dropped owing to an error
     * sending the notification to it.
     **/
    NotifyTargetSendFail: GenericPalletEvent<
      Rv,
      'PolkadotXcm',
      'NotifyTargetSendFail',
      { location: StagingXcmV5Location; queryId: bigint; error: XcmV5TraitsError }
    >;

    /**
     * A given location which had a version change subscription was dropped owing to an error
     * migrating the location to our new XCM format.
     **/
    NotifyTargetMigrationFail: GenericPalletEvent<
      Rv,
      'PolkadotXcm',
      'NotifyTargetMigrationFail',
      { location: XcmVersionedLocation; queryId: bigint }
    >;

    /**
     * Expected query response has been received but the expected querier location placed in
     * storage by this runtime previously cannot be decoded. The query remains registered.
     *
     * This is unexpected (since a location placed in storage in a previously executing
     * runtime should be readable prior to query timeout) and dangerous since the possibly
     * valid response will be dropped. Manual governance intervention is probably going to be
     * needed.
     **/
    InvalidQuerierVersion: GenericPalletEvent<
      Rv,
      'PolkadotXcm',
      'InvalidQuerierVersion',
      { origin: StagingXcmV5Location; queryId: bigint }
    >;

    /**
     * Expected query response has been received but the querier location of the response does
     * not match the expected. The query remains registered for a later, valid, response to
     * be received and acted upon.
     **/
    InvalidQuerier: GenericPalletEvent<
      Rv,
      'PolkadotXcm',
      'InvalidQuerier',
      {
        origin: StagingXcmV5Location;
        queryId: bigint;
        expectedQuerier: StagingXcmV5Location;
        maybeActualQuerier?: StagingXcmV5Location | undefined;
      }
    >;

    /**
     * A remote has requested XCM version change notification from us and we have honored it.
     * A version information message is sent to them and its cost is included.
     **/
    VersionNotifyStarted: GenericPalletEvent<
      Rv,
      'PolkadotXcm',
      'VersionNotifyStarted',
      { destination: StagingXcmV5Location; cost: StagingXcmV5AssetAssets; messageId: FixedBytes<32> }
    >;

    /**
     * We have requested that a remote chain send us XCM version change notifications.
     **/
    VersionNotifyRequested: GenericPalletEvent<
      Rv,
      'PolkadotXcm',
      'VersionNotifyRequested',
      { destination: StagingXcmV5Location; cost: StagingXcmV5AssetAssets; messageId: FixedBytes<32> }
    >;

    /**
     * We have requested that a remote chain stops sending us XCM version change
     * notifications.
     **/
    VersionNotifyUnrequested: GenericPalletEvent<
      Rv,
      'PolkadotXcm',
      'VersionNotifyUnrequested',
      { destination: StagingXcmV5Location; cost: StagingXcmV5AssetAssets; messageId: FixedBytes<32> }
    >;

    /**
     * Fees were paid from a location for an operation (often for using `SendXcm`).
     **/
    FeesPaid: GenericPalletEvent<
      Rv,
      'PolkadotXcm',
      'FeesPaid',
      { paying: StagingXcmV5Location; fees: StagingXcmV5AssetAssets }
    >;

    /**
     * Some assets have been claimed from an asset trap
     **/
    AssetsClaimed: GenericPalletEvent<
      Rv,
      'PolkadotXcm',
      'AssetsClaimed',
      { hash: H256; origin: StagingXcmV5Location; assets: XcmVersionedAssets }
    >;

    /**
     * A XCM version migration finished.
     **/
    VersionMigrationFinished: GenericPalletEvent<Rv, 'PolkadotXcm', 'VersionMigrationFinished', { version: number }>;

    /**
     * An `aliaser` location was authorized by `target` to alias it, authorization valid until
     * `expiry` block number.
     **/
    AliasAuthorized: GenericPalletEvent<
      Rv,
      'PolkadotXcm',
      'AliasAuthorized',
      { aliaser: StagingXcmV5Location; target: StagingXcmV5Location; expiry?: bigint | undefined }
    >;

    /**
     * `target` removed alias authorization for `aliaser`.
     **/
    AliasAuthorizationRemoved: GenericPalletEvent<
      Rv,
      'PolkadotXcm',
      'AliasAuthorizationRemoved',
      { aliaser: StagingXcmV5Location; target: StagingXcmV5Location }
    >;

    /**
     * `target` removed all alias authorizations.
     **/
    AliasesAuthorizationsRemoved: GenericPalletEvent<
      Rv,
      'PolkadotXcm',
      'AliasesAuthorizationsRemoved',
      { target: StagingXcmV5Location }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `CumulusXcm`'s events
   **/
  cumulusXcm: {
    /**
     * Downward message is invalid XCM.
     * \[ id \]
     **/
    InvalidFormat: GenericPalletEvent<Rv, 'CumulusXcm', 'InvalidFormat', FixedBytes<32>>;

    /**
     * Downward message is unsupported version of XCM.
     * \[ id \]
     **/
    UnsupportedVersion: GenericPalletEvent<Rv, 'CumulusXcm', 'UnsupportedVersion', FixedBytes<32>>;

    /**
     * Downward message executed with the given outcome.
     * \[ id, outcome \]
     **/
    ExecutedDownward: GenericPalletEvent<
      Rv,
      'CumulusXcm',
      'ExecutedDownward',
      [FixedBytes<32>, StagingXcmV5TraitsOutcome]
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `ToRococoXcmRouter`'s events
   **/
  toRococoXcmRouter: {
    /**
     * Delivery fee factor has been decreased.
     **/
    DeliveryFeeFactorDecreased: GenericPalletEvent<
      Rv,
      'ToRococoXcmRouter',
      'DeliveryFeeFactorDecreased',
      {
        /**
         * New value of the `DeliveryFeeFactor`.
         **/
        newValue: FixedU128;
      }
    >;

    /**
     * Delivery fee factor has been increased.
     **/
    DeliveryFeeFactorIncreased: GenericPalletEvent<
      Rv,
      'ToRococoXcmRouter',
      'DeliveryFeeFactorIncreased',
      {
        /**
         * New value of the `DeliveryFeeFactor`.
         **/
        newValue: FixedU128;
      }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `MessageQueue`'s events
   **/
  messageQueue: {
    /**
     * Message discarded due to an error in the `MessageProcessor` (usually a format error).
     **/
    ProcessingFailed: GenericPalletEvent<
      Rv,
      'MessageQueue',
      'ProcessingFailed',
      {
        /**
         * The `blake2_256` hash of the message.
         **/
        id: H256;

        /**
         * The queue of the message.
         **/
        origin: CumulusPrimitivesCoreAggregateMessageOrigin;

        /**
         * The error that occurred.
         *
         * This error is pretty opaque. More fine-grained errors need to be emitted as events
         * by the `MessageProcessor`.
         **/
        error: FrameSupportMessagesProcessMessageError;
      }
    >;

    /**
     * Message is processed.
     **/
    Processed: GenericPalletEvent<
      Rv,
      'MessageQueue',
      'Processed',
      {
        /**
         * The `blake2_256` hash of the message.
         **/
        id: H256;

        /**
         * The queue of the message.
         **/
        origin: CumulusPrimitivesCoreAggregateMessageOrigin;

        /**
         * How much weight was used to process the message.
         **/
        weightUsed: SpWeightsWeightV2Weight;

        /**
         * Whether the message was processed.
         *
         * Note that this does not mean that the underlying `MessageProcessor` was internally
         * successful. It *solely* means that the MQ pallet will treat this as a success
         * condition and discard the message. Any internal error needs to be emitted as events
         * by the `MessageProcessor`.
         **/
        success: boolean;
      }
    >;

    /**
     * Message placed in overweight queue.
     **/
    OverweightEnqueued: GenericPalletEvent<
      Rv,
      'MessageQueue',
      'OverweightEnqueued',
      {
        /**
         * The `blake2_256` hash of the message.
         **/
        id: FixedBytes<32>;

        /**
         * The queue of the message.
         **/
        origin: CumulusPrimitivesCoreAggregateMessageOrigin;

        /**
         * The page of the message.
         **/
        pageIndex: number;

        /**
         * The index of the message within the page.
         **/
        messageIndex: number;
      }
    >;

    /**
     * This page was reaped.
     **/
    PageReaped: GenericPalletEvent<
      Rv,
      'MessageQueue',
      'PageReaped',
      {
        /**
         * The queue of the page.
         **/
        origin: CumulusPrimitivesCoreAggregateMessageOrigin;

        /**
         * The index of the page.
         **/
        index: number;
      }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `SnowbridgeSystemFrontend`'s events
   **/
  snowbridgeSystemFrontend: {
    /**
     * An XCM was sent
     **/
    MessageSent: GenericPalletEvent<
      Rv,
      'SnowbridgeSystemFrontend',
      'MessageSent',
      {
        origin: StagingXcmV5Location;
        destination: StagingXcmV5Location;
        message: StagingXcmV5Xcm;
        messageId: FixedBytes<32>;
      }
    >;

    /**
     * Set OperatingMode
     **/
    ExportOperatingModeChanged: GenericPalletEvent<
      Rv,
      'SnowbridgeSystemFrontend',
      'ExportOperatingModeChanged',
      { mode: SnowbridgeCoreOperatingModeBasicOperatingMode }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Utility`'s events
   **/
  utility: {
    /**
     * Batch of dispatches did not complete fully. Index of first failing dispatch given, as
     * well as the error.
     **/
    BatchInterrupted: GenericPalletEvent<Rv, 'Utility', 'BatchInterrupted', { index: number; error: DispatchError }>;

    /**
     * Batch of dispatches completed fully with no error.
     **/
    BatchCompleted: GenericPalletEvent<Rv, 'Utility', 'BatchCompleted', null>;

    /**
     * Batch of dispatches completed but has errors.
     **/
    BatchCompletedWithErrors: GenericPalletEvent<Rv, 'Utility', 'BatchCompletedWithErrors', null>;

    /**
     * A single item within a Batch of dispatches has completed with no error.
     **/
    ItemCompleted: GenericPalletEvent<Rv, 'Utility', 'ItemCompleted', null>;

    /**
     * A single item within a Batch of dispatches has completed with error.
     **/
    ItemFailed: GenericPalletEvent<Rv, 'Utility', 'ItemFailed', { error: DispatchError }>;

    /**
     * A call was dispatched.
     **/
    DispatchedAs: GenericPalletEvent<Rv, 'Utility', 'DispatchedAs', { result: Result<[], DispatchError> }>;

    /**
     * Main call was dispatched.
     **/
    IfElseMainSuccess: GenericPalletEvent<Rv, 'Utility', 'IfElseMainSuccess', null>;

    /**
     * The fallback call was dispatched.
     **/
    IfElseFallbackCalled: GenericPalletEvent<Rv, 'Utility', 'IfElseFallbackCalled', { mainError: DispatchError }>;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Multisig`'s events
   **/
  multisig: {
    /**
     * A new multisig operation has begun.
     **/
    NewMultisig: GenericPalletEvent<
      Rv,
      'Multisig',
      'NewMultisig',
      { approving: AccountId32; multisig: AccountId32; callHash: FixedBytes<32> }
    >;

    /**
     * A multisig operation has been approved by someone.
     **/
    MultisigApproval: GenericPalletEvent<
      Rv,
      'Multisig',
      'MultisigApproval',
      { approving: AccountId32; timepoint: PalletMultisigTimepoint; multisig: AccountId32; callHash: FixedBytes<32> }
    >;

    /**
     * A multisig operation has been executed.
     **/
    MultisigExecuted: GenericPalletEvent<
      Rv,
      'Multisig',
      'MultisigExecuted',
      {
        approving: AccountId32;
        timepoint: PalletMultisigTimepoint;
        multisig: AccountId32;
        callHash: FixedBytes<32>;
        result: Result<[], DispatchError>;
      }
    >;

    /**
     * A multisig operation has been cancelled.
     **/
    MultisigCancelled: GenericPalletEvent<
      Rv,
      'Multisig',
      'MultisigCancelled',
      { cancelling: AccountId32; timepoint: PalletMultisigTimepoint; multisig: AccountId32; callHash: FixedBytes<32> }
    >;

    /**
     * The deposit for a multisig operation has been updated/poked.
     **/
    DepositPoked: GenericPalletEvent<
      Rv,
      'Multisig',
      'DepositPoked',
      { who: AccountId32; callHash: FixedBytes<32>; oldDeposit: bigint; newDeposit: bigint }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Proxy`'s events
   **/
  proxy: {
    /**
     * A proxy was executed correctly, with the given.
     **/
    ProxyExecuted: GenericPalletEvent<Rv, 'Proxy', 'ProxyExecuted', { result: Result<[], DispatchError> }>;

    /**
     * A pure account has been created by new proxy with given
     * disambiguation index and proxy type.
     **/
    PureCreated: GenericPalletEvent<
      Rv,
      'Proxy',
      'PureCreated',
      { pure: AccountId32; who: AccountId32; proxyType: AssetHubWestendRuntimeProxyType; disambiguationIndex: number }
    >;

    /**
     * A pure proxy was killed by its spawner.
     **/
    PureKilled: GenericPalletEvent<
      Rv,
      'Proxy',
      'PureKilled',
      {
        pure: AccountId32;
        spawner: AccountId32;
        proxyType: AssetHubWestendRuntimeProxyType;
        disambiguationIndex: number;
      }
    >;

    /**
     * An announcement was placed to make a call in the future.
     **/
    Announced: GenericPalletEvent<Rv, 'Proxy', 'Announced', { real: AccountId32; proxy: AccountId32; callHash: H256 }>;

    /**
     * A proxy was added.
     **/
    ProxyAdded: GenericPalletEvent<
      Rv,
      'Proxy',
      'ProxyAdded',
      { delegator: AccountId32; delegatee: AccountId32; proxyType: AssetHubWestendRuntimeProxyType; delay: number }
    >;

    /**
     * A proxy was removed.
     **/
    ProxyRemoved: GenericPalletEvent<
      Rv,
      'Proxy',
      'ProxyRemoved',
      { delegator: AccountId32; delegatee: AccountId32; proxyType: AssetHubWestendRuntimeProxyType; delay: number }
    >;

    /**
     * A deposit stored for proxies or announcements was poked / updated.
     **/
    DepositPoked: GenericPalletEvent<
      Rv,
      'Proxy',
      'DepositPoked',
      { who: AccountId32; kind: PalletProxyDepositKind; oldDeposit: bigint; newDeposit: bigint }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Indices`'s events
   **/
  indices: {
    /**
     * A account index was assigned.
     **/
    IndexAssigned: GenericPalletEvent<Rv, 'Indices', 'IndexAssigned', { who: AccountId32; index: number }>;

    /**
     * A account index has been freed up (unassigned).
     **/
    IndexFreed: GenericPalletEvent<Rv, 'Indices', 'IndexFreed', { index: number }>;

    /**
     * A account index has been frozen to its current account ID.
     **/
    IndexFrozen: GenericPalletEvent<Rv, 'Indices', 'IndexFrozen', { index: number; who: AccountId32 }>;

    /**
     * A deposit to reserve an index has been poked/reconsidered.
     **/
    DepositPoked: GenericPalletEvent<
      Rv,
      'Indices',
      'DepositPoked',
      { who: AccountId32; index: number; oldDeposit: bigint; newDeposit: bigint }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Assets`'s events
   **/
  assets: {
    /**
     * Some asset class was created.
     **/
    Created: GenericPalletEvent<Rv, 'Assets', 'Created', { assetId: number; creator: AccountId32; owner: AccountId32 }>;

    /**
     * Some assets were issued.
     **/
    Issued: GenericPalletEvent<Rv, 'Assets', 'Issued', { assetId: number; owner: AccountId32; amount: bigint }>;

    /**
     * Some assets were transferred.
     **/
    Transferred: GenericPalletEvent<
      Rv,
      'Assets',
      'Transferred',
      { assetId: number; from: AccountId32; to: AccountId32; amount: bigint }
    >;

    /**
     * Some assets were destroyed.
     **/
    Burned: GenericPalletEvent<Rv, 'Assets', 'Burned', { assetId: number; owner: AccountId32; balance: bigint }>;

    /**
     * The management team changed.
     **/
    TeamChanged: GenericPalletEvent<
      Rv,
      'Assets',
      'TeamChanged',
      { assetId: number; issuer: AccountId32; admin: AccountId32; freezer: AccountId32 }
    >;

    /**
     * The owner changed.
     **/
    OwnerChanged: GenericPalletEvent<Rv, 'Assets', 'OwnerChanged', { assetId: number; owner: AccountId32 }>;

    /**
     * Some account `who` was frozen.
     **/
    Frozen: GenericPalletEvent<Rv, 'Assets', 'Frozen', { assetId: number; who: AccountId32 }>;

    /**
     * Some account `who` was thawed.
     **/
    Thawed: GenericPalletEvent<Rv, 'Assets', 'Thawed', { assetId: number; who: AccountId32 }>;

    /**
     * Some asset `asset_id` was frozen.
     **/
    AssetFrozen: GenericPalletEvent<Rv, 'Assets', 'AssetFrozen', { assetId: number }>;

    /**
     * Some asset `asset_id` was thawed.
     **/
    AssetThawed: GenericPalletEvent<Rv, 'Assets', 'AssetThawed', { assetId: number }>;

    /**
     * Accounts were destroyed for given asset.
     **/
    AccountsDestroyed: GenericPalletEvent<
      Rv,
      'Assets',
      'AccountsDestroyed',
      { assetId: number; accountsDestroyed: number; accountsRemaining: number }
    >;

    /**
     * Approvals were destroyed for given asset.
     **/
    ApprovalsDestroyed: GenericPalletEvent<
      Rv,
      'Assets',
      'ApprovalsDestroyed',
      { assetId: number; approvalsDestroyed: number; approvalsRemaining: number }
    >;

    /**
     * An asset class is in the process of being destroyed.
     **/
    DestructionStarted: GenericPalletEvent<Rv, 'Assets', 'DestructionStarted', { assetId: number }>;

    /**
     * An asset class was destroyed.
     **/
    Destroyed: GenericPalletEvent<Rv, 'Assets', 'Destroyed', { assetId: number }>;

    /**
     * Some asset class was force-created.
     **/
    ForceCreated: GenericPalletEvent<Rv, 'Assets', 'ForceCreated', { assetId: number; owner: AccountId32 }>;

    /**
     * New metadata has been set for an asset.
     **/
    MetadataSet: GenericPalletEvent<
      Rv,
      'Assets',
      'MetadataSet',
      { assetId: number; name: Bytes; symbol: Bytes; decimals: number; isFrozen: boolean }
    >;

    /**
     * Metadata has been cleared for an asset.
     **/
    MetadataCleared: GenericPalletEvent<Rv, 'Assets', 'MetadataCleared', { assetId: number }>;

    /**
     * (Additional) funds have been approved for transfer to a destination account.
     **/
    ApprovedTransfer: GenericPalletEvent<
      Rv,
      'Assets',
      'ApprovedTransfer',
      { assetId: number; source: AccountId32; delegate: AccountId32; amount: bigint }
    >;

    /**
     * An approval for account `delegate` was cancelled by `owner`.
     **/
    ApprovalCancelled: GenericPalletEvent<
      Rv,
      'Assets',
      'ApprovalCancelled',
      { assetId: number; owner: AccountId32; delegate: AccountId32 }
    >;

    /**
     * An `amount` was transferred in its entirety from `owner` to `destination` by
     * the approved `delegate`.
     **/
    TransferredApproved: GenericPalletEvent<
      Rv,
      'Assets',
      'TransferredApproved',
      { assetId: number; owner: AccountId32; delegate: AccountId32; destination: AccountId32; amount: bigint }
    >;

    /**
     * An asset has had its attributes changed by the `Force` origin.
     **/
    AssetStatusChanged: GenericPalletEvent<Rv, 'Assets', 'AssetStatusChanged', { assetId: number }>;

    /**
     * The min_balance of an asset has been updated by the asset owner.
     **/
    AssetMinBalanceChanged: GenericPalletEvent<
      Rv,
      'Assets',
      'AssetMinBalanceChanged',
      { assetId: number; newMinBalance: bigint }
    >;

    /**
     * Some account `who` was created with a deposit from `depositor`.
     **/
    Touched: GenericPalletEvent<Rv, 'Assets', 'Touched', { assetId: number; who: AccountId32; depositor: AccountId32 }>;

    /**
     * Some account `who` was blocked.
     **/
    Blocked: GenericPalletEvent<Rv, 'Assets', 'Blocked', { assetId: number; who: AccountId32 }>;

    /**
     * Some assets were deposited (e.g. for transaction fees).
     **/
    Deposited: GenericPalletEvent<Rv, 'Assets', 'Deposited', { assetId: number; who: AccountId32; amount: bigint }>;

    /**
     * Some assets were withdrawn from the account (e.g. for transaction fees).
     **/
    Withdrawn: GenericPalletEvent<Rv, 'Assets', 'Withdrawn', { assetId: number; who: AccountId32; amount: bigint }>;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Uniques`'s events
   **/
  uniques: {
    /**
     * A `collection` was created.
     **/
    Created: GenericPalletEvent<
      Rv,
      'Uniques',
      'Created',
      { collection: number; creator: AccountId32; owner: AccountId32 }
    >;

    /**
     * A `collection` was force-created.
     **/
    ForceCreated: GenericPalletEvent<Rv, 'Uniques', 'ForceCreated', { collection: number; owner: AccountId32 }>;

    /**
     * A `collection` was destroyed.
     **/
    Destroyed: GenericPalletEvent<Rv, 'Uniques', 'Destroyed', { collection: number }>;

    /**
     * An `item` was issued.
     **/
    Issued: GenericPalletEvent<Rv, 'Uniques', 'Issued', { collection: number; item: number; owner: AccountId32 }>;

    /**
     * An `item` was transferred.
     **/
    Transferred: GenericPalletEvent<
      Rv,
      'Uniques',
      'Transferred',
      { collection: number; item: number; from: AccountId32; to: AccountId32 }
    >;

    /**
     * An `item` was destroyed.
     **/
    Burned: GenericPalletEvent<Rv, 'Uniques', 'Burned', { collection: number; item: number; owner: AccountId32 }>;

    /**
     * Some `item` was frozen.
     **/
    Frozen: GenericPalletEvent<Rv, 'Uniques', 'Frozen', { collection: number; item: number }>;

    /**
     * Some `item` was thawed.
     **/
    Thawed: GenericPalletEvent<Rv, 'Uniques', 'Thawed', { collection: number; item: number }>;

    /**
     * Some `collection` was frozen.
     **/
    CollectionFrozen: GenericPalletEvent<Rv, 'Uniques', 'CollectionFrozen', { collection: number }>;

    /**
     * Some `collection` was thawed.
     **/
    CollectionThawed: GenericPalletEvent<Rv, 'Uniques', 'CollectionThawed', { collection: number }>;

    /**
     * The owner changed.
     **/
    OwnerChanged: GenericPalletEvent<Rv, 'Uniques', 'OwnerChanged', { collection: number; newOwner: AccountId32 }>;

    /**
     * The management team changed.
     **/
    TeamChanged: GenericPalletEvent<
      Rv,
      'Uniques',
      'TeamChanged',
      { collection: number; issuer: AccountId32; admin: AccountId32; freezer: AccountId32 }
    >;

    /**
     * An `item` of a `collection` has been approved by the `owner` for transfer by
     * a `delegate`.
     **/
    ApprovedTransfer: GenericPalletEvent<
      Rv,
      'Uniques',
      'ApprovedTransfer',
      { collection: number; item: number; owner: AccountId32; delegate: AccountId32 }
    >;

    /**
     * An approval for a `delegate` account to transfer the `item` of an item
     * `collection` was cancelled by its `owner`.
     **/
    ApprovalCancelled: GenericPalletEvent<
      Rv,
      'Uniques',
      'ApprovalCancelled',
      { collection: number; item: number; owner: AccountId32; delegate: AccountId32 }
    >;

    /**
     * A `collection` has had its attributes changed by the `Force` origin.
     **/
    ItemStatusChanged: GenericPalletEvent<Rv, 'Uniques', 'ItemStatusChanged', { collection: number }>;

    /**
     * New metadata has been set for a `collection`.
     **/
    CollectionMetadataSet: GenericPalletEvent<
      Rv,
      'Uniques',
      'CollectionMetadataSet',
      { collection: number; data: Bytes; isFrozen: boolean }
    >;

    /**
     * Metadata has been cleared for a `collection`.
     **/
    CollectionMetadataCleared: GenericPalletEvent<Rv, 'Uniques', 'CollectionMetadataCleared', { collection: number }>;

    /**
     * New metadata has been set for an item.
     **/
    MetadataSet: GenericPalletEvent<
      Rv,
      'Uniques',
      'MetadataSet',
      { collection: number; item: number; data: Bytes; isFrozen: boolean }
    >;

    /**
     * Metadata has been cleared for an item.
     **/
    MetadataCleared: GenericPalletEvent<Rv, 'Uniques', 'MetadataCleared', { collection: number; item: number }>;

    /**
     * Metadata has been cleared for an item.
     **/
    Redeposited: GenericPalletEvent<
      Rv,
      'Uniques',
      'Redeposited',
      { collection: number; successfulItems: Array<number> }
    >;

    /**
     * New attribute metadata has been set for a `collection` or `item`.
     **/
    AttributeSet: GenericPalletEvent<
      Rv,
      'Uniques',
      'AttributeSet',
      { collection: number; maybeItem?: number | undefined; key: Bytes; value: Bytes }
    >;

    /**
     * Attribute metadata has been cleared for a `collection` or `item`.
     **/
    AttributeCleared: GenericPalletEvent<
      Rv,
      'Uniques',
      'AttributeCleared',
      { collection: number; maybeItem?: number | undefined; key: Bytes }
    >;

    /**
     * Ownership acceptance has changed for an account.
     **/
    OwnershipAcceptanceChanged: GenericPalletEvent<
      Rv,
      'Uniques',
      'OwnershipAcceptanceChanged',
      { who: AccountId32; maybeCollection?: number | undefined }
    >;

    /**
     * Max supply has been set for a collection.
     **/
    CollectionMaxSupplySet: GenericPalletEvent<
      Rv,
      'Uniques',
      'CollectionMaxSupplySet',
      { collection: number; maxSupply: number }
    >;

    /**
     * The price was set for the instance.
     **/
    ItemPriceSet: GenericPalletEvent<
      Rv,
      'Uniques',
      'ItemPriceSet',
      { collection: number; item: number; price: bigint; whitelistedBuyer?: AccountId32 | undefined }
    >;

    /**
     * The price for the instance was removed.
     **/
    ItemPriceRemoved: GenericPalletEvent<Rv, 'Uniques', 'ItemPriceRemoved', { collection: number; item: number }>;

    /**
     * An item was bought.
     **/
    ItemBought: GenericPalletEvent<
      Rv,
      'Uniques',
      'ItemBought',
      { collection: number; item: number; price: bigint; seller: AccountId32; buyer: AccountId32 }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Nfts`'s events
   **/
  nfts: {
    /**
     * A `collection` was created.
     **/
    Created: GenericPalletEvent<
      Rv,
      'Nfts',
      'Created',
      { collection: number; creator: AccountId32; owner: AccountId32 }
    >;

    /**
     * A `collection` was force-created.
     **/
    ForceCreated: GenericPalletEvent<Rv, 'Nfts', 'ForceCreated', { collection: number; owner: AccountId32 }>;

    /**
     * A `collection` was destroyed.
     **/
    Destroyed: GenericPalletEvent<Rv, 'Nfts', 'Destroyed', { collection: number }>;

    /**
     * An `item` was issued.
     **/
    Issued: GenericPalletEvent<Rv, 'Nfts', 'Issued', { collection: number; item: number; owner: AccountId32 }>;

    /**
     * An `item` was transferred.
     **/
    Transferred: GenericPalletEvent<
      Rv,
      'Nfts',
      'Transferred',
      { collection: number; item: number; from: AccountId32; to: AccountId32 }
    >;

    /**
     * An `item` was destroyed.
     **/
    Burned: GenericPalletEvent<Rv, 'Nfts', 'Burned', { collection: number; item: number; owner: AccountId32 }>;

    /**
     * An `item` became non-transferable.
     **/
    ItemTransferLocked: GenericPalletEvent<Rv, 'Nfts', 'ItemTransferLocked', { collection: number; item: number }>;

    /**
     * An `item` became transferable.
     **/
    ItemTransferUnlocked: GenericPalletEvent<Rv, 'Nfts', 'ItemTransferUnlocked', { collection: number; item: number }>;

    /**
     * `item` metadata or attributes were locked.
     **/
    ItemPropertiesLocked: GenericPalletEvent<
      Rv,
      'Nfts',
      'ItemPropertiesLocked',
      { collection: number; item: number; lockMetadata: boolean; lockAttributes: boolean }
    >;

    /**
     * Some `collection` was locked.
     **/
    CollectionLocked: GenericPalletEvent<Rv, 'Nfts', 'CollectionLocked', { collection: number }>;

    /**
     * The owner changed.
     **/
    OwnerChanged: GenericPalletEvent<Rv, 'Nfts', 'OwnerChanged', { collection: number; newOwner: AccountId32 }>;

    /**
     * The management team changed.
     **/
    TeamChanged: GenericPalletEvent<
      Rv,
      'Nfts',
      'TeamChanged',
      {
        collection: number;
        issuer?: AccountId32 | undefined;
        admin?: AccountId32 | undefined;
        freezer?: AccountId32 | undefined;
      }
    >;

    /**
     * An `item` of a `collection` has been approved by the `owner` for transfer by
     * a `delegate`.
     **/
    TransferApproved: GenericPalletEvent<
      Rv,
      'Nfts',
      'TransferApproved',
      { collection: number; item: number; owner: AccountId32; delegate: AccountId32; deadline?: number | undefined }
    >;

    /**
     * An approval for a `delegate` account to transfer the `item` of an item
     * `collection` was cancelled by its `owner`.
     **/
    ApprovalCancelled: GenericPalletEvent<
      Rv,
      'Nfts',
      'ApprovalCancelled',
      { collection: number; item: number; owner: AccountId32; delegate: AccountId32 }
    >;

    /**
     * All approvals of an item got cancelled.
     **/
    AllApprovalsCancelled: GenericPalletEvent<
      Rv,
      'Nfts',
      'AllApprovalsCancelled',
      { collection: number; item: number; owner: AccountId32 }
    >;

    /**
     * A `collection` has had its config changed by the `Force` origin.
     **/
    CollectionConfigChanged: GenericPalletEvent<Rv, 'Nfts', 'CollectionConfigChanged', { collection: number }>;

    /**
     * New metadata has been set for a `collection`.
     **/
    CollectionMetadataSet: GenericPalletEvent<Rv, 'Nfts', 'CollectionMetadataSet', { collection: number; data: Bytes }>;

    /**
     * Metadata has been cleared for a `collection`.
     **/
    CollectionMetadataCleared: GenericPalletEvent<Rv, 'Nfts', 'CollectionMetadataCleared', { collection: number }>;

    /**
     * New metadata has been set for an item.
     **/
    ItemMetadataSet: GenericPalletEvent<
      Rv,
      'Nfts',
      'ItemMetadataSet',
      { collection: number; item: number; data: Bytes }
    >;

    /**
     * Metadata has been cleared for an item.
     **/
    ItemMetadataCleared: GenericPalletEvent<Rv, 'Nfts', 'ItemMetadataCleared', { collection: number; item: number }>;

    /**
     * The deposit for a set of `item`s within a `collection` has been updated.
     **/
    Redeposited: GenericPalletEvent<Rv, 'Nfts', 'Redeposited', { collection: number; successfulItems: Array<number> }>;

    /**
     * New attribute metadata has been set for a `collection` or `item`.
     **/
    AttributeSet: GenericPalletEvent<
      Rv,
      'Nfts',
      'AttributeSet',
      {
        collection: number;
        maybeItem?: number | undefined;
        key: Bytes;
        value: Bytes;
        namespace: PalletNftsAttributeNamespace;
      }
    >;

    /**
     * Attribute metadata has been cleared for a `collection` or `item`.
     **/
    AttributeCleared: GenericPalletEvent<
      Rv,
      'Nfts',
      'AttributeCleared',
      { collection: number; maybeItem?: number | undefined; key: Bytes; namespace: PalletNftsAttributeNamespace }
    >;

    /**
     * A new approval to modify item attributes was added.
     **/
    ItemAttributesApprovalAdded: GenericPalletEvent<
      Rv,
      'Nfts',
      'ItemAttributesApprovalAdded',
      { collection: number; item: number; delegate: AccountId32 }
    >;

    /**
     * A new approval to modify item attributes was removed.
     **/
    ItemAttributesApprovalRemoved: GenericPalletEvent<
      Rv,
      'Nfts',
      'ItemAttributesApprovalRemoved',
      { collection: number; item: number; delegate: AccountId32 }
    >;

    /**
     * Ownership acceptance has changed for an account.
     **/
    OwnershipAcceptanceChanged: GenericPalletEvent<
      Rv,
      'Nfts',
      'OwnershipAcceptanceChanged',
      { who: AccountId32; maybeCollection?: number | undefined }
    >;

    /**
     * Max supply has been set for a collection.
     **/
    CollectionMaxSupplySet: GenericPalletEvent<
      Rv,
      'Nfts',
      'CollectionMaxSupplySet',
      { collection: number; maxSupply: number }
    >;

    /**
     * Mint settings for a collection had changed.
     **/
    CollectionMintSettingsUpdated: GenericPalletEvent<
      Rv,
      'Nfts',
      'CollectionMintSettingsUpdated',
      { collection: number }
    >;

    /**
     * Event gets emitted when the `NextCollectionId` gets incremented.
     **/
    NextCollectionIdIncremented: GenericPalletEvent<
      Rv,
      'Nfts',
      'NextCollectionIdIncremented',
      { nextId?: number | undefined }
    >;

    /**
     * The price was set for the item.
     **/
    ItemPriceSet: GenericPalletEvent<
      Rv,
      'Nfts',
      'ItemPriceSet',
      { collection: number; item: number; price: bigint; whitelistedBuyer?: AccountId32 | undefined }
    >;

    /**
     * The price for the item was removed.
     **/
    ItemPriceRemoved: GenericPalletEvent<Rv, 'Nfts', 'ItemPriceRemoved', { collection: number; item: number }>;

    /**
     * An item was bought.
     **/
    ItemBought: GenericPalletEvent<
      Rv,
      'Nfts',
      'ItemBought',
      { collection: number; item: number; price: bigint; seller: AccountId32; buyer: AccountId32 }
    >;

    /**
     * A tip was sent.
     **/
    TipSent: GenericPalletEvent<
      Rv,
      'Nfts',
      'TipSent',
      { collection: number; item: number; sender: AccountId32; receiver: AccountId32; amount: bigint }
    >;

    /**
     * An `item` swap intent was created.
     **/
    SwapCreated: GenericPalletEvent<
      Rv,
      'Nfts',
      'SwapCreated',
      {
        offeredCollection: number;
        offeredItem: number;
        desiredCollection: number;
        desiredItem?: number | undefined;
        price?: PalletNftsPriceWithDirection | undefined;
        deadline: number;
      }
    >;

    /**
     * The swap was cancelled.
     **/
    SwapCancelled: GenericPalletEvent<
      Rv,
      'Nfts',
      'SwapCancelled',
      {
        offeredCollection: number;
        offeredItem: number;
        desiredCollection: number;
        desiredItem?: number | undefined;
        price?: PalletNftsPriceWithDirection | undefined;
        deadline: number;
      }
    >;

    /**
     * The swap has been claimed.
     **/
    SwapClaimed: GenericPalletEvent<
      Rv,
      'Nfts',
      'SwapClaimed',
      {
        sentCollection: number;
        sentItem: number;
        sentItemOwner: AccountId32;
        receivedCollection: number;
        receivedItem: number;
        receivedItemOwner: AccountId32;
        price?: PalletNftsPriceWithDirection | undefined;
        deadline: number;
      }
    >;

    /**
     * New attributes have been set for an `item` of the `collection`.
     **/
    PreSignedAttributesSet: GenericPalletEvent<
      Rv,
      'Nfts',
      'PreSignedAttributesSet',
      { collection: number; item: number; namespace: PalletNftsAttributeNamespace }
    >;

    /**
     * A new attribute in the `Pallet` namespace was set for the `collection` or an `item`
     * within that `collection`.
     **/
    PalletAttributeSet: GenericPalletEvent<
      Rv,
      'Nfts',
      'PalletAttributeSet',
      { collection: number; item?: number | undefined; attribute: PalletNftsPalletAttributes; value: Bytes }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `ForeignAssets`'s events
   **/
  foreignAssets: {
    /**
     * Some asset class was created.
     **/
    Created: GenericPalletEvent<
      Rv,
      'ForeignAssets',
      'Created',
      { assetId: StagingXcmV5Location; creator: AccountId32; owner: AccountId32 }
    >;

    /**
     * Some assets were issued.
     **/
    Issued: GenericPalletEvent<
      Rv,
      'ForeignAssets',
      'Issued',
      { assetId: StagingXcmV5Location; owner: AccountId32; amount: bigint }
    >;

    /**
     * Some assets were transferred.
     **/
    Transferred: GenericPalletEvent<
      Rv,
      'ForeignAssets',
      'Transferred',
      { assetId: StagingXcmV5Location; from: AccountId32; to: AccountId32; amount: bigint }
    >;

    /**
     * Some assets were destroyed.
     **/
    Burned: GenericPalletEvent<
      Rv,
      'ForeignAssets',
      'Burned',
      { assetId: StagingXcmV5Location; owner: AccountId32; balance: bigint }
    >;

    /**
     * The management team changed.
     **/
    TeamChanged: GenericPalletEvent<
      Rv,
      'ForeignAssets',
      'TeamChanged',
      { assetId: StagingXcmV5Location; issuer: AccountId32; admin: AccountId32; freezer: AccountId32 }
    >;

    /**
     * The owner changed.
     **/
    OwnerChanged: GenericPalletEvent<
      Rv,
      'ForeignAssets',
      'OwnerChanged',
      { assetId: StagingXcmV5Location; owner: AccountId32 }
    >;

    /**
     * Some account `who` was frozen.
     **/
    Frozen: GenericPalletEvent<Rv, 'ForeignAssets', 'Frozen', { assetId: StagingXcmV5Location; who: AccountId32 }>;

    /**
     * Some account `who` was thawed.
     **/
    Thawed: GenericPalletEvent<Rv, 'ForeignAssets', 'Thawed', { assetId: StagingXcmV5Location; who: AccountId32 }>;

    /**
     * Some asset `asset_id` was frozen.
     **/
    AssetFrozen: GenericPalletEvent<Rv, 'ForeignAssets', 'AssetFrozen', { assetId: StagingXcmV5Location }>;

    /**
     * Some asset `asset_id` was thawed.
     **/
    AssetThawed: GenericPalletEvent<Rv, 'ForeignAssets', 'AssetThawed', { assetId: StagingXcmV5Location }>;

    /**
     * Accounts were destroyed for given asset.
     **/
    AccountsDestroyed: GenericPalletEvent<
      Rv,
      'ForeignAssets',
      'AccountsDestroyed',
      { assetId: StagingXcmV5Location; accountsDestroyed: number; accountsRemaining: number }
    >;

    /**
     * Approvals were destroyed for given asset.
     **/
    ApprovalsDestroyed: GenericPalletEvent<
      Rv,
      'ForeignAssets',
      'ApprovalsDestroyed',
      { assetId: StagingXcmV5Location; approvalsDestroyed: number; approvalsRemaining: number }
    >;

    /**
     * An asset class is in the process of being destroyed.
     **/
    DestructionStarted: GenericPalletEvent<
      Rv,
      'ForeignAssets',
      'DestructionStarted',
      { assetId: StagingXcmV5Location }
    >;

    /**
     * An asset class was destroyed.
     **/
    Destroyed: GenericPalletEvent<Rv, 'ForeignAssets', 'Destroyed', { assetId: StagingXcmV5Location }>;

    /**
     * Some asset class was force-created.
     **/
    ForceCreated: GenericPalletEvent<
      Rv,
      'ForeignAssets',
      'ForceCreated',
      { assetId: StagingXcmV5Location; owner: AccountId32 }
    >;

    /**
     * New metadata has been set for an asset.
     **/
    MetadataSet: GenericPalletEvent<
      Rv,
      'ForeignAssets',
      'MetadataSet',
      { assetId: StagingXcmV5Location; name: Bytes; symbol: Bytes; decimals: number; isFrozen: boolean }
    >;

    /**
     * Metadata has been cleared for an asset.
     **/
    MetadataCleared: GenericPalletEvent<Rv, 'ForeignAssets', 'MetadataCleared', { assetId: StagingXcmV5Location }>;

    /**
     * (Additional) funds have been approved for transfer to a destination account.
     **/
    ApprovedTransfer: GenericPalletEvent<
      Rv,
      'ForeignAssets',
      'ApprovedTransfer',
      { assetId: StagingXcmV5Location; source: AccountId32; delegate: AccountId32; amount: bigint }
    >;

    /**
     * An approval for account `delegate` was cancelled by `owner`.
     **/
    ApprovalCancelled: GenericPalletEvent<
      Rv,
      'ForeignAssets',
      'ApprovalCancelled',
      { assetId: StagingXcmV5Location; owner: AccountId32; delegate: AccountId32 }
    >;

    /**
     * An `amount` was transferred in its entirety from `owner` to `destination` by
     * the approved `delegate`.
     **/
    TransferredApproved: GenericPalletEvent<
      Rv,
      'ForeignAssets',
      'TransferredApproved',
      {
        assetId: StagingXcmV5Location;
        owner: AccountId32;
        delegate: AccountId32;
        destination: AccountId32;
        amount: bigint;
      }
    >;

    /**
     * An asset has had its attributes changed by the `Force` origin.
     **/
    AssetStatusChanged: GenericPalletEvent<
      Rv,
      'ForeignAssets',
      'AssetStatusChanged',
      { assetId: StagingXcmV5Location }
    >;

    /**
     * The min_balance of an asset has been updated by the asset owner.
     **/
    AssetMinBalanceChanged: GenericPalletEvent<
      Rv,
      'ForeignAssets',
      'AssetMinBalanceChanged',
      { assetId: StagingXcmV5Location; newMinBalance: bigint }
    >;

    /**
     * Some account `who` was created with a deposit from `depositor`.
     **/
    Touched: GenericPalletEvent<
      Rv,
      'ForeignAssets',
      'Touched',
      { assetId: StagingXcmV5Location; who: AccountId32; depositor: AccountId32 }
    >;

    /**
     * Some account `who` was blocked.
     **/
    Blocked: GenericPalletEvent<Rv, 'ForeignAssets', 'Blocked', { assetId: StagingXcmV5Location; who: AccountId32 }>;

    /**
     * Some assets were deposited (e.g. for transaction fees).
     **/
    Deposited: GenericPalletEvent<
      Rv,
      'ForeignAssets',
      'Deposited',
      { assetId: StagingXcmV5Location; who: AccountId32; amount: bigint }
    >;

    /**
     * Some assets were withdrawn from the account (e.g. for transaction fees).
     **/
    Withdrawn: GenericPalletEvent<
      Rv,
      'ForeignAssets',
      'Withdrawn',
      { assetId: StagingXcmV5Location; who: AccountId32; amount: bigint }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `NftFractionalization`'s events
   **/
  nftFractionalization: {
    /**
     * An NFT was successfully fractionalized.
     **/
    NftFractionalized: GenericPalletEvent<
      Rv,
      'NftFractionalization',
      'NftFractionalized',
      { nftCollection: number; nft: number; fractions: bigint; asset: number; beneficiary: AccountId32 }
    >;

    /**
     * An NFT was successfully returned back.
     **/
    NftUnified: GenericPalletEvent<
      Rv,
      'NftFractionalization',
      'NftUnified',
      { nftCollection: number; nft: number; asset: number; beneficiary: AccountId32 }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `PoolAssets`'s events
   **/
  poolAssets: {
    /**
     * Some asset class was created.
     **/
    Created: GenericPalletEvent<
      Rv,
      'PoolAssets',
      'Created',
      { assetId: number; creator: AccountId32; owner: AccountId32 }
    >;

    /**
     * Some assets were issued.
     **/
    Issued: GenericPalletEvent<Rv, 'PoolAssets', 'Issued', { assetId: number; owner: AccountId32; amount: bigint }>;

    /**
     * Some assets were transferred.
     **/
    Transferred: GenericPalletEvent<
      Rv,
      'PoolAssets',
      'Transferred',
      { assetId: number; from: AccountId32; to: AccountId32; amount: bigint }
    >;

    /**
     * Some assets were destroyed.
     **/
    Burned: GenericPalletEvent<Rv, 'PoolAssets', 'Burned', { assetId: number; owner: AccountId32; balance: bigint }>;

    /**
     * The management team changed.
     **/
    TeamChanged: GenericPalletEvent<
      Rv,
      'PoolAssets',
      'TeamChanged',
      { assetId: number; issuer: AccountId32; admin: AccountId32; freezer: AccountId32 }
    >;

    /**
     * The owner changed.
     **/
    OwnerChanged: GenericPalletEvent<Rv, 'PoolAssets', 'OwnerChanged', { assetId: number; owner: AccountId32 }>;

    /**
     * Some account `who` was frozen.
     **/
    Frozen: GenericPalletEvent<Rv, 'PoolAssets', 'Frozen', { assetId: number; who: AccountId32 }>;

    /**
     * Some account `who` was thawed.
     **/
    Thawed: GenericPalletEvent<Rv, 'PoolAssets', 'Thawed', { assetId: number; who: AccountId32 }>;

    /**
     * Some asset `asset_id` was frozen.
     **/
    AssetFrozen: GenericPalletEvent<Rv, 'PoolAssets', 'AssetFrozen', { assetId: number }>;

    /**
     * Some asset `asset_id` was thawed.
     **/
    AssetThawed: GenericPalletEvent<Rv, 'PoolAssets', 'AssetThawed', { assetId: number }>;

    /**
     * Accounts were destroyed for given asset.
     **/
    AccountsDestroyed: GenericPalletEvent<
      Rv,
      'PoolAssets',
      'AccountsDestroyed',
      { assetId: number; accountsDestroyed: number; accountsRemaining: number }
    >;

    /**
     * Approvals were destroyed for given asset.
     **/
    ApprovalsDestroyed: GenericPalletEvent<
      Rv,
      'PoolAssets',
      'ApprovalsDestroyed',
      { assetId: number; approvalsDestroyed: number; approvalsRemaining: number }
    >;

    /**
     * An asset class is in the process of being destroyed.
     **/
    DestructionStarted: GenericPalletEvent<Rv, 'PoolAssets', 'DestructionStarted', { assetId: number }>;

    /**
     * An asset class was destroyed.
     **/
    Destroyed: GenericPalletEvent<Rv, 'PoolAssets', 'Destroyed', { assetId: number }>;

    /**
     * Some asset class was force-created.
     **/
    ForceCreated: GenericPalletEvent<Rv, 'PoolAssets', 'ForceCreated', { assetId: number; owner: AccountId32 }>;

    /**
     * New metadata has been set for an asset.
     **/
    MetadataSet: GenericPalletEvent<
      Rv,
      'PoolAssets',
      'MetadataSet',
      { assetId: number; name: Bytes; symbol: Bytes; decimals: number; isFrozen: boolean }
    >;

    /**
     * Metadata has been cleared for an asset.
     **/
    MetadataCleared: GenericPalletEvent<Rv, 'PoolAssets', 'MetadataCleared', { assetId: number }>;

    /**
     * (Additional) funds have been approved for transfer to a destination account.
     **/
    ApprovedTransfer: GenericPalletEvent<
      Rv,
      'PoolAssets',
      'ApprovedTransfer',
      { assetId: number; source: AccountId32; delegate: AccountId32; amount: bigint }
    >;

    /**
     * An approval for account `delegate` was cancelled by `owner`.
     **/
    ApprovalCancelled: GenericPalletEvent<
      Rv,
      'PoolAssets',
      'ApprovalCancelled',
      { assetId: number; owner: AccountId32; delegate: AccountId32 }
    >;

    /**
     * An `amount` was transferred in its entirety from `owner` to `destination` by
     * the approved `delegate`.
     **/
    TransferredApproved: GenericPalletEvent<
      Rv,
      'PoolAssets',
      'TransferredApproved',
      { assetId: number; owner: AccountId32; delegate: AccountId32; destination: AccountId32; amount: bigint }
    >;

    /**
     * An asset has had its attributes changed by the `Force` origin.
     **/
    AssetStatusChanged: GenericPalletEvent<Rv, 'PoolAssets', 'AssetStatusChanged', { assetId: number }>;

    /**
     * The min_balance of an asset has been updated by the asset owner.
     **/
    AssetMinBalanceChanged: GenericPalletEvent<
      Rv,
      'PoolAssets',
      'AssetMinBalanceChanged',
      { assetId: number; newMinBalance: bigint }
    >;

    /**
     * Some account `who` was created with a deposit from `depositor`.
     **/
    Touched: GenericPalletEvent<
      Rv,
      'PoolAssets',
      'Touched',
      { assetId: number; who: AccountId32; depositor: AccountId32 }
    >;

    /**
     * Some account `who` was blocked.
     **/
    Blocked: GenericPalletEvent<Rv, 'PoolAssets', 'Blocked', { assetId: number; who: AccountId32 }>;

    /**
     * Some assets were deposited (e.g. for transaction fees).
     **/
    Deposited: GenericPalletEvent<Rv, 'PoolAssets', 'Deposited', { assetId: number; who: AccountId32; amount: bigint }>;

    /**
     * Some assets were withdrawn from the account (e.g. for transaction fees).
     **/
    Withdrawn: GenericPalletEvent<Rv, 'PoolAssets', 'Withdrawn', { assetId: number; who: AccountId32; amount: bigint }>;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `AssetConversion`'s events
   **/
  assetConversion: {
    /**
     * A successful call of the `CreatePool` extrinsic will create this event.
     **/
    PoolCreated: GenericPalletEvent<
      Rv,
      'AssetConversion',
      'PoolCreated',
      {
        /**
         * The account that created the pool.
         **/
        creator: AccountId32;

        /**
         * The pool id associated with the pool. Note that the order of the assets may not be
         * the same as the order specified in the create pool extrinsic.
         **/
        poolId: [StagingXcmV5Location, StagingXcmV5Location];

        /**
         * The account ID of the pool.
         **/
        poolAccount: AccountId32;

        /**
         * The id of the liquidity tokens that will be minted when assets are added to this
         * pool.
         **/
        lpToken: number;
      }
    >;

    /**
     * A successful call of the `AddLiquidity` extrinsic will create this event.
     **/
    LiquidityAdded: GenericPalletEvent<
      Rv,
      'AssetConversion',
      'LiquidityAdded',
      {
        /**
         * The account that the liquidity was taken from.
         **/
        who: AccountId32;

        /**
         * The account that the liquidity tokens were minted to.
         **/
        mintTo: AccountId32;

        /**
         * The pool id of the pool that the liquidity was added to.
         **/
        poolId: [StagingXcmV5Location, StagingXcmV5Location];

        /**
         * The amount of the first asset that was added to the pool.
         **/
        amount1Provided: bigint;

        /**
         * The amount of the second asset that was added to the pool.
         **/
        amount2Provided: bigint;

        /**
         * The id of the lp token that was minted.
         **/
        lpToken: number;

        /**
         * The amount of lp tokens that were minted of that id.
         **/
        lpTokenMinted: bigint;
      }
    >;

    /**
     * A successful call of the `RemoveLiquidity` extrinsic will create this event.
     **/
    LiquidityRemoved: GenericPalletEvent<
      Rv,
      'AssetConversion',
      'LiquidityRemoved',
      {
        /**
         * The account that the liquidity tokens were burned from.
         **/
        who: AccountId32;

        /**
         * The account that the assets were transferred to.
         **/
        withdrawTo: AccountId32;

        /**
         * The pool id that the liquidity was removed from.
         **/
        poolId: [StagingXcmV5Location, StagingXcmV5Location];

        /**
         * The amount of the first asset that was removed from the pool.
         **/
        amount1: bigint;

        /**
         * The amount of the second asset that was removed from the pool.
         **/
        amount2: bigint;

        /**
         * The id of the lp token that was burned.
         **/
        lpToken: number;

        /**
         * The amount of lp tokens that were burned of that id.
         **/
        lpTokenBurned: bigint;

        /**
         * Liquidity withdrawal fee (%).
         **/
        withdrawalFee: Permill;
      }
    >;

    /**
     * Assets have been converted from one to another. Both `SwapExactTokenForToken`
     * and `SwapTokenForExactToken` will generate this event.
     **/
    SwapExecuted: GenericPalletEvent<
      Rv,
      'AssetConversion',
      'SwapExecuted',
      {
        /**
         * Which account was the instigator of the swap.
         **/
        who: AccountId32;

        /**
         * The account that the assets were transferred to.
         **/
        sendTo: AccountId32;

        /**
         * The amount of the first asset that was swapped.
         **/
        amountIn: bigint;

        /**
         * The amount of the second asset that was received.
         **/
        amountOut: bigint;

        /**
         * The route of asset IDs with amounts that the swap went through.
         * E.g. (A, amount_in) -> (Dot, amount_out) -> (B, amount_out)
         **/
        path: Array<[StagingXcmV5Location, bigint]>;
      }
    >;

    /**
     * Assets have been converted from one to another.
     **/
    SwapCreditExecuted: GenericPalletEvent<
      Rv,
      'AssetConversion',
      'SwapCreditExecuted',
      {
        /**
         * The amount of the first asset that was swapped.
         **/
        amountIn: bigint;

        /**
         * The amount of the second asset that was received.
         **/
        amountOut: bigint;

        /**
         * The route of asset IDs with amounts that the swap went through.
         * E.g. (A, amount_in) -> (Dot, amount_out) -> (B, amount_out)
         **/
        path: Array<[StagingXcmV5Location, bigint]>;
      }
    >;

    /**
     * Pool has been touched in order to fulfill operational requirements.
     **/
    Touched: GenericPalletEvent<
      Rv,
      'AssetConversion',
      'Touched',
      {
        /**
         * The ID of the pool.
         **/
        poolId: [StagingXcmV5Location, StagingXcmV5Location];

        /**
         * The account initiating the touch.
         **/
        who: AccountId32;
      }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `AssetsFreezer`'s events
   **/
  assetsFreezer: {
    Frozen: GenericPalletEvent<Rv, 'AssetsFreezer', 'Frozen', { who: AccountId32; assetId: number; amount: bigint }>;
    Thawed: GenericPalletEvent<Rv, 'AssetsFreezer', 'Thawed', { who: AccountId32; assetId: number; amount: bigint }>;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `ForeignAssetsFreezer`'s events
   **/
  foreignAssetsFreezer: {
    Frozen: GenericPalletEvent<
      Rv,
      'ForeignAssetsFreezer',
      'Frozen',
      { who: AccountId32; assetId: StagingXcmV5Location; amount: bigint }
    >;
    Thawed: GenericPalletEvent<
      Rv,
      'ForeignAssetsFreezer',
      'Thawed',
      { who: AccountId32; assetId: StagingXcmV5Location; amount: bigint }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `PoolAssetsFreezer`'s events
   **/
  poolAssetsFreezer: {
    Frozen: GenericPalletEvent<
      Rv,
      'PoolAssetsFreezer',
      'Frozen',
      { who: AccountId32; assetId: number; amount: bigint }
    >;
    Thawed: GenericPalletEvent<
      Rv,
      'PoolAssetsFreezer',
      'Thawed',
      { who: AccountId32; assetId: number; amount: bigint }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Revive`'s events
   **/
  revive: {
    /**
     * A custom event emitted by the contract.
     **/
    ContractEmitted: GenericPalletEvent<
      Rv,
      'Revive',
      'ContractEmitted',
      {
        /**
         * The contract that emitted the event.
         **/
        contract: H160;

        /**
         * Data supplied by the contract. Metadata generated during contract compilation
         * is needed to decode it.
         **/
        data: Bytes;

        /**
         * A list of topics used to index the event.
         * Number of topics is capped by [`limits::NUM_EVENT_TOPICS`].
         **/
        topics: Array<H256>;
      }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `AssetRewards`'s events
   **/
  assetRewards: {
    /**
     * An account staked some tokens in a pool.
     **/
    Staked: GenericPalletEvent<
      Rv,
      'AssetRewards',
      'Staked',
      {
        /**
         * The account that staked assets.
         **/
        staker: AccountId32;

        /**
         * The pool.
         **/
        poolId: number;

        /**
         * The staked asset amount.
         **/
        amount: bigint;
      }
    >;

    /**
     * An account unstaked some tokens from a pool.
     **/
    Unstaked: GenericPalletEvent<
      Rv,
      'AssetRewards',
      'Unstaked',
      {
        /**
         * The account that signed transaction.
         **/
        caller: AccountId32;

        /**
         * The account that unstaked assets.
         **/
        staker: AccountId32;

        /**
         * The pool.
         **/
        poolId: number;

        /**
         * The unstaked asset amount.
         **/
        amount: bigint;
      }
    >;

    /**
     * An account harvested some rewards.
     **/
    RewardsHarvested: GenericPalletEvent<
      Rv,
      'AssetRewards',
      'RewardsHarvested',
      {
        /**
         * The account that signed transaction.
         **/
        caller: AccountId32;

        /**
         * The staker whos rewards were harvested.
         **/
        staker: AccountId32;

        /**
         * The pool.
         **/
        poolId: number;

        /**
         * The amount of harvested tokens.
         **/
        amount: bigint;
      }
    >;

    /**
     * A new reward pool was created.
     **/
    PoolCreated: GenericPalletEvent<
      Rv,
      'AssetRewards',
      'PoolCreated',
      {
        /**
         * The account that created the pool.
         **/
        creator: AccountId32;

        /**
         * The unique ID for the new pool.
         **/
        poolId: number;

        /**
         * The staking asset.
         **/
        stakedAssetId: StagingXcmV5Location;

        /**
         * The reward asset.
         **/
        rewardAssetId: StagingXcmV5Location;

        /**
         * The initial reward rate per block.
         **/
        rewardRatePerBlock: bigint;

        /**
         * The block the pool will cease to accumulate rewards.
         **/
        expiryBlock: number;

        /**
         * The account allowed to modify the pool.
         **/
        admin: AccountId32;
      }
    >;

    /**
     * A pool reward rate was modified by the admin.
     **/
    PoolRewardRateModified: GenericPalletEvent<
      Rv,
      'AssetRewards',
      'PoolRewardRateModified',
      {
        /**
         * The modified pool.
         **/
        poolId: number;

        /**
         * The new reward rate per block.
         **/
        newRewardRatePerBlock: bigint;
      }
    >;

    /**
     * A pool admin was modified.
     **/
    PoolAdminModified: GenericPalletEvent<
      Rv,
      'AssetRewards',
      'PoolAdminModified',
      {
        /**
         * The modified pool.
         **/
        poolId: number;

        /**
         * The new admin.
         **/
        newAdmin: AccountId32;
      }
    >;

    /**
     * A pool expiry block was modified by the admin.
     **/
    PoolExpiryBlockModified: GenericPalletEvent<
      Rv,
      'AssetRewards',
      'PoolExpiryBlockModified',
      {
        /**
         * The modified pool.
         **/
        poolId: number;

        /**
         * The new expiry block.
         **/
        newExpiryBlock: number;
      }
    >;

    /**
     * A pool information was cleared after it's completion.
     **/
    PoolCleanedUp: GenericPalletEvent<
      Rv,
      'AssetRewards',
      'PoolCleanedUp',
      {
        /**
         * The cleared pool.
         **/
        poolId: number;
      }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `StateTrieMigration`'s events
   **/
  stateTrieMigration: {
    /**
     * Given number of `(top, child)` keys were migrated respectively, with the given
     * `compute`.
     **/
    Migrated: GenericPalletEvent<
      Rv,
      'StateTrieMigration',
      'Migrated',
      { top: number; child: number; compute: PalletStateTrieMigrationMigrationCompute }
    >;

    /**
     * Some account got slashed by the given amount.
     **/
    Slashed: GenericPalletEvent<Rv, 'StateTrieMigration', 'Slashed', { who: AccountId32; amount: bigint }>;

    /**
     * The auto migration task finished.
     **/
    AutoMigrationFinished: GenericPalletEvent<Rv, 'StateTrieMigration', 'AutoMigrationFinished', null>;

    /**
     * Migration got halted due to an error or miss-configuration.
     **/
    Halted: GenericPalletEvent<Rv, 'StateTrieMigration', 'Halted', { error: PalletStateTrieMigrationError }>;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Staking`'s events
   **/
  staking: {
    /**
     * The era payout has been set; the first balance is the validator-payout; the second is
     * the remainder from the maximum amount of reward.
     **/
    EraPaid: GenericPalletEvent<
      Rv,
      'Staking',
      'EraPaid',
      { eraIndex: number; validatorPayout: bigint; remainder: bigint }
    >;

    /**
     * The nominator has been rewarded by this amount to this destination.
     **/
    Rewarded: GenericPalletEvent<
      Rv,
      'Staking',
      'Rewarded',
      { stash: AccountId32; dest: PalletStakingAsyncRewardDestination; amount: bigint }
    >;

    /**
     * A staker (validator or nominator) has been slashed by the given amount.
     **/
    Slashed: GenericPalletEvent<Rv, 'Staking', 'Slashed', { staker: AccountId32; amount: bigint }>;

    /**
     * An old slashing report from a prior era was discarded because it could
     * not be processed.
     **/
    OldSlashingReportDiscarded: GenericPalletEvent<
      Rv,
      'Staking',
      'OldSlashingReportDiscarded',
      { sessionIndex: number }
    >;

    /**
     * An account has bonded this amount. \[stash, amount\]
     *
     * NOTE: This event is only emitted when funds are bonded via a dispatchable. Notably,
     * it will not be emitted for staking rewards when they are added to stake.
     **/
    Bonded: GenericPalletEvent<Rv, 'Staking', 'Bonded', { stash: AccountId32; amount: bigint }>;

    /**
     * An account has unbonded this amount.
     **/
    Unbonded: GenericPalletEvent<Rv, 'Staking', 'Unbonded', { stash: AccountId32; amount: bigint }>;

    /**
     * An account has called `withdraw_unbonded` and removed unbonding chunks worth `Balance`
     * from the unlocking queue.
     **/
    Withdrawn: GenericPalletEvent<Rv, 'Staking', 'Withdrawn', { stash: AccountId32; amount: bigint }>;

    /**
     * A subsequent event of `Withdrawn`, indicating that `stash` was fully removed from the
     * system.
     **/
    StakerRemoved: GenericPalletEvent<Rv, 'Staking', 'StakerRemoved', { stash: AccountId32 }>;

    /**
     * A nominator has been kicked from a validator.
     **/
    Kicked: GenericPalletEvent<Rv, 'Staking', 'Kicked', { nominator: AccountId32; stash: AccountId32 }>;

    /**
     * An account has stopped participating as either a validator or nominator.
     **/
    Chilled: GenericPalletEvent<Rv, 'Staking', 'Chilled', { stash: AccountId32 }>;

    /**
     * A Page of stakers rewards are getting paid. `next` is `None` if all pages are claimed.
     **/
    PayoutStarted: GenericPalletEvent<
      Rv,
      'Staking',
      'PayoutStarted',
      { eraIndex: number; validatorStash: AccountId32; page: number; next?: number | undefined }
    >;

    /**
     * A validator has set their preferences.
     **/
    ValidatorPrefsSet: GenericPalletEvent<
      Rv,
      'Staking',
      'ValidatorPrefsSet',
      { stash: AccountId32; prefs: PalletStakingAsyncValidatorPrefs }
    >;

    /**
     * Voters size limit reached.
     **/
    SnapshotVotersSizeExceeded: GenericPalletEvent<Rv, 'Staking', 'SnapshotVotersSizeExceeded', { size: number }>;

    /**
     * Targets size limit reached.
     **/
    SnapshotTargetsSizeExceeded: GenericPalletEvent<Rv, 'Staking', 'SnapshotTargetsSizeExceeded', { size: number }>;
    ForceEra: GenericPalletEvent<Rv, 'Staking', 'ForceEra', { mode: PalletStakingAsyncForcing }>;

    /**
     * Report of a controller batch deprecation.
     **/
    ControllerBatchDeprecated: GenericPalletEvent<Rv, 'Staking', 'ControllerBatchDeprecated', { failures: number }>;

    /**
     * Staking balance migrated from locks to holds, with any balance that could not be held
     * is force withdrawn.
     **/
    CurrencyMigrated: GenericPalletEvent<
      Rv,
      'Staking',
      'CurrencyMigrated',
      { stash: AccountId32; forceWithdraw: bigint }
    >;

    /**
     * A page from a multi-page election was fetched. A number of these are followed by
     * `StakersElected`.
     *
     * `Ok(count)` indicates the give number of stashes were added.
     * `Err(index)` indicates that the stashes after index were dropped.
     * `Err(0)` indicates that an error happened but no stashes were dropped nor added.
     *
     * The error indicates that a number of validators were dropped due to excess size, but
     * the overall election will continue.
     **/
    PagedElectionProceeded: GenericPalletEvent<
      Rv,
      'Staking',
      'PagedElectionProceeded',
      { page: number; result: Result<number, number> }
    >;

    /**
     * An offence for the given validator, for the given percentage of their stake, at the
     * given era as been reported.
     **/
    OffenceReported: GenericPalletEvent<
      Rv,
      'Staking',
      'OffenceReported',
      { offenceEra: number; validator: AccountId32; fraction: Perbill }
    >;

    /**
     * An offence has been processed and the corresponding slash has been computed.
     **/
    SlashComputed: GenericPalletEvent<
      Rv,
      'Staking',
      'SlashComputed',
      { offenceEra: number; slashEra: number; offender: AccountId32; page: number }
    >;

    /**
     * An unapplied slash has been cancelled.
     **/
    SlashCancelled: GenericPalletEvent<
      Rv,
      'Staking',
      'SlashCancelled',
      { slashEra: number; slashKey: [AccountId32, Perbill, number]; payout: bigint }
    >;

    /**
     * Session change has been triggered.
     *
     * If planned_era is one era ahead of active_era, it implies new era is being planned and
     * election is ongoing.
     **/
    SessionRotated: GenericPalletEvent<
      Rv,
      'Staking',
      'SessionRotated',
      { startingSession: number; activeEra: number; plannedEra: number }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `NominationPools`'s events
   **/
  nominationPools: {
    /**
     * A pool has been created.
     **/
    Created: GenericPalletEvent<Rv, 'NominationPools', 'Created', { depositor: AccountId32; poolId: number }>;

    /**
     * A member has became bonded in a pool.
     **/
    Bonded: GenericPalletEvent<
      Rv,
      'NominationPools',
      'Bonded',
      { member: AccountId32; poolId: number; bonded: bigint; joined: boolean }
    >;

    /**
     * A payout has been made to a member.
     **/
    PaidOut: GenericPalletEvent<
      Rv,
      'NominationPools',
      'PaidOut',
      { member: AccountId32; poolId: number; payout: bigint }
    >;

    /**
     * A member has unbonded from their pool.
     *
     * - `balance` is the corresponding balance of the number of points that has been
     * requested to be unbonded (the argument of the `unbond` transaction) from the bonded
     * pool.
     * - `points` is the number of points that are issued as a result of `balance` being
     * dissolved into the corresponding unbonding pool.
     * - `era` is the era in which the balance will be unbonded.
     * In the absence of slashing, these values will match. In the presence of slashing, the
     * number of points that are issued in the unbonding pool will be less than the amount
     * requested to be unbonded.
     **/
    Unbonded: GenericPalletEvent<
      Rv,
      'NominationPools',
      'Unbonded',
      { member: AccountId32; poolId: number; balance: bigint; points: bigint; era: number }
    >;

    /**
     * A member has withdrawn from their pool.
     *
     * The given number of `points` have been dissolved in return of `balance`.
     *
     * Similar to `Unbonded` event, in the absence of slashing, the ratio of point to balance
     * will be 1.
     **/
    Withdrawn: GenericPalletEvent<
      Rv,
      'NominationPools',
      'Withdrawn',
      { member: AccountId32; poolId: number; balance: bigint; points: bigint }
    >;

    /**
     * A pool has been destroyed.
     **/
    Destroyed: GenericPalletEvent<Rv, 'NominationPools', 'Destroyed', { poolId: number }>;

    /**
     * The state of a pool has changed
     **/
    StateChanged: GenericPalletEvent<
      Rv,
      'NominationPools',
      'StateChanged',
      { poolId: number; newState: PalletNominationPoolsPoolState }
    >;

    /**
     * A member has been removed from a pool.
     *
     * The removal can be voluntary (withdrawn all unbonded funds) or involuntary (kicked).
     * Any funds that are still delegated (i.e. dangling delegation) are released and are
     * represented by `released_balance`.
     **/
    MemberRemoved: GenericPalletEvent<
      Rv,
      'NominationPools',
      'MemberRemoved',
      { poolId: number; member: AccountId32; releasedBalance: bigint }
    >;

    /**
     * The roles of a pool have been updated to the given new roles. Note that the depositor
     * can never change.
     **/
    RolesUpdated: GenericPalletEvent<
      Rv,
      'NominationPools',
      'RolesUpdated',
      { root?: AccountId32 | undefined; bouncer?: AccountId32 | undefined; nominator?: AccountId32 | undefined }
    >;

    /**
     * The active balance of pool `pool_id` has been slashed to `balance`.
     **/
    PoolSlashed: GenericPalletEvent<Rv, 'NominationPools', 'PoolSlashed', { poolId: number; balance: bigint }>;

    /**
     * The unbond pool at `era` of pool `pool_id` has been slashed to `balance`.
     **/
    UnbondingPoolSlashed: GenericPalletEvent<
      Rv,
      'NominationPools',
      'UnbondingPoolSlashed',
      { poolId: number; era: number; balance: bigint }
    >;

    /**
     * A pool's commission setting has been changed.
     **/
    PoolCommissionUpdated: GenericPalletEvent<
      Rv,
      'NominationPools',
      'PoolCommissionUpdated',
      { poolId: number; current?: [Perbill, AccountId32] | undefined }
    >;

    /**
     * A pool's maximum commission setting has been changed.
     **/
    PoolMaxCommissionUpdated: GenericPalletEvent<
      Rv,
      'NominationPools',
      'PoolMaxCommissionUpdated',
      { poolId: number; maxCommission: Perbill }
    >;

    /**
     * A pool's commission `change_rate` has been changed.
     **/
    PoolCommissionChangeRateUpdated: GenericPalletEvent<
      Rv,
      'NominationPools',
      'PoolCommissionChangeRateUpdated',
      { poolId: number; changeRate: PalletNominationPoolsCommissionChangeRate }
    >;

    /**
     * Pool commission claim permission has been updated.
     **/
    PoolCommissionClaimPermissionUpdated: GenericPalletEvent<
      Rv,
      'NominationPools',
      'PoolCommissionClaimPermissionUpdated',
      { poolId: number; permission?: PalletNominationPoolsCommissionClaimPermission | undefined }
    >;

    /**
     * Pool commission has been claimed.
     **/
    PoolCommissionClaimed: GenericPalletEvent<
      Rv,
      'NominationPools',
      'PoolCommissionClaimed',
      { poolId: number; commission: bigint }
    >;

    /**
     * Topped up deficit in frozen ED of the reward pool.
     **/
    MinBalanceDeficitAdjusted: GenericPalletEvent<
      Rv,
      'NominationPools',
      'MinBalanceDeficitAdjusted',
      { poolId: number; amount: bigint }
    >;

    /**
     * Claimed excess frozen ED of af the reward pool.
     **/
    MinBalanceExcessAdjusted: GenericPalletEvent<
      Rv,
      'NominationPools',
      'MinBalanceExcessAdjusted',
      { poolId: number; amount: bigint }
    >;

    /**
     * A pool member's claim permission has been updated.
     **/
    MemberClaimPermissionUpdated: GenericPalletEvent<
      Rv,
      'NominationPools',
      'MemberClaimPermissionUpdated',
      { member: AccountId32; permission: PalletNominationPoolsClaimPermission }
    >;

    /**
     * A pool's metadata was updated.
     **/
    MetadataUpdated: GenericPalletEvent<
      Rv,
      'NominationPools',
      'MetadataUpdated',
      { poolId: number; caller: AccountId32 }
    >;

    /**
     * A pool's nominating account (or the pool's root account) has nominated a validator set
     * on behalf of the pool.
     **/
    PoolNominationMade: GenericPalletEvent<
      Rv,
      'NominationPools',
      'PoolNominationMade',
      { poolId: number; caller: AccountId32 }
    >;

    /**
     * The pool is chilled i.e. no longer nominating.
     **/
    PoolNominatorChilled: GenericPalletEvent<
      Rv,
      'NominationPools',
      'PoolNominatorChilled',
      { poolId: number; caller: AccountId32 }
    >;

    /**
     * Global parameters regulating nomination pools have been updated.
     **/
    GlobalParamsUpdated: GenericPalletEvent<
      Rv,
      'NominationPools',
      'GlobalParamsUpdated',
      {
        minJoinBond: bigint;
        minCreateBond: bigint;
        maxPools?: number | undefined;
        maxMembers?: number | undefined;
        maxMembersPerPool?: number | undefined;
        globalMaxCommission?: Perbill | undefined;
      }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `FastUnstake`'s events
   **/
  fastUnstake: {
    /**
     * A staker was unstaked.
     **/
    Unstaked: GenericPalletEvent<
      Rv,
      'FastUnstake',
      'Unstaked',
      { stash: AccountId32; result: Result<[], DispatchError> }
    >;

    /**
     * A staker was slashed for requesting fast-unstake whilst being exposed.
     **/
    Slashed: GenericPalletEvent<Rv, 'FastUnstake', 'Slashed', { stash: AccountId32; amount: bigint }>;

    /**
     * A batch was partially checked for the given eras, but the process did not finish.
     **/
    BatchChecked: GenericPalletEvent<Rv, 'FastUnstake', 'BatchChecked', { eras: Array<number> }>;

    /**
     * A batch of a given size was terminated.
     *
     * This is always follows by a number of `Unstaked` or `Slashed` events, marking the end
     * of the batch. A new batch will be created upon next block.
     **/
    BatchFinished: GenericPalletEvent<Rv, 'FastUnstake', 'BatchFinished', { size: number }>;

    /**
     * An internal error happened. Operations will be paused now.
     **/
    InternalError: GenericPalletEvent<Rv, 'FastUnstake', 'InternalError', null>;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `VoterList`'s events
   **/
  voterList: {
    /**
     * Moved an account from one bag to another.
     **/
    Rebagged: GenericPalletEvent<Rv, 'VoterList', 'Rebagged', { who: AccountId32; from: bigint; to: bigint }>;

    /**
     * Updated the score of some account to the given amount.
     **/
    ScoreUpdated: GenericPalletEvent<Rv, 'VoterList', 'ScoreUpdated', { who: AccountId32; newScore: bigint }>;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `DelegatedStaking`'s events
   **/
  delegatedStaking: {
    /**
     * Funds delegated by a delegator.
     **/
    Delegated: GenericPalletEvent<
      Rv,
      'DelegatedStaking',
      'Delegated',
      { agent: AccountId32; delegator: AccountId32; amount: bigint }
    >;

    /**
     * Funds released to a delegator.
     **/
    Released: GenericPalletEvent<
      Rv,
      'DelegatedStaking',
      'Released',
      { agent: AccountId32; delegator: AccountId32; amount: bigint }
    >;

    /**
     * Funds slashed from a delegator.
     **/
    Slashed: GenericPalletEvent<
      Rv,
      'DelegatedStaking',
      'Slashed',
      { agent: AccountId32; delegator: AccountId32; amount: bigint }
    >;

    /**
     * Unclaimed delegation funds migrated to delegator.
     **/
    MigratedDelegation: GenericPalletEvent<
      Rv,
      'DelegatedStaking',
      'MigratedDelegation',
      { agent: AccountId32; delegator: AccountId32; amount: bigint }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `StakingNextRcClient`'s events
   **/
  stakingNextRcClient: {
    /**
     * A said session report was received.
     **/
    SessionReportReceived: GenericPalletEvent<
      Rv,
      'StakingNextRcClient',
      'SessionReportReceived',
      {
        endIndex: number;
        activationTimestamp?: [bigint, number] | undefined;
        validatorPointsCounts: number;
        leftover: boolean;
      }
    >;

    /**
     * A new offence was reported.
     **/
    OffenceReceived: GenericPalletEvent<
      Rv,
      'StakingNextRcClient',
      'OffenceReceived',
      { slashSession: number; offencesCount: number }
    >;

    /**
     * Something occurred that should never happen under normal operation.
     * Logged as an event for fail-safe observability.
     **/
    Unexpected: GenericPalletEvent<Rv, 'StakingNextRcClient', 'Unexpected', PalletStakingAsyncRcClientUnexpectedKind>;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `MultiBlock`'s events
   **/
  multiBlock: {
    /**
     * A phase transition happened. Only checks major changes in the variants, not minor inner
     * values.
     **/
    PhaseTransitioned: GenericPalletEvent<
      Rv,
      'MultiBlock',
      'PhaseTransitioned',
      {
        /**
         * the source phase
         **/
        from: PalletElectionProviderMultiBlockPhase;

        /**
         * The target phase
         **/
        to: PalletElectionProviderMultiBlockPhase;
      }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `MultiBlockVerifier`'s events
   **/
  multiBlockVerifier: {
    /**
     * The verification data was unavailable and it could not continue.
     **/
    VerificationDataUnavailable: GenericPalletEvent<Rv, 'MultiBlockVerifier', 'VerificationDataUnavailable', null>;

    /**
     * A verification failed at the given page.
     *
     * NOTE: if the index is 0, then this could mean either the feasibility of the last page
     * was wrong, or the final checks of `finalize_verification` failed.
     **/
    VerificationFailed: GenericPalletEvent<
      Rv,
      'MultiBlockVerifier',
      'VerificationFailed',
      [number, PalletElectionProviderMultiBlockVerifierFeasibilityError]
    >;

    /**
     * The given page of a solution has been verified, with the given number of winners being
     * found in it.
     **/
    Verified: GenericPalletEvent<Rv, 'MultiBlockVerifier', 'Verified', [number, number]>;

    /**
     * A solution with the given score has replaced our current best solution.
     **/
    Queued: GenericPalletEvent<
      Rv,
      'MultiBlockVerifier',
      'Queued',
      [SpNposElectionsElectionScore, SpNposElectionsElectionScore | undefined]
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `MultiBlockSigned`'s events
   **/
  multiBlockSigned: {
    /**
     * Upcoming submission has been registered for the given account, with the given score.
     **/
    Registered: GenericPalletEvent<
      Rv,
      'MultiBlockSigned',
      'Registered',
      [number, AccountId32, SpNposElectionsElectionScore]
    >;

    /**
     * A page of solution solution with the given index has been stored for the given account.
     **/
    Stored: GenericPalletEvent<Rv, 'MultiBlockSigned', 'Stored', [number, AccountId32, number]>;

    /**
     * The given account has been rewarded with the given amount.
     **/
    Rewarded: GenericPalletEvent<Rv, 'MultiBlockSigned', 'Rewarded', [number, AccountId32, bigint]>;

    /**
     * The given account has been slashed with the given amount.
     **/
    Slashed: GenericPalletEvent<Rv, 'MultiBlockSigned', 'Slashed', [number, AccountId32, bigint]>;

    /**
     * The given solution, for the given round, was ejected.
     **/
    Ejected: GenericPalletEvent<Rv, 'MultiBlockSigned', 'Ejected', [number, AccountId32]>;

    /**
     * The given account has been discarded.
     **/
    Discarded: GenericPalletEvent<Rv, 'MultiBlockSigned', 'Discarded', [number, AccountId32]>;

    /**
     * The given account has bailed.
     **/
    Bailed: GenericPalletEvent<Rv, 'MultiBlockSigned', 'Bailed', [number, AccountId32]>;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `ConvictionVoting`'s events
   **/
  convictionVoting: {
    /**
     * An account has delegated their vote to another account. \[who, target\]
     **/
    Delegated: GenericPalletEvent<Rv, 'ConvictionVoting', 'Delegated', [AccountId32, AccountId32]>;

    /**
     * An \[account\] has cancelled a previous delegation operation.
     **/
    Undelegated: GenericPalletEvent<Rv, 'ConvictionVoting', 'Undelegated', AccountId32>;

    /**
     * An account has voted
     **/
    Voted: GenericPalletEvent<
      Rv,
      'ConvictionVoting',
      'Voted',
      { who: AccountId32; vote: PalletConvictionVotingVoteAccountVote }
    >;

    /**
     * A vote has been removed
     **/
    VoteRemoved: GenericPalletEvent<
      Rv,
      'ConvictionVoting',
      'VoteRemoved',
      { who: AccountId32; vote: PalletConvictionVotingVoteAccountVote }
    >;

    /**
     * The lockup period of a conviction vote expired, and the funds have been unlocked.
     **/
    VoteUnlocked: GenericPalletEvent<Rv, 'ConvictionVoting', 'VoteUnlocked', { who: AccountId32; class: number }>;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Referenda`'s events
   **/
  referenda: {
    /**
     * A referendum has been submitted.
     **/
    Submitted: GenericPalletEvent<
      Rv,
      'Referenda',
      'Submitted',
      {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * The track (and by extension proposal dispatch origin) of this referendum.
         **/
        track: number;

        /**
         * The proposal for the referendum.
         **/
        proposal: FrameSupportPreimagesBounded;
      }
    >;

    /**
     * The decision deposit has been placed.
     **/
    DecisionDepositPlaced: GenericPalletEvent<
      Rv,
      'Referenda',
      'DecisionDepositPlaced',
      {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * The account who placed the deposit.
         **/
        who: AccountId32;

        /**
         * The amount placed by the account.
         **/
        amount: bigint;
      }
    >;

    /**
     * The decision deposit has been refunded.
     **/
    DecisionDepositRefunded: GenericPalletEvent<
      Rv,
      'Referenda',
      'DecisionDepositRefunded',
      {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * The account who placed the deposit.
         **/
        who: AccountId32;

        /**
         * The amount placed by the account.
         **/
        amount: bigint;
      }
    >;

    /**
     * A deposit has been slashed.
     **/
    DepositSlashed: GenericPalletEvent<
      Rv,
      'Referenda',
      'DepositSlashed',
      {
        /**
         * The account who placed the deposit.
         **/
        who: AccountId32;

        /**
         * The amount placed by the account.
         **/
        amount: bigint;
      }
    >;

    /**
     * A referendum has moved into the deciding phase.
     **/
    DecisionStarted: GenericPalletEvent<
      Rv,
      'Referenda',
      'DecisionStarted',
      {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * The track (and by extension proposal dispatch origin) of this referendum.
         **/
        track: number;

        /**
         * The proposal for the referendum.
         **/
        proposal: FrameSupportPreimagesBounded;

        /**
         * The current tally of votes in this referendum.
         **/
        tally: PalletConvictionVotingTally;
      }
    >;
    ConfirmStarted: GenericPalletEvent<
      Rv,
      'Referenda',
      'ConfirmStarted',
      {
        /**
         * Index of the referendum.
         **/
        index: number;
      }
    >;
    ConfirmAborted: GenericPalletEvent<
      Rv,
      'Referenda',
      'ConfirmAborted',
      {
        /**
         * Index of the referendum.
         **/
        index: number;
      }
    >;

    /**
     * A referendum has ended its confirmation phase and is ready for approval.
     **/
    Confirmed: GenericPalletEvent<
      Rv,
      'Referenda',
      'Confirmed',
      {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * The final tally of votes in this referendum.
         **/
        tally: PalletConvictionVotingTally;
      }
    >;

    /**
     * A referendum has been approved and its proposal has been scheduled.
     **/
    Approved: GenericPalletEvent<
      Rv,
      'Referenda',
      'Approved',
      {
        /**
         * Index of the referendum.
         **/
        index: number;
      }
    >;

    /**
     * A proposal has been rejected by referendum.
     **/
    Rejected: GenericPalletEvent<
      Rv,
      'Referenda',
      'Rejected',
      {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * The final tally of votes in this referendum.
         **/
        tally: PalletConvictionVotingTally;
      }
    >;

    /**
     * A referendum has been timed out without being decided.
     **/
    TimedOut: GenericPalletEvent<
      Rv,
      'Referenda',
      'TimedOut',
      {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * The final tally of votes in this referendum.
         **/
        tally: PalletConvictionVotingTally;
      }
    >;

    /**
     * A referendum has been cancelled.
     **/
    Cancelled: GenericPalletEvent<
      Rv,
      'Referenda',
      'Cancelled',
      {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * The final tally of votes in this referendum.
         **/
        tally: PalletConvictionVotingTally;
      }
    >;

    /**
     * A referendum has been killed.
     **/
    Killed: GenericPalletEvent<
      Rv,
      'Referenda',
      'Killed',
      {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * The final tally of votes in this referendum.
         **/
        tally: PalletConvictionVotingTally;
      }
    >;

    /**
     * The submission deposit has been refunded.
     **/
    SubmissionDepositRefunded: GenericPalletEvent<
      Rv,
      'Referenda',
      'SubmissionDepositRefunded',
      {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * The account who placed the deposit.
         **/
        who: AccountId32;

        /**
         * The amount placed by the account.
         **/
        amount: bigint;
      }
    >;

    /**
     * Metadata for a referendum has been set.
     **/
    MetadataSet: GenericPalletEvent<
      Rv,
      'Referenda',
      'MetadataSet',
      {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * Preimage hash.
         **/
        hash: H256;
      }
    >;

    /**
     * Metadata for a referendum has been cleared.
     **/
    MetadataCleared: GenericPalletEvent<
      Rv,
      'Referenda',
      'MetadataCleared',
      {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * Preimage hash.
         **/
        hash: H256;
      }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Whitelist`'s events
   **/
  whitelist: {
    CallWhitelisted: GenericPalletEvent<Rv, 'Whitelist', 'CallWhitelisted', { callHash: H256 }>;
    WhitelistedCallRemoved: GenericPalletEvent<Rv, 'Whitelist', 'WhitelistedCallRemoved', { callHash: H256 }>;
    WhitelistedCallDispatched: GenericPalletEvent<
      Rv,
      'Whitelist',
      'WhitelistedCallDispatched',
      { callHash: H256; result: Result<FrameSupportDispatchPostDispatchInfo, SpRuntimeDispatchErrorWithPostInfo> }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Treasury`'s events
   **/
  treasury: {
    /**
     * We have ended a spend period and will now allocate funds.
     **/
    Spending: GenericPalletEvent<Rv, 'Treasury', 'Spending', { budgetRemaining: bigint }>;

    /**
     * Some funds have been allocated.
     **/
    Awarded: GenericPalletEvent<
      Rv,
      'Treasury',
      'Awarded',
      { proposalIndex: number; award: bigint; account: AccountId32 }
    >;

    /**
     * Some of our funds have been burnt.
     **/
    Burnt: GenericPalletEvent<Rv, 'Treasury', 'Burnt', { burntFunds: bigint }>;

    /**
     * Spending has finished; this is the amount that rolls over until next spend.
     **/
    Rollover: GenericPalletEvent<Rv, 'Treasury', 'Rollover', { rolloverBalance: bigint }>;

    /**
     * Some funds have been deposited.
     **/
    Deposit: GenericPalletEvent<Rv, 'Treasury', 'Deposit', { value: bigint }>;

    /**
     * A new spend proposal has been approved.
     **/
    SpendApproved: GenericPalletEvent<
      Rv,
      'Treasury',
      'SpendApproved',
      { proposalIndex: number; amount: bigint; beneficiary: AccountId32 }
    >;

    /**
     * The inactive funds of the pallet have been updated.
     **/
    UpdatedInactive: GenericPalletEvent<
      Rv,
      'Treasury',
      'UpdatedInactive',
      { reactivated: bigint; deactivated: bigint }
    >;

    /**
     * A new asset spend proposal has been approved.
     **/
    AssetSpendApproved: GenericPalletEvent<
      Rv,
      'Treasury',
      'AssetSpendApproved',
      {
        index: number;
        assetKind: PolkadotRuntimeCommonImplsVersionedLocatableAsset;
        amount: bigint;
        beneficiary: XcmVersionedLocation;
        validFrom: number;
        expireAt: number;
      }
    >;

    /**
     * An approved spend was voided.
     **/
    AssetSpendVoided: GenericPalletEvent<Rv, 'Treasury', 'AssetSpendVoided', { index: number }>;

    /**
     * A payment happened.
     **/
    Paid: GenericPalletEvent<Rv, 'Treasury', 'Paid', { index: number; paymentId: bigint }>;

    /**
     * A payment failed and can be retried.
     **/
    PaymentFailed: GenericPalletEvent<Rv, 'Treasury', 'PaymentFailed', { index: number; paymentId: bigint }>;

    /**
     * A spend was processed and removed from the storage. It might have been successfully
     * paid or it may have expired.
     **/
    SpendProcessed: GenericPalletEvent<Rv, 'Treasury', 'SpendProcessed', { index: number }>;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `AssetRate`'s events
   **/
  assetRate: {
    AssetRateCreated: GenericPalletEvent<
      Rv,
      'AssetRate',
      'AssetRateCreated',
      { assetKind: PolkadotRuntimeCommonImplsVersionedLocatableAsset; rate: FixedU128 }
    >;
    AssetRateRemoved: GenericPalletEvent<
      Rv,
      'AssetRate',
      'AssetRateRemoved',
      { assetKind: PolkadotRuntimeCommonImplsVersionedLocatableAsset }
    >;
    AssetRateUpdated: GenericPalletEvent<
      Rv,
      'AssetRate',
      'AssetRateUpdated',
      { assetKind: PolkadotRuntimeCommonImplsVersionedLocatableAsset; old: FixedU128; new: FixedU128 }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `AssetConversionMigration`'s events
   **/
  assetConversionMigration: {
    /**
     * Indicates that a pool has been migrated to the new account ID.
     **/
    MigratedToNewAccount: GenericPalletEvent<
      Rv,
      'AssetConversionMigration',
      'MigratedToNewAccount',
      {
        /**
         * Pool's ID.
         **/
        poolId: [StagingXcmV5Location, StagingXcmV5Location];

        /**
         * Pool's prior account ID.
         **/
        priorAccount: AccountId32;

        /**
         * Pool's new account ID.
         **/
        newAccount: AccountId32;
      }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `AhOps`'s events
   **/
  ahOps: {
    /**
     * Some lease reserve could not be unreserved and needs manual cleanup.
     **/
    LeaseUnreserveRemaining: GenericPalletEvent<
      Rv,
      'AhOps',
      'LeaseUnreserveRemaining',
      { depositor: AccountId32; paraId: PolkadotParachainPrimitivesPrimitivesId; remaining: bigint }
    >;

    /**
     * Some amount for a crowdloan reserve could not be unreserved and needs manual cleanup.
     **/
    CrowdloanUnreserveRemaining: GenericPalletEvent<
      Rv,
      'AhOps',
      'CrowdloanUnreserveRemaining',
      { depositor: AccountId32; paraId: PolkadotParachainPrimitivesPrimitivesId; remaining: bigint }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `AhMigrator`'s events
   **/
  ahMigrator: {
    /**
     * A stage transition has occurred.
     **/
    StageTransition: GenericPalletEvent<
      Rv,
      'AhMigrator',
      'StageTransition',
      {
        /**
         * The old stage before the transition.
         **/
        old: PalletAhMigratorMigrationStage;

        /**
         * The new stage after the transition.
         **/
        new: PalletAhMigratorMigrationStage;
      }
    >;

    /**
     * We received a batch of messages that will be integrated into a pallet.
     **/
    BatchReceived: GenericPalletEvent<
      Rv,
      'AhMigrator',
      'BatchReceived',
      { pallet: PalletAhMigratorPalletEventName; count: number }
    >;

    /**
     * We processed a batch of messages for this pallet.
     **/
    BatchProcessed: GenericPalletEvent<
      Rv,
      'AhMigrator',
      'BatchProcessed',
      { pallet: PalletAhMigratorPalletEventName; countGood: number; countBad: number }
    >;

    /**
     * The Asset Hub Migration started and is active until `AssetHubMigrationFinished` is
     * emitted.
     *
     * This event is equivalent to `StageTransition { new: DataMigrationOngoing, .. }` but is
     * easier to understand. The activation is immediate and affects all events happening
     * afterwards.
     **/
    AssetHubMigrationStarted: GenericPalletEvent<Rv, 'AhMigrator', 'AssetHubMigrationStarted', null>;

    /**
     * The Asset Hub Migration finished.
     *
     * This event is equivalent to `StageTransition { new: MigrationDone, .. }` but is easier
     * to understand. The finishing is immediate and affects all events happening
     * afterwards.
     **/
    AssetHubMigrationFinished: GenericPalletEvent<Rv, 'AhMigrator', 'AssetHubMigrationFinished', null>;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
}
