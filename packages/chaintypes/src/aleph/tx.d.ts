// Generated by dedot cli

import type {
  GenericChainTx,
  GenericTxCall,
  ISubmittableExtrinsic,
  ISubmittableResult,
  IRuntimeTxCall,
  RpcVersion,
  RpcV2,
  ISubmittableExtrinsicLegacy,
} from 'dedot/types';
import type {
  MultiAddressLike,
  Extrinsic,
  BytesLike,
  FixedBytes,
  AccountId32Like,
  Percent,
  Perbill,
  H256,
  Data,
} from 'dedot/codecs';
import type {
  AlephRuntimeRuntimeCallLike,
  SpRuntimeMultiSignature,
  FrameSystemEventRecord,
  PalletStakingRewardDestination,
  PalletStakingValidatorPrefs,
  PalletStakingPalletConfigOp,
  PalletStakingPalletConfigOpU32,
  PalletStakingPalletConfigOpPercent,
  PalletStakingPalletConfigOpPerbill,
  AlephRuntimeSessionKeys,
  PrimitivesAppPublic,
  PrimitivesCommitteeSeats,
  PrimitivesElectionOpenness,
  PalletVestingVestingInfo,
  AlephRuntimeOriginCaller,
  SpWeightsWeightV2Weight,
  PalletMultisigTimepoint,
  PalletContractsWasmDeterminism,
  PalletNominationPoolsBondExtra,
  PalletNominationPoolsPoolState,
  PalletNominationPoolsConfigOp,
  PalletNominationPoolsConfigOpU32,
  PalletNominationPoolsConfigOpPerbill,
  PalletNominationPoolsConfigOp004,
  PalletNominationPoolsClaimPermission,
  PalletNominationPoolsCommissionChangeRate,
  PalletIdentityIdentityInfo,
  PalletIdentityBitFlags,
  PalletIdentityJudgement,
  AlephRuntimeProxyType,
} from './types';

export type ChainSubmittableExtrinsic<
  Rv extends RpcVersion,
  T extends IRuntimeTxCall = AlephRuntimeRuntimeCallLike,
> = Extrinsic<MultiAddressLike, T, SpRuntimeMultiSignature, any[]> &
  (Rv extends RpcV2
    ? ISubmittableExtrinsic<ISubmittableResult<FrameSystemEventRecord>>
    : ISubmittableExtrinsicLegacy<ISubmittableResult<FrameSystemEventRecord>>);

export type TxCall<Rv extends RpcVersion> = (...args: any[]) => ChainSubmittableExtrinsic<Rv>;

export interface ChainTx<Rv extends RpcVersion> extends GenericChainTx<Rv, TxCall<Rv>> {
  /**
   * Pallet `System`'s transaction calls
   **/
  system: {
    /**
     * See [`Pallet::remark`].
     *
     * @param {BytesLike} remark
     **/
    remark: GenericTxCall<
      Rv,
      (remark: BytesLike) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'System';
          palletCall: {
            name: 'Remark';
            params: { remark: BytesLike };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_heap_pages`].
     *
     * @param {bigint} pages
     **/
    setHeapPages: GenericTxCall<
      Rv,
      (pages: bigint) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'System';
          palletCall: {
            name: 'SetHeapPages';
            params: { pages: bigint };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_code`].
     *
     * @param {BytesLike} code
     **/
    setCode: GenericTxCall<
      Rv,
      (code: BytesLike) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'System';
          palletCall: {
            name: 'SetCode';
            params: { code: BytesLike };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_code_without_checks`].
     *
     * @param {BytesLike} code
     **/
    setCodeWithoutChecks: GenericTxCall<
      Rv,
      (code: BytesLike) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'System';
          palletCall: {
            name: 'SetCodeWithoutChecks';
            params: { code: BytesLike };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_storage`].
     *
     * @param {Array<[BytesLike, BytesLike]>} items
     **/
    setStorage: GenericTxCall<
      Rv,
      (items: Array<[BytesLike, BytesLike]>) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'System';
          palletCall: {
            name: 'SetStorage';
            params: { items: Array<[BytesLike, BytesLike]> };
          };
        }
      >
    >;

    /**
     * See [`Pallet::kill_storage`].
     *
     * @param {Array<BytesLike>} keys
     **/
    killStorage: GenericTxCall<
      Rv,
      (keys: Array<BytesLike>) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'System';
          palletCall: {
            name: 'KillStorage';
            params: { keys: Array<BytesLike> };
          };
        }
      >
    >;

    /**
     * See [`Pallet::kill_prefix`].
     *
     * @param {BytesLike} prefix
     * @param {number} subkeys
     **/
    killPrefix: GenericTxCall<
      Rv,
      (
        prefix: BytesLike,
        subkeys: number,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'System';
          palletCall: {
            name: 'KillPrefix';
            params: { prefix: BytesLike; subkeys: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::remark_with_event`].
     *
     * @param {BytesLike} remark
     **/
    remarkWithEvent: GenericTxCall<
      Rv,
      (remark: BytesLike) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'System';
          palletCall: {
            name: 'RemarkWithEvent';
            params: { remark: BytesLike };
          };
        }
      >
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>;
  };
  /**
   * Pallet `Scheduler`'s transaction calls
   **/
  scheduler: {
    /**
     * See [`Pallet::schedule`].
     *
     * @param {number} when
     * @param {[number, number] | undefined} maybePeriodic
     * @param {number} priority
     * @param {AlephRuntimeRuntimeCallLike} call
     **/
    schedule: GenericTxCall<
      Rv,
      (
        when: number,
        maybePeriodic: [number, number] | undefined,
        priority: number,
        call: AlephRuntimeRuntimeCallLike,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Scheduler';
          palletCall: {
            name: 'Schedule';
            params: {
              when: number;
              maybePeriodic: [number, number] | undefined;
              priority: number;
              call: AlephRuntimeRuntimeCallLike;
            };
          };
        }
      >
    >;

    /**
     * See [`Pallet::cancel`].
     *
     * @param {number} when
     * @param {number} index
     **/
    cancel: GenericTxCall<
      Rv,
      (
        when: number,
        index: number,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Scheduler';
          palletCall: {
            name: 'Cancel';
            params: { when: number; index: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::schedule_named`].
     *
     * @param {FixedBytes<32>} id
     * @param {number} when
     * @param {[number, number] | undefined} maybePeriodic
     * @param {number} priority
     * @param {AlephRuntimeRuntimeCallLike} call
     **/
    scheduleNamed: GenericTxCall<
      Rv,
      (
        id: FixedBytes<32>,
        when: number,
        maybePeriodic: [number, number] | undefined,
        priority: number,
        call: AlephRuntimeRuntimeCallLike,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Scheduler';
          palletCall: {
            name: 'ScheduleNamed';
            params: {
              id: FixedBytes<32>;
              when: number;
              maybePeriodic: [number, number] | undefined;
              priority: number;
              call: AlephRuntimeRuntimeCallLike;
            };
          };
        }
      >
    >;

    /**
     * See [`Pallet::cancel_named`].
     *
     * @param {FixedBytes<32>} id
     **/
    cancelNamed: GenericTxCall<
      Rv,
      (id: FixedBytes<32>) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Scheduler';
          palletCall: {
            name: 'CancelNamed';
            params: { id: FixedBytes<32> };
          };
        }
      >
    >;

    /**
     * See [`Pallet::schedule_after`].
     *
     * @param {number} after
     * @param {[number, number] | undefined} maybePeriodic
     * @param {number} priority
     * @param {AlephRuntimeRuntimeCallLike} call
     **/
    scheduleAfter: GenericTxCall<
      Rv,
      (
        after: number,
        maybePeriodic: [number, number] | undefined,
        priority: number,
        call: AlephRuntimeRuntimeCallLike,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Scheduler';
          palletCall: {
            name: 'ScheduleAfter';
            params: {
              after: number;
              maybePeriodic: [number, number] | undefined;
              priority: number;
              call: AlephRuntimeRuntimeCallLike;
            };
          };
        }
      >
    >;

    /**
     * See [`Pallet::schedule_named_after`].
     *
     * @param {FixedBytes<32>} id
     * @param {number} after
     * @param {[number, number] | undefined} maybePeriodic
     * @param {number} priority
     * @param {AlephRuntimeRuntimeCallLike} call
     **/
    scheduleNamedAfter: GenericTxCall<
      Rv,
      (
        id: FixedBytes<32>,
        after: number,
        maybePeriodic: [number, number] | undefined,
        priority: number,
        call: AlephRuntimeRuntimeCallLike,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Scheduler';
          palletCall: {
            name: 'ScheduleNamedAfter';
            params: {
              id: FixedBytes<32>;
              after: number;
              maybePeriodic: [number, number] | undefined;
              priority: number;
              call: AlephRuntimeRuntimeCallLike;
            };
          };
        }
      >
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>;
  };
  /**
   * Pallet `Timestamp`'s transaction calls
   **/
  timestamp: {
    /**
     * See [`Pallet::set`].
     *
     * @param {bigint} now
     **/
    set: GenericTxCall<
      Rv,
      (now: bigint) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Timestamp';
          palletCall: {
            name: 'Set';
            params: { now: bigint };
          };
        }
      >
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>;
  };
  /**
   * Pallet `Balances`'s transaction calls
   **/
  balances: {
    /**
     * See [`Pallet::transfer_allow_death`].
     *
     * @param {MultiAddressLike} dest
     * @param {bigint} value
     **/
    transferAllowDeath: GenericTxCall<
      Rv,
      (
        dest: MultiAddressLike,
        value: bigint,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Balances';
          palletCall: {
            name: 'TransferAllowDeath';
            params: { dest: MultiAddressLike; value: bigint };
          };
        }
      >
    >;

    /**
     * See [`Pallet::force_transfer`].
     *
     * @param {MultiAddressLike} source
     * @param {MultiAddressLike} dest
     * @param {bigint} value
     **/
    forceTransfer: GenericTxCall<
      Rv,
      (
        source: MultiAddressLike,
        dest: MultiAddressLike,
        value: bigint,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Balances';
          palletCall: {
            name: 'ForceTransfer';
            params: { source: MultiAddressLike; dest: MultiAddressLike; value: bigint };
          };
        }
      >
    >;

    /**
     * See [`Pallet::transfer_keep_alive`].
     *
     * @param {MultiAddressLike} dest
     * @param {bigint} value
     **/
    transferKeepAlive: GenericTxCall<
      Rv,
      (
        dest: MultiAddressLike,
        value: bigint,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Balances';
          palletCall: {
            name: 'TransferKeepAlive';
            params: { dest: MultiAddressLike; value: bigint };
          };
        }
      >
    >;

    /**
     * See [`Pallet::transfer_all`].
     *
     * @param {MultiAddressLike} dest
     * @param {boolean} keepAlive
     **/
    transferAll: GenericTxCall<
      Rv,
      (
        dest: MultiAddressLike,
        keepAlive: boolean,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Balances';
          palletCall: {
            name: 'TransferAll';
            params: { dest: MultiAddressLike; keepAlive: boolean };
          };
        }
      >
    >;

    /**
     * See [`Pallet::force_unreserve`].
     *
     * @param {MultiAddressLike} who
     * @param {bigint} amount
     **/
    forceUnreserve: GenericTxCall<
      Rv,
      (
        who: MultiAddressLike,
        amount: bigint,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Balances';
          palletCall: {
            name: 'ForceUnreserve';
            params: { who: MultiAddressLike; amount: bigint };
          };
        }
      >
    >;

    /**
     * See [`Pallet::upgrade_accounts`].
     *
     * @param {Array<AccountId32Like>} who
     **/
    upgradeAccounts: GenericTxCall<
      Rv,
      (who: Array<AccountId32Like>) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Balances';
          palletCall: {
            name: 'UpgradeAccounts';
            params: { who: Array<AccountId32Like> };
          };
        }
      >
    >;

    /**
     * See [`Pallet::force_set_balance`].
     *
     * @param {MultiAddressLike} who
     * @param {bigint} newFree
     **/
    forceSetBalance: GenericTxCall<
      Rv,
      (
        who: MultiAddressLike,
        newFree: bigint,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Balances';
          palletCall: {
            name: 'ForceSetBalance';
            params: { who: MultiAddressLike; newFree: bigint };
          };
        }
      >
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>;
  };
  /**
   * Pallet `Staking`'s transaction calls
   **/
  staking: {
    /**
     * See [`Pallet::bond`].
     *
     * @param {bigint} value
     * @param {PalletStakingRewardDestination} payee
     **/
    bond: GenericTxCall<
      Rv,
      (
        value: bigint,
        payee: PalletStakingRewardDestination,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Staking';
          palletCall: {
            name: 'Bond';
            params: { value: bigint; payee: PalletStakingRewardDestination };
          };
        }
      >
    >;

    /**
     * See [`Pallet::bond_extra`].
     *
     * @param {bigint} maxAdditional
     **/
    bondExtra: GenericTxCall<
      Rv,
      (maxAdditional: bigint) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Staking';
          palletCall: {
            name: 'BondExtra';
            params: { maxAdditional: bigint };
          };
        }
      >
    >;

    /**
     * See [`Pallet::unbond`].
     *
     * @param {bigint} value
     **/
    unbond: GenericTxCall<
      Rv,
      (value: bigint) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Staking';
          palletCall: {
            name: 'Unbond';
            params: { value: bigint };
          };
        }
      >
    >;

    /**
     * See [`Pallet::withdraw_unbonded`].
     *
     * @param {number} numSlashingSpans
     **/
    withdrawUnbonded: GenericTxCall<
      Rv,
      (numSlashingSpans: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Staking';
          palletCall: {
            name: 'WithdrawUnbonded';
            params: { numSlashingSpans: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::validate`].
     *
     * @param {PalletStakingValidatorPrefs} prefs
     **/
    validate: GenericTxCall<
      Rv,
      (prefs: PalletStakingValidatorPrefs) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Staking';
          palletCall: {
            name: 'Validate';
            params: { prefs: PalletStakingValidatorPrefs };
          };
        }
      >
    >;

    /**
     * See [`Pallet::nominate`].
     *
     * @param {Array<MultiAddressLike>} targets
     **/
    nominate: GenericTxCall<
      Rv,
      (targets: Array<MultiAddressLike>) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Staking';
          palletCall: {
            name: 'Nominate';
            params: { targets: Array<MultiAddressLike> };
          };
        }
      >
    >;

    /**
     * See [`Pallet::chill`].
     *
     **/
    chill: GenericTxCall<
      Rv,
      () => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Staking';
          palletCall: {
            name: 'Chill';
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_payee`].
     *
     * @param {PalletStakingRewardDestination} payee
     **/
    setPayee: GenericTxCall<
      Rv,
      (payee: PalletStakingRewardDestination) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Staking';
          palletCall: {
            name: 'SetPayee';
            params: { payee: PalletStakingRewardDestination };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_controller`].
     *
     **/
    setController: GenericTxCall<
      Rv,
      () => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Staking';
          palletCall: {
            name: 'SetController';
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_validator_count`].
     *
     * @param {number} new_
     **/
    setValidatorCount: GenericTxCall<
      Rv,
      (new_: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Staking';
          palletCall: {
            name: 'SetValidatorCount';
            params: { new: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::increase_validator_count`].
     *
     * @param {number} additional
     **/
    increaseValidatorCount: GenericTxCall<
      Rv,
      (additional: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Staking';
          palletCall: {
            name: 'IncreaseValidatorCount';
            params: { additional: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::scale_validator_count`].
     *
     * @param {Percent} factor
     **/
    scaleValidatorCount: GenericTxCall<
      Rv,
      (factor: Percent) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Staking';
          palletCall: {
            name: 'ScaleValidatorCount';
            params: { factor: Percent };
          };
        }
      >
    >;

    /**
     * See [`Pallet::force_no_eras`].
     *
     **/
    forceNoEras: GenericTxCall<
      Rv,
      () => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Staking';
          palletCall: {
            name: 'ForceNoEras';
          };
        }
      >
    >;

    /**
     * See [`Pallet::force_new_era`].
     *
     **/
    forceNewEra: GenericTxCall<
      Rv,
      () => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Staking';
          palletCall: {
            name: 'ForceNewEra';
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_invulnerables`].
     *
     * @param {Array<AccountId32Like>} invulnerables
     **/
    setInvulnerables: GenericTxCall<
      Rv,
      (invulnerables: Array<AccountId32Like>) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Staking';
          palletCall: {
            name: 'SetInvulnerables';
            params: { invulnerables: Array<AccountId32Like> };
          };
        }
      >
    >;

    /**
     * See [`Pallet::force_unstake`].
     *
     * @param {AccountId32Like} stash
     * @param {number} numSlashingSpans
     **/
    forceUnstake: GenericTxCall<
      Rv,
      (
        stash: AccountId32Like,
        numSlashingSpans: number,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Staking';
          palletCall: {
            name: 'ForceUnstake';
            params: { stash: AccountId32Like; numSlashingSpans: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::force_new_era_always`].
     *
     **/
    forceNewEraAlways: GenericTxCall<
      Rv,
      () => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Staking';
          palletCall: {
            name: 'ForceNewEraAlways';
          };
        }
      >
    >;

    /**
     * See [`Pallet::cancel_deferred_slash`].
     *
     * @param {number} era
     * @param {Array<number>} slashIndices
     **/
    cancelDeferredSlash: GenericTxCall<
      Rv,
      (
        era: number,
        slashIndices: Array<number>,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Staking';
          palletCall: {
            name: 'CancelDeferredSlash';
            params: { era: number; slashIndices: Array<number> };
          };
        }
      >
    >;

    /**
     * See [`Pallet::payout_stakers`].
     *
     * @param {AccountId32Like} validatorStash
     * @param {number} era
     **/
    payoutStakers: GenericTxCall<
      Rv,
      (
        validatorStash: AccountId32Like,
        era: number,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Staking';
          palletCall: {
            name: 'PayoutStakers';
            params: { validatorStash: AccountId32Like; era: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::rebond`].
     *
     * @param {bigint} value
     **/
    rebond: GenericTxCall<
      Rv,
      (value: bigint) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Staking';
          palletCall: {
            name: 'Rebond';
            params: { value: bigint };
          };
        }
      >
    >;

    /**
     * See [`Pallet::reap_stash`].
     *
     * @param {AccountId32Like} stash
     * @param {number} numSlashingSpans
     **/
    reapStash: GenericTxCall<
      Rv,
      (
        stash: AccountId32Like,
        numSlashingSpans: number,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Staking';
          palletCall: {
            name: 'ReapStash';
            params: { stash: AccountId32Like; numSlashingSpans: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::kick`].
     *
     * @param {Array<MultiAddressLike>} who
     **/
    kick: GenericTxCall<
      Rv,
      (who: Array<MultiAddressLike>) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Staking';
          palletCall: {
            name: 'Kick';
            params: { who: Array<MultiAddressLike> };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_staking_configs`].
     *
     * @param {PalletStakingPalletConfigOp} minNominatorBond
     * @param {PalletStakingPalletConfigOp} minValidatorBond
     * @param {PalletStakingPalletConfigOpU32} maxNominatorCount
     * @param {PalletStakingPalletConfigOpU32} maxValidatorCount
     * @param {PalletStakingPalletConfigOpPercent} chillThreshold
     * @param {PalletStakingPalletConfigOpPerbill} minCommission
     **/
    setStakingConfigs: GenericTxCall<
      Rv,
      (
        minNominatorBond: PalletStakingPalletConfigOp,
        minValidatorBond: PalletStakingPalletConfigOp,
        maxNominatorCount: PalletStakingPalletConfigOpU32,
        maxValidatorCount: PalletStakingPalletConfigOpU32,
        chillThreshold: PalletStakingPalletConfigOpPercent,
        minCommission: PalletStakingPalletConfigOpPerbill,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Staking';
          palletCall: {
            name: 'SetStakingConfigs';
            params: {
              minNominatorBond: PalletStakingPalletConfigOp;
              minValidatorBond: PalletStakingPalletConfigOp;
              maxNominatorCount: PalletStakingPalletConfigOpU32;
              maxValidatorCount: PalletStakingPalletConfigOpU32;
              chillThreshold: PalletStakingPalletConfigOpPercent;
              minCommission: PalletStakingPalletConfigOpPerbill;
            };
          };
        }
      >
    >;

    /**
     * See [`Pallet::chill_other`].
     *
     * @param {AccountId32Like} controller
     **/
    chillOther: GenericTxCall<
      Rv,
      (controller: AccountId32Like) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Staking';
          palletCall: {
            name: 'ChillOther';
            params: { controller: AccountId32Like };
          };
        }
      >
    >;

    /**
     * See [`Pallet::force_apply_min_commission`].
     *
     * @param {AccountId32Like} validatorStash
     **/
    forceApplyMinCommission: GenericTxCall<
      Rv,
      (validatorStash: AccountId32Like) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Staking';
          palletCall: {
            name: 'ForceApplyMinCommission';
            params: { validatorStash: AccountId32Like };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_min_commission`].
     *
     * @param {Perbill} new_
     **/
    setMinCommission: GenericTxCall<
      Rv,
      (new_: Perbill) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Staking';
          palletCall: {
            name: 'SetMinCommission';
            params: { new: Perbill };
          };
        }
      >
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>;
  };
  /**
   * Pallet `Session`'s transaction calls
   **/
  session: {
    /**
     * See [`Pallet::set_keys`].
     *
     * @param {AlephRuntimeSessionKeys} keys
     * @param {BytesLike} proof
     **/
    setKeys: GenericTxCall<
      Rv,
      (
        keys: AlephRuntimeSessionKeys,
        proof: BytesLike,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Session';
          palletCall: {
            name: 'SetKeys';
            params: { keys: AlephRuntimeSessionKeys; proof: BytesLike };
          };
        }
      >
    >;

    /**
     * See [`Pallet::purge_keys`].
     *
     **/
    purgeKeys: GenericTxCall<
      Rv,
      () => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Session';
          palletCall: {
            name: 'PurgeKeys';
          };
        }
      >
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>;
  };
  /**
   * Pallet `Aleph`'s transaction calls
   **/
  aleph: {
    /**
     * See [`Pallet::set_emergency_finalizer`].
     *
     * @param {PrimitivesAppPublic} emergencyFinalizer
     **/
    setEmergencyFinalizer: GenericTxCall<
      Rv,
      (emergencyFinalizer: PrimitivesAppPublic) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Aleph';
          palletCall: {
            name: 'SetEmergencyFinalizer';
            params: { emergencyFinalizer: PrimitivesAppPublic };
          };
        }
      >
    >;

    /**
     * See [`Pallet::schedule_finality_version_change`].
     *
     * @param {number} versionIncoming
     * @param {number} session
     **/
    scheduleFinalityVersionChange: GenericTxCall<
      Rv,
      (
        versionIncoming: number,
        session: number,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Aleph';
          palletCall: {
            name: 'ScheduleFinalityVersionChange';
            params: { versionIncoming: number; session: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_inflation_parameters`].
     *
     * @param {bigint | undefined} azeroCap
     * @param {bigint | undefined} horizonMillisecs
     **/
    setInflationParameters: GenericTxCall<
      Rv,
      (
        azeroCap: bigint | undefined,
        horizonMillisecs: bigint | undefined,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Aleph';
          palletCall: {
            name: 'SetInflationParameters';
            params: { azeroCap: bigint | undefined; horizonMillisecs: bigint | undefined };
          };
        }
      >
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>;
  };
  /**
   * Pallet `Elections`'s transaction calls
   **/
  elections: {
    /**
     * See [`Pallet::change_validators`].
     *
     * @param {Array<AccountId32Like> | undefined} reservedValidators
     * @param {Array<AccountId32Like> | undefined} nonReservedValidators
     * @param {PrimitivesCommitteeSeats | undefined} committeeSize
     **/
    changeValidators: GenericTxCall<
      Rv,
      (
        reservedValidators: Array<AccountId32Like> | undefined,
        nonReservedValidators: Array<AccountId32Like> | undefined,
        committeeSize: PrimitivesCommitteeSeats | undefined,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Elections';
          palletCall: {
            name: 'ChangeValidators';
            params: {
              reservedValidators: Array<AccountId32Like> | undefined;
              nonReservedValidators: Array<AccountId32Like> | undefined;
              committeeSize: PrimitivesCommitteeSeats | undefined;
            };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_elections_openness`].
     *
     * @param {PrimitivesElectionOpenness} openness
     **/
    setElectionsOpenness: GenericTxCall<
      Rv,
      (openness: PrimitivesElectionOpenness) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Elections';
          palletCall: {
            name: 'SetElectionsOpenness';
            params: { openness: PrimitivesElectionOpenness };
          };
        }
      >
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>;
  };
  /**
   * Pallet `Treasury`'s transaction calls
   **/
  treasury: {
    /**
     * See [`Pallet::propose_spend`].
     *
     * @param {bigint} value
     * @param {MultiAddressLike} beneficiary
     **/
    proposeSpend: GenericTxCall<
      Rv,
      (
        value: bigint,
        beneficiary: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Treasury';
          palletCall: {
            name: 'ProposeSpend';
            params: { value: bigint; beneficiary: MultiAddressLike };
          };
        }
      >
    >;

    /**
     * See [`Pallet::reject_proposal`].
     *
     * @param {number} proposalId
     **/
    rejectProposal: GenericTxCall<
      Rv,
      (proposalId: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Treasury';
          palletCall: {
            name: 'RejectProposal';
            params: { proposalId: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::approve_proposal`].
     *
     * @param {number} proposalId
     **/
    approveProposal: GenericTxCall<
      Rv,
      (proposalId: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Treasury';
          palletCall: {
            name: 'ApproveProposal';
            params: { proposalId: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::spend`].
     *
     * @param {bigint} amount
     * @param {MultiAddressLike} beneficiary
     **/
    spend: GenericTxCall<
      Rv,
      (
        amount: bigint,
        beneficiary: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Treasury';
          palletCall: {
            name: 'Spend';
            params: { amount: bigint; beneficiary: MultiAddressLike };
          };
        }
      >
    >;

    /**
     * See [`Pallet::remove_approval`].
     *
     * @param {number} proposalId
     **/
    removeApproval: GenericTxCall<
      Rv,
      (proposalId: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Treasury';
          palletCall: {
            name: 'RemoveApproval';
            params: { proposalId: number };
          };
        }
      >
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>;
  };
  /**
   * Pallet `Vesting`'s transaction calls
   **/
  vesting: {
    /**
     * See [`Pallet::vest`].
     *
     **/
    vest: GenericTxCall<
      Rv,
      () => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Vesting';
          palletCall: {
            name: 'Vest';
          };
        }
      >
    >;

    /**
     * See [`Pallet::vest_other`].
     *
     * @param {MultiAddressLike} target
     **/
    vestOther: GenericTxCall<
      Rv,
      (target: MultiAddressLike) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Vesting';
          palletCall: {
            name: 'VestOther';
            params: { target: MultiAddressLike };
          };
        }
      >
    >;

    /**
     * See [`Pallet::vested_transfer`].
     *
     * @param {MultiAddressLike} target
     * @param {PalletVestingVestingInfo} schedule
     **/
    vestedTransfer: GenericTxCall<
      Rv,
      (
        target: MultiAddressLike,
        schedule: PalletVestingVestingInfo,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Vesting';
          palletCall: {
            name: 'VestedTransfer';
            params: { target: MultiAddressLike; schedule: PalletVestingVestingInfo };
          };
        }
      >
    >;

    /**
     * See [`Pallet::force_vested_transfer`].
     *
     * @param {MultiAddressLike} source
     * @param {MultiAddressLike} target
     * @param {PalletVestingVestingInfo} schedule
     **/
    forceVestedTransfer: GenericTxCall<
      Rv,
      (
        source: MultiAddressLike,
        target: MultiAddressLike,
        schedule: PalletVestingVestingInfo,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Vesting';
          palletCall: {
            name: 'ForceVestedTransfer';
            params: { source: MultiAddressLike; target: MultiAddressLike; schedule: PalletVestingVestingInfo };
          };
        }
      >
    >;

    /**
     * See [`Pallet::merge_schedules`].
     *
     * @param {number} schedule1Index
     * @param {number} schedule2Index
     **/
    mergeSchedules: GenericTxCall<
      Rv,
      (
        schedule1Index: number,
        schedule2Index: number,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Vesting';
          palletCall: {
            name: 'MergeSchedules';
            params: { schedule1Index: number; schedule2Index: number };
          };
        }
      >
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>;
  };
  /**
   * Pallet `Utility`'s transaction calls
   **/
  utility: {
    /**
     * See [`Pallet::batch`].
     *
     * @param {Array<AlephRuntimeRuntimeCallLike>} calls
     **/
    batch: GenericTxCall<
      Rv,
      (calls: Array<AlephRuntimeRuntimeCallLike>) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Utility';
          palletCall: {
            name: 'Batch';
            params: { calls: Array<AlephRuntimeRuntimeCallLike> };
          };
        }
      >
    >;

    /**
     * See [`Pallet::as_derivative`].
     *
     * @param {number} index
     * @param {AlephRuntimeRuntimeCallLike} call
     **/
    asDerivative: GenericTxCall<
      Rv,
      (
        index: number,
        call: AlephRuntimeRuntimeCallLike,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Utility';
          palletCall: {
            name: 'AsDerivative';
            params: { index: number; call: AlephRuntimeRuntimeCallLike };
          };
        }
      >
    >;

    /**
     * See [`Pallet::batch_all`].
     *
     * @param {Array<AlephRuntimeRuntimeCallLike>} calls
     **/
    batchAll: GenericTxCall<
      Rv,
      (calls: Array<AlephRuntimeRuntimeCallLike>) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Utility';
          palletCall: {
            name: 'BatchAll';
            params: { calls: Array<AlephRuntimeRuntimeCallLike> };
          };
        }
      >
    >;

    /**
     * See [`Pallet::dispatch_as`].
     *
     * @param {AlephRuntimeOriginCaller} asOrigin
     * @param {AlephRuntimeRuntimeCallLike} call
     **/
    dispatchAs: GenericTxCall<
      Rv,
      (
        asOrigin: AlephRuntimeOriginCaller,
        call: AlephRuntimeRuntimeCallLike,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Utility';
          palletCall: {
            name: 'DispatchAs';
            params: { asOrigin: AlephRuntimeOriginCaller; call: AlephRuntimeRuntimeCallLike };
          };
        }
      >
    >;

    /**
     * See [`Pallet::force_batch`].
     *
     * @param {Array<AlephRuntimeRuntimeCallLike>} calls
     **/
    forceBatch: GenericTxCall<
      Rv,
      (calls: Array<AlephRuntimeRuntimeCallLike>) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Utility';
          palletCall: {
            name: 'ForceBatch';
            params: { calls: Array<AlephRuntimeRuntimeCallLike> };
          };
        }
      >
    >;

    /**
     * See [`Pallet::with_weight`].
     *
     * @param {AlephRuntimeRuntimeCallLike} call
     * @param {SpWeightsWeightV2Weight} weight
     **/
    withWeight: GenericTxCall<
      Rv,
      (
        call: AlephRuntimeRuntimeCallLike,
        weight: SpWeightsWeightV2Weight,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Utility';
          palletCall: {
            name: 'WithWeight';
            params: { call: AlephRuntimeRuntimeCallLike; weight: SpWeightsWeightV2Weight };
          };
        }
      >
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>;
  };
  /**
   * Pallet `Multisig`'s transaction calls
   **/
  multisig: {
    /**
     * See [`Pallet::as_multi_threshold_1`].
     *
     * @param {Array<AccountId32Like>} otherSignatories
     * @param {AlephRuntimeRuntimeCallLike} call
     **/
    asMultiThreshold1: GenericTxCall<
      Rv,
      (
        otherSignatories: Array<AccountId32Like>,
        call: AlephRuntimeRuntimeCallLike,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Multisig';
          palletCall: {
            name: 'AsMultiThreshold1';
            params: { otherSignatories: Array<AccountId32Like>; call: AlephRuntimeRuntimeCallLike };
          };
        }
      >
    >;

    /**
     * See [`Pallet::as_multi`].
     *
     * @param {number} threshold
     * @param {Array<AccountId32Like>} otherSignatories
     * @param {PalletMultisigTimepoint | undefined} maybeTimepoint
     * @param {AlephRuntimeRuntimeCallLike} call
     * @param {SpWeightsWeightV2Weight} maxWeight
     **/
    asMulti: GenericTxCall<
      Rv,
      (
        threshold: number,
        otherSignatories: Array<AccountId32Like>,
        maybeTimepoint: PalletMultisigTimepoint | undefined,
        call: AlephRuntimeRuntimeCallLike,
        maxWeight: SpWeightsWeightV2Weight,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Multisig';
          palletCall: {
            name: 'AsMulti';
            params: {
              threshold: number;
              otherSignatories: Array<AccountId32Like>;
              maybeTimepoint: PalletMultisigTimepoint | undefined;
              call: AlephRuntimeRuntimeCallLike;
              maxWeight: SpWeightsWeightV2Weight;
            };
          };
        }
      >
    >;

    /**
     * See [`Pallet::approve_as_multi`].
     *
     * @param {number} threshold
     * @param {Array<AccountId32Like>} otherSignatories
     * @param {PalletMultisigTimepoint | undefined} maybeTimepoint
     * @param {FixedBytes<32>} callHash
     * @param {SpWeightsWeightV2Weight} maxWeight
     **/
    approveAsMulti: GenericTxCall<
      Rv,
      (
        threshold: number,
        otherSignatories: Array<AccountId32Like>,
        maybeTimepoint: PalletMultisigTimepoint | undefined,
        callHash: FixedBytes<32>,
        maxWeight: SpWeightsWeightV2Weight,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Multisig';
          palletCall: {
            name: 'ApproveAsMulti';
            params: {
              threshold: number;
              otherSignatories: Array<AccountId32Like>;
              maybeTimepoint: PalletMultisigTimepoint | undefined;
              callHash: FixedBytes<32>;
              maxWeight: SpWeightsWeightV2Weight;
            };
          };
        }
      >
    >;

    /**
     * See [`Pallet::cancel_as_multi`].
     *
     * @param {number} threshold
     * @param {Array<AccountId32Like>} otherSignatories
     * @param {PalletMultisigTimepoint} timepoint
     * @param {FixedBytes<32>} callHash
     **/
    cancelAsMulti: GenericTxCall<
      Rv,
      (
        threshold: number,
        otherSignatories: Array<AccountId32Like>,
        timepoint: PalletMultisigTimepoint,
        callHash: FixedBytes<32>,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Multisig';
          palletCall: {
            name: 'CancelAsMulti';
            params: {
              threshold: number;
              otherSignatories: Array<AccountId32Like>;
              timepoint: PalletMultisigTimepoint;
              callHash: FixedBytes<32>;
            };
          };
        }
      >
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>;
  };
  /**
   * Pallet `Sudo`'s transaction calls
   **/
  sudo: {
    /**
     * See [`Pallet::sudo`].
     *
     * @param {AlephRuntimeRuntimeCallLike} call
     **/
    sudo: GenericTxCall<
      Rv,
      (call: AlephRuntimeRuntimeCallLike) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Sudo';
          palletCall: {
            name: 'Sudo';
            params: { call: AlephRuntimeRuntimeCallLike };
          };
        }
      >
    >;

    /**
     * See [`Pallet::sudo_unchecked_weight`].
     *
     * @param {AlephRuntimeRuntimeCallLike} call
     * @param {SpWeightsWeightV2Weight} weight
     **/
    sudoUncheckedWeight: GenericTxCall<
      Rv,
      (
        call: AlephRuntimeRuntimeCallLike,
        weight: SpWeightsWeightV2Weight,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Sudo';
          palletCall: {
            name: 'SudoUncheckedWeight';
            params: { call: AlephRuntimeRuntimeCallLike; weight: SpWeightsWeightV2Weight };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_key`].
     *
     * @param {MultiAddressLike} new_
     **/
    setKey: GenericTxCall<
      Rv,
      (new_: MultiAddressLike) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Sudo';
          palletCall: {
            name: 'SetKey';
            params: { new: MultiAddressLike };
          };
        }
      >
    >;

    /**
     * See [`Pallet::sudo_as`].
     *
     * @param {MultiAddressLike} who
     * @param {AlephRuntimeRuntimeCallLike} call
     **/
    sudoAs: GenericTxCall<
      Rv,
      (
        who: MultiAddressLike,
        call: AlephRuntimeRuntimeCallLike,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Sudo';
          palletCall: {
            name: 'SudoAs';
            params: { who: MultiAddressLike; call: AlephRuntimeRuntimeCallLike };
          };
        }
      >
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>;
  };
  /**
   * Pallet `Contracts`'s transaction calls
   **/
  contracts: {
    /**
     * See [`Pallet::call_old_weight`].
     *
     * @param {MultiAddressLike} dest
     * @param {bigint} value
     * @param {bigint} gasLimit
     * @param {bigint | undefined} storageDepositLimit
     * @param {BytesLike} data
     **/
    callOldWeight: GenericTxCall<
      Rv,
      (
        dest: MultiAddressLike,
        value: bigint,
        gasLimit: bigint,
        storageDepositLimit: bigint | undefined,
        data: BytesLike,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Contracts';
          palletCall: {
            name: 'CallOldWeight';
            params: {
              dest: MultiAddressLike;
              value: bigint;
              gasLimit: bigint;
              storageDepositLimit: bigint | undefined;
              data: BytesLike;
            };
          };
        }
      >
    >;

    /**
     * See [`Pallet::instantiate_with_code_old_weight`].
     *
     * @param {bigint} value
     * @param {bigint} gasLimit
     * @param {bigint | undefined} storageDepositLimit
     * @param {BytesLike} code
     * @param {BytesLike} data
     * @param {BytesLike} salt
     **/
    instantiateWithCodeOldWeight: GenericTxCall<
      Rv,
      (
        value: bigint,
        gasLimit: bigint,
        storageDepositLimit: bigint | undefined,
        code: BytesLike,
        data: BytesLike,
        salt: BytesLike,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Contracts';
          palletCall: {
            name: 'InstantiateWithCodeOldWeight';
            params: {
              value: bigint;
              gasLimit: bigint;
              storageDepositLimit: bigint | undefined;
              code: BytesLike;
              data: BytesLike;
              salt: BytesLike;
            };
          };
        }
      >
    >;

    /**
     * See [`Pallet::instantiate_old_weight`].
     *
     * @param {bigint} value
     * @param {bigint} gasLimit
     * @param {bigint | undefined} storageDepositLimit
     * @param {H256} codeHash
     * @param {BytesLike} data
     * @param {BytesLike} salt
     **/
    instantiateOldWeight: GenericTxCall<
      Rv,
      (
        value: bigint,
        gasLimit: bigint,
        storageDepositLimit: bigint | undefined,
        codeHash: H256,
        data: BytesLike,
        salt: BytesLike,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Contracts';
          palletCall: {
            name: 'InstantiateOldWeight';
            params: {
              value: bigint;
              gasLimit: bigint;
              storageDepositLimit: bigint | undefined;
              codeHash: H256;
              data: BytesLike;
              salt: BytesLike;
            };
          };
        }
      >
    >;

    /**
     * See [`Pallet::upload_code`].
     *
     * @param {BytesLike} code
     * @param {bigint | undefined} storageDepositLimit
     * @param {PalletContractsWasmDeterminism} determinism
     **/
    uploadCode: GenericTxCall<
      Rv,
      (
        code: BytesLike,
        storageDepositLimit: bigint | undefined,
        determinism: PalletContractsWasmDeterminism,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Contracts';
          palletCall: {
            name: 'UploadCode';
            params: {
              code: BytesLike;
              storageDepositLimit: bigint | undefined;
              determinism: PalletContractsWasmDeterminism;
            };
          };
        }
      >
    >;

    /**
     * See [`Pallet::remove_code`].
     *
     * @param {H256} codeHash
     **/
    removeCode: GenericTxCall<
      Rv,
      (codeHash: H256) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Contracts';
          palletCall: {
            name: 'RemoveCode';
            params: { codeHash: H256 };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_code`].
     *
     * @param {MultiAddressLike} dest
     * @param {H256} codeHash
     **/
    setCode: GenericTxCall<
      Rv,
      (
        dest: MultiAddressLike,
        codeHash: H256,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Contracts';
          palletCall: {
            name: 'SetCode';
            params: { dest: MultiAddressLike; codeHash: H256 };
          };
        }
      >
    >;

    /**
     * See [`Pallet::call`].
     *
     * @param {MultiAddressLike} dest
     * @param {bigint} value
     * @param {SpWeightsWeightV2Weight} gasLimit
     * @param {bigint | undefined} storageDepositLimit
     * @param {BytesLike} data
     **/
    call: GenericTxCall<
      Rv,
      (
        dest: MultiAddressLike,
        value: bigint,
        gasLimit: SpWeightsWeightV2Weight,
        storageDepositLimit: bigint | undefined,
        data: BytesLike,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Contracts';
          palletCall: {
            name: 'Call';
            params: {
              dest: MultiAddressLike;
              value: bigint;
              gasLimit: SpWeightsWeightV2Weight;
              storageDepositLimit: bigint | undefined;
              data: BytesLike;
            };
          };
        }
      >
    >;

    /**
     * See [`Pallet::instantiate_with_code`].
     *
     * @param {bigint} value
     * @param {SpWeightsWeightV2Weight} gasLimit
     * @param {bigint | undefined} storageDepositLimit
     * @param {BytesLike} code
     * @param {BytesLike} data
     * @param {BytesLike} salt
     **/
    instantiateWithCode: GenericTxCall<
      Rv,
      (
        value: bigint,
        gasLimit: SpWeightsWeightV2Weight,
        storageDepositLimit: bigint | undefined,
        code: BytesLike,
        data: BytesLike,
        salt: BytesLike,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Contracts';
          palletCall: {
            name: 'InstantiateWithCode';
            params: {
              value: bigint;
              gasLimit: SpWeightsWeightV2Weight;
              storageDepositLimit: bigint | undefined;
              code: BytesLike;
              data: BytesLike;
              salt: BytesLike;
            };
          };
        }
      >
    >;

    /**
     * See [`Pallet::instantiate`].
     *
     * @param {bigint} value
     * @param {SpWeightsWeightV2Weight} gasLimit
     * @param {bigint | undefined} storageDepositLimit
     * @param {H256} codeHash
     * @param {BytesLike} data
     * @param {BytesLike} salt
     **/
    instantiate: GenericTxCall<
      Rv,
      (
        value: bigint,
        gasLimit: SpWeightsWeightV2Weight,
        storageDepositLimit: bigint | undefined,
        codeHash: H256,
        data: BytesLike,
        salt: BytesLike,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Contracts';
          palletCall: {
            name: 'Instantiate';
            params: {
              value: bigint;
              gasLimit: SpWeightsWeightV2Weight;
              storageDepositLimit: bigint | undefined;
              codeHash: H256;
              data: BytesLike;
              salt: BytesLike;
            };
          };
        }
      >
    >;

    /**
     * See [`Pallet::migrate`].
     *
     * @param {SpWeightsWeightV2Weight} weightLimit
     **/
    migrate: GenericTxCall<
      Rv,
      (weightLimit: SpWeightsWeightV2Weight) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Contracts';
          palletCall: {
            name: 'Migrate';
            params: { weightLimit: SpWeightsWeightV2Weight };
          };
        }
      >
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>;
  };
  /**
   * Pallet `NominationPools`'s transaction calls
   **/
  nominationPools: {
    /**
     * See [`Pallet::join`].
     *
     * @param {bigint} amount
     * @param {number} poolId
     **/
    join: GenericTxCall<
      Rv,
      (
        amount: bigint,
        poolId: number,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'NominationPools';
          palletCall: {
            name: 'Join';
            params: { amount: bigint; poolId: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::bond_extra`].
     *
     * @param {PalletNominationPoolsBondExtra} extra
     **/
    bondExtra: GenericTxCall<
      Rv,
      (extra: PalletNominationPoolsBondExtra) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'NominationPools';
          palletCall: {
            name: 'BondExtra';
            params: { extra: PalletNominationPoolsBondExtra };
          };
        }
      >
    >;

    /**
     * See [`Pallet::claim_payout`].
     *
     **/
    claimPayout: GenericTxCall<
      Rv,
      () => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'NominationPools';
          palletCall: {
            name: 'ClaimPayout';
          };
        }
      >
    >;

    /**
     * See [`Pallet::unbond`].
     *
     * @param {MultiAddressLike} memberAccount
     * @param {bigint} unbondingPoints
     **/
    unbond: GenericTxCall<
      Rv,
      (
        memberAccount: MultiAddressLike,
        unbondingPoints: bigint,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'NominationPools';
          palletCall: {
            name: 'Unbond';
            params: { memberAccount: MultiAddressLike; unbondingPoints: bigint };
          };
        }
      >
    >;

    /**
     * See [`Pallet::pool_withdraw_unbonded`].
     *
     * @param {number} poolId
     * @param {number} numSlashingSpans
     **/
    poolWithdrawUnbonded: GenericTxCall<
      Rv,
      (
        poolId: number,
        numSlashingSpans: number,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'NominationPools';
          palletCall: {
            name: 'PoolWithdrawUnbonded';
            params: { poolId: number; numSlashingSpans: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::withdraw_unbonded`].
     *
     * @param {MultiAddressLike} memberAccount
     * @param {number} numSlashingSpans
     **/
    withdrawUnbonded: GenericTxCall<
      Rv,
      (
        memberAccount: MultiAddressLike,
        numSlashingSpans: number,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'NominationPools';
          palletCall: {
            name: 'WithdrawUnbonded';
            params: { memberAccount: MultiAddressLike; numSlashingSpans: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::create`].
     *
     * @param {bigint} amount
     * @param {MultiAddressLike} root
     * @param {MultiAddressLike} nominator
     * @param {MultiAddressLike} bouncer
     **/
    create: GenericTxCall<
      Rv,
      (
        amount: bigint,
        root: MultiAddressLike,
        nominator: MultiAddressLike,
        bouncer: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'NominationPools';
          palletCall: {
            name: 'Create';
            params: { amount: bigint; root: MultiAddressLike; nominator: MultiAddressLike; bouncer: MultiAddressLike };
          };
        }
      >
    >;

    /**
     * See [`Pallet::create_with_pool_id`].
     *
     * @param {bigint} amount
     * @param {MultiAddressLike} root
     * @param {MultiAddressLike} nominator
     * @param {MultiAddressLike} bouncer
     * @param {number} poolId
     **/
    createWithPoolId: GenericTxCall<
      Rv,
      (
        amount: bigint,
        root: MultiAddressLike,
        nominator: MultiAddressLike,
        bouncer: MultiAddressLike,
        poolId: number,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'NominationPools';
          palletCall: {
            name: 'CreateWithPoolId';
            params: {
              amount: bigint;
              root: MultiAddressLike;
              nominator: MultiAddressLike;
              bouncer: MultiAddressLike;
              poolId: number;
            };
          };
        }
      >
    >;

    /**
     * See [`Pallet::nominate`].
     *
     * @param {number} poolId
     * @param {Array<AccountId32Like>} validators
     **/
    nominate: GenericTxCall<
      Rv,
      (
        poolId: number,
        validators: Array<AccountId32Like>,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'NominationPools';
          palletCall: {
            name: 'Nominate';
            params: { poolId: number; validators: Array<AccountId32Like> };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_state`].
     *
     * @param {number} poolId
     * @param {PalletNominationPoolsPoolState} state
     **/
    setState: GenericTxCall<
      Rv,
      (
        poolId: number,
        state: PalletNominationPoolsPoolState,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'NominationPools';
          palletCall: {
            name: 'SetState';
            params: { poolId: number; state: PalletNominationPoolsPoolState };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_metadata`].
     *
     * @param {number} poolId
     * @param {BytesLike} metadata
     **/
    setMetadata: GenericTxCall<
      Rv,
      (
        poolId: number,
        metadata: BytesLike,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'NominationPools';
          palletCall: {
            name: 'SetMetadata';
            params: { poolId: number; metadata: BytesLike };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_configs`].
     *
     * @param {PalletNominationPoolsConfigOp} minJoinBond
     * @param {PalletNominationPoolsConfigOp} minCreateBond
     * @param {PalletNominationPoolsConfigOpU32} maxPools
     * @param {PalletNominationPoolsConfigOpU32} maxMembers
     * @param {PalletNominationPoolsConfigOpU32} maxMembersPerPool
     * @param {PalletNominationPoolsConfigOpPerbill} globalMaxCommission
     **/
    setConfigs: GenericTxCall<
      Rv,
      (
        minJoinBond: PalletNominationPoolsConfigOp,
        minCreateBond: PalletNominationPoolsConfigOp,
        maxPools: PalletNominationPoolsConfigOpU32,
        maxMembers: PalletNominationPoolsConfigOpU32,
        maxMembersPerPool: PalletNominationPoolsConfigOpU32,
        globalMaxCommission: PalletNominationPoolsConfigOpPerbill,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'NominationPools';
          palletCall: {
            name: 'SetConfigs';
            params: {
              minJoinBond: PalletNominationPoolsConfigOp;
              minCreateBond: PalletNominationPoolsConfigOp;
              maxPools: PalletNominationPoolsConfigOpU32;
              maxMembers: PalletNominationPoolsConfigOpU32;
              maxMembersPerPool: PalletNominationPoolsConfigOpU32;
              globalMaxCommission: PalletNominationPoolsConfigOpPerbill;
            };
          };
        }
      >
    >;

    /**
     * See [`Pallet::update_roles`].
     *
     * @param {number} poolId
     * @param {PalletNominationPoolsConfigOp004} newRoot
     * @param {PalletNominationPoolsConfigOp004} newNominator
     * @param {PalletNominationPoolsConfigOp004} newBouncer
     **/
    updateRoles: GenericTxCall<
      Rv,
      (
        poolId: number,
        newRoot: PalletNominationPoolsConfigOp004,
        newNominator: PalletNominationPoolsConfigOp004,
        newBouncer: PalletNominationPoolsConfigOp004,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'NominationPools';
          palletCall: {
            name: 'UpdateRoles';
            params: {
              poolId: number;
              newRoot: PalletNominationPoolsConfigOp004;
              newNominator: PalletNominationPoolsConfigOp004;
              newBouncer: PalletNominationPoolsConfigOp004;
            };
          };
        }
      >
    >;

    /**
     * See [`Pallet::chill`].
     *
     * @param {number} poolId
     **/
    chill: GenericTxCall<
      Rv,
      (poolId: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'NominationPools';
          palletCall: {
            name: 'Chill';
            params: { poolId: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::bond_extra_other`].
     *
     * @param {MultiAddressLike} member
     * @param {PalletNominationPoolsBondExtra} extra
     **/
    bondExtraOther: GenericTxCall<
      Rv,
      (
        member: MultiAddressLike,
        extra: PalletNominationPoolsBondExtra,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'NominationPools';
          palletCall: {
            name: 'BondExtraOther';
            params: { member: MultiAddressLike; extra: PalletNominationPoolsBondExtra };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_claim_permission`].
     *
     * @param {PalletNominationPoolsClaimPermission} permission
     **/
    setClaimPermission: GenericTxCall<
      Rv,
      (permission: PalletNominationPoolsClaimPermission) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'NominationPools';
          palletCall: {
            name: 'SetClaimPermission';
            params: { permission: PalletNominationPoolsClaimPermission };
          };
        }
      >
    >;

    /**
     * See [`Pallet::claim_payout_other`].
     *
     * @param {AccountId32Like} other
     **/
    claimPayoutOther: GenericTxCall<
      Rv,
      (other: AccountId32Like) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'NominationPools';
          palletCall: {
            name: 'ClaimPayoutOther';
            params: { other: AccountId32Like };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_commission`].
     *
     * @param {number} poolId
     * @param {[Perbill, AccountId32Like] | undefined} newCommission
     **/
    setCommission: GenericTxCall<
      Rv,
      (
        poolId: number,
        newCommission: [Perbill, AccountId32Like] | undefined,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'NominationPools';
          palletCall: {
            name: 'SetCommission';
            params: { poolId: number; newCommission: [Perbill, AccountId32Like] | undefined };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_commission_max`].
     *
     * @param {number} poolId
     * @param {Perbill} maxCommission
     **/
    setCommissionMax: GenericTxCall<
      Rv,
      (
        poolId: number,
        maxCommission: Perbill,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'NominationPools';
          palletCall: {
            name: 'SetCommissionMax';
            params: { poolId: number; maxCommission: Perbill };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_commission_change_rate`].
     *
     * @param {number} poolId
     * @param {PalletNominationPoolsCommissionChangeRate} changeRate
     **/
    setCommissionChangeRate: GenericTxCall<
      Rv,
      (
        poolId: number,
        changeRate: PalletNominationPoolsCommissionChangeRate,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'NominationPools';
          palletCall: {
            name: 'SetCommissionChangeRate';
            params: { poolId: number; changeRate: PalletNominationPoolsCommissionChangeRate };
          };
        }
      >
    >;

    /**
     * See [`Pallet::claim_commission`].
     *
     * @param {number} poolId
     **/
    claimCommission: GenericTxCall<
      Rv,
      (poolId: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'NominationPools';
          palletCall: {
            name: 'ClaimCommission';
            params: { poolId: number };
          };
        }
      >
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>;
  };
  /**
   * Pallet `Identity`'s transaction calls
   **/
  identity: {
    /**
     * See [`Pallet::add_registrar`].
     *
     * @param {MultiAddressLike} account
     **/
    addRegistrar: GenericTxCall<
      Rv,
      (account: MultiAddressLike) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Identity';
          palletCall: {
            name: 'AddRegistrar';
            params: { account: MultiAddressLike };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_identity`].
     *
     * @param {PalletIdentityIdentityInfo} info
     **/
    setIdentity: GenericTxCall<
      Rv,
      (info: PalletIdentityIdentityInfo) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Identity';
          palletCall: {
            name: 'SetIdentity';
            params: { info: PalletIdentityIdentityInfo };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_subs`].
     *
     * @param {Array<[AccountId32Like, Data]>} subs
     **/
    setSubs: GenericTxCall<
      Rv,
      (subs: Array<[AccountId32Like, Data]>) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Identity';
          palletCall: {
            name: 'SetSubs';
            params: { subs: Array<[AccountId32Like, Data]> };
          };
        }
      >
    >;

    /**
     * See [`Pallet::clear_identity`].
     *
     **/
    clearIdentity: GenericTxCall<
      Rv,
      () => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Identity';
          palletCall: {
            name: 'ClearIdentity';
          };
        }
      >
    >;

    /**
     * See [`Pallet::request_judgement`].
     *
     * @param {number} regIndex
     * @param {bigint} maxFee
     **/
    requestJudgement: GenericTxCall<
      Rv,
      (
        regIndex: number,
        maxFee: bigint,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Identity';
          palletCall: {
            name: 'RequestJudgement';
            params: { regIndex: number; maxFee: bigint };
          };
        }
      >
    >;

    /**
     * See [`Pallet::cancel_request`].
     *
     * @param {number} regIndex
     **/
    cancelRequest: GenericTxCall<
      Rv,
      (regIndex: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Identity';
          palletCall: {
            name: 'CancelRequest';
            params: { regIndex: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_fee`].
     *
     * @param {number} index
     * @param {bigint} fee
     **/
    setFee: GenericTxCall<
      Rv,
      (
        index: number,
        fee: bigint,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Identity';
          palletCall: {
            name: 'SetFee';
            params: { index: number; fee: bigint };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_account_id`].
     *
     * @param {number} index
     * @param {MultiAddressLike} new_
     **/
    setAccountId: GenericTxCall<
      Rv,
      (
        index: number,
        new_: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Identity';
          palletCall: {
            name: 'SetAccountId';
            params: { index: number; new: MultiAddressLike };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_fields`].
     *
     * @param {number} index
     * @param {PalletIdentityBitFlags} fields
     **/
    setFields: GenericTxCall<
      Rv,
      (
        index: number,
        fields: PalletIdentityBitFlags,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Identity';
          palletCall: {
            name: 'SetFields';
            params: { index: number; fields: PalletIdentityBitFlags };
          };
        }
      >
    >;

    /**
     * See [`Pallet::provide_judgement`].
     *
     * @param {number} regIndex
     * @param {MultiAddressLike} target
     * @param {PalletIdentityJudgement} judgement
     * @param {H256} identity
     **/
    provideJudgement: GenericTxCall<
      Rv,
      (
        regIndex: number,
        target: MultiAddressLike,
        judgement: PalletIdentityJudgement,
        identity: H256,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Identity';
          palletCall: {
            name: 'ProvideJudgement';
            params: { regIndex: number; target: MultiAddressLike; judgement: PalletIdentityJudgement; identity: H256 };
          };
        }
      >
    >;

    /**
     * See [`Pallet::kill_identity`].
     *
     * @param {MultiAddressLike} target
     **/
    killIdentity: GenericTxCall<
      Rv,
      (target: MultiAddressLike) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Identity';
          palletCall: {
            name: 'KillIdentity';
            params: { target: MultiAddressLike };
          };
        }
      >
    >;

    /**
     * See [`Pallet::add_sub`].
     *
     * @param {MultiAddressLike} sub
     * @param {Data} data
     **/
    addSub: GenericTxCall<
      Rv,
      (
        sub: MultiAddressLike,
        data: Data,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Identity';
          palletCall: {
            name: 'AddSub';
            params: { sub: MultiAddressLike; data: Data };
          };
        }
      >
    >;

    /**
     * See [`Pallet::rename_sub`].
     *
     * @param {MultiAddressLike} sub
     * @param {Data} data
     **/
    renameSub: GenericTxCall<
      Rv,
      (
        sub: MultiAddressLike,
        data: Data,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Identity';
          palletCall: {
            name: 'RenameSub';
            params: { sub: MultiAddressLike; data: Data };
          };
        }
      >
    >;

    /**
     * See [`Pallet::remove_sub`].
     *
     * @param {MultiAddressLike} sub
     **/
    removeSub: GenericTxCall<
      Rv,
      (sub: MultiAddressLike) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Identity';
          palletCall: {
            name: 'RemoveSub';
            params: { sub: MultiAddressLike };
          };
        }
      >
    >;

    /**
     * See [`Pallet::quit_sub`].
     *
     **/
    quitSub: GenericTxCall<
      Rv,
      () => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Identity';
          palletCall: {
            name: 'QuitSub';
          };
        }
      >
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>;
  };
  /**
   * Pallet `CommitteeManagement`'s transaction calls
   **/
  committeeManagement: {
    /**
     * See [`Pallet::set_ban_config`].
     *
     * @param {number | undefined} minimalExpectedPerformance
     * @param {number | undefined} underperformedSessionCountThreshold
     * @param {number | undefined} cleanSessionCounterDelay
     * @param {number | undefined} banPeriod
     **/
    setBanConfig: GenericTxCall<
      Rv,
      (
        minimalExpectedPerformance: number | undefined,
        underperformedSessionCountThreshold: number | undefined,
        cleanSessionCounterDelay: number | undefined,
        banPeriod: number | undefined,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'CommitteeManagement';
          palletCall: {
            name: 'SetBanConfig';
            params: {
              minimalExpectedPerformance: number | undefined;
              underperformedSessionCountThreshold: number | undefined;
              cleanSessionCounterDelay: number | undefined;
              banPeriod: number | undefined;
            };
          };
        }
      >
    >;

    /**
     * See [`Pallet::ban_from_committee`].
     *
     * @param {AccountId32Like} banned
     * @param {BytesLike} banReason
     **/
    banFromCommittee: GenericTxCall<
      Rv,
      (
        banned: AccountId32Like,
        banReason: BytesLike,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'CommitteeManagement';
          palletCall: {
            name: 'BanFromCommittee';
            params: { banned: AccountId32Like; banReason: BytesLike };
          };
        }
      >
    >;

    /**
     * See [`Pallet::cancel_ban`].
     *
     * @param {AccountId32Like} banned
     **/
    cancelBan: GenericTxCall<
      Rv,
      (banned: AccountId32Like) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'CommitteeManagement';
          palletCall: {
            name: 'CancelBan';
            params: { banned: AccountId32Like };
          };
        }
      >
    >;

    /**
     * See [`Pallet::set_lenient_threshold`].
     *
     * @param {number} thresholdPercent
     **/
    setLenientThreshold: GenericTxCall<
      Rv,
      (thresholdPercent: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'CommitteeManagement';
          palletCall: {
            name: 'SetLenientThreshold';
            params: { thresholdPercent: number };
          };
        }
      >
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>;
  };
  /**
   * Pallet `Proxy`'s transaction calls
   **/
  proxy: {
    /**
     * See [`Pallet::proxy`].
     *
     * @param {MultiAddressLike} real
     * @param {AlephRuntimeProxyType | undefined} forceProxyType
     * @param {AlephRuntimeRuntimeCallLike} call
     **/
    proxy: GenericTxCall<
      Rv,
      (
        real: MultiAddressLike,
        forceProxyType: AlephRuntimeProxyType | undefined,
        call: AlephRuntimeRuntimeCallLike,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Proxy';
          palletCall: {
            name: 'Proxy';
            params: {
              real: MultiAddressLike;
              forceProxyType: AlephRuntimeProxyType | undefined;
              call: AlephRuntimeRuntimeCallLike;
            };
          };
        }
      >
    >;

    /**
     * See [`Pallet::add_proxy`].
     *
     * @param {MultiAddressLike} delegate
     * @param {AlephRuntimeProxyType} proxyType
     * @param {number} delay
     **/
    addProxy: GenericTxCall<
      Rv,
      (
        delegate: MultiAddressLike,
        proxyType: AlephRuntimeProxyType,
        delay: number,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Proxy';
          palletCall: {
            name: 'AddProxy';
            params: { delegate: MultiAddressLike; proxyType: AlephRuntimeProxyType; delay: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::remove_proxy`].
     *
     * @param {MultiAddressLike} delegate
     * @param {AlephRuntimeProxyType} proxyType
     * @param {number} delay
     **/
    removeProxy: GenericTxCall<
      Rv,
      (
        delegate: MultiAddressLike,
        proxyType: AlephRuntimeProxyType,
        delay: number,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Proxy';
          palletCall: {
            name: 'RemoveProxy';
            params: { delegate: MultiAddressLike; proxyType: AlephRuntimeProxyType; delay: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::remove_proxies`].
     *
     **/
    removeProxies: GenericTxCall<
      Rv,
      () => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Proxy';
          palletCall: {
            name: 'RemoveProxies';
          };
        }
      >
    >;

    /**
     * See [`Pallet::create_pure`].
     *
     * @param {AlephRuntimeProxyType} proxyType
     * @param {number} delay
     * @param {number} index
     **/
    createPure: GenericTxCall<
      Rv,
      (
        proxyType: AlephRuntimeProxyType,
        delay: number,
        index: number,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Proxy';
          palletCall: {
            name: 'CreatePure';
            params: { proxyType: AlephRuntimeProxyType; delay: number; index: number };
          };
        }
      >
    >;

    /**
     * See [`Pallet::kill_pure`].
     *
     * @param {MultiAddressLike} spawner
     * @param {AlephRuntimeProxyType} proxyType
     * @param {number} index
     * @param {number} height
     * @param {number} extIndex
     **/
    killPure: GenericTxCall<
      Rv,
      (
        spawner: MultiAddressLike,
        proxyType: AlephRuntimeProxyType,
        index: number,
        height: number,
        extIndex: number,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Proxy';
          palletCall: {
            name: 'KillPure';
            params: {
              spawner: MultiAddressLike;
              proxyType: AlephRuntimeProxyType;
              index: number;
              height: number;
              extIndex: number;
            };
          };
        }
      >
    >;

    /**
     * See [`Pallet::announce`].
     *
     * @param {MultiAddressLike} real
     * @param {H256} callHash
     **/
    announce: GenericTxCall<
      Rv,
      (
        real: MultiAddressLike,
        callHash: H256,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Proxy';
          palletCall: {
            name: 'Announce';
            params: { real: MultiAddressLike; callHash: H256 };
          };
        }
      >
    >;

    /**
     * See [`Pallet::remove_announcement`].
     *
     * @param {MultiAddressLike} real
     * @param {H256} callHash
     **/
    removeAnnouncement: GenericTxCall<
      Rv,
      (
        real: MultiAddressLike,
        callHash: H256,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Proxy';
          palletCall: {
            name: 'RemoveAnnouncement';
            params: { real: MultiAddressLike; callHash: H256 };
          };
        }
      >
    >;

    /**
     * See [`Pallet::reject_announcement`].
     *
     * @param {MultiAddressLike} delegate
     * @param {H256} callHash
     **/
    rejectAnnouncement: GenericTxCall<
      Rv,
      (
        delegate: MultiAddressLike,
        callHash: H256,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Proxy';
          palletCall: {
            name: 'RejectAnnouncement';
            params: { delegate: MultiAddressLike; callHash: H256 };
          };
        }
      >
    >;

    /**
     * See [`Pallet::proxy_announced`].
     *
     * @param {MultiAddressLike} delegate
     * @param {MultiAddressLike} real
     * @param {AlephRuntimeProxyType | undefined} forceProxyType
     * @param {AlephRuntimeRuntimeCallLike} call
     **/
    proxyAnnounced: GenericTxCall<
      Rv,
      (
        delegate: MultiAddressLike,
        real: MultiAddressLike,
        forceProxyType: AlephRuntimeProxyType | undefined,
        call: AlephRuntimeRuntimeCallLike,
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Proxy';
          palletCall: {
            name: 'ProxyAnnounced';
            params: {
              delegate: MultiAddressLike;
              real: MultiAddressLike;
              forceProxyType: AlephRuntimeProxyType | undefined;
              call: AlephRuntimeRuntimeCallLike;
            };
          };
        }
      >
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>;
  };
  /**
   * Pallet `Operations`'s transaction calls
   **/
  operations: {
    /**
     * See [`Pallet::fix_accounts_consumers_underflow`].
     *
     * @param {AccountId32Like} who
     **/
    fixAccountsConsumersUnderflow: GenericTxCall<
      Rv,
      (who: AccountId32Like) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Operations';
          palletCall: {
            name: 'FixAccountsConsumersUnderflow';
            params: { who: AccountId32Like };
          };
        }
      >
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>;
  };
}
